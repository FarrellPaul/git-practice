
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c0 71 00 20 dd 37 01 00 bf 6a 02 00 b1 37 01 00     .q. .7...j...7..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	b1 37 01 00 b1 37 01 00 b1 37 01 00 00 00 00 00     .7...7...7......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	59 32 01 00 b1 37 01 00 00 00 00 00 05 32 01 00     Y2...7.......2..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	b1 37 01 00                                         .7..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	09 33 01 00 a9 90 02 00 09 33 01 00 09 33 01 00     .3.......3...3..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	09 33 01 00 09 33 01 00 09 33 01 00 09 33 01 00     .3...3...3...3..

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	71 90 02 00 09 33 01 00 09 33 01 00 8f 90 02 00     q....3...3......
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	09 33 01 00 09 33 01 00 09 33 01 00 09 33 01 00     .3...3...3...3..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	09 33 01 00 09 33 01 00 09 33 01 00 09 33 01 00     .3...3...3...3..
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
  90:	09 33 01 00 09 33 01 00 09 33 01 00 09 33 01 00     .3...3...3...3..
			switch (*fmt) {
  a0:	09 33 01 00 09 33 01 00 09 33 01 00 09 33 01 00     .3...3...3...3..
  b0:	09 33 01 00 09 33 01 00 09 33 01 00 09 33 01 00     .3...3...3...3..
  c0:	09 33 01 00 09 33 01 00 09 33 01 00 09 33 01 00     .3...3...3...3..
  d0:	09 33 01 00 09 33 01 00 09 33 01 00 09 33 01 00     .3...3...3...3..
  e0:	09 33 01 00 09 33 01 00 09 33 01 00 09 33 01 00     .3...3...3...3..
  f0:	09 33 01 00 09 33 01 00 09 33 01 00 09 33 01 00     .3...3...3...3..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
				align = VA_STACK_ALIGN(void *);
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
			switch (*fmt) {
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00b fc98 	bl	ba54 <__udivmoddi4>
		buf = (void *) ROUND_UP(buf, align);
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
		if (is_str_arg) {
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
			int v = va_arg(ap, int);
     14a:	414d      	adcs	r5, r1

			if (buf0 != NULL) {
				*(int *)buf = v;
     14c:	eb56 060c 	adcs.w	r6, r6, ip
			}
			buf += sizeof(int);
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				arg_idx--;
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
				parsing = false;
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				continue;
     15e:	eb59 0901 	adcs.w	r9, r9, r1
				if (fmt[-1] == 'l') {
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
					if (fmt[-2] == 'l') {
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
						align = VA_STACK_ALIGN(long long);
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
				size = sizeof(void *);
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
					v.ld = va_arg(ap, long double);
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				buf = (void *) ROUND_UP(buf, align);
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
					if (BUF_OFFSET + size > len) {
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
						*(long double *)buf = v.ld;
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				buf += size;
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
				parsing = false;
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
			switch (*fmt) {
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
			if (*++fmt == '\0') {
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
			if (!parsing) {
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
				if (*fmt == '%') {
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
					arg_idx++;
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
					parsing = true;
     1c6:	ea18 0802 	ands.w	r8, r8, r2
				align = VA_STACK_ALIGN(size_t);
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
			switch (*fmt) {
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
				parsing = false;
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
			long long v = va_arg(ap, long long);
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     1ec:	ea18 0802 	ands.w	r8, r8, r2
				}
			}
			buf += sizeof(long long);
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
		} else if (size == sizeof(int)) {
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
			int v = va_arg(ap, int);
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
			if (buf0 != NULL) {
     200:	eb56 060a 	adcs.w	r6, r6, sl
		} else if (size == sizeof(long long)) {
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
			long long v = va_arg(ap, long long);
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
			s = va_arg(ap, char *);
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
			if (is_ro && !do_ro) {
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     232:	ea1a 0a02 	ands.w	sl, sl, r2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     236:	eb76 060a 	sbcs.w	r6, r6, sl
					__ASSERT(false, "String with too many arguments");
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
					__ASSERT(false, "str_ptr_pos[] too small");
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     250:	ea19 0902 	ands.w	r9, r9, r2
				if (buf0 != NULL) {
     254:	eb75 0509 	sbcs.w	r5, r5, r9
					str_ptr_pos[s_idx] = s_ptr_idx;
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
					str_ptr_arg[s_idx] = arg_idx;
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
						s_rw_cnt++;
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
					__ASSERT(false, "str_ptr_pos[] too small");
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
				if (buf0 != NULL) {
     288:	4013      	ands	r3, r2
					str_ptr_pos[s_idx] = s_ptr_idx;
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
					str_ptr_arg[s_idx] = arg_idx;
     29c:	4770      	bx	lr
					if (is_ro) {
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
						s_ro_cnt++;
     2ae:	b402      	push	{r1}
				s_idx++;
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
					if (BUF_OFFSET + size > len) {
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
			buf += sizeof(char *);
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
			switch (*fmt) {
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
				} else if (is_ro) {
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
					len += 1;
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
				} else if (rws_pos_en) {
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
					len += strlen(s) + 1 + 1;
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
		} else {
			__ASSERT(false, "unexpected size %u", size);
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
		__ASSERT(false, "too many format args");
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     322:	930e      	str	r3, [sp, #56]	; 0x38
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     332:	fbe9 0264 	umaal	r0, r2, r9, r4

	if (rws_pos_en) {
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
		for (i = 0; i < s_idx; i++) {
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
			*buf++ = str_ptr_arg[i];
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
	for (i = 0; i < s_idx; i++) {
     364:	fba9 5408 	umull	r5, r4, r9, r8
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     368:	fbea b468 	umaal	fp, r4, sl, r8
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
			if (BUF_OFFSET + 1 > len) {
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
			if (BUF_OFFSET + 1 > len) {
     384:	fbee 6568 	umaal	r6, r5, lr, r8
			*buf++ = pos;
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
		for (i = 0; i < s_idx; i++) {
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
		if (rws_pos_en) {
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
			*buf++ = str_ptr_arg[i];
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
		if (BUF_OFFSET + 1 + size > len) {
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
		*buf++ = str_ptr_pos[i];
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
		memcpy(buf, s, size);
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
		buf += size;
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
	for (i = 0; i < s_idx; i++) {
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
			size = strlen(s) + 1;
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
		return -EFAULT;
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ee:	ebb8 0804 	subs.w	r8, r8, r4
     6f2:	eb79 0904 	sbcs.w	r9, r9, r4
     6f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6fa:	f17b 0b00 	sbcs.w	fp, fp, #0
     6fe:	f170 0000 	sbcs.w	r0, r0, #0
     702:	f171 0100 	sbcs.w	r1, r1, #0
     706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     70a:	41a3      	sbcs	r3, r4
     70c:	f16c 0c00 	sbc.w	ip, ip, #0
     710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     71c:	f15b 0b00 	adcs.w	fp, fp, #0
     720:	f150 0400 	adcs.w	r4, r0, #0
     724:	f151 0500 	adcs.w	r5, r1, #0
     728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     72c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     730:	f14c 0c00 	adc.w	ip, ip, #0
     734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     73c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     740:	f15b 0300 	adcs.w	r3, fp, #0
     744:	f154 0400 	adcs.w	r4, r4, #0
     748:	f155 0500 	adcs.w	r5, r5, #0
     74c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <ocrypto_mod_p256_mul>:
     758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     75c:	b087      	sub	sp, #28
     75e:	f7ff fd9f 	bl	2a0 <ocrypto_mul256_noframe>
     762:	f8dd 8010 	ldr.w	r8, [sp, #16]
     766:	f8dd 9014 	ldr.w	r9, [sp, #20]
     76a:	f8dd a018 	ldr.w	sl, [sp, #24]
     76e:	f7ff ff87 	bl	680 <mul_reduce>
     772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     776:	f7ff ff83 	bl	680 <mul_reduce>
     77a:	b003      	add	sp, #12
     77c:	f85d 8b04 	ldr.w	r8, [sp], #4
     780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000788 <ocrypto_mod_p256_sqr>:
     788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78c:	b087      	sub	sp, #28
     78e:	f7ff fe43 	bl	418 <ocrypto_sqr256_noframe>
     792:	f8dd 8010 	ldr.w	r8, [sp, #16]
     796:	f8dd 9014 	ldr.w	r9, [sp, #20]
     79a:	f8dd a018 	ldr.w	sl, [sp, #24]
     79e:	f7ff ff6f 	bl	680 <mul_reduce>
     7a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     7a6:	f7ff ff6b 	bl	680 <mul_reduce>
     7aa:	b003      	add	sp, #12
     7ac:	f85d 8b04 	ldr.w	r8, [sp], #4
     7b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000007b8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     7b8:	4801      	ldr	r0, [pc, #4]	; (7c0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     7ba:	7800      	ldrb	r0, [r0, #0]
     7bc:	4770      	bx	lr
     7be:	0000      	.short	0x0000
     7c0:	20000028 	.word	0x20000028

000007c4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     7c4:	b570      	push	{r4, r5, r6, lr}
     7c6:	4c17      	ldr	r4, [pc, #92]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     7c8:	7860      	ldrb	r0, [r4, #1]
     7ca:	2800      	cmp	r0, #0
     7cc:	d123      	bne.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     7ce:	2001      	movs	r0, #1
     7d0:	7060      	strb	r0, [r4, #1]
     7d2:	f00b fe18 	bl	c406 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     7d6:	f06f 0527 	mvn.w	r5, #39	; 0x27
     7da:	b928      	cbnz	r0, 7e8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     7dc:	f00b fe49 	bl	c472 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     7e0:	b910      	cbnz	r0, 7e8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     7e2:	f00b fe50 	bl	c486 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     7e6:	b120      	cbz	r0, 7f2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
     7e8:	480f      	ldr	r0, [pc, #60]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     7ea:	6060      	str	r0, [r4, #4]
     7ec:	70a5      	strb	r5, [r4, #2]
     7ee:	2008      	movs	r0, #8
     7f0:	e010      	b.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     7f2:	f00b fddd 	bl	c3b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     7f6:	b940      	cbnz	r0, 80a <CONFIG_ISR_STACK_SIZE+0xa>
     7f8:	f00b fde4 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     7fc:	b928      	cbnz	r0, 80a <CONFIG_ISR_STACK_SIZE+0xa>
     7fe:	f00b fdf8 	bl	c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     802:	b910      	cbnz	r0, 80a <CONFIG_ISR_STACK_SIZE+0xa>
     804:	f00b fe09 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     808:	b130      	cbz	r0, 818 <CONFIG_ISR_STACK_SIZE+0x18>
     80a:	4807      	ldr	r0, [pc, #28]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     80c:	3031      	adds	r0, #49	; 0x31
     80e:	6060      	str	r0, [r4, #4]
     810:	70a5      	strb	r5, [r4, #2]
     812:	2004      	movs	r0, #4
     814:	70e0      	strb	r0, [r4, #3]
     816:	bd70      	pop	{r4, r5, r6, pc}
     818:	f44f 718f 	mov.w	r1, #286	; 0x11e
     81c:	2074      	movs	r0, #116	; 0x74
     81e:	f003 fbc7 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     822:	0000      	.short	0x0000
     824:	20000028 	.word	0x20000028
     828:	00010734 	.word	0x00010734

0000082c <mpsl_tx_power_radio_supported_power_adjust>:
     82c:	4908      	ldr	r1, [pc, #32]	; (850 <__z_interrupt_stack_SIZEOF+0x10>)
     82e:	f991 2003 	ldrsb.w	r2, [r1, #3]
     832:	4290      	cmp	r0, r2
     834:	da03      	bge.n	83e <mpsl_tx_power_radio_supported_power_adjust+0x12>
     836:	f991 2002 	ldrsb.w	r2, [r1, #2]
     83a:	4290      	cmp	r0, r2
     83c:	dc01      	bgt.n	842 <__z_interrupt_stack_SIZEOF+0x2>
     83e:	4610      	mov	r0, r2
     840:	4770      	bx	lr
     842:	6849      	ldr	r1, [r1, #4]
     844:	1a80      	subs	r0, r0, r2
     846:	5c08      	ldrb	r0, [r1, r0]
     848:	4902      	ldr	r1, [pc, #8]	; (854 <__z_interrupt_stack_SIZEOF+0x14>)
     84a:	5608      	ldrsb	r0, [r1, r0]
     84c:	4770      	bx	lr
     84e:	0000      	.short	0x0000
     850:	20000028 	.word	0x20000028
     854:	00010726 	.word	0x00010726

00000858 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     85c:	461c      	mov	r4, r3
     85e:	4690      	mov	r8, r2
     860:	460d      	mov	r5, r1
     862:	4606      	mov	r6, r0
     864:	f06f 0715 	mvn.w	r7, #21
     868:	2804      	cmp	r0, #4
     86a:	d804      	bhi.n	876 <__data_size+0x1a>
     86c:	b11c      	cbz	r4, 876 <__data_size+0x1a>
     86e:	f00b fa41 	bl	bcf4 <__udivmoddi4+0x2a0>
     872:	42a8      	cmp	r0, r5
     874:	d802      	bhi.n	87c <__data_size+0x20>
     876:	4638      	mov	r0, r7
     878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     87c:	4805      	ldr	r0, [pc, #20]	; (894 <__data_size+0x38>)
     87e:	4642      	mov	r2, r8
     880:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     884:	b118      	cbz	r0, 88e <__data_size+0x32>
     886:	5740      	ldrsb	r0, [r0, r5]
     888:	4282      	cmp	r2, r0
     88a:	dd00      	ble.n	88e <__data_size+0x32>
     88c:	4602      	mov	r2, r0
     88e:	7022      	strb	r2, [r4, #0]
     890:	2000      	movs	r0, #0
     892:	e7f1      	b.n	878 <__data_size+0x1c>
     894:	20000c48 	.word	0x20000c48
     898:	2800      	cmp	r0, #0
     89a:	d019      	beq.n	8d0 <CONFIG_BT_RX_STACK_SIZE+0x38>
     89c:	7803      	ldrb	r3, [r0, #0]
     89e:	4913      	ldr	r1, [pc, #76]	; (8ec <CONFIG_BT_RX_STACK_SIZE+0x54>)
     8a0:	4a13      	ldr	r2, [pc, #76]	; (8f0 <CONFIG_BT_RX_STACK_SIZE+0x58>)
     8a2:	b113      	cbz	r3, 8aa <CONFIG_BT_RX_STACK_SIZE+0x12>
     8a4:	2b01      	cmp	r3, #1
     8a6:	d00e      	beq.n	8c6 <CONFIG_BT_RX_STACK_SIZE+0x2e>
     8a8:	e011      	b.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8aa:	7903      	ldrb	r3, [r0, #4]
     8ac:	2b01      	cmp	r3, #1
     8ae:	d000      	beq.n	8b2 <CONFIG_BT_RX_STACK_SIZE+0x1a>
     8b0:	b96b      	cbnz	r3, 8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8b2:	7943      	ldrb	r3, [r0, #5]
     8b4:	b10b      	cbz	r3, 8ba <CONFIG_BT_RX_STACK_SIZE+0x22>
     8b6:	2b01      	cmp	r3, #1
     8b8:	d109      	bne.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8ba:	6883      	ldr	r3, [r0, #8]
     8bc:	3b64      	subs	r3, #100	; 0x64
     8be:	428b      	cmp	r3, r1
     8c0:	d205      	bcs.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8c2:	68c0      	ldr	r0, [r0, #12]
     8c4:	e00e      	b.n	8e4 <CONFIG_BT_RX_STACK_SIZE+0x4c>
     8c6:	7903      	ldrb	r3, [r0, #4]
     8c8:	2b01      	cmp	r3, #1
     8ca:	d002      	beq.n	8d2 <CONFIG_BT_RX_STACK_SIZE+0x3a>
     8cc:	b10b      	cbz	r3, 8d2 <CONFIG_BT_RX_STACK_SIZE+0x3a>
     8ce:	2000      	movs	r0, #0
     8d0:	4770      	bx	lr
     8d2:	7943      	ldrb	r3, [r0, #5]
     8d4:	b10b      	cbz	r3, 8da <CONFIG_BT_RX_STACK_SIZE+0x42>
     8d6:	2b01      	cmp	r3, #1
     8d8:	d1f9      	bne.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8da:	68c3      	ldr	r3, [r0, #12]
     8dc:	3b64      	subs	r3, #100	; 0x64
     8de:	428b      	cmp	r3, r1
     8e0:	d2f5      	bcs.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8e2:	6880      	ldr	r0, [r0, #8]
     8e4:	4290      	cmp	r0, r2
     8e6:	d8f2      	bhi.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8e8:	2001      	movs	r0, #1
     8ea:	4770      	bx	lr
     8ec:	0001863d 	.word	0x0001863d
     8f0:	0f423fff 	.word	0x0f423fff
     8f4:	b510      	push	{r4, lr}
     8f6:	4c05      	ldr	r4, [pc, #20]	; (90c <CONFIG_BT_RX_STACK_SIZE+0x74>)
     8f8:	6820      	ldr	r0, [r4, #0]
     8fa:	b110      	cbz	r0, 902 <CONFIG_BT_RX_STACK_SIZE+0x6a>
     8fc:	4780      	blx	r0
     8fe:	2000      	movs	r0, #0
     900:	6020      	str	r0, [r4, #0]
     902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     906:	f002 b863 	b.w	29d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     90a:	0000      	.short	0x0000
     90c:	20000030 	.word	0x20000030

00000910 <mpsl_timeslot_session_open>:
     910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     914:	460e      	mov	r6, r1
     916:	0005      	movs	r5, r0
     918:	d004      	beq.n	924 <mpsl_timeslot_session_open+0x14>
     91a:	f000 f847 	bl	9ac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     91e:	4607      	mov	r7, r0
     920:	2400      	movs	r4, #0
     922:	e00b      	b.n	93c <mpsl_timeslot_session_open+0x2c>
     924:	f06f 0015 	mvn.w	r0, #21
     928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     92c:	4620      	mov	r0, r4
     92e:	f000 f843 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     932:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
     936:	b130      	cbz	r0, 946 <mpsl_timeslot_session_open+0x36>
     938:	1c64      	adds	r4, r4, #1
     93a:	b2e4      	uxtb	r4, r4
     93c:	42bc      	cmp	r4, r7
     93e:	d3f5      	bcc.n	92c <mpsl_timeslot_session_open+0x1c>
     940:	f06f 000b 	mvn.w	r0, #11
     944:	e7f0      	b.n	928 <mpsl_timeslot_session_open+0x18>
     946:	4627      	mov	r7, r4
     948:	2cff      	cmp	r4, #255	; 0xff
     94a:	d0f9      	beq.n	940 <mpsl_timeslot_session_open+0x30>
     94c:	4620      	mov	r0, r4
     94e:	f000 f833 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     952:	4604      	mov	r4, r0
     954:	f00b fb9a 	bl	c08c <__udivmoddi4+0x638>
     958:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
     95c:	4621      	mov	r1, r4
     95e:	4808      	ldr	r0, [pc, #32]	; (980 <mpsl_timeslot_session_open+0x70>)
     960:	f002 f80e 	bl	2980 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     964:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
     968:	2820      	cmp	r0, #32
     96a:	d006      	beq.n	97a <mpsl_timeslot_session_open+0x6a>
     96c:	2001      	movs	r0, #1
     96e:	6225      	str	r5, [r4, #32]
     970:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
     974:	7037      	strb	r7, [r6, #0]
     976:	2000      	movs	r0, #0
     978:	e7d6      	b.n	928 <mpsl_timeslot_session_open+0x18>
     97a:	f06f 0022 	mvn.w	r0, #34	; 0x22
     97e:	e7d3      	b.n	928 <mpsl_timeslot_session_open+0x18>
     980:	0000bdb7 	.word	0x0000bdb7

00000984 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     984:	b510      	push	{r4, lr}
     986:	0782      	lsls	r2, r0, #30
     988:	d002      	beq.n	990 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     98a:	f06f 000d 	mvn.w	r0, #13
     98e:	bd10      	pop	{r4, pc}
     990:	4a05      	ldr	r2, [pc, #20]	; (9a8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     992:	7011      	strb	r1, [r2, #0]
     994:	6050      	str	r0, [r2, #4]
     996:	b128      	cbz	r0, 9a4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     998:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     99c:	010a      	lsls	r2, r1, #4
     99e:	2100      	movs	r1, #0
     9a0:	f00b fdf5 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     9a4:	2000      	movs	r0, #0
     9a6:	bd10      	pop	{r4, pc}
     9a8:	20000034 	.word	0x20000034

000009ac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     9ac:	4801      	ldr	r0, [pc, #4]	; (9b4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     9ae:	7800      	ldrb	r0, [r0, #0]
     9b0:	4770      	bx	lr
     9b2:	0000      	.short	0x0000
     9b4:	20000034 	.word	0x20000034

000009b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     9b8:	4905      	ldr	r1, [pc, #20]	; (9d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     9ba:	780a      	ldrb	r2, [r1, #0]
     9bc:	4290      	cmp	r0, r2
     9be:	d301      	bcc.n	9c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     9c0:	2000      	movs	r0, #0
     9c2:	4770      	bx	lr
     9c4:	6849      	ldr	r1, [r1, #4]
     9c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     9ca:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     9ce:	4770      	bx	lr
     9d0:	20000034 	.word	0x20000034

000009d4 <MPSL_IRQ_RADIO_Handler>:
     9d4:	490e      	ldr	r1, [pc, #56]	; (a10 <MPSL_IRQ_RADIO_Handler+0x3c>)
     9d6:	b510      	push	{r4, lr}
     9d8:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     9dc:	2820      	cmp	r0, #32
     9de:	d012      	beq.n	a06 <MPSL_IRQ_RADIO_Handler+0x32>
     9e0:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     9e4:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     9e8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     9ec:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     9f0:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     9f4:	6840      	ldr	r0, [r0, #4]
     9f6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     9fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     a02:	2104      	movs	r1, #4
     a04:	4710      	bx	r2
     a06:	f640 01bc 	movw	r1, #2236	; 0x8bc
     a0a:	2070      	movs	r0, #112	; 0x70
     a0c:	f003 fad0 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a10:	2000105c 	.word	0x2000105c
     a14:	b570      	push	{r4, r5, r6, lr}
     a16:	4605      	mov	r5, r0
     a18:	2a20      	cmp	r2, #32
     a1a:	d028      	beq.n	a6e <MPSL_IRQ_RADIO_Handler+0x9a>
     a1c:	4819      	ldr	r0, [pc, #100]	; (a84 <MPSL_IRQ_RADIO_Handler+0xb0>)
     a1e:	4c1a      	ldr	r4, [pc, #104]	; (a88 <MPSL_IRQ_RADIO_Handler+0xb4>)
     a20:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     a24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     a28:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     a2c:	4423      	add	r3, r4
     a2e:	2920      	cmp	r1, #32
     a30:	d022      	beq.n	a78 <MPSL_IRQ_RADIO_Handler+0xa4>
     a32:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     a36:	7840      	ldrb	r0, [r0, #1]
     a38:	784c      	ldrb	r4, [r1, #1]
     a3a:	7048      	strb	r0, [r1, #1]
     a3c:	4620      	mov	r0, r4
     a3e:	4601      	mov	r1, r0
     a40:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     a44:	4291      	cmp	r1, r2
     a46:	7005      	strb	r5, [r0, #0]
     a48:	7840      	ldrb	r0, [r0, #1]
     a4a:	d1f8      	bne.n	a3e <MPSL_IRQ_RADIO_Handler+0x6a>
     a4c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     a50:	2a20      	cmp	r2, #32
     a52:	bf1a      	itte	ne
     a54:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     a58:	7054      	strbne	r4, [r2, #1]
     a5a:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     a5e:	2220      	movs	r2, #32
     a60:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     a64:	f88c 2001 	strb.w	r2, [ip, #1]
     a68:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     a6c:	bd70      	pop	{r4, r5, r6, pc}
     a6e:	f44f 7126 	mov.w	r1, #664	; 0x298
     a72:	2070      	movs	r0, #112	; 0x70
     a74:	f003 fa9c 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a78:	f893 4020 	ldrb.w	r4, [r3, #32]
     a7c:	7840      	ldrb	r0, [r0, #1]
     a7e:	f883 0020 	strb.w	r0, [r3, #32]
     a82:	e7db      	b.n	a3c <MPSL_IRQ_RADIO_Handler+0x68>
     a84:	20000fdc 	.word	0x20000fdc
     a88:	2000105c 	.word	0x2000105c
     a8c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a90:	b08d      	sub	sp, #52	; 0x34
     a92:	4615      	mov	r5, r2
     a94:	460c      	mov	r4, r1
     a96:	f002 f9e7 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     a9a:	4428      	add	r0, r5
     a9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     aa0:	9008      	str	r0, [sp, #32]
     aa2:	6821      	ldr	r1, [r4, #0]
     aa4:	1a08      	subs	r0, r1, r0
     aa6:	0200      	lsls	r0, r0, #8
     aa8:	17c1      	asrs	r1, r0, #31
     aaa:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     aae:	1200      	asrs	r0, r0, #8
     ab0:	2800      	cmp	r0, #0
     ab2:	f300 80f0 	bgt.w	c96 <MPSL_IRQ_RADIO_Handler+0x2c2>
     ab6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
     aba:	48cd      	ldr	r0, [pc, #820]	; (df0 <MPSL_IRQ_RADIO_Handler+0x41c>)
     abc:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     ac0:	4408      	add	r0, r1
     ac2:	9009      	str	r0, [sp, #36]	; 0x24
     ac4:	f890 5020 	ldrb.w	r5, [r0, #32]
     ac8:	2020      	movs	r0, #32
     aca:	4eca      	ldr	r6, [pc, #808]	; (df4 <MPSL_IRQ_RADIO_Handler+0x420>)
     acc:	f10d 0a18 	add.w	sl, sp, #24
     ad0:	f10d 091c 	add.w	r9, sp, #28
     ad4:	f88d 0018 	strb.w	r0, [sp, #24]
     ad8:	2d20      	cmp	r5, #32
     ada:	bf1c      	itt	ne
     adc:	48c6      	ldrne	r0, [pc, #792]	; (df8 <MPSL_IRQ_RADIO_Handler+0x424>)
     ade:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     ae2:	d038      	beq.n	b56 <MPSL_IRQ_RADIO_Handler+0x182>
     ae4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     ae8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     aec:	f100 0108 	add.w	r1, r0, #8
     af0:	68c0      	ldr	r0, [r0, #12]
     af2:	6827      	ldr	r7, [r4, #0]
     af4:	1a38      	subs	r0, r7, r0
     af6:	0200      	lsls	r0, r0, #8
     af8:	17c2      	asrs	r2, r0, #31
     afa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     afe:	1200      	asrs	r0, r0, #8
     b00:	d429      	bmi.n	b56 <MPSL_IRQ_RADIO_Handler+0x182>
     b02:	89e0      	ldrh	r0, [r4, #14]
     b04:	b300      	cbz	r0, b48 <MPSL_IRQ_RADIO_Handler+0x174>
     b06:	89c8      	ldrh	r0, [r1, #14]
     b08:	b9f0      	cbnz	r0, b48 <MPSL_IRQ_RADIO_Handler+0x174>
     b0a:	6808      	ldr	r0, [r1, #0]
     b0c:	9003      	str	r0, [sp, #12]
     b0e:	f003 f8a5 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     b12:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     b16:	bf08      	it	eq
     b18:	200d      	moveq	r0, #13
     b1a:	d00b      	beq.n	b34 <MPSL_IRQ_RADIO_Handler+0x160>
     b1c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     b20:	3856      	subs	r0, #86	; 0x56
     b22:	bf08      	it	eq
     b24:	201c      	moveq	r0, #28
     b26:	d005      	beq.n	b34 <MPSL_IRQ_RADIO_Handler+0x160>
     b28:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     b2c:	389f      	subs	r0, #159	; 0x9f
     b2e:	bf14      	ite	ne
     b30:	2000      	movne	r0, #0
     b32:	2032      	moveq	r0, #50	; 0x32
     b34:	1c41      	adds	r1, r0, #1
     b36:	9803      	ldr	r0, [sp, #12]
     b38:	1a38      	subs	r0, r7, r0
     b3a:	0200      	lsls	r0, r0, #8
     b3c:	17c2      	asrs	r2, r0, #31
     b3e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     b42:	1200      	asrs	r0, r0, #8
     b44:	4288      	cmp	r0, r1
     b46:	db06      	blt.n	b56 <MPSL_IRQ_RADIO_Handler+0x182>
     b48:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     b4c:	f88a 5000 	strb.w	r5, [sl]
     b50:	7845      	ldrb	r5, [r0, #1]
     b52:	2d20      	cmp	r5, #32
     b54:	d1c6      	bne.n	ae4 <MPSL_IRQ_RADIO_Handler+0x110>
     b56:	f89a 0000 	ldrb.w	r0, [sl]
     b5a:	f889 0000 	strb.w	r0, [r9]
     b5e:	2d20      	cmp	r5, #32
     b60:	bf1c      	itt	ne
     b62:	48a5      	ldrne	r0, [pc, #660]	; (df8 <MPSL_IRQ_RADIO_Handler+0x424>)
     b64:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     b68:	f000 813e 	beq.w	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     b6c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     b70:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     b74:	6861      	ldr	r1, [r4, #4]
     b76:	f8d7 8008 	ldr.w	r8, [r7, #8]
     b7a:	f107 0008 	add.w	r0, r7, #8
     b7e:	eba8 0101 	sub.w	r1, r8, r1
     b82:	0209      	lsls	r1, r1, #8
     b84:	17ca      	asrs	r2, r1, #31
     b86:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b8a:	1209      	asrs	r1, r1, #8
     b8c:	d427      	bmi.n	bde <MPSL_IRQ_RADIO_Handler+0x20a>
     b8e:	89c0      	ldrh	r0, [r0, #14]
     b90:	2800      	cmp	r0, #0
     b92:	f000 8129 	beq.w	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     b96:	89e0      	ldrh	r0, [r4, #14]
     b98:	2800      	cmp	r0, #0
     b9a:	f040 8125 	bne.w	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     b9e:	f8d4 a000 	ldr.w	sl, [r4]
     ba2:	f003 f85b 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     ba6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     baa:	bf08      	it	eq
     bac:	200d      	moveq	r0, #13
     bae:	d00b      	beq.n	bc8 <MPSL_IRQ_RADIO_Handler+0x1f4>
     bb0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     bb4:	3856      	subs	r0, #86	; 0x56
     bb6:	bf08      	it	eq
     bb8:	201c      	moveq	r0, #28
     bba:	d005      	beq.n	bc8 <MPSL_IRQ_RADIO_Handler+0x1f4>
     bbc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     bc0:	389f      	subs	r0, #159	; 0x9f
     bc2:	bf14      	ite	ne
     bc4:	2000      	movne	r0, #0
     bc6:	2032      	moveq	r0, #50	; 0x32
     bc8:	1c41      	adds	r1, r0, #1
     bca:	eba8 000a 	sub.w	r0, r8, sl
     bce:	0200      	lsls	r0, r0, #8
     bd0:	17c2      	asrs	r2, r0, #31
     bd2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     bd6:	1200      	asrs	r0, r0, #8
     bd8:	4288      	cmp	r0, r1
     bda:	f280 8105 	bge.w	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     bde:	f889 5000 	strb.w	r5, [r9]
     be2:	7e38      	ldrb	r0, [r7, #24]
     be4:	7c21      	ldrb	r1, [r4, #16]
     be6:	4288      	cmp	r0, r1
     be8:	d906      	bls.n	bf8 <MPSL_IRQ_RADIO_Handler+0x224>
     bea:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     bee:	7845      	ldrb	r5, [r0, #1]
     bf0:	2d20      	cmp	r5, #32
     bf2:	d1bb      	bne.n	b6c <MPSL_IRQ_RADIO_Handler+0x198>
     bf4:	f000 b8f8 	b.w	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     bf8:	f89d 001c 	ldrb.w	r0, [sp, #28]
     bfc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     c00:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     c04:	8ac1      	ldrh	r1, [r0, #22]
     c06:	68c5      	ldr	r5, [r0, #12]
     c08:	bbe1      	cbnz	r1, c84 <MPSL_IRQ_RADIO_Handler+0x2b0>
     c0a:	89e1      	ldrh	r1, [r4, #14]
     c0c:	b3d1      	cbz	r1, c84 <MPSL_IRQ_RADIO_Handler+0x2b0>
     c0e:	6887      	ldr	r7, [r0, #8]
     c10:	f003 f824 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     c14:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     c18:	bf08      	it	eq
     c1a:	200d      	moveq	r0, #13
     c1c:	d00b      	beq.n	c36 <MPSL_IRQ_RADIO_Handler+0x262>
     c1e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     c22:	3856      	subs	r0, #86	; 0x56
     c24:	bf08      	it	eq
     c26:	201c      	moveq	r0, #28
     c28:	d005      	beq.n	c36 <MPSL_IRQ_RADIO_Handler+0x262>
     c2a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     c2e:	389f      	subs	r0, #159	; 0x9f
     c30:	bf14      	ite	ne
     c32:	2000      	movne	r0, #0
     c34:	2032      	moveq	r0, #50	; 0x32
     c36:	1c41      	adds	r1, r0, #1
     c38:	1be8      	subs	r0, r5, r7
     c3a:	0200      	lsls	r0, r0, #8
     c3c:	17c2      	asrs	r2, r0, #31
     c3e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c42:	1200      	asrs	r0, r0, #8
     c44:	4288      	cmp	r0, r1
     c46:	da1d      	bge.n	c84 <MPSL_IRQ_RADIO_Handler+0x2b0>
     c48:	f003 f808 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     c4c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     c50:	bf08      	it	eq
     c52:	200d      	moveq	r0, #13
     c54:	d00b      	beq.n	c6e <MPSL_IRQ_RADIO_Handler+0x29a>
     c56:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     c5a:	3856      	subs	r0, #86	; 0x56
     c5c:	bf08      	it	eq
     c5e:	201c      	moveq	r0, #28
     c60:	d005      	beq.n	c6e <MPSL_IRQ_RADIO_Handler+0x29a>
     c62:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     c66:	389f      	subs	r0, #159	; 0x9f
     c68:	bf14      	ite	ne
     c6a:	2000      	movne	r0, #0
     c6c:	2032      	moveq	r0, #50	; 0x32
     c6e:	f89d 101c 	ldrb.w	r1, [sp, #28]
     c72:	1c40      	adds	r0, r0, #1
     c74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     c78:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     c7c:	6889      	ldr	r1, [r1, #8]
     c7e:	4408      	add	r0, r1
     c80:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     c84:	9808      	ldr	r0, [sp, #32]
     c86:	1a28      	subs	r0, r5, r0
     c88:	0200      	lsls	r0, r0, #8
     c8a:	17c1      	asrs	r1, r0, #31
     c8c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     c90:	1200      	asrs	r0, r0, #8
     c92:	2800      	cmp	r0, #0
     c94:	dd03      	ble.n	c9e <MPSL_IRQ_RADIO_Handler+0x2ca>
     c96:	b011      	add	sp, #68	; 0x44
     c98:	2000      	movs	r0, #0
     c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c9e:	6820      	ldr	r0, [r4, #0]
     ca0:	42a8      	cmp	r0, r5
     ca2:	d902      	bls.n	caa <MPSL_IRQ_RADIO_Handler+0x2d6>
     ca4:	68a1      	ldr	r1, [r4, #8]
     ca6:	1c49      	adds	r1, r1, #1
     ca8:	60a1      	str	r1, [r4, #8]
     caa:	6861      	ldr	r1, [r4, #4]
     cac:	f10d 0a18 	add.w	sl, sp, #24
     cb0:	1a08      	subs	r0, r1, r0
     cb2:	4428      	add	r0, r5
     cb4:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     cb8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     cbc:	e9c4 1000 	strd	r1, r0, [r4]
     cc0:	9810      	ldr	r0, [sp, #64]	; 0x40
     cc2:	900b      	str	r0, [sp, #44]	; 0x2c
     cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
     cc6:	f10d 081c 	add.w	r8, sp, #28
     cca:	f890 5020 	ldrb.w	r5, [r0, #32]
     cce:	2020      	movs	r0, #32
     cd0:	f88d 0018 	strb.w	r0, [sp, #24]
     cd4:	2d20      	cmp	r5, #32
     cd6:	d03c      	beq.n	d52 <MPSL_IRQ_RADIO_Handler+0x37e>
     cd8:	4947      	ldr	r1, [pc, #284]	; (df8 <MPSL_IRQ_RADIO_Handler+0x424>)
     cda:	980b      	ldr	r0, [sp, #44]	; 0x2c
     cdc:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
     ce0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     ce4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     ce8:	f100 0108 	add.w	r1, r0, #8
     cec:	68c0      	ldr	r0, [r0, #12]
     cee:	6827      	ldr	r7, [r4, #0]
     cf0:	1a38      	subs	r0, r7, r0
     cf2:	0200      	lsls	r0, r0, #8
     cf4:	17c2      	asrs	r2, r0, #31
     cf6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     cfa:	1200      	asrs	r0, r0, #8
     cfc:	d429      	bmi.n	d52 <MPSL_IRQ_RADIO_Handler+0x37e>
     cfe:	89e0      	ldrh	r0, [r4, #14]
     d00:	b300      	cbz	r0, d44 <MPSL_IRQ_RADIO_Handler+0x370>
     d02:	89c8      	ldrh	r0, [r1, #14]
     d04:	b9f0      	cbnz	r0, d44 <MPSL_IRQ_RADIO_Handler+0x370>
     d06:	f8d1 9000 	ldr.w	r9, [r1]
     d0a:	f002 ffa7 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     d0e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     d12:	bf08      	it	eq
     d14:	200d      	moveq	r0, #13
     d16:	d00b      	beq.n	d30 <MPSL_IRQ_RADIO_Handler+0x35c>
     d18:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     d1c:	3856      	subs	r0, #86	; 0x56
     d1e:	bf08      	it	eq
     d20:	201c      	moveq	r0, #28
     d22:	d005      	beq.n	d30 <MPSL_IRQ_RADIO_Handler+0x35c>
     d24:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     d28:	389f      	subs	r0, #159	; 0x9f
     d2a:	bf14      	ite	ne
     d2c:	2000      	movne	r0, #0
     d2e:	2032      	moveq	r0, #50	; 0x32
     d30:	1c41      	adds	r1, r0, #1
     d32:	eba7 0009 	sub.w	r0, r7, r9
     d36:	0200      	lsls	r0, r0, #8
     d38:	17c2      	asrs	r2, r0, #31
     d3a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d3e:	1200      	asrs	r0, r0, #8
     d40:	4288      	cmp	r0, r1
     d42:	db06      	blt.n	d52 <MPSL_IRQ_RADIO_Handler+0x37e>
     d44:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     d48:	f88a 5000 	strb.w	r5, [sl]
     d4c:	7845      	ldrb	r5, [r0, #1]
     d4e:	2d20      	cmp	r5, #32
     d50:	d1c6      	bne.n	ce0 <MPSL_IRQ_RADIO_Handler+0x30c>
     d52:	f89a 0000 	ldrb.w	r0, [sl]
     d56:	f888 0000 	strb.w	r0, [r8]
     d5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
     d5c:	2d20      	cmp	r5, #32
     d5e:	bf1c      	itt	ne
     d60:	4925      	ldrne	r1, [pc, #148]	; (df8 <MPSL_IRQ_RADIO_Handler+0x424>)
     d62:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
     d66:	d03f      	beq.n	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     d68:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     d6c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     d70:	6860      	ldr	r0, [r4, #4]
     d72:	f8d7 9008 	ldr.w	r9, [r7, #8]
     d76:	f107 0108 	add.w	r1, r7, #8
     d7a:	eba9 0000 	sub.w	r0, r9, r0
     d7e:	0200      	lsls	r0, r0, #8
     d80:	17c2      	asrs	r2, r0, #31
     d82:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d86:	1200      	asrs	r0, r0, #8
     d88:	d422      	bmi.n	dd0 <MPSL_IRQ_RADIO_Handler+0x3fc>
     d8a:	89c8      	ldrh	r0, [r1, #14]
     d8c:	b360      	cbz	r0, de8 <MPSL_IRQ_RADIO_Handler+0x414>
     d8e:	89e0      	ldrh	r0, [r4, #14]
     d90:	bb50      	cbnz	r0, de8 <MPSL_IRQ_RADIO_Handler+0x414>
     d92:	f8d4 a000 	ldr.w	sl, [r4]
     d96:	f002 ff61 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     d9a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     d9e:	bf08      	it	eq
     da0:	200d      	moveq	r0, #13
     da2:	d00b      	beq.n	dbc <MPSL_IRQ_RADIO_Handler+0x3e8>
     da4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     da8:	3856      	subs	r0, #86	; 0x56
     daa:	bf08      	it	eq
     dac:	201c      	moveq	r0, #28
     dae:	d005      	beq.n	dbc <MPSL_IRQ_RADIO_Handler+0x3e8>
     db0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     db4:	389f      	subs	r0, #159	; 0x9f
     db6:	bf14      	ite	ne
     db8:	2000      	movne	r0, #0
     dba:	2032      	moveq	r0, #50	; 0x32
     dbc:	1c41      	adds	r1, r0, #1
     dbe:	eba9 000a 	sub.w	r0, r9, sl
     dc2:	0200      	lsls	r0, r0, #8
     dc4:	17c2      	asrs	r2, r0, #31
     dc6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     dca:	1200      	asrs	r0, r0, #8
     dcc:	4288      	cmp	r0, r1
     dce:	da0b      	bge.n	de8 <MPSL_IRQ_RADIO_Handler+0x414>
     dd0:	f888 5000 	strb.w	r5, [r8]
     dd4:	7e38      	ldrb	r0, [r7, #24]
     dd6:	7c21      	ldrb	r1, [r4, #16]
     dd8:	4288      	cmp	r0, r1
     dda:	f67f af0d 	bls.w	bf8 <MPSL_IRQ_RADIO_Handler+0x224>
     dde:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     de2:	7845      	ldrb	r5, [r0, #1]
     de4:	2d20      	cmp	r5, #32
     de6:	d1bf      	bne.n	d68 <MPSL_IRQ_RADIO_Handler+0x394>
     de8:	b011      	add	sp, #68	; 0x44
     dea:	2001      	movs	r0, #1
     dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     df0:	2000105c 	.word	0x2000105c
     df4:	20000c5c 	.word	0x20000c5c
     df8:	20000fdc 	.word	0x20000fdc
     dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e00:	460f      	mov	r7, r1
     e02:	4606      	mov	r6, r0
     e04:	eb01 0047 	add.w	r0, r1, r7, lsl #1
     e08:	494b      	ldr	r1, [pc, #300]	; (f38 <MPSL_IRQ_RADIO_Handler+0x564>)
     e0a:	4699      	mov	r9, r3
     e0c:	4408      	add	r0, r1
     e0e:	4692      	mov	sl, r2
     e10:	f890 4020 	ldrb.w	r4, [r0, #32]
     e14:	2020      	movs	r0, #32
     e16:	7010      	strb	r0, [r2, #0]
     e18:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
     e1c:	2c20      	cmp	r4, #32
     e1e:	bf1c      	itt	ne
     e20:	4846      	ldrne	r0, [pc, #280]	; (f3c <MPSL_IRQ_RADIO_Handler+0x568>)
     e22:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     e26:	d038      	beq.n	e9a <MPSL_IRQ_RADIO_Handler+0x4c6>
     e28:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     e2c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
     e30:	f100 0108 	add.w	r1, r0, #8
     e34:	68c0      	ldr	r0, [r0, #12]
     e36:	6835      	ldr	r5, [r6, #0]
     e38:	1a28      	subs	r0, r5, r0
     e3a:	0200      	lsls	r0, r0, #8
     e3c:	17c2      	asrs	r2, r0, #31
     e3e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e42:	1200      	asrs	r0, r0, #8
     e44:	d429      	bmi.n	e9a <MPSL_IRQ_RADIO_Handler+0x4c6>
     e46:	89f0      	ldrh	r0, [r6, #14]
     e48:	b300      	cbz	r0, e8c <MPSL_IRQ_RADIO_Handler+0x4b8>
     e4a:	89c8      	ldrh	r0, [r1, #14]
     e4c:	b9f0      	cbnz	r0, e8c <MPSL_IRQ_RADIO_Handler+0x4b8>
     e4e:	6808      	ldr	r0, [r1, #0]
     e50:	9000      	str	r0, [sp, #0]
     e52:	f002 ff03 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     e56:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     e5a:	bf08      	it	eq
     e5c:	200d      	moveq	r0, #13
     e5e:	d00b      	beq.n	e78 <MPSL_IRQ_RADIO_Handler+0x4a4>
     e60:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     e64:	3856      	subs	r0, #86	; 0x56
     e66:	bf08      	it	eq
     e68:	201c      	moveq	r0, #28
     e6a:	d005      	beq.n	e78 <MPSL_IRQ_RADIO_Handler+0x4a4>
     e6c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     e70:	389f      	subs	r0, #159	; 0x9f
     e72:	bf14      	ite	ne
     e74:	2000      	movne	r0, #0
     e76:	2032      	moveq	r0, #50	; 0x32
     e78:	1c41      	adds	r1, r0, #1
     e7a:	9800      	ldr	r0, [sp, #0]
     e7c:	1a28      	subs	r0, r5, r0
     e7e:	0200      	lsls	r0, r0, #8
     e80:	17c2      	asrs	r2, r0, #31
     e82:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e86:	1200      	asrs	r0, r0, #8
     e88:	4288      	cmp	r0, r1
     e8a:	db06      	blt.n	e9a <MPSL_IRQ_RADIO_Handler+0x4c6>
     e8c:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
     e90:	f88a 4000 	strb.w	r4, [sl]
     e94:	7844      	ldrb	r4, [r0, #1]
     e96:	2c20      	cmp	r4, #32
     e98:	d1c6      	bne.n	e28 <MPSL_IRQ_RADIO_Handler+0x454>
     e9a:	f89a 0000 	ldrb.w	r0, [sl]
     e9e:	f889 0000 	strb.w	r0, [r9]
     ea2:	2c20      	cmp	r4, #32
     ea4:	bf1c      	itt	ne
     ea6:	4825      	ldrne	r0, [pc, #148]	; (f3c <MPSL_IRQ_RADIO_Handler+0x568>)
     ea8:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
     eac:	d040      	beq.n	f30 <MPSL_IRQ_RADIO_Handler+0x55c>
     eae:	bf00      	nop
     eb0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     eb4:	eb08 0780 	add.w	r7, r8, r0, lsl #2
     eb8:	6870      	ldr	r0, [r6, #4]
     eba:	68bd      	ldr	r5, [r7, #8]
     ebc:	f107 0108 	add.w	r1, r7, #8
     ec0:	1a28      	subs	r0, r5, r0
     ec2:	0200      	lsls	r0, r0, #8
     ec4:	17c2      	asrs	r2, r0, #31
     ec6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     eca:	1200      	asrs	r0, r0, #8
     ecc:	d422      	bmi.n	f14 <MPSL_IRQ_RADIO_Handler+0x540>
     ece:	89c8      	ldrh	r0, [r1, #14]
     ed0:	b370      	cbz	r0, f30 <MPSL_IRQ_RADIO_Handler+0x55c>
     ed2:	89f0      	ldrh	r0, [r6, #14]
     ed4:	bb60      	cbnz	r0, f30 <MPSL_IRQ_RADIO_Handler+0x55c>
     ed6:	f8d6 b000 	ldr.w	fp, [r6]
     eda:	f002 febf 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     ede:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ee2:	bf08      	it	eq
     ee4:	200d      	moveq	r0, #13
     ee6:	d00b      	beq.n	f00 <MPSL_IRQ_RADIO_Handler+0x52c>
     ee8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     eec:	3856      	subs	r0, #86	; 0x56
     eee:	bf08      	it	eq
     ef0:	201c      	moveq	r0, #28
     ef2:	d005      	beq.n	f00 <MPSL_IRQ_RADIO_Handler+0x52c>
     ef4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     ef8:	389f      	subs	r0, #159	; 0x9f
     efa:	bf14      	ite	ne
     efc:	2000      	movne	r0, #0
     efe:	2032      	moveq	r0, #50	; 0x32
     f00:	1c41      	adds	r1, r0, #1
     f02:	eba5 000b 	sub.w	r0, r5, fp
     f06:	0200      	lsls	r0, r0, #8
     f08:	17c2      	asrs	r2, r0, #31
     f0a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     f0e:	1200      	asrs	r0, r0, #8
     f10:	4288      	cmp	r0, r1
     f12:	da0d      	bge.n	f30 <MPSL_IRQ_RADIO_Handler+0x55c>
     f14:	f889 4000 	strb.w	r4, [r9]
     f18:	7e38      	ldrb	r0, [r7, #24]
     f1a:	7c31      	ldrb	r1, [r6, #16]
     f1c:	4288      	cmp	r0, r1
     f1e:	d802      	bhi.n	f26 <MPSL_IRQ_RADIO_Handler+0x552>
     f20:	2000      	movs	r0, #0
     f22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f26:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
     f2a:	7844      	ldrb	r4, [r0, #1]
     f2c:	2c20      	cmp	r4, #32
     f2e:	d1bf      	bne.n	eb0 <MPSL_IRQ_RADIO_Handler+0x4dc>
     f30:	2001      	movs	r0, #1
     f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f36:	0000      	.short	0x0000
     f38:	2000105c 	.word	0x2000105c
     f3c:	20000fdc 	.word	0x20000fdc
     f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f44:	b098      	sub	sp, #96	; 0x60
     f46:	4615      	mov	r5, r2
     f48:	468b      	mov	fp, r1
     f4a:	f002 fa3b 	bl	33c4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     f4e:	4604      	mov	r4, r0
     f50:	f002 fcb6 	bl	38c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     f54:	4606      	mov	r6, r0
     f56:	f1bb 0f01 	cmp.w	fp, #1
     f5a:	bf18      	it	ne
     f5c:	f1bb 0f02 	cmpne.w	fp, #2
     f60:	d005      	beq.n	f6e <MPSL_IRQ_RADIO_Handler+0x59a>
     f62:	f640 1192 	movw	r1, #2450	; 0x992
     f66:	f04f 0070 	mov.w	r0, #112	; 0x70
     f6a:	f003 f821 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f6e:	49ff      	ldr	r1, [pc, #1020]	; (136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>)
     f70:	2001      	movs	r0, #1
     f72:	6008      	str	r0, [r1, #0]
     f74:	49fe      	ldr	r1, [pc, #1016]	; (1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>)
     f76:	6889      	ldr	r1, [r1, #8]
     f78:	6008      	str	r0, [r1, #0]
     f7a:	2000      	movs	r0, #0
     f7c:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
     f80:	900e      	str	r0, [sp, #56]	; 0x38
     f82:	1e40      	subs	r0, r0, #1
     f84:	900f      	str	r0, [sp, #60]	; 0x3c
     f86:	49fb      	ldr	r1, [pc, #1004]	; (1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>)
     f88:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     f8c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
     f90:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
     f94:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     f98:	e9cd 0c10 	strd	r0, ip, [sp, #64]	; 0x40
     f9c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
     fa0:	6989      	ldr	r1, [r1, #24]
     fa2:	9114      	str	r1, [sp, #80]	; 0x50
     fa4:	f00b f91f 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     fa8:	4601      	mov	r1, r0
     faa:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
     fae:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     fb2:	4bf1      	ldr	r3, [pc, #964]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
     fb4:	4440      	add	r0, r8
     fb6:	1c42      	adds	r2, r0, #1
     fb8:	1888      	adds	r0, r1, r2
     fba:	4299      	cmp	r1, r3
     fbc:	d84f      	bhi.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
     fbe:	4def      	ldr	r5, [pc, #956]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
     fc0:	42aa      	cmp	r2, r5
     fc2:	dc53      	bgt.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
     fc4:	4269      	negs	r1, r5
     fc6:	428a      	cmp	r2, r1
     fc8:	db58      	blt.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
     fca:	1c59      	adds	r1, r3, #1
     fcc:	4281      	cmp	r1, r0
     fce:	bfdc      	itt	le
     fd0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     fd4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     fd8:	dd05      	ble.n	fe6 <MPSL_IRQ_RADIO_Handler+0x612>
     fda:	2800      	cmp	r0, #0
     fdc:	bfbc      	itt	lt
     fde:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     fe2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     fe6:	900c      	str	r0, [sp, #48]	; 0x30
     fe8:	48e5      	ldr	r0, [pc, #916]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
     fea:	f1b8 0f00 	cmp.w	r8, #0
     fee:	8b80      	ldrh	r0, [r0, #28]
     ff0:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
     ff4:	bf04      	itt	eq
     ff6:	2000      	moveq	r0, #0
     ff8:	900b      	streq	r0, [sp, #44]	; 0x2c
     ffa:	d00b      	beq.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     ffc:	2001      	movs	r0, #1
     ffe:	900b      	str	r0, [sp, #44]	; 0x2c
    1000:	48df      	ldr	r0, [pc, #892]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
    1002:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    1006:	b928      	cbnz	r0, 1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
    1008:	f002 ff5a 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    100c:	2800      	cmp	r0, #0
    100e:	bf08      	it	eq
    1010:	2701      	moveq	r7, #1
    1012:	d000      	beq.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
    1014:	2700      	movs	r7, #0
    1016:	f002 fe21 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    101a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    101e:	bf08      	it	eq
    1020:	200d      	moveq	r0, #13
    1022:	d00b      	beq.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    1024:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1028:	3856      	subs	r0, #86	; 0x56
    102a:	bf08      	it	eq
    102c:	201c      	moveq	r0, #28
    102e:	d005      	beq.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    1030:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1034:	389f      	subs	r0, #159	; 0x9f
    1036:	bf14      	ite	ne
    1038:	2000      	movne	r0, #0
    103a:	2032      	moveq	r0, #50	; 0x32
    103c:	f04f 0900 	mov.w	r9, #0
    1040:	46ca      	mov	sl, r9
    1042:	9009      	str	r0, [sp, #36]	; 0x24
    1044:	4546      	cmp	r6, r8
    1046:	d937      	bls.n	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
    1048:	990c      	ldr	r1, [sp, #48]	; 0x30
    104a:	f8df 932c 	ldr.w	r9, [pc, #812]	; 1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
    104e:	ea6f 0c06 	mvn.w	ip, r6
    1052:	466b      	mov	r3, sp
    1054:	aa16      	add	r2, sp, #88	; 0x58
    1056:	eb01 000c 	add.w	r0, r1, ip
    105a:	4549      	cmp	r1, r9
    105c:	d904      	bls.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    105e:	f240 519e 	movw	r1, #1438	; 0x59e
    1062:	2070      	movs	r0, #112	; 0x70
    1064:	f002 ffa4 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1068:	45ac      	cmp	ip, r5
    106a:	dd04      	ble.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    106c:	f240 519f 	movw	r1, #1439	; 0x59f
    1070:	2070      	movs	r0, #112	; 0x70
    1072:	f002 ff9d 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1076:	49c3      	ldr	r1, [pc, #780]	; (1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>)
    1078:	458c      	cmp	ip, r1
    107a:	da04      	bge.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
    107c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    1080:	2070      	movs	r0, #112	; 0x70
    1082:	f002 ff95 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1086:	49c0      	ldr	r1, [pc, #768]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    1088:	4281      	cmp	r1, r0
    108a:	bfdc      	itt	le
    108c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1090:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1094:	dd05      	ble.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
    1096:	2800      	cmp	r0, #0
    1098:	bfbc      	itt	lt
    109a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    109e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    10a2:	4619      	mov	r1, r3
    10a4:	f001 fefc 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    10a8:	9800      	ldr	r0, [sp, #0]
    10aa:	9910      	ldr	r1, [sp, #64]	; 0x40
    10ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    10b0:	9000      	str	r0, [sp, #0]
    10b2:	1a08      	subs	r0, r1, r0
    10b4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    10b8:	2f00      	cmp	r7, #0
    10ba:	bf18      	it	ne
    10bc:	f8dd a024 	ldrne.w	sl, [sp, #36]	; 0x24
    10c0:	d105      	bne.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
    10c2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    10c6:	2800      	cmp	r0, #0
    10c8:	bf18      	it	ne
    10ca:	f04f 0a02 	movne.w	sl, #2
    10ce:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    10d2:	d008      	beq.n	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
    10d4:	9810      	ldr	r0, [sp, #64]	; 0x40
    10d6:	1b00      	subs	r0, r0, r4
    10d8:	0200      	lsls	r0, r0, #8
    10da:	17c1      	asrs	r1, r0, #31
    10dc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    10e0:	1200      	asrs	r0, r0, #8
    10e2:	2801      	cmp	r0, #1
    10e4:	da02      	bge.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
    10e6:	2003      	movs	r0, #3
    10e8:	9d18      	ldr	r5, [sp, #96]	; 0x60
    10ea:	e00d      	b.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    10ec:	b157      	cbz	r7, 1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    10ee:	48a4      	ldr	r0, [pc, #656]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
    10f0:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    10f4:	b130      	cbz	r0, 1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    10f6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    10fa:	f110 0a00 	adds.w	sl, r0, #0
    10fe:	bf18      	it	ne
    1100:	f04f 0a02 	movne.w	sl, #2
    1104:	4625      	mov	r5, r4
    1106:	2000      	movs	r0, #0
    1108:	4482      	add	sl, r0
    110a:	9810      	ldr	r0, [sp, #64]	; 0x40
    110c:	eba0 0009 	sub.w	r0, r0, r9
    1110:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1114:	1e50      	subs	r0, r2, #1
    1116:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    111a:	1b41      	subs	r1, r0, r5
    111c:	0209      	lsls	r1, r1, #8
    111e:	17cb      	asrs	r3, r1, #31
    1120:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    1124:	1209      	asrs	r1, r1, #8
    1126:	4551      	cmp	r1, sl
    1128:	db04      	blt.n	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
    112a:	f1b9 0f00 	cmp.w	r9, #0
    112e:	bf18      	it	ne
    1130:	9210      	strne	r2, [sp, #64]	; 0x40
    1132:	e02d      	b.n	1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>
    1134:	f1b9 0f00 	cmp.w	r9, #0
    1138:	d005      	beq.n	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    113a:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
    113e:	b920      	cbnz	r0, 114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
    1140:	f002 fbb4 	bl	38ac <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1144:	b108      	cbz	r0, 114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
    1146:	b9af      	cbnz	r7, 1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    1148:	e00c      	b.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
    114a:	b92f      	cbnz	r7, 1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
    114c:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    1150:	2800      	cmp	r0, #0
    1152:	bf18      	it	ne
    1154:	f1aa 0a02 	subne.w	sl, sl, #2
    1158:	f04f 0900 	mov.w	r9, #0
    115c:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
    1160:	464e      	mov	r6, r9
    1162:	e007      	b.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    1164:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    1168:	b120      	cbz	r0, 1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    116a:	2000      	movs	r0, #0
    116c:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    1170:	f1aa 0a02 	sub.w	sl, sl, #2
    1174:	9810      	ldr	r0, [sp, #64]	; 0x40
    1176:	eba0 0009 	sub.w	r0, r0, r9
    117a:	1e40      	subs	r0, r0, #1
    117c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1180:	1b41      	subs	r1, r0, r5
    1182:	0209      	lsls	r1, r1, #8
    1184:	17ca      	asrs	r2, r1, #31
    1186:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    118a:	1209      	asrs	r1, r1, #8
    118c:	4551      	cmp	r1, sl
    118e:	db7c      	blt.n	128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
    1190:	970a      	str	r7, [sp, #40]	; 0x28
    1192:	4605      	mov	r5, r0
    1194:	f04f 0900 	mov.w	r9, #0
    1198:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    119a:	f001 ffeb 	bl	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    119e:	1a28      	subs	r0, r5, r0
    11a0:	0200      	lsls	r0, r0, #8
    11a2:	17c1      	asrs	r1, r0, #31
    11a4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    11a8:	ea4f 2a20 	mov.w	sl, r0, asr #8
    11ac:	f002 fd56 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    11b0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    11b4:	bf08      	it	eq
    11b6:	200d      	moveq	r0, #13
    11b8:	d00b      	beq.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11ba:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    11be:	3856      	subs	r0, #86	; 0x56
    11c0:	bf08      	it	eq
    11c2:	201c      	moveq	r0, #28
    11c4:	d005      	beq.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11c6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    11ca:	389f      	subs	r0, #159	; 0x9f
    11cc:	bf14      	ite	ne
    11ce:	2000      	movne	r0, #0
    11d0:	2032      	moveq	r0, #50	; 0x32
    11d2:	300b      	adds	r0, #11
    11d4:	4582      	cmp	sl, r0
    11d6:	da20      	bge.n	121a <CONFIG_FPROTECT_BLOCK_SIZE+0x21a>
    11d8:	f1bb 0f01 	cmp.w	fp, #1
    11dc:	d002      	beq.n	11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
    11de:	980a      	ldr	r0, [sp, #40]	; 0x28
    11e0:	b140      	cbz	r0, 11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
    11e2:	e012      	b.n	120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
    11e4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    11e8:	d11c      	bne.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    11ea:	f640 1113 	movw	r1, #2323	; 0x913
    11ee:	2070      	movs	r0, #112	; 0x70
    11f0:	f002 fede 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11f4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    11f8:	d007      	beq.n	120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
    11fa:	1b60      	subs	r0, r4, r5
    11fc:	0200      	lsls	r0, r0, #8
    11fe:	17c1      	asrs	r1, r0, #31
    1200:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1204:	1200      	asrs	r0, r0, #8
    1206:	2804      	cmp	r0, #4
    1208:	dd04      	ble.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
    120a:	462c      	mov	r4, r5
    120c:	4620      	mov	r0, r4
    120e:	f001 ffd7 	bl	31c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1212:	e007      	b.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    1214:	2800      	cmp	r0, #0
    1216:	dc64      	bgt.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    1218:	e004      	b.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    121a:	462c      	mov	r4, r5
    121c:	4620      	mov	r0, r4
    121e:	f001 ffcf 	bl	31c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1222:	46b9      	mov	r9, r7
    1224:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1228:	d056      	beq.n	12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
    122a:	9810      	ldr	r0, [sp, #64]	; 0x40
    122c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    122e:	1b00      	subs	r0, r0, r4
    1230:	1b12      	subs	r2, r2, r4
    1232:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1236:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    123a:	2801      	cmp	r0, #1
    123c:	d351      	bcc.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    123e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1242:	bf98      	it	ls
    1244:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1248:	d84b      	bhi.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    124a:	4620      	mov	r0, r4
    124c:	f00a ffcb 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1250:	990c      	ldr	r1, [sp, #48]	; 0x30
    1252:	4a4a      	ldr	r2, [pc, #296]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
    1254:	1a0d      	subs	r5, r1, r0
    1256:	f04f 0a00 	mov.w	sl, #0
    125a:	1aaa      	subs	r2, r5, r2
    125c:	f17a 0200 	sbcs.w	r2, sl, #0
    1260:	d318      	bcc.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    1262:	4b46      	ldr	r3, [pc, #280]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
    1264:	1a42      	subs	r2, r0, r1
    1266:	1ad3      	subs	r3, r2, r3
    1268:	f17a 0300 	sbcs.w	r3, sl, #0
    126c:	d312      	bcc.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    126e:	4b42      	ldr	r3, [pc, #264]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
    1270:	42ab      	cmp	r3, r5
    1272:	bf3e      	ittt	cc
    1274:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    1278:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    127c:	1845      	addcc	r5, r0, r1
    127e:	d309      	bcc.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    1280:	4293      	cmp	r3, r2
    1282:	d232      	bcs.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
    1284:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    1288:	e000      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
    128a:	e02a      	b.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    128c:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    1290:	4408      	add	r0, r1
    1292:	4245      	negs	r5, r0
    1294:	4f3a      	ldr	r7, [pc, #232]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
    1296:	7fb8      	ldrb	r0, [r7, #30]
    1298:	b360      	cbz	r0, 12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>
    129a:	bf00      	nop
    129c:	f1bb 0f01 	cmp.w	fp, #1
    12a0:	d005      	beq.n	12ae <CONFIG_FPROTECT_BLOCK_SIZE+0x2ae>
    12a2:	2002      	movs	r0, #2
    12a4:	f002 f9c8 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12a8:	2001      	movs	r0, #1
    12aa:	f002 f9c5 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12ae:	45b0      	cmp	r8, r6
    12b0:	d22c      	bcs.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    12b2:	eba5 0106 	sub.w	r1, r5, r6
    12b6:	f04f 0002 	mov.w	r0, #2
    12ba:	f002 f907 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12be:	b390      	cbz	r0, 1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
    12c0:	f1b8 0f00 	cmp.w	r8, #0
    12c4:	bf1c      	itt	ne
    12c6:	eba5 0108 	subne.w	r1, r5, r8
    12ca:	2001      	movne	r0, #1
    12cc:	d034      	beq.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    12ce:	bf00      	nop
    12d0:	f002 f8fc 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12d4:	b338      	cbz	r0, 1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
    12d6:	e02f      	b.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    12d8:	f640 2126 	movw	r1, #2598	; 0xa26
    12dc:	2070      	movs	r0, #112	; 0x70
    12de:	f002 fe67 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12e2:	b01b      	add	sp, #108	; 0x6c
    12e4:	2000      	movs	r0, #0
    12e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12ea:	f640 21fa 	movw	r1, #2810	; 0xafa
    12ee:	2070      	movs	r0, #112	; 0x70
    12f0:	f002 fe5e 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12f4:	45b0      	cmp	r8, r6
    12f6:	bf34      	ite	cc
    12f8:	4630      	movcc	r0, r6
    12fa:	4640      	movcs	r0, r8
    12fc:	301e      	adds	r0, #30
    12fe:	42a8      	cmp	r0, r5
    1300:	dbcc      	blt.n	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
    1302:	f640 213a 	movw	r1, #2618	; 0xa3a
    1306:	2070      	movs	r0, #112	; 0x70
    1308:	f002 fe52 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    130c:	d90c      	bls.n	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
    130e:	eba5 0108 	sub.w	r1, r5, r8
    1312:	2001      	movs	r0, #1
    1314:	f002 f8da 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1318:	b128      	cbz	r0, 1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
    131a:	2e00      	cmp	r6, #0
    131c:	bf1c      	itt	ne
    131e:	1ba9      	subne	r1, r5, r6
    1320:	2002      	movne	r0, #2
    1322:	d009      	beq.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    1324:	e7d4      	b.n	12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    1326:	e041      	b.n	13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
    1328:	ea56 0008 	orrs.w	r0, r6, r8
    132c:	d004      	beq.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    132e:	f640 1176 	movw	r1, #2422	; 0x976
    1332:	2070      	movs	r0, #112	; 0x70
    1334:	f002 fe3c 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1338:	4629      	mov	r1, r5
    133a:	2000      	movs	r0, #0
    133c:	f002 f8c6 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1340:	b3a0      	cbz	r0, 13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
    1342:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1344:	2601      	movs	r6, #1
    1346:	2800      	cmp	r0, #0
    1348:	bf04      	itt	eq
    134a:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    134e:	2800      	cmpeq	r0, #0
    1350:	d002      	beq.n	1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>
    1352:	f1b9 0f00 	cmp.w	r9, #0
    1356:	d034      	beq.n	13c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a>
    1358:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    135c:	b118      	cbz	r0, 1366 <CONFIG_FPROTECT_BLOCK_SIZE+0x366>
    135e:	f002 fc83 	bl	3c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1362:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    1366:	f1b9 0f00 	cmp.w	r9, #0
    136a:	e00f      	b.n	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    136c:	40000508 	.word	0x40000508
    1370:	2000003c 	.word	0x2000003c
    1374:	20000c5c 	.word	0x20000c5c
    1378:	1e847fff 	.word	0x1e847fff
    137c:	0f424000 	.word	0x0f424000
    1380:	2000105c 	.word	0x2000105c
    1384:	f0bdc000 	.word	0xf0bdc000
    1388:	1e848000 	.word	0x1e848000
    138c:	d01c      	beq.n	13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>
    138e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1390:	1a20      	subs	r0, r4, r0
    1392:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1396:	2005      	movs	r0, #5
    1398:	f002 f898 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    139c:	b360      	cbz	r0, 13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>
    139e:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    13a2:	2800      	cmp	r0, #0
    13a4:	bf08      	it	eq
    13a6:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    13aa:	e015      	b.n	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    13ac:	e7ff      	b.n	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
    13ae:	2002      	movs	r0, #2
    13b0:	f002 f942 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13b4:	2001      	movs	r0, #1
    13b6:	f002 f93f 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13ba:	b01b      	add	sp, #108	; 0x6c
    13bc:	2000      	movs	r0, #0
    13be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13c2:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    13c6:	b190      	cbz	r0, 13ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66>
    13c8:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    13cc:	b120      	cbz	r0, 13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    13ce:	2005      	movs	r0, #5
    13d0:	f002 f932 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13d4:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    13d8:	eba5 0008 	sub.w	r0, r5, r8
    13dc:	f1a0 0119 	sub.w	r1, r0, #25
    13e0:	2900      	cmp	r1, #0
    13e2:	dc0e      	bgt.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
    13e4:	f640 2163 	movw	r1, #2659	; 0xa63
    13e8:	2070      	movs	r0, #112	; 0x70
    13ea:	f002 fde1 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13ee:	f002 fc57 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    13f2:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    13f6:	e7b6      	b.n	1366 <CONFIG_FPROTECT_BLOCK_SIZE+0x366>
    13f8:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    13fc:	2070      	movs	r0, #112	; 0x70
    13fe:	f002 fdd7 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1402:	2003      	movs	r0, #3
    1404:	f002 f862 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1408:	b1c0      	cbz	r0, 143c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4>
    140a:	480f      	ldr	r0, [pc, #60]	; (1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>)
    140c:	6880      	ldr	r0, [r0, #8]
    140e:	f8c0 a000 	str.w	sl, [r0]
    1412:	480e      	ldr	r0, [pc, #56]	; (144c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4>)
    1414:	f8c0 a000 	str.w	sl, [r0]
    1418:	ac0e      	add	r4, sp, #56	; 0x38
    141a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    141e:	6038      	str	r0, [r7, #0]
    1420:	6079      	str	r1, [r7, #4]
    1422:	60ba      	str	r2, [r7, #8]
    1424:	60fb      	str	r3, [r7, #12]
    1426:	ac12      	add	r4, sp, #72	; 0x48
    1428:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    142c:	6138      	str	r0, [r7, #16]
    142e:	6179      	str	r1, [r7, #20]
    1430:	61ba      	str	r2, [r7, #24]
    1432:	61fb      	str	r3, [r7, #28]
    1434:	b01b      	add	sp, #108	; 0x6c
    1436:	2001      	movs	r0, #1
    1438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    143c:	f640 216b 	movw	r1, #2667	; 0xa6b
    1440:	2070      	movs	r0, #112	; 0x70
    1442:	f002 fdb5 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1446:	0000      	.short	0x0000
    1448:	2000003c 	.word	0x2000003c
    144c:	40000508 	.word	0x40000508
    1450:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1454:	4614      	mov	r4, r2
    1456:	460d      	mov	r5, r1
    1458:	f04f 0a00 	mov.w	sl, #0
    145c:	890a      	ldrh	r2, [r1, #8]
    145e:	4651      	mov	r1, sl
    1460:	f362 411f 	bfi	r1, r2, #16, #16
    1464:	7aaa      	ldrb	r2, [r5, #10]
    1466:	46d1      	mov	r9, sl
    1468:	f362 0907 	bfi	r9, r2, #0, #8
    146c:	7aea      	ldrb	r2, [r5, #11]
    146e:	4606      	mov	r6, r0
    1470:	f362 290f 	bfi	r9, r2, #8, #8
    1474:	782a      	ldrb	r2, [r5, #0]
    1476:	b083      	sub	sp, #12
    1478:	6840      	ldr	r0, [r0, #4]
    147a:	f8c4 a000 	str.w	sl, [r4]
    147e:	f362 4917 	bfi	r9, r2, #16, #8
    1482:	f8c4 a004 	str.w	sl, [r4, #4]
    1486:	f8c4 9010 	str.w	r9, [r4, #16]
    148a:	e9c4 0102 	strd	r0, r1, [r4, #8]
    148e:	4f9d      	ldr	r7, [pc, #628]	; (1704 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x37c>)
    1490:	6870      	ldr	r0, [r6, #4]
    1492:	fba0 8907 	umull	r8, r9, r0, r7
    1496:	6830      	ldr	r0, [r6, #0]
    1498:	f00a fea5 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    149c:	eb10 0108 	adds.w	r1, r0, r8
    14a0:	eb4a 0209 	adc.w	r2, sl, r9
    14a4:	7828      	ldrb	r0, [r5, #0]
    14a6:	ea4f 0967 	mov.w	r9, r7, asr #1
    14aa:	f1c9 0b00 	rsb	fp, r9, #0
    14ae:	b170      	cbz	r0, 14ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x146>
    14b0:	89e0      	ldrh	r0, [r4, #14]
    14b2:	f894 8011 	ldrb.w	r8, [r4, #17]
    14b6:	43c0      	mvns	r0, r0
    14b8:	f8d5 a004 	ldr.w	sl, [r5, #4]
    14bc:	f104 020c 	add.w	r2, r4, #12
    14c0:	4548      	cmp	r0, r9
    14c2:	dd7c      	ble.n	15be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x236>
    14c4:	f240 519f 	movw	r1, #1439	; 0x59f
    14c8:	2070      	movs	r0, #112	; 0x70
    14ca:	f002 fd71 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14ce:	f8df c238 	ldr.w	ip, [pc, #568]	; 1708 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x380>
    14d2:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    14d6:	eb11 0a0c 	adds.w	sl, r1, ip
    14da:	f142 0c00 	adc.w	ip, r2, #0
    14de:	ebb0 0a0a 	subs.w	sl, r0, sl
    14e2:	eb73 0c0c 	sbcs.w	ip, r3, ip
    14e6:	d272      	bcs.n	15ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x246>
    14e8:	1a41      	subs	r1, r0, r1
    14ea:	eb73 0102 	sbcs.w	r1, r3, r2
    14ee:	d36e      	bcc.n	15ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x246>
    14f0:	ebb0 0608 	subs.w	r6, r0, r8
    14f4:	42b7      	cmp	r7, r6
    14f6:	d82b      	bhi.n	1550 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c8>
    14f8:	89e0      	ldrh	r0, [r4, #14]
    14fa:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    14fe:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    1502:	43c1      	mvns	r1, r0
    1504:	4a81      	ldr	r2, [pc, #516]	; (170c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x384>)
    1506:	eb08 0001 	add.w	r0, r8, r1
    150a:	4542      	cmp	r2, r8
    150c:	d32b      	bcc.n	1566 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1de>
    150e:	4549      	cmp	r1, r9
    1510:	dcd8      	bgt.n	14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>
    1512:	4559      	cmp	r1, fp
    1514:	db66      	blt.n	15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>
    1516:	4287      	cmp	r7, r0
    1518:	bfdc      	itt	le
    151a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    151e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1522:	dd05      	ble.n	1530 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a8>
    1524:	2800      	cmp	r0, #0
    1526:	bfbc      	itt	lt
    1528:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    152c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1530:	466a      	mov	r2, sp
    1532:	a901      	add	r1, sp, #4
    1534:	f001 fcb4 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1538:	89e0      	ldrh	r0, [r4, #14]
    153a:	f89d 1000 	ldrb.w	r1, [sp]
    153e:	1a30      	subs	r0, r6, r0
    1540:	1a40      	subs	r0, r0, r1
    1542:	1e40      	subs	r0, r0, #1
    1544:	42b8      	cmp	r0, r7
    1546:	d302      	bcc.n	154e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c6>
    1548:	68a0      	ldr	r0, [r4, #8]
    154a:	1c40      	adds	r0, r0, #1
    154c:	60a0      	str	r0, [r4, #8]
    154e:	4646      	mov	r6, r8
    1550:	89e0      	ldrh	r0, [r4, #14]
    1552:	4b6e      	ldr	r3, [pc, #440]	; (170c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x384>)
    1554:	43c1      	mvns	r1, r0
    1556:	686d      	ldr	r5, [r5, #4]
    1558:	f894 8011 	ldrb.w	r8, [r4, #17]
    155c:	1870      	adds	r0, r6, r1
    155e:	f104 020c 	add.w	r2, r4, #12
    1562:	429e      	cmp	r6, r3
    1564:	d904      	bls.n	1570 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e8>
    1566:	f240 519e 	movw	r1, #1438	; 0x59e
    156a:	2070      	movs	r0, #112	; 0x70
    156c:	f002 fd20 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1570:	4549      	cmp	r1, r9
    1572:	dca7      	bgt.n	14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>
    1574:	4559      	cmp	r1, fp
    1576:	db35      	blt.n	15e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25c>
    1578:	4287      	cmp	r7, r0
    157a:	bfdc      	itt	le
    157c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1580:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1584:	dd05      	ble.n	1592 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20a>
    1586:	2800      	cmp	r0, #0
    1588:	bfbc      	itt	lt
    158a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    158e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1592:	4621      	mov	r1, r4
    1594:	f001 fc84 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1598:	6820      	ldr	r0, [r4, #0]
    159a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    159e:	1970      	adds	r0, r6, r5
    15a0:	1c40      	adds	r0, r0, #1
    15a2:	6021      	str	r1, [r4, #0]
    15a4:	f1b8 0f00 	cmp.w	r8, #0
    15a8:	bf08      	it	eq
    15aa:	307a      	addeq	r0, #122	; 0x7a
    15ac:	d004      	beq.n	15b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x230>
    15ae:	f1b8 0f01 	cmp.w	r8, #1
    15b2:	bf08      	it	eq
    15b4:	3048      	addeq	r0, #72	; 0x48
    15b6:	d13a      	bne.n	162e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a6>
    15b8:	f001 fc56 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15bc:	e001      	b.n	15c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23a>
    15be:	e00e      	b.n	15de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x256>
    15c0:	e005      	b.n	15ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x246>
    15c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15c6:	6060      	str	r0, [r4, #4]
    15c8:	b007      	add	sp, #28
    15ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ce:	6830      	ldr	r0, [r6, #0]
    15d0:	1e40      	subs	r0, r0, #1
    15d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15d6:	6020      	str	r0, [r4, #0]
    15d8:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    15dc:	e7f3      	b.n	15c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23e>
    15de:	4601      	mov	r1, r0
    15e0:	4558      	cmp	r0, fp
    15e2:	da04      	bge.n	15ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x266>
    15e4:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    15e8:	2070      	movs	r0, #112	; 0x70
    15ea:	f002 fce1 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15ee:	4287      	cmp	r7, r0
    15f0:	bfdc      	itt	le
    15f2:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    15f6:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    15fa:	dd05      	ble.n	1608 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x280>
    15fc:	2800      	cmp	r0, #0
    15fe:	bfbc      	itt	lt
    1600:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1604:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1608:	4621      	mov	r1, r4
    160a:	f001 fc49 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    160e:	6820      	ldr	r0, [r4, #0]
    1610:	f1b8 0f00 	cmp.w	r8, #0
    1614:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1618:	f10a 0001 	add.w	r0, sl, #1
    161c:	6021      	str	r1, [r4, #0]
    161e:	bf08      	it	eq
    1620:	307a      	addeq	r0, #122	; 0x7a
    1622:	d009      	beq.n	1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>
    1624:	f1b8 0f01 	cmp.w	r8, #1
    1628:	bf08      	it	eq
    162a:	3048      	addeq	r0, #72	; 0x48
    162c:	d004      	beq.n	1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>
    162e:	f240 6139 	movw	r1, #1593	; 0x639
    1632:	2070      	movs	r0, #112	; 0x70
    1634:	f002 fcbc 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1638:	f001 fc16 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    163c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1640:	6061      	str	r1, [r4, #4]
    1642:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    1646:	aa01      	add	r2, sp, #4
    1648:	4669      	mov	r1, sp
    164a:	4648      	mov	r0, r9
    164c:	6837      	ldr	r7, [r6, #0]
    164e:	f001 fc27 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1652:	f002 f935 	bl	38c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1656:	f001 fc07 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    165a:	4680      	mov	r8, r0
    165c:	482c      	ldr	r0, [pc, #176]	; (1710 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x388>)
    165e:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1662:	2920      	cmp	r1, #32
    1664:	d02a      	beq.n	16bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x334>
    1666:	68c0      	ldr	r0, [r0, #12]
    1668:	1d40      	adds	r0, r0, #5
    166a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    166e:	bf00      	nop
    1670:	e9d4 2100 	ldrd	r2, r1, [r4]
    1674:	1a89      	subs	r1, r1, r2
    1676:	4401      	add	r1, r0
    1678:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    167c:	e9c4 0100 	strd	r0, r1, [r4]
    1680:	6831      	ldr	r1, [r6, #0]
    1682:	4281      	cmp	r1, r0
    1684:	d902      	bls.n	168c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x304>
    1686:	68a0      	ldr	r0, [r4, #8]
    1688:	1c40      	adds	r0, r0, #1
    168a:	60a0      	str	r0, [r4, #8]
    168c:	6832      	ldr	r2, [r6, #0]
    168e:	6928      	ldr	r0, [r5, #16]
    1690:	4621      	mov	r1, r4
    1692:	9b06      	ldr	r3, [sp, #24]
    1694:	f7ff f9fa 	bl	a8c <MPSL_IRQ_RADIO_Handler+0xb8>
    1698:	2800      	cmp	r0, #0
    169a:	bf1c      	itt	ne
    169c:	b007      	addne	sp, #28
    169e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16a2:	e9d4 1000 	ldrd	r1, r0, [r4]
    16a6:	1a40      	subs	r0, r0, r1
    16a8:	6831      	ldr	r1, [r6, #0]
    16aa:	6021      	str	r1, [r4, #0]
    16ac:	6831      	ldr	r1, [r6, #0]
    16ae:	4408      	add	r0, r1
    16b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16b4:	6060      	str	r0, [r4, #4]
    16b6:	b007      	add	sp, #28
    16b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16bc:	3709      	adds	r7, #9
    16be:	f1b9 0f00 	cmp.w	r9, #0
    16c2:	d016      	beq.n	16f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36a>
    16c4:	f002 fbfc 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16c8:	b998      	cbnz	r0, 16f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36a>
    16ca:	f002 fac7 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    16ce:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    16d2:	bf08      	it	eq
    16d4:	200d      	moveq	r0, #13
    16d6:	d00b      	beq.n	16f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x368>
    16d8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    16dc:	3856      	subs	r0, #86	; 0x56
    16de:	bf08      	it	eq
    16e0:	201c      	moveq	r0, #28
    16e2:	d005      	beq.n	16f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x368>
    16e4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    16e8:	389f      	subs	r0, #159	; 0x9f
    16ea:	bf14      	ite	ne
    16ec:	2000      	movne	r0, #0
    16ee:	2032      	moveq	r0, #50	; 0x32
    16f0:	4407      	add	r7, r0
    16f2:	9800      	ldr	r0, [sp, #0]
    16f4:	4580      	cmp	r8, r0
    16f6:	bf84      	itt	hi
    16f8:	eba8 0000 	subhi.w	r0, r8, r0
    16fc:	4407      	addhi	r7, r0
    16fe:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1702:	e7b5      	b.n	1670 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e8>
    1704:	1e848000 	.word	0x1e848000
    1708:	0f424000 	.word	0x0f424000
    170c:	1e847fff 	.word	0x1e847fff
    1710:	2000105c 	.word	0x2000105c
    1714:	b570      	push	{r4, r5, r6, lr}
    1716:	4d1e      	ldr	r5, [pc, #120]	; (1790 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x408>)
    1718:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    171c:	2820      	cmp	r0, #32
    171e:	bf18      	it	ne
    1720:	bd70      	popne	{r4, r5, r6, pc}
    1722:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1726:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    172a:	4428      	add	r0, r5
    172c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1730:	2c20      	cmp	r4, #32
    1732:	d027      	beq.n	1784 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3fc>
    1734:	4b17      	ldr	r3, [pc, #92]	; (1794 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40c>)
    1736:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    173a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    173e:	7849      	ldrb	r1, [r1, #1]
    1740:	f880 1020 	strb.w	r1, [r0, #32]
    1744:	20ff      	movs	r0, #255	; 0xff
    1746:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    174a:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    174e:	4621      	mov	r1, r4
    1750:	2002      	movs	r0, #2
    1752:	f000 f891 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    1756:	2000      	movs	r0, #0
    1758:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    175c:	77a8      	strb	r0, [r5, #30]
    175e:	490e      	ldr	r1, [pc, #56]	; (1798 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x410>)
    1760:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1764:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1768:	7e00      	ldrb	r0, [r0, #24]
    176a:	2800      	cmp	r0, #0
    176c:	bf08      	it	eq
    176e:	f002 fd89 	bleq	4284 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    1772:	2000      	movs	r0, #0
    1774:	4909      	ldr	r1, [pc, #36]	; (179c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x414>)
    1776:	6849      	ldr	r1, [r1, #4]
    1778:	2900      	cmp	r1, #0
    177a:	bf08      	it	eq
    177c:	bd70      	popeq	{r4, r5, r6, pc}
    177e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1782:	4708      	bx	r1
    1784:	f240 3132 	movw	r1, #818	; 0x332
    1788:	2070      	movs	r0, #112	; 0x70
    178a:	f002 fc11 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    178e:	0000      	.short	0x0000
    1790:	2000105c 	.word	0x2000105c
    1794:	20000fdc 	.word	0x20000fdc
    1798:	20000c5c 	.word	0x20000c5c
    179c:	2000003c 	.word	0x2000003c
    17a0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    17a4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1868 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e0>
    17a8:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    17ac:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    17b0:	4440      	add	r0, r8
    17b2:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    17b6:	2c20      	cmp	r4, #32
    17b8:	bf08      	it	eq
    17ba:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    17be:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 186c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e4>
    17c2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1870 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e8>
    17c6:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    17ca:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    17ce:	2607      	movs	r6, #7
    17d0:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    17d4:	2801      	cmp	r0, #1
    17d6:	d00e      	beq.n	17f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46e>
    17d8:	2804      	cmp	r0, #4
    17da:	bf08      	it	eq
    17dc:	2602      	moveq	r6, #2
    17de:	d00a      	beq.n	17f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46e>
    17e0:	2805      	cmp	r0, #5
    17e2:	bf0c      	ite	eq
    17e4:	2603      	moveq	r6, #3
    17e6:	2806      	cmpne	r0, #6
    17e8:	d005      	beq.n	17f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46e>
    17ea:	f640 01dd 	movw	r1, #2269	; 0x8dd
    17ee:	f04f 0070 	mov.w	r0, #112	; 0x70
    17f2:	f002 fbdd 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f6:	f1bb 0f00 	cmp.w	fp, #0
    17fa:	bf18      	it	ne
    17fc:	f3af 8000 	nopne.w
    1800:	f3ef 8010 	mrs	r0, PRIMASK
    1804:	b672      	cpsid	i
    1806:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    180a:	784a      	ldrb	r2, [r1, #1]
    180c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1810:	4441      	add	r1, r8
    1812:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1816:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    181a:	42a2      	cmp	r2, r4
    181c:	bf04      	itt	eq
    181e:	2220      	moveq	r2, #32
    1820:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1824:	b1c0      	cbz	r0, 1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>
    1826:	462a      	mov	r2, r5
    1828:	4621      	mov	r1, r4
    182a:	2001      	movs	r0, #1
    182c:	f000 f824 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    1830:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1834:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1838:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    183c:	6840      	ldr	r0, [r0, #4]
    183e:	4631      	mov	r1, r6
    1840:	4790      	blx	r2
    1842:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1846:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    184a:	4440      	add	r0, r8
    184c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1850:	2c20      	cmp	r4, #32
    1852:	d1ba      	bne.n	17ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x442>
    1854:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1858:	4806      	ldr	r0, [pc, #24]	; (1874 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ec>)
    185a:	2800      	cmp	r0, #0
    185c:	bf18      	it	ne
    185e:	f3af 8000 	nopne.w
    1862:	b662      	cpsie	i
    1864:	e7df      	b.n	1826 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x49e>
    1866:	0000      	.short	0x0000
    1868:	2000105c 	.word	0x2000105c
    186c:	00000000 	.word	0x00000000
    1870:	20000fdc 	.word	0x20000fdc
    1874:	00000000 	.word	0x00000000
    1878:	f8df c058 	ldr.w	ip, [pc, #88]	; 18d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54c>
    187c:	b510      	push	{r4, lr}
    187e:	2300      	movs	r3, #0
    1880:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1884:	2807      	cmp	r0, #7
    1886:	d21f      	bcs.n	18c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x540>
    1888:	e8df f000 	tbb	[pc, r0]
    188c:	05050505 	.word	0x05050505
    1890:	00040404 	.word	0x00040404
    1894:	2301      	movs	r3, #1
    1896:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    189a:	2b00      	cmp	r3, #0
    189c:	bf08      	it	eq
    189e:	bd10      	popeq	{r4, pc}
    18a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    18a4:	480c      	ldr	r0, [pc, #48]	; (18d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x550>)
    18a6:	4402      	add	r2, r0
    18a8:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    18ac:	2820      	cmp	r0, #32
    18ae:	bf0e      	itee	eq
    18b0:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    18b4:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    18b8:	7041      	strbne	r1, [r0, #1]
    18ba:	2020      	movs	r0, #32
    18bc:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    18c0:	7058      	strb	r0, [r3, #1]
    18c2:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    18c6:	bd10      	pop	{r4, pc}
    18c8:	f240 216e 	movw	r1, #622	; 0x26e
    18cc:	2070      	movs	r0, #112	; 0x70
    18ce:	f002 fb6f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18d2:	0000      	.short	0x0000
    18d4:	20000fdc 	.word	0x20000fdc
    18d8:	2000105c 	.word	0x2000105c
    18dc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    18e0:	460f      	mov	r7, r1
    18e2:	4680      	mov	r8, r0
    18e4:	f8df a158 	ldr.w	sl, [pc, #344]	; 1a40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b8>
    18e8:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    18ec:	4450      	add	r0, sl
    18ee:	f1b8 0f01 	cmp.w	r8, #1
    18f2:	f890 4020 	ldrb.w	r4, [r0, #32]
    18f6:	4625      	mov	r5, r4
    18f8:	bf18      	it	ne
    18fa:	f1b8 0f02 	cmpne.w	r8, #2
    18fe:	d005      	beq.n	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    1900:	f640 21a1 	movw	r1, #2721	; 0xaa1
    1904:	f04f 0070 	mov.w	r0, #112	; 0x70
    1908:	f002 fb52 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    190c:	f04f 0b00 	mov.w	fp, #0
    1910:	2d20      	cmp	r5, #32
    1912:	d042      	beq.n	199a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x612>
    1914:	f89a 001e 	ldrb.w	r0, [sl, #30]
    1918:	2600      	movs	r6, #0
    191a:	2800      	cmp	r0, #0
    191c:	bf08      	it	eq
    191e:	2602      	moveq	r6, #2
    1920:	f001 fc28 	bl	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1924:	f8df c11c 	ldr.w	ip, [pc, #284]	; 1a44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6bc>
    1928:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    192c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1930:	688a      	ldr	r2, [r1, #8]
    1932:	68c9      	ldr	r1, [r1, #12]
    1934:	1a12      	subs	r2, r2, r0
    1936:	1a09      	subs	r1, r1, r0
    1938:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    193c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1940:	4296      	cmp	r6, r2
    1942:	bf99      	ittee	ls
    1944:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1948:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    194c:	4a3e      	ldrhi	r2, [pc, #248]	; (1a48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c0>)
    194e:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    1952:	d920      	bls.n	1996 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60e>
    1954:	4622      	mov	r2, r4
    1956:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    195a:	784c      	ldrb	r4, [r1, #1]
    195c:	2c20      	cmp	r4, #32
    195e:	d012      	beq.n	1986 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5fe>
    1960:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1964:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1968:	688b      	ldr	r3, [r1, #8]
    196a:	68c9      	ldr	r1, [r1, #12]
    196c:	1a1b      	subs	r3, r3, r0
    196e:	1a09      	subs	r1, r1, r0
    1970:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1974:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1978:	429e      	cmp	r6, r3
    197a:	bf9c      	itt	ls
    197c:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    1980:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1984:	d8e6      	bhi.n	1954 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5cc>
    1986:	2a20      	cmp	r2, #32
    1988:	d005      	beq.n	1996 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60e>
    198a:	463b      	mov	r3, r7
    198c:	2120      	movs	r1, #32
    198e:	2004      	movs	r0, #4
    1990:	f7ff f840 	bl	a14 <MPSL_IRQ_RADIO_Handler+0x40>
    1994:	4604      	mov	r4, r0
    1996:	42ac      	cmp	r4, r5
    1998:	d116      	bne.n	19c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x640>
    199a:	482c      	ldr	r0, [pc, #176]	; (1a4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c4>)
    199c:	2800      	cmp	r0, #0
    199e:	bf18      	it	ne
    19a0:	f3af 8000 	nopne.w
    19a4:	f001 fbe6 	bl	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    19a8:	4603      	mov	r3, r0
    19aa:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    19ae:	2820      	cmp	r0, #32
    19b0:	d00d      	beq.n	19ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x646>
    19b2:	f8da 0008 	ldr.w	r0, [sl, #8]
    19b6:	1c99      	adds	r1, r3, #2
    19b8:	1a08      	subs	r0, r1, r0
    19ba:	0200      	lsls	r0, r0, #8
    19bc:	17c1      	asrs	r1, r0, #31
    19be:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    19c2:	1200      	asrs	r0, r0, #8
    19c4:	2800      	cmp	r0, #0
    19c6:	dd02      	ble.n	19ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x646>
    19c8:	2000      	movs	r0, #0
    19ca:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19ce:	2d20      	cmp	r5, #32
    19d0:	d014      	beq.n	19fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x674>
    19d2:	462a      	mov	r2, r5
    19d4:	4641      	mov	r1, r8
    19d6:	4618      	mov	r0, r3
    19d8:	f7ff fab2 	bl	f40 <MPSL_IRQ_RADIO_Handler+0x56c>
    19dc:	2800      	cmp	r0, #0
    19de:	bf1e      	ittt	ne
    19e0:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    19e4:	2002      	movne	r0, #2
    19e6:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19ea:	463b      	mov	r3, r7
    19ec:	462a      	mov	r2, r5
    19ee:	2120      	movs	r1, #32
    19f0:	2004      	movs	r0, #4
    19f2:	f7ff f80f 	bl	a14 <MPSL_IRQ_RADIO_Handler+0x40>
    19f6:	2000      	movs	r0, #0
    19f8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19fc:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    1a00:	b118      	cbz	r0, 1a0a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x682>
    1a02:	f002 f931 	bl	3c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1a06:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    1a0a:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    1a0e:	b120      	cbz	r0, 1a1a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x692>
    1a10:	2005      	movs	r0, #5
    1a12:	f001 fe11 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a16:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    1a1a:	2004      	movs	r0, #4
    1a1c:	f001 fe0c 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a20:	f001 fe7a 	bl	3718 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1a24:	2020      	movs	r0, #32
    1a26:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    1a2a:	4809      	ldr	r0, [pc, #36]	; (1a50 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c8>)
    1a2c:	6880      	ldr	r0, [r0, #8]
    1a2e:	f8c0 b000 	str.w	fp, [r0]
    1a32:	4808      	ldr	r0, [pc, #32]	; (1a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6cc>)
    1a34:	f8c0 b000 	str.w	fp, [r0]
    1a38:	2001      	movs	r0, #1
    1a3a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1a3e:	0000      	.short	0x0000
    1a40:	2000105c 	.word	0x2000105c
    1a44:	20000c5c 	.word	0x20000c5c
    1a48:	20000fdc 	.word	0x20000fdc
    1a4c:	00000000 	.word	0x00000000
    1a50:	2000003c 	.word	0x2000003c
    1a54:	40000508 	.word	0x40000508

00001a58 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1a58:	4906      	ldr	r1, [pc, #24]	; (1a74 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1a5a:	b510      	push	{r4, lr}
    1a5c:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    1a60:	2a20      	cmp	r2, #32
    1a62:	bf1c      	itt	ne
    1a64:	7788      	strbne	r0, [r1, #30]
    1a66:	bd10      	popne	{r4, pc}
    1a68:	f240 319a 	movw	r1, #922	; 0x39a
    1a6c:	2070      	movs	r0, #112	; 0x70
    1a6e:	f002 fa9f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a72:	0000      	.short	0x0000
    1a74:	2000105c 	.word	0x2000105c

00001a78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a7c:	4e69      	ldr	r6, [pc, #420]	; (1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1a7e:	4607      	mov	r7, r0
    1a80:	b08d      	sub	sp, #52	; 0x34
    1a82:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1a86:	4688      	mov	r8, r1
    1a88:	2820      	cmp	r0, #32
    1a8a:	d055      	beq.n	1b38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    1a8c:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1a90:	f106 0408 	add.w	r4, r6, #8
    1a94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1a98:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    1a9c:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    1aa0:	2020      	movs	r0, #32
    1aa2:	f88d 0020 	strb.w	r0, [sp, #32]
    1aa6:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    1aaa:	aa0a      	add	r2, sp, #40	; 0x28
    1aac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1ab0:	4430      	add	r0, r6
    1ab2:	a909      	add	r1, sp, #36	; 0x24
    1ab4:	f890 5020 	ldrb.w	r5, [r0, #32]
    1ab8:	68f0      	ldr	r0, [r6, #12]
    1aba:	9002      	str	r0, [sp, #8]
    1abc:	6830      	ldr	r0, [r6, #0]
    1abe:	4438      	add	r0, r7
    1ac0:	f001 f9ee 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1ac4:	f8da 000c 	ldr.w	r0, [sl, #12]
    1ac8:	9909      	ldr	r1, [sp, #36]	; 0x24
    1aca:	2f65      	cmp	r7, #101	; 0x65
    1acc:	4408      	add	r0, r1
    1ace:	d338      	bcc.n	1b42 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1ad0:	4a55      	ldr	r2, [pc, #340]	; (1c28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    1ad2:	2100      	movs	r1, #0
    1ad4:	1bd2      	subs	r2, r2, r7
    1ad6:	eb71 0201 	sbcs.w	r2, r1, r1
    1ada:	d332      	bcc.n	1b42 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1adc:	6822      	ldr	r2, [r4, #0]
    1ade:	1a82      	subs	r2, r0, r2
    1ae0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1ae4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1ae8:	d82b      	bhi.n	1b42 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1aea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1aee:	6060      	str	r0, [r4, #4]
    1af0:	4630      	mov	r0, r6
    1af2:	f884 8010 	strb.w	r8, [r4, #16]
    1af6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1afa:	f10d 0a20 	add.w	sl, sp, #32
    1afe:	2d20      	cmp	r5, #32
    1b00:	bf1c      	itt	ne
    1b02:	494a      	ldrne	r1, [pc, #296]	; (1c2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1b04:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1b08:	d050      	beq.n	1bac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b0a:	bf00      	nop
    1b0c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1b10:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1b14:	6861      	ldr	r1, [r4, #4]
    1b16:	f8d8 6008 	ldr.w	r6, [r8, #8]
    1b1a:	f108 0008 	add.w	r0, r8, #8
    1b1e:	1a71      	subs	r1, r6, r1
    1b20:	0209      	lsls	r1, r1, #8
    1b22:	17ca      	asrs	r2, r1, #31
    1b24:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1b28:	1209      	asrs	r1, r1, #8
    1b2a:	d42d      	bmi.n	1b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    1b2c:	89c0      	ldrh	r0, [r0, #14]
    1b2e:	2800      	cmp	r0, #0
    1b30:	d03c      	beq.n	1bac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b32:	89e0      	ldrh	r0, [r4, #14]
    1b34:	b148      	cbz	r0, 1b4a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1b36:	e039      	b.n	1bac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b38:	f640 3168 	movw	r1, #2920	; 0xb68
    1b3c:	2070      	movs	r0, #112	; 0x70
    1b3e:	f002 fa37 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b42:	b00d      	add	sp, #52	; 0x34
    1b44:	2001      	movs	r0, #1
    1b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b4a:	6820      	ldr	r0, [r4, #0]
    1b4c:	900c      	str	r0, [sp, #48]	; 0x30
    1b4e:	f002 f885 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1b52:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1b56:	bf08      	it	eq
    1b58:	200d      	moveq	r0, #13
    1b5a:	d00b      	beq.n	1b74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1b5c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1b60:	3856      	subs	r0, #86	; 0x56
    1b62:	bf08      	it	eq
    1b64:	201c      	moveq	r0, #28
    1b66:	d005      	beq.n	1b74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1b68:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1b6c:	389f      	subs	r0, #159	; 0x9f
    1b6e:	bf14      	ite	ne
    1b70:	2000      	movne	r0, #0
    1b72:	2032      	moveq	r0, #50	; 0x32
    1b74:	1c41      	adds	r1, r0, #1
    1b76:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b78:	1a30      	subs	r0, r6, r0
    1b7a:	0200      	lsls	r0, r0, #8
    1b7c:	17c2      	asrs	r2, r0, #31
    1b7e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b82:	1200      	asrs	r0, r0, #8
    1b84:	4288      	cmp	r0, r1
    1b86:	da11      	bge.n	1bac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b88:	f88a 5000 	strb.w	r5, [sl]
    1b8c:	f898 1018 	ldrb.w	r1, [r8, #24]
    1b90:	7c20      	ldrb	r0, [r4, #16]
    1b92:	4281      	cmp	r1, r0
    1b94:	d805      	bhi.n	1ba2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1b96:	9802      	ldr	r0, [sp, #8]
    1b98:	6060      	str	r0, [r4, #4]
    1b9a:	b00d      	add	sp, #52	; 0x34
    1b9c:	2002      	movs	r0, #2
    1b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ba2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1ba6:	7845      	ldrb	r5, [r0, #1]
    1ba8:	2d20      	cmp	r5, #32
    1baa:	d1af      	bne.n	1b0c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    1bac:	2005      	movs	r0, #5
    1bae:	f001 fd43 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1bb2:	4c1c      	ldr	r4, [pc, #112]	; (1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1bb4:	f04f 30ff 	mov.w	r0, #4294967295
    1bb8:	6060      	str	r0, [r4, #4]
    1bba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    1bbe:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1bc2:	2120      	movs	r1, #32
    1bc4:	2a20      	cmp	r2, #32
    1bc6:	d003      	beq.n	1bd0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    1bc8:	2005      	movs	r0, #5
    1bca:	f7fe ff23 	bl	a14 <MPSL_IRQ_RADIO_Handler+0x40>
    1bce:	e004      	b.n	1bda <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    1bd0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    1bd4:	4420      	add	r0, r4
    1bd6:	f890 0020 	ldrb.w	r0, [r0, #32]
    1bda:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    1bde:	4913      	ldr	r1, [pc, #76]	; (1c2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1be0:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1be4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    1be8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1bec:	7048      	strb	r0, [r1, #1]
    1bee:	6820      	ldr	r0, [r4, #0]
    1bf0:	4438      	add	r0, r7
    1bf2:	6020      	str	r0, [r4, #0]
    1bf4:	20ff      	movs	r0, #255	; 0xff
    1bf6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    1bfa:	7e60      	ldrb	r0, [r4, #25]
    1bfc:	2801      	cmp	r0, #1
    1bfe:	d105      	bne.n	1c0c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    1c00:	68e0      	ldr	r0, [r4, #12]
    1c02:	1e40      	subs	r0, r0, #1
    1c04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c08:	f001 fb7a 	bl	3300 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1c0c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    1c10:	2820      	cmp	r0, #32
    1c12:	d003      	beq.n	1c1c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    1c14:	4806      	ldr	r0, [pc, #24]	; (1c30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    1c16:	7840      	ldrb	r0, [r0, #1]
    1c18:	f002 fa9e 	bl	4158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1c1c:	b00d      	add	sp, #52	; 0x34
    1c1e:	2000      	movs	r0, #0
    1c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c24:	2000105c 	.word	0x2000105c
    1c28:	0f424000 	.word	0x0f424000
    1c2c:	20000fdc 	.word	0x20000fdc
    1c30:	2000003c 	.word	0x2000003c

00001c34 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1c34:	4806      	ldr	r0, [pc, #24]	; (1c50 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1c36:	b510      	push	{r4, lr}
    1c38:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1c3c:	2920      	cmp	r1, #32
    1c3e:	bf1c      	itt	ne
    1c40:	7e00      	ldrbne	r0, [r0, #24]
    1c42:	bd10      	popne	{r4, pc}
    1c44:	f640 3162 	movw	r1, #2914	; 0xb62
    1c48:	2070      	movs	r0, #112	; 0x70
    1c4a:	f002 f9b1 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c4e:	0000      	.short	0x0000
    1c50:	2000105c 	.word	0x2000105c

00001c54 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1c54:	b570      	push	{r4, r5, r6, lr}
    1c56:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    1c5a:	4809      	ldr	r0, [pc, #36]	; (1c80 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    1c5c:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    1c60:	4908      	ldr	r1, [pc, #32]	; (1c84 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    1c62:	6920      	ldr	r0, [r4, #16]
    1c64:	fba0 5601 	umull	r5, r6, r0, r1
    1c68:	68a0      	ldr	r0, [r4, #8]
    1c6a:	f00a fabc 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1c6e:	8ae1      	ldrh	r1, [r4, #22]
    1c70:	7d22      	ldrb	r2, [r4, #20]
    1c72:	1c40      	adds	r0, r0, #1
    1c74:	4411      	add	r1, r2
    1c76:	4408      	add	r0, r1
    1c78:	1940      	adds	r0, r0, r5
    1c7a:	f146 0100 	adc.w	r1, r6, #0
    1c7e:	bd70      	pop	{r4, r5, r6, pc}
    1c80:	20000c5c 	.word	0x20000c5c
    1c84:	1e848000 	.word	0x1e848000

00001c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c8a:	4d6b      	ldr	r5, [pc, #428]	; (1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>)
    1c8c:	4a6b      	ldr	r2, [pc, #428]	; (1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>)
    1c8e:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    1c92:	2601      	movs	r6, #1
    1c94:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    1c98:	2808      	cmp	r0, #8
    1c9a:	d27c      	bcs.n	1d96 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a>
    1c9c:	e8df f000 	tbb	[pc, r0]
    1ca0:	a9977004 	.word	0xa9977004
    1ca4:	b3ae41c7 	.word	0xb3ae41c7
    1ca8:	b919      	cbnz	r1, 1cb2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1caa:	f001 fff9 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1cae:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1cb2:	8ae0      	ldrh	r0, [r4, #22]
    1cb4:	b110      	cbz	r0, 1cbc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1cb6:	f002 f903 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1cba:	b180      	cbz	r0, 1cde <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    1cbc:	f7ff fd2a 	bl	1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>
    1cc0:	20ff      	movs	r0, #255	; 0xff
    1cc2:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1cc6:	6861      	ldr	r1, [r4, #4]
    1cc8:	f1b1 3fff 	cmp.w	r1, #4294967295
    1ccc:	d003      	beq.n	1cd6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    1cce:	2005      	movs	r0, #5
    1cd0:	f001 fbfc 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cd4:	b140      	cbz	r0, 1ce8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    1cd6:	7e60      	ldrb	r0, [r4, #25]
    1cd8:	2801      	cmp	r0, #1
    1cda:	d110      	bne.n	1cfe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    1cdc:	e009      	b.n	1cf2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    1cde:	f640 0169 	movw	r1, #2153	; 0x869
    1ce2:	2070      	movs	r0, #112	; 0x70
    1ce4:	f002 f964 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ce8:	f640 016e 	movw	r1, #2158	; 0x86e
    1cec:	2070      	movs	r0, #112	; 0x70
    1cee:	f002 f95f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cf2:	68e0      	ldr	r0, [r4, #12]
    1cf4:	1e40      	subs	r0, r0, #1
    1cf6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cfa:	f001 fb01 	bl	3300 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1cfe:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d02:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1d06:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1d0a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1d0e:	6840      	ldr	r0, [r0, #4]
    1d10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1d14:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1d18:	b001      	add	sp, #4
    1d1a:	2101      	movs	r1, #1
    1d1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1d20:	4710      	bx	r2
    1d22:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1d26:	b140      	cbz	r0, 1d3a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    1d28:	b919      	cbnz	r1, 1d32 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    1d2a:	f001 ffb9 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1d2e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1d32:	2000      	movs	r0, #0
    1d34:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d3a:	f7ff fceb 	bl	1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>
    1d3e:	f04f 30ff 	mov.w	r0, #4294967295
    1d42:	6060      	str	r0, [r4, #4]
    1d44:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    1d48:	f88d 0000 	strb.w	r0, [sp]
    1d4c:	f89d 0000 	ldrb.w	r0, [sp]
    1d50:	b188      	cbz	r0, 1d76 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a>
    1d52:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d56:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1d5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1d5e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1d62:	6840      	ldr	r0, [r0, #4]
    1d64:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1d68:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1d6c:	b001      	add	sp, #4
    1d6e:	2106      	movs	r1, #6
    1d70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1d74:	4710      	bx	r2
    1d76:	f640 0185 	movw	r1, #2181	; 0x885
    1d7a:	2070      	movs	r0, #112	; 0x70
    1d7c:	f002 f918 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d80:	f7ff fcc8 	bl	1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>
    1d84:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    1d88:	f002 f89a 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d8c:	b120      	cbz	r0, 1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>
    1d8e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    1d92:	b130      	cbz	r0, 1da2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56>
    1d94:	e009      	b.n	1daa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e>
    1d96:	e04a      	b.n	1e2e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe2>
    1d98:	f640 0193 	movw	r1, #2195	; 0x893
    1d9c:	2070      	movs	r0, #112	; 0x70
    1d9e:	f002 f907 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1da2:	f001 ff7d 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1da6:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1daa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1dae:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1db2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1db6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1dba:	6840      	ldr	r0, [r0, #4]
    1dbc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1dc0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1dc4:	b001      	add	sp, #4
    1dc6:	2100      	movs	r1, #0
    1dc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1dcc:	4710      	bx	r2
    1dce:	f001 fd59 	bl	3884 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    1dd2:	8ae0      	ldrh	r0, [r4, #22]
    1dd4:	b110      	cbz	r0, 1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1dd6:	f002 f873 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1dda:	b128      	cbz	r0, 1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1ddc:	f001 fd66 	bl	38ac <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1de0:	2800      	cmp	r0, #0
    1de2:	bf18      	it	ne
    1de4:	7766      	strbne	r6, [r4, #29]
    1de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1de8:	f640 019d 	movw	r1, #2205	; 0x89d
    1dec:	2070      	movs	r0, #112	; 0x70
    1dee:	f002 f8df 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1df2:	4813      	ldr	r0, [pc, #76]	; (1e40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf4>)
    1df4:	6006      	str	r6, [r0, #0]
    1df6:	6890      	ldr	r0, [r2, #8]
    1df8:	6006      	str	r6, [r0, #0]
    1dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dfc:	7810      	ldrb	r0, [r2, #0]
    1dfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1e02:	f002 b9a9 	b.w	4158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1e06:	f7ff fc85 	bl	1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>
    1e0a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1e0e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1e12:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1e16:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1e1a:	6840      	ldr	r0, [r0, #4]
    1e1c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1e20:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1e24:	b001      	add	sp, #4
    1e26:	2105      	movs	r1, #5
    1e28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1e2c:	4710      	bx	r2
    1e2e:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    1e32:	2070      	movs	r0, #112	; 0x70
    1e34:	f002 f8bc 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e38:	20000c5c 	.word	0x20000c5c
    1e3c:	2000003c 	.word	0x2000003c
    1e40:	40000508 	.word	0x40000508

00001e44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1e44:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e48:	4682      	mov	sl, r0
    1e4a:	48ef      	ldr	r0, [pc, #956]	; (2208 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x208>)
    1e4c:	b095      	sub	sp, #84	; 0x54
    1e4e:	6800      	ldr	r0, [r0, #0]
    1e50:	4dee      	ldr	r5, [pc, #952]	; (220c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20c>)
    1e52:	05c0      	lsls	r0, r0, #23
    1e54:	0dc0      	lsrs	r0, r0, #23
    1e56:	d00e      	beq.n	1e76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1e58:	3810      	subs	r0, #16
    1e5a:	b240      	sxtb	r0, r0
    1e5c:	2800      	cmp	r0, #0
    1e5e:	bfb8      	it	lt
    1e60:	f000 000f 	andlt.w	r0, r0, #15
    1e64:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1e68:	bfac      	ite	ge
    1e6a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1e6e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1e72:	0940      	lsrs	r0, r0, #5
    1e74:	d00d      	beq.n	1e92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1e76:	9816      	ldr	r0, [sp, #88]	; 0x58
    1e78:	f04f 0b00 	mov.w	fp, #0
    1e7c:	7800      	ldrb	r0, [r0, #0]
    1e7e:	2800      	cmp	r0, #0
    1e80:	bf18      	it	ne
    1e82:	2801      	cmpne	r0, #1
    1e84:	d018      	beq.n	1eb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1e86:	f240 713b 	movw	r1, #1851	; 0x73b
    1e8a:	f04f 0070 	mov.w	r0, #112	; 0x70
    1e8e:	f002 f88f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e92:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1e96:	f04f 0b01 	mov.w	fp, #1
    1e9a:	2820      	cmp	r0, #32
    1e9c:	d007      	beq.n	1eae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1e9e:	9816      	ldr	r0, [sp, #88]	; 0x58
    1ea0:	7800      	ldrb	r0, [r0, #0]
    1ea2:	b148      	cbz	r0, 1eb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1ea4:	f240 7137 	movw	r1, #1847	; 0x737
    1ea8:	2070      	movs	r0, #112	; 0x70
    1eaa:	f002 f881 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eae:	f240 7134 	movw	r1, #1844	; 0x734
    1eb2:	2070      	movs	r0, #112	; 0x70
    1eb4:	f002 f87c 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eb8:	4cd5      	ldr	r4, [pc, #852]	; (2210 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x210>)
    1eba:	b124      	cbz	r4, 1ec6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1ebc:	2100      	movs	r1, #0
    1ebe:	f240 703e 	movw	r0, #1854	; 0x73e
    1ec2:	f3af 8000 	nop.w
    1ec6:	2000      	movs	r0, #0
    1ec8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    1ecc:	49d1      	ldr	r1, [pc, #836]	; (2214 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x214>)
    1ece:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    1ed2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1ed6:	f04f 0901 	mov.w	r9, #1
    1eda:	9000      	str	r0, [sp, #0]
    1edc:	b124      	cbz	r4, 1ee8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1ede:	2100      	movs	r1, #0
    1ee0:	f240 7049 	movw	r0, #1865	; 0x749
    1ee4:	f3af 8000 	nop.w
    1ee8:	f1b9 0f00 	cmp.w	r9, #0
    1eec:	d00a      	beq.n	1f04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    1eee:	bf00      	nop
    1ef0:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    1ef4:	f04f 0800 	mov.w	r8, #0
    1ef8:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1efc:	f1bb 0f00 	cmp.w	fp, #0
    1f00:	d007      	beq.n	1f12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    1f02:	e038      	b.n	1f76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    1f04:	48c4      	ldr	r0, [pc, #784]	; (2218 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x218>)
    1f06:	2800      	cmp	r0, #0
    1f08:	bf18      	it	ne
    1f0a:	f3af 8000 	nopne.w
    1f0e:	b662      	cpsie	i
    1f10:	e7ee      	b.n	1ef0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    1f12:	4637      	mov	r7, r6
    1f14:	2001      	movs	r0, #1
    1f16:	ea20 0607 	bic.w	r6, r0, r7
    1f1a:	48c0      	ldr	r0, [pc, #768]	; (221c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x21c>)
    1f1c:	2240      	movs	r2, #64	; 0x40
    1f1e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1f22:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1f26:	f00a fab8 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f2a:	b124      	cbz	r4, 1f36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    1f2c:	2100      	movs	r1, #0
    1f2e:	f240 505e 	movw	r0, #1374	; 0x55e
    1f32:	f3af 8000 	nop.w
    1f36:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    1f3a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1f3e:	4429      	add	r1, r5
    1f40:	4428      	add	r0, r5
    1f42:	8c0a      	ldrh	r2, [r1, #32]
    1f44:	8402      	strh	r2, [r0, #32]
    1f46:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1f4a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1f4e:	b124      	cbz	r4, 1f5a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    1f50:	2100      	movs	r1, #0
    1f52:	f240 5062 	movw	r0, #1378	; 0x562
    1f56:	f3af 8000 	nop.w
    1f5a:	b124      	cbz	r4, 1f66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    1f5c:	2100      	movs	r1, #0
    1f5e:	f240 7053 	movw	r0, #1875	; 0x753
    1f62:	f3af 8000 	nop.w
    1f66:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1f6a:	f88d 0008 	strb.w	r0, [sp, #8]
    1f6e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f72:	2800      	cmp	r0, #0
    1f74:	d1b2      	bne.n	1edc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1f76:	b124      	cbz	r4, 1f82 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    1f78:	2100      	movs	r1, #0
    1f7a:	f240 705d 	movw	r0, #1885	; 0x75d
    1f7e:	f3af 8000 	nop.w
    1f82:	a802      	add	r0, sp, #8
    1f84:	f001 f8fc 	bl	3180 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1f8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1f90:	4633      	mov	r3, r6
    1f92:	aa09      	add	r2, sp, #36	; 0x24
    1f94:	a80e      	add	r0, sp, #56	; 0x38
    1f96:	9916      	ldr	r1, [sp, #88]	; 0x58
    1f98:	f7ff fa5a 	bl	1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>
    1f9c:	b124      	cbz	r4, 1fa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    1f9e:	2100      	movs	r1, #0
    1fa0:	f240 7064 	movw	r0, #1892	; 0x764
    1fa4:	f3af 8000 	nop.w
    1fa8:	4a9c      	ldr	r2, [pc, #624]	; (221c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x21c>)
    1faa:	990e      	ldr	r1, [sp, #56]	; 0x38
    1fac:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    1fb0:	a809      	add	r0, sp, #36	; 0x24
    1fb2:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    1fb6:	2a01      	cmp	r2, #1
    1fb8:	bf18      	it	ne
    1fba:	2a02      	cmpne	r2, #2
    1fbc:	d138      	bne.n	2030 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x30>
    1fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fc2:	eba2 0201 	sub.w	r2, r2, r1
    1fc6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1fca:	eba3 0101 	sub.w	r1, r3, r1
    1fce:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    1fd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1fd6:	2a02      	cmp	r2, #2
    1fd8:	d364      	bcc.n	20a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa4>
    1fda:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1fde:	bf98      	it	ls
    1fe0:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1fe4:	d85e      	bhi.n	20a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa4>
    1fe6:	f04f 0801 	mov.w	r8, #1
    1fea:	ab14      	add	r3, sp, #80	; 0x50
    1fec:	aa13      	add	r2, sp, #76	; 0x4c
    1fee:	4631      	mov	r1, r6
    1ff0:	f7fe ff04 	bl	dfc <MPSL_IRQ_RADIO_Handler+0x428>
    1ff4:	2800      	cmp	r0, #0
    1ff6:	d05d      	beq.n	20b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb4>
    1ff8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1ffc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    2000:	4633      	mov	r3, r6
    2002:	428a      	cmp	r2, r1
    2004:	d05a      	beq.n	20bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xbc>
    2006:	2005      	movs	r0, #5
    2008:	f7fe fd04 	bl	a14 <MPSL_IRQ_RADIO_Handler+0x40>
    200c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2010:	7048      	strb	r0, [r1, #1]
    2012:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2016:	2820      	cmp	r0, #32
    2018:	bf1c      	itt	ne
    201a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    201e:	f880 a001 	strbne.w	sl, [r0, #1]
    2022:	d057      	beq.n	20d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd4>
    2024:	4632      	mov	r2, r6
    2026:	4651      	mov	r1, sl
    2028:	f05f 0003 	movs.w	r0, #3
    202c:	f7ff fc24 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    2030:	b124      	cbz	r4, 203c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3c>
    2032:	2100      	movs	r1, #0
    2034:	f240 7069 	movw	r0, #1897	; 0x769
    2038:	f3af 8000 	nop.w
    203c:	4878      	ldr	r0, [pc, #480]	; (2220 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x220>)
    203e:	2800      	cmp	r0, #0
    2040:	bf18      	it	ne
    2042:	f3af 8000 	nopne.w
    2046:	f3ef 8910 	mrs	r9, PRIMASK
    204a:	b672      	cpsid	i
    204c:	b124      	cbz	r4, 2058 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x58>
    204e:	2100      	movs	r1, #0
    2050:	f240 706f 	movw	r0, #1903	; 0x76f
    2054:	f3af 8000 	nop.w
    2058:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    205c:	f88d 0008 	strb.w	r0, [sp, #8]
    2060:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2064:	2800      	cmp	r0, #0
    2066:	f47f af39 	bne.w	1edc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    206a:	b124      	cbz	r4, 2076 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x76>
    206c:	2100      	movs	r1, #0
    206e:	f240 7077 	movw	r0, #1911	; 0x777
    2072:	f3af 8000 	nop.w
    2076:	af09      	add	r7, sp, #36	; 0x24
    2078:	9800      	ldr	r0, [sp, #0]
    207a:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    207e:	f100 0708 	add.w	r7, r0, #8
    2082:	f1b8 0f00 	cmp.w	r8, #0
    2086:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    208a:	990d      	ldr	r1, [sp, #52]	; 0x34
    208c:	6181      	str	r1, [r0, #24]
    208e:	d051      	beq.n	2134 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x134>
    2090:	b124      	cbz	r4, 209c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9c>
    2092:	2100      	movs	r1, #0
    2094:	f240 7084 	movw	r0, #1924	; 0x784
    2098:	f3af 8000 	nop.w
    209c:	f1bb 0f00 	cmp.w	fp, #0
    20a0:	d139      	bne.n	2116 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x116>
    20a2:	e01f      	b.n	20e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe4>
    20a4:	4632      	mov	r2, r6
    20a6:	4651      	mov	r1, sl
    20a8:	2004      	movs	r0, #4
    20aa:	f7ff fbe5 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    20ae:	f04f 0801 	mov.w	r8, #1
    20b2:	e7bd      	b.n	2030 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x30>
    20b4:	4632      	mov	r2, r6
    20b6:	4651      	mov	r1, sl
    20b8:	2004      	movs	r0, #4
    20ba:	e7b7      	b.n	202c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c>
    20bc:	2920      	cmp	r1, #32
    20be:	bf19      	ittee	ne
    20c0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    20c4:	7840      	ldrbne	r0, [r0, #1]
    20c6:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    20ca:	4428      	addeq	r0, r5
    20cc:	bf08      	it	eq
    20ce:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    20d2:	e79b      	b.n	200c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc>
    20d4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    20d8:	4429      	add	r1, r5
    20da:	f881 a020 	strb.w	sl, [r1, #32]
    20de:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    20e2:	e79f      	b.n	2024 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x24>
    20e4:	9811      	ldr	r0, [sp, #68]	; 0x44
    20e6:	f010 0fff 	tst.w	r0, #255	; 0xff
    20ea:	d014      	beq.n	2116 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x116>
    20ec:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    20f0:	2820      	cmp	r0, #32
    20f2:	d110      	bne.n	2116 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x116>
    20f4:	b124      	cbz	r4, 2100 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x100>
    20f6:	2100      	movs	r1, #0
    20f8:	f240 7089 	movw	r0, #1929	; 0x789
    20fc:	f3af 8000 	nop.w
    2100:	4631      	mov	r1, r6
    2102:	2002      	movs	r0, #2
    2104:	f7ff fbea 	bl	18dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x554>
    2108:	9010      	str	r0, [sp, #64]	; 0x40
    210a:	b920      	cbnz	r0, 2116 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x116>
    210c:	9816      	ldr	r0, [sp, #88]	; 0x58
    210e:	7800      	ldrb	r0, [r0, #0]
    2110:	b1e8      	cbz	r0, 214e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14e>
    2112:	2801      	cmp	r0, #1
    2114:	d02a      	beq.n	216c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16c>
    2116:	b124      	cbz	r4, 2122 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x122>
    2118:	2100      	movs	r1, #0
    211a:	f240 70a6 	movw	r0, #1958	; 0x7a6
    211e:	f3af 8000 	nop.w
    2122:	20ff      	movs	r0, #255	; 0xff
    2124:	f1bb 0f00 	cmp.w	fp, #0
    2128:	bf18      	it	ne
    212a:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    212e:	d026      	beq.n	217e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x17e>
    2130:	f04f 0801 	mov.w	r8, #1
    2134:	b124      	cbz	r4, 2140 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x140>
    2136:	2100      	movs	r1, #0
    2138:	f240 70b7 	movw	r0, #1975	; 0x7b7
    213c:	f3af 8000 	nop.w
    2140:	9810      	ldr	r0, [sp, #64]	; 0x40
    2142:	4e38      	ldr	r6, [pc, #224]	; (2224 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x224>)
    2144:	2802      	cmp	r0, #2
    2146:	d023      	beq.n	2190 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x190>
    2148:	2801      	cmp	r0, #1
    214a:	d029      	beq.n	21a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a0>
    214c:	e02d      	b.n	21aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1aa>
    214e:	b124      	cbz	r4, 215a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x15a>
    2150:	2100      	movs	r1, #0
    2152:	f240 7091 	movw	r0, #1937	; 0x791
    2156:	f3af 8000 	nop.w
    215a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    215e:	4651      	mov	r1, sl
    2160:	2004      	movs	r0, #4
    2162:	f7ff fb89 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    2166:	f04f 0801 	mov.w	r8, #1
    216a:	e7e3      	b.n	2134 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x134>
    216c:	2c00      	cmp	r4, #0
    216e:	f43f aeb5 	beq.w	1edc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2172:	2100      	movs	r1, #0
    2174:	f240 709c 	movw	r0, #1948	; 0x79c
    2178:	f3af 8000 	nop.w
    217c:	e6ae      	b.n	1edc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    217e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2182:	2101      	movs	r1, #1
    2184:	4391      	bics	r1, r2
    2186:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    218a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    218e:	e7cf      	b.n	2130 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x130>
    2190:	68a8      	ldr	r0, [r5, #8]
    2192:	990e      	ldr	r1, [sp, #56]	; 0x38
    2194:	1a40      	subs	r0, r0, r1
    2196:	f00a f826 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    219a:	6871      	ldr	r1, [r6, #4]
    219c:	b921      	cbnz	r1, 21a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a8>
    219e:	e004      	b.n	21aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1aa>
    21a0:	6871      	ldr	r1, [r6, #4]
    21a2:	f04f 30ff 	mov.w	r0, #4294967295
    21a6:	b101      	cbz	r1, 21aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1aa>
    21a8:	4788      	blx	r1
    21aa:	f1b9 0f00 	cmp.w	r9, #0
    21ae:	d024      	beq.n	21fa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1fa>
    21b0:	b124      	cbz	r4, 21bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1bc>
    21b2:	2100      	movs	r1, #0
    21b4:	f240 70c7 	movw	r0, #1991	; 0x7c7
    21b8:	f3af 8000 	nop.w
    21bc:	f1b8 0f00 	cmp.w	r8, #0
    21c0:	d011      	beq.n	21e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e6>
    21c2:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    21c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    21ca:	4428      	add	r0, r5
    21cc:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    21d0:	2820      	cmp	r0, #32
    21d2:	d008      	beq.n	21e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e6>
    21d4:	b124      	cbz	r4, 21e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e0>
    21d6:	2100      	movs	r1, #0
    21d8:	f240 70ce 	movw	r0, #1998	; 0x7ce
    21dc:	f3af 8000 	nop.w
    21e0:	7870      	ldrb	r0, [r6, #1]
    21e2:	f001 ffb9 	bl	4158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    21e6:	b124      	cbz	r4, 21f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f2>
    21e8:	2100      	movs	r1, #0
    21ea:	f240 70d3 	movw	r0, #2003	; 0x7d3
    21ee:	f3af 8000 	nop.w
    21f2:	b017      	add	sp, #92	; 0x5c
    21f4:	4640      	mov	r0, r8
    21f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21fa:	4807      	ldr	r0, [pc, #28]	; (2218 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x218>)
    21fc:	2800      	cmp	r0, #0
    21fe:	bf18      	it	ne
    2200:	f3af 8000 	nopne.w
    2204:	b662      	cpsie	i
    2206:	e7d3      	b.n	21b0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1b0>
    2208:	e000ed04 	.word	0xe000ed04
    220c:	2000105c 	.word	0x2000105c
    2210:	00000000 	.word	0x00000000
    2214:	20000c5c 	.word	0x20000c5c
    2218:	00000000 	.word	0x00000000
    221c:	20000fdc 	.word	0x20000fdc
    2220:	00000000 	.word	0x00000000
    2224:	2000003c 	.word	0x2000003c

00002228 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    222c:	4606      	mov	r6, r0
    222e:	7800      	ldrb	r0, [r0, #0]
    2230:	b08d      	sub	sp, #52	; 0x34
    2232:	b118      	cbz	r0, 223c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    2234:	b00d      	add	sp, #52	; 0x34
    2236:	2000      	movs	r0, #0
    2238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    223c:	488c      	ldr	r0, [pc, #560]	; (2470 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    223e:	6800      	ldr	r0, [r0, #0]
    2240:	05c0      	lsls	r0, r0, #23
    2242:	0dc0      	lsrs	r0, r0, #23
    2244:	d00e      	beq.n	2264 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    2246:	3810      	subs	r0, #16
    2248:	b240      	sxtb	r0, r0
    224a:	2800      	cmp	r0, #0
    224c:	bfb8      	it	lt
    224e:	f000 000f 	andlt.w	r0, r0, #15
    2252:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2256:	bfac      	ite	ge
    2258:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    225c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2260:	0940      	lsrs	r0, r0, #5
    2262:	d0e7      	beq.n	2234 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    2264:	4d83      	ldr	r5, [pc, #524]	; (2474 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    2266:	4c84      	ldr	r4, [pc, #528]	; (2478 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    2268:	f04f 0b01 	mov.w	fp, #1
    226c:	2700      	movs	r7, #0
    226e:	b125      	cbz	r5, 227a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    2270:	2100      	movs	r1, #0
    2272:	f240 50e5 	movw	r0, #1509	; 0x5e5
    2276:	f3af 8000 	nop.w
    227a:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
    227e:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    2282:	f04f 0900 	mov.w	r9, #0
    2286:	b125      	cbz	r5, 2292 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    2288:	2100      	movs	r1, #0
    228a:	f240 50ea 	movw	r0, #1514	; 0x5ea
    228e:	f3af 8000 	nop.w
    2292:	487a      	ldr	r0, [pc, #488]	; (247c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    2294:	ea2b 080a 	bic.w	r8, fp, sl
    2298:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    229c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    22a0:	2240      	movs	r2, #64	; 0x40
    22a2:	f00a f8fa 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    22a6:	b125      	cbz	r5, 22b2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    22a8:	2100      	movs	r1, #0
    22aa:	f240 505e 	movw	r0, #1374	; 0x55e
    22ae:	f3af 8000 	nop.w
    22b2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    22b6:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    22ba:	4421      	add	r1, r4
    22bc:	4420      	add	r0, r4
    22be:	8c0a      	ldrh	r2, [r1, #32]
    22c0:	8402      	strh	r2, [r0, #32]
    22c2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    22c6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    22ca:	b125      	cbz	r5, 22d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    22cc:	2100      	movs	r1, #0
    22ce:	f240 5062 	movw	r0, #1378	; 0x562
    22d2:	f3af 8000 	nop.w
    22d6:	b125      	cbz	r5, 22e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    22d8:	2100      	movs	r1, #0
    22da:	f240 50ef 	movw	r0, #1519	; 0x5ef
    22de:	f3af 8000 	nop.w
    22e2:	a808      	add	r0, sp, #32
    22e4:	f000 ff4c 	bl	3180 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    22e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    22ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    22f0:	4643      	mov	r3, r8
    22f2:	466a      	mov	r2, sp
    22f4:	4631      	mov	r1, r6
    22f6:	a80a      	add	r0, sp, #40	; 0x28
    22f8:	f7ff f8aa 	bl	1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>
    22fc:	b125      	cbz	r5, 2308 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    22fe:	2100      	movs	r1, #0
    2300:	f240 50f5 	movw	r0, #1525	; 0x5f5
    2304:	f3af 8000 	nop.w
    2308:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    230c:	2820      	cmp	r0, #32
    230e:	d01a      	beq.n	2346 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    2310:	68e0      	ldr	r0, [r4, #12]
    2312:	9900      	ldr	r1, [sp, #0]
    2314:	1a09      	subs	r1, r1, r0
    2316:	0209      	lsls	r1, r1, #8
    2318:	17ca      	asrs	r2, r1, #31
    231a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    231e:	1209      	asrs	r1, r1, #8
    2320:	d511      	bpl.n	2346 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    2322:	9900      	ldr	r1, [sp, #0]
    2324:	4281      	cmp	r1, r0
    2326:	d902      	bls.n	232e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    2328:	9902      	ldr	r1, [sp, #8]
    232a:	1c49      	adds	r1, r1, #1
    232c:	9102      	str	r1, [sp, #8]
    232e:	e9dd 2100 	ldrd	r2, r1, [sp]
    2332:	1a89      	subs	r1, r1, r2
    2334:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2338:	4408      	add	r0, r1
    233a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    233e:	e9cd 2000 	strd	r2, r0, [sp]
    2342:	f04f 0901 	mov.w	r9, #1
    2346:	b125      	cbz	r5, 2352 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    2348:	2100      	movs	r1, #0
    234a:	f240 50ff 	movw	r0, #1535	; 0x5ff
    234e:	f3af 8000 	nop.w
    2352:	9900      	ldr	r1, [sp, #0]
    2354:	980a      	ldr	r0, [sp, #40]	; 0x28
    2356:	9a01      	ldr	r2, [sp, #4]
    2358:	1a09      	subs	r1, r1, r0
    235a:	1a10      	subs	r0, r2, r0
    235c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2360:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2364:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2368:	bf98      	it	ls
    236a:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    236e:	d809      	bhi.n	2384 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    2370:	4643      	mov	r3, r8
    2372:	4669      	mov	r1, sp
    2374:	4842      	ldr	r0, [pc, #264]	; (2480 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    2376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2378:	f7fe fb88 	bl	a8c <MPSL_IRQ_RADIO_Handler+0xb8>
    237c:	ea59 0000 	orrs.w	r0, r9, r0
    2380:	d129      	bne.n	23d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    2382:	e042      	b.n	240a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    2384:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2386:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    238a:	9002      	str	r0, [sp, #8]
    238c:	aa09      	add	r2, sp, #36	; 0x24
    238e:	a907      	add	r1, sp, #28
    2390:	4650      	mov	r0, sl
    2392:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    2396:	f000 fd83 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    239a:	f001 fa91 	bl	38c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    239e:	f000 fd63 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    23a2:	4681      	mov	r9, r0
    23a4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    23a8:	2820      	cmp	r0, #32
    23aa:	d03b      	beq.n	2424 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    23ac:	68e0      	ldr	r0, [r4, #12]
    23ae:	1d40      	adds	r0, r0, #5
    23b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23b4:	9900      	ldr	r1, [sp, #0]
    23b6:	4281      	cmp	r1, r0
    23b8:	d902      	bls.n	23c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    23ba:	9902      	ldr	r1, [sp, #8]
    23bc:	1c49      	adds	r1, r1, #1
    23be:	9102      	str	r1, [sp, #8]
    23c0:	e9dd 2100 	ldrd	r2, r1, [sp]
    23c4:	1a89      	subs	r1, r1, r2
    23c6:	9000      	str	r0, [sp, #0]
    23c8:	4408      	add	r0, r1
    23ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23ce:	9001      	str	r0, [sp, #4]
    23d0:	201f      	movs	r0, #31
    23d2:	f88d 000c 	strb.w	r0, [sp, #12]
    23d6:	9800      	ldr	r0, [sp, #0]
    23d8:	f009 ff05 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    23dc:	1c41      	adds	r1, r0, #1
    23de:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    23e2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    23e6:	4410      	add	r0, r2
    23e8:	4408      	add	r0, r1
    23ea:	e9c6 0704 	strd	r0, r7, [r6, #16]
    23ee:	b125      	cbz	r5, 23fa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    23f0:	2100      	movs	r1, #0
    23f2:	f240 601a 	movw	r0, #1562	; 0x61a
    23f6:	f3af 8000 	nop.w
    23fa:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    23fe:	4a21      	ldr	r2, [pc, #132]	; (2484 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    2400:	9b02      	ldr	r3, [sp, #8]
    2402:	fbe3 1002 	umlal	r1, r0, r3, r2
    2406:	e9c6 1004 	strd	r1, r0, [r6, #16]
    240a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    240e:	f88d 0014 	strb.w	r0, [sp, #20]
    2412:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2416:	2800      	cmp	r0, #0
    2418:	f47f af29 	bne.w	226e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    241c:	b00d      	add	sp, #52	; 0x34
    241e:	2001      	movs	r0, #1
    2420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2424:	f108 0809 	add.w	r8, r8, #9
    2428:	f1ba 0f00 	cmp.w	sl, #0
    242c:	d016      	beq.n	245c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    242e:	f001 fd47 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2432:	b998      	cbnz	r0, 245c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    2434:	f001 fc12 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2438:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    243c:	bf08      	it	eq
    243e:	200d      	moveq	r0, #13
    2440:	d00b      	beq.n	245a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    2442:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2446:	3856      	subs	r0, #86	; 0x56
    2448:	bf08      	it	eq
    244a:	201c      	moveq	r0, #28
    244c:	d005      	beq.n	245a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    244e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2452:	389f      	subs	r0, #159	; 0x9f
    2454:	bf14      	ite	ne
    2456:	4638      	movne	r0, r7
    2458:	2032      	moveq	r0, #50	; 0x32
    245a:	4480      	add	r8, r0
    245c:	9807      	ldr	r0, [sp, #28]
    245e:	4581      	cmp	r9, r0
    2460:	bf84      	itt	hi
    2462:	eba9 0000 	subhi.w	r0, r9, r0
    2466:	4480      	addhi	r8, r0
    2468:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    246c:	e7a2      	b.n	23b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    246e:	0000      	.short	0x0000
    2470:	e000ed04 	.word	0xe000ed04
    2474:	00000000 	.word	0x00000000
    2478:	2000105c 	.word	0x2000105c
    247c:	20000fdc 	.word	0x20000fdc
    2480:	0f424000 	.word	0x0f424000
    2484:	1e848000 	.word	0x1e848000

00002488 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2488:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    248c:	4d92      	ldr	r5, [pc, #584]	; (26d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    248e:	b08c      	sub	sp, #48	; 0x30
    2490:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2494:	2000      	movs	r0, #0
    2496:	9008      	str	r0, [sp, #32]
    2498:	9006      	str	r0, [sp, #24]
    249a:	2001      	movs	r0, #1
    249c:	4c8f      	ldr	r4, [pc, #572]	; (26dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    249e:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    24a2:	f04f 0800 	mov.w	r8, #0
    24a6:	4607      	mov	r7, r0
    24a8:	9007      	str	r0, [sp, #28]
    24aa:	b124      	cbz	r4, 24b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    24ac:	2100      	movs	r1, #0
    24ae:	f240 70e4 	movw	r0, #2020	; 0x7e4
    24b2:	f3af 8000 	nop.w
    24b6:	9807      	ldr	r0, [sp, #28]
    24b8:	2800      	cmp	r0, #0
    24ba:	d03c      	beq.n	2536 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    24bc:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    24c0:	b124      	cbz	r4, 24cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    24c2:	2100      	movs	r1, #0
    24c4:	f240 70e9 	movw	r0, #2025	; 0x7e9
    24c8:	f3af 8000 	nop.w
    24cc:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    24d0:	2240      	movs	r2, #64	; 0x40
    24d2:	ea27 060a 	bic.w	r6, r7, sl
    24d6:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    24da:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    24de:	4683      	mov	fp, r0
    24e0:	f009 ffdb 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    24e4:	b124      	cbz	r4, 24f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    24e6:	2100      	movs	r1, #0
    24e8:	f240 505e 	movw	r0, #1374	; 0x55e
    24ec:	f3af 8000 	nop.w
    24f0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    24f4:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    24f8:	4428      	add	r0, r5
    24fa:	4429      	add	r1, r5
    24fc:	9000      	str	r0, [sp, #0]
    24fe:	8c0a      	ldrh	r2, [r1, #32]
    2500:	8402      	strh	r2, [r0, #32]
    2502:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2506:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    250a:	b124      	cbz	r4, 2516 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    250c:	2100      	movs	r1, #0
    250e:	f240 5062 	movw	r0, #1378	; 0x562
    2512:	f3af 8000 	nop.w
    2516:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    251a:	f88d 0008 	strb.w	r0, [sp, #8]
    251e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2522:	b178      	cbz	r0, 2544 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2524:	2c00      	cmp	r4, #0
    2526:	bf1c      	itt	ne
    2528:	2100      	movne	r1, #0
    252a:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    252e:	d0bc      	beq.n	24aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    2530:	f3af 8000 	nop.w
    2534:	e7b9      	b.n	24aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    2536:	486a      	ldr	r0, [pc, #424]	; (26e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    2538:	2800      	cmp	r0, #0
    253a:	bf18      	it	ne
    253c:	f3af 8000 	nopne.w
    2540:	b662      	cpsie	i
    2542:	e7bb      	b.n	24bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2544:	b124      	cbz	r4, 2550 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    2546:	2100      	movs	r1, #0
    2548:	f240 70f3 	movw	r0, #2035	; 0x7f3
    254c:	f3af 8000 	nop.w
    2550:	980c      	ldr	r0, [sp, #48]	; 0x30
    2552:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2556:	2803      	cmp	r0, #3
    2558:	d17e      	bne.n	2658 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    255a:	9a00      	ldr	r2, [sp, #0]
    255c:	990c      	ldr	r1, [sp, #48]	; 0x30
    255e:	f892 0020 	ldrb.w	r0, [r2, #32]
    2562:	4288      	cmp	r0, r1
    2564:	bf14      	ite	ne
    2566:	f04f 0a00 	movne.w	sl, #0
    256a:	f04f 0a01 	moveq.w	sl, #1
    256e:	f102 0c20 	add.w	ip, r2, #32
    2572:	4683      	mov	fp, r0
    2574:	2220      	movs	r2, #32
    2576:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    257a:	e003      	b.n	2584 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    257c:	4602      	mov	r2, r0
    257e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2582:	7840      	ldrb	r0, [r0, #1]
    2584:	4288      	cmp	r0, r1
    2586:	d002      	beq.n	258e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    2588:	2820      	cmp	r0, #32
    258a:	d00a      	beq.n	25a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    258c:	e7f6      	b.n	257c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    258e:	2820      	cmp	r0, #32
    2590:	d007      	beq.n	25a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2592:	4583      	cmp	fp, r0
    2594:	d107      	bne.n	25a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    2596:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    259a:	7840      	ldrb	r0, [r0, #1]
    259c:	f88c 0000 	strb.w	r0, [ip]
    25a0:	e007      	b.n	25b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    25a2:	4640      	mov	r0, r8
    25a4:	e00c      	b.n	25c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    25a6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    25aa:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    25ae:	7840      	ldrb	r0, [r0, #1]
    25b0:	7048      	strb	r0, [r1, #1]
    25b2:	b124      	cbz	r4, 25be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    25b4:	2100      	movs	r1, #0
    25b6:	f240 40c9 	movw	r0, #1225	; 0x4c9
    25ba:	f3af 8000 	nop.w
    25be:	4638      	mov	r0, r7
    25c0:	46c3      	mov	fp, r8
    25c2:	ea10 0f0a 	tst.w	r0, sl
    25c6:	bf18      	it	ne
    25c8:	46bb      	movne	fp, r7
    25ca:	2800      	cmp	r0, #0
    25cc:	d04e      	beq.n	266c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    25ce:	b124      	cbz	r4, 25da <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    25d0:	2100      	movs	r1, #0
    25d2:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    25d6:	f3af 8000 	nop.w
    25da:	4632      	mov	r2, r6
    25dc:	2001      	movs	r0, #1
    25de:	990c      	ldr	r1, [sp, #48]	; 0x30
    25e0:	f7ff f94a 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    25e4:	b124      	cbz	r4, 25f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    25e6:	2100      	movs	r1, #0
    25e8:	f640 0001 	movw	r0, #2049	; 0x801
    25ec:	f3af 8000 	nop.w
    25f0:	483c      	ldr	r0, [pc, #240]	; (26e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    25f2:	2800      	cmp	r0, #0
    25f4:	bf18      	it	ne
    25f6:	f3af 8000 	nopne.w
    25fa:	f3ef 8010 	mrs	r0, PRIMASK
    25fe:	b672      	cpsid	i
    2600:	9007      	str	r0, [sp, #28]
    2602:	b124      	cbz	r4, 260e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    2604:	2100      	movs	r1, #0
    2606:	f640 0006 	movw	r0, #2054	; 0x806
    260a:	f3af 8000 	nop.w
    260e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2612:	f88d 0008 	strb.w	r0, [sp, #8]
    2616:	f89d 0008 	ldrb.w	r0, [sp, #8]
    261a:	b138      	cbz	r0, 262c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    261c:	2c00      	cmp	r4, #0
    261e:	bf1c      	itt	ne
    2620:	2100      	movne	r1, #0
    2622:	f640 000a 	movwne	r0, #2058	; 0x80a
    2626:	f43f af40 	beq.w	24aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    262a:	e781      	b.n	2530 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    262c:	f1bb 0f00 	cmp.w	fp, #0
    2630:	d009      	beq.n	2646 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    2632:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2636:	2820      	cmp	r0, #32
    2638:	d105      	bne.n	2646 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    263a:	4631      	mov	r1, r6
    263c:	2002      	movs	r0, #2
    263e:	f7ff f94d 	bl	18dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x554>
    2642:	9006      	str	r0, [sp, #24]
    2644:	b1f8      	cbz	r0, 2686 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    2646:	b124      	cbz	r4, 2652 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    2648:	2100      	movs	r1, #0
    264a:	f640 001e 	movw	r0, #2078	; 0x81e
    264e:	f3af 8000 	nop.w
    2652:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2656:	e000      	b.n	265a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2658:	e008      	b.n	266c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    265a:	ea27 0000 	bic.w	r0, r7, r0
    265e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    2662:	20ff      	movs	r0, #255	; 0xff
    2664:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    2668:	2001      	movs	r0, #1
    266a:	9008      	str	r0, [sp, #32]
    266c:	b124      	cbz	r4, 2678 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    266e:	2100      	movs	r1, #0
    2670:	f640 0027 	movw	r0, #2087	; 0x827
    2674:	f3af 8000 	nop.w
    2678:	9806      	ldr	r0, [sp, #24]
    267a:	4e1b      	ldr	r6, [pc, #108]	; (26e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    267c:	2802      	cmp	r0, #2
    267e:	d009      	beq.n	2694 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    2680:	2801      	cmp	r0, #1
    2682:	d010      	beq.n	26a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    2684:	e014      	b.n	26b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2686:	b19c      	cbz	r4, 26b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2688:	2100      	movs	r1, #0
    268a:	f640 0019 	movw	r0, #2073	; 0x819
    268e:	f3af 8000 	nop.w
    2692:	e7ec      	b.n	266e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2694:	f000 fd6e 	bl	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2698:	68a9      	ldr	r1, [r5, #8]
    269a:	1a08      	subs	r0, r1, r0
    269c:	f009 fda3 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    26a0:	6871      	ldr	r1, [r6, #4]
    26a2:	b921      	cbnz	r1, 26ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    26a4:	e004      	b.n	26b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    26a6:	6871      	ldr	r1, [r6, #4]
    26a8:	f04f 30ff 	mov.w	r0, #4294967295
    26ac:	b101      	cbz	r1, 26b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    26ae:	4788      	blx	r1
    26b0:	9807      	ldr	r0, [sp, #28]
    26b2:	b148      	cbz	r0, 26c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    26b4:	b124      	cbz	r4, 26c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    26b6:	2100      	movs	r1, #0
    26b8:	f640 003c 	movw	r0, #2108	; 0x83c
    26bc:	f3af 8000 	nop.w
    26c0:	9808      	ldr	r0, [sp, #32]
    26c2:	b00d      	add	sp, #52	; 0x34
    26c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26c8:	4805      	ldr	r0, [pc, #20]	; (26e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    26ca:	2800      	cmp	r0, #0
    26cc:	bf18      	it	ne
    26ce:	f3af 8000 	nopne.w
    26d2:	b662      	cpsie	i
    26d4:	e7ee      	b.n	26b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    26d6:	0000      	.short	0x0000
    26d8:	2000105c 	.word	0x2000105c
	...
    26e8:	2000003c 	.word	0x2000003c

000026ec <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    26ec:	2820      	cmp	r0, #32
    26ee:	bf24      	itt	cs
    26f0:	2000      	movcs	r0, #0
    26f2:	4770      	bxcs	lr
    26f4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    26f8:	4b03      	ldr	r3, [pc, #12]	; (2708 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    26fa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    26fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2702:	6042      	str	r2, [r0, #4]
    2704:	2001      	movs	r0, #1
    2706:	4770      	bx	lr
    2708:	20000c5c 	.word	0x20000c5c

0000270c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    270c:	b510      	push	{r4, lr}
    270e:	2820      	cmp	r0, #32
    2710:	d211      	bcs.n	2736 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2712:	490e      	ldr	r1, [pc, #56]	; (274c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2714:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2718:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    271c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2720:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2724:	b13b      	cbz	r3, 2736 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2726:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    272a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    272e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2732:	2a01      	cmp	r2, #1
    2734:	d001      	beq.n	273a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2736:	2000      	movs	r0, #0
    2738:	bd10      	pop	{r4, pc}
    273a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    273e:	4601      	mov	r1, r0
    2740:	2000      	movs	r0, #0
    2742:	f7ff f899 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    2746:	2001      	movs	r0, #1
    2748:	bd10      	pop	{r4, pc}
    274a:	0000      	.short	0x0000
    274c:	2000105c 	.word	0x2000105c

00002750 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2754:	4e86      	ldr	r6, [pc, #536]	; (2970 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    2756:	4680      	mov	r8, r0
    2758:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    275c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2760:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2764:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2768:	2800      	cmp	r0, #0
    276a:	d071      	beq.n	2850 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    276c:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    2770:	4d80      	ldr	r5, [pc, #512]	; (2974 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    2772:	b125      	cbz	r5, 277e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2774:	2100      	movs	r1, #0
    2776:	f640 30ae 	movw	r0, #2990	; 0xbae
    277a:	f3af 8000 	nop.w
    277e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2782:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2786:	2801      	cmp	r0, #1
    2788:	d018      	beq.n	27bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    278a:	b2c0      	uxtb	r0, r0
    278c:	2804      	cmp	r0, #4
    278e:	bf1c      	itt	ne
    2790:	2805      	cmpne	r0, #5
    2792:	2806      	cmpne	r0, #6
    2794:	d061      	beq.n	285a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    2796:	b12d      	cbz	r5, 27a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2798:	f04f 0100 	mov.w	r1, #0
    279c:	f640 30ba 	movw	r0, #3002	; 0xbba
    27a0:	f3af 8000 	nop.w
    27a4:	f001 fd3e 	bl	4224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    27a8:	b125      	cbz	r5, 27b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    27aa:	2100      	movs	r1, #0
    27ac:	f640 30be 	movw	r0, #3006	; 0xbbe
    27b0:	f3af 8000 	nop.w
    27b4:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    27b8:	2801      	cmp	r0, #1
    27ba:	d1e6      	bne.n	278a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    27bc:	2401      	movs	r4, #1
    27be:	b125      	cbz	r5, 27ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    27c0:	2100      	movs	r1, #0
    27c2:	f640 30c5 	movw	r0, #3013	; 0xbc5
    27c6:	f3af 8000 	nop.w
    27ca:	2c00      	cmp	r4, #0
    27cc:	d04b      	beq.n	2866 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    27ce:	2000      	movs	r0, #0
    27d0:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    27d4:	b125      	cbz	r5, 27e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    27d6:	2100      	movs	r1, #0
    27d8:	f640 30ca 	movw	r0, #3018	; 0xbca
    27dc:	f3af 8000 	nop.w
    27e0:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    27e4:	2001      	movs	r0, #1
    27e6:	ea20 090b 	bic.w	r9, r0, fp
    27ea:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    27ee:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    27f2:	2240      	movs	r2, #64	; 0x40
    27f4:	f009 fe51 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    27f8:	b125      	cbz	r5, 2804 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    27fa:	2100      	movs	r1, #0
    27fc:	f240 505e 	movw	r0, #1374	; 0x55e
    2800:	f3af 8000 	nop.w
    2804:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2808:	eb00 0a06 	add.w	sl, r0, r6
    280c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2810:	4430      	add	r0, r6
    2812:	8c01      	ldrh	r1, [r0, #32]
    2814:	f8aa 1020 	strh.w	r1, [sl, #32]
    2818:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    281c:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2820:	b125      	cbz	r5, 282c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2822:	2100      	movs	r1, #0
    2824:	f240 5062 	movw	r0, #1378	; 0x562
    2828:	f3af 8000 	nop.w
    282c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2830:	f88d 0000 	strb.w	r0, [sp]
    2834:	f89d 0000 	ldrb.w	r0, [sp]
    2838:	b1e0      	cbz	r0, 2874 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    283a:	2d00      	cmp	r5, #0
    283c:	bf1c      	itt	ne
    283e:	2100      	movne	r1, #0
    2840:	f44f 603d 	movne.w	r0, #3024	; 0xbd0
    2844:	d0bb      	beq.n	27be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2846:	bf00      	nop
    2848:	f3af 8000 	nop.w
    284c:	e7b7      	b.n	27be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    284e:	e7ff      	b.n	2850 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2850:	f640 31a5 	movw	r1, #2981	; 0xba5
    2854:	2070      	movs	r0, #112	; 0x70
    2856:	f001 fbab 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    285a:	464a      	mov	r2, r9
    285c:	4641      	mov	r1, r8
    285e:	2001      	movs	r0, #1
    2860:	f7ff f80a 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    2864:	e7a0      	b.n	27a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2866:	4844      	ldr	r0, [pc, #272]	; (2978 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2868:	2800      	cmp	r0, #0
    286a:	bf18      	it	ne
    286c:	f3af 8000 	nopne.w
    2870:	b662      	cpsie	i
    2872:	e7ac      	b.n	27ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2874:	b125      	cbz	r5, 2880 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    2876:	2100      	movs	r1, #0
    2878:	f640 30d4 	movw	r0, #3028	; 0xbd4
    287c:	f3af 8000 	nop.w
    2880:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2884:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2888:	4640      	mov	r0, r8
    288a:	461c      	mov	r4, r3
    288c:	f04f 0b20 	mov.w	fp, #32
    2890:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2894:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2898:	e004      	b.n	28a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    289a:	46a3      	mov	fp, r4
    289c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    28a0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    28a4:	4284      	cmp	r4, r0
    28a6:	d002      	beq.n	28ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    28a8:	2c20      	cmp	r4, #32
    28aa:	d02b      	beq.n	2904 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    28ac:	e7f5      	b.n	289a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    28ae:	2c20      	cmp	r4, #32
    28b0:	d028      	beq.n	2904 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    28b2:	42a3      	cmp	r3, r4
    28b4:	d104      	bne.n	28c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    28b6:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    28ba:	7840      	ldrb	r0, [r0, #1]
    28bc:	7008      	strb	r0, [r1, #0]
    28be:	e005      	b.n	28cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    28c0:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    28c4:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    28c8:	7840      	ldrb	r0, [r0, #1]
    28ca:	7048      	strb	r0, [r1, #1]
    28cc:	f1ba 0f00 	cmp.w	sl, #0
    28d0:	d011      	beq.n	28f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    28d2:	b125      	cbz	r5, 28de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    28d4:	2100      	movs	r1, #0
    28d6:	f240 40c1 	movw	r0, #1217	; 0x4c1
    28da:	f3af 8000 	nop.w
    28de:	f89a 0000 	ldrb.w	r0, [sl]
    28e2:	42a0      	cmp	r0, r4
    28e4:	d107      	bne.n	28f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    28e6:	b125      	cbz	r5, 28f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    28e8:	2100      	movs	r1, #0
    28ea:	f240 40c4 	movw	r0, #1220	; 0x4c4
    28ee:	f3af 8000 	nop.w
    28f2:	f88a b000 	strb.w	fp, [sl]
    28f6:	b15d      	cbz	r5, 2910 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    28f8:	2100      	movs	r1, #0
    28fa:	f240 40c9 	movw	r0, #1225	; 0x4c9
    28fe:	f3af 8000 	nop.w
    2902:	e000      	b.n	2906 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    2904:	b125      	cbz	r5, 2910 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2906:	2100      	movs	r1, #0
    2908:	f640 30d8 	movw	r0, #3032	; 0xbd8
    290c:	f3af 8000 	nop.w
    2910:	481a      	ldr	r0, [pc, #104]	; (297c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    2912:	2800      	cmp	r0, #0
    2914:	bf18      	it	ne
    2916:	f3af 8000 	nopne.w
    291a:	f3ef 8410 	mrs	r4, PRIMASK
    291e:	b672      	cpsid	i
    2920:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2924:	f88d 0000 	strb.w	r0, [sp]
    2928:	f89d 0000 	ldrb.w	r0, [sp]
    292c:	b138      	cbz	r0, 293e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    292e:	2d00      	cmp	r5, #0
    2930:	bf1c      	itt	ne
    2932:	2100      	movne	r1, #0
    2934:	f640 30de 	movwne	r0, #3038	; 0xbde
    2938:	f43f af41 	beq.w	27be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    293c:	e784      	b.n	2848 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    293e:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    2942:	20ff      	movs	r0, #255	; 0xff
    2944:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2948:	b154      	cbz	r4, 2960 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    294a:	2d00      	cmp	r5, #0
    294c:	bf08      	it	eq
    294e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2952:	2100      	movs	r1, #0
    2954:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2958:	f3af 8000 	nop.w
    295c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2960:	4805      	ldr	r0, [pc, #20]	; (2978 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2962:	2800      	cmp	r0, #0
    2964:	bf18      	it	ne
    2966:	f3af 8000 	nopne.w
    296a:	b662      	cpsie	i
    296c:	e7ed      	b.n	294a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    296e:	0000      	.short	0x0000
    2970:	2000105c 	.word	0x2000105c
	...

00002980 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2980:	b570      	push	{r4, r5, r6, lr}
    2982:	460d      	mov	r5, r1
    2984:	4606      	mov	r6, r0
    2986:	f001 fa89 	bl	3e9c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    298a:	480f      	ldr	r0, [pc, #60]	; (29c8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    298c:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    2990:	2400      	movs	r4, #0
    2992:	3880      	subs	r0, #128	; 0x80
    2994:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2998:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    299c:	b129      	cbz	r1, 29aa <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    299e:	1c61      	adds	r1, r4, #1
    29a0:	b2cc      	uxtb	r4, r1
    29a2:	2c20      	cmp	r4, #32
    29a4:	d3f8      	bcc.n	2998 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    29a6:	2020      	movs	r0, #32
    29a8:	bd70      	pop	{r4, r5, r6, pc}
    29aa:	4808      	ldr	r0, [pc, #32]	; (29cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    29ac:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    29b0:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    29b4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    29b8:	4621      	mov	r1, r4
    29ba:	6045      	str	r5, [r0, #4]
    29bc:	2001      	movs	r0, #1
    29be:	f7fe ff5b 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    29c2:	4620      	mov	r0, r4
    29c4:	bd70      	pop	{r4, r5, r6, pc}
    29c6:	0000      	.short	0x0000
    29c8:	2000105c 	.word	0x2000105c
    29cc:	20000c5c 	.word	0x20000c5c

000029d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    29d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29d4:	b083      	sub	sp, #12
    29d6:	f000 fbcd 	bl	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    29da:	4605      	mov	r5, r0
    29dc:	f000 fe9c 	bl	3718 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    29e0:	4c84      	ldr	r4, [pc, #528]	; (2bf4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    29e2:	6860      	ldr	r0, [r4, #4]
    29e4:	f1b0 3fff 	cmp.w	r0, #4294967295
    29e8:	bf1c      	itt	ne
    29ea:	f04f 30ff 	movne.w	r0, #4294967295
    29ee:	6060      	strne	r0, [r4, #4]
    29f0:	7fa0      	ldrb	r0, [r4, #30]
    29f2:	f8df 9204 	ldr.w	r9, [pc, #516]	; 2bf8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    29f6:	b990      	cbnz	r0, 2a1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    29f8:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    29fc:	1a40      	subs	r0, r0, r1
    29fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a02:	f44f 710c 	mov.w	r1, #560	; 0x230
    2a06:	f009 fc19 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2a0a:	68e1      	ldr	r1, [r4, #12]
    2a0c:	4408      	add	r0, r1
    2a0e:	1a28      	subs	r0, r5, r0
    2a10:	0200      	lsls	r0, r0, #8
    2a12:	17c1      	asrs	r1, r0, #31
    2a14:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2a18:	1200      	asrs	r0, r0, #8
    2a1a:	0fc0      	lsrs	r0, r0, #31
    2a1c:	d012      	beq.n	2a44 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    2a1e:	7e60      	ldrb	r0, [r4, #25]
    2a20:	b320      	cbz	r0, 2a6c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2a22:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2a26:	f88d 0000 	strb.w	r0, [sp]
    2a2a:	f89d 0000 	ldrb.w	r0, [sp]
    2a2e:	b1e8      	cbz	r0, 2a6c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2a30:	f000 fcce 	bl	33d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2a34:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    2a38:	b1f0      	cbz	r0, 2a78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    2a3a:	f240 31f5 	movw	r1, #1013	; 0x3f5
    2a3e:	2070      	movs	r0, #112	; 0x70
    2a40:	f001 fab6 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a44:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2a48:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2a4c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a50:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    2a54:	6840      	ldr	r0, [r0, #4]
    2a56:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2a5a:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    2a5e:	2108      	movs	r1, #8
    2a60:	4790      	blx	r2
    2a62:	f240 31dd 	movw	r1, #989	; 0x3dd
    2a66:	2070      	movs	r0, #112	; 0x70
    2a68:	f001 faa2 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a6c:	1ce8      	adds	r0, r5, #3
    2a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a72:	f000 fba5 	bl	31c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2a76:	e7dd      	b.n	2a34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    2a78:	2001      	movs	r0, #1
    2a7a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2a7e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2a82:	2820      	cmp	r0, #32
    2a84:	d021      	beq.n	2aca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    2a86:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
    2a8a:	2020      	movs	r0, #32
    2a8c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2a90:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2a94:	2000      	movs	r0, #0
    2a96:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2a9a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2a9e:	6020      	str	r0, [r4, #0]
    2aa0:	f000 ff14 	bl	38cc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    2aa4:	7720      	strb	r0, [r4, #28]
    2aa6:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    2aaa:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2aae:	1907      	adds	r7, r0, r4
    2ab0:	f897 0020 	ldrb.w	r0, [r7, #32]
    2ab4:	2820      	cmp	r0, #32
    2ab6:	d058      	beq.n	2b6a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2ab8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2abc:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    2ac0:	f899 001a 	ldrb.w	r0, [r9, #26]
    2ac4:	2801      	cmp	r0, #1
    2ac6:	d005      	beq.n	2ad4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    2ac8:	e04f      	b.n	2b6a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2aca:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    2ace:	2070      	movs	r0, #112	; 0x70
    2ad0:	f001 fa6e 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ad4:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    2ad8:	aa01      	add	r2, sp, #4
    2ada:	4669      	mov	r1, sp
    2adc:	4658      	mov	r0, fp
    2ade:	f000 f9df 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2ae2:	f000 feed 	bl	38c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    2ae6:	f000 f9bf 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2aea:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2aee:	2820      	cmp	r0, #32
    2af0:	d004      	beq.n	2afc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    2af2:	68e0      	ldr	r0, [r4, #12]
    2af4:	1d40      	adds	r0, r0, #5
    2af6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2afa:	e01d      	b.n	2b38 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    2afc:	f105 0a09 	add.w	sl, r5, #9
    2b00:	f1bb 0f00 	cmp.w	fp, #0
    2b04:	d016      	beq.n	2b34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2b06:	f001 f9db 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2b0a:	b998      	cbnz	r0, 2b34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2b0c:	f001 f8a6 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2b10:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2b14:	bf08      	it	eq
    2b16:	200d      	moveq	r0, #13
    2b18:	d00b      	beq.n	2b32 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    2b1a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2b1e:	3856      	subs	r0, #86	; 0x56
    2b20:	bf08      	it	eq
    2b22:	201c      	moveq	r0, #28
    2b24:	d005      	beq.n	2b32 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    2b26:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2b2a:	389f      	subs	r0, #159	; 0x9f
    2b2c:	bf14      	ite	ne
    2b2e:	2000      	movne	r0, #0
    2b30:	2032      	moveq	r0, #50	; 0x32
    2b32:	4482      	add	sl, r0
    2b34:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    2b38:	f8d9 2008 	ldr.w	r2, [r9, #8]
    2b3c:	1a81      	subs	r1, r0, r2
    2b3e:	0209      	lsls	r1, r1, #8
    2b40:	17cb      	asrs	r3, r1, #31
    2b42:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    2b46:	1209      	asrs	r1, r1, #8
    2b48:	2900      	cmp	r1, #0
    2b4a:	dc0e      	bgt.n	2b6a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2b4c:	f109 0308 	add.w	r3, r9, #8
    2b50:	4282      	cmp	r2, r0
    2b52:	d202      	bcs.n	2b5a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    2b54:	6899      	ldr	r1, [r3, #8]
    2b56:	1e49      	subs	r1, r1, #1
    2b58:	6099      	str	r1, [r3, #8]
    2b5a:	e9d3 2100 	ldrd	r2, r1, [r3]
    2b5e:	1a89      	subs	r1, r1, r2
    2b60:	6018      	str	r0, [r3, #0]
    2b62:	4408      	add	r0, r1
    2b64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b68:	6058      	str	r0, [r3, #4]
    2b6a:	4631      	mov	r1, r6
    2b6c:	2001      	movs	r0, #1
    2b6e:	f7fe feb5 	bl	18dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x554>
    2b72:	ea5f 0900 	movs.w	r9, r0
    2b76:	d0f8      	beq.n	2b6a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2b78:	4820      	ldr	r0, [pc, #128]	; (2bfc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    2b7a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2b7e:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2b82:	2802      	cmp	r0, #2
    2b84:	d104      	bne.n	2b90 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    2b86:	4632      	mov	r2, r6
    2b88:	4641      	mov	r1, r8
    2b8a:	2006      	movs	r0, #6
    2b8c:	f7fe fe74 	bl	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    2b90:	20ff      	movs	r0, #255	; 0xff
    2b92:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2b96:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    2b9a:	4e19      	ldr	r6, [pc, #100]	; (2c00 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    2b9c:	2820      	cmp	r0, #32
    2b9e:	bf1c      	itt	ne
    2ba0:	7870      	ldrbne	r0, [r6, #1]
    2ba2:	f001 fad9 	blne	4158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2ba6:	7f20      	ldrb	r0, [r4, #28]
    2ba8:	b120      	cbz	r0, 2bb4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    2baa:	f000 fe6b 	bl	3884 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2bae:	2000      	movs	r0, #0
    2bb0:	7720      	strb	r0, [r4, #28]
    2bb2:	7760      	strb	r0, [r4, #29]
    2bb4:	f1b9 0f02 	cmp.w	r9, #2
    2bb8:	d011      	beq.n	2bde <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    2bba:	f1b9 0f01 	cmp.w	r9, #1
    2bbe:	bf1c      	itt	ne
    2bc0:	b003      	addne	sp, #12
    2bc2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bc6:	f04f 30ff 	mov.w	r0, #4294967295
    2bca:	6871      	ldr	r1, [r6, #4]
    2bcc:	2900      	cmp	r1, #0
    2bce:	bf04      	itt	eq
    2bd0:	b003      	addeq	sp, #12
    2bd2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bd6:	b003      	add	sp, #12
    2bd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bdc:	4708      	bx	r1
    2bde:	68a0      	ldr	r0, [r4, #8]
    2be0:	1b40      	subs	r0, r0, r5
    2be2:	f009 fb00 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2be6:	6871      	ldr	r1, [r6, #4]
    2be8:	2900      	cmp	r1, #0
    2bea:	d1f4      	bne.n	2bd6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    2bec:	b003      	add	sp, #12
    2bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bf2:	0000      	.short	0x0000
    2bf4:	2000105c 	.word	0x2000105c
    2bf8:	20000c5c 	.word	0x20000c5c
    2bfc:	20000fdc 	.word	0x20000fdc
    2c00:	2000003c 	.word	0x2000003c

00002c04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2c04:	b570      	push	{r4, r5, r6, lr}
    2c06:	4c42      	ldr	r4, [pc, #264]	; (2d10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    2c08:	4605      	mov	r5, r0
    2c0a:	b082      	sub	sp, #8
    2c0c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2c10:	2820      	cmp	r0, #32
    2c12:	d008      	beq.n	2c26 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    2c14:	6860      	ldr	r0, [r4, #4]
    2c16:	f1b0 3fff 	cmp.w	r0, #4294967295
    2c1a:	d009      	beq.n	2c30 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    2c1c:	f640 21d9 	movw	r1, #2777	; 0xad9
    2c20:	2070      	movs	r0, #112	; 0x70
    2c22:	f001 f9c5 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c26:	f640 21d8 	movw	r1, #2776	; 0xad8
    2c2a:	2070      	movs	r0, #112	; 0x70
    2c2c:	f001 f9c0 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c30:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2c34:	4937      	ldr	r1, [pc, #220]	; (2d14 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    2c36:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c3a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    2c3e:	68b0      	ldr	r0, [r6, #8]
    2c40:	f009 fad1 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2c44:	4602      	mov	r2, r0
    2c46:	8af0      	ldrh	r0, [r6, #22]
    2c48:	7d31      	ldrb	r1, [r6, #20]
    2c4a:	4b33      	ldr	r3, [pc, #204]	; (2d18 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    2c4c:	4408      	add	r0, r1
    2c4e:	1c40      	adds	r0, r0, #1
    2c50:	1811      	adds	r1, r2, r0
    2c52:	429a      	cmp	r2, r3
    2c54:	d817      	bhi.n	2c86 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    2c56:	4a31      	ldr	r2, [pc, #196]	; (2d1c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    2c58:	4290      	cmp	r0, r2
    2c5a:	dc1b      	bgt.n	2c94 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    2c5c:	f1c2 0c00 	rsb	ip, r2, #0
    2c60:	4560      	cmp	r0, ip
    2c62:	db1e      	blt.n	2ca2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    2c64:	0056      	lsls	r6, r2, #1
    2c66:	428e      	cmp	r6, r1
    2c68:	bfdc      	itt	le
    2c6a:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2c6e:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2c72:	dd05      	ble.n	2c80 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2c74:	2900      	cmp	r1, #0
    2c76:	bfbc      	itt	lt
    2c78:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2c7c:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2c80:	1948      	adds	r0, r1, r5
    2c82:	4299      	cmp	r1, r3
    2c84:	d904      	bls.n	2c90 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    2c86:	f240 519e 	movw	r1, #1438	; 0x59e
    2c8a:	2070      	movs	r0, #112	; 0x70
    2c8c:	f001 f990 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c90:	4295      	cmp	r5, r2
    2c92:	dd04      	ble.n	2c9e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    2c94:	f240 519f 	movw	r1, #1439	; 0x59f
    2c98:	2070      	movs	r0, #112	; 0x70
    2c9a:	f001 f989 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c9e:	4565      	cmp	r5, ip
    2ca0:	da04      	bge.n	2cac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    2ca2:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    2ca6:	2070      	movs	r0, #112	; 0x70
    2ca8:	f001 f982 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cac:	4286      	cmp	r6, r0
    2cae:	bfdc      	itt	le
    2cb0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2cb4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2cb8:	dd05      	ble.n	2cc6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    2cba:	2800      	cmp	r0, #0
    2cbc:	bfbc      	itt	lt
    2cbe:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2cc2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2cc6:	aa01      	add	r2, sp, #4
    2cc8:	4669      	mov	r1, sp
    2cca:	f000 f8e9 	bl	2ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2cce:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2cd2:	280f      	cmp	r0, #15
    2cd4:	bf8c      	ite	hi
    2cd6:	2001      	movhi	r0, #1
    2cd8:	2000      	movls	r0, #0
    2cda:	9900      	ldr	r1, [sp, #0]
    2cdc:	4408      	add	r0, r1
    2cde:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2ce2:	6061      	str	r1, [r4, #4]
    2ce4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2ce8:	f88d 0000 	strb.w	r0, [sp]
    2cec:	f89d 0000 	ldrb.w	r0, [sp]
    2cf0:	2800      	cmp	r0, #0
    2cf2:	bf04      	itt	eq
    2cf4:	b002      	addeq	sp, #8
    2cf6:	bd70      	popeq	{r4, r5, r6, pc}
    2cf8:	2005      	movs	r0, #5
    2cfa:	f000 fbe7 	bl	34cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2cfe:	2800      	cmp	r0, #0
    2d00:	bf1c      	itt	ne
    2d02:	b002      	addne	sp, #8
    2d04:	bd70      	popne	{r4, r5, r6, pc}
    2d06:	f44f 612e 	mov.w	r1, #2784	; 0xae0
    2d0a:	2070      	movs	r0, #112	; 0x70
    2d0c:	f001 f950 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d10:	2000105c 	.word	0x2000105c
    2d14:	20000c5c 	.word	0x20000c5c
    2d18:	1e847fff 	.word	0x1e847fff
    2d1c:	0f424000 	.word	0x0f424000

00002d20 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2d20:	b570      	push	{r4, r5, r6, lr}
    2d22:	4c1c      	ldr	r4, [pc, #112]	; (2d94 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    2d24:	2120      	movs	r1, #32
    2d26:	f884 1020 	strb.w	r1, [r4, #32]
    2d2a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2d2e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2d32:	2000      	movs	r0, #0
    2d34:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2d38:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    2d3c:	1e42      	subs	r2, r0, #1
    2d3e:	e9c4 0200 	strd	r0, r2, [r4]
    2d42:	77a0      	strb	r0, [r4, #30]
    2d44:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2d48:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2d4c:	7720      	strb	r0, [r4, #28]
    2d4e:	7760      	strb	r0, [r4, #29]
    2d50:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    2d54:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    2d58:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2d5c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2d60:	2210      	movs	r2, #16
    2d62:	7088      	strb	r0, [r1, #2]
    2d64:	f801 0f04 	strb.w	r0, [r1, #4]!
    2d68:	1e52      	subs	r2, r2, #1
    2d6a:	d1fa      	bne.n	2d62 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    2d6c:	f000 fdb8 	bl	38e0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    2d70:	4d09      	ldr	r5, [pc, #36]	; (2d98 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    2d72:	2601      	movs	r6, #1
    2d74:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2d78:	20ff      	movs	r0, #255	; 0xff
    2d7a:	7028      	strb	r0, [r5, #0]
    2d7c:	4807      	ldr	r0, [pc, #28]	; (2d9c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2d7e:	f001 f9cd 	bl	411c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2d82:	7068      	strb	r0, [r5, #1]
    2d84:	f001 fa38 	bl	41f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2d88:	60a8      	str	r0, [r5, #8]
    2d8a:	f000 fd33 	bl	37f4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2d8e:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    2d92:	bd70      	pop	{r4, r5, r6, pc}
    2d94:	2000105c 	.word	0x2000105c
    2d98:	2000003c 	.word	0x2000003c
    2d9c:	000017a1 	.word	0x000017a1

00002da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    2da0:	b500      	push	{lr}
    2da2:	b083      	sub	sp, #12
    2da4:	4668      	mov	r0, sp
    2da6:	f000 f9eb 	bl	3180 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2daa:	9800      	ldr	r0, [sp, #0]
    2dac:	f009 fa1b 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2db0:	9a01      	ldr	r2, [sp, #4]
    2db2:	4b03      	ldr	r3, [pc, #12]	; (2dc0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    2db4:	2100      	movs	r1, #0
    2db6:	fbe2 0103 	umlal	r0, r1, r2, r3
    2dba:	b003      	add	sp, #12
    2dbc:	bd00      	pop	{pc}
    2dbe:	0000      	.short	0x0000
    2dc0:	1e848000 	.word	0x1e848000

00002dc4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2dc4:	b570      	push	{r4, r5, r6, lr}
    2dc6:	4606      	mov	r6, r0
    2dc8:	b082      	sub	sp, #8
    2dca:	461d      	mov	r5, r3
    2dcc:	4610      	mov	r0, r2
    2dce:	f009 fa0a 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2dd2:	4604      	mov	r4, r0
    2dd4:	4668      	mov	r0, sp
    2dd6:	f000 f9d3 	bl	3180 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2dda:	4920      	ldr	r1, [pc, #128]	; (2e5c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    2ddc:	9801      	ldr	r0, [sp, #4]
    2dde:	fba0 0201 	umull	r0, r2, r0, r1
    2de2:	1a30      	subs	r0, r6, r0
    2de4:	bf44      	itt	mi
    2de6:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    2dea:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    2dee:	d504      	bpl.n	2dfa <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    2df0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2df4:	2070      	movs	r0, #112	; 0x70
    2df6:	f001 f8db 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dfa:	4288      	cmp	r0, r1
    2dfc:	db04      	blt.n	2e08 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    2dfe:	f640 4101 	movw	r1, #3073	; 0xc01
    2e02:	2070      	movs	r0, #112	; 0x70
    2e04:	f001 f8d4 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e08:	4a15      	ldr	r2, [pc, #84]	; (2e60 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    2e0a:	1a21      	subs	r1, r4, r0
    2e0c:	2300      	movs	r3, #0
    2e0e:	1a8a      	subs	r2, r1, r2
    2e10:	f173 0200 	sbcs.w	r2, r3, #0
    2e14:	d318      	bcc.n	2e48 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2e16:	f8df c048 	ldr.w	ip, [pc, #72]	; 2e60 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    2e1a:	1b02      	subs	r2, r0, r4
    2e1c:	ebb2 0c0c 	subs.w	ip, r2, ip
    2e20:	f173 0300 	sbcs.w	r3, r3, #0
    2e24:	d310      	bcc.n	2e48 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2e26:	4b0f      	ldr	r3, [pc, #60]	; (2e64 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    2e28:	428b      	cmp	r3, r1
    2e2a:	bf3e      	ittt	cc
    2e2c:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    2e30:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    2e34:	1901      	addcc	r1, r0, r4
    2e36:	d307      	bcc.n	2e48 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2e38:	4293      	cmp	r3, r2
    2e3a:	d20a      	bcs.n	2e52 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    2e3c:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    2e40:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    2e44:	4408      	add	r0, r1
    2e46:	4241      	negs	r1, r0
    2e48:	f101 000f 	add.w	r0, r1, #15
    2e4c:	b002      	add	sp, #8
    2e4e:	1a28      	subs	r0, r5, r0
    2e50:	bd70      	pop	{r4, r5, r6, pc}
    2e52:	f640 21fa 	movw	r1, #2810	; 0xafa
    2e56:	2070      	movs	r0, #112	; 0x70
    2e58:	f001 f8aa 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e5c:	1e848000 	.word	0x1e848000
    2e60:	0f424000 	.word	0x0f424000
    2e64:	1e847fff 	.word	0x1e847fff

00002e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2e68:	0b41      	lsrs	r1, r0, #13
    2e6a:	f248 6237 	movw	r2, #34359	; 0x8637
    2e6e:	4351      	muls	r1, r2
    2e70:	0c0a      	lsrs	r2, r1, #16
    2e72:	4b09      	ldr	r3, [pc, #36]	; (2e98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2e74:	0251      	lsls	r1, r2, #9
    2e76:	fb02 0203 	mla	r2, r2, r3, r0
    2e7a:	4808      	ldr	r0, [pc, #32]	; (2e9c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2e7c:	4350      	muls	r0, r2
    2e7e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2e82:	306e      	adds	r0, #110	; 0x6e
    2e84:	0d40      	lsrs	r0, r0, #21
    2e86:	425b      	negs	r3, r3
    2e88:	fb10 f303 	smulbb	r3, r0, r3
    2e8c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2e90:	bf88      	it	hi
    2e92:	1c49      	addhi	r1, r1, #1
    2e94:	4408      	add	r0, r1
    2e96:	4770      	bx	lr
    2e98:	ffffc2f7 	.word	0xffffc2f7
    2e9c:	00010c6f 	.word	0x00010c6f

00002ea0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2ea0:	0b43      	lsrs	r3, r0, #13
    2ea2:	f248 6c37 	movw	ip, #34359	; 0x8637
    2ea6:	fb03 f30c 	mul.w	r3, r3, ip
    2eaa:	b430      	push	{r4, r5}
    2eac:	0c1b      	lsrs	r3, r3, #16
    2eae:	f8df c044 	ldr.w	ip, [pc, #68]	; 2ef4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2eb2:	025c      	lsls	r4, r3, #9
    2eb4:	fb03 030c 	mla	r3, r3, ip, r0
    2eb8:	480f      	ldr	r0, [pc, #60]	; (2ef8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2eba:	4358      	muls	r0, r3
    2ebc:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2ec0:	eb04 000c 	add.w	r0, r4, ip
    2ec4:	f643 5409 	movw	r4, #15625	; 0x3d09
    2ec8:	fb1c f404 	smulbb	r4, ip, r4
    2ecc:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2ed0:	f643 5508 	movw	r5, #15624	; 0x3d08
    2ed4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2ed8:	442c      	add	r4, r5
    2eda:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2ede:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2ee2:	bf84      	itt	hi
    2ee4:	f04f 0c00 	movhi.w	ip, #0
    2ee8:	1c40      	addhi	r0, r0, #1
    2eea:	6008      	str	r0, [r1, #0]
    2eec:	f882 c000 	strb.w	ip, [r2]
    2ef0:	bc30      	pop	{r4, r5}
    2ef2:	4770      	bx	lr
    2ef4:	ffffc2f7 	.word	0xffffc2f7
    2ef8:	00010c6f 	.word	0x00010c6f

00002efc <MPSL_IRQ_RTC0_Handler>:
    2efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f00:	4d3b      	ldr	r5, [pc, #236]	; (2ff0 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2f02:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2f06:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2ff4 <MPSL_IRQ_RTC0_Handler+0xf8>
    2f0a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2f0e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2f12:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2f16:	f04f 0400 	mov.w	r4, #0
    2f1a:	d019      	beq.n	2f50 <MPSL_IRQ_RTC0_Handler+0x54>
    2f1c:	4836      	ldr	r0, [pc, #216]	; (2ff8 <MPSL_IRQ_RTC0_Handler+0xfc>)
    2f1e:	6800      	ldr	r0, [r0, #0]
    2f20:	b1b0      	cbz	r0, 2f50 <MPSL_IRQ_RTC0_Handler+0x54>
    2f22:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2f26:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2f2a:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    2f2e:	f8d8 1000 	ldr.w	r1, [r8]
    2f32:	1a40      	subs	r0, r0, r1
    2f34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f38:	2802      	cmp	r0, #2
    2f3a:	d302      	bcc.n	2f42 <MPSL_IRQ_RTC0_Handler+0x46>
    2f3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2f40:	d906      	bls.n	2f50 <MPSL_IRQ_RTC0_Handler+0x54>
    2f42:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2f46:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2f4a:	2004      	movs	r0, #4
    2f4c:	f7fe fe9c 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f50:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2f54:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2f58:	d01a      	beq.n	2f90 <MPSL_IRQ_RTC0_Handler+0x94>
    2f5a:	4828      	ldr	r0, [pc, #160]	; (2ffc <MPSL_IRQ_RTC0_Handler+0x100>)
    2f5c:	6800      	ldr	r0, [r0, #0]
    2f5e:	b1b8      	cbz	r0, 2f90 <MPSL_IRQ_RTC0_Handler+0x94>
    2f60:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    2f64:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2f68:	4825      	ldr	r0, [pc, #148]	; (3000 <MPSL_IRQ_RTC0_Handler+0x104>)
    2f6a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2f6e:	f8d8 1000 	ldr.w	r1, [r8]
    2f72:	1a40      	subs	r0, r0, r1
    2f74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f78:	2802      	cmp	r0, #2
    2f7a:	d302      	bcc.n	2f82 <MPSL_IRQ_RTC0_Handler+0x86>
    2f7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2f80:	d906      	bls.n	2f90 <MPSL_IRQ_RTC0_Handler+0x94>
    2f82:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2f86:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2f8a:	2005      	movs	r0, #5
    2f8c:	f7fe fe7c 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f90:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2f94:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2f98:	d01a      	beq.n	2fd0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2f9a:	481a      	ldr	r0, [pc, #104]	; (3004 <MPSL_IRQ_RTC0_Handler+0x108>)
    2f9c:	6800      	ldr	r0, [r0, #0]
    2f9e:	b1b8      	cbz	r0, 2fd0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2fa0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    2fa4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2fa8:	4817      	ldr	r0, [pc, #92]	; (3008 <MPSL_IRQ_RTC0_Handler+0x10c>)
    2faa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2fae:	f8d8 1000 	ldr.w	r1, [r8]
    2fb2:	1a40      	subs	r0, r0, r1
    2fb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fb8:	2802      	cmp	r0, #2
    2fba:	d302      	bcc.n	2fc2 <MPSL_IRQ_RTC0_Handler+0xc6>
    2fbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2fc0:	d906      	bls.n	2fd0 <MPSL_IRQ_RTC0_Handler+0xd4>
    2fc2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2fc6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2fca:	2006      	movs	r0, #6
    2fcc:	f7fe fe5c 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fd0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    2fd4:	2800      	cmp	r0, #0
    2fd6:	bf08      	it	eq
    2fd8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fdc:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    2fe0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2fe4:	4809      	ldr	r0, [pc, #36]	; (300c <MPSL_IRQ_RTC0_Handler+0x110>)
    2fe6:	68c1      	ldr	r1, [r0, #12]
    2fe8:	1c49      	adds	r1, r1, #1
    2fea:	60c1      	str	r1, [r0, #12]
    2fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ff0:	4000b000 	.word	0x4000b000
    2ff4:	4000b504 	.word	0x4000b504
    2ff8:	4000b140 	.word	0x4000b140
    2ffc:	4000b144 	.word	0x4000b144
    3000:	4000b004 	.word	0x4000b004
    3004:	4000b148 	.word	0x4000b148
    3008:	4000b008 	.word	0x4000b008
    300c:	20000048 	.word	0x20000048

00003010 <MPSL_IRQ_TIMER0_Handler>:
    3010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3014:	4d38      	ldr	r5, [pc, #224]	; (30f8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3016:	7828      	ldrb	r0, [r5, #0]
    3018:	2804      	cmp	r0, #4
    301a:	d068      	beq.n	30ee <MPSL_IRQ_TIMER0_Handler+0xde>
    301c:	1ca8      	adds	r0, r5, #2
    301e:	2201      	movs	r2, #1
    3020:	7801      	ldrb	r1, [r0, #0]
    3022:	b159      	cbz	r1, 303c <MPSL_IRQ_TIMER0_Handler+0x2c>
    3024:	2901      	cmp	r1, #1
    3026:	bf08      	it	eq
    3028:	706a      	strbeq	r2, [r5, #1]
    302a:	d002      	beq.n	3032 <MPSL_IRQ_TIMER0_Handler+0x22>
    302c:	7869      	ldrb	r1, [r5, #1]
    302e:	2900      	cmp	r1, #0
    3030:	d058      	beq.n	30e4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    3032:	2102      	movs	r1, #2
    3034:	7001      	strb	r1, [r0, #0]
    3036:	7840      	ldrb	r0, [r0, #1]
    3038:	f000 fafe 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    303c:	4c2f      	ldr	r4, [pc, #188]	; (30fc <MPSL_IRQ_TIMER0_Handler+0xec>)
    303e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3042:	f04f 0800 	mov.w	r8, #0
    3046:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    304a:	f44f 7780 	mov.w	r7, #256	; 0x100
    304e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    3052:	d00a      	beq.n	306a <MPSL_IRQ_TIMER0_Handler+0x5a>
    3054:	482a      	ldr	r0, [pc, #168]	; (3100 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3056:	6800      	ldr	r0, [r0, #0]
    3058:	b138      	cbz	r0, 306a <MPSL_IRQ_TIMER0_Handler+0x5a>
    305a:	2003      	movs	r0, #3
    305c:	f000 faec 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3060:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3064:	2003      	movs	r0, #3
    3066:	f7fe fe0f 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    306a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    306e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3072:	d00a      	beq.n	308a <MPSL_IRQ_TIMER0_Handler+0x7a>
    3074:	4823      	ldr	r0, [pc, #140]	; (3104 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    3076:	6800      	ldr	r0, [r0, #0]
    3078:	b138      	cbz	r0, 308a <MPSL_IRQ_TIMER0_Handler+0x7a>
    307a:	2002      	movs	r0, #2
    307c:	f000 fadc 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3080:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3084:	2002      	movs	r0, #2
    3086:	f7fe fdff 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    308a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    308e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3092:	d00a      	beq.n	30aa <MPSL_IRQ_TIMER0_Handler+0x9a>
    3094:	481c      	ldr	r0, [pc, #112]	; (3108 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3096:	6800      	ldr	r0, [r0, #0]
    3098:	b138      	cbz	r0, 30aa <MPSL_IRQ_TIMER0_Handler+0x9a>
    309a:	2001      	movs	r0, #1
    309c:	f000 facc 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30a0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30a4:	2001      	movs	r0, #1
    30a6:	f7fe fdef 	bl	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30aa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30ae:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    30b2:	bf08      	it	eq
    30b4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    30b8:	4814      	ldr	r0, [pc, #80]	; (310c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    30ba:	6800      	ldr	r0, [r0, #0]
    30bc:	2800      	cmp	r0, #0
    30be:	bf08      	it	eq
    30c0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    30c4:	2000      	movs	r0, #0
    30c6:	f000 fab7 	bl	3638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30ca:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30ce:	2004      	movs	r0, #4
    30d0:	7028      	strb	r0, [r5, #0]
    30d2:	f8c5 8004 	str.w	r8, [r5, #4]
    30d6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    30da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    30de:	2000      	movs	r0, #0
    30e0:	f7fe bdd2 	b.w	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30e4:	f240 41a3 	movw	r1, #1187	; 0x4a3
    30e8:	206c      	movs	r0, #108	; 0x6c
    30ea:	f000 ff61 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    30f2:	2007      	movs	r0, #7
    30f4:	f7fe bdc8 	b.w	1c88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30f8:	20000048 	.word	0x20000048
    30fc:	40008000 	.word	0x40008000
    3100:	4000814c 	.word	0x4000814c
    3104:	40008148 	.word	0x40008148
    3108:	40008144 	.word	0x40008144
    310c:	40008140 	.word	0x40008140
    3110:	2201      	movs	r2, #1
    3112:	0211      	lsls	r1, r2, #8
    3114:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3118:	2000      	movs	r0, #0
    311a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    311e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    3122:	f3bf 8f4f 	dsb	sy
    3126:	f3bf 8f6f 	isb	sy
    312a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    312e:	490e      	ldr	r1, [pc, #56]	; (3168 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3130:	f841 2f04 	str.w	r2, [r1, #4]!
    3134:	1e43      	subs	r3, r0, #1
    3136:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    313a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    313e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3142:	4b0a      	ldr	r3, [pc, #40]	; (316c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3144:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3148:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    314c:	1d1b      	adds	r3, r3, #4
    314e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3152:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3156:	1d1b      	adds	r3, r3, #4
    3158:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    315c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3160:	60ca      	str	r2, [r1, #12]
    3162:	4903      	ldr	r1, [pc, #12]	; (3170 <MPSL_IRQ_TIMER0_Handler+0x160>)
    3164:	7048      	strb	r0, [r1, #1]
    3166:	4770      	bx	lr
    3168:	40008000 	.word	0x40008000
    316c:	40008004 	.word	0x40008004
    3170:	20000048 	.word	0x20000048

00003174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3174:	4801      	ldr	r0, [pc, #4]	; (317c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3176:	6800      	ldr	r0, [r0, #0]
    3178:	4770      	bx	lr
    317a:	0000      	.short	0x0000
    317c:	4000b504 	.word	0x4000b504

00003180 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    3180:	b430      	push	{r4, r5}
    3182:	f3ef 8c10 	mrs	ip, PRIMASK
    3186:	b672      	cpsid	i
    3188:	2500      	movs	r5, #0
    318a:	4b0b      	ldr	r3, [pc, #44]	; (31b8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    318c:	4a0b      	ldr	r2, [pc, #44]	; (31bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    318e:	bf00      	nop
    3190:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    3194:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    3198:	b12c      	cbz	r4, 31a6 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    319a:	68d1      	ldr	r1, [r2, #12]
    319c:	1c49      	adds	r1, r1, #1
    319e:	60d1      	str	r1, [r2, #12]
    31a0:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    31a4:	e7f4      	b.n	3190 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    31a6:	68d2      	ldr	r2, [r2, #12]
    31a8:	f1bc 0f00 	cmp.w	ip, #0
    31ac:	d100      	bne.n	31b0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    31ae:	b662      	cpsie	i
    31b0:	e9c0 1200 	strd	r1, r2, [r0]
    31b4:	bc30      	pop	{r4, r5}
    31b6:	4770      	bx	lr
    31b8:	4000b000 	.word	0x4000b000
    31bc:	20000048 	.word	0x20000048

000031c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    31c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31c4:	4e46      	ldr	r6, [pc, #280]	; (32e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    31c6:	4605      	mov	r5, r0
    31c8:	1eb7      	subs	r7, r6, #2
    31ca:	7833      	ldrb	r3, [r6, #0]
    31cc:	68b9      	ldr	r1, [r7, #8]
    31ce:	2b01      	cmp	r3, #1
    31d0:	bf04      	itt	eq
    31d2:	42a9      	cmpeq	r1, r5
    31d4:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31d8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    31dc:	4a41      	ldr	r2, [pc, #260]	; (32e4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    31de:	6010      	str	r0, [r2, #0]
    31e0:	4a42      	ldr	r2, [pc, #264]	; (32ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    31e2:	4841      	ldr	r0, [pc, #260]	; (32e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    31e4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    31e8:	f102 0c04 	add.w	ip, r2, #4
    31ec:	f04f 0400 	mov.w	r4, #0
    31f0:	2b00      	cmp	r3, #0
    31f2:	d062      	beq.n	32ba <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    31f4:	483e      	ldr	r0, [pc, #248]	; (32f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    31f6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    31fa:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    31fe:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3202:	bf00      	nop
    3204:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    3208:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    320c:	f04f 0801 	mov.w	r8, #1
    3210:	2800      	cmp	r0, #0
    3212:	bf01      	itttt	eq
    3214:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    3218:	2800      	cmpeq	r0, #0
    321a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    321e:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    3222:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3226:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    322a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    322e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3232:	4830      	ldr	r0, [pc, #192]	; (32f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3234:	f8d0 c000 	ldr.w	ip, [r0]
    3238:	eba5 0c0c 	sub.w	ip, r5, ip
    323c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3240:	f1bc 0f02 	cmp.w	ip, #2
    3244:	d344      	bcc.n	32d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3246:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    324a:	d841      	bhi.n	32d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    324c:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3250:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3254:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3258:	b12b      	cbz	r3, 3266 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    325a:	6802      	ldr	r2, [r0, #0]
    325c:	1a8a      	subs	r2, r1, r2
    325e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3262:	2a02      	cmp	r2, #2
    3264:	d3f9      	bcc.n	325a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    3266:	f8c7 8004 	str.w	r8, [r7, #4]
    326a:	703c      	strb	r4, [r7, #0]
    326c:	f7ff ff50 	bl	3110 <MPSL_IRQ_TIMER0_Handler+0x100>
    3270:	4821      	ldr	r0, [pc, #132]	; (32f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3272:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3276:	f364 0101 	bfi	r1, r4, #0, #2
    327a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    327e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3282:	2102      	movs	r1, #2
    3284:	f361 0201 	bfi	r2, r1, #0, #2
    3288:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    328c:	2104      	movs	r1, #4
    328e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    3292:	f8c0 800c 	str.w	r8, [r0, #12]
    3296:	6879      	ldr	r1, [r7, #4]
    3298:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    329c:	1580      	asrs	r0, r0, #22
    329e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    32a2:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    32a6:	4915      	ldr	r1, [pc, #84]	; (32fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    32a8:	05c0      	lsls	r0, r0, #23
    32aa:	6008      	str	r0, [r1, #0]
    32ac:	2004      	movs	r0, #4
    32ae:	60bd      	str	r5, [r7, #8]
    32b0:	7070      	strb	r0, [r6, #1]
    32b2:	f886 8000 	strb.w	r8, [r6]
    32b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32ba:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    32be:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    32c2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    32c6:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    32ca:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    32ce:	e799      	b.n	3204 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    32d0:	2000      	movs	r0, #0
    32d2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    32d6:	f240 2197 	movw	r1, #663	; 0x297
    32da:	206c      	movs	r0, #108	; 0x6c
    32dc:	f000 fe68 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32e0:	2000004a 	.word	0x2000004a
    32e4:	4001f508 	.word	0x4001f508
    32e8:	fffbfffd 	.word	0xfffbfffd
    32ec:	4000b000 	.word	0x4000b000
    32f0:	fffafffd 	.word	0xfffafffd
    32f4:	4000b504 	.word	0x4000b504
    32f8:	40008000 	.word	0x40008000
    32fc:	4001f504 	.word	0x4001f504

00003300 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3300:	b570      	push	{r4, r5, r6, lr}
    3302:	4c2a      	ldr	r4, [pc, #168]	; (33ac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    3304:	68a1      	ldr	r1, [r4, #8]
    3306:	4281      	cmp	r1, r0
    3308:	bf14      	ite	ne
    330a:	2201      	movne	r2, #1
    330c:	2200      	moveq	r2, #0
    330e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 33b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    3312:	f89c 5000 	ldrb.w	r5, [ip]
    3316:	2d02      	cmp	r5, #2
    3318:	d002      	beq.n	3320 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    331a:	2a00      	cmp	r2, #0
    331c:	d034      	beq.n	3388 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    331e:	e002      	b.n	3326 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3320:	2a00      	cmp	r2, #0
    3322:	bf08      	it	eq
    3324:	bd70      	popeq	{r4, r5, r6, pc}
    3326:	7862      	ldrb	r2, [r4, #1]
    3328:	b39a      	cbz	r2, 3392 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    332a:	4b22      	ldr	r3, [pc, #136]	; (33b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    332c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3330:	601a      	str	r2, [r3, #0]
    3332:	4b21      	ldr	r3, [pc, #132]	; (33b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3334:	1392      	asrs	r2, r2, #14
    3336:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    333a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    333e:	2200      	movs	r2, #0
    3340:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3344:	4a1d      	ldr	r2, [pc, #116]	; (33bc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3346:	6816      	ldr	r6, [r2, #0]
    3348:	1b86      	subs	r6, r0, r6
    334a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    334e:	2e02      	cmp	r6, #2
    3350:	d324      	bcc.n	339c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3352:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3356:	d821      	bhi.n	339c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3358:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    335c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3360:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3364:	b12d      	cbz	r5, 3372 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    3366:	6813      	ldr	r3, [r2, #0]
    3368:	1acb      	subs	r3, r1, r3
    336a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    336e:	2b02      	cmp	r3, #2
    3370:	d3f9      	bcc.n	3366 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    3372:	4b13      	ldr	r3, [pc, #76]	; (33c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3374:	2102      	movs	r1, #2
    3376:	074a      	lsls	r2, r1, #29
    3378:	601a      	str	r2, [r3, #0]
    337a:	60a0      	str	r0, [r4, #8]
    337c:	2004      	movs	r0, #4
    337e:	f88c 0001 	strb.w	r0, [ip, #1]
    3382:	f88c 1000 	strb.w	r1, [ip]
    3386:	bd70      	pop	{r4, r5, r6, pc}
    3388:	f240 21a5 	movw	r1, #677	; 0x2a5
    338c:	206c      	movs	r0, #108	; 0x6c
    338e:	f000 fe0f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3392:	f240 21a9 	movw	r1, #681	; 0x2a9
    3396:	206c      	movs	r0, #108	; 0x6c
    3398:	f000 fe0a 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    339c:	2000      	movs	r0, #0
    339e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    33a2:	f240 21b5 	movw	r1, #693	; 0x2b5
    33a6:	206c      	movs	r0, #108	; 0x6c
    33a8:	f000 fe02 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33ac:	20000048 	.word	0x20000048
    33b0:	2000004a 	.word	0x2000004a
    33b4:	4001f508 	.word	0x4001f508
    33b8:	4000b000 	.word	0x4000b000
    33bc:	4000b504 	.word	0x4000b504
    33c0:	4001f504 	.word	0x4001f504

000033c4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    33c4:	4801      	ldr	r0, [pc, #4]	; (33cc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    33c6:	6880      	ldr	r0, [r0, #8]
    33c8:	4770      	bx	lr
    33ca:	0000      	.short	0x0000
    33cc:	20000048 	.word	0x20000048

000033d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    33d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33d4:	4836      	ldr	r0, [pc, #216]	; (34b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    33d6:	4a35      	ldr	r2, [pc, #212]	; (34ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    33d8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    33dc:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 34b4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    33e0:	1d03      	adds	r3, r0, #4
    33e2:	2100      	movs	r1, #0
    33e4:	f89c 4000 	ldrb.w	r4, [ip]
    33e8:	b184      	cbz	r4, 340c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    33ea:	4a33      	ldr	r2, [pc, #204]	; (34b8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    33ec:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    33f0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    33f4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    33f8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    33fc:	2301      	movs	r3, #1
    33fe:	2a00      	cmp	r2, #0
    3400:	bf04      	itt	eq
    3402:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3406:	2800      	cmpeq	r0, #0
    3408:	d111      	bne.n	342e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    340a:	e00a      	b.n	3422 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    340c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3410:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3414:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3418:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    341c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3420:	e7ea      	b.n	33f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3422:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3426:	f44f 6000 	mov.w	r0, #2048	; 0x800
    342a:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    342e:	2c02      	cmp	r4, #2
    3430:	d004      	beq.n	343c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    3432:	f240 21c1 	movw	r1, #705	; 0x2c1
    3436:	206c      	movs	r0, #108	; 0x6c
    3438:	f000 fdba 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    343c:	4e1f      	ldr	r6, [pc, #124]	; (34bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    343e:	6830      	ldr	r0, [r6, #0]
    3440:	4c1f      	ldr	r4, [pc, #124]	; (34c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3442:	1cc0      	adds	r0, r0, #3
    3444:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3448:	68a2      	ldr	r2, [r4, #8]
    344a:	4d1e      	ldr	r5, [pc, #120]	; (34c4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    344c:	4290      	cmp	r0, r2
    344e:	d00b      	beq.n	3468 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3450:	6837      	ldr	r7, [r6, #0]
    3452:	1bd7      	subs	r7, r2, r7
    3454:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3458:	2f04      	cmp	r7, #4
    345a:	d305      	bcc.n	3468 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    345c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    3460:	d802      	bhi.n	3468 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3462:	f7ff fead 	bl	31c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3466:	e01b      	b.n	34a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3468:	6830      	ldr	r0, [r6, #0]
    346a:	1a10      	subs	r0, r2, r0
    346c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3470:	2802      	cmp	r0, #2
    3472:	d313      	bcc.n	349c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    3474:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3478:	d810      	bhi.n	349c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    347a:	4a13      	ldr	r2, [pc, #76]	; (34c8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    347c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3480:	6010      	str	r0, [r2, #0]
    3482:	6063      	str	r3, [r4, #4]
    3484:	7021      	strb	r1, [r4, #0]
    3486:	606b      	str	r3, [r5, #4]
    3488:	60eb      	str	r3, [r5, #12]
    348a:	0040      	lsls	r0, r0, #1
    348c:	1f11      	subs	r1, r2, #4
    348e:	6008      	str	r0, [r1, #0]
    3490:	2004      	movs	r0, #4
    3492:	f88c 0001 	strb.w	r0, [ip, #1]
    3496:	f88c 3000 	strb.w	r3, [ip]
    349a:	e001      	b.n	34a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    349c:	6063      	str	r3, [r4, #4]
    349e:	7021      	strb	r1, [r4, #0]
    34a0:	6860      	ldr	r0, [r4, #4]
    34a2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    34a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34aa:	0000      	.short	0x0000
    34ac:	fffbfffd 	.word	0xfffbfffd
    34b0:	4000b000 	.word	0x4000b000
    34b4:	2000004a 	.word	0x2000004a
    34b8:	fffafffd 	.word	0xfffafffd
    34bc:	4000b504 	.word	0x4000b504
    34c0:	20000048 	.word	0x20000048
    34c4:	40008000 	.word	0x40008000
    34c8:	4001f508 	.word	0x4001f508

000034cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    34cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34d0:	4a54      	ldr	r2, [pc, #336]	; (3624 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    34d2:	2500      	movs	r5, #0
    34d4:	2401      	movs	r4, #1
    34d6:	f892 c000 	ldrb.w	ip, [r2]
    34da:	7853      	ldrb	r3, [r2, #1]
    34dc:	f44f 76a0 	mov.w	r6, #320	; 0x140
    34e0:	2807      	cmp	r0, #7
    34e2:	d27d      	bcs.n	35e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    34e4:	e8df f000 	tbb	[pc, r0]
    34e8:	04040404 	.word	0x04040404
    34ec:	00585858 	.word	0x00585858
    34f0:	4a4d      	ldr	r2, [pc, #308]	; (3628 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    34f2:	6897      	ldr	r7, [r2, #8]
    34f4:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    34f8:	bf04      	itt	eq
    34fa:	7852      	ldrbeq	r2, [r2, #1]
    34fc:	2a00      	cmpeq	r2, #0
    34fe:	d003      	beq.n	3508 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3500:	f1bc 0f02 	cmp.w	ip, #2
    3504:	d005      	beq.n	3512 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3506:	e026      	b.n	3556 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3508:	f240 3151 	movw	r1, #849	; 0x351
    350c:	206c      	movs	r0, #108	; 0x6c
    350e:	f000 fd4f 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3512:	1f1a      	subs	r2, r3, #4
    3514:	b2d2      	uxtb	r2, r2
    3516:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    351a:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    351e:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    3522:	2200      	movs	r2, #0
    3524:	f1bc 0f01 	cmp.w	ip, #1
    3528:	d003      	beq.n	3532 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    352a:	f1bc 0f02 	cmp.w	ip, #2
    352e:	d008      	beq.n	3542 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    3530:	e00e      	b.n	3550 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3532:	2b04      	cmp	r3, #4
    3534:	bf24      	itt	cs
    3536:	6837      	ldrcs	r7, [r6, #0]
    3538:	2f00      	cmpcs	r7, #0
    353a:	bf08      	it	eq
    353c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    3540:	e006      	b.n	3550 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3542:	2b04      	cmp	r3, #4
    3544:	bf24      	itt	cs
    3546:	6837      	ldrcs	r7, [r6, #0]
    3548:	2f00      	cmpcs	r7, #0
    354a:	bf08      	it	eq
    354c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    3550:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    3554:	d1e5      	bne.n	3522 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    3556:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 362c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    355a:	f100 0210 	add.w	r2, r0, #16
    355e:	fa04 f202 	lsl.w	r2, r4, r2
    3562:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3566:	f04f 0340 	mov.w	r3, #64	; 0x40
    356a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    356e:	b2db      	uxtb	r3, r3
    3570:	4463      	add	r3, ip
    3572:	601c      	str	r4, [r3, #0]
    3574:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3578:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    357c:	eba1 0303 	sub.w	r3, r1, r3
    3580:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3584:	2b03      	cmp	r3, #3
    3586:	bf26      	itte	cs
    3588:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    358c:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    3590:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3594:	d237      	bcs.n	3606 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    3596:	e03c      	b.n	3612 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    3598:	f1bc 0f00 	cmp.w	ip, #0
    359c:	d006      	beq.n	35ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    359e:	4283      	cmp	r3, r0
    35a0:	d104      	bne.n	35ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    35a2:	f240 3171 	movw	r1, #881	; 0x371
    35a6:	206c      	movs	r0, #108	; 0x6c
    35a8:	f000 fd02 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35ac:	1f02      	subs	r2, r0, #4
    35ae:	b2d3      	uxtb	r3, r2
    35b0:	2b03      	cmp	r3, #3
    35b2:	d304      	bcc.n	35be <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    35b4:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    35b8:	206c      	movs	r0, #108	; 0x6c
    35ba:	f000 fcf9 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35be:	f8df c070 	ldr.w	ip, [pc, #112]	; 3630 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    35c2:	f103 0210 	add.w	r2, r3, #16
    35c6:	fa04 f202 	lsl.w	r2, r4, r2
    35ca:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    35ce:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    35d2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    35d6:	f84c 5003 	str.w	r5, [ip, r3]
    35da:	4b16      	ldr	r3, [pc, #88]	; (3634 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    35dc:	681b      	ldr	r3, [r3, #0]
    35de:	e000      	b.n	35e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    35e0:	e01a      	b.n	3618 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    35e2:	1f00      	subs	r0, r0, #4
    35e4:	1acb      	subs	r3, r1, r3
    35e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    35ea:	b2c0      	uxtb	r0, r0
    35ec:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    35f0:	2b02      	cmp	r3, #2
    35f2:	d30b      	bcc.n	360c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    35f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    35f8:	d808      	bhi.n	360c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    35fa:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    35fe:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    3602:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    3606:	2001      	movs	r0, #1
    3608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    360c:	2100      	movs	r1, #0
    360e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3612:	2000      	movs	r0, #0
    3614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3618:	f240 3175 	movw	r1, #885	; 0x375
    361c:	206c      	movs	r0, #108	; 0x6c
    361e:	f000 fcc7 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3622:	0000      	.short	0x0000
    3624:	2000004a 	.word	0x2000004a
    3628:	20000048 	.word	0x20000048
    362c:	40008000 	.word	0x40008000
    3630:	4000b000 	.word	0x4000b000
    3634:	4000b504 	.word	0x4000b504

00003638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    363c:	2601      	movs	r6, #1
    363e:	2700      	movs	r7, #0
    3640:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3644:	2807      	cmp	r0, #7
    3646:	d251      	bcs.n	36ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    3648:	e8df f000 	tbb	[pc, r0]
    364c:	04040404 	.word	0x04040404
    3650:	00191919 	.word	0x00191919
    3654:	f100 0110 	add.w	r1, r0, #16
    3658:	fa06 f201 	lsl.w	r2, r6, r1
    365c:	4926      	ldr	r1, [pc, #152]	; (36f8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    365e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3662:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3666:	2200      	movs	r2, #0
    3668:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    366c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3670:	508f      	str	r7, [r1, r2]
    3672:	4922      	ldr	r1, [pc, #136]	; (36fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3674:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3678:	9000      	str	r0, [sp, #0]
    367a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    367e:	4d20      	ldr	r5, [pc, #128]	; (3700 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3680:	1f01      	subs	r1, r0, #4
    3682:	b2cc      	uxtb	r4, r1
    3684:	7829      	ldrb	r1, [r5, #0]
    3686:	b179      	cbz	r1, 36a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3688:	786a      	ldrb	r2, [r5, #1]
    368a:	4282      	cmp	r2, r0
    368c:	d10c      	bne.n	36a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    368e:	4a1d      	ldr	r2, [pc, #116]	; (3704 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3690:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3694:	6010      	str	r0, [r2, #0]
    3696:	2901      	cmp	r1, #1
    3698:	bf08      	it	eq
    369a:	f7ff fd39 	bleq	3110 <MPSL_IRQ_TIMER0_Handler+0x100>
    369e:	702f      	strb	r7, [r5, #0]
    36a0:	4919      	ldr	r1, [pc, #100]	; (3708 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    36a2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    36a6:	6088      	str	r0, [r1, #8]
    36a8:	4918      	ldr	r1, [pc, #96]	; (370c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    36aa:	f104 0010 	add.w	r0, r4, #16
    36ae:	fa06 f000 	lsl.w	r0, r6, r0
    36b2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    36b6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    36ba:	00a0      	lsls	r0, r4, #2
    36bc:	4408      	add	r0, r1
    36be:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    36c2:	4a13      	ldr	r2, [pc, #76]	; (3710 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    36c4:	6812      	ldr	r2, [r2, #0]
    36c6:	1a80      	subs	r0, r0, r2
    36c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    36cc:	2802      	cmp	r0, #2
    36ce:	d307      	bcc.n	36e0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    36d0:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    36d4:	2000      	movs	r0, #0
    36d6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    36da:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    36de:	500f      	str	r7, [r1, r0]
    36e0:	480c      	ldr	r0, [pc, #48]	; (3714 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    36e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    36e6:	9000      	str	r0, [sp, #0]
    36e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36ec:	f240 31f9 	movw	r1, #1017	; 0x3f9
    36f0:	206c      	movs	r0, #108	; 0x6c
    36f2:	f000 fc5d 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36f6:	0000      	.short	0x0000
    36f8:	40008000 	.word	0x40008000
    36fc:	40008140 	.word	0x40008140
    3700:	2000004a 	.word	0x2000004a
    3704:	4001f508 	.word	0x4001f508
    3708:	20000048 	.word	0x20000048
    370c:	4000b000 	.word	0x4000b000
    3710:	4000b504 	.word	0x4000b504
    3714:	4000b140 	.word	0x4000b140

00003718 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3718:	4825      	ldr	r0, [pc, #148]	; (37b0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    371a:	4a24      	ldr	r2, [pc, #144]	; (37ac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    371c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3720:	4924      	ldr	r1, [pc, #144]	; (37b4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    3722:	1d03      	adds	r3, r0, #4
    3724:	f891 c000 	ldrb.w	ip, [r1]
    3728:	2100      	movs	r1, #0
    372a:	f1bc 0f00 	cmp.w	ip, #0
    372e:	d010      	beq.n	3752 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    3730:	4a21      	ldr	r2, [pc, #132]	; (37b8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    3732:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3736:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    373a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    373e:	bf00      	nop
    3740:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3744:	2a00      	cmp	r2, #0
    3746:	bf04      	itt	eq
    3748:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    374c:	2800      	cmpeq	r0, #0
    374e:	d111      	bne.n	3774 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    3750:	e00a      	b.n	3768 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3752:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3756:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    375a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    375e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3762:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3766:	e7eb      	b.n	3740 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3768:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    376c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3770:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3774:	4811      	ldr	r0, [pc, #68]	; (37bc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    3776:	f04f 32ff 	mov.w	r2, #4294967295
    377a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    377e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3782:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3786:	f100 0204 	add.w	r2, r0, #4
    378a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    378e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3792:	f102 0204 	add.w	r2, r2, #4
    3796:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    379a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    379e:	f102 0204 	add.w	r2, r2, #4
    37a2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    37a6:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    37aa:	4770      	bx	lr
    37ac:	fffbfffd 	.word	0xfffbfffd
    37b0:	4000b000 	.word	0x4000b000
    37b4:	2000004a 	.word	0x2000004a
    37b8:	fffafffd 	.word	0xfffafffd
    37bc:	40008000 	.word	0x40008000

000037c0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    37c0:	b510      	push	{r4, lr}
    37c2:	2807      	cmp	r0, #7
    37c4:	d20d      	bcs.n	37e2 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    37c6:	e8df f000 	tbb	[pc, r0]
    37ca:	0404      	.short	0x0404
    37cc:	06060404 	.word	0x06060404
    37d0:	0006      	.short	0x0006
    37d2:	4906      	ldr	r1, [pc, #24]	; (37ec <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    37d4:	e002      	b.n	37dc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    37d6:	1f00      	subs	r0, r0, #4
    37d8:	4905      	ldr	r1, [pc, #20]	; (37f0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    37da:	b2c0      	uxtb	r0, r0
    37dc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    37e0:	bd10      	pop	{r4, pc}
    37e2:	f240 3199 	movw	r1, #921	; 0x399
    37e6:	206c      	movs	r0, #108	; 0x6c
    37e8:	f000 fbe2 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37ec:	40008140 	.word	0x40008140
    37f0:	4000b140 	.word	0x4000b140

000037f4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    37f4:	b570      	push	{r4, r5, r6, lr}
    37f6:	481f      	ldr	r0, [pc, #124]	; (3874 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    37f8:	2400      	movs	r4, #0
    37fa:	2104      	movs	r1, #4
    37fc:	7004      	strb	r4, [r0, #0]
    37fe:	1e80      	subs	r0, r0, #2
    3800:	7001      	strb	r1, [r0, #0]
    3802:	0589      	lsls	r1, r1, #22
    3804:	60c4      	str	r4, [r0, #12]
    3806:	6081      	str	r1, [r0, #8]
    3808:	f7ff fc82 	bl	3110 <MPSL_IRQ_TIMER0_Handler+0x100>
    380c:	2501      	movs	r5, #1
    380e:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3812:	02eb      	lsls	r3, r5, #11
    3814:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3818:	f3bf 8f4f 	dsb	sy
    381c:	f3bf 8f6f 	isb	sy
    3820:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3824:	4814      	ldr	r0, [pc, #80]	; (3878 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    3826:	6045      	str	r5, [r0, #4]
    3828:	6085      	str	r5, [r0, #8]
    382a:	4914      	ldr	r1, [pc, #80]	; (387c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    382c:	680a      	ldr	r2, [r1, #0]
    382e:	2a00      	cmp	r2, #0
    3830:	d1fc      	bne.n	382c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    3832:	1e51      	subs	r1, r2, #1
    3834:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3838:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    383c:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3840:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3844:	490e      	ldr	r1, [pc, #56]	; (3880 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    3846:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    384a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    384e:	1d09      	adds	r1, r1, #4
    3850:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3854:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3858:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    385c:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3860:	6005      	str	r5, [r0, #0]
    3862:	f44f 7182 	mov.w	r1, #260	; 0x104
    3866:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    386a:	2102      	movs	r1, #2
    386c:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    3870:	bd70      	pop	{r4, r5, r6, pc}
    3872:	0000      	.short	0x0000
    3874:	2000004a 	.word	0x2000004a
    3878:	4000b000 	.word	0x4000b000
    387c:	4000b504 	.word	0x4000b504
    3880:	4000b004 	.word	0x4000b004

00003884 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    3884:	4808      	ldr	r0, [pc, #32]	; (38a8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    3886:	f990 0000 	ldrsb.w	r0, [r0]
    388a:	2800      	cmp	r0, #0
    388c:	bfb8      	it	lt
    388e:	4770      	bxlt	lr
    3890:	f000 011f 	and.w	r1, r0, #31
    3894:	2201      	movs	r2, #1
    3896:	fa02 f101 	lsl.w	r1, r2, r1
    389a:	0940      	lsrs	r0, r0, #5
    389c:	0080      	lsls	r0, r0, #2
    389e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    38a2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    38a6:	4770      	bx	lr
    38a8:	20000354 	.word	0x20000354

000038ac <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    38ac:	4803      	ldr	r0, [pc, #12]	; (38bc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    38ae:	7800      	ldrb	r0, [r0, #0]
    38b0:	2803      	cmp	r0, #3
    38b2:	bf0c      	ite	eq
    38b4:	2001      	moveq	r0, #1
    38b6:	2000      	movne	r0, #0
    38b8:	4770      	bx	lr
    38ba:	0000      	.short	0x0000
    38bc:	20000340 	.word	0x20000340

000038c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    38c0:	4801      	ldr	r0, [pc, #4]	; (38c8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    38c2:	8840      	ldrh	r0, [r0, #2]
    38c4:	4770      	bx	lr
    38c6:	0000      	.short	0x0000
    38c8:	20000340 	.word	0x20000340

000038cc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    38cc:	4803      	ldr	r0, [pc, #12]	; (38dc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    38ce:	7800      	ldrb	r0, [r0, #0]
    38d0:	2802      	cmp	r0, #2
    38d2:	bf16      	itet	ne
    38d4:	2803      	cmpne	r0, #3
    38d6:	2001      	moveq	r0, #1
    38d8:	2000      	movne	r0, #0
    38da:	4770      	bx	lr
    38dc:	20000340 	.word	0x20000340

000038e0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    38e0:	4802      	ldr	r0, [pc, #8]	; (38ec <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    38e2:	2100      	movs	r1, #0
    38e4:	7001      	strb	r1, [r0, #0]
    38e6:	8041      	strh	r1, [r0, #2]
    38e8:	4770      	bx	lr
    38ea:	0000      	.short	0x0000
    38ec:	20000340 	.word	0x20000340

000038f0 <MPSL_IRQ_CLOCK_Handler>:
    38f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38f4:	4c16      	ldr	r4, [pc, #88]	; (3950 <MPSL_IRQ_CLOCK_Handler+0x60>)
    38f6:	7a60      	ldrb	r0, [r4, #9]
    38f8:	2800      	cmp	r0, #0
    38fa:	d027      	beq.n	394c <MPSL_IRQ_CLOCK_Handler+0x5c>
    38fc:	f44f 7180 	mov.w	r1, #256	; 0x100
    3900:	058d      	lsls	r5, r1, #22
    3902:	4628      	mov	r0, r5
    3904:	f008 fcbe 	bl	c284 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3908:	4680      	mov	r8, r0
    390a:	f44f 7182 	mov.w	r1, #260	; 0x104
    390e:	4628      	mov	r0, r5
    3910:	f008 fcb8 	bl	c284 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3914:	2600      	movs	r6, #0
    3916:	4607      	mov	r7, r0
    3918:	f1b8 0f00 	cmp.w	r8, #0
    391c:	d009      	beq.n	3932 <MPSL_IRQ_CLOCK_Handler+0x42>
    391e:	2001      	movs	r0, #1
    3920:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3924:	7920      	ldrb	r0, [r4, #4]
    3926:	b120      	cbz	r0, 3932 <MPSL_IRQ_CLOCK_Handler+0x42>
    3928:	7126      	strb	r6, [r4, #4]
    392a:	69e0      	ldr	r0, [r4, #28]
    392c:	b108      	cbz	r0, 3932 <MPSL_IRQ_CLOCK_Handler+0x42>
    392e:	4780      	blx	r0
    3930:	61e6      	str	r6, [r4, #28]
    3932:	b137      	cbz	r7, 3942 <MPSL_IRQ_CLOCK_Handler+0x52>
    3934:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3938:	2002      	movs	r0, #2
    393a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    393e:	f000 fa6b 	bl	3e18 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3942:	4640      	mov	r0, r8
    3944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3948:	f000 b858 	b.w	39fc <MPSL_IRQ_CLOCK_Handler+0x10c>
    394c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3950:	20000058 	.word	0x20000058
    3954:	b510      	push	{r4, lr}
    3956:	f008 fd3f 	bl	c3d8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    395a:	b930      	cbnz	r0, 396a <MPSL_IRQ_CLOCK_Handler+0x7a>
    395c:	f008 fd5d 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3960:	b918      	cbnz	r0, 396a <MPSL_IRQ_CLOCK_Handler+0x7a>
    3962:	f008 fd90 	bl	c486 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3966:	2800      	cmp	r0, #0
    3968:	d002      	beq.n	3970 <MPSL_IRQ_CLOCK_Handler+0x80>
    396a:	4902      	ldr	r1, [pc, #8]	; (3974 <MPSL_IRQ_CLOCK_Handler+0x84>)
    396c:	2002      	movs	r0, #2
    396e:	6008      	str	r0, [r1, #0]
    3970:	bd10      	pop	{r4, pc}
    3972:	0000      	.short	0x0000
    3974:	40000c34 	.word	0x40000c34
    3978:	b570      	push	{r4, r5, r6, lr}
    397a:	f000 f991 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    397e:	f000 fa9f 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3982:	4c09      	ldr	r4, [pc, #36]	; (39a8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3984:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3988:	b130      	cbz	r0, 3998 <MPSL_IRQ_CLOCK_Handler+0xa8>
    398a:	f7ff ffe3 	bl	3954 <MPSL_IRQ_CLOCK_Handler+0x64>
    398e:	2001      	movs	r0, #1
    3990:	6128      	str	r0, [r5, #16]
    3992:	2004      	movs	r0, #4
    3994:	72a0      	strb	r0, [r4, #10]
    3996:	e004      	b.n	39a2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    3998:	2003      	movs	r0, #3
    399a:	72a0      	strb	r0, [r4, #10]
    399c:	2001      	movs	r0, #1
    399e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    39a2:	2000      	movs	r0, #0
    39a4:	71e0      	strb	r0, [r4, #7]
    39a6:	bd70      	pop	{r4, r5, r6, pc}
    39a8:	20000058 	.word	0x20000058
    39ac:	b570      	push	{r4, r5, r6, lr}
    39ae:	4c12      	ldr	r4, [pc, #72]	; (39f8 <MPSL_IRQ_CLOCK_Handler+0x108>)
    39b0:	79a0      	ldrb	r0, [r4, #6]
    39b2:	b1e0      	cbz	r0, 39ee <MPSL_IRQ_CLOCK_Handler+0xfe>
    39b4:	79e1      	ldrb	r1, [r4, #7]
    39b6:	1e40      	subs	r0, r0, #1
    39b8:	4281      	cmp	r1, r0
    39ba:	da18      	bge.n	39ee <MPSL_IRQ_CLOCK_Handler+0xfe>
    39bc:	f000 fa80 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    39c0:	4605      	mov	r5, r0
    39c2:	f000 fb69 	bl	4098 <mpsl_temperature_get>
    39c6:	79a1      	ldrb	r1, [r4, #6]
    39c8:	2901      	cmp	r1, #1
    39ca:	d902      	bls.n	39d2 <MPSL_IRQ_CLOCK_Handler+0xe2>
    39cc:	79e1      	ldrb	r1, [r4, #7]
    39ce:	1c49      	adds	r1, r1, #1
    39d0:	71e1      	strb	r1, [r4, #7]
    39d2:	b10d      	cbz	r5, 39d8 <MPSL_IRQ_CLOCK_Handler+0xe8>
    39d4:	6961      	ldr	r1, [r4, #20]
    39d6:	e000      	b.n	39da <MPSL_IRQ_CLOCK_Handler+0xea>
    39d8:	6921      	ldr	r1, [r4, #16]
    39da:	1a41      	subs	r1, r0, r1
    39dc:	2902      	cmp	r1, #2
    39de:	da02      	bge.n	39e6 <MPSL_IRQ_CLOCK_Handler+0xf6>
    39e0:	f111 0f02 	cmn.w	r1, #2
    39e4:	dc07      	bgt.n	39f6 <MPSL_IRQ_CLOCK_Handler+0x106>
    39e6:	b10d      	cbz	r5, 39ec <MPSL_IRQ_CLOCK_Handler+0xfc>
    39e8:	6160      	str	r0, [r4, #20]
    39ea:	e000      	b.n	39ee <MPSL_IRQ_CLOCK_Handler+0xfe>
    39ec:	6120      	str	r0, [r4, #16]
    39ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    39f2:	f7ff bfc1 	b.w	3978 <MPSL_IRQ_CLOCK_Handler+0x88>
    39f6:	bd70      	pop	{r4, r5, r6, pc}
    39f8:	20000058 	.word	0x20000058
    39fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a00:	4606      	mov	r6, r0
    3a02:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3a06:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3a0a:	4628      	mov	r0, r5
    3a0c:	f008 fc3a 	bl	c284 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a10:	4680      	mov	r8, r0
    3a12:	f44f 7188 	mov.w	r1, #272	; 0x110
    3a16:	4628      	mov	r0, r5
    3a18:	f008 fc34 	bl	c284 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a1c:	4c27      	ldr	r4, [pc, #156]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a1e:	4682      	mov	sl, r0
    3a20:	7827      	ldrb	r7, [r4, #0]
    3a22:	f104 0008 	add.w	r0, r4, #8
    3a26:	f008 fca1 	bl	c36c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3a2a:	b110      	cbz	r0, 3a32 <MPSL_IRQ_CLOCK_Handler+0x142>
    3a2c:	f240 11b9 	movw	r1, #441	; 0x1b9
    3a30:	e016      	b.n	3a60 <MPSL_IRQ_CLOCK_Handler+0x170>
    3a32:	f04f 0901 	mov.w	r9, #1
    3a36:	b146      	cbz	r6, 3a4a <MPSL_IRQ_CLOCK_Handler+0x15a>
    3a38:	7aa0      	ldrb	r0, [r4, #10]
    3a3a:	2803      	cmp	r0, #3
    3a3c:	d105      	bne.n	3a4a <MPSL_IRQ_CLOCK_Handler+0x15a>
    3a3e:	2004      	movs	r0, #4
    3a40:	72a0      	strb	r0, [r4, #10]
    3a42:	f7ff ff87 	bl	3954 <MPSL_IRQ_CLOCK_Handler+0x64>
    3a46:	f8c5 9010 	str.w	r9, [r5, #16]
    3a4a:	2600      	movs	r6, #0
    3a4c:	f1b8 0f00 	cmp.w	r8, #0
    3a50:	d018      	beq.n	3a84 <MPSL_IRQ_CLOCK_Handler+0x194>
    3a52:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3a56:	7aa0      	ldrb	r0, [r4, #10]
    3a58:	2804      	cmp	r0, #4
    3a5a:	d004      	beq.n	3a66 <MPSL_IRQ_CLOCK_Handler+0x176>
    3a5c:	f240 11cb 	movw	r1, #459	; 0x1cb
    3a60:	206d      	movs	r0, #109	; 0x6d
    3a62:	f000 faa5 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a66:	f008 fcb7 	bl	c3d8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3a6a:	b928      	cbnz	r0, 3a78 <MPSL_IRQ_CLOCK_Handler+0x188>
    3a6c:	f008 fcd5 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a70:	b910      	cbnz	r0, 3a78 <MPSL_IRQ_CLOCK_Handler+0x188>
    3a72:	f008 fd08 	bl	c486 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3a76:	b108      	cbz	r0, 3a7c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3a78:	4811      	ldr	r0, [pc, #68]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3a7a:	6006      	str	r6, [r0, #0]
    3a7c:	2002      	movs	r0, #2
    3a7e:	72a0      	strb	r0, [r4, #10]
    3a80:	f000 f8f2 	bl	3c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3a84:	f1ba 0f00 	cmp.w	sl, #0
    3a88:	d008      	beq.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3a8a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3a8e:	7aa0      	ldrb	r0, [r4, #10]
    3a90:	2802      	cmp	r0, #2
    3a92:	d101      	bne.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a94:	f7ff ff8a 	bl	39ac <MPSL_IRQ_CLOCK_Handler+0xbc>
    3a98:	f8c5 9014 	str.w	r9, [r5, #20]
    3a9c:	b13f      	cbz	r7, 3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
    3a9e:	7026      	strb	r6, [r4, #0]
    3aa0:	7aa0      	ldrb	r0, [r4, #10]
    3aa2:	2802      	cmp	r0, #2
    3aa4:	d101      	bne.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    3aa6:	f7ff ff67 	bl	3978 <MPSL_IRQ_CLOCK_Handler+0x88>
    3aaa:	f000 f8dd 	bl	3c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3aae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ab2:	4802      	ldr	r0, [pc, #8]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3ab4:	3008      	adds	r0, #8
    3ab6:	f008 bc70 	b.w	c39a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3aba:	0000      	.short	0x0000
    3abc:	20000058 	.word	0x20000058
    3ac0:	40000c34 	.word	0x40000c34
    3ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ac8:	4c5f      	ldr	r4, [pc, #380]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3aca:	2700      	movs	r7, #0
    3acc:	4606      	mov	r6, r0
    3ace:	61a7      	str	r7, [r4, #24]
    3ad0:	7842      	ldrb	r2, [r0, #1]
    3ad2:	7881      	ldrb	r1, [r0, #2]
    3ad4:	7800      	ldrb	r0, [r0, #0]
    3ad6:	72e0      	strb	r0, [r4, #11]
    3ad8:	7162      	strb	r2, [r4, #5]
    3ada:	71a1      	strb	r1, [r4, #6]
    3adc:	71e7      	strb	r7, [r4, #7]
    3ade:	f04f 0801 	mov.w	r8, #1
    3ae2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3ae6:	2805      	cmp	r0, #5
    3ae8:	d225      	bcs.n	3b36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9e>
    3aea:	e8df f000 	tbb	[pc, r0]
    3aee:	0310      	.short	0x0310
    3af0:	00222006 	.word	0x00222006
    3af4:	f8c4 8018 	str.w	r8, [r4, #24]
    3af8:	e009      	b.n	3b0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x76>
    3afa:	f000 f8d1 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3afe:	2101      	movs	r1, #1
    3b00:	4628      	mov	r0, r5
    3b02:	f008 fbc4 	bl	c28e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3b06:	2800      	cmp	r0, #0
    3b08:	d0f9      	beq.n	3afe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x66>
    3b0a:	2002      	movs	r0, #2
    3b0c:	61a0      	str	r0, [r4, #24]
    3b0e:	f008 fbea 	bl	c2e6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3b12:	b1b0      	cbz	r0, 3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b14:	f000 f9ee 	bl	3ef4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3b18:	7e21      	ldrb	r1, [r4, #24]
    3b1a:	f001 0103 	and.w	r1, r1, #3
    3b1e:	4288      	cmp	r0, r1
    3b20:	d10f      	bne.n	3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b22:	79b0      	ldrb	r0, [r6, #6]
    3b24:	b150      	cbz	r0, 3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>
    3b26:	2002      	movs	r0, #2
    3b28:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b2c:	e070      	b.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3b2e:	4847      	ldr	r0, [pc, #284]	; (3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>)
    3b30:	e7ec      	b.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    3b32:	4847      	ldr	r0, [pc, #284]	; (3c50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b8>)
    3b34:	e7ea      	b.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    3b36:	f240 313a 	movw	r1, #826	; 0x33a
    3b3a:	e04d      	b.n	3bd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x140>
    3b3c:	f000 f9ae 	bl	3e9c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3b40:	e066      	b.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3b42:	f8c5 800c 	str.w	r8, [r5, #12]
    3b46:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3b4a:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3b4e:	69a0      	ldr	r0, [r4, #24]
    3b50:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3b54:	f008 fc2c 	bl	c3b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b58:	b940      	cbnz	r0, 3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3b5a:	f008 fc33 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b5e:	b928      	cbnz	r0, 3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3b60:	f008 fc47 	bl	c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b64:	b910      	cbnz	r0, 3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3b66:	f008 fc58 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b6a:	b138      	cbz	r0, 3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>
    3b6c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3b70:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    3b74:	4937      	ldr	r1, [pc, #220]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3b76:	f3c0 3042 	ubfx	r0, r0, #13, #3
    3b7a:	6008      	str	r0, [r1, #0]
    3b7c:	f008 fc18 	bl	c3b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b80:	b940      	cbnz	r0, 3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3b82:	f008 fc1f 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b86:	b928      	cbnz	r0, 3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3b88:	f008 fc33 	bl	c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b8c:	b910      	cbnz	r0, 3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3b8e:	f008 fc44 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b92:	b118      	cbz	r0, 3b9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x104>
    3b94:	492f      	ldr	r1, [pc, #188]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3b96:	3110      	adds	r1, #16
    3b98:	f8c1 8000 	str.w	r8, [r1]
    3b9c:	f8c5 8008 	str.w	r8, [r5, #8]
    3ba0:	2002      	movs	r0, #2
    3ba2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3ba6:	79b0      	ldrb	r0, [r6, #6]
    3ba8:	bb90      	cbnz	r0, 3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3baa:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3bae:	f010 0f02 	tst.w	r0, #2
    3bb2:	d00f      	beq.n	3bd4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13c>
    3bb4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3c58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c0>
    3bb8:	f8d9 1000 	ldr.w	r1, [r9]
    3bbc:	43c9      	mvns	r1, r1
    3bbe:	f341 1100 	sbfx	r1, r1, #4, #1
    3bc2:	f101 0801 	add.w	r8, r1, #1
    3bc6:	f8d9 1000 	ldr.w	r1, [r9]
    3bca:	f041 0110 	orr.w	r1, r1, #16
    3bce:	f8c9 1000 	str.w	r1, [r9]
    3bd2:	e007      	b.n	3be4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14c>
    3bd4:	f240 21fb 	movw	r1, #763	; 0x2fb
    3bd8:	206d      	movs	r0, #109	; 0x6d
    3bda:	f000 f9e9 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bde:	bf00      	nop
    3be0:	f000 fb20 	bl	4224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3be4:	4651      	mov	r1, sl
    3be6:	4628      	mov	r0, r5
    3be8:	f008 fb4c 	bl	c284 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3bec:	2800      	cmp	r0, #0
    3bee:	d0f7      	beq.n	3be0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x148>
    3bf0:	f000 f954 	bl	3e9c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3bf4:	f1b8 0f00 	cmp.w	r8, #0
    3bf8:	d105      	bne.n	3c06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16e>
    3bfa:	f8d9 1000 	ldr.w	r1, [r9]
    3bfe:	f021 0110 	bic.w	r1, r1, #16
    3c02:	f8c9 1000 	str.w	r1, [r9]
    3c06:	2002      	movs	r0, #2
    3c08:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3c0c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3c10:	79a0      	ldrb	r0, [r4, #6]
    3c12:	b170      	cbz	r0, 3c32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x19a>
    3c14:	7830      	ldrb	r0, [r6, #0]
    3c16:	b960      	cbnz	r0, 3c32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x19a>
    3c18:	f000 f952 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3c1c:	4606      	mov	r6, r0
    3c1e:	f000 fa3b 	bl	4098 <mpsl_temperature_get>
    3c22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3c26:	b116      	cbz	r6, 3c2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x196>
    3c28:	e9c4 1004 	strd	r1, r0, [r4, #16]
    3c2c:	e001      	b.n	3c32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x19a>
    3c2e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    3c32:	2101      	movs	r1, #1
    3c34:	4628      	mov	r0, r5
    3c36:	f008 fb2a 	bl	c28e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3c3a:	b108      	cbz	r0, 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    3c3c:	f000 f93a 	bl	3eb4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3c40:	72a7      	strb	r7, [r4, #10]
    3c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c46:	0000      	.short	0x0000
    3c48:	20000058 	.word	0x20000058
    3c4c:	00020001 	.word	0x00020001
    3c50:	00030001 	.word	0x00030001
    3c54:	4000053c 	.word	0x4000053c
    3c58:	e000ed10 	.word	0xe000ed10

00003c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    3c5c:	4801      	ldr	r0, [pc, #4]	; (3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    3c5e:	89c0      	ldrh	r0, [r0, #14]
    3c60:	4770      	bx	lr
    3c62:	0000      	.short	0x0000
    3c64:	20000058 	.word	0x20000058

00003c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3c68:	b510      	push	{r4, lr}
    3c6a:	f3ef 8410 	mrs	r4, PRIMASK
    3c6e:	b672      	cpsid	i
    3c70:	480a      	ldr	r0, [pc, #40]	; (3c9c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3c72:	7841      	ldrb	r1, [r0, #1]
    3c74:	b129      	cbz	r1, 3c82 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3c76:	7841      	ldrb	r1, [r0, #1]
    3c78:	1e49      	subs	r1, r1, #1
    3c7a:	7041      	strb	r1, [r0, #1]
    3c7c:	7841      	ldrb	r1, [r0, #1]
    3c7e:	b129      	cbz	r1, 3c8c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3c80:	e008      	b.n	3c94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c82:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3c86:	206d      	movs	r0, #109	; 0x6d
    3c88:	f000 f992 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c8c:	7880      	ldrb	r0, [r0, #2]
    3c8e:	b908      	cbnz	r0, 3c94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c90:	f000 f924 	bl	3edc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3c94:	2c00      	cmp	r4, #0
    3c96:	d100      	bne.n	3c9a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3c98:	b662      	cpsie	i
    3c9a:	bd10      	pop	{r4, pc}
    3c9c:	20000058 	.word	0x20000058

00003ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3ca0:	b510      	push	{r4, lr}
    3ca2:	f3ef 8410 	mrs	r4, PRIMASK
    3ca6:	b672      	cpsid	i
    3ca8:	4806      	ldr	r0, [pc, #24]	; (3cc4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3caa:	7841      	ldrb	r1, [r0, #1]
    3cac:	1c49      	adds	r1, r1, #1
    3cae:	7041      	strb	r1, [r0, #1]
    3cb0:	7840      	ldrb	r0, [r0, #1]
    3cb2:	2801      	cmp	r0, #1
    3cb4:	d101      	bne.n	3cba <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3cb6:	f008 fb01 	bl	c2bc <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3cba:	2c00      	cmp	r4, #0
    3cbc:	d100      	bne.n	3cc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3cbe:	b662      	cpsie	i
    3cc0:	bd10      	pop	{r4, pc}
    3cc2:	0000      	.short	0x0000
    3cc4:	20000058 	.word	0x20000058

00003cc8 <mpsl_clock_hfclk_release>:
    3cc8:	4805      	ldr	r0, [pc, #20]	; (3ce0 <mpsl_clock_hfclk_release+0x18>)
    3cca:	b510      	push	{r4, lr}
    3ccc:	78c1      	ldrb	r1, [r0, #3]
    3cce:	b121      	cbz	r1, 3cda <mpsl_clock_hfclk_release+0x12>
    3cd0:	2100      	movs	r1, #0
    3cd2:	7101      	strb	r1, [r0, #4]
    3cd4:	70c1      	strb	r1, [r0, #3]
    3cd6:	f7ff ffc7 	bl	3c68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3cda:	2000      	movs	r0, #0
    3cdc:	bd10      	pop	{r4, pc}
    3cde:	0000      	.short	0x0000
    3ce0:	20000058 	.word	0x20000058

00003ce4 <mpsl_clock_hfclk_request>:
    3ce4:	b570      	push	{r4, r5, r6, lr}
    3ce6:	4c0c      	ldr	r4, [pc, #48]	; (3d18 <mpsl_clock_hfclk_request+0x34>)
    3ce8:	78e1      	ldrb	r1, [r4, #3]
    3cea:	b961      	cbnz	r1, 3d06 <mpsl_clock_hfclk_request+0x22>
    3cec:	2501      	movs	r5, #1
    3cee:	70e5      	strb	r5, [r4, #3]
    3cf0:	61e0      	str	r0, [r4, #28]
    3cf2:	f7ff ffd5 	bl	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3cf6:	f000 f8e3 	bl	3ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3cfa:	b130      	cbz	r0, 3d0a <mpsl_clock_hfclk_request+0x26>
    3cfc:	69e0      	ldr	r0, [r4, #28]
    3cfe:	b110      	cbz	r0, 3d06 <mpsl_clock_hfclk_request+0x22>
    3d00:	4780      	blx	r0
    3d02:	2000      	movs	r0, #0
    3d04:	61e0      	str	r0, [r4, #28]
    3d06:	2000      	movs	r0, #0
    3d08:	bd70      	pop	{r4, r5, r6, pc}
    3d0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3d0e:	7125      	strb	r5, [r4, #4]
    3d10:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3d14:	e7f7      	b.n	3d06 <mpsl_clock_hfclk_request+0x22>
    3d16:	0000      	.short	0x0000
    3d18:	20000058 	.word	0x20000058

00003d1c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d20:	0005      	movs	r5, r0
    3d22:	f06f 0015 	mvn.w	r0, #21
    3d26:	d03f      	beq.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d28:	7829      	ldrb	r1, [r5, #0]
    3d2a:	2904      	cmp	r1, #4
    3d2c:	d83c      	bhi.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d2e:	2900      	cmp	r1, #0
    3d30:	7869      	ldrb	r1, [r5, #1]
    3d32:	d03b      	beq.n	3dac <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    3d34:	2900      	cmp	r1, #0
    3d36:	d137      	bne.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d38:	78a9      	ldrb	r1, [r5, #2]
    3d3a:	2900      	cmp	r1, #0
    3d3c:	d134      	bne.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d3e:	2000      	movs	r0, #0
    3d40:	f008 fa6b 	bl	c21a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    3d44:	2000      	movs	r0, #0
    3d46:	f008 fa5b 	bl	c200 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3d4a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3d4e:	f04f 31ff 	mov.w	r1, #4294967295
    3d52:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3d56:	2600      	movs	r6, #0
    3d58:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3d5c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3d60:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3d64:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3d68:	4c14      	ldr	r4, [pc, #80]	; (3dbc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3d6a:	7066      	strb	r6, [r4, #1]
    3d6c:	88a8      	ldrh	r0, [r5, #4]
    3d6e:	81a0      	strh	r0, [r4, #12]
    3d70:	f008 fa9b 	bl	c2aa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3d74:	2701      	movs	r7, #1
    3d76:	b108      	cbz	r0, 3d7c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3d78:	70e7      	strb	r7, [r4, #3]
    3d7a:	7067      	strb	r7, [r4, #1]
    3d7c:	2101      	movs	r1, #1
    3d7e:	4640      	mov	r0, r8
    3d80:	f008 fa85 	bl	c28e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3d84:	b108      	cbz	r0, 3d8a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3d86:	f000 f895 	bl	3eb4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3d8a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    3d8e:	81e0      	strh	r0, [r4, #14]
    3d90:	4628      	mov	r0, r5
    3d92:	f7ff fe97 	bl	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
    3d96:	7267      	strb	r7, [r4, #9]
    3d98:	2000      	movs	r0, #0
    3d9a:	f008 fa31 	bl	c200 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3d9e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3da2:	4630      	mov	r0, r6
    3da4:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3dac:	2900      	cmp	r1, #0
    3dae:	d0fb      	beq.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3db0:	2920      	cmp	r1, #32
    3db2:	d8f9      	bhi.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3db4:	78a9      	ldrb	r1, [r5, #2]
    3db6:	2921      	cmp	r1, #33	; 0x21
    3db8:	d9c1      	bls.n	3d3e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3dba:	e7f5      	b.n	3da8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3dbc:	20000058 	.word	0x20000058

00003dc0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3dc0:	4801      	ldr	r0, [pc, #4]	; (3dc8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3dc2:	8980      	ldrh	r0, [r0, #12]
    3dc4:	4770      	bx	lr
    3dc6:	0000      	.short	0x0000
    3dc8:	20000058 	.word	0x20000058

00003dcc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    3dcc:	b510      	push	{r4, lr}
    3dce:	480d      	ldr	r0, [pc, #52]	; (3e04 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3dd0:	f008 facc 	bl	c36c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3dd4:	490b      	ldr	r1, [pc, #44]	; (3e04 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3dd6:	3908      	subs	r1, #8
    3dd8:	b148      	cbz	r0, 3dee <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    3dda:	2001      	movs	r0, #1
    3ddc:	7008      	strb	r0, [r1, #0]
    3dde:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3de2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3dea:	f7ff bf59 	b.w	3ca0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3dee:	7a88      	ldrb	r0, [r1, #10]
    3df0:	2802      	cmp	r0, #2
    3df2:	d101      	bne.n	3df8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3df4:	f7ff fdc0 	bl	3978 <MPSL_IRQ_CLOCK_Handler+0x88>
    3df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3dfc:	4801      	ldr	r0, [pc, #4]	; (3e04 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3dfe:	f008 bacc 	b.w	c39a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3e02:	0000      	.short	0x0000
    3e04:	20000060 	.word	0x20000060

00003e08 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3e08:	4802      	ldr	r0, [pc, #8]	; (3e14 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3e0a:	7a80      	ldrb	r0, [r0, #10]
    3e0c:	2800      	cmp	r0, #0
    3e0e:	d000      	beq.n	3e12 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3e10:	2001      	movs	r0, #1
    3e12:	4770      	bx	lr
    3e14:	20000058 	.word	0x20000058

00003e18 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e1a:	4d1f      	ldr	r5, [pc, #124]	; (3e98 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3e1c:	7ae8      	ldrb	r0, [r5, #11]
    3e1e:	2800      	cmp	r0, #0
    3e20:	d10f      	bne.n	3e42 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e22:	7e28      	ldrb	r0, [r5, #24]
    3e24:	f000 0003 	and.w	r0, r0, #3
    3e28:	f008 fa4d 	bl	c2c6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3e2c:	2800      	cmp	r0, #0
    3e2e:	d008      	beq.n	3e42 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e30:	f3ef 8110 	mrs	r1, PRIMASK
    3e34:	b672      	cpsid	i
    3e36:	f7ff ffe7 	bl	3e08 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3e3a:	b118      	cbz	r0, 3e44 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3e3c:	2900      	cmp	r1, #0
    3e3e:	d100      	bne.n	3e42 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e40:	b662      	cpsie	i
    3e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e44:	2601      	movs	r6, #1
    3e46:	72ae      	strb	r6, [r5, #10]
    3e48:	b901      	cbnz	r1, 3e4c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3e4a:	b662      	cpsie	i
    3e4c:	2018      	movs	r0, #24
    3e4e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3e52:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3e56:	61a6      	str	r6, [r4, #24]
    3e58:	f44f 7020 	mov.w	r0, #640	; 0x280
    3e5c:	f8ad 0000 	strh.w	r0, [sp]
    3e60:	f8bd 0000 	ldrh.w	r0, [sp]
    3e64:	1e41      	subs	r1, r0, #1
    3e66:	f8ad 1000 	strh.w	r1, [sp]
    3e6a:	d2f9      	bcs.n	3e60 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3e6c:	2700      	movs	r7, #0
    3e6e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3e72:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3e76:	4808      	ldr	r0, [pc, #32]	; (3e98 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3e78:	3008      	adds	r0, #8
    3e7a:	f008 fa8a 	bl	c392 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3e7e:	702f      	strb	r7, [r5, #0]
    3e80:	f7ff fd7a 	bl	3978 <MPSL_IRQ_CLOCK_Handler+0x88>
    3e84:	6166      	str	r6, [r4, #20]
    3e86:	7968      	ldrb	r0, [r5, #5]
    3e88:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3e8c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3e90:	2018      	movs	r0, #24
    3e92:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e98:	20000058 	.word	0x20000058

00003e9c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3e9c:	b510      	push	{r4, lr}
    3e9e:	4c04      	ldr	r4, [pc, #16]	; (3eb0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3ea0:	7e20      	ldrb	r0, [r4, #24]
    3ea2:	f000 0003 	and.w	r0, r0, #3
    3ea6:	f008 fa0e 	bl	c2c6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3eaa:	2800      	cmp	r0, #0
    3eac:	d0f8      	beq.n	3ea0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3eae:	bd10      	pop	{r4, pc}
    3eb0:	20000058 	.word	0x20000058

00003eb4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3eb4:	4901      	ldr	r1, [pc, #4]	; (3ebc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3eb6:	2001      	movs	r0, #1
    3eb8:	7008      	strb	r0, [r1, #0]
    3eba:	4770      	bx	lr
    3ebc:	20000355 	.word	0x20000355

00003ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3ec0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3ec4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3ec8:	b918      	cbnz	r0, 3ed2 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3eca:	4803      	ldr	r0, [pc, #12]	; (3ed8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3ecc:	7800      	ldrb	r0, [r0, #0]
    3ece:	2800      	cmp	r0, #0
    3ed0:	d000      	beq.n	3ed4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3ed2:	2001      	movs	r0, #1
    3ed4:	4770      	bx	lr
    3ed6:	0000      	.short	0x0000
    3ed8:	20000355 	.word	0x20000355

00003edc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3edc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3ee0:	2101      	movs	r1, #1
    3ee2:	6041      	str	r1, [r0, #4]
    3ee4:	2100      	movs	r1, #0
    3ee6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3eea:	4801      	ldr	r0, [pc, #4]	; (3ef0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3eec:	7001      	strb	r1, [r0, #0]
    3eee:	4770      	bx	lr
    3ef0:	20000355 	.word	0x20000355

00003ef4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3ef4:	4802      	ldr	r0, [pc, #8]	; (3f00 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3ef6:	6800      	ldr	r0, [r0, #0]
    3ef8:	f000 0003 	and.w	r0, r0, #3
    3efc:	4770      	bx	lr
    3efe:	0000      	.short	0x0000
    3f00:	4000041c 	.word	0x4000041c
    3f04:	b510      	push	{r4, lr}
    3f06:	b131      	cbz	r1, 3f16 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3f08:	2901      	cmp	r1, #1
    3f0a:	d007      	beq.n	3f1c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3f0c:	f240 3102 	movw	r1, #770	; 0x302
    3f10:	a005      	add	r0, pc, #20	; (adr r0, 3f28 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3f12:	f000 f821 	bl	3f58 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3f16:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3f1a:	e001      	b.n	3f20 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3f1c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3f20:	f000 0001 	and.w	r0, r0, #1
    3f24:	bd10      	pop	{r4, pc}
    3f26:	0000      	.short	0x0000
    3f28:	5f66726e 	.word	0x5f66726e
    3f2c:	636f6c63 	.word	0x636f6c63
    3f30:	00682e6b 	.word	0x00682e6b
    3f34:	f3bf 8f4f 	dsb	sy
    3f38:	4805      	ldr	r0, [pc, #20]	; (3f50 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3f3a:	6801      	ldr	r1, [r0, #0]
    3f3c:	4a05      	ldr	r2, [pc, #20]	; (3f54 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3f3e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3f42:	4311      	orrs	r1, r2
    3f44:	6001      	str	r1, [r0, #0]
    3f46:	f3bf 8f4f 	dsb	sy
    3f4a:	bf00      	nop
    3f4c:	e7fd      	b.n	3f4a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3f4e:	0000      	.short	0x0000
    3f50:	e000ed0c 	.word	0xe000ed0c
    3f54:	05fa0004 	.word	0x05fa0004

00003f58 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3f58:	b672      	cpsid	i
    3f5a:	4a03      	ldr	r2, [pc, #12]	; (3f68 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3f5c:	6852      	ldr	r2, [r2, #4]
    3f5e:	b102      	cbz	r2, 3f62 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3f60:	4790      	blx	r2
    3f62:	f7ff ffe7 	bl	3f34 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3f66:	0000      	.short	0x0000
    3f68:	20000078 	.word	0x20000078
    3f6c:	4806      	ldr	r0, [pc, #24]	; (3f88 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3f6e:	b510      	push	{r4, lr}
    3f70:	2100      	movs	r1, #0
    3f72:	6001      	str	r1, [r0, #0]
    3f74:	2101      	movs	r1, #1
    3f76:	6001      	str	r1, [r0, #0]
    3f78:	4608      	mov	r0, r1
    3f7a:	f008 f9cb 	bl	c314 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f82:	2001      	movs	r0, #1
    3f84:	f008 b9b9 	b.w	c2fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3f88:	40001ffc 	.word	0x40001ffc
    3f8c:	4807      	ldr	r0, [pc, #28]	; (3fac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3f8e:	b510      	push	{r4, lr}
    3f90:	2101      	movs	r1, #1
    3f92:	6041      	str	r1, [r0, #4]
    3f94:	1e89      	subs	r1, r1, #2
    3f96:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3f9a:	200c      	movs	r0, #12
    3f9c:	f008 f9ba 	bl	c314 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3fa4:	200c      	movs	r0, #12
    3fa6:	f008 b9a8 	b.w	c2fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3faa:	0000      	.short	0x0000
    3fac:	4000c000 	.word	0x4000c000

00003fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3fb0:	b50e      	push	{r1, r2, r3, lr}
    3fb2:	b672      	cpsid	i
    3fb4:	4a0f      	ldr	r2, [pc, #60]	; (3ff4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3fb6:	6855      	ldr	r5, [r2, #4]
    3fb8:	b1d5      	cbz	r5, 3ff0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3fba:	2200      	movs	r2, #0
    3fbc:	4603      	mov	r3, r0
    3fbe:	466e      	mov	r6, sp
    3fc0:	240a      	movs	r4, #10
    3fc2:	e003      	b.n	3fcc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3fc4:	fbb0 f0f4 	udiv	r0, r0, r4
    3fc8:	1c52      	adds	r2, r2, #1
    3fca:	b2d2      	uxtb	r2, r2
    3fcc:	2800      	cmp	r0, #0
    3fce:	d1f9      	bne.n	3fc4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3fd0:	54b0      	strb	r0, [r6, r2]
    3fd2:	e009      	b.n	3fe8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3fd4:	fbb3 f0f4 	udiv	r0, r3, r4
    3fd8:	fb04 3010 	mls	r0, r4, r0, r3
    3fdc:	fbb3 f3f4 	udiv	r3, r3, r4
    3fe0:	1e52      	subs	r2, r2, #1
    3fe2:	b2d2      	uxtb	r2, r2
    3fe4:	3030      	adds	r0, #48	; 0x30
    3fe6:	54b0      	strb	r0, [r6, r2]
    3fe8:	2a00      	cmp	r2, #0
    3fea:	d1f3      	bne.n	3fd4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3fec:	4630      	mov	r0, r6
    3fee:	47a8      	blx	r5
    3ff0:	f7ff ffa0 	bl	3f34 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3ff4:	20000078 	.word	0x20000078

00003ff8 <mpsl_init>:
    3ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ffc:	4c18      	ldr	r4, [pc, #96]	; (4060 <mpsl_init+0x68>)
    3ffe:	4606      	mov	r6, r0
    4000:	4617      	mov	r7, r2
    4002:	7860      	ldrb	r0, [r4, #1]
    4004:	460d      	mov	r5, r1
    4006:	b118      	cbz	r0, 4010 <mpsl_init+0x18>
    4008:	f04f 30ff 	mov.w	r0, #4294967295
    400c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4010:	f7fc fbd8 	bl	7c4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    4014:	b906      	cbnz	r6, 4018 <mpsl_init+0x20>
    4016:	4e13      	ldr	r6, [pc, #76]	; (4064 <mpsl_init+0x6c>)
    4018:	6067      	str	r7, [r4, #4]
    401a:	7025      	strb	r5, [r4, #0]
    401c:	f7ff ffa6 	bl	3f6c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4020:	f7ff ffb4 	bl	3f8c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    4024:	4630      	mov	r0, r6
    4026:	f7ff fe79 	bl	3d1c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    402a:	0006      	movs	r6, r0
    402c:	d1ee      	bne.n	400c <mpsl_init+0x14>
    402e:	f7fe fe77 	bl	2d20 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4032:	f7ff fef1 	bl	3e18 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4036:	f008 f830 	bl	c09a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    403a:	4628      	mov	r0, r5
    403c:	f008 f95d 	bl	c2fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4040:	2001      	movs	r0, #1
    4042:	2d00      	cmp	r5, #0
    4044:	db09      	blt.n	405a <mpsl_init+0x62>
    4046:	f005 011f 	and.w	r1, r5, #31
    404a:	fa00 f101 	lsl.w	r1, r0, r1
    404e:	096a      	lsrs	r2, r5, #5
    4050:	0092      	lsls	r2, r2, #2
    4052:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4056:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    405a:	7060      	strb	r0, [r4, #1]
    405c:	4630      	mov	r0, r6
    405e:	e7d5      	b.n	400c <mpsl_init+0x14>
    4060:	20000078 	.word	0x20000078
    4064:	0000c336 	.word	0x0000c336

00004068 <mpsl_is_initialized>:
    4068:	4801      	ldr	r0, [pc, #4]	; (4070 <mpsl_is_initialized+0x8>)
    406a:	7840      	ldrb	r0, [r0, #1]
    406c:	4770      	bx	lr
    406e:	0000      	.short	0x0000
    4070:	20000078 	.word	0x20000078

00004074 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4074:	4807      	ldr	r0, [pc, #28]	; (4094 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    4076:	f990 0000 	ldrsb.w	r0, [r0]
    407a:	2800      	cmp	r0, #0
    407c:	db09      	blt.n	4092 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    407e:	f000 021f 	and.w	r2, r0, #31
    4082:	2101      	movs	r1, #1
    4084:	4091      	lsls	r1, r2
    4086:	0940      	lsrs	r0, r0, #5
    4088:	0080      	lsls	r0, r0, #2
    408a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    408e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4092:	4770      	bx	lr
    4094:	20000078 	.word	0x20000078

00004098 <mpsl_temperature_get>:
    4098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    409c:	2601      	movs	r6, #1
    409e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    40a2:	0331      	lsls	r1, r6, #12
    40a4:	f04f 0800 	mov.w	r8, #0
    40a8:	4640      	mov	r0, r8
    40aa:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    40ae:	f3bf 8f4f 	dsb	sy
    40b2:	f3bf 8f6f 	isb	sy
    40b6:	4c16      	ldr	r4, [pc, #88]	; (4110 <mpsl_temperature_get+0x78>)
    40b8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    40bc:	200c      	movs	r0, #12
    40be:	f008 f948 	bl	c352 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    40c2:	4d14      	ldr	r5, [pc, #80]	; (4114 <mpsl_temperature_get+0x7c>)
    40c4:	6828      	ldr	r0, [r5, #0]
    40c6:	43c0      	mvns	r0, r0
    40c8:	f340 1700 	sbfx	r7, r0, #4, #1
    40cc:	6828      	ldr	r0, [r5, #0]
    40ce:	f040 0010 	orr.w	r0, r0, #16
    40d2:	6028      	str	r0, [r5, #0]
    40d4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    40d8:	6026      	str	r6, [r4, #0]
    40da:	1c7f      	adds	r7, r7, #1
    40dc:	e002      	b.n	40e4 <mpsl_temperature_get+0x4c>
    40de:	bf00      	nop
    40e0:	f000 f8a0 	bl	4224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    40e4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    40e8:	2800      	cmp	r0, #0
    40ea:	d0f9      	beq.n	40e0 <mpsl_temperature_get+0x48>
    40ec:	b91f      	cbnz	r7, 40f6 <mpsl_temperature_get+0x5e>
    40ee:	6828      	ldr	r0, [r5, #0]
    40f0:	f020 0010 	bic.w	r0, r0, #16
    40f4:	6028      	str	r0, [r5, #0]
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <mpsl_temperature_get+0x80>)
    40f8:	6805      	ldr	r5, [r0, #0]
    40fa:	6066      	str	r6, [r4, #4]
    40fc:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4100:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4104:	200c      	movs	r0, #12
    4106:	f008 f924 	bl	c352 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    410a:	4628      	mov	r0, r5
    410c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4110:	4000c000 	.word	0x4000c000
    4114:	e000ed10 	.word	0xe000ed10
    4118:	4000c508 	.word	0x4000c508

0000411c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    411c:	b510      	push	{r4, lr}
    411e:	4602      	mov	r2, r0
    4120:	2005      	movs	r0, #5
    4122:	490c      	ldr	r1, [pc, #48]	; (4154 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4124:	e004      	b.n	4130 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4126:	bf00      	nop
    4128:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    412c:	791b      	ldrb	r3, [r3, #4]
    412e:	b133      	cbz	r3, 413e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4130:	1e40      	subs	r0, r0, #1
    4132:	b2c0      	uxtb	r0, r0
    4134:	d2f8      	bcs.n	4128 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4136:	2148      	movs	r1, #72	; 0x48
    4138:	2069      	movs	r0, #105	; 0x69
    413a:	f7ff ff39 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    413e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    4142:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4146:	2200      	movs	r2, #0
    4148:	714a      	strb	r2, [r1, #5]
    414a:	718a      	strb	r2, [r1, #6]
    414c:	2201      	movs	r2, #1
    414e:	710a      	strb	r2, [r1, #4]
    4150:	bd10      	pop	{r4, pc}
    4152:	0000      	.short	0x0000
    4154:	2000108c 	.word	0x2000108c

00004158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4158:	b510      	push	{r4, lr}
    415a:	2805      	cmp	r0, #5
    415c:	d301      	bcc.n	4162 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    415e:	2158      	movs	r1, #88	; 0x58
    4160:	e006      	b.n	4170 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4162:	490a      	ldr	r1, [pc, #40]	; (418c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4164:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4168:	7901      	ldrb	r1, [r0, #4]
    416a:	2901      	cmp	r1, #1
    416c:	d003      	beq.n	4176 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    416e:	2159      	movs	r1, #89	; 0x59
    4170:	2069      	movs	r0, #105	; 0x69
    4172:	f7ff ff1d 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4176:	7941      	ldrb	r1, [r0, #5]
    4178:	7982      	ldrb	r2, [r0, #6]
    417a:	1c49      	adds	r1, r1, #1
    417c:	b2c9      	uxtb	r1, r1
    417e:	428a      	cmp	r2, r1
    4180:	d000      	beq.n	4184 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4182:	7141      	strb	r1, [r0, #5]
    4184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4188:	f7ff bf74 	b.w	4074 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    418c:	2000108c 	.word	0x2000108c

00004190 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    4190:	b510      	push	{r4, lr}
    4192:	2805      	cmp	r0, #5
    4194:	d303      	bcc.n	419e <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    4196:	214f      	movs	r1, #79	; 0x4f
    4198:	2069      	movs	r0, #105	; 0x69
    419a:	f7ff ff09 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    419e:	4a03      	ldr	r2, [pc, #12]	; (41ac <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    41a0:	2100      	movs	r1, #0
    41a2:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    41a6:	7101      	strb	r1, [r0, #4]
    41a8:	bd10      	pop	{r4, pc}
    41aa:	0000      	.short	0x0000
    41ac:	2000108c 	.word	0x2000108c

000041b0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    41b0:	b570      	push	{r4, r5, r6, lr}
    41b2:	2505      	movs	r5, #5
    41b4:	4e0e      	ldr	r6, [pc, #56]	; (41f0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    41b6:	4c0f      	ldr	r4, [pc, #60]	; (41f4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    41b8:	e016      	b.n	41e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    41ba:	7821      	ldrb	r1, [r4, #0]
    41bc:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    41c0:	7902      	ldrb	r2, [r0, #4]
    41c2:	2a01      	cmp	r2, #1
    41c4:	d108      	bne.n	41d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    41c6:	7942      	ldrb	r2, [r0, #5]
    41c8:	7983      	ldrb	r3, [r0, #6]
    41ca:	429a      	cmp	r2, r3
    41cc:	d004      	beq.n	41d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    41ce:	7942      	ldrb	r2, [r0, #5]
    41d0:	7182      	strb	r2, [r0, #6]
    41d2:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    41d6:	4780      	blx	r0
    41d8:	7820      	ldrb	r0, [r4, #0]
    41da:	1c40      	adds	r0, r0, #1
    41dc:	b2c0      	uxtb	r0, r0
    41de:	7020      	strb	r0, [r4, #0]
    41e0:	2805      	cmp	r0, #5
    41e2:	d301      	bcc.n	41e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    41e4:	2000      	movs	r0, #0
    41e6:	7020      	strb	r0, [r4, #0]
    41e8:	1e6d      	subs	r5, r5, #1
    41ea:	b2ed      	uxtb	r5, r5
    41ec:	d2e5      	bcs.n	41ba <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    41ee:	bd70      	pop	{r4, r5, r6, pc}
    41f0:	2000108c 	.word	0x2000108c
    41f4:	20000356 	.word	0x20000356

000041f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    41f8:	b500      	push	{lr}
    41fa:	f008 f8d9 	bl	c3b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    41fe:	b940      	cbnz	r0, 4212 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4200:	f008 f8e0 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4204:	b928      	cbnz	r0, 4212 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4206:	f008 f8f4 	bl	c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    420a:	b910      	cbnz	r0, 4212 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    420c:	f008 f905 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4210:	b108      	cbz	r0, 4216 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4212:	4802      	ldr	r0, [pc, #8]	; (421c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4214:	bd00      	pop	{pc}
    4216:	4802      	ldr	r0, [pc, #8]	; (4220 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4218:	bd00      	pop	{pc}
    421a:	0000      	.short	0x0000
    421c:	4000050c 	.word	0x4000050c
    4220:	4001e700 	.word	0x4001e700

00004224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4224:	b510      	push	{r4, lr}
    4226:	f008 f8f8 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    422a:	b330      	cbz	r0, 427a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    422c:	f3ef 8010 	mrs	r0, PRIMASK
    4230:	b1c8      	cbz	r0, 4266 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4232:	2100      	movs	r1, #0
    4234:	b672      	cpsid	i
    4236:	4812      	ldr	r0, [pc, #72]	; (4280 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4238:	6802      	ldr	r2, [r0, #0]
    423a:	6803      	ldr	r3, [r0, #0]
    423c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4240:	f043 0310 	orr.w	r3, r3, #16
    4244:	6003      	str	r3, [r0, #0]
    4246:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    424a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    424e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4252:	431c      	orrs	r4, r3
    4254:	d000      	beq.n	4258 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4256:	bf40      	sev
    4258:	bf20      	wfe
    425a:	bf00      	nop
    425c:	bf00      	nop
    425e:	bf00      	nop
    4260:	bf00      	nop
    4262:	b112      	cbz	r2, 426a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4264:	e005      	b.n	4272 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4266:	2101      	movs	r1, #1
    4268:	e7e4      	b.n	4234 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    426a:	6802      	ldr	r2, [r0, #0]
    426c:	f022 0210 	bic.w	r2, r2, #16
    4270:	6002      	str	r2, [r0, #0]
    4272:	2900      	cmp	r1, #0
    4274:	d000      	beq.n	4278 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4276:	b662      	cpsie	i
    4278:	bd10      	pop	{r4, pc}
    427a:	bf20      	wfe
    427c:	bd10      	pop	{r4, pc}
    427e:	0000      	.short	0x0000
    4280:	e000ed10 	.word	0xe000ed10

00004284 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    4284:	4901      	ldr	r1, [pc, #4]	; (428c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    4286:	2001      	movs	r0, #1
    4288:	7088      	strb	r0, [r1, #2]
    428a:	4770      	bx	lr
    428c:	20000080 	.word	0x20000080

00004290 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4290:	0000c667 0000c69f 0000c689 0000c677     g...........w...
    42a0:	0000c683 0000c671 0000c665 0000c663     ....q...e...c...
    42b0:	0000c69b 0000c68f 0000c67d 0000c66b     ........}...k...
    42c0:	0000c65d 0000c655 0000c659 0000c64f     ]...U...Y...O...

000042d0 <mpsl_fem_disable>:
    42d0:	4801      	ldr	r0, [pc, #4]	; (42d8 <mpsl_fem_disable+0x8>)
    42d2:	6800      	ldr	r0, [r0, #0]
    42d4:	6800      	ldr	r0, [r0, #0]
    42d6:	4700      	bx	r0
    42d8:	20000094 	.word	0x20000094

000042dc <mpsl_fem_lna_configuration_clear>:
    42dc:	4801      	ldr	r0, [pc, #4]	; (42e4 <mpsl_fem_lna_configuration_clear+0x8>)
    42de:	6800      	ldr	r0, [r0, #0]
    42e0:	6940      	ldr	r0, [r0, #20]
    42e2:	4700      	bx	r0
    42e4:	20000094 	.word	0x20000094

000042e8 <mpsl_fem_lna_configuration_set>:
    42e8:	4a01      	ldr	r2, [pc, #4]	; (42f0 <mpsl_fem_lna_configuration_set+0x8>)
    42ea:	6812      	ldr	r2, [r2, #0]
    42ec:	68d2      	ldr	r2, [r2, #12]
    42ee:	4710      	bx	r2
    42f0:	20000094 	.word	0x20000094

000042f4 <mpsl_fem_lna_is_configured>:
    42f4:	4901      	ldr	r1, [pc, #4]	; (42fc <mpsl_fem_lna_is_configured+0x8>)
    42f6:	6809      	ldr	r1, [r1, #0]
    42f8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    42fa:	4708      	bx	r1
    42fc:	20000094 	.word	0x20000094

00004300 <mpsl_fem_pa_configuration_clear>:
    4300:	4801      	ldr	r0, [pc, #4]	; (4308 <mpsl_fem_pa_configuration_clear+0x8>)
    4302:	6800      	ldr	r0, [r0, #0]
    4304:	6900      	ldr	r0, [r0, #16]
    4306:	4700      	bx	r0
    4308:	20000094 	.word	0x20000094

0000430c <mpsl_fem_pa_configuration_set>:
    430c:	4a01      	ldr	r2, [pc, #4]	; (4314 <mpsl_fem_pa_configuration_set+0x8>)
    430e:	6812      	ldr	r2, [r2, #0]
    4310:	6892      	ldr	r2, [r2, #8]
    4312:	4710      	bx	r2
    4314:	20000094 	.word	0x20000094

00004318 <mpsl_fem_pa_gain_set>:
    4318:	4901      	ldr	r1, [pc, #4]	; (4320 <mpsl_fem_pa_gain_set+0x8>)
    431a:	6809      	ldr	r1, [r1, #0]
    431c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    431e:	4708      	bx	r1
    4320:	20000094 	.word	0x20000094

00004324 <mpsl_fem_pa_is_configured>:
    4324:	4901      	ldr	r1, [pc, #4]	; (432c <mpsl_fem_pa_is_configured+0x8>)
    4326:	6809      	ldr	r1, [r1, #0]
    4328:	6a89      	ldr	r1, [r1, #40]	; 0x28
    432a:	4708      	bx	r1
    432c:	20000094 	.word	0x20000094

00004330 <mpsl_fem_tx_power_split>:
    4330:	4b01      	ldr	r3, [pc, #4]	; (4338 <mpsl_fem_tx_power_split+0x8>)
    4332:	681b      	ldr	r3, [r3, #0]
    4334:	685b      	ldr	r3, [r3, #4]
    4336:	4718      	bx	r3
    4338:	20000094 	.word	0x20000094

0000433c <mpsl_fem_device_config_254_apply_get>:
    433c:	4801      	ldr	r0, [pc, #4]	; (4344 <mpsl_fem_device_config_254_apply_get+0x8>)
    433e:	7800      	ldrb	r0, [r0, #0]
    4340:	4770      	bx	lr
    4342:	0000      	.short	0x0000
    4344:	20000357 	.word	0x20000357
    4348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    434a:	4c14      	ldr	r4, [pc, #80]	; (439c <mpsl_fem_device_config_254_apply_get+0x60>)
    434c:	7a20      	ldrb	r0, [r4, #8]
    434e:	f88d 0001 	strb.w	r0, [sp, #1]
    4352:	79e0      	ldrb	r0, [r4, #7]
    4354:	f88d 0000 	strb.w	r0, [sp]
    4358:	79a0      	ldrb	r0, [r4, #6]
    435a:	f8ad 0004 	strh.w	r0, [sp, #4]
    435e:	7960      	ldrb	r0, [r4, #5]
    4360:	f8ad 0002 	strh.w	r0, [sp, #2]
    4364:	4668      	mov	r0, sp
    4366:	f005 fe73 	bl	a050 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    436a:	b108      	cbz	r0, 4370 <mpsl_fem_device_config_254_apply_get+0x34>
    436c:	2190      	movs	r1, #144	; 0x90
    436e:	e010      	b.n	4392 <mpsl_fem_device_config_254_apply_get+0x56>
    4370:	68e0      	ldr	r0, [r4, #12]
    4372:	9002      	str	r0, [sp, #8]
    4374:	a802      	add	r0, sp, #8
    4376:	f005 fe81 	bl	a07c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    437a:	b108      	cbz	r0, 4380 <mpsl_fem_device_config_254_apply_get+0x44>
    437c:	2194      	movs	r1, #148	; 0x94
    437e:	e008      	b.n	4392 <mpsl_fem_device_config_254_apply_get+0x56>
    4380:	4807      	ldr	r0, [pc, #28]	; (43a0 <mpsl_fem_device_config_254_apply_get+0x64>)
    4382:	6800      	ldr	r0, [r0, #0]
    4384:	9003      	str	r0, [sp, #12]
    4386:	a803      	add	r0, sp, #12
    4388:	f00b fd5b 	bl	fe42 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    438c:	2800      	cmp	r0, #0
    438e:	d003      	beq.n	4398 <mpsl_fem_device_config_254_apply_get+0x5c>
    4390:	2198      	movs	r1, #152	; 0x98
    4392:	2003      	movs	r0, #3
    4394:	f000 f8ea 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4398:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    439a:	0000      	.short	0x0000
    439c:	200010b4 	.word	0x200010b4
    43a0:	00004674 	.word	0x00004674

000043a4 <sdc_build_revision_get>:
    43a4:	b510      	push	{r4, lr}
    43a6:	b128      	cbz	r0, 43b4 <sdc_build_revision_get+0x10>
    43a8:	2214      	movs	r2, #20
    43aa:	4904      	ldr	r1, [pc, #16]	; (43bc <sdc_build_revision_get+0x18>)
    43ac:	f008 f875 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    43b0:	2000      	movs	r0, #0
    43b2:	bd10      	pop	{r4, pc}
    43b4:	f06f 0015 	mvn.w	r0, #21
    43b8:	bd10      	pop	{r4, pc}
    43ba:	0000      	.short	0x0000
    43bc:	00004698 	.word	0x00004698

000043c0 <sdc_cfg_set>:
    43c0:	b570      	push	{r4, r5, r6, lr}
    43c2:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    43c6:	bb90      	cbnz	r0, 442e <sdc_cfg_set+0x6e>
    43c8:	4c24      	ldr	r4, [pc, #144]	; (445c <sdc_cfg_set+0x9c>)
    43ca:	7860      	ldrb	r0, [r4, #1]
    43cc:	b108      	cbz	r0, 43d2 <sdc_cfg_set+0x12>
    43ce:	1198      	asrs	r0, r3, #6
    43d0:	bd70      	pop	{r4, r5, r6, pc}
    43d2:	b309      	cbz	r1, 4418 <sdc_cfg_set+0x58>
    43d4:	f06f 0515 	mvn.w	r5, #21
    43d8:	b33a      	cbz	r2, 442a <sdc_cfg_set+0x6a>
    43da:	4821      	ldr	r0, [pc, #132]	; (4460 <sdc_cfg_set+0xa0>)
    43dc:	2908      	cmp	r1, #8
    43de:	d237      	bcs.n	4450 <sdc_cfg_set+0x90>
    43e0:	e8df f001 	tbb	[pc, r1]
    43e4:	0a070436 	.word	0x0a070436
    43e8:	291e1b18 	.word	0x291e1b18
    43ec:	7811      	ldrb	r1, [r2, #0]
    43ee:	7001      	strb	r1, [r0, #0]
    43f0:	e023      	b.n	443a <sdc_cfg_set+0x7a>
    43f2:	7811      	ldrb	r1, [r2, #0]
    43f4:	7041      	strb	r1, [r0, #1]
    43f6:	e020      	b.n	443a <sdc_cfg_set+0x7a>
    43f8:	7891      	ldrb	r1, [r2, #2]
    43fa:	b1b1      	cbz	r1, 442a <sdc_cfg_set+0x6a>
    43fc:	78d1      	ldrb	r1, [r2, #3]
    43fe:	b1a1      	cbz	r1, 442a <sdc_cfg_set+0x6a>
    4400:	7811      	ldrb	r1, [r2, #0]
    4402:	291b      	cmp	r1, #27
    4404:	d311      	bcc.n	442a <sdc_cfg_set+0x6a>
    4406:	7851      	ldrb	r1, [r2, #1]
    4408:	291b      	cmp	r1, #27
    440a:	d30e      	bcc.n	442a <sdc_cfg_set+0x6a>
    440c:	6811      	ldr	r1, [r2, #0]
    440e:	f8c0 1005 	str.w	r1, [r0, #5]
    4412:	e012      	b.n	443a <sdc_cfg_set+0x7a>
    4414:	6811      	ldr	r1, [r2, #0]
    4416:	60c1      	str	r1, [r0, #12]
    4418:	e00f      	b.n	443a <sdc_cfg_set+0x7a>
    441a:	7811      	ldrb	r1, [r2, #0]
    441c:	7081      	strb	r1, [r0, #2]
    441e:	e00c      	b.n	443a <sdc_cfg_set+0x7a>
    4420:	78e1      	ldrb	r1, [r4, #3]
    4422:	b129      	cbz	r1, 4430 <sdc_cfg_set+0x70>
    4424:	7811      	ldrb	r1, [r2, #0]
    4426:	2902      	cmp	r1, #2
    4428:	d202      	bcs.n	4430 <sdc_cfg_set+0x70>
    442a:	4628      	mov	r0, r5
    442c:	bd70      	pop	{r4, r5, r6, pc}
    442e:	e00f      	b.n	4450 <sdc_cfg_set+0x90>
    4430:	7811      	ldrb	r1, [r2, #0]
    4432:	7401      	strb	r1, [r0, #16]
    4434:	e001      	b.n	443a <sdc_cfg_set+0x7a>
    4436:	8811      	ldrh	r1, [r2, #0]
    4438:	8241      	strh	r1, [r0, #18]
    443a:	2201      	movs	r2, #1
    443c:	4908      	ldr	r1, [pc, #32]	; (4460 <sdc_cfg_set+0xa0>)
    443e:	2000      	movs	r0, #0
    4440:	f008 f949 	bl	c6d6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    4444:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4448:	db04      	blt.n	4454 <sdc_cfg_set+0x94>
    444a:	f06f 000b 	mvn.w	r0, #11
    444e:	e7ed      	b.n	442c <sdc_cfg_set+0x6c>
    4450:	4618      	mov	r0, r3
    4452:	e7eb      	b.n	442c <sdc_cfg_set+0x6c>
    4454:	2101      	movs	r1, #1
    4456:	70a1      	strb	r1, [r4, #2]
    4458:	e7e8      	b.n	442c <sdc_cfg_set+0x6c>
    445a:	0000      	.short	0x0000
    445c:	20000098 	.word	0x20000098
    4460:	200010b4 	.word	0x200010b4

00004464 <sdc_disable>:
    4464:	b510      	push	{r4, lr}
    4466:	4c07      	ldr	r4, [pc, #28]	; (4484 <sdc_disable+0x20>)
    4468:	7860      	ldrb	r0, [r4, #1]
    446a:	b120      	cbz	r0, 4476 <sdc_disable+0x12>
    446c:	f006 f8aa 	bl	a5c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    4470:	7820      	ldrb	r0, [r4, #0]
    4472:	f7ff fe8d 	bl	4190 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    4476:	f000 fd85 	bl	4f84 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    447a:	f000 fe5f 	bl	513c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    447e:	2000      	movs	r0, #0
    4480:	7060      	strb	r0, [r4, #1]
    4482:	bd10      	pop	{r4, pc}
    4484:	20000098 	.word	0x20000098

00004488 <sdc_enable>:
    4488:	b570      	push	{r4, r5, r6, lr}
    448a:	460c      	mov	r4, r1
    448c:	0005      	movs	r5, r0
    448e:	d019      	beq.n	44c4 <sdc_enable+0x3c>
    4490:	b1c4      	cbz	r4, 44c4 <sdc_enable+0x3c>
    4492:	f000 f927 	bl	46e4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4496:	b1c0      	cbz	r0, 44ca <sdc_enable+0x42>
    4498:	4628      	mov	r0, r5
    449a:	f7ff fe3f 	bl	411c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    449e:	4d0c      	ldr	r5, [pc, #48]	; (44d0 <sdc_enable+0x48>)
    44a0:	2200      	movs	r2, #0
    44a2:	490c      	ldr	r1, [pc, #48]	; (44d4 <sdc_enable+0x4c>)
    44a4:	7028      	strb	r0, [r5, #0]
    44a6:	4620      	mov	r0, r4
    44a8:	f008 f915 	bl	c6d6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    44ac:	f00c f8cc 	bl	10648 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    44b0:	2100      	movs	r1, #0
    44b2:	7828      	ldrb	r0, [r5, #0]
    44b4:	f006 f876 	bl	a5a4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    44b8:	f7ff ff46 	bl	4348 <mpsl_fem_device_config_254_apply_get+0xc>
    44bc:	2001      	movs	r0, #1
    44be:	7068      	strb	r0, [r5, #1]
    44c0:	2000      	movs	r0, #0
    44c2:	bd70      	pop	{r4, r5, r6, pc}
    44c4:	f06f 0015 	mvn.w	r0, #21
    44c8:	bd70      	pop	{r4, r5, r6, pc}
    44ca:	f04f 30ff 	mov.w	r0, #4294967295
    44ce:	bd70      	pop	{r4, r5, r6, pc}
    44d0:	20000098 	.word	0x20000098
    44d4:	200010b4 	.word	0x200010b4

000044d8 <sdc_init>:
    44d8:	b530      	push	{r4, r5, lr}
    44da:	b089      	sub	sp, #36	; 0x24
    44dc:	0005      	movs	r5, r0
    44de:	d00c      	beq.n	44fa <sdc_init+0x22>
    44e0:	f7ff fdc2 	bl	4068 <mpsl_is_initialized>
    44e4:	f04f 34ff 	mov.w	r4, #4294967295
    44e8:	b120      	cbz	r0, 44f4 <sdc_init+0x1c>
    44ea:	f7ff fc69 	bl	3dc0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    44ee:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    44f2:	d905      	bls.n	4500 <sdc_init+0x28>
    44f4:	4620      	mov	r0, r4
    44f6:	b009      	add	sp, #36	; 0x24
    44f8:	bd30      	pop	{r4, r5, pc}
    44fa:	f06f 0015 	mvn.w	r0, #21
    44fe:	e7fa      	b.n	44f6 <sdc_init+0x1e>
    4500:	4c15      	ldr	r4, [pc, #84]	; (4558 <sdc_init+0x80>)
    4502:	4816      	ldr	r0, [pc, #88]	; (455c <sdc_init+0x84>)
    4504:	6065      	str	r5, [r4, #4]
    4506:	f000 fa0b 	bl	4920 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    450a:	2000      	movs	r0, #0
    450c:	7060      	strb	r0, [r4, #1]
    450e:	70a0      	strb	r0, [r4, #2]
    4510:	70e0      	strb	r0, [r4, #3]
    4512:	4601      	mov	r1, r0
    4514:	2220      	movs	r2, #32
    4516:	4668      	mov	r0, sp
    4518:	f008 f839 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    451c:	2220      	movs	r2, #32
    451e:	4910      	ldr	r1, [pc, #64]	; (4560 <sdc_init+0x88>)
    4520:	4668      	mov	r0, sp
    4522:	f007 ffba 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4526:	2220      	movs	r2, #32
    4528:	4669      	mov	r1, sp
    452a:	480e      	ldr	r0, [pc, #56]	; (4564 <sdc_init+0x8c>)
    452c:	f007 ffb5 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4530:	f3ef 8410 	mrs	r4, PRIMASK
    4534:	b672      	cpsid	i
    4536:	f06f 000c 	mvn.w	r0, #12
    453a:	f000 fd31 	bl	4fa0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    453e:	480a      	ldr	r0, [pc, #40]	; (4568 <sdc_init+0x90>)
    4540:	f000 fe08 	bl	5154 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4544:	b118      	cbz	r0, 454e <sdc_init+0x76>
    4546:	21ab      	movs	r1, #171	; 0xab
    4548:	2003      	movs	r0, #3
    454a:	f000 f80f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    454e:	b904      	cbnz	r4, 4552 <sdc_init+0x7a>
    4550:	b662      	cpsie	i
    4552:	2000      	movs	r0, #0
    4554:	e7cf      	b.n	44f6 <sdc_init+0x1e>
    4556:	0000      	.short	0x0000
    4558:	20000098 	.word	0x20000098
    455c:	00004349 	.word	0x00004349
    4560:	00004678 	.word	0x00004678
    4564:	200010b4 	.word	0x200010b4
    4568:	00004711 	.word	0x00004711

0000456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    456c:	b50e      	push	{r1, r2, r3, lr}
    456e:	b672      	cpsid	i
    4570:	4a15      	ldr	r2, [pc, #84]	; (45c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4572:	6855      	ldr	r5, [r2, #4]
    4574:	b1dd      	cbz	r5, 45ae <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    4576:	2200      	movs	r2, #0
    4578:	4603      	mov	r3, r0
    457a:	466e      	mov	r6, sp
    457c:	240a      	movs	r4, #10
    457e:	e003      	b.n	4588 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4580:	fbb0 f0f4 	udiv	r0, r0, r4
    4584:	1c52      	adds	r2, r2, #1
    4586:	b2d2      	uxtb	r2, r2
    4588:	2800      	cmp	r0, #0
    458a:	d1f9      	bne.n	4580 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    458c:	54b0      	strb	r0, [r6, r2]
    458e:	e00a      	b.n	45a6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    4590:	b2d8      	uxtb	r0, r3
    4592:	fbb0 f7f4 	udiv	r7, r0, r4
    4596:	fbb3 f3f4 	udiv	r3, r3, r4
    459a:	fb04 0017 	mls	r0, r4, r7, r0
    459e:	1e52      	subs	r2, r2, #1
    45a0:	b2d2      	uxtb	r2, r2
    45a2:	3030      	adds	r0, #48	; 0x30
    45a4:	54b0      	strb	r0, [r6, r2]
    45a6:	2a00      	cmp	r2, #0
    45a8:	d1f2      	bne.n	4590 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    45aa:	4630      	mov	r0, r6
    45ac:	47a8      	blx	r5
    45ae:	f3bf 8f4f 	dsb	sy
    45b2:	4806      	ldr	r0, [pc, #24]	; (45cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    45b4:	6801      	ldr	r1, [r0, #0]
    45b6:	4a06      	ldr	r2, [pc, #24]	; (45d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    45b8:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    45bc:	4311      	orrs	r1, r2
    45be:	6001      	str	r1, [r0, #0]
    45c0:	f3bf 8f4f 	dsb	sy
    45c4:	bf00      	nop
    45c6:	e7fd      	b.n	45c4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    45c8:	20000098 	.word	0x20000098
    45cc:	e000ed0c 	.word	0xe000ed0c
    45d0:	05fa0004 	.word	0x05fa0004

000045d4 <sdc_support_adv>:
    45d4:	4806      	ldr	r0, [pc, #24]	; (45f0 <sdc_support_adv+0x1c>)
    45d6:	b510      	push	{r4, lr}
    45d8:	7881      	ldrb	r1, [r0, #2]
    45da:	7840      	ldrb	r0, [r0, #1]
    45dc:	4301      	orrs	r1, r0
    45de:	d002      	beq.n	45e6 <sdc_support_adv+0x12>
    45e0:	f04f 30ff 	mov.w	r0, #4294967295
    45e4:	bd10      	pop	{r4, pc}
    45e6:	f005 fffb 	bl	a5e0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    45ea:	2000      	movs	r0, #0
    45ec:	bd10      	pop	{r4, pc}
    45ee:	0000      	.short	0x0000
    45f0:	20000098 	.word	0x20000098

000045f4 <sdc_support_dle_peripheral>:
    45f4:	4806      	ldr	r0, [pc, #24]	; (4610 <sdc_support_dle_peripheral+0x1c>)
    45f6:	b510      	push	{r4, lr}
    45f8:	7881      	ldrb	r1, [r0, #2]
    45fa:	7840      	ldrb	r0, [r0, #1]
    45fc:	4301      	orrs	r1, r0
    45fe:	d002      	beq.n	4606 <sdc_support_dle_peripheral+0x12>
    4600:	f04f 30ff 	mov.w	r0, #4294967295
    4604:	bd10      	pop	{r4, pc}
    4606:	f005 fd51 	bl	a0ac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    460a:	2000      	movs	r0, #0
    460c:	bd10      	pop	{r4, pc}
    460e:	0000      	.short	0x0000
    4610:	20000098 	.word	0x20000098

00004614 <sdc_support_le_2m_phy>:
    4614:	4806      	ldr	r0, [pc, #24]	; (4630 <sdc_support_le_2m_phy+0x1c>)
    4616:	b510      	push	{r4, lr}
    4618:	7881      	ldrb	r1, [r0, #2]
    461a:	7840      	ldrb	r0, [r0, #1]
    461c:	4301      	orrs	r1, r0
    461e:	d002      	beq.n	4626 <sdc_support_le_2m_phy+0x12>
    4620:	f04f 30ff 	mov.w	r0, #4294967295
    4624:	bd10      	pop	{r4, pc}
    4626:	f00b fdd7 	bl	101d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    462a:	2000      	movs	r0, #0
    462c:	bd10      	pop	{r4, pc}
    462e:	0000      	.short	0x0000
    4630:	20000098 	.word	0x20000098

00004634 <sdc_support_peripheral>:
    4634:	4806      	ldr	r0, [pc, #24]	; (4650 <sdc_support_peripheral+0x1c>)
    4636:	b510      	push	{r4, lr}
    4638:	7881      	ldrb	r1, [r0, #2]
    463a:	7840      	ldrb	r0, [r0, #1]
    463c:	4301      	orrs	r1, r0
    463e:	d002      	beq.n	4646 <sdc_support_peripheral+0x12>
    4640:	f04f 30ff 	mov.w	r0, #4294967295
    4644:	bd10      	pop	{r4, pc}
    4646:	f005 ffdd 	bl	a604 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    464a:	2000      	movs	r0, #0
    464c:	bd10      	pop	{r4, pc}
    464e:	0000      	.short	0x0000
    4650:	20000098 	.word	0x20000098

00004654 <sdc_support_phy_update_peripheral>:
    4654:	4806      	ldr	r0, [pc, #24]	; (4670 <sdc_support_phy_update_peripheral+0x1c>)
    4656:	b510      	push	{r4, lr}
    4658:	7881      	ldrb	r1, [r0, #2]
    465a:	7840      	ldrb	r0, [r0, #1]
    465c:	4301      	orrs	r1, r0
    465e:	d002      	beq.n	4666 <sdc_support_phy_update_peripheral+0x12>
    4660:	f04f 30ff 	mov.w	r0, #4294967295
    4664:	bd10      	pop	{r4, pc}
    4666:	f00b fdc7 	bl	101f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    466a:	2000      	movs	r0, #0
    466c:	bd10      	pop	{r4, pc}
    466e:	0000      	.short	0x0000
    4670:	20000098 	.word	0x20000098
    4674:	00000001 	.word	0x00000001
    4678:	00010101 	.word	0x00010101
    467c:	031b1b00 	.word	0x031b1b00
    4680:	00000002 	.word	0x00000002
    4684:	00001d4c 	.word	0x00001d4c
    4688:	001f0003 	.word	0x001f0003
	...
    4698:	2a41906d 	.word	0x2a41906d
    469c:	17ade838 	.word	0x17ade838
    46a0:	3803a529 	.word	0x3803a529
    46a4:	85d72739 	.word	0x85d72739
    46a8:	e1d8851f 	.word	0xe1d8851f

000046ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    46ac:	4a05      	ldr	r2, [pc, #20]	; (46c4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    46ae:	b510      	push	{r4, lr}
    46b0:	6852      	ldr	r2, [r2, #4]
    46b2:	b112      	cbz	r2, 46ba <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    46b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46b8:	4710      	bx	r2
    46ba:	2192      	movs	r1, #146	; 0x92
    46bc:	2004      	movs	r0, #4
    46be:	f7ff ff55 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46c2:	0000      	.short	0x0000
    46c4:	200010d4 	.word	0x200010d4

000046c8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    46c8:	4a05      	ldr	r2, [pc, #20]	; (46e0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    46ca:	b510      	push	{r4, lr}
    46cc:	6892      	ldr	r2, [r2, #8]
    46ce:	b112      	cbz	r2, 46d6 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    46d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46d4:	4710      	bx	r2
    46d6:	2198      	movs	r1, #152	; 0x98
    46d8:	2004      	movs	r0, #4
    46da:	f7ff ff47 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46de:	0000      	.short	0x0000
    46e0:	200010d4 	.word	0x200010d4

000046e4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    46e4:	4805      	ldr	r0, [pc, #20]	; (46fc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    46e6:	6801      	ldr	r1, [r0, #0]
    46e8:	b129      	cbz	r1, 46f6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46ea:	6841      	ldr	r1, [r0, #4]
    46ec:	b119      	cbz	r1, 46f6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46ee:	6880      	ldr	r0, [r0, #8]
    46f0:	b108      	cbz	r0, 46f6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46f2:	2001      	movs	r0, #1
    46f4:	4770      	bx	lr
    46f6:	2000      	movs	r0, #0
    46f8:	4770      	bx	lr
    46fa:	0000      	.short	0x0000
    46fc:	200010d4 	.word	0x200010d4

00004700 <sdc_rand_source_register>:
    4700:	4902      	ldr	r1, [pc, #8]	; (470c <sdc_rand_source_register+0xc>)
    4702:	c80d      	ldmia	r0, {r0, r2, r3}
    4704:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4708:	2000      	movs	r0, #0
    470a:	4770      	bx	lr
    470c:	200010d4 	.word	0x200010d4

00004710 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4712:	4c12      	ldr	r4, [pc, #72]	; (475c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4714:	2600      	movs	r6, #0
    4716:	6825      	ldr	r5, [r4, #0]
    4718:	e011      	b.n	473e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    471a:	9800      	ldr	r0, [sp, #0]
    471c:	2802      	cmp	r0, #2
    471e:	d002      	beq.n	4726 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4720:	2803      	cmp	r0, #3
    4722:	d10c      	bne.n	473e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4724:	e006      	b.n	4734 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4726:	6820      	ldr	r0, [r4, #0]
    4728:	b110      	cbz	r0, 4730 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    472a:	2000      	movs	r0, #0
    472c:	6026      	str	r6, [r4, #0]
    472e:	e005      	b.n	473c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4730:	2128      	movs	r1, #40	; 0x28
    4732:	e00c      	b.n	474e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4734:	6820      	ldr	r0, [r4, #0]
    4736:	b168      	cbz	r0, 4754 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4738:	2001      	movs	r0, #1
    473a:	6026      	str	r6, [r4, #0]
    473c:	47a8      	blx	r5
    473e:	4668      	mov	r0, sp
    4740:	f000 fcce 	bl	50e0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4744:	2800      	cmp	r0, #0
    4746:	d0e8      	beq.n	471a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4748:	2805      	cmp	r0, #5
    474a:	d005      	beq.n	4758 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    474c:	2135      	movs	r1, #53	; 0x35
    474e:	2004      	movs	r0, #4
    4750:	f7ff ff0c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4754:	212d      	movs	r1, #45	; 0x2d
    4756:	e7fa      	b.n	474e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    475a:	0000      	.short	0x0000
    475c:	200000a0 	.word	0x200000a0

00004760 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    4760:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4764:	4c29      	ldr	r4, [pc, #164]	; (480c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4766:	4605      	mov	r5, r0
    4768:	1d00      	adds	r0, r0, #4
    476a:	f504 7782 	add.w	r7, r4, #260	; 0x104
    476e:	60a0      	str	r0, [r4, #8]
    4770:	7838      	ldrb	r0, [r7, #0]
    4772:	b158      	cbz	r0, 478c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    4774:	78ba      	ldrb	r2, [r7, #2]
    4776:	463c      	mov	r4, r7
    4778:	1c79      	adds	r1, r7, #1
    477a:	4628      	mov	r0, r5
    477c:	1c92      	adds	r2, r2, #2
    477e:	f007 fe8c 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4782:	2000      	movs	r0, #0
    4784:	7020      	strb	r0, [r4, #0]
    4786:	2004      	movs	r0, #4
    4788:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    478c:	481f      	ldr	r0, [pc, #124]	; (480c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    478e:	f001 fe97 	bl	64c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4792:	4606      	mov	r6, r0
    4794:	2802      	cmp	r0, #2
    4796:	d002      	beq.n	479e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x3e>
    4798:	2e04      	cmp	r6, #4
    479a:	d005      	beq.n	47a8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x48>
    479c:	e026      	b.n	47ec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    479e:	491b      	ldr	r1, [pc, #108]	; (480c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    47a0:	4628      	mov	r0, r5
    47a2:	f008 f834 	bl	c80e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    47a6:	e021      	b.n	47ec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    47a8:	7820      	ldrb	r0, [r4, #0]
    47aa:	2811      	cmp	r0, #17
    47ac:	d104      	bne.n	47b8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x58>
    47ae:	210a      	movs	r1, #10
    47b0:	203e      	movs	r0, #62	; 0x3e
    47b2:	f007 fffe 	bl	c7b2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    47b6:	b118      	cbz	r0, 47c0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x60>
    47b8:	7820      	ldrb	r0, [r4, #0]
    47ba:	2808      	cmp	r0, #8
    47bc:	d005      	beq.n	47ca <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6a>
    47be:	e009      	b.n	47d4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x74>
    47c0:	4912      	ldr	r1, [pc, #72]	; (480c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    47c2:	4628      	mov	r0, r5
    47c4:	f008 fa1b 	bl	cbfe <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    47c8:	e00a      	b.n	47e0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
    47ca:	2105      	movs	r1, #5
    47cc:	203e      	movs	r0, #62	; 0x3e
    47ce:	f007 fff0 	bl	c7b2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    47d2:	b168      	cbz	r0, 47f0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    47d4:	490d      	ldr	r1, [pc, #52]	; (480c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    47d6:	4628      	mov	r0, r5
    47d8:	f008 f847 	bl	c86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    47dc:	2800      	cmp	r0, #0
    47de:	d0c7      	beq.n	4770 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    47e0:	78a9      	ldrb	r1, [r5, #2]
    47e2:	7828      	ldrb	r0, [r5, #0]
    47e4:	f007 ffe5 	bl	c7b2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    47e8:	2800      	cmp	r0, #0
    47ea:	d0c1      	beq.n	4770 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    47ec:	4630      	mov	r0, r6
    47ee:	e7cb      	b.n	4788 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    47f0:	88a0      	ldrh	r0, [r4, #4]
    47f2:	f8ad 0000 	strh.w	r0, [sp]
    47f6:	a901      	add	r1, sp, #4
    47f8:	4668      	mov	r0, sp
    47fa:	f008 fb33 	bl	ce64 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    47fe:	2800      	cmp	r0, #0
    4800:	d0b6      	beq.n	4770 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    4802:	21aa      	movs	r1, #170	; 0xaa
    4804:	2008      	movs	r0, #8
    4806:	f7ff feb1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    480a:	0000      	.short	0x0000
    480c:	200010e0 	.word	0x200010e0
    4810:	b570      	push	{r4, r5, r6, lr}
    4812:	780a      	ldrb	r2, [r1, #0]
    4814:	7082      	strb	r2, [r0, #2]
    4816:	b33a      	cbz	r2, 4868 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    4818:	2a01      	cmp	r2, #1
    481a:	d825      	bhi.n	4868 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    481c:	2313      	movs	r3, #19
    481e:	7003      	strb	r3, [r0, #0]
    4820:	2300      	movs	r3, #0
    4822:	e00a      	b.n	483a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xda>
    4824:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4828:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    482c:	78a6      	ldrb	r6, [r4, #2]
    482e:	70ee      	strb	r6, [r5, #3]
    4830:	8864      	ldrh	r4, [r4, #2]
    4832:	0a24      	lsrs	r4, r4, #8
    4834:	1c5b      	adds	r3, r3, #1
    4836:	712c      	strb	r4, [r5, #4]
    4838:	b2db      	uxtb	r3, r3
    483a:	4293      	cmp	r3, r2
    483c:	d3f2      	bcc.n	4824 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc4>
    483e:	2300      	movs	r3, #0
    4840:	e00b      	b.n	485a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xfa>
    4842:	bf00      	nop
    4844:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4848:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    484c:	792e      	ldrb	r6, [r5, #4]
    484e:	7166      	strb	r6, [r4, #5]
    4850:	88ad      	ldrh	r5, [r5, #4]
    4852:	0a2d      	lsrs	r5, r5, #8
    4854:	1c5b      	adds	r3, r3, #1
    4856:	71a5      	strb	r5, [r4, #6]
    4858:	b2db      	uxtb	r3, r3
    485a:	4293      	cmp	r3, r2
    485c:	d3f2      	bcc.n	4844 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe4>
    485e:	2101      	movs	r1, #1
    4860:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4864:	b2c0      	uxtb	r0, r0
    4866:	bd70      	pop	{r4, r5, r6, pc}
    4868:	2000      	movs	r0, #0
    486a:	bd70      	pop	{r4, r5, r6, pc}

0000486c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    486c:	2840      	cmp	r0, #64	; 0x40
    486e:	d203      	bcs.n	4878 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    4870:	1e40      	subs	r0, r0, #1
    4872:	b2c1      	uxtb	r1, r0
    4874:	4805      	ldr	r0, [pc, #20]	; (488c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4876:	e005      	b.n	4884 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    4878:	28ff      	cmp	r0, #255	; 0xff
    487a:	d005      	beq.n	4888 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    487c:	3840      	subs	r0, #64	; 0x40
    487e:	b2c1      	uxtb	r1, r0
    4880:	4802      	ldr	r0, [pc, #8]	; (488c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4882:	3008      	adds	r0, #8
    4884:	f008 b9e5 	b.w	cc52 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4888:	2001      	movs	r0, #1
    488a:	4770      	bx	lr
    488c:	200000a4 	.word	0x200000a4

00004890 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4890:	1e40      	subs	r0, r0, #1
    4892:	b2c1      	uxtb	r1, r0
    4894:	4801      	ldr	r0, [pc, #4]	; (489c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    4896:	f008 b9dc 	b.w	cc52 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    489a:	0000      	.short	0x0000
    489c:	200000b4 	.word	0x200000b4

000048a0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    48a0:	4902      	ldr	r1, [pc, #8]	; (48ac <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    48a2:	6802      	ldr	r2, [r0, #0]
    48a4:	610a      	str	r2, [r1, #16]
    48a6:	6840      	ldr	r0, [r0, #4]
    48a8:	6148      	str	r0, [r1, #20]
    48aa:	4770      	bx	lr
    48ac:	200000a4 	.word	0x200000a4

000048b0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    48b0:	4905      	ldr	r1, [pc, #20]	; (48c8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    48b2:	6802      	ldr	r2, [r0, #0]
    48b4:	600a      	str	r2, [r1, #0]
    48b6:	6840      	ldr	r0, [r0, #4]
    48b8:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    48bc:	600a      	str	r2, [r1, #0]
    48be:	4a03      	ldr	r2, [pc, #12]	; (48cc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    48c0:	4310      	orrs	r0, r2
    48c2:	6048      	str	r0, [r1, #4]
    48c4:	4770      	bx	lr
    48c6:	0000      	.short	0x0000
    48c8:	200000a4 	.word	0x200000a4
    48cc:	024007f8 	.word	0x024007f8

000048d0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    48d0:	4902      	ldr	r1, [pc, #8]	; (48dc <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    48d2:	6802      	ldr	r2, [r0, #0]
    48d4:	608a      	str	r2, [r1, #8]
    48d6:	6840      	ldr	r0, [r0, #4]
    48d8:	60c8      	str	r0, [r1, #12]
    48da:	4770      	bx	lr
    48dc:	200000a4 	.word	0x200000a4

000048e0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    48e0:	4807      	ldr	r0, [pc, #28]	; (4900 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    48e2:	f04f 31ff 	mov.w	r1, #4294967295
    48e6:	2200      	movs	r2, #0
    48e8:	6001      	str	r1, [r0, #0]
    48ea:	0cc9      	lsrs	r1, r1, #19
    48ec:	6041      	str	r1, [r0, #4]
    48ee:	f100 0108 	add.w	r1, r0, #8
    48f2:	201f      	movs	r0, #31
    48f4:	600a      	str	r2, [r1, #0]
    48f6:	604a      	str	r2, [r1, #4]
    48f8:	3108      	adds	r1, #8
    48fa:	e9c1 0200 	strd	r0, r2, [r1]
    48fe:	4770      	bx	lr
    4900:	200000a4 	.word	0x200000a4

00004904 <sdc_hci_cmd_cb_reset>:
    4904:	b510      	push	{r4, lr}
    4906:	f7ff ffeb 	bl	48e0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    490a:	f00b fbde 	bl	100ca <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    490e:	4604      	mov	r4, r0
    4910:	4802      	ldr	r0, [pc, #8]	; (491c <sdc_hci_cmd_cb_reset+0x18>)
    4912:	6800      	ldr	r0, [r0, #0]
    4914:	b100      	cbz	r0, 4918 <sdc_hci_cmd_cb_reset+0x14>
    4916:	4780      	blx	r0
    4918:	4620      	mov	r0, r4
    491a:	bd10      	pop	{r4, pc}
    491c:	200000bc 	.word	0x200000bc

00004920 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4920:	4901      	ldr	r1, [pc, #4]	; (4928 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4922:	6008      	str	r0, [r1, #0]
    4924:	4770      	bx	lr
    4926:	0000      	.short	0x0000
    4928:	200000bc 	.word	0x200000bc

0000492c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    492c:	2102      	movs	r1, #2
    492e:	8001      	strh	r1, [r0, #0]
    4930:	8041      	strh	r1, [r0, #2]
    4932:	2100      	movs	r1, #0
    4934:	7101      	strb	r1, [r0, #4]
    4936:	216d      	movs	r1, #109	; 0x6d
    4938:	7141      	strb	r1, [r0, #5]
    493a:	f244 1190 	movw	r1, #16784	; 0x4190
    493e:	80c1      	strh	r1, [r0, #6]
    4940:	4901      	ldr	r1, [pc, #4]	; (4948 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4942:	6081      	str	r1, [r0, #8]
    4944:	2000      	movs	r0, #0
    4946:	4770      	bx	lr
    4948:	ade8382a 	.word	0xade8382a

0000494c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    494c:	b510      	push	{r4, lr}
    494e:	2802      	cmp	r0, #2
    4950:	d304      	bcc.n	495c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4952:	f44f 7101 	mov.w	r1, #516	; 0x204
    4956:	2017      	movs	r0, #23
    4958:	f7ff fe08 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    495c:	4901      	ldr	r1, [pc, #4]	; (4964 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    495e:	5c08      	ldrb	r0, [r1, r0]
    4960:	bd10      	pop	{r4, pc}
    4962:	0000      	.short	0x0000
    4964:	200012e8 	.word	0x200012e8

00004968 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    496a:	0005      	movs	r5, r0
    496c:	9500      	str	r5, [sp, #0]
    496e:	d00d      	beq.n	498c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    4970:	2600      	movs	r6, #0
    4972:	7808      	ldrb	r0, [r1, #0]
    4974:	7849      	ldrb	r1, [r1, #1]
    4976:	4604      	mov	r4, r0
    4978:	42a1      	cmp	r1, r4
    497a:	d900      	bls.n	497e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    497c:	460c      	mov	r4, r1
    497e:	07aa      	lsls	r2, r5, #30
    4980:	d006      	beq.n	4990 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    4982:	f240 11cb 	movw	r1, #459	; 0x1cb
    4986:	2017      	movs	r0, #23
    4988:	f7ff fdf0 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    498c:	2601      	movs	r6, #1
    498e:	e7f0      	b.n	4972 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    4990:	4f12      	ldr	r7, [pc, #72]	; (49dc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    4992:	7038      	strb	r0, [r7, #0]
    4994:	7079      	strb	r1, [r7, #1]
    4996:	4631      	mov	r1, r6
    4998:	4668      	mov	r0, sp
    499a:	f000 f8d3 	bl	4b44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    499e:	2100      	movs	r1, #0
    49a0:	460b      	mov	r3, r1
    49a2:	9800      	ldr	r0, [sp, #0]
    49a4:	1cc0      	adds	r0, r0, #3
    49a6:	f020 0003 	bic.w	r0, r0, #3
    49aa:	9000      	str	r0, [sp, #0]
    49ac:	b966      	cbnz	r6, 49c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    49ae:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    49b2:	60d0      	str	r0, [r2, #12]
    49b4:	2000      	movs	r0, #0
    49b6:	e005      	b.n	49c4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    49b8:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    49bc:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    49c0:	1c40      	adds	r0, r0, #1
    49c2:	b2c0      	uxtb	r0, r0
    49c4:	42a0      	cmp	r0, r4
    49c6:	d3f7      	bcc.n	49b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    49c8:	9800      	ldr	r0, [sp, #0]
    49ca:	1c49      	adds	r1, r1, #1
    49cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    49d0:	b2c9      	uxtb	r1, r1
    49d2:	9000      	str	r0, [sp, #0]
    49d4:	2902      	cmp	r1, #2
    49d6:	d3e4      	bcc.n	49a2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    49d8:	1b40      	subs	r0, r0, r5
    49da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49dc:	200012e8 	.word	0x200012e8

000049e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    49e0:	b570      	push	{r4, r5, r6, lr}
    49e2:	4604      	mov	r4, r0
    49e4:	7985      	ldrb	r5, [r0, #6]
    49e6:	f000 f8e9 	bl	4bbc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    49ea:	4a0c      	ldr	r2, [pc, #48]	; (4a1c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    49ec:	79e1      	ldrb	r1, [r4, #7]
    49ee:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    49f2:	e00e      	b.n	4a12 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    49f4:	68d3      	ldr	r3, [r2, #12]
    49f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    49fa:	b143      	cbz	r3, 4a0e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    49fc:	1c48      	adds	r0, r1, #1
    49fe:	71e0      	strb	r0, [r4, #7]
    4a00:	80a1      	strh	r1, [r4, #4]
    4a02:	68d0      	ldr	r0, [r2, #12]
    4a04:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4a08:	6020      	str	r0, [r4, #0]
    4a0a:	2000      	movs	r0, #0
    4a0c:	bd70      	pop	{r4, r5, r6, pc}
    4a0e:	1c49      	adds	r1, r1, #1
    4a10:	b2c9      	uxtb	r1, r1
    4a12:	4281      	cmp	r1, r0
    4a14:	d3ee      	bcc.n	49f4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    4a16:	71e1      	strb	r1, [r4, #7]
    4a18:	2005      	movs	r0, #5
    4a1a:	bd70      	pop	{r4, r5, r6, pc}
    4a1c:	200012e8 	.word	0x200012e8

00004a20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4a20:	b4f0      	push	{r4, r5, r6, r7}
    4a22:	b121      	cbz	r1, 4a2e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4a24:	2901      	cmp	r1, #1
    4a26:	d002      	beq.n	4a2e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4a28:	bcf0      	pop	{r4, r5, r6, r7}
    4a2a:	2000      	movs	r0, #0
    4a2c:	4770      	bx	lr
    4a2e:	4a0f      	ldr	r2, [pc, #60]	; (4a6c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4a30:	2500      	movs	r5, #0
    4a32:	462b      	mov	r3, r5
    4a34:	f64f 74ff 	movw	r4, #65535	; 0xffff
    4a38:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    4a3c:	5c57      	ldrb	r7, [r2, r1]
    4a3e:	e00a      	b.n	4a56 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    4a40:	195a      	adds	r2, r3, r5
    4a42:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    4a46:	b292      	uxth	r2, r2
    4a48:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    4a4c:	f1bc 0f00 	cmp.w	ip, #0
    4a50:	d004      	beq.n	4a5c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    4a52:	1c5b      	adds	r3, r3, #1
    4a54:	b29b      	uxth	r3, r3
    4a56:	429f      	cmp	r7, r3
    4a58:	d8f2      	bhi.n	4a40 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4a5a:	4622      	mov	r2, r4
    4a5c:	8002      	strh	r2, [r0, #0]
    4a5e:	4610      	mov	r0, r2
    4a60:	42a2      	cmp	r2, r4
    4a62:	d0e1      	beq.n	4a28 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    4a64:	bcf0      	pop	{r4, r5, r6, r7}
    4a66:	f000 b835 	b.w	4ad4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4a6a:	0000      	.short	0x0000
    4a6c:	200012e8 	.word	0x200012e8

00004a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a74:	4606      	mov	r6, r0
    4a76:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4a7a:	460c      	mov	r4, r1
    4a7c:	f243 0702 	movw	r7, #12290	; 0x3002
    4a80:	38ff      	subs	r0, #255	; 0xff
    4a82:	d020      	beq.n	4ac6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4a84:	2c02      	cmp	r4, #2
    4a86:	d302      	bcc.n	4a8e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4a88:	2007      	movs	r0, #7
    4a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a8e:	4630      	mov	r0, r6
    4a90:	f000 f848 	bl	4b24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4a94:	0005      	movs	r5, r0
    4a96:	d016      	beq.n	4ac6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4a98:	480c      	ldr	r0, [pc, #48]	; (4acc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4a9a:	4629      	mov	r1, r5
    4a9c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4aa0:	4630      	mov	r0, r6
    4aa2:	4790      	blx	r2
    4aa4:	480a      	ldr	r0, [pc, #40]	; (4ad0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4aa6:	2100      	movs	r1, #0
    4aa8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4aac:	68f8      	ldr	r0, [r7, #12]
    4aae:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4ab2:	4620      	mov	r0, r4
    4ab4:	f000 f878 	bl	4ba8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4ab8:	4602      	mov	r2, r0
    4aba:	4629      	mov	r1, r5
    4abc:	6878      	ldr	r0, [r7, #4]
    4abe:	f008 fc63 	bl	d388 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4ac2:	2000      	movs	r0, #0
    4ac4:	e7e1      	b.n	4a8a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4ac6:	4638      	mov	r0, r7
    4ac8:	e7df      	b.n	4a8a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4aca:	0000      	.short	0x0000
    4acc:	00004bd4 	.word	0x00004bd4
    4ad0:	200012e8 	.word	0x200012e8
    4ad4:	b570      	push	{r4, r5, r6, lr}
    4ad6:	460e      	mov	r6, r1
    4ad8:	4605      	mov	r5, r0
    4ada:	f008 fc8f 	bl	d3fc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    4ade:	b158      	cbz	r0, 4af8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4ae0:	480f      	ldr	r0, [pc, #60]	; (4b20 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    4ae2:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    4ae6:	68e0      	ldr	r0, [r4, #12]
    4ae8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4aec:	b138      	cbz	r0, 4afe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4aee:	f240 118b 	movw	r1, #395	; 0x18b
    4af2:	2017      	movs	r0, #23
    4af4:	f7ff fd3a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4af8:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    4afc:	e7f9      	b.n	4af2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    4afe:	6860      	ldr	r0, [r4, #4]
    4b00:	2800      	cmp	r0, #0
    4b02:	d00b      	beq.n	4b1c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4b04:	4630      	mov	r0, r6
    4b06:	f000 f84f 	bl	4ba8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4b0a:	4601      	mov	r1, r0
    4b0c:	6860      	ldr	r0, [r4, #4]
    4b0e:	f008 fbe3 	bl	d2d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4b12:	2800      	cmp	r0, #0
    4b14:	d002      	beq.n	4b1c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4b16:	68e1      	ldr	r1, [r4, #12]
    4b18:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    4b1c:	bd70      	pop	{r4, r5, r6, pc}
    4b1e:	0000      	.short	0x0000
    4b20:	200012e8 	.word	0x200012e8
    4b24:	b570      	push	{r4, r5, r6, lr}
    4b26:	460c      	mov	r4, r1
    4b28:	4605      	mov	r5, r0
    4b2a:	f008 fc67 	bl	d3fc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    4b2e:	2800      	cmp	r0, #0
    4b30:	d005      	beq.n	4b3e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    4b32:	4803      	ldr	r0, [pc, #12]	; (4b40 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4b34:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4b38:	68c0      	ldr	r0, [r0, #12]
    4b3a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4b3e:	bd70      	pop	{r4, r5, r6, pc}
    4b40:	200012e8 	.word	0x200012e8
    4b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b48:	4e16      	ldr	r6, [pc, #88]	; (4ba4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    4b4a:	4688      	mov	r8, r1
    4b4c:	4605      	mov	r5, r0
    4b4e:	2400      	movs	r4, #0
    4b50:	6828      	ldr	r0, [r5, #0]
    4b52:	1cc0      	adds	r0, r0, #3
    4b54:	f020 0003 	bic.w	r0, r0, #3
    4b58:	6028      	str	r0, [r5, #0]
    4b5a:	4620      	mov	r0, r4
    4b5c:	f000 f824 	bl	4ba8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4b60:	5d31      	ldrb	r1, [r6, r4]
    4b62:	4348      	muls	r0, r1
    4b64:	f1b8 0f00 	cmp.w	r8, #0
    4b68:	d001      	beq.n	4b6e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    4b6a:	2200      	movs	r2, #0
    4b6c:	e000      	b.n	4b70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    4b6e:	682a      	ldr	r2, [r5, #0]
    4b70:	4601      	mov	r1, r0
    4b72:	9200      	str	r2, [sp, #0]
    4b74:	b132      	cbz	r2, 4b84 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    4b76:	2700      	movs	r7, #0
    4b78:	ea4f 000d 	mov.w	r0, sp
    4b7c:	f008 fbdd 	bl	d33a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4b80:	b11f      	cbz	r7, 4b8a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    4b82:	e006      	b.n	4b92 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    4b84:	2701      	movs	r7, #1
    4b86:	2000      	movs	r0, #0
    4b88:	e7f8      	b.n	4b7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    4b8a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4b8e:	9a00      	ldr	r2, [sp, #0]
    4b90:	604a      	str	r2, [r1, #4]
    4b92:	6829      	ldr	r1, [r5, #0]
    4b94:	1c64      	adds	r4, r4, #1
    4b96:	4408      	add	r0, r1
    4b98:	b2e4      	uxtb	r4, r4
    4b9a:	6028      	str	r0, [r5, #0]
    4b9c:	2c02      	cmp	r4, #2
    4b9e:	d3d7      	bcc.n	4b50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    4ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4ba4:	200012e8 	.word	0x200012e8
    4ba8:	4903      	ldr	r1, [pc, #12]	; (4bb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    4baa:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4bae:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4bb2:	1cc0      	adds	r0, r0, #3
    4bb4:	4008      	ands	r0, r1
    4bb6:	4770      	bx	lr
    4bb8:	00004bd0 	.word	0x00004bd0
    4bbc:	4903      	ldr	r1, [pc, #12]	; (4bcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    4bbe:	7808      	ldrb	r0, [r1, #0]
    4bc0:	7849      	ldrb	r1, [r1, #1]
    4bc2:	4288      	cmp	r0, r1
    4bc4:	d200      	bcs.n	4bc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    4bc6:	4608      	mov	r0, r1
    4bc8:	4770      	bx	lr
    4bca:	0000      	.short	0x0000
    4bcc:	200012e8 	.word	0x200012e8
    4bd0:	011802e8 	.word	0x011802e8
    4bd4:	0000f229 	.word	0x0000f229
    4bd8:	0000e59d 	.word	0x0000e59d

00004bdc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4bdc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4be0:	4c24      	ldr	r4, [pc, #144]	; (4c74 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    4be2:	4606      	mov	r6, r0
    4be4:	b081      	sub	sp, #4
    4be6:	6820      	ldr	r0, [r4, #0]
    4be8:	469a      	mov	sl, r3
    4bea:	4693      	mov	fp, r2
    4bec:	b158      	cbz	r0, 4c06 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4bee:	7a01      	ldrb	r1, [r0, #8]
    4bf0:	42b1      	cmp	r1, r6
    4bf2:	d903      	bls.n	4bfc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4bf4:	6840      	ldr	r0, [r0, #4]
    4bf6:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    4bfa:	b140      	cbz	r0, 4c0e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4bfc:	f243 0002 	movw	r0, #12290	; 0x3002
    4c00:	b005      	add	sp, #20
    4c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c06:	21a5      	movs	r1, #165	; 0xa5
    4c08:	2018      	movs	r0, #24
    4c0a:	f7ff fcaf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c0e:	4619      	mov	r1, r3
    4c10:	9802      	ldr	r0, [sp, #8]
    4c12:	f008 fc16 	bl	d442 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    4c16:	4680      	mov	r8, r0
    4c18:	4658      	mov	r0, fp
    4c1a:	990e      	ldr	r1, [sp, #56]	; 0x38
    4c1c:	f008 fc07 	bl	d42e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    4c20:	4605      	mov	r5, r0
    4c22:	eb08 0005 	add.w	r0, r8, r5
    4c26:	1d00      	adds	r0, r0, #4
    4c28:	b287      	uxth	r7, r0
    4c2a:	6820      	ldr	r0, [r4, #0]
    4c2c:	46a1      	mov	r9, r4
    4c2e:	4639      	mov	r1, r7
    4c30:	6800      	ldr	r0, [r0, #0]
    4c32:	f008 fb51 	bl	d2d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4c36:	0004      	movs	r4, r0
    4c38:	d01a      	beq.n	4c70 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    4c3a:	8067      	strh	r7, [r4, #2]
    4c3c:	8025      	strh	r5, [r4, #0]
    4c3e:	4629      	mov	r1, r5
    4c40:	1d20      	adds	r0, r4, #4
    4c42:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4c44:	4607      	mov	r7, r0
    4c46:	465a      	mov	r2, fp
    4c48:	2309      	movs	r3, #9
    4c4a:	9500      	str	r5, [sp, #0]
    4c4c:	f008 faba 	bl	d1c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4c50:	8820      	ldrh	r0, [r4, #0]
    4c52:	4641      	mov	r1, r8
    4c54:	4438      	add	r0, r7
    4c56:	230a      	movs	r3, #10
    4c58:	9a02      	ldr	r2, [sp, #8]
    4c5a:	f8cd a000 	str.w	sl, [sp]
    4c5e:	f008 fab1 	bl	d1c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4c62:	f8d9 0000 	ldr.w	r0, [r9]
    4c66:	6840      	ldr	r0, [r0, #4]
    4c68:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    4c6c:	2000      	movs	r0, #0
    4c6e:	e7c7      	b.n	4c00 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4c70:	2004      	movs	r0, #4
    4c72:	e7c5      	b.n	4c00 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4c74:	200000c0 	.word	0x200000c0

00004c78 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4c78:	b570      	push	{r4, r5, r6, lr}
    4c7a:	4c14      	ldr	r4, [pc, #80]	; (4ccc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4c7c:	6823      	ldr	r3, [r4, #0]
    4c7e:	b18b      	cbz	r3, 4ca4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4c80:	7a19      	ldrb	r1, [r3, #8]
    4c82:	4281      	cmp	r1, r0
    4c84:	d912      	bls.n	4cac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4c86:	685a      	ldr	r2, [r3, #4]
    4c88:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4c8c:	b171      	cbz	r1, 4cac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4c8e:	2500      	movs	r5, #0
    4c90:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4c94:	884a      	ldrh	r2, [r1, #2]
    4c96:	6818      	ldr	r0, [r3, #0]
    4c98:	f008 fb76 	bl	d388 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4c9c:	6821      	ldr	r1, [r4, #0]
    4c9e:	2000      	movs	r0, #0
    4ca0:	7a0a      	ldrb	r2, [r1, #8]
    4ca2:	e00c      	b.n	4cbe <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4ca4:	21c6      	movs	r1, #198	; 0xc6
    4ca6:	2018      	movs	r0, #24
    4ca8:	f7ff fc60 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cac:	f243 0002 	movw	r0, #12290	; 0x3002
    4cb0:	bd70      	pop	{r4, r5, r6, pc}
    4cb2:	684b      	ldr	r3, [r1, #4]
    4cb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4cb8:	b933      	cbnz	r3, 4cc8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4cba:	1c40      	adds	r0, r0, #1
    4cbc:	b2c0      	uxtb	r0, r0
    4cbe:	4282      	cmp	r2, r0
    4cc0:	d8f7      	bhi.n	4cb2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4cc2:	6808      	ldr	r0, [r1, #0]
    4cc4:	f008 fb55 	bl	d372 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4cc8:	2000      	movs	r0, #0
    4cca:	bd70      	pop	{r4, r5, r6, pc}
    4ccc:	200000c0 	.word	0x200000c0

00004cd0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cd4:	460d      	mov	r5, r1
    4cd6:	0004      	movs	r4, r0
    4cd8:	4690      	mov	r8, r2
    4cda:	f04f 0600 	mov.w	r6, #0
    4cde:	d006      	beq.n	4cee <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    4ce0:	2700      	movs	r7, #0
    4ce2:	07a0      	lsls	r0, r4, #30
    4ce4:	d005      	beq.n	4cf2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    4ce6:	2186      	movs	r1, #134	; 0x86
    4ce8:	2018      	movs	r0, #24
    4cea:	f7ff fc3f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cee:	2701      	movs	r7, #1
    4cf0:	e7f7      	b.n	4ce2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4cf2:	b1cd      	cbz	r5, 4d28 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4cf4:	4611      	mov	r1, r2
    4cf6:	2000      	movs	r0, #0
    4cf8:	f008 fb1f 	bl	d33a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4cfc:	300c      	adds	r0, #12
    4cfe:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4d02:	b98f      	cbnz	r7, 4d28 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4d04:	4f0a      	ldr	r7, [pc, #40]	; (4d30 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    4d06:	f104 000c 	add.w	r0, r4, #12
    4d0a:	00aa      	lsls	r2, r5, #2
    4d0c:	603c      	str	r4, [r7, #0]
    4d0e:	7225      	strb	r5, [r4, #8]
    4d10:	6060      	str	r0, [r4, #4]
    4d12:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4d16:	6020      	str	r0, [r4, #0]
    4d18:	2100      	movs	r1, #0
    4d1a:	6860      	ldr	r0, [r4, #4]
    4d1c:	f007 fc37 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4d20:	4641      	mov	r1, r8
    4d22:	6838      	ldr	r0, [r7, #0]
    4d24:	f008 fb09 	bl	d33a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4d28:	4630      	mov	r0, r6
    4d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d2e:	0000      	.short	0x0000
    4d30:	200000c0 	.word	0x200000c0

00004d34 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4d34:	b570      	push	{r4, r5, r6, lr}
    4d36:	4d08      	ldr	r5, [pc, #32]	; (4d58 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4d38:	6828      	ldr	r0, [r5, #0]
    4d3a:	2800      	cmp	r0, #0
    4d3c:	d00a      	beq.n	4d54 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4d3e:	2400      	movs	r4, #0
    4d40:	e004      	b.n	4d4c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4d42:	4620      	mov	r0, r4
    4d44:	f7ff ff98 	bl	4c78 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4d48:	1c64      	adds	r4, r4, #1
    4d4a:	b2e4      	uxtb	r4, r4
    4d4c:	6828      	ldr	r0, [r5, #0]
    4d4e:	7a00      	ldrb	r0, [r0, #8]
    4d50:	42a0      	cmp	r0, r4
    4d52:	d8f6      	bhi.n	4d42 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4d54:	bd70      	pop	{r4, r5, r6, pc}
    4d56:	0000      	.short	0x0000
    4d58:	200000c0 	.word	0x200000c0

00004d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4d5c:	4909      	ldr	r1, [pc, #36]	; (4d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4d5e:	b510      	push	{r4, lr}
    4d60:	4602      	mov	r2, r0
    4d62:	6809      	ldr	r1, [r1, #0]
    4d64:	2000      	movs	r0, #0
    4d66:	b149      	cbz	r1, 4d7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4d68:	7a0b      	ldrb	r3, [r1, #8]
    4d6a:	4293      	cmp	r3, r2
    4d6c:	d905      	bls.n	4d7a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4d6e:	6849      	ldr	r1, [r1, #4]
    4d70:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4d74:	2900      	cmp	r1, #0
    4d76:	d000      	beq.n	4d7a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4d78:	1d08      	adds	r0, r1, #4
    4d7a:	bd10      	pop	{r4, pc}
    4d7c:	21ec      	movs	r1, #236	; 0xec
    4d7e:	2018      	movs	r0, #24
    4d80:	f7ff fbf4 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d84:	200000c0 	.word	0x200000c0

00004d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4d88:	490a      	ldr	r1, [pc, #40]	; (4db4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4d8a:	b510      	push	{r4, lr}
    4d8c:	4602      	mov	r2, r0
    4d8e:	6809      	ldr	r1, [r1, #0]
    4d90:	2000      	movs	r0, #0
    4d92:	b159      	cbz	r1, 4dac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4d94:	7a0b      	ldrb	r3, [r1, #8]
    4d96:	4293      	cmp	r3, r2
    4d98:	d907      	bls.n	4daa <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4d9a:	6849      	ldr	r1, [r1, #4]
    4d9c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4da0:	2900      	cmp	r1, #0
    4da2:	d002      	beq.n	4daa <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4da4:	f831 0b04 	ldrh.w	r0, [r1], #4
    4da8:	4408      	add	r0, r1
    4daa:	bd10      	pop	{r4, pc}
    4dac:	21fa      	movs	r1, #250	; 0xfa
    4dae:	2018      	movs	r0, #24
    4db0:	f7ff fbdc 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4db4:	200000c0 	.word	0x200000c0
    4db8:	b570      	push	{r4, r5, r6, lr}
    4dba:	4b1e      	ldr	r3, [pc, #120]	; (4e34 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    4dbc:	6845      	ldr	r5, [r0, #4]
    4dbe:	4604      	mov	r4, r0
    4dc0:	2200      	movs	r2, #0
    4dc2:	b1a1      	cbz	r1, 4dee <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    4dc4:	2001      	movs	r0, #1
    4dc6:	7060      	strb	r0, [r4, #1]
    4dc8:	8858      	ldrh	r0, [r3, #2]
    4dca:	0881      	lsrs	r1, r0, #2
    4dcc:	f05f 0000 	movs.w	r0, #0
    4dd0:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    4dd4:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    4dd8:	831a      	strh	r2, [r3, #24]
    4dda:	8419      	strh	r1, [r3, #32]
    4ddc:	fb00 5301 	mla	r3, r0, r1, r5
    4de0:	6073      	str	r3, [r6, #4]
    4de2:	1823      	adds	r3, r4, r0
    4de4:	1c40      	adds	r0, r0, #1
    4de6:	751a      	strb	r2, [r3, #20]
    4de8:	2804      	cmp	r0, #4
    4dea:	d3f1      	bcc.n	4dd0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    4dec:	bd70      	pop	{r4, r5, r6, pc}
    4dee:	7062      	strb	r2, [r4, #1]
    4df0:	f05f 0000 	movs.w	r0, #0
    4df4:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    4df8:	830a      	strh	r2, [r1, #24]
    4dfa:	840a      	strh	r2, [r1, #32]
    4dfc:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    4e00:	604a      	str	r2, [r1, #4]
    4e02:	1821      	adds	r1, r4, r0
    4e04:	1c40      	adds	r0, r0, #1
    4e06:	750a      	strb	r2, [r1, #20]
    4e08:	2804      	cmp	r0, #4
    4e0a:	d3f3      	bcc.n	4df4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4e0c:	8858      	ldrh	r0, [r3, #2]
    4e0e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    4e12:	d201      	bcs.n	4e18 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    4e14:	0846      	lsrs	r6, r0, #1
    4e16:	e000      	b.n	4e1a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    4e18:	26ff      	movs	r6, #255	; 0xff
    4e1a:	f008 fb86 	bl	d52a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4e1e:	6065      	str	r5, [r4, #4]
    4e20:	8420      	strh	r0, [r4, #32]
    4e22:	1829      	adds	r1, r5, r0
    4e24:	60a1      	str	r1, [r4, #8]
    4e26:	8466      	strh	r6, [r4, #34]	; 0x22
    4e28:	60e5      	str	r5, [r4, #12]
    4e2a:	84a0      	strh	r0, [r4, #36]	; 0x24
    4e2c:	6121      	str	r1, [r4, #16]
    4e2e:	84e6      	strh	r6, [r4, #38]	; 0x26
    4e30:	bd70      	pop	{r4, r5, r6, pc}
    4e32:	0000      	.short	0x0000
    4e34:	200000c4 	.word	0x200000c4

00004e38 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e3c:	b158      	cbz	r0, 4e56 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    4e3e:	2500      	movs	r5, #0
    4e40:	4411      	add	r1, r2
    4e42:	4e24      	ldr	r6, [pc, #144]	; (4ed4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    4e44:	b2cc      	uxtb	r4, r1
    4e46:	2700      	movs	r7, #0
    4e48:	7034      	strb	r4, [r6, #0]
    4e4a:	0781      	lsls	r1, r0, #30
    4e4c:	d005      	beq.n	4e5a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    4e4e:	214e      	movs	r1, #78	; 0x4e
    4e50:	2009      	movs	r0, #9
    4e52:	f7ff fb8b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e56:	2501      	movs	r5, #1
    4e58:	e7f2      	b.n	4e40 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4e5a:	2b1f      	cmp	r3, #31
    4e5c:	d804      	bhi.n	4e68 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    4e5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4e62:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    4e66:	e009      	b.n	4e7c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    4e68:	0059      	lsls	r1, r3, #1
    4e6a:	2bff      	cmp	r3, #255	; 0xff
    4e6c:	d90c      	bls.n	4e88 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    4e6e:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    4e72:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4e76:	d200      	bcs.n	4e7a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4e78:	4611      	mov	r1, r2
    4e7a:	b289      	uxth	r1, r1
    4e7c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    4e80:	1cc9      	adds	r1, r1, #3
    4e82:	4011      	ands	r1, r2
    4e84:	b135      	cbz	r5, 4e94 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    4e86:	e007      	b.n	4e98 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    4e88:	227c      	movs	r2, #124	; 0x7c
    4e8a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4e8e:	d3f4      	bcc.n	4e7a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4e90:	217c      	movs	r1, #124	; 0x7c
    4e92:	e7f2      	b.n	4e7a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4e94:	6070      	str	r0, [r6, #4]
    4e96:	8071      	strh	r1, [r6, #2]
    4e98:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4e9c:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    4ea0:	2200      	movs	r2, #0
    4ea2:	6876      	ldr	r6, [r6, #4]
    4ea4:	f04f 0c01 	mov.w	ip, #1
    4ea8:	e00d      	b.n	4ec6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    4eaa:	b94d      	cbnz	r5, 4ec0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    4eac:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    4eb0:	eb00 0e03 	add.w	lr, r0, r3
    4eb4:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    4eb8:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    4ebc:	f8c7 e004 	str.w	lr, [r7, #4]
    4ec0:	1c52      	adds	r2, r2, #1
    4ec2:	440b      	add	r3, r1
    4ec4:	b2d2      	uxtb	r2, r2
    4ec6:	42a2      	cmp	r2, r4
    4ec8:	d3ef      	bcc.n	4eaa <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    4eca:	1ddb      	adds	r3, r3, #7
    4ecc:	f023 0007 	bic.w	r0, r3, #7
    4ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ed4:	200000c4 	.word	0x200000c4

00004ed8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4ed8:	b570      	push	{r4, r5, r6, lr}
    4eda:	4a10      	ldr	r2, [pc, #64]	; (4f1c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    4edc:	2000      	movs	r0, #0
    4ede:	6851      	ldr	r1, [r2, #4]
    4ee0:	7812      	ldrb	r2, [r2, #0]
    4ee2:	e014      	b.n	4f0e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    4ee4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4ee8:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    4eec:	b16b      	cbz	r3, 4f0a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    4eee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4ef2:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    4ef6:	d00c      	beq.n	4f12 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    4ef8:	2500      	movs	r5, #0
    4efa:	70a5      	strb	r5, [r4, #2]
    4efc:	2101      	movs	r1, #1
    4efe:	4620      	mov	r0, r4
    4f00:	f7ff ff5a 	bl	4db8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4f04:	7025      	strb	r5, [r4, #0]
    4f06:	4620      	mov	r0, r4
    4f08:	bd70      	pop	{r4, r5, r6, pc}
    4f0a:	1c40      	adds	r0, r0, #1
    4f0c:	b2c0      	uxtb	r0, r0
    4f0e:	4290      	cmp	r0, r2
    4f10:	d3e8      	bcc.n	4ee4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    4f12:	21a9      	movs	r1, #169	; 0xa9
    4f14:	2009      	movs	r0, #9
    4f16:	f7ff fb29 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f1a:	0000      	.short	0x0000
    4f1c:	200000c4 	.word	0x200000c4

00004f20 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    4f20:	4804      	ldr	r0, [pc, #16]	; (4f34 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    4f22:	b510      	push	{r4, lr}
    4f24:	8840      	ldrh	r0, [r0, #2]
    4f26:	0884      	lsrs	r4, r0, #2
    4f28:	f008 faff 	bl	d52a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4f2c:	4284      	cmp	r4, r0
    4f2e:	d300      	bcc.n	4f32 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    4f30:	4620      	mov	r0, r4
    4f32:	bd10      	pop	{r4, pc}
    4f34:	200000c4 	.word	0x200000c4
    4f38:	b530      	push	{r4, r5, lr}
    4f3a:	490d      	ldr	r1, [pc, #52]	; (4f70 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    4f3c:	2001      	movs	r0, #1
    4f3e:	6048      	str	r0, [r1, #4]
    4f40:	1e82      	subs	r2, r0, #2
    4f42:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4f46:	490b      	ldr	r1, [pc, #44]	; (4f74 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    4f48:	6088      	str	r0, [r1, #8]
    4f4a:	2300      	movs	r3, #0
    4f4c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    4f50:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4f54:	4c08      	ldr	r4, [pc, #32]	; (4f78 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    4f56:	6023      	str	r3, [r4, #0]
    4f58:	1d25      	adds	r5, r4, #4
    4f5a:	6028      	str	r0, [r5, #0]
    4f5c:	6088      	str	r0, [r1, #8]
    4f5e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4f62:	6023      	str	r3, [r4, #0]
    4f64:	6028      	str	r0, [r5, #0]
    4f66:	4906      	ldr	r1, [pc, #24]	; (4f80 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    4f68:	4804      	ldr	r0, [pc, #16]	; (4f7c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    4f6a:	6008      	str	r0, [r1, #0]
    4f6c:	bd30      	pop	{r4, r5, pc}
    4f6e:	0000      	.short	0x0000
    4f70:	4000e000 	.word	0x4000e000
    4f74:	4000f000 	.word	0x4000f000
    4f78:	4000f500 	.word	0x4000f500
    4f7c:	3ff60000 	.word	0x3ff60000
    4f80:	4001f508 	.word	0x4001f508

00004f84 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    4f84:	b510      	push	{r4, lr}
    4f86:	f7ff ffd7 	bl	4f38 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4f8a:	f008 fba1 	bl	d6d0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4f8e:	4903      	ldr	r1, [pc, #12]	; (4f9c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    4f90:	4801      	ldr	r0, [pc, #4]	; (4f98 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    4f92:	6008      	str	r0, [r1, #0]
    4f94:	bd10      	pop	{r4, pc}
    4f96:	0000      	.short	0x0000
    4f98:	3ff60000 	.word	0x3ff60000
    4f9c:	4001f508 	.word	0x4001f508

00004fa0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4fa0:	b510      	push	{r4, lr}
    4fa2:	4604      	mov	r4, r0
    4fa4:	f7ff ffc8 	bl	4f38 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4fa8:	f008 fb92 	bl	d6d0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4fac:	f000 f888 	bl	50c0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4fb0:	4905      	ldr	r1, [pc, #20]	; (4fc8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    4fb2:	4804      	ldr	r0, [pc, #16]	; (4fc4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    4fb4:	6008      	str	r0, [r1, #0]
    4fb6:	4620      	mov	r0, r4
    4fb8:	f000 f8b8 	bl	512c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fc0:	f000 b8dc 	b.w	517c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4fc4:	3ff60000 	.word	0x3ff60000
    4fc8:	4001f508 	.word	0x4001f508
    4fcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fd0:	4682      	mov	sl, r0
    4fd2:	4838      	ldr	r0, [pc, #224]	; (50b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4fd4:	f007 f9ca 	bl	c36c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4fd8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 50b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    4fdc:	b128      	cbz	r0, 4fea <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    4fde:	2601      	movs	r6, #1
    4fe0:	f10b 0001 	add.w	r0, fp, #1
    4fe4:	21ff      	movs	r1, #255	; 0xff
    4fe6:	7001      	strb	r1, [r0, #0]
    4fe8:	e000      	b.n	4fec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    4fea:	2600      	movs	r6, #0
    4fec:	f44f 7580 	mov.w	r5, #256	; 0x100
    4ff0:	4c31      	ldr	r4, [pc, #196]	; (50b8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    4ff2:	f04f 0800 	mov.w	r8, #0
    4ff6:	1d2f      	adds	r7, r5, #4
    4ff8:	2101      	movs	r1, #1
    4ffa:	6061      	str	r1, [r4, #4]
    4ffc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5000:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5004:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    5008:	6021      	str	r1, [r4, #0]
    500a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 50bc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    500e:	e01c      	b.n	504a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5010:	f8d9 0000 	ldr.w	r0, [r9]
    5014:	06c0      	lsls	r0, r0, #27
    5016:	d518      	bpl.n	504a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5018:	200e      	movs	r0, #14
    501a:	f008 fb68 	bl	d6ee <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    501e:	f3ef 8010 	mrs	r0, PRIMASK
    5022:	9000      	str	r0, [sp, #0]
    5024:	b672      	cpsid	i
    5026:	2103      	movs	r1, #3
    5028:	4620      	mov	r0, r4
    502a:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    502e:	4629      	mov	r1, r5
    5030:	f008 fb6a 	bl	d708 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5034:	b930      	cbnz	r0, 5044 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5036:	4639      	mov	r1, r7
    5038:	4620      	mov	r0, r4
    503a:	f008 fb65 	bl	d708 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    503e:	b908      	cbnz	r0, 5044 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5040:	f7ff f8f0 	bl	4224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5044:	9800      	ldr	r0, [sp, #0]
    5046:	b900      	cbnz	r0, 504a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5048:	b662      	cpsie	i
    504a:	4629      	mov	r1, r5
    504c:	4620      	mov	r0, r4
    504e:	f008 fb5b 	bl	d708 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5052:	b928      	cbnz	r0, 5060 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    5054:	4639      	mov	r1, r7
    5056:	4620      	mov	r0, r4
    5058:	f008 fb56 	bl	d708 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    505c:	2800      	cmp	r0, #0
    505e:	d0d7      	beq.n	5010 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    5060:	4639      	mov	r1, r7
    5062:	4620      	mov	r0, r4
    5064:	f008 fb50 	bl	d708 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5068:	2800      	cmp	r0, #0
    506a:	d1c5      	bne.n	4ff8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    506c:	bb06      	cbnz	r6, 50b0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    506e:	f89b 1001 	ldrb.w	r1, [fp, #1]
    5072:	f88d 1000 	strb.w	r1, [sp]
    5076:	9900      	ldr	r1, [sp, #0]
    5078:	9100      	str	r1, [sp, #0]
    507a:	f89d 1000 	ldrb.w	r1, [sp]
    507e:	b109      	cbz	r1, 5084 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    5080:	2501      	movs	r5, #1
    5082:	e000      	b.n	5086 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    5084:	2500      	movs	r5, #0
    5086:	f10b 0001 	add.w	r0, fp, #1
    508a:	f880 8000 	strb.w	r8, [r0]
    508e:	2003      	movs	r0, #3
    5090:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    5094:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5098:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    509c:	200e      	movs	r0, #14
    509e:	f008 fb26 	bl	d6ee <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    50a2:	4804      	ldr	r0, [pc, #16]	; (50b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    50a4:	f007 f979 	bl	c39a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    50a8:	b115      	cbz	r5, 50b0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    50aa:	2011      	movs	r0, #17
    50ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50b0:	2000      	movs	r0, #0
    50b2:	e7fb      	b.n	50ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    50b4:	20000358 	.word	0x20000358
    50b8:	4000e000 	.word	0x4000e000
    50bc:	e000ed10 	.word	0xe000ed10

000050c0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    50c0:	b510      	push	{r4, lr}
    50c2:	4806      	ldr	r0, [pc, #24]	; (50dc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    50c4:	f007 f965 	bl	c392 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    50c8:	b118      	cbz	r0, 50d2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    50ca:	2127      	movs	r1, #39	; 0x27
    50cc:	201d      	movs	r0, #29
    50ce:	f7ff fa4d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50d2:	4802      	ldr	r0, [pc, #8]	; (50dc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    50d4:	2100      	movs	r1, #0
    50d6:	7041      	strb	r1, [r0, #1]
    50d8:	bd10      	pop	{r4, pc}
    50da:	0000      	.short	0x0000
    50dc:	20000358 	.word	0x20000358

000050e0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    50e0:	b570      	push	{r4, r5, r6, lr}
    50e2:	4911      	ldr	r1, [pc, #68]	; (5128 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    50e4:	680a      	ldr	r2, [r1, #0]
    50e6:	b1ea      	cbz	r2, 5124 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    50e8:	2300      	movs	r3, #0
    50ea:	461d      	mov	r5, r3
    50ec:	2401      	movs	r4, #1
    50ee:	684a      	ldr	r2, [r1, #4]
    50f0:	1c52      	adds	r2, r2, #1
    50f2:	604a      	str	r2, [r1, #4]
    50f4:	2a09      	cmp	r2, #9
    50f6:	d300      	bcc.n	50fa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    50f8:	604d      	str	r5, [r1, #4]
    50fa:	790e      	ldrb	r6, [r1, #4]
    50fc:	fa04 f206 	lsl.w	r2, r4, r6
    5100:	680e      	ldr	r6, [r1, #0]
    5102:	4216      	tst	r6, r2
    5104:	d00b      	beq.n	511e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    5106:	f3ef 8310 	mrs	r3, PRIMASK
    510a:	b672      	cpsid	i
    510c:	680c      	ldr	r4, [r1, #0]
    510e:	4394      	bics	r4, r2
    5110:	600c      	str	r4, [r1, #0]
    5112:	b903      	cbnz	r3, 5116 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5114:	b662      	cpsie	i
    5116:	6849      	ldr	r1, [r1, #4]
    5118:	6001      	str	r1, [r0, #0]
    511a:	2000      	movs	r0, #0
    511c:	bd70      	pop	{r4, r5, r6, pc}
    511e:	1c5b      	adds	r3, r3, #1
    5120:	2b09      	cmp	r3, #9
    5122:	d3e4      	bcc.n	50ee <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5124:	2005      	movs	r0, #5
    5126:	bd70      	pop	{r4, r5, r6, pc}
    5128:	200000cc 	.word	0x200000cc

0000512c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    512c:	4802      	ldr	r0, [pc, #8]	; (5138 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    512e:	2100      	movs	r1, #0
    5130:	6001      	str	r1, [r0, #0]
    5132:	6041      	str	r1, [r0, #4]
    5134:	4770      	bx	lr
    5136:	0000      	.short	0x0000
    5138:	200000cc 	.word	0x200000cc

0000513c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    513c:	b510      	push	{r4, lr}
    513e:	4c04      	ldr	r4, [pc, #16]	; (5150 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    5140:	7820      	ldrb	r0, [r4, #0]
    5142:	28ff      	cmp	r0, #255	; 0xff
    5144:	d003      	beq.n	514e <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    5146:	f7ff f823 	bl	4190 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    514a:	20ff      	movs	r0, #255	; 0xff
    514c:	7020      	strb	r0, [r4, #0]
    514e:	bd10      	pop	{r4, pc}
    5150:	20000000 	.word	0x20000000

00005154 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5154:	b510      	push	{r4, lr}
    5156:	4c08      	ldr	r4, [pc, #32]	; (5178 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5158:	7861      	ldrb	r1, [r4, #1]
    515a:	b109      	cbz	r1, 5160 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    515c:	200f      	movs	r0, #15
    515e:	bd10      	pop	{r4, pc}
    5160:	f7fe ffdc 	bl	411c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5164:	7020      	strb	r0, [r4, #0]
    5166:	28ff      	cmp	r0, #255	; 0xff
    5168:	d001      	beq.n	516e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    516a:	2000      	movs	r0, #0
    516c:	bd10      	pop	{r4, pc}
    516e:	2178      	movs	r1, #120	; 0x78
    5170:	201f      	movs	r0, #31
    5172:	f7ff f9fb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5176:	0000      	.short	0x0000
    5178:	20000000 	.word	0x20000000

0000517c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    517c:	4901      	ldr	r1, [pc, #4]	; (5184 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    517e:	2000      	movs	r0, #0
    5180:	7048      	strb	r0, [r1, #1]
    5182:	4770      	bx	lr
    5184:	20000000 	.word	0x20000000

00005188 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5188:	4806      	ldr	r0, [pc, #24]	; (51a4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    518a:	4a07      	ldr	r2, [pc, #28]	; (51a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    518c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    518e:	8852      	ldrh	r2, [r2, #2]
    5190:	4291      	cmp	r1, r2
    5192:	d104      	bne.n	519e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5194:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5198:	b108      	cbz	r0, 519e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    519a:	2000      	movs	r0, #0
    519c:	4770      	bx	lr
    519e:	2001      	movs	r0, #1
    51a0:	4770      	bx	lr
    51a2:	0000      	.short	0x0000
    51a4:	20001398 	.word	0x20001398
    51a8:	20000344 	.word	0x20000344

000051ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    51ac:	4901      	ldr	r1, [pc, #4]	; (51b4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    51ae:	8048      	strh	r0, [r1, #2]
    51b0:	4770      	bx	lr
    51b2:	0000      	.short	0x0000
    51b4:	20000344 	.word	0x20000344

000051b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    51b8:	4808      	ldr	r0, [pc, #32]	; (51dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    51ba:	4a09      	ldr	r2, [pc, #36]	; (51e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    51bc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    51be:	8852      	ldrh	r2, [r2, #2]
    51c0:	4291      	cmp	r1, r2
    51c2:	d109      	bne.n	51d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    51c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    51c8:	8481      	strh	r1, [r0, #36]	; 0x24
    51ca:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    51ce:	b119      	cbz	r1, 51d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    51d0:	2100      	movs	r1, #0
    51d2:	7001      	strb	r1, [r0, #0]
    51d4:	2001      	movs	r0, #1
    51d6:	4770      	bx	lr
    51d8:	2000      	movs	r0, #0
    51da:	4770      	bx	lr
    51dc:	20001398 	.word	0x20001398
    51e0:	20000344 	.word	0x20000344

000051e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    51e4:	4807      	ldr	r0, [pc, #28]	; (5204 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    51e6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    51ea:	2901      	cmp	r1, #1
    51ec:	d007      	beq.n	51fe <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    51ee:	2101      	movs	r1, #1
    51f0:	7001      	strb	r1, [r0, #0]
    51f2:	4805      	ldr	r0, [pc, #20]	; (5208 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    51f4:	4903      	ldr	r1, [pc, #12]	; (5204 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    51f6:	8800      	ldrh	r0, [r0, #0]
    51f8:	8488      	strh	r0, [r1, #36]	; 0x24
    51fa:	2001      	movs	r0, #1
    51fc:	4770      	bx	lr
    51fe:	2000      	movs	r0, #0
    5200:	4770      	bx	lr
    5202:	0000      	.short	0x0000
    5204:	20001398 	.word	0x20001398
    5208:	20000344 	.word	0x20000344

0000520c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    520c:	4906      	ldr	r1, [pc, #24]	; (5228 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    520e:	4b07      	ldr	r3, [pc, #28]	; (522c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5210:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5212:	885b      	ldrh	r3, [r3, #2]
    5214:	429a      	cmp	r2, r3
    5216:	d105      	bne.n	5224 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5218:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    521c:	b112      	cbz	r2, 5224 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    521e:	6001      	str	r1, [r0, #0]
    5220:	2001      	movs	r0, #1
    5222:	4770      	bx	lr
    5224:	2000      	movs	r0, #0
    5226:	4770      	bx	lr
    5228:	20001398 	.word	0x20001398
    522c:	20000344 	.word	0x20000344

00005230 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5230:	4909      	ldr	r1, [pc, #36]	; (5258 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5232:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5234:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5238:	3bff      	subs	r3, #255	; 0xff
    523a:	d002      	beq.n	5242 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    523c:	2100      	movs	r1, #0
    523e:	6001      	str	r1, [r0, #0]
    5240:	e007      	b.n	5252 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5242:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5246:	4904      	ldr	r1, [pc, #16]	; (5258 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5248:	2a01      	cmp	r2, #1
    524a:	d002      	beq.n	5252 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    524c:	6001      	str	r1, [r0, #0]
    524e:	2001      	movs	r0, #1
    5250:	4770      	bx	lr
    5252:	2000      	movs	r0, #0
    5254:	4770      	bx	lr
    5256:	0000      	.short	0x0000
    5258:	20001398 	.word	0x20001398

0000525c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    525c:	4901      	ldr	r1, [pc, #4]	; (5264 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    525e:	8008      	strh	r0, [r1, #0]
    5260:	4770      	bx	lr
    5262:	0000      	.short	0x0000
    5264:	20000344 	.word	0x20000344

00005268 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5268:	4905      	ldr	r1, [pc, #20]	; (5280 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    526a:	2000      	movs	r0, #0
    526c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5270:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5274:	8488      	strh	r0, [r1, #36]	; 0x24
    5276:	4903      	ldr	r1, [pc, #12]	; (5284 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5278:	8008      	strh	r0, [r1, #0]
    527a:	8048      	strh	r0, [r1, #2]
    527c:	4770      	bx	lr
    527e:	0000      	.short	0x0000
    5280:	20001398 	.word	0x20001398
    5284:	20000344 	.word	0x20000344
    5288:	4905      	ldr	r1, [pc, #20]	; (52a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    528a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    528c:	4282      	cmp	r2, r0
    528e:	d105      	bne.n	529c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5290:	2000      	movs	r0, #0
    5292:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5296:	f64f 70ff 	movw	r0, #65535	; 0xffff
    529a:	8488      	strh	r0, [r1, #36]	; 0x24
    529c:	4770      	bx	lr
    529e:	0000      	.short	0x0000
    52a0:	20001398 	.word	0x20001398

000052a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    52a4:	4a0a      	ldr	r2, [pc, #40]	; (52d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    52a6:	b110      	cbz	r0, 52ae <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    52a8:	2801      	cmp	r0, #1
    52aa:	d007      	beq.n	52bc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    52ac:	e00e      	b.n	52cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    52ae:	7850      	ldrb	r0, [r2, #1]
    52b0:	b160      	cbz	r0, 52cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    52b2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    52b6:	6008      	str	r0, [r1, #0]
    52b8:	88d0      	ldrh	r0, [r2, #6]
    52ba:	e004      	b.n	52c6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    52bc:	7810      	ldrb	r0, [r2, #0]
    52be:	b128      	cbz	r0, 52cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    52c0:	6890      	ldr	r0, [r2, #8]
    52c2:	6008      	str	r0, [r1, #0]
    52c4:	8990      	ldrh	r0, [r2, #12]
    52c6:	8088      	strh	r0, [r1, #4]
    52c8:	2001      	movs	r0, #1
    52ca:	4770      	bx	lr
    52cc:	2000      	movs	r0, #0
    52ce:	4770      	bx	lr
    52d0:	2000035a 	.word	0x2000035a

000052d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    52d4:	4a08      	ldr	r2, [pc, #32]	; (52f8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    52d6:	2301      	movs	r3, #1
    52d8:	b138      	cbz	r0, 52ea <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    52da:	2801      	cmp	r0, #1
    52dc:	d104      	bne.n	52e8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    52de:	7013      	strb	r3, [r2, #0]
    52e0:	6808      	ldr	r0, [r1, #0]
    52e2:	6090      	str	r0, [r2, #8]
    52e4:	8888      	ldrh	r0, [r1, #4]
    52e6:	8190      	strh	r0, [r2, #12]
    52e8:	4770      	bx	lr
    52ea:	7053      	strb	r3, [r2, #1]
    52ec:	6808      	ldr	r0, [r1, #0]
    52ee:	f8c2 0002 	str.w	r0, [r2, #2]
    52f2:	8888      	ldrh	r0, [r1, #4]
    52f4:	80d0      	strh	r0, [r2, #6]
    52f6:	4770      	bx	lr
    52f8:	2000035a 	.word	0x2000035a

000052fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    52fc:	4906      	ldr	r1, [pc, #24]	; (5318 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    52fe:	b110      	cbz	r0, 5306 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5300:	2801      	cmp	r0, #1
    5302:	d002      	beq.n	530a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5304:	e005      	b.n	5312 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5306:	7848      	ldrb	r0, [r1, #1]
    5308:	e000      	b.n	530c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    530a:	7808      	ldrb	r0, [r1, #0]
    530c:	b108      	cbz	r0, 5312 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    530e:	2001      	movs	r0, #1
    5310:	4770      	bx	lr
    5312:	2000      	movs	r0, #0
    5314:	4770      	bx	lr
    5316:	0000      	.short	0x0000
    5318:	2000035a 	.word	0x2000035a

0000531c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    531c:	4901      	ldr	r1, [pc, #4]	; (5324 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    531e:	7708      	strb	r0, [r1, #28]
    5320:	4770      	bx	lr
    5322:	0000      	.short	0x0000
    5324:	20000c22 	.word	0x20000c22

00005328 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5328:	4801      	ldr	r0, [pc, #4]	; (5330 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    532a:	78c0      	ldrb	r0, [r0, #3]
    532c:	4770      	bx	lr
    532e:	0000      	.short	0x0000
    5330:	200000d4 	.word	0x200000d4

00005334 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5334:	4801      	ldr	r0, [pc, #4]	; (533c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5336:	7900      	ldrb	r0, [r0, #4]
    5338:	4770      	bx	lr
    533a:	0000      	.short	0x0000
    533c:	200000d4 	.word	0x200000d4

00005340 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5340:	b510      	push	{r4, lr}
    5342:	4604      	mov	r4, r0
    5344:	f000 f944 	bl	55d0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5348:	b118      	cbz	r0, 5352 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    534a:	21c5      	movs	r1, #197	; 0xc5
    534c:	2027      	movs	r0, #39	; 0x27
    534e:	f7ff f90d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5352:	4803      	ldr	r0, [pc, #12]	; (5360 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5354:	2101      	movs	r1, #1
    5356:	f008 fdfc 	bl	df52 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    535a:	4802      	ldr	r0, [pc, #8]	; (5364 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    535c:	62c4      	str	r4, [r0, #44]	; 0x2c
    535e:	bd10      	pop	{r4, pc}
    5360:	20000c00 	.word	0x20000c00
    5364:	200000d4 	.word	0x200000d4

00005368 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5368:	4901      	ldr	r1, [pc, #4]	; (5370 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    536a:	2001      	movs	r0, #1
    536c:	7188      	strb	r0, [r1, #6]
    536e:	4770      	bx	lr
    5370:	200000d4 	.word	0x200000d4

00005374 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5378:	4c5d      	ldr	r4, [pc, #372]	; (54f0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    537a:	9d06      	ldr	r5, [sp, #24]
    537c:	7826      	ldrb	r6, [r4, #0]
    537e:	2e00      	cmp	r6, #0
    5380:	d16a      	bne.n	5458 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5382:	2a00      	cmp	r2, #0
    5384:	d068      	beq.n	5458 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5386:	2b00      	cmp	r3, #0
    5388:	d066      	beq.n	5458 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    538a:	2d00      	cmp	r5, #0
    538c:	d064      	beq.n	5458 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    538e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5392:	f104 0614 	add.w	r6, r4, #20
    5396:	2000      	movs	r0, #0
    5398:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    539c:	71a0      	strb	r0, [r4, #6]
    539e:	7160      	strb	r0, [r4, #5]
    53a0:	70e0      	strb	r0, [r4, #3]
    53a2:	70a0      	strb	r0, [r4, #2]
    53a4:	7120      	strb	r0, [r4, #4]
    53a6:	81a0      	strh	r0, [r4, #12]
    53a8:	81e0      	strh	r0, [r4, #14]
    53aa:	f000 f955 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    53ae:	4606      	mov	r6, r0
    53b0:	f000 f94c 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    53b4:	4605      	mov	r5, r0
    53b6:	f005 fd87 	bl	aec8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    53ba:	f005 fadf 	bl	a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    53be:	f995 006e 	ldrsb.w	r0, [r5, #110]	; 0x6e
    53c2:	f005 fe05 	bl	afd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    53c6:	69e8      	ldr	r0, [r5, #28]
    53c8:	f005 fed8 	bl	b17c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    53cc:	6968      	ldr	r0, [r5, #20]
    53ce:	f005 fecb 	bl	b168 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    53d2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    53d6:	f005 ff01 	bl	b1dc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    53da:	f104 0038 	add.w	r0, r4, #56	; 0x38
    53de:	6840      	ldr	r0, [r0, #4]
    53e0:	f890 020c 	ldrb.w	r0, [r0, #524]	; 0x20c
    53e4:	b108      	cbz	r0, 53ea <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x76>
    53e6:	f005 fcef 	bl	adc8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    53ea:	f895 106b 	ldrb.w	r1, [r5, #107]	; 0x6b
    53ee:	2001      	movs	r0, #1
    53f0:	f005 fc2e 	bl	ac50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    53f4:	2800      	cmp	r0, #0
    53f6:	d074      	beq.n	54e2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    53f8:	483e      	ldr	r0, [pc, #248]	; (54f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    53fa:	f005 fc95 	bl	ad28 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    53fe:	8828      	ldrh	r0, [r5, #0]
    5400:	f7ff fcc2 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5404:	6320      	str	r0, [r4, #48]	; 0x30
    5406:	8828      	ldrh	r0, [r5, #0]
    5408:	f7ff fca8 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    540c:	6360      	str	r0, [r4, #52]	; 0x34
    540e:	f106 0080 	add.w	r0, r6, #128	; 0x80
    5412:	3680      	adds	r6, #128	; 0x80
    5414:	4938      	ldr	r1, [pc, #224]	; (54f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5416:	e896 108c 	ldmia.w	r6, {r2, r3, r7, ip}
    541a:	f101 0808 	add.w	r8, r1, #8
    541e:	3e80      	subs	r6, #128	; 0x80
    5420:	e888 108c 	stmia.w	r8, {r2, r3, r7, ip}
    5424:	6902      	ldr	r2, [r0, #16]
    5426:	f8c1 2021 	str.w	r2, [r1, #33]	; 0x21
    542a:	6940      	ldr	r0, [r0, #20]
    542c:	f8c1 0025 	str.w	r0, [r1, #37]	; 0x25
    5430:	f000 f972 	bl	5718 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12c>
    5434:	4601      	mov	r1, r0
    5436:	8f28      	ldrh	r0, [r5, #56]	; 0x38
    5438:	f008 faed 	bl	da16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    543c:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
    543e:	4281      	cmp	r1, r0
    5440:	d200      	bcs.n	5444 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd0>
    5442:	4608      	mov	r0, r1
    5444:	7220      	strb	r0, [r4, #8]
    5446:	46a0      	mov	r8, r4
    5448:	f895 106b 	ldrb.w	r1, [r5, #107]	; 0x6b
    544c:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
    544e:	7ef7      	ldrb	r7, [r6, #27]
    5450:	8fac      	ldrh	r4, [r5, #60]	; 0x3c
    5452:	2908      	cmp	r1, #8
    5454:	d104      	bne.n	5460 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5456:	e002      	b.n	545e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xea>
    5458:	f240 111d 	movw	r1, #285	; 0x11d
    545c:	e045      	b.n	54ea <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    545e:	2104      	movs	r1, #4
    5460:	f008 fad9 	bl	da16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5464:	b90f      	cbnz	r7, 546a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf6>
    5466:	1d00      	adds	r0, r0, #4
    5468:	b280      	uxth	r0, r0
    546a:	4284      	cmp	r4, r0
    546c:	d200      	bcs.n	5470 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    546e:	4620      	mov	r0, r4
    5470:	b2c4      	uxtb	r4, r0
    5472:	f888 4009 	strb.w	r4, [r8, #9]
    5476:	7ef1      	ldrb	r1, [r6, #27]
    5478:	2900      	cmp	r1, #0
    547a:	d001      	beq.n	5480 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    547c:	f04f 0104 	mov.w	r1, #4
    5480:	4421      	add	r1, r4
    5482:	f888 1007 	strb.w	r1, [r8, #7]
    5486:	d014      	beq.n	54b2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13e>
    5488:	481b      	ldr	r0, [pc, #108]	; (54f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    548a:	f04f 0701 	mov.w	r7, #1
    548e:	f100 0008 	add.w	r0, r0, #8
    5492:	7607      	strb	r7, [r0, #24]
    5494:	e9d6 121e 	ldrd	r1, r2, [r6, #120]	; 0x78
    5498:	e9c0 1204 	strd	r1, r2, [r0, #16]
    549c:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    54a0:	f008 f9be 	bl	d820 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    54a4:	4914      	ldr	r1, [pc, #80]	; (54f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    54a6:	4603      	mov	r3, r0
    54a8:	4622      	mov	r2, r4
    54aa:	3108      	adds	r1, #8
    54ac:	4638      	mov	r0, r7
    54ae:	f005 f9d1 	bl	a854 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    54b2:	2001      	movs	r0, #1
    54b4:	f000 fb88 	bl	5bc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>
    54b8:	4810      	ldr	r0, [pc, #64]	; (54fc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    54ba:	6800      	ldr	r0, [r0, #0]
    54bc:	2803      	cmp	r0, #3
    54be:	d012      	beq.n	54e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    54c0:	280b      	cmp	r0, #11
    54c2:	d010      	beq.n	54e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    54c4:	480c      	ldr	r0, [pc, #48]	; (54f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    54c6:	220e      	movs	r2, #14
    54c8:	2100      	movs	r1, #0
    54ca:	3052      	adds	r0, #82	; 0x52
    54cc:	f007 f85f 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    54d0:	4809      	ldr	r0, [pc, #36]	; (54f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    54d2:	89b1      	ldrh	r1, [r6, #12]
    54d4:	3052      	adds	r0, #82	; 0x52
    54d6:	8041      	strh	r1, [r0, #2]
    54d8:	8829      	ldrh	r1, [r5, #0]
    54da:	8001      	strh	r1, [r0, #0]
    54dc:	f896 102b 	ldrb.w	r1, [r6, #43]	; 0x2b
    54e0:	7101      	strb	r1, [r0, #4]
    54e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54e6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    54ea:	2027      	movs	r0, #39	; 0x27
    54ec:	f7ff f83e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54f0:	200000d4 	.word	0x200000d4
    54f4:	00005dc8 	.word	0x00005dc8
    54f8:	20000bd0 	.word	0x20000bd0
    54fc:	40001550 	.word	0x40001550

00005500 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5500:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5504:	468a      	mov	sl, r1
    5506:	4606      	mov	r6, r0
    5508:	f000 f8a6 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    550c:	4d2b      	ldr	r5, [pc, #172]	; (55bc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbc>)
    550e:	4604      	mov	r4, r0
    5510:	f04f 0800 	mov.w	r8, #0
    5514:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5516:	7847      	ldrb	r7, [r0, #1]
    5518:	b10e      	cbz	r6, 551e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1e>
    551a:	2e01      	cmp	r6, #1
    551c:	d101      	bne.n	5522 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x22>
    551e:	f885 8001 	strb.w	r8, [r5, #1]
    5522:	7868      	ldrb	r0, [r5, #1]
    5524:	f04f 0901 	mov.w	r9, #1
    5528:	b150      	cbz	r0, 5540 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x40>
    552a:	2801      	cmp	r0, #1
    552c:	d021      	beq.n	5572 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x72>
    552e:	2802      	cmp	r0, #2
    5530:	d02b      	beq.n	558a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    5532:	2803      	cmp	r0, #3
    5534:	d03a      	beq.n	55ac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5536:	f240 411d 	movw	r1, #1053	; 0x41d
    553a:	2027      	movs	r0, #39	; 0x27
    553c:	f7ff f816 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5540:	2e01      	cmp	r6, #1
    5542:	d028      	beq.n	5596 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5544:	f000 f8d4 	bl	56f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5548:	4669      	mov	r1, sp
    554a:	aa01      	add	r2, sp, #4
    554c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    554e:	f007 fdb6 	bl	d0be <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    5552:	9800      	ldr	r0, [sp, #0]
    5554:	f007 fd69 	bl	d02a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5558:	f8ca 0000 	str.w	r0, [sl]
    555c:	4639      	mov	r1, r7
    555e:	2201      	movs	r2, #1
    5560:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5562:	e00d      	b.n	5580 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x80>
    5564:	f884 8010 	strb.w	r8, [r4, #16]
    5568:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    556c:	f884 9010 	strb.w	r9, [r4, #16]
    5570:	e7fa      	b.n	5568 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    5572:	2e01      	cmp	r6, #1
    5574:	d00f      	beq.n	5596 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5576:	f000 f8bb 	bl	56f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    557a:	4639      	mov	r1, r7
    557c:	2200      	movs	r2, #0
    557e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5580:	f007 fd0a 	bl	cf98 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5584:	2e02      	cmp	r6, #2
    5586:	d106      	bne.n	5596 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5588:	e7ee      	b.n	5568 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    558a:	2e01      	cmp	r6, #1
    558c:	d003      	beq.n	5596 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    558e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5590:	f007 fe9e 	bl	d2d0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5594:	e7f6      	b.n	5584 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x84>
    5596:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    559a:	1c40      	adds	r0, r0, #1
    559c:	f141 0100 	adc.w	r1, r1, #0
    55a0:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    55a4:	7c20      	ldrb	r0, [r4, #16]
    55a6:	2801      	cmp	r0, #1
    55a8:	d1e0      	bne.n	556c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6c>
    55aa:	e7db      	b.n	5564 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    55ac:	2e01      	cmp	r6, #1
    55ae:	d0db      	beq.n	5568 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    55b0:	6b68      	ldr	r0, [r5, #52]	; 0x34
    55b2:	e8bd 47fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    55b6:	f007 be8b 	b.w	d2d0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    55ba:	0000      	.short	0x0000
    55bc:	200000d4 	.word	0x200000d4

000055c0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    55c0:	4802      	ldr	r0, [pc, #8]	; (55cc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    55c2:	89c0      	ldrh	r0, [r0, #14]
    55c4:	f3c0 2080 	ubfx	r0, r0, #10, #1
    55c8:	4770      	bx	lr
    55ca:	0000      	.short	0x0000
    55cc:	200000d4 	.word	0x200000d4

000055d0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    55d0:	4804      	ldr	r0, [pc, #16]	; (55e4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    55d2:	7800      	ldrb	r0, [r0, #0]
    55d4:	b108      	cbz	r0, 55da <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    55d6:	200c      	movs	r0, #12
    55d8:	4770      	bx	lr
    55da:	4903      	ldr	r1, [pc, #12]	; (55e8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    55dc:	2000      	movs	r0, #0
    55de:	7708      	strb	r0, [r1, #28]
    55e0:	4770      	bx	lr
    55e2:	0000      	.short	0x0000
    55e4:	200000d4 	.word	0x200000d4
    55e8:	20000c22 	.word	0x20000c22

000055ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    55ec:	480c      	ldr	r0, [pc, #48]	; (5620 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    55ee:	b510      	push	{r4, lr}
    55f0:	7801      	ldrb	r1, [r0, #0]
    55f2:	b149      	cbz	r1, 5608 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    55f4:	f100 0138 	add.w	r1, r0, #56	; 0x38
    55f8:	7800      	ldrb	r0, [r0, #0]
    55fa:	2802      	cmp	r0, #2
    55fc:	d008      	beq.n	5610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    55fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    5602:	2027      	movs	r0, #39	; 0x27
    5604:	f7fe ffb2 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    560c:	f000 b9f8 	b.w	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5610:	6848      	ldr	r0, [r1, #4]
    5612:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
    5616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    561a:	f005 bb8d 	b.w	ad38 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    561e:	0000      	.short	0x0000
    5620:	200000d4 	.word	0x200000d4
    5624:	4608      	mov	r0, r1
    5626:	2100      	movs	r1, #0
    5628:	7041      	strb	r1, [r0, #1]
    562a:	211c      	movs	r1, #28
    562c:	f800 1b04 	strb.w	r1, [r0], #4
    5630:	220e      	movs	r2, #14
    5632:	4901      	ldr	r1, [pc, #4]	; (5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    5634:	f006 bf31 	b.w	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5638:	20000c30 	.word	0x20000c30
    563c:	4a02      	ldr	r2, [pc, #8]	; (5648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    563e:	8993      	ldrh	r3, [r2, #12]
    5640:	4303      	orrs	r3, r0
    5642:	8193      	strh	r3, [r2, #12]
    5644:	6952      	ldr	r2, [r2, #20]
    5646:	4710      	bx	r2
    5648:	200000d4 	.word	0x200000d4
    564c:	4801      	ldr	r0, [pc, #4]	; (5654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    564e:	6840      	ldr	r0, [r0, #4]
    5650:	4770      	bx	lr
    5652:	0000      	.short	0x0000
    5654:	2000010c 	.word	0x2000010c
    5658:	4801      	ldr	r0, [pc, #4]	; (5660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    565a:	6840      	ldr	r0, [r0, #4]
    565c:	3080      	adds	r0, #128	; 0x80
    565e:	4770      	bx	lr
    5660:	2000010c 	.word	0x2000010c
    5664:	4a01      	ldr	r2, [pc, #4]	; (566c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    5666:	2100      	movs	r1, #0
    5668:	6952      	ldr	r2, [r2, #20]
    566a:	4710      	bx	r2
    566c:	200000d4 	.word	0x200000d4
    5670:	b570      	push	{r4, r5, r6, lr}
    5672:	4605      	mov	r5, r0
    5674:	2901      	cmp	r1, #1
    5676:	d818      	bhi.n	56aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5678:	4c12      	ldr	r4, [pc, #72]	; (56c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>)
    567a:	69a1      	ldr	r1, [r4, #24]
    567c:	4788      	blx	r1
    567e:	b1a0      	cbz	r0, 56aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5680:	7960      	ldrb	r0, [r4, #5]
    5682:	b990      	cbnz	r0, 56aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5684:	b9e5      	cbnz	r5, 56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd4>
    5686:	f104 0010 	add.w	r0, r4, #16
    568a:	7801      	ldrb	r1, [r0, #0]
    568c:	06c8      	lsls	r0, r1, #27
    568e:	d405      	bmi.n	569c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5690:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5692:	7800      	ldrb	r0, [r0, #0]
    5694:	06c0      	lsls	r0, r0, #27
    5696:	d401      	bmi.n	569c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5698:	2001      	movs	r0, #1
    569a:	e000      	b.n	569e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    569c:	2000      	movs	r0, #0
    569e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    56a0:	b92a      	cbnz	r2, 56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    56a2:	8962      	ldrh	r2, [r4, #10]
    56a4:	b11a      	cbz	r2, 56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    56a6:	06c9      	lsls	r1, r1, #27
    56a8:	d401      	bmi.n	56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    56aa:	2001      	movs	r0, #1
    56ac:	bd70      	pop	{r4, r5, r6, pc}
    56ae:	89a1      	ldrh	r1, [r4, #12]
    56b0:	078a      	lsls	r2, r1, #30
    56b2:	d503      	bpl.n	56bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    56b4:	6a22      	ldr	r2, [r4, #32]
    56b6:	78d2      	ldrb	r2, [r2, #3]
    56b8:	2a02      	cmp	r2, #2
    56ba:	d001      	beq.n	56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd4>
    56bc:	4308      	orrs	r0, r1
    56be:	d1f4      	bne.n	56aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    56c0:	2000      	movs	r0, #0
    56c2:	bd70      	pop	{r4, r5, r6, pc}
    56c4:	200000d4 	.word	0x200000d4
    56c8:	b530      	push	{r4, r5, lr}
    56ca:	4b08      	ldr	r3, [pc, #32]	; (56ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>)
    56cc:	88dd      	ldrh	r5, [r3, #6]
    56ce:	891c      	ldrh	r4, [r3, #8]
    56d0:	b12a      	cbz	r2, 56de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    56d2:	b908      	cbnz	r0, 56d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    56d4:	b905      	cbnz	r5, 56d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    56d6:	b114      	cbz	r4, 56de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    56d8:	8958      	ldrh	r0, [r3, #10]
    56da:	1c40      	adds	r0, r0, #1
    56dc:	8158      	strh	r0, [r3, #10]
    56de:	b111      	cbz	r1, 56e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    56e0:	1c6d      	adds	r5, r5, #1
    56e2:	80dd      	strh	r5, [r3, #6]
    56e4:	bd30      	pop	{r4, r5, pc}
    56e6:	1c64      	adds	r4, r4, #1
    56e8:	811c      	strh	r4, [r3, #8]
    56ea:	bd30      	pop	{r4, r5, pc}
    56ec:	20000c22 	.word	0x20000c22
    56f0:	b510      	push	{r4, lr}
    56f2:	4c08      	ldr	r4, [pc, #32]	; (5714 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>)
    56f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    56f6:	b138      	cbz	r0, 5708 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    56f8:	8962      	ldrh	r2, [r4, #10]
    56fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    56fc:	1cd2      	adds	r2, r2, #3
    56fe:	f006 fecc 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5702:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5704:	6260      	str	r0, [r4, #36]	; 0x24
    5706:	bd10      	pop	{r4, pc}
    5708:	f240 4163 	movw	r1, #1123	; 0x463
    570c:	2027      	movs	r0, #39	; 0x27
    570e:	f7fe ff2d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5712:	0000      	.short	0x0000
    5714:	200000d4 	.word	0x200000d4
    5718:	b510      	push	{r4, lr}
    571a:	f7ff ff97 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    571e:	4604      	mov	r4, r0
    5720:	f7ff ff9a 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5724:	4602      	mov	r2, r0
    5726:	7d41      	ldrb	r1, [r0, #21]
    5728:	4816      	ldr	r0, [pc, #88]	; (5784 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>)
    572a:	2926      	cmp	r1, #38	; 0x26
    572c:	d010      	beq.n	5750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    572e:	2927      	cmp	r1, #39	; 0x27
    5730:	d00e      	beq.n	5750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    5732:	7d92      	ldrb	r2, [r2, #22]
    5734:	2a26      	cmp	r2, #38	; 0x26
    5736:	d00b      	beq.n	5750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    5738:	2921      	cmp	r1, #33	; 0x21
    573a:	d00d      	beq.n	5758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    573c:	2922      	cmp	r1, #34	; 0x22
    573e:	d00b      	beq.n	5758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5740:	2a24      	cmp	r2, #36	; 0x24
    5742:	d00f      	beq.n	5764 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    5744:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5748:	2804      	cmp	r0, #4
    574a:	d100      	bne.n	574e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x162>
    574c:	2008      	movs	r0, #8
    574e:	bd10      	pop	{r4, pc}
    5750:	6840      	ldr	r0, [r0, #4]
    5752:	f890 12be 	ldrb.w	r1, [r0, #702]	; 0x2be
    5756:	e00e      	b.n	5776 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18a>
    5758:	2a24      	cmp	r2, #36	; 0x24
    575a:	d003      	beq.n	5764 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    575c:	6840      	ldr	r0, [r0, #4]
    575e:	f890 0136 	ldrb.w	r0, [r0, #310]	; 0x136
    5762:	e005      	b.n	5770 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    5764:	6841      	ldr	r1, [r0, #4]
    5766:	f891 0136 	ldrb.w	r0, [r1, #310]	; 0x136
    576a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    576e:	4008      	ands	r0, r1
    5770:	f008 f84c 	bl	d80c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5774:	4601      	mov	r1, r0
    5776:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    577a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    577e:	f008 b85d 	b.w	d83c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5782:	0000      	.short	0x0000
    5784:	2000010c 	.word	0x2000010c
    5788:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    578c:	468b      	mov	fp, r1
    578e:	4607      	mov	r7, r0
    5790:	f7ff ff62 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5794:	f04f 0900 	mov.w	r9, #0
    5798:	4c69      	ldr	r4, [pc, #420]	; (5940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    579a:	4606      	mov	r6, r0
    579c:	f88d 9004 	strb.w	r9, [sp, #4]
    57a0:	f8cd 9008 	str.w	r9, [sp, #8]
    57a4:	f8cd 9000 	str.w	r9, [sp]
    57a8:	7820      	ldrb	r0, [r4, #0]
    57aa:	464d      	mov	r5, r9
    57ac:	2802      	cmp	r0, #2
    57ae:	d004      	beq.n	57ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ce>
    57b0:	f240 41ee 	movw	r1, #1262	; 0x4ee
    57b4:	2027      	movs	r0, #39	; 0x27
    57b6:	f7fe fed9 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57ba:	7ba0      	ldrb	r0, [r4, #14]
    57bc:	0640      	lsls	r0, r0, #25
    57be:	d406      	bmi.n	57ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e2>
    57c0:	2040      	movs	r0, #64	; 0x40
    57c2:	f7ff ff4f 	bl	5664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    57c6:	89e0      	ldrh	r0, [r4, #14]
    57c8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    57cc:	81e0      	strh	r0, [r4, #14]
    57ce:	7ef0      	ldrb	r0, [r6, #27]
    57d0:	b3df      	cbz	r7, 584a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25e>
    57d2:	b180      	cbz	r0, 57f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57d4:	f005 f90c 	bl	a9f0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    57d8:	f005 f8e6 	bl	a9a8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    57dc:	b958      	cbnz	r0, 57f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57de:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57e0:	7841      	ldrb	r1, [r0, #1]
    57e2:	b141      	cbz	r1, 57f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57e4:	7800      	ldrb	r0, [r0, #0]
    57e6:	7c31      	ldrb	r1, [r6, #16]
    57e8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    57ec:	4288      	cmp	r0, r1
    57ee:	d102      	bne.n	57f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    57f0:	2001      	movs	r0, #1
    57f2:	70a0      	strb	r0, [r4, #2]
    57f4:	e0a0      	b.n	5938 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    57f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57f8:	7841      	ldrb	r1, [r0, #1]
    57fa:	8161      	strh	r1, [r4, #10]
    57fc:	b121      	cbz	r1, 5808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    57fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5800:	f007 fd33 	bl	d26a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5804:	62a0      	str	r0, [r4, #40]	; 0x28
    5806:	e000      	b.n	580a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21e>
    5808:	62a5      	str	r5, [r4, #40]	; 0x28
    580a:	89e0      	ldrh	r0, [r4, #14]
    580c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5810:	81e0      	strh	r0, [r4, #14]
    5812:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5814:	7bf1      	ldrb	r1, [r6, #15]
    5816:	7800      	ldrb	r0, [r0, #0]
    5818:	f3c0 0080 	ubfx	r0, r0, #2, #1
    581c:	4288      	cmp	r0, r1
    581e:	d007      	beq.n	5830 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    5820:	a802      	add	r0, sp, #8
    5822:	f000 f983 	bl	5b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5826:	89e0      	ldrh	r0, [r4, #14]
    5828:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    582c:	81e0      	strh	r0, [r4, #14]
    582e:	e001      	b.n	5834 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x248>
    5830:	f04f 0901 	mov.w	r9, #1
    5834:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5836:	7c31      	ldrb	r1, [r6, #16]
    5838:	7800      	ldrb	r0, [r0, #0]
    583a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    583e:	4288      	cmp	r0, r1
    5840:	d10e      	bne.n	5860 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x274>
    5842:	a801      	add	r0, sp, #4
    5844:	f000 f934 	bl	5ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c4>
    5848:	e00a      	b.n	5860 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x274>
    584a:	e7ff      	b.n	584c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x260>
    584c:	b108      	cbz	r0, 5852 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x266>
    584e:	f005 f8c9 	bl	a9e4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5852:	78e0      	ldrb	r0, [r4, #3]
    5854:	1c40      	adds	r0, r0, #1
    5856:	70e0      	strb	r0, [r4, #3]
    5858:	89e0      	ldrh	r0, [r4, #14]
    585a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    585e:	81e0      	strh	r0, [r4, #14]
    5860:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 5940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5864:	7eb0      	ldrb	r0, [r6, #26]
    5866:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    586a:	b188      	cbz	r0, 5890 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a4>
    586c:	f7ff feee 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5870:	4934      	ldr	r1, [pc, #208]	; (5944 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>)
    5872:	760d      	strb	r5, [r1, #24]
    5874:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
    5878:	e9c1 2304 	strd	r2, r3, [r1, #16]
    587c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5880:	f007 ffce 	bl	d820 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5884:	4603      	mov	r3, r0
    5886:	22fb      	movs	r2, #251	; 0xfb
    5888:	492e      	ldr	r1, [pc, #184]	; (5944 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>)
    588a:	4628      	mov	r0, r5
    588c:	f004 ffe2 	bl	a854 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5890:	f04f 0800 	mov.w	r8, #0
    5894:	f1bb 0f00 	cmp.w	fp, #0
    5898:	d104      	bne.n	58a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b8>
    589a:	78e1      	ldrb	r1, [r4, #3]
    589c:	2001      	movs	r0, #1
    589e:	f7ff fee7 	bl	5670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    58a2:	b1b0      	cbz	r0, 58d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e6>
    58a4:	f005 fc4c 	bl	b140 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    58a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    58ac:	b118      	cbz	r0, 58b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    58ae:	4669      	mov	r1, sp
    58b0:	2000      	movs	r0, #0
    58b2:	f7ff fe25 	bl	5500 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    58b6:	89b0      	ldrh	r0, [r6, #12]
    58b8:	464a      	mov	r2, r9
    58ba:	4639      	mov	r1, r7
    58bc:	f7ff ff04 	bl	56c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    58c0:	b127      	cbz	r7, 58cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    58c2:	481f      	ldr	r0, [pc, #124]	; (5940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    58c4:	70e5      	strb	r5, [r4, #3]
    58c6:	3038      	adds	r0, #56	; 0x38
    58c8:	f008 fdbf 	bl	e44a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    58cc:	f04f 0801 	mov.w	r8, #1
    58d0:	e01b      	b.n	590a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31e>
    58d2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    58d6:	b118      	cbz	r0, 58e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    58d8:	4669      	mov	r1, sp
    58da:	2001      	movs	r0, #1
    58dc:	f7ff fe10 	bl	5500 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    58e0:	2000      	movs	r0, #0
    58e2:	f000 f9ad 	bl	5c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>
    58e6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    58ea:	b118      	cbz	r0, 58f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    58ec:	4669      	mov	r1, sp
    58ee:	2002      	movs	r0, #2
    58f0:	f7ff fe06 	bl	5500 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    58f4:	89b0      	ldrh	r0, [r6, #12]
    58f6:	464a      	mov	r2, r9
    58f8:	4639      	mov	r1, r7
    58fa:	f7ff fee5 	bl	56c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    58fe:	b127      	cbz	r7, 590a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31e>
    5900:	480f      	ldr	r0, [pc, #60]	; (5940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    5902:	70e5      	strb	r5, [r4, #3]
    5904:	3038      	adds	r0, #56	; 0x38
    5906:	f008 fda0 	bl	e44a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    590a:	9802      	ldr	r0, [sp, #8]
    590c:	b140      	cbz	r0, 5920 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>
    590e:	f007 fb8c 	bl	d02a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5912:	f8da 1004 	ldr.w	r1, [sl, #4]
    5916:	1c40      	adds	r0, r0, #1
    5918:	7205      	strb	r5, [r0, #8]
    591a:	220d      	movs	r2, #13
    591c:	f000 fd98 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5920:	9800      	ldr	r0, [sp, #0]
    5922:	b130      	cbz	r0, 5932 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x346>
    5924:	f8da 1004 	ldr.w	r1, [sl, #4]
    5928:	7205      	strb	r5, [r0, #8]
    592a:	2227      	movs	r2, #39	; 0x27
    592c:	9800      	ldr	r0, [sp, #0]
    592e:	f000 fd8f 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5932:	f1b8 0f00 	cmp.w	r8, #0
    5936:	d001      	beq.n	593c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    5938:	f000 f862 	bl	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    593c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5940:	200000d4 	.word	0x200000d4
    5944:	20000bd8 	.word	0x20000bd8
    5948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    594c:	460f      	mov	r7, r1
    594e:	4680      	mov	r8, r0
    5950:	f7ff fe82 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5954:	4d28      	ldr	r5, [pc, #160]	; (59f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>)
    5956:	4604      	mov	r4, r0
    5958:	7828      	ldrb	r0, [r5, #0]
    595a:	2801      	cmp	r0, #1
    595c:	d004      	beq.n	5968 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x37c>
    595e:	f240 4172 	movw	r1, #1138	; 0x472
    5962:	2027      	movs	r0, #39	; 0x27
    5964:	f7fe fe02 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5968:	7a21      	ldrb	r1, [r4, #8]
    596a:	2000      	movs	r0, #0
    596c:	2601      	movs	r6, #1
    596e:	b129      	cbz	r1, 597c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x390>
    5970:	7220      	strb	r0, [r4, #8]
    5972:	2100      	movs	r1, #0
    5974:	2004      	movs	r0, #4
    5976:	f7ff fe61 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    597a:	72a6      	strb	r6, [r4, #10]
    597c:	6a29      	ldr	r1, [r5, #32]
    597e:	7808      	ldrb	r0, [r1, #0]
    5980:	43c0      	mvns	r0, r0
    5982:	0780      	lsls	r0, r0, #30
    5984:	d109      	bne.n	599a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ae>
    5986:	7ba0      	ldrb	r0, [r4, #14]
    5988:	bb78      	cbnz	r0, 59ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fe>
    598a:	2002      	movs	r0, #2
    598c:	f7ff fe56 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5990:	6a28      	ldr	r0, [r5, #32]
    5992:	7800      	ldrb	r0, [r0, #0]
    5994:	43c0      	mvns	r0, r0
    5996:	0780      	lsls	r0, r0, #30
    5998:	d027      	beq.n	59ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fe>
    599a:	6a28      	ldr	r0, [r5, #32]
    599c:	7840      	ldrb	r0, [r0, #1]
    599e:	b110      	cbz	r0, 59a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ba>
    59a0:	2002      	movs	r0, #2
    59a2:	73a0      	strb	r0, [r4, #14]
    59a4:	e000      	b.n	59a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3bc>
    59a6:	73a6      	strb	r6, [r4, #14]
    59a8:	7ee0      	ldrb	r0, [r4, #27]
    59aa:	b190      	cbz	r0, 59d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e6>
    59ac:	f7ff fe4e 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    59b0:	4912      	ldr	r1, [pc, #72]	; (59fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>)
    59b2:	7a6d      	ldrb	r5, [r5, #9]
    59b4:	760e      	strb	r6, [r1, #24]
    59b6:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
    59ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
    59be:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    59c2:	f007 ff2d 	bl	d820 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    59c6:	4603      	mov	r3, r0
    59c8:	462a      	mov	r2, r5
    59ca:	490c      	ldr	r1, [pc, #48]	; (59fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>)
    59cc:	4630      	mov	r0, r6
    59ce:	f004 ff41 	bl	a854 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    59d2:	ea37 0708 	bics.w	r7, r7, r8
    59d6:	d004      	beq.n	59e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f6>
    59d8:	2100      	movs	r1, #0
    59da:	4608      	mov	r0, r1
    59dc:	f7ff fe48 	bl	5670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    59e0:	b128      	cbz	r0, 59ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    59e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    59e6:	f000 b80b 	b.w	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    59ea:	2003      	movs	r0, #3
    59ec:	e7d9      	b.n	59a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    59ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    59f2:	2000      	movs	r0, #0
    59f4:	f000 b8e8 	b.w	5bc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>
    59f8:	200000d4 	.word	0x200000d4
    59fc:	20000bd8 	.word	0x20000bd8
    5a00:	b510      	push	{r4, lr}
    5a02:	f005 f89b 	bl	ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5a06:	f004 ffb9 	bl	a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5a0a:	4c0d      	ldr	r4, [pc, #52]	; (5a40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>)
    5a0c:	89e0      	ldrh	r0, [r4, #14]
    5a0e:	f7ff fe29 	bl	5664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5a12:	480c      	ldr	r0, [pc, #48]	; (5a44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    5a14:	7f00      	ldrb	r0, [r0, #28]
    5a16:	b158      	cbz	r0, 5a30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    5a18:	490a      	ldr	r1, [pc, #40]	; (5a44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    5a1a:	220e      	movs	r2, #14
    5a1c:	f101 000e 	add.w	r0, r1, #14
    5a20:	f006 fd3b 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a24:	4807      	ldr	r0, [pc, #28]	; (5a44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    5a26:	2221      	movs	r2, #33	; 0x21
    5a28:	4907      	ldr	r1, [pc, #28]	; (5a48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>)
    5a2a:	301d      	adds	r0, #29
    5a2c:	f000 fd10 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5a30:	69e2      	ldr	r2, [r4, #28]
    5a32:	7961      	ldrb	r1, [r4, #5]
    5a34:	78a0      	ldrb	r0, [r4, #2]
    5a36:	4790      	blx	r2
    5a38:	2000      	movs	r0, #0
    5a3a:	7020      	strb	r0, [r4, #0]
    5a3c:	bd10      	pop	{r4, pc}
    5a3e:	0000      	.short	0x0000
    5a40:	200000d4 	.word	0x200000d4
    5a44:	20000c22 	.word	0x20000c22
    5a48:	00005625 	.word	0x00005625
    5a4c:	4808      	ldr	r0, [pc, #32]	; (5a70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x484>)
    5a4e:	b510      	push	{r4, lr}
    5a50:	7800      	ldrb	r0, [r0, #0]
    5a52:	2802      	cmp	r0, #2
    5a54:	d004      	beq.n	5a60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x474>
    5a56:	f240 211e 	movw	r1, #542	; 0x21e
    5a5a:	2027      	movs	r0, #39	; 0x27
    5a5c:	f7fe fd86 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a60:	4904      	ldr	r1, [pc, #16]	; (5a74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x488>)
    5a62:	2001      	movs	r0, #1
    5a64:	7308      	strb	r0, [r1, #12]
    5a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5a6a:	f7ff bfc9 	b.w	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5a6e:	0000      	.short	0x0000
    5a70:	200000d4 	.word	0x200000d4
    5a74:	20000c22 	.word	0x20000c22
    5a78:	4b0c      	ldr	r3, [pc, #48]	; (5aac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>)
    5a7a:	b430      	push	{r4, r5}
    5a7c:	79db      	ldrb	r3, [r3, #7]
    5a7e:	b93a      	cbnz	r2, 5a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    5a80:	2bff      	cmp	r3, #255	; 0xff
    5a82:	d105      	bne.n	5a90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    5a84:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5a88:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5a8c:	42a2      	cmp	r2, r4
    5a8e:	d00a      	beq.n	5aa6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ba>
    5a90:	b129      	cbz	r1, 5a9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b2>
    5a92:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5a96:	bc30      	pop	{r4, r5}
    5a98:	4618      	mov	r0, r3
    5a9a:	f005 bb75 	b.w	b188 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    5a9e:	23ff      	movs	r3, #255	; 0xff
    5aa0:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5aa4:	e7f7      	b.n	5a96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4aa>
    5aa6:	bc30      	pop	{r4, r5}
    5aa8:	4770      	bx	lr
    5aaa:	0000      	.short	0x0000
    5aac:	200000d4 	.word	0x200000d4
    5ab0:	b570      	push	{r4, r5, r6, lr}
    5ab2:	4606      	mov	r6, r0
    5ab4:	f7ff fdd0 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ab8:	4a1b      	ldr	r2, [pc, #108]	; (5b28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>)
    5aba:	4604      	mov	r4, r0
    5abc:	2501      	movs	r5, #1
    5abe:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5ac0:	7808      	ldrb	r0, [r1, #0]
    5ac2:	f000 0003 	and.w	r0, r0, #3
    5ac6:	2801      	cmp	r0, #1
    5ac8:	d00c      	beq.n	5ae4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>
    5aca:	2802      	cmp	r0, #2
    5acc:	d00a      	beq.n	5ae4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>
    5ace:	2803      	cmp	r0, #3
    5ad0:	d121      	bne.n	5b16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5ad2:	7225      	strb	r5, [r4, #8]
    5ad4:	89d0      	ldrh	r0, [r2, #14]
    5ad6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    5ada:	81d0      	strh	r0, [r2, #14]
    5adc:	2001      	movs	r0, #1
    5ade:	f7ff fdad 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5ae2:	e018      	b.n	5b16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5ae4:	7848      	ldrb	r0, [r1, #1]
    5ae6:	b1b0      	cbz	r0, 5b16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5ae8:	89d1      	ldrh	r1, [r2, #14]
    5aea:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    5aee:	81d1      	strh	r1, [r2, #14]
    5af0:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5af2:	2900      	cmp	r1, #0
    5af4:	d009      	beq.n	5b0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51e>
    5af6:	28fb      	cmp	r0, #251	; 0xfb
    5af8:	d808      	bhi.n	5b0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x520>
    5afa:	7990      	ldrb	r0, [r2, #6]
    5afc:	b120      	cbz	r0, 5b08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    5afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b02:	2020      	movs	r0, #32
    5b04:	f7ff bdae 	b.w	5664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5b08:	7035      	strb	r5, [r6, #0]
    5b0a:	bd70      	pop	{r4, r5, r6, pc}
    5b0c:	7950      	ldrb	r0, [r2, #5]
    5b0e:	f040 0010 	orr.w	r0, r0, #16
    5b12:	7150      	strb	r0, [r2, #5]
    5b14:	bd70      	pop	{r4, r5, r6, pc}
    5b16:	7c20      	ldrb	r0, [r4, #16]
    5b18:	2801      	cmp	r0, #1
    5b1a:	d001      	beq.n	5b20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x534>
    5b1c:	7425      	strb	r5, [r4, #16]
    5b1e:	bd70      	pop	{r4, r5, r6, pc}
    5b20:	2000      	movs	r0, #0
    5b22:	7420      	strb	r0, [r4, #16]
    5b24:	bd70      	pop	{r4, r5, r6, pc}
    5b26:	0000      	.short	0x0000
    5b28:	200000d4 	.word	0x200000d4
    5b2c:	b570      	push	{r4, r5, r6, lr}
    5b2e:	4605      	mov	r5, r0
    5b30:	f7ff fd92 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5b34:	4604      	mov	r4, r0
    5b36:	7b80      	ldrb	r0, [r0, #14]
    5b38:	2800      	cmp	r0, #0
    5b3a:	d02d      	beq.n	5b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ac>
    5b3c:	2802      	cmp	r0, #2
    5b3e:	d10c      	bne.n	5b5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56e>
    5b40:	481b      	ldr	r0, [pc, #108]	; (5bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c4>)
    5b42:	4629      	mov	r1, r5
    5b44:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5b46:	f007 f9ff 	bl	cf48 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5b4a:	b330      	cbz	r0, 5b9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ae>
    5b4c:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5b50:	1c40      	adds	r0, r0, #1
    5b52:	f141 0100 	adc.w	r1, r1, #0
    5b56:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5b5a:	2500      	movs	r5, #0
    5b5c:	73a5      	strb	r5, [r4, #14]
    5b5e:	7aa0      	ldrb	r0, [r4, #10]
    5b60:	b120      	cbz	r0, 5b6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>
    5b62:	72a5      	strb	r5, [r4, #10]
    5b64:	2100      	movs	r1, #0
    5b66:	2010      	movs	r0, #16
    5b68:	f7ff fd68 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5b6c:	7a60      	ldrb	r0, [r4, #9]
    5b6e:	b170      	cbz	r0, 5b8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a2>
    5b70:	7265      	strb	r5, [r4, #9]
    5b72:	f7ff fb21 	bl	51b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5b76:	b198      	cbz	r0, 5ba0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    5b78:	2100      	movs	r1, #0
    5b7a:	2008      	movs	r0, #8
    5b7c:	f7ff fd5e 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5b80:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    5b84:	1c40      	adds	r0, r0, #1
    5b86:	f141 0100 	adc.w	r1, r1, #0
    5b8a:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    5b8e:	7be0      	ldrb	r0, [r4, #15]
    5b90:	2801      	cmp	r0, #1
    5b92:	d00a      	beq.n	5baa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5b94:	2001      	movs	r0, #1
    5b96:	73e0      	strb	r0, [r4, #15]
    5b98:	bd70      	pop	{r4, r5, r6, pc}
    5b9a:	f240 31b9 	movw	r1, #953	; 0x3b9
    5b9e:	e001      	b.n	5ba4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    5ba0:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5ba4:	2027      	movs	r0, #39	; 0x27
    5ba6:	f7fe fce1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5baa:	73e5      	strb	r5, [r4, #15]
    5bac:	bd70      	pop	{r4, r5, r6, pc}
    5bae:	0000      	.short	0x0000
    5bb0:	200000d4 	.word	0x200000d4
    5bb4:	4803      	ldr	r0, [pc, #12]	; (5bc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>)
    5bb6:	7800      	ldrb	r0, [r0, #0]
    5bb8:	2800      	cmp	r0, #0
    5bba:	d001      	beq.n	5bc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>
    5bbc:	f7ff bf20 	b.w	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5bc0:	4770      	bx	lr
    5bc2:	0000      	.short	0x0000
    5bc4:	200000d4 	.word	0x200000d4
    5bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bcc:	4606      	mov	r6, r0
    5bce:	f7ff fd3d 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5bd2:	4680      	mov	r8, r0
    5bd4:	f7ff fd40 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5bd8:	4c16      	ldr	r4, [pc, #88]	; (5c34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x648>)
    5bda:	4605      	mov	r5, r0
    5bdc:	4632      	mov	r2, r6
    5bde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5be0:	6260      	str	r0, [r4, #36]	; 0x24
    5be2:	2101      	movs	r1, #1
    5be4:	4640      	mov	r0, r8
    5be6:	f7ff ff47 	bl	5a78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48c>
    5bea:	7ee8      	ldrb	r0, [r5, #27]
    5bec:	2700      	movs	r7, #0
    5bee:	b170      	cbz	r0, 5c0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x622>
    5bf0:	4811      	ldr	r0, [pc, #68]	; (5c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64c>)
    5bf2:	f005 fa0f 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5bf6:	4811      	ldr	r0, [pc, #68]	; (5c3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x650>)
    5bf8:	2101      	movs	r1, #1
    5bfa:	7601      	strb	r1, [r0, #24]
    5bfc:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    5c00:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5c04:	490c      	ldr	r1, [pc, #48]	; (5c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64c>)
    5c06:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c08:	f004 fe76 	bl	a8f8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    5c0c:	e004      	b.n	5c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62c>
    5c0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c10:	f005 fa00 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5c14:	f004 feb2 	bl	a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5c18:	b916      	cbnz	r6, 5c20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x634>
    5c1a:	4638      	mov	r0, r7
    5c1c:	f005 f8b0 	bl	ad80 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5c20:	2100      	movs	r1, #0
    5c22:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5c26:	4608      	mov	r0, r1
    5c28:	f005 fa6c 	bl	b104 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5c2c:	2002      	movs	r0, #2
    5c2e:	7020      	strb	r0, [r4, #0]
    5c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c34:	200000d4 	.word	0x200000d4
    5c38:	20000ad0 	.word	0x20000ad0
    5c3c:	20000bd8 	.word	0x20000bd8
    5c40:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5c44:	4604      	mov	r4, r0
    5c46:	f7ff fd07 	bl	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5c4a:	4605      	mov	r5, r0
    5c4c:	f7ff fcfe 	bl	564c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5c50:	2700      	movs	r7, #0
    5c52:	4606      	mov	r6, r0
    5c54:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    5c58:	f88d 7000 	strb.w	r7, [sp]
    5c5c:	4622      	mov	r2, r4
    5c5e:	4639      	mov	r1, r7
    5c60:	f7ff ff0a 	bl	5a78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48c>
    5c64:	7ba8      	ldrb	r0, [r5, #14]
    5c66:	f04f 0801 	mov.w	r8, #1
    5c6a:	f1a9 0420 	sub.w	r4, r9, #32
    5c6e:	b140      	cbz	r0, 5c82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x696>
    5c70:	2801      	cmp	r0, #1
    5c72:	d020      	beq.n	5cb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    5c74:	2802      	cmp	r0, #2
    5c76:	d02f      	beq.n	5cd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    5c78:	2803      	cmp	r0, #3
    5c7a:	d03b      	beq.n	5cf4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x708>
    5c7c:	f240 21d5 	movw	r1, #725	; 0x2d5
    5c80:	e057      	b.n	5d32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    5c82:	7a20      	ldrb	r0, [r4, #8]
    5c84:	2150      	movs	r1, #80	; 0x50
    5c86:	f8ad 0004 	strh.w	r0, [sp, #4]
    5c8a:	5388      	strh	r0, [r1, r6]
    5c8c:	4648      	mov	r0, r9
    5c8e:	f7ff fabd 	bl	520c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5c92:	b130      	cbz	r0, 5ca2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b6>
    5c94:	2080      	movs	r0, #128	; 0x80
    5c96:	6a21      	ldr	r1, [r4, #32]
    5c98:	f7ff fcd0 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5c9c:	f885 8009 	strb.w	r8, [r5, #9]
    5ca0:	e02c      	b.n	5cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5ca2:	466a      	mov	r2, sp
    5ca4:	a901      	add	r1, sp, #4
    5ca6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5ca8:	f007 fdd2 	bl	d850 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5cac:	6220      	str	r0, [r4, #32]
    5cae:	b110      	cbz	r0, 5cb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    5cb0:	f895 1053 	ldrb.w	r1, [r5, #83]	; 0x53
    5cb4:	b111      	cbz	r1, 5cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    5cb6:	4842      	ldr	r0, [pc, #264]	; (5dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d4>)
    5cb8:	6220      	str	r0, [r4, #32]
    5cba:	e01f      	b.n	5cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5cbc:	f89d 1000 	ldrb.w	r1, [sp]
    5cc0:	b921      	cbnz	r1, 5ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e0>
    5cc2:	8007      	strh	r7, [r0, #0]
    5cc4:	7087      	strb	r7, [r0, #2]
    5cc6:	2101      	movs	r1, #1
    5cc8:	f008 f943 	bl	df52 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5ccc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5cd0:	6a20      	ldr	r0, [r4, #32]
    5cd2:	f008 f8c6 	bl	de62 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    5cd6:	e011      	b.n	5cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5cd8:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    5cdc:	f8ad 0004 	strh.w	r0, [sp, #4]
    5ce0:	466a      	mov	r2, sp
    5ce2:	a901      	add	r1, sp, #4
    5ce4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5ce6:	f007 fdb3 	bl	d850 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5cea:	6220      	str	r0, [r4, #32]
    5cec:	b930      	cbnz	r0, 5cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5cee:	f240 21bf 	movw	r1, #703	; 0x2bf
    5cf2:	e01e      	b.n	5d32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    5cf4:	4648      	mov	r0, r9
    5cf6:	f7ff fa89 	bl	520c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5cfa:	b1c0      	cbz	r0, 5d2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    5cfc:	6a20      	ldr	r0, [r4, #32]
    5cfe:	2308      	movs	r3, #8
    5d00:	7801      	ldrb	r1, [r0, #0]
    5d02:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    5d06:	7001      	strb	r1, [r0, #0]
    5d08:	7bea      	ldrb	r2, [r5, #15]
    5d0a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5d0e:	4311      	orrs	r1, r2
    5d10:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    5d14:	7001      	strb	r1, [r0, #0]
    5d16:	7c2a      	ldrb	r2, [r5, #16]
    5d18:	2304      	movs	r3, #4
    5d1a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5d1e:	4311      	orrs	r1, r2
    5d20:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5d24:	7001      	strb	r1, [r0, #0]
    5d26:	43c9      	mvns	r1, r1
    5d28:	0789      	lsls	r1, r1, #30
    5d2a:	d005      	beq.n	5d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74c>
    5d2c:	e007      	b.n	5d3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5d2e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
    5d32:	2027      	movs	r0, #39	; 0x27
    5d34:	f7fe fc1a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d38:	78c0      	ldrb	r0, [r0, #3]
    5d3a:	2802      	cmp	r0, #2
    5d3c:	d00f      	beq.n	5d5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x772>
    5d3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5d40:	f007 fa00 	bl	d144 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5d44:	b108      	cbz	r0, 5d4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    5d46:	2101      	movs	r1, #1
    5d48:	e00a      	b.n	5d60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x774>
    5d4a:	6a20      	ldr	r0, [r4, #32]
    5d4c:	7800      	ldrb	r0, [r0, #0]
    5d4e:	43c0      	mvns	r0, r0
    5d50:	0780      	lsls	r0, r0, #30
    5d52:	d004      	beq.n	5d5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x772>
    5d54:	f7ff fa18 	bl	5188 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5d58:	f080 0101 	eor.w	r1, r0, #1
    5d5c:	e000      	b.n	5d60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x774>
    5d5e:	2100      	movs	r1, #0
    5d60:	6a20      	ldr	r0, [r4, #32]
    5d62:	7802      	ldrb	r2, [r0, #0]
    5d64:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5d68:	7001      	strb	r1, [r0, #0]
    5d6a:	7ea9      	ldrb	r1, [r5, #26]
    5d6c:	b181      	cbz	r1, 5d90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    5d6e:	7841      	ldrb	r1, [r0, #1]
    5d70:	b171      	cbz	r1, 5d90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    5d72:	4814      	ldr	r0, [pc, #80]	; (5dc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d8>)
    5d74:	f005 f94e 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5d78:	4811      	ldr	r0, [pc, #68]	; (5dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d4>)
    5d7a:	3828      	subs	r0, #40	; 0x28
    5d7c:	7607      	strb	r7, [r0, #24]
    5d7e:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    5d82:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5d86:	480f      	ldr	r0, [pc, #60]	; (5dc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d8>)
    5d88:	6a21      	ldr	r1, [r4, #32]
    5d8a:	f004 fdb5 	bl	a8f8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    5d8e:	e003      	b.n	5d98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>
    5d90:	f005 f940 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5d94:	f004 fdf2 	bl	a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5d98:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    5d9c:	2101      	movs	r1, #1
    5d9e:	2000      	movs	r0, #0
    5da0:	f005 f9b0 	bl	b104 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5da4:	f884 8004 	strb.w	r8, [r4, #4]
    5da8:	6a21      	ldr	r1, [r4, #32]
    5daa:	880a      	ldrh	r2, [r1, #0]
    5dac:	8222      	strh	r2, [r4, #16]
    5dae:	7889      	ldrb	r1, [r1, #2]
    5db0:	74a1      	strb	r1, [r4, #18]
    5db2:	f884 8000 	strb.w	r8, [r4]
    5db6:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5dba:	0000      	.short	0x0000
    5dbc:	200000f4 	.word	0x200000f4
    5dc0:	20000c00 	.word	0x20000c00
    5dc4:	20000ad0 	.word	0x20000ad0
    5dc8:	00005a4d 	.word	0x00005a4d
    5dcc:	00005789 	.word	0x00005789
    5dd0:	00005949 	.word	0x00005949
    5dd4:	00005bb5 	.word	0x00005bb5

00005dd8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5dd8:	4800      	ldr	r0, [pc, #0]	; (5ddc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5dda:	4770      	bx	lr
    5ddc:	20001591 	.word	0x20001591

00005de0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5de0:	4904      	ldr	r1, [pc, #16]	; (5df4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5de2:	788a      	ldrb	r2, [r1, #2]
    5de4:	4282      	cmp	r2, r0
    5de6:	d903      	bls.n	5df0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5de8:	4408      	add	r0, r1
    5dea:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5dee:	4770      	bx	lr
    5df0:	2000      	movs	r0, #0
    5df2:	4770      	bx	lr
    5df4:	200013be 	.word	0x200013be

00005df8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5df8:	4904      	ldr	r1, [pc, #16]	; (5e0c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5dfa:	788a      	ldrb	r2, [r1, #2]
    5dfc:	4282      	cmp	r2, r0
    5dfe:	d903      	bls.n	5e08 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5e00:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5e04:	3083      	adds	r0, #131	; 0x83
    5e06:	4770      	bx	lr
    5e08:	2000      	movs	r0, #0
    5e0a:	4770      	bx	lr
    5e0c:	200013be 	.word	0x200013be

00005e10 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5e10:	4a05      	ldr	r2, [pc, #20]	; (5e28 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5e12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5e16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5e1a:	6802      	ldr	r2, [r0, #0]
    5e1c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5e20:	8880      	ldrh	r0, [r0, #4]
    5e22:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5e26:	4770      	bx	lr
    5e28:	200013be 	.word	0x200013be

00005e2c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5e2c:	4904      	ldr	r1, [pc, #16]	; (5e40 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5e2e:	788a      	ldrb	r2, [r1, #2]
    5e30:	4282      	cmp	r2, r0
    5e32:	d903      	bls.n	5e3c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5e34:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5e38:	1cc0      	adds	r0, r0, #3
    5e3a:	4770      	bx	lr
    5e3c:	2000      	movs	r0, #0
    5e3e:	4770      	bx	lr
    5e40:	200013be 	.word	0x200013be

00005e44 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5e44:	b510      	push	{r4, lr}
    5e46:	f240 12d3 	movw	r2, #467	; 0x1d3
    5e4a:	2100      	movs	r1, #0
    5e4c:	4808      	ldr	r0, [pc, #32]	; (5e70 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5e4e:	f006 fb9e 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e52:	2208      	movs	r2, #8
    5e54:	21ff      	movs	r1, #255	; 0xff
    5e56:	4807      	ldr	r0, [pc, #28]	; (5e74 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e58:	f006 fb99 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e5c:	4805      	ldr	r0, [pc, #20]	; (5e74 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e5e:	2100      	movs	r1, #0
    5e60:	1f00      	subs	r0, r0, #4
    5e62:	7001      	strb	r1, [r0, #0]
    5e64:	7041      	strb	r1, [r0, #1]
    5e66:	f44f 7161 	mov.w	r1, #900	; 0x384
    5e6a:	8041      	strh	r1, [r0, #2]
    5e6c:	bd10      	pop	{r4, pc}
    5e6e:	0000      	.short	0x0000
    5e70:	200013be 	.word	0x200013be
    5e74:	2000034c 	.word	0x2000034c

00005e78 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5e78:	4b0b      	ldr	r3, [pc, #44]	; (5ea8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5e7a:	b510      	push	{r4, lr}
    5e7c:	789c      	ldrb	r4, [r3, #2]
    5e7e:	4284      	cmp	r4, r0
    5e80:	d90f      	bls.n	5ea2 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5e82:	4418      	add	r0, r3
    5e84:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5e88:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5e8c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5e90:	700b      	strb	r3, [r1, #0]
    5e92:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5e96:	6011      	str	r1, [r2, #0]
    5e98:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5e9c:	8090      	strh	r0, [r2, #4]
    5e9e:	2001      	movs	r0, #1
    5ea0:	bd10      	pop	{r4, pc}
    5ea2:	2000      	movs	r0, #0
    5ea4:	bd10      	pop	{r4, pc}
    5ea6:	0000      	.short	0x0000
    5ea8:	200013be 	.word	0x200013be

00005eac <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5eac:	4907      	ldr	r1, [pc, #28]	; (5ecc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5eae:	788a      	ldrb	r2, [r1, #2]
    5eb0:	4282      	cmp	r2, r0
    5eb2:	d909      	bls.n	5ec8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5eb4:	4408      	add	r0, r1
    5eb6:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5eba:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5ebe:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5ec2:	f000 0001 	and.w	r0, r0, #1
    5ec6:	4770      	bx	lr
    5ec8:	2000      	movs	r0, #0
    5eca:	4770      	bx	lr
    5ecc:	200013be 	.word	0x200013be

00005ed0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5ed0:	4801      	ldr	r0, [pc, #4]	; (5ed8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5ed2:	8840      	ldrh	r0, [r0, #2]
    5ed4:	4770      	bx	lr
    5ed6:	0000      	.short	0x0000
    5ed8:	20000348 	.word	0x20000348

00005edc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5edc:	4905      	ldr	r1, [pc, #20]	; (5ef4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    5ede:	788a      	ldrb	r2, [r1, #2]
    5ee0:	4282      	cmp	r2, r0
    5ee2:	d903      	bls.n	5eec <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5ee4:	4408      	add	r0, r1
    5ee6:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5eea:	b108      	cbz	r0, 5ef0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    5eec:	2000      	movs	r0, #0
    5eee:	4770      	bx	lr
    5ef0:	2001      	movs	r0, #1
    5ef2:	4770      	bx	lr
    5ef4:	200013be 	.word	0x200013be

00005ef8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5ef8:	b570      	push	{r4, r5, r6, lr}
    5efa:	460d      	mov	r5, r1
    5efc:	4606      	mov	r6, r0
    5efe:	f000 f8c1 	bl	6084 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5f02:	4c10      	ldr	r4, [pc, #64]	; (5f44 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5f04:	2810      	cmp	r0, #16
    5f06:	d007      	beq.n	5f18 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5f08:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5f0c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5f10:	07c9      	lsls	r1, r1, #31
    5f12:	d001      	beq.n	5f18 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5f14:	2001      	movs	r0, #1
    5f16:	bd70      	pop	{r4, r5, r6, pc}
    5f18:	7861      	ldrb	r1, [r4, #1]
    5f1a:	2908      	cmp	r1, #8
    5f1c:	d210      	bcs.n	5f40 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5f1e:	2810      	cmp	r0, #16
    5f20:	d008      	beq.n	5f34 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5f22:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5f26:	2101      	movs	r1, #1
    5f28:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5f2c:	7860      	ldrb	r0, [r4, #1]
    5f2e:	1c40      	adds	r0, r0, #1
    5f30:	7060      	strb	r0, [r4, #1]
    5f32:	e7ef      	b.n	5f14 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5f34:	2201      	movs	r2, #1
    5f36:	4629      	mov	r1, r5
    5f38:	4630      	mov	r0, r6
    5f3a:	f000 f887 	bl	604c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5f3e:	e7f5      	b.n	5f2c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5f40:	2000      	movs	r0, #0
    5f42:	bd70      	pop	{r4, r5, r6, pc}
    5f44:	200013be 	.word	0x200013be

00005f48 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5f48:	b570      	push	{r4, r5, r6, lr}
    5f4a:	4d0b      	ldr	r5, [pc, #44]	; (5f78 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5f4c:	7828      	ldrb	r0, [r5, #0]
    5f4e:	1e40      	subs	r0, r0, #1
    5f50:	b244      	sxtb	r4, r0
    5f52:	e00a      	b.n	5f6a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5f54:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5f58:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5f5c:	07c0      	lsls	r0, r0, #31
    5f5e:	d002      	beq.n	5f66 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5f60:	b2e0      	uxtb	r0, r4
    5f62:	f000 f8ed 	bl	6140 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    5f66:	1e64      	subs	r4, r4, #1
    5f68:	b264      	sxtb	r4, r4
    5f6a:	2c00      	cmp	r4, #0
    5f6c:	daf2      	bge.n	5f54 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5f6e:	4903      	ldr	r1, [pc, #12]	; (5f7c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5f70:	2000      	movs	r0, #0
    5f72:	7048      	strb	r0, [r1, #1]
    5f74:	bd70      	pop	{r4, r5, r6, pc}
    5f76:	0000      	.short	0x0000
    5f78:	200013be 	.word	0x200013be
    5f7c:	20000348 	.word	0x20000348

00005f80 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f84:	2400      	movs	r4, #0
    5f86:	4625      	mov	r5, r4
    5f88:	4e18      	ldr	r6, [pc, #96]	; (5fec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5f8a:	e029      	b.n	5fe0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5f8c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5f90:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5f94:	07c0      	lsls	r0, r0, #31
    5f96:	d021      	beq.n	5fdc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5f98:	4628      	mov	r0, r5
    5f9a:	f000 f843 	bl	6024 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5f9e:	4603      	mov	r3, r0
    5fa0:	f7ff ff44 	bl	5e2c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5fa4:	4601      	mov	r1, r0
    5fa6:	2000      	movs	r0, #0
    5fa8:	2b10      	cmp	r3, #16
    5faa:	d009      	beq.n	5fc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5fac:	18f2      	adds	r2, r6, r3
    5fae:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5fb2:	f1bc 0f01 	cmp.w	ip, #1
    5fb6:	d002      	beq.n	5fbe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5fb8:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5fbc:	b102      	cbz	r2, 5fc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5fbe:	2001      	movs	r0, #1
    5fc0:	1e40      	subs	r0, r0, #1
    5fc2:	4201      	tst	r1, r0
    5fc4:	d10a      	bne.n	5fdc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5fc6:	480a      	ldr	r0, [pc, #40]	; (5ff0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5fc8:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5fcc:	5503      	strb	r3, [r0, r4]
    5fce:	4620      	mov	r0, r4
    5fd0:	1c64      	adds	r4, r4, #1
    5fd2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5fd6:	b2e4      	uxtb	r4, r4
    5fd8:	f005 f9b8 	bl	b34c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5fdc:	1c6d      	adds	r5, r5, #1
    5fde:	b2ed      	uxtb	r5, r5
    5fe0:	7830      	ldrb	r0, [r6, #0]
    5fe2:	42a8      	cmp	r0, r5
    5fe4:	d8d2      	bhi.n	5f8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fea:	0000      	.short	0x0000
    5fec:	200013be 	.word	0x200013be
    5ff0:	2000034c 	.word	0x2000034c
    5ff4:	4602      	mov	r2, r0
    5ff6:	4809      	ldr	r0, [pc, #36]	; (601c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5ff8:	b510      	push	{r4, lr}
    5ffa:	7800      	ldrb	r0, [r0, #0]
    5ffc:	460b      	mov	r3, r1
    5ffe:	b158      	cbz	r0, 6018 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6000:	4807      	ldr	r0, [pc, #28]	; (6020 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6002:	7881      	ldrb	r1, [r0, #2]
    6004:	b141      	cbz	r1, 6018 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6006:	b10b      	cbz	r3, 600c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6008:	1cc0      	adds	r0, r0, #3
    600a:	e001      	b.n	6010 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    600c:	4804      	ldr	r0, [pc, #16]	; (6020 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    600e:	3083      	adds	r0, #131	; 0x83
    6010:	f004 fb7a 	bl	a708 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6014:	2001      	movs	r0, #1
    6016:	bd10      	pop	{r4, pc}
    6018:	2000      	movs	r0, #0
    601a:	bd10      	pop	{r4, pc}
    601c:	20000348 	.word	0x20000348
    6020:	200013be 	.word	0x200013be
    6024:	4908      	ldr	r1, [pc, #32]	; (6048 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    6026:	b510      	push	{r4, lr}
    6028:	4603      	mov	r3, r0
    602a:	2000      	movs	r0, #0
    602c:	788a      	ldrb	r2, [r1, #2]
    602e:	e006      	b.n	603e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6030:	180c      	adds	r4, r1, r0
    6032:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    6036:	429c      	cmp	r4, r3
    6038:	d004      	beq.n	6044 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    603a:	1c40      	adds	r0, r0, #1
    603c:	b2c0      	uxtb	r0, r0
    603e:	4282      	cmp	r2, r0
    6040:	d8f6      	bhi.n	6030 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    6042:	2010      	movs	r0, #16
    6044:	bd10      	pop	{r4, pc}
    6046:	0000      	.short	0x0000
    6048:	200013be 	.word	0x200013be
    604c:	b570      	push	{r4, r5, r6, lr}
    604e:	4b0c      	ldr	r3, [pc, #48]	; (6080 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6050:	4604      	mov	r4, r0
    6052:	7818      	ldrb	r0, [r3, #0]
    6054:	1c45      	adds	r5, r0, #1
    6056:	701d      	strb	r5, [r3, #0]
    6058:	2810      	cmp	r0, #16
    605a:	d303      	bcc.n	6064 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    605c:	2146      	movs	r1, #70	; 0x46
    605e:	2028      	movs	r0, #40	; 0x28
    6060:	f7fe fa84 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6064:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6068:	680d      	ldr	r5, [r1, #0]
    606a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    606e:	8889      	ldrh	r1, [r1, #4]
    6070:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6074:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6078:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    607c:	bd70      	pop	{r4, r5, r6, pc}
    607e:	0000      	.short	0x0000
    6080:	200013be 	.word	0x200013be
    6084:	b5f0      	push	{r4, r5, r6, r7, lr}
    6086:	4c1a      	ldr	r4, [pc, #104]	; (60f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    6088:	4603      	mov	r3, r0
    608a:	2000      	movs	r0, #0
    608c:	7825      	ldrb	r5, [r4, #0]
    608e:	e02a      	b.n	60e6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    6090:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6094:	780f      	ldrb	r7, [r1, #0]
    6096:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    609a:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    609e:	ea87 070c 	eor.w	r7, r7, ip
    60a2:	405e      	eors	r6, r3
    60a4:	443e      	add	r6, r7
    60a6:	784f      	ldrb	r7, [r1, #1]
    60a8:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    60ac:	ea87 070c 	eor.w	r7, r7, ip
    60b0:	443e      	add	r6, r7
    60b2:	788f      	ldrb	r7, [r1, #2]
    60b4:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    60b8:	ea87 070c 	eor.w	r7, r7, ip
    60bc:	443e      	add	r6, r7
    60be:	78cf      	ldrb	r7, [r1, #3]
    60c0:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    60c4:	ea87 070c 	eor.w	r7, r7, ip
    60c8:	443e      	add	r6, r7
    60ca:	790f      	ldrb	r7, [r1, #4]
    60cc:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    60d0:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    60d4:	ea87 070c 	eor.w	r7, r7, ip
    60d8:	443e      	add	r6, r7
    60da:	794f      	ldrb	r7, [r1, #5]
    60dc:	4057      	eors	r7, r2
    60de:	42f7      	cmn	r7, r6
    60e0:	d004      	beq.n	60ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    60e2:	1c40      	adds	r0, r0, #1
    60e4:	b2c0      	uxtb	r0, r0
    60e6:	4285      	cmp	r5, r0
    60e8:	d8d2      	bhi.n	6090 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    60ea:	2010      	movs	r0, #16
    60ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60ee:	0000      	.short	0x0000
    60f0:	200013be 	.word	0x200013be
    60f4:	b570      	push	{r4, r5, r6, lr}
    60f6:	4605      	mov	r5, r0
    60f8:	f7ff ff94 	bl	6024 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    60fc:	2810      	cmp	r0, #16
    60fe:	d11c      	bne.n	613a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6100:	4c0e      	ldr	r4, [pc, #56]	; (613c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    6102:	7820      	ldrb	r0, [r4, #0]
    6104:	1e40      	subs	r0, r0, #1
    6106:	b2c0      	uxtb	r0, r0
    6108:	7020      	strb	r0, [r4, #0]
    610a:	42a8      	cmp	r0, r5
    610c:	d015      	beq.n	613a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    610e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6112:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6116:	f502 7080 	add.w	r0, r2, #256	; 0x100
    611a:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    611e:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6122:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6126:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    612a:	7820      	ldrb	r0, [r4, #0]
    612c:	f7ff ff7a 	bl	6024 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6130:	2810      	cmp	r0, #16
    6132:	d002      	beq.n	613a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6134:	4420      	add	r0, r4
    6136:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    613a:	bd70      	pop	{r4, r5, r6, pc}
    613c:	200013be 	.word	0x200013be
    6140:	4905      	ldr	r1, [pc, #20]	; (6158 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    6142:	784a      	ldrb	r2, [r1, #1]
    6144:	1e52      	subs	r2, r2, #1
    6146:	704a      	strb	r2, [r1, #1]
    6148:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    614c:	2200      	movs	r2, #0
    614e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6152:	f7ff bfcf 	b.w	60f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    6156:	0000      	.short	0x0000
    6158:	200013be 	.word	0x200013be

0000615c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6160:	4604      	mov	r4, r0
    6162:	f100 0580 	add.w	r5, r0, #128	; 0x80
    6166:	f04f 0901 	mov.w	r9, #1
    616a:	b171      	cbz	r1, 618a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    616c:	f104 079e 	add.w	r7, r4, #158	; 0x9e
    6170:	1e7e      	subs	r6, r7, #1
    6172:	2901      	cmp	r1, #1
    6174:	d020      	beq.n	61b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    6176:	2902      	cmp	r1, #2
    6178:	d045      	beq.n	6206 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    617a:	2903      	cmp	r1, #3
    617c:	d11a      	bne.n	61b4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    617e:	4639      	mov	r1, r7
    6180:	4630      	mov	r0, r6
    6182:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6186:	f007 bd68 	b.w	dc5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    618a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
    618e:	2100      	movs	r1, #0
    6190:	f006 f9fd 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6194:	f885 901d 	strb.w	r9, [r5, #29]
    6198:	4820      	ldr	r0, [pc, #128]	; (621c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    619a:	6668      	str	r0, [r5, #100]	; 0x64
    619c:	2007      	movs	r0, #7
    619e:	66a8      	str	r0, [r5, #104]	; 0x68
    61a0:	f814 0fe4 	ldrb.w	r0, [r4, #228]!
    61a4:	f020 0004 	bic.w	r0, r0, #4
    61a8:	7020      	strb	r0, [r4, #0]
    61aa:	20fe      	movs	r0, #254	; 0xfe
    61ac:	f885 009c 	strb.w	r0, [r5, #156]	; 0x9c
    61b0:	207f      	movs	r0, #127	; 0x7f
    61b2:	7468      	strb	r0, [r5, #17]
    61b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61b8:	f04f 0800 	mov.w	r8, #0
    61bc:	f8a4 8226 	strh.w	r8, [r4, #550]	; 0x226
    61c0:	f884 821b 	strb.w	r8, [r4, #539]	; 0x21b
    61c4:	6921      	ldr	r1, [r4, #16]
    61c6:	4816      	ldr	r0, [pc, #88]	; (6220 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>)
    61c8:	460a      	mov	r2, r1
    61ca:	4408      	add	r0, r1
    61cc:	fbb0 f0f1 	udiv	r0, r0, r1
    61d0:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    61d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    61d8:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    61dc:	8b63      	ldrh	r3, [r4, #26]
    61de:	4628      	mov	r0, r5
    61e0:	f000 f820 	bl	6224 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    61e4:	4639      	mov	r1, r7
    61e6:	4630      	mov	r0, r6
    61e8:	f007 fd37 	bl	dc5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    61ec:	f006 f931 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    61f0:	b118      	cbz	r0, 61fa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    61f2:	6960      	ldr	r0, [r4, #20]
    61f4:	f000 fb82 	bl	68fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    61f8:	b110      	cbz	r0, 6200 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    61fa:	f884 820c 	strb.w	r8, [r4, #524]	; 0x20c
    61fe:	e7d9      	b.n	61b4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    6200:	f884 920c 	strb.w	r9, [r4, #524]	; 0x20c
    6204:	e7d6      	b.n	61b4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    6206:	6901      	ldr	r1, [r0, #16]
    6208:	f8b4 32ca 	ldrh.w	r3, [r4, #714]	; 0x2ca
    620c:	f8d4 22c4 	ldr.w	r2, [r4, #708]	; 0x2c4
    6210:	4628      	mov	r0, r5
    6212:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6216:	f000 b805 	b.w	6224 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    621a:	0000      	.short	0x0000
    621c:	3004492f 	.word	0x3004492f
    6220:	01c9c37f 	.word	0x01c9c37f
    6224:	b510      	push	{r4, lr}
    6226:	2400      	movs	r4, #0
    6228:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
    622c:	f830 4f48 	ldrh.w	r4, [r0, #72]!
    6230:	434c      	muls	r4, r1
    6232:	fbb4 f4f2 	udiv	r4, r4, r2
    6236:	f820 4910 	strh.w	r4, [r0], #-16
    623a:	f240 2471 	movw	r4, #625	; 0x271
    623e:	4363      	muls	r3, r4
    6240:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6244:	1e5b      	subs	r3, r3, #1
    6246:	fbb3 f3f2 	udiv	r3, r3, r2
    624a:	81c3      	strh	r3, [r0, #14]
    624c:	4b09      	ldr	r3, [pc, #36]	; (6274 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x118>)
    624e:	fbb3 f3f2 	udiv	r3, r3, r2
    6252:	1c5b      	adds	r3, r3, #1
    6254:	8283      	strh	r3, [r0, #20]
    6256:	8903      	ldrh	r3, [r0, #8]
    6258:	4363      	muls	r3, r4
    625a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    625e:	1e5b      	subs	r3, r3, #1
    6260:	fbb3 f3f2 	udiv	r3, r3, r2
    6264:	6043      	str	r3, [r0, #4]
    6266:	6803      	ldr	r3, [r0, #0]
    6268:	434b      	muls	r3, r1
    626a:	fbb3 f1f2 	udiv	r1, r3, r2
    626e:	6001      	str	r1, [r0, #0]
    6270:	bd10      	pop	{r4, pc}
    6272:	0000      	.short	0x0000
    6274:	02625a00 	.word	0x02625a00

00006278 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6278:	b570      	push	{r4, r5, r6, lr}
    627a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    627e:	b28b      	uxth	r3, r1
    6280:	7ac5      	ldrb	r5, [r0, #11]
    6282:	ea83 0102 	eor.w	r1, r3, r2
    6286:	2200      	movs	r2, #0
    6288:	b2cc      	uxtb	r4, r1
    628a:	0a09      	lsrs	r1, r1, #8
    628c:	fa94 f4a4 	rbit	r4, r4
    6290:	fa91 f1a1 	rbit	r1, r1
    6294:	0e24      	lsrs	r4, r4, #24
    6296:	0e09      	lsrs	r1, r1, #24
    6298:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    629c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    62a0:	1c52      	adds	r2, r2, #1
    62a2:	4419      	add	r1, r3
    62a4:	b2d2      	uxtb	r2, r2
    62a6:	b289      	uxth	r1, r1
    62a8:	2a03      	cmp	r2, #3
    62aa:	d3ed      	bcc.n	6288 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    62ac:	4059      	eors	r1, r3
    62ae:	2225      	movs	r2, #37	; 0x25
    62b0:	fbb1 f3f2 	udiv	r3, r1, r2
    62b4:	fb02 1213 	mls	r2, r2, r3, r1
    62b8:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    62bc:	f002 0607 	and.w	r6, r2, #7
    62c0:	785b      	ldrb	r3, [r3, #1]
    62c2:	2401      	movs	r4, #1
    62c4:	fa04 f606 	lsl.w	r6, r4, r6
    62c8:	4233      	tst	r3, r6
    62ca:	d001      	beq.n	62d0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    62cc:	4610      	mov	r0, r2
    62ce:	bd70      	pop	{r4, r5, r6, pc}
    62d0:	434d      	muls	r5, r1
    62d2:	0c29      	lsrs	r1, r5, #16
    62d4:	1c49      	adds	r1, r1, #1
    62d6:	b2c9      	uxtb	r1, r1
    62d8:	2200      	movs	r2, #0
    62da:	1885      	adds	r5, r0, r2
    62dc:	79ab      	ldrb	r3, [r5, #6]
    62de:	428b      	cmp	r3, r1
    62e0:	d312      	bcc.n	6308 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    62e2:	f895 5001 	ldrb.w	r5, [r5, #1]
    62e6:	2300      	movs	r3, #0
    62e8:	fa04 f603 	lsl.w	r6, r4, r3
    62ec:	4235      	tst	r5, r6
    62ee:	d001      	beq.n	62f4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    62f0:	1e49      	subs	r1, r1, #1
    62f2:	b2c9      	uxtb	r1, r1
    62f4:	b121      	cbz	r1, 6300 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    62f6:	1c5b      	adds	r3, r3, #1
    62f8:	b2db      	uxtb	r3, r3
    62fa:	2b08      	cmp	r3, #8
    62fc:	d3f4      	bcc.n	62e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    62fe:	e005      	b.n	630c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6300:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6304:	b2c0      	uxtb	r0, r0
    6306:	bd70      	pop	{r4, r5, r6, pc}
    6308:	1ac9      	subs	r1, r1, r3
    630a:	b2c9      	uxtb	r1, r1
    630c:	1c52      	adds	r2, r2, #1
    630e:	b2d2      	uxtb	r2, r2
    6310:	2a05      	cmp	r2, #5
    6312:	d3e2      	bcc.n	62da <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6314:	21f9      	movs	r1, #249	; 0xf9
    6316:	2046      	movs	r0, #70	; 0x46
    6318:	f7fe f928 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000631c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    631c:	7841      	ldrb	r1, [r0, #1]
    631e:	b141      	cbz	r1, 6332 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    6320:	78c0      	ldrb	r0, [r0, #3]
    6322:	282b      	cmp	r0, #43	; 0x2b
    6324:	d203      	bcs.n	632e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    6326:	4a04      	ldr	r2, [pc, #16]	; (6338 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    6328:	5c10      	ldrb	r0, [r2, r0]
    632a:	4288      	cmp	r0, r1
    632c:	d101      	bne.n	6332 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    632e:	2001      	movs	r0, #1
    6330:	4770      	bx	lr
    6332:	2000      	movs	r0, #0
    6334:	4770      	bx	lr
    6336:	0000      	.short	0x0000
    6338:	00010792 	.word	0x00010792

0000633c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    633c:	b510      	push	{r4, lr}
    633e:	2201      	movs	r2, #1
    6340:	70c1      	strb	r1, [r0, #3]
    6342:	292b      	cmp	r1, #43	; 0x2b
    6344:	d202      	bcs.n	634c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    6346:	4a06      	ldr	r2, [pc, #24]	; (6360 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    6348:	5c52      	ldrb	r2, [r2, r1]
    634a:	e006      	b.n	635a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    634c:	29ff      	cmp	r1, #255	; 0xff
    634e:	d004      	beq.n	635a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    6350:	f44f 618f 	mov.w	r1, #1144	; 0x478
    6354:	202a      	movs	r0, #42	; 0x2a
    6356:	f7fe f909 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    635a:	7042      	strb	r2, [r0, #1]
    635c:	bd10      	pop	{r4, pc}
    635e:	0000      	.short	0x0000
    6360:	00010792 	.word	0x00010792

00006364 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    6364:	4904      	ldr	r1, [pc, #16]	; (6378 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    6366:	7c89      	ldrb	r1, [r1, #18]
    6368:	0749      	lsls	r1, r1, #29
    636a:	d400      	bmi.n	636e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    636c:	b108      	cbz	r0, 6372 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    636e:	2000      	movs	r0, #0
    6370:	4770      	bx	lr
    6372:	2001      	movs	r0, #1
    6374:	4770      	bx	lr
    6376:	0000      	.short	0x0000
    6378:	200012fc 	.word	0x200012fc

0000637c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    637c:	4803      	ldr	r0, [pc, #12]	; (638c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    637e:	7c80      	ldrb	r0, [r0, #18]
    6380:	0780      	lsls	r0, r0, #30
    6382:	d401      	bmi.n	6388 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    6384:	2001      	movs	r0, #1
    6386:	4770      	bx	lr
    6388:	2000      	movs	r0, #0
    638a:	4770      	bx	lr
    638c:	200012fc 	.word	0x200012fc

00006390 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    6390:	4803      	ldr	r0, [pc, #12]	; (63a0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    6392:	7c80      	ldrb	r0, [r0, #18]
    6394:	07c0      	lsls	r0, r0, #31
    6396:	d001      	beq.n	639c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    6398:	2000      	movs	r0, #0
    639a:	4770      	bx	lr
    639c:	2001      	movs	r0, #1
    639e:	4770      	bx	lr
    63a0:	200012fc 	.word	0x200012fc
    63a4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    63a8:	4688      	mov	r8, r1
    63aa:	4699      	mov	r9, r3
    63ac:	4615      	mov	r5, r2
    63ae:	4604      	mov	r4, r0
    63b0:	4669      	mov	r1, sp
    63b2:	f007 fa90 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    63b6:	bbc8      	cbnz	r0, 642c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    63b8:	9e01      	ldr	r6, [sp, #4]
    63ba:	2700      	movs	r7, #0
    63bc:	3680      	adds	r6, #128	; 0x80
    63be:	b17d      	cbz	r5, 63e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    63c0:	4620      	mov	r0, r4
    63c2:	f7fe fce1 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    63c6:	0004      	movs	r4, r0
    63c8:	d00d      	beq.n	63e6 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    63ca:	4629      	mov	r1, r5
    63cc:	f006 fe8c 	bl	d0e8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    63d0:	b118      	cbz	r0, 63da <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    63d2:	4919      	ldr	r1, [pc, #100]	; (6438 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>)
    63d4:	8849      	ldrh	r1, [r1, #2]
    63d6:	42a9      	cmp	r1, r5
    63d8:	d207      	bcs.n	63ea <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    63da:	2000      	movs	r0, #0
    63dc:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    63e0:	2001      	movs	r0, #1
    63e2:	7730      	strb	r0, [r6, #28]
    63e4:	e022      	b.n	642c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    63e6:	2168      	movs	r1, #104	; 0x68
    63e8:	e023      	b.n	6432 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    63ea:	4601      	mov	r1, r0
    63ec:	aa02      	add	r2, sp, #8
    63ee:	4620      	mov	r0, r4
    63f0:	f006 fe73 	bl	d0da <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    63f4:	9802      	ldr	r0, [sp, #8]
    63f6:	8007      	strh	r7, [r0, #0]
    63f8:	7087      	strb	r7, [r0, #2]
    63fa:	7f31      	ldrb	r1, [r6, #28]
    63fc:	b109      	cbz	r1, 6402 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x72>
    63fe:	f04f 0802 	mov.w	r8, #2
    6402:	4641      	mov	r1, r8
    6404:	f007 fda5 	bl	df52 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    6408:	9802      	ldr	r0, [sp, #8]
    640a:	462a      	mov	r2, r5
    640c:	4649      	mov	r1, r9
    640e:	1cc0      	adds	r0, r0, #3
    6410:	f006 f843 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6414:	4620      	mov	r0, r4
    6416:	4629      	mov	r1, r5
    6418:	f006 fe1d 	bl	d056 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    641c:	b140      	cbz	r0, 6430 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa0>
    641e:	4668      	mov	r0, sp
    6420:	f007 fdf2 	bl	e008 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6424:	9801      	ldr	r0, [sp, #4]
    6426:	f8a0 7212 	strh.w	r7, [r0, #530]	; 0x212
    642a:	7737      	strb	r7, [r6, #28]
    642c:	2001      	movs	r0, #1
    642e:	e7d5      	b.n	63dc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    6430:	217d      	movs	r1, #125	; 0x7d
    6432:	202b      	movs	r0, #43	; 0x2b
    6434:	f7fe f89a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6438:	200012fc 	.word	0x200012fc

0000643c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    643c:	2202      	movs	r2, #2
    643e:	4902      	ldr	r1, [pc, #8]	; (6448 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0xc>)
    6440:	4802      	ldr	r0, [pc, #8]	; (644c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x10>)
    6442:	f000 b805 	b.w	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6446:	0000      	.short	0x0000
    6448:	0000e147 	.word	0x0000e147
    644c:	20001314 	.word	0x20001314

00006450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    6450:	b538      	push	{r3, r4, r5, lr}
    6452:	b318      	cbz	r0, 649c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x4c>
    6454:	7a03      	ldrb	r3, [r0, #8]
    6456:	f88d 3000 	strb.w	r3, [sp]
    645a:	9b00      	ldr	r3, [sp, #0]
    645c:	9300      	str	r3, [sp, #0]
    645e:	f89d 3000 	ldrb.w	r3, [sp]
    6462:	2b00      	cmp	r3, #0
    6464:	d126      	bne.n	64b4 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x64>
    6466:	6041      	str	r1, [r0, #4]
    6468:	f100 0108 	add.w	r1, r0, #8
    646c:	700a      	strb	r2, [r1, #0]
    646e:	f3ef 8210 	mrs	r2, PRIMASK
    6472:	b672      	cpsid	i
    6474:	4b10      	ldr	r3, [pc, #64]	; (64b8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x68>)
    6476:	6003      	str	r3, [r0, #0]
    6478:	1f19      	subs	r1, r3, #4
    647a:	684c      	ldr	r4, [r1, #4]
    647c:	7a24      	ldrb	r4, [r4, #8]
    647e:	f88d 4000 	strb.w	r4, [sp]
    6482:	9c00      	ldr	r4, [sp, #0]
    6484:	9400      	str	r4, [sp, #0]
    6486:	f89d 5000 	ldrb.w	r5, [sp]
    648a:	2d01      	cmp	r5, #1
    648c:	d004      	beq.n	6498 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x48>
    648e:	680b      	ldr	r3, [r1, #0]
    6490:	6018      	str	r0, [r3, #0]
    6492:	6008      	str	r0, [r1, #0]
    6494:	b13a      	cbz	r2, 64a6 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x56>
    6496:	e007      	b.n	64a8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x58>
    6498:	600b      	str	r3, [r1, #0]
    649a:	e7f9      	b.n	6490 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    649c:	f44f 6192 	mov.w	r1, #1168	; 0x490
    64a0:	2010      	movs	r0, #16
    64a2:	f7fe f863 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64a6:	b662      	cpsie	i
    64a8:	4804      	ldr	r0, [pc, #16]	; (64bc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x6c>)
    64aa:	7800      	ldrb	r0, [r0, #0]
    64ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    64b0:	f7fd be52 	b.w	4158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    64b4:	bd38      	pop	{r3, r4, r5, pc}
    64b6:	0000      	.short	0x0000
    64b8:	2000132c 	.word	0x2000132c
    64bc:	20000368 	.word	0x20000368

000064c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    64c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64c4:	4f47      	ldr	r7, [pc, #284]	; (65e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x124>)
    64c6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 65e8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    64ca:	4682      	mov	sl, r0
    64cc:	2600      	movs	r6, #0
    64ce:	6878      	ldr	r0, [r7, #4]
    64d0:	7a00      	ldrb	r0, [r0, #8]
    64d2:	f88d 0000 	strb.w	r0, [sp]
    64d6:	9800      	ldr	r0, [sp, #0]
    64d8:	9000      	str	r0, [sp, #0]
    64da:	f89d 1000 	ldrb.w	r1, [sp]
    64de:	2927      	cmp	r1, #39	; 0x27
    64e0:	d106      	bne.n	64f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    64e2:	f899 1013 	ldrb.w	r1, [r9, #19]
    64e6:	b119      	cbz	r1, 64f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    64e8:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    64ec:	2800      	cmp	r0, #0
    64ee:	d06c      	beq.n	65ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    64f0:	f88d 6000 	strb.w	r6, [sp]
    64f4:	4668      	mov	r0, sp
    64f6:	f000 f8f3 	bl	66e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    64fa:	f89d 1000 	ldrb.w	r1, [sp]
    64fe:	2900      	cmp	r1, #0
    6500:	d1f8      	bne.n	64f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    6502:	2800      	cmp	r0, #0
    6504:	d061      	beq.n	65ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    6506:	4604      	mov	r4, r0
    6508:	7a00      	ldrb	r0, [r0, #8]
    650a:	f88d 0000 	strb.w	r0, [sp]
    650e:	9800      	ldr	r0, [sp, #0]
    6510:	9000      	str	r0, [sp, #0]
    6512:	f89d 5000 	ldrb.w	r5, [sp]
    6516:	1ea8      	subs	r0, r5, #2
    6518:	2826      	cmp	r0, #38	; 0x26
    651a:	d25d      	bcs.n	65d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    651c:	e8df f000 	tbb	[pc, r0]
    6520:	1a5c2213 	.word	0x1a5c2213
    6524:	3e22225c 	.word	0x3e22225c
    6528:	22222222 	.word	0x22222222
    652c:	5c1a5c22 	.word	0x5c1a5c22
    6530:	5c1a2222 	.word	0x5c1a2222
    6534:	225c5c5c 	.word	0x225c5c5c
    6538:	1a225c5c 	.word	0x1a225c5c
    653c:	435c2222 	.word	0x435c2222
    6540:	2f5c5c1a 	.word	0x2f5c5c1a
    6544:	4c34      	.short	0x4c34
    6546:	6862      	ldr	r2, [r4, #4]
    6548:	bb7a      	cbnz	r2, 65aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    654a:	f240 318a 	movw	r1, #906	; 0x38a
    654e:	e040      	b.n	65d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6550:	7226      	strb	r6, [r4, #8]
    6552:	e044      	b.n	65de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    6554:	4825      	ldr	r0, [pc, #148]	; (65ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    6556:	6803      	ldr	r3, [r0, #0]
    6558:	b11b      	cbz	r3, 6562 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    655a:	6860      	ldr	r0, [r4, #4]
    655c:	462a      	mov	r2, r5
    655e:	4651      	mov	r1, sl
    6560:	4798      	blx	r3
    6562:	e7f5      	b.n	6550 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6564:	462a      	mov	r2, r5
    6566:	4621      	mov	r1, r4
    6568:	4650      	mov	r0, sl
    656a:	f000 f8e1 	bl	6730 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x120>
    656e:	b110      	cbz	r0, 6576 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    6570:	2d0d      	cmp	r5, #13
    6572:	d034      	beq.n	65de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    6574:	e7ec      	b.n	6550 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6576:	2d0d      	cmp	r5, #13
    6578:	d031      	beq.n	65de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    657a:	7226      	strb	r6, [r4, #8]
    657c:	e7a7      	b.n	64ce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe>
    657e:	6862      	ldr	r2, [r4, #4]
    6580:	b99a      	cbnz	r2, 65aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    6582:	f240 412b 	movw	r1, #1067	; 0x42b
    6586:	e024      	b.n	65d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6588:	f88a 6001 	strb.w	r6, [sl, #1]
    658c:	2115      	movs	r1, #21
    658e:	f88a 1000 	strb.w	r1, [sl]
    6592:	f8d4 1009 	ldr.w	r1, [r4, #9]
    6596:	f8ca 1004 	str.w	r1, [sl, #4]
    659a:	e7d9      	b.n	6550 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    659c:	6862      	ldr	r2, [r4, #4]
    659e:	b922      	cbnz	r2, 65aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    65a0:	f240 413d 	movw	r1, #1085	; 0x43d
    65a4:	e015      	b.n	65d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    65a6:	6862      	ldr	r2, [r4, #4]
    65a8:	b11a      	cbz	r2, 65b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf2>
    65aa:	4651      	mov	r1, sl
    65ac:	4620      	mov	r0, r4
    65ae:	4790      	blx	r2
    65b0:	e7ce      	b.n	6550 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    65b2:	f240 4147 	movw	r1, #1095	; 0x447
    65b6:	e00c      	b.n	65d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    65b8:	480d      	ldr	r0, [pc, #52]	; (65f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>)
    65ba:	6802      	ldr	r2, [r0, #0]
    65bc:	b122      	cbz	r2, 65c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    65be:	6860      	ldr	r0, [r4, #4]
    65c0:	b128      	cbz	r0, 65ce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    65c2:	8800      	ldrh	r0, [r0, #0]
    65c4:	4651      	mov	r1, sl
    65c6:	4790      	blx	r2
    65c8:	2002      	movs	r0, #2
    65ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65ce:	f44f 618a 	mov.w	r1, #1104	; 0x450
    65d2:	2010      	movs	r0, #16
    65d4:	f7fd ffca 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65d8:	f240 416b 	movw	r1, #1131	; 0x46b
    65dc:	e7f9      	b.n	65d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    65de:	2004      	movs	r0, #4
    65e0:	e7f3      	b.n	65ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    65e2:	0000      	.short	0x0000
    65e4:	20001328 	.word	0x20001328
    65e8:	200012fc 	.word	0x200012fc
    65ec:	20000114 	.word	0x20000114
    65f0:	20000118 	.word	0x20000118

000065f4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    65f4:	4901      	ldr	r1, [pc, #4]	; (65fc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    65f6:	7008      	strb	r0, [r1, #0]
    65f8:	f000 b96a 	b.w	68d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c0>
    65fc:	20000368 	.word	0x20000368

00006600 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6600:	4902      	ldr	r1, [pc, #8]	; (660c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6602:	4801      	ldr	r0, [pc, #4]	; (6608 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6604:	6008      	str	r0, [r1, #0]
    6606:	4770      	bx	lr
    6608:	0000e61b 	.word	0x0000e61b
    660c:	20000114 	.word	0x20000114

00006610 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6610:	4905      	ldr	r1, [pc, #20]	; (6628 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6612:	4804      	ldr	r0, [pc, #16]	; (6624 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6614:	6008      	str	r0, [r1, #0]
    6616:	4906      	ldr	r1, [pc, #24]	; (6630 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6618:	4804      	ldr	r0, [pc, #16]	; (662c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    661a:	6008      	str	r0, [r1, #0]
    661c:	4906      	ldr	r1, [pc, #24]	; (6638 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    661e:	4805      	ldr	r0, [pc, #20]	; (6634 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6620:	6008      	str	r0, [r1, #0]
    6622:	4770      	bx	lr
    6624:	0000e61b 	.word	0x0000e61b
    6628:	20000114 	.word	0x20000114
    662c:	0000e053 	.word	0x0000e053
    6630:	2000011c 	.word	0x2000011c
    6634:	0000663d 	.word	0x0000663d
    6638:	20000118 	.word	0x20000118
    663c:	b538      	push	{r3, r4, r5, lr}
    663e:	000d      	movs	r5, r1
    6640:	d014      	beq.n	666c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x5c>
    6642:	8028      	strh	r0, [r5, #0]
    6644:	2100      	movs	r1, #0
    6646:	7169      	strb	r1, [r5, #5]
    6648:	f7fe fb88 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    664c:	4604      	mov	r4, r0
    664e:	f006 fd26 	bl	d09e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    6652:	b170      	cbz	r0, 6672 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x62>
    6654:	4601      	mov	r1, r0
    6656:	466a      	mov	r2, sp
    6658:	4620      	mov	r0, r4
    665a:	f006 fd3e 	bl	d0da <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    665e:	8068      	strh	r0, [r5, #2]
    6660:	b150      	cbz	r0, 6678 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    6662:	28fb      	cmp	r0, #251	; 0xfb
    6664:	d90b      	bls.n	667e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x6e>
    6666:	f240 21c2 	movw	r1, #706	; 0x2c2
    666a:	e033      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    666c:	f240 21b1 	movw	r1, #689	; 0x2b1
    6670:	e030      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6672:	f240 21ba 	movw	r1, #698	; 0x2ba
    6676:	e02d      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6678:	f240 21bf 	movw	r1, #703	; 0x2bf
    667c:	e02a      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    667e:	9800      	ldr	r0, [sp, #0]
    6680:	f007 fc13 	bl	deaa <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    6684:	2801      	cmp	r0, #1
    6686:	d004      	beq.n	6692 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x82>
    6688:	2802      	cmp	r0, #2
    668a:	d002      	beq.n	6692 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x82>
    668c:	f240 21d3 	movw	r1, #723	; 0x2d3
    6690:	e020      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6692:	7128      	strb	r0, [r5, #4]
    6694:	68a8      	ldr	r0, [r5, #8]
    6696:	b1a8      	cbz	r0, 66c4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    6698:	9900      	ldr	r1, [sp, #0]
    669a:	886a      	ldrh	r2, [r5, #2]
    669c:	1cc9      	adds	r1, r1, #3
    669e:	f005 fefc 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    66a2:	4620      	mov	r0, r4
    66a4:	f006 fcc3 	bl	d02e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    66a8:	b178      	cbz	r0, 66ca <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xba>
    66aa:	4620      	mov	r0, r4
    66ac:	2100      	movs	r1, #0
    66ae:	f006 fdb2 	bl	d216 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    66b2:	b168      	cbz	r0, 66d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc0>
    66b4:	4809      	ldr	r0, [pc, #36]	; (66dc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xcc>)
    66b6:	7cc1      	ldrb	r1, [r0, #19]
    66b8:	2900      	cmp	r1, #0
    66ba:	d002      	beq.n	66c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    66bc:	8a81      	ldrh	r1, [r0, #20]
    66be:	1e49      	subs	r1, r1, #1
    66c0:	8281      	strh	r1, [r0, #20]
    66c2:	bd38      	pop	{r3, r4, r5, pc}
    66c4:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    66c8:	e004      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    66ca:	f240 21e1 	movw	r1, #737	; 0x2e1
    66ce:	e001      	b.n	66d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    66d0:	f240 21e6 	movw	r1, #742	; 0x2e6
    66d4:	2010      	movs	r0, #16
    66d6:	f7fd ff49 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66da:	0000      	.short	0x0000
    66dc:	200012fc 	.word	0x200012fc
    66e0:	b538      	push	{r3, r4, r5, lr}
    66e2:	4602      	mov	r2, r0
    66e4:	4b11      	ldr	r3, [pc, #68]	; (672c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>)
    66e6:	2000      	movs	r0, #0
    66e8:	7010      	strb	r0, [r2, #0]
    66ea:	6858      	ldr	r0, [r3, #4]
    66ec:	7a01      	ldrb	r1, [r0, #8]
    66ee:	f88d 1000 	strb.w	r1, [sp]
    66f2:	9900      	ldr	r1, [sp, #0]
    66f4:	9100      	str	r1, [sp, #0]
    66f6:	f89d 5000 	ldrb.w	r5, [sp]
    66fa:	2401      	movs	r4, #1
    66fc:	2d01      	cmp	r5, #1
    66fe:	d006      	beq.n	670e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    6700:	f3ef 8110 	mrs	r1, PRIMASK
    6704:	b672      	cpsid	i
    6706:	6805      	ldr	r5, [r0, #0]
    6708:	605d      	str	r5, [r3, #4]
    670a:	b111      	cbz	r1, 6712 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x102>
    670c:	e002      	b.n	6714 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x104>
    670e:	2000      	movs	r0, #0
    6710:	bd38      	pop	{r3, r4, r5, pc}
    6712:	b662      	cpsie	i
    6714:	7a01      	ldrb	r1, [r0, #8]
    6716:	f88d 1000 	strb.w	r1, [sp]
    671a:	9900      	ldr	r1, [sp, #0]
    671c:	9100      	str	r1, [sp, #0]
    671e:	f89d 3000 	ldrb.w	r3, [sp]
    6722:	2b00      	cmp	r3, #0
    6724:	d1f4      	bne.n	6710 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>
    6726:	7014      	strb	r4, [r2, #0]
    6728:	bd38      	pop	{r3, r4, r5, pc}
    672a:	0000      	.short	0x0000
    672c:	20001328 	.word	0x20001328
    6730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6734:	b086      	sub	sp, #24
    6736:	000f      	movs	r7, r1
    6738:	4604      	mov	r4, r0
    673a:	4691      	mov	r9, r2
    673c:	d013      	beq.n	6766 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    673e:	6878      	ldr	r0, [r7, #4]
    6740:	b188      	cbz	r0, 6766 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    6742:	f100 0580 	add.w	r5, r0, #128	; 0x80
    6746:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    674a:	8806      	ldrh	r6, [r0, #0]
    674c:	4610      	mov	r0, r2
    674e:	f04f 0800 	mov.w	r8, #0
    6752:	2a12      	cmp	r2, #18
    6754:	d078      	beq.n	6848 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x238>
    6756:	dc09      	bgt.n	676c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    6758:	f04f 0a01 	mov.w	sl, #1
    675c:	2803      	cmp	r0, #3
    675e:	d00a      	beq.n	6776 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x166>
    6760:	2a0d      	cmp	r2, #13
    6762:	d170      	bne.n	6846 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6764:	e01a      	b.n	679c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18c>
    6766:	f240 210b 	movw	r1, #523	; 0x20b
    676a:	e0ac      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    676c:	281e      	cmp	r0, #30
    676e:	d04c      	beq.n	680a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1fa>
    6770:	2a1f      	cmp	r2, #31
    6772:	d17f      	bne.n	6874 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x264>
    6774:	e026      	b.n	67c4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b4>
    6776:	2d00      	cmp	r5, #0
    6778:	d00f      	beq.n	679a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18a>
    677a:	f884 8001 	strb.w	r8, [r4, #1]
    677e:	f884 a000 	strb.w	sl, [r4]
    6782:	f884 8004 	strb.w	r8, [r4, #4]
    6786:	f8a4 6005 	strh.w	r6, [r4, #5]
    678a:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
    678e:	71e0      	strb	r0, [r4, #7]
    6790:	f835 0f60 	ldrh.w	r0, [r5, #96]!
    6794:	8120      	strh	r0, [r4, #8]
    6796:	8868      	ldrh	r0, [r5, #2]
    6798:	8160      	strh	r0, [r4, #10]
    679a:	e075      	b.n	6888 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    679c:	4630      	mov	r0, r6
    679e:	f7fe faf3 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    67a2:	b160      	cbz	r0, 67be <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ae>
    67a4:	f884 8001 	strb.w	r8, [r4, #1]
    67a8:	220d      	movs	r2, #13
    67aa:	7022      	strb	r2, [r4, #0]
    67ac:	80e6      	strh	r6, [r4, #6]
    67ae:	f8a4 a008 	strh.w	sl, [r4, #8]
    67b2:	4641      	mov	r1, r8
    67b4:	f884 a004 	strb.w	sl, [r4, #4]
    67b8:	f006 fd2d 	bl	d216 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    67bc:	e064      	b.n	6888 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    67be:	f240 1153 	movw	r1, #339	; 0x153
    67c2:	e080      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    67c4:	f7ff fde4 	bl	6390 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    67c8:	b3e8      	cbz	r0, 6846 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    67ca:	f887 8008 	strb.w	r8, [r7, #8]
    67ce:	4630      	mov	r0, r6
    67d0:	f8ad 6000 	strh.w	r6, [sp]
    67d4:	a902      	add	r1, sp, #8
    67d6:	f007 f87e 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    67da:	b110      	cbz	r0, 67e2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    67dc:	f240 1125 	movw	r1, #293	; 0x125
    67e0:	e071      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    67e2:	9803      	ldr	r0, [sp, #12]
    67e4:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    67e8:	f88d 1002 	strb.w	r1, [sp, #2]
    67ec:	7841      	ldrb	r1, [r0, #1]
    67ee:	f88d 1003 	strb.w	r1, [sp, #3]
    67f2:	8840      	ldrh	r0, [r0, #2]
    67f4:	f8ad 0004 	strh.w	r0, [sp, #4]
    67f8:	2102      	movs	r1, #2
    67fa:	4668      	mov	r0, sp
    67fc:	f009 fc8c 	bl	10118 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6800:	2800      	cmp	r0, #0
    6802:	d034      	beq.n	686e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    6804:	f240 113b 	movw	r1, #315	; 0x13b
    6808:	e05d      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    680a:	f7ff fdb7 	bl	637c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    680e:	b1d0      	cbz	r0, 6846 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6810:	f887 8008 	strb.w	r8, [r7, #8]
    6814:	a903      	add	r1, sp, #12
    6816:	4630      	mov	r0, r6
    6818:	f009 fae2 	bl	fde0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    681c:	b110      	cbz	r0, 6824 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x214>
    681e:	f44f 71a1 	mov.w	r1, #322	; 0x142
    6822:	e050      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6824:	f8ad 6000 	strh.w	r6, [sp]
    6828:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    682c:	f8ad 0002 	strh.w	r0, [sp, #2]
    6830:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6834:	f8ad 0004 	strh.w	r0, [sp, #4]
    6838:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    683c:	f8ad 0006 	strh.w	r0, [sp, #6]
    6840:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6844:	e001      	b.n	684a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23a>
    6846:	e015      	b.n	6874 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x264>
    6848:	e009      	b.n	685e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24e>
    684a:	f8ad 0008 	strh.w	r0, [sp, #8]
    684e:	4668      	mov	r0, sp
    6850:	f009 faff 	bl	fe52 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6854:	2800      	cmp	r0, #0
    6856:	d00a      	beq.n	686e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    6858:	f240 114b 	movw	r1, #331	; 0x14b
    685c:	e033      	b.n	68c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    685e:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    6862:	f000 0001 	and.w	r0, r0, #1
    6866:	f7ff fd7d 	bl	6364 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    686a:	b130      	cbz	r0, 687a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    686c:	2000      	movs	r0, #0
    686e:	b006      	add	sp, #24
    6870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6874:	f1b9 0f0a 	cmp.w	r9, #10
    6878:	d008      	beq.n	688c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x27c>
    687a:	4814      	ldr	r0, [pc, #80]	; (68cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2bc>)
    687c:	6803      	ldr	r3, [r0, #0]
    687e:	b11b      	cbz	r3, 6888 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    6880:	6878      	ldr	r0, [r7, #4]
    6882:	464a      	mov	r2, r9
    6884:	4621      	mov	r1, r4
    6886:	4798      	blx	r3
    6888:	2001      	movs	r0, #1
    688a:	e7f0      	b.n	686e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    688c:	4630      	mov	r0, r6
    688e:	f7fe fa65 	bl	4d5c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6892:	f006 fb51 	bl	cf38 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6896:	b1a0      	cbz	r0, 68c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b2>
    6898:	4630      	mov	r0, r6
    689a:	f006 ff4c 	bl	d736 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    689e:	2100      	movs	r1, #0
    68a0:	4630      	mov	r0, r6
    68a2:	f7fe f8e5 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    68a6:	2d00      	cmp	r5, #0
    68a8:	d0ee      	beq.n	6888 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    68aa:	f884 8001 	strb.w	r8, [r4, #1]
    68ae:	210a      	movs	r1, #10
    68b0:	7021      	strb	r1, [r4, #0]
    68b2:	f884 8004 	strb.w	r8, [r4, #4]
    68b6:	f8a4 6005 	strh.w	r6, [r4, #5]
    68ba:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
    68be:	71e0      	strb	r0, [r4, #7]
    68c0:	e7e2      	b.n	6888 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    68c2:	f44f 7113 	mov.w	r1, #588	; 0x24c
    68c6:	2010      	movs	r0, #16
    68c8:	f7fd fe50 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68cc:	2000011c 	.word	0x2000011c
    68d0:	4809      	ldr	r0, [pc, #36]	; (68f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2e8>)
    68d2:	b510      	push	{r4, lr}
    68d4:	2100      	movs	r1, #0
    68d6:	6141      	str	r1, [r0, #20]
    68d8:	6181      	str	r1, [r0, #24]
    68da:	61c1      	str	r1, [r0, #28]
    68dc:	6201      	str	r1, [r0, #32]
    68de:	2212      	movs	r2, #18
    68e0:	f005 fe55 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    68e4:	4804      	ldr	r0, [pc, #16]	; (68f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2e8>)
    68e6:	3018      	adds	r0, #24
    68e8:	1f02      	subs	r2, r0, #4
    68ea:	1f01      	subs	r1, r0, #4
    68ec:	2301      	movs	r3, #1
    68ee:	6050      	str	r0, [r2, #4]
    68f0:	730b      	strb	r3, [r1, #12]
    68f2:	6010      	str	r0, [r2, #0]
    68f4:	bd10      	pop	{r4, pc}
    68f6:	0000      	.short	0x0000
    68f8:	20001314 	.word	0x20001314

000068fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    68fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    68fe:	f06f 021f 	mvn.w	r2, #31
    6902:	0c01      	lsrs	r1, r0, #16
    6904:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    6908:	251f      	movs	r5, #31
    690a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    690e:	3854      	subs	r0, #84	; 0x54
    6910:	d00d      	beq.n	692e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6912:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6916:	3855      	subs	r0, #85	; 0x55
    6918:	d009      	beq.n	692e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    691a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    691e:	38aa      	subs	r0, #170	; 0xaa
    6920:	d005      	beq.n	692e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6922:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    6926:	38aa      	subs	r0, #170	; 0xaa
    6928:	d001      	beq.n	692e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    692a:	2001      	movs	r0, #1
    692c:	e000      	b.n	6930 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    692e:	2000      	movs	r0, #0
    6930:	2200      	movs	r2, #0
    6932:	4613      	mov	r3, r2
    6934:	ea4f 0402 	mov.w	r4, r2
    6938:	ea82 0701 	eor.w	r7, r2, r1
    693c:	43ff      	mvns	r7, r7
    693e:	431f      	orrs	r7, r3
    6940:	1c7f      	adds	r7, r7, #1
    6942:	d00f      	beq.n	6964 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6944:	f006 0701 	and.w	r7, r6, #1
    6948:	0852      	lsrs	r2, r2, #1
    694a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    694e:	f005 0701 	and.w	r7, r5, #1
    6952:	085b      	lsrs	r3, r3, #1
    6954:	0876      	lsrs	r6, r6, #1
    6956:	086d      	lsrs	r5, r5, #1
    6958:	1c64      	adds	r4, r4, #1
    695a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    695e:	2c16      	cmp	r4, #22
    6960:	d3ea      	bcc.n	6938 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6964:	2000      	movs	r0, #0
    6966:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006968 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    6968:	b510      	push	{r4, lr}
    696a:	4804      	ldr	r0, [pc, #16]	; (697c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    696c:	f007 fd23 	bl	e3b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    6970:	4802      	ldr	r0, [pc, #8]	; (697c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    6972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6976:	3008      	adds	r0, #8
    6978:	f007 bd1d 	b.w	e3b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    697c:	20000120 	.word	0x20000120

00006980 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    6980:	4801      	ldr	r0, [pc, #4]	; (6988 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    6982:	f000 b809 	b.w	6998 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    6986:	0000      	.short	0x0000
    6988:	20000120 	.word	0x20000120

0000698c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    698c:	4801      	ldr	r0, [pc, #4]	; (6994 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    698e:	f000 b803 	b.w	6998 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    6992:	0000      	.short	0x0000
    6994:	20000128 	.word	0x20000128
    6998:	b510      	push	{r4, lr}
    699a:	e9d0 2100 	ldrd	r2, r1, [r0]
    699e:	4b09      	ldr	r3, [pc, #36]	; (69c4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    69a0:	4c09      	ldr	r4, [pc, #36]	; (69c8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    69a2:	4353      	muls	r3, r2
    69a4:	4354      	muls	r4, r2
    69a6:	4051      	eors	r1, r2
    69a8:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    69ac:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    69b0:	ea4f 41f1 	mov.w	r1, r1, ror #19
    69b4:	e9c0 2100 	strd	r2, r1, [r0]
    69b8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    69bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    69c0:	4618      	mov	r0, r3
    69c2:	bd10      	pop	{r4, pc}
    69c4:	c6ef3760 	.word	0xc6ef3760
    69c8:	9e3779bb 	.word	0x9e3779bb

000069cc <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    69cc:	b510      	push	{r4, lr}
    69ce:	6840      	ldr	r0, [r0, #4]
    69d0:	2200      	movs	r2, #0
    69d2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    69d6:	3080      	adds	r0, #128	; 0x80
    69d8:	1d09      	adds	r1, r1, #4
    69da:	07db      	lsls	r3, r3, #31
    69dc:	d001      	beq.n	69e2 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    69de:	2001      	movs	r0, #1
    69e0:	bd10      	pop	{r4, pc}
    69e2:	790c      	ldrb	r4, [r1, #4]
    69e4:	680b      	ldr	r3, [r1, #0]
    69e6:	4909      	ldr	r1, [pc, #36]	; (6a0c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>)
    69e8:	400b      	ands	r3, r1
    69ea:	f004 0107 	and.w	r1, r4, #7
    69ee:	6643      	str	r3, [r0, #100]	; 0x64
    69f0:	6681      	str	r1, [r0, #104]	; 0x68
    69f2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    69f6:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
    69fa:	1c49      	adds	r1, r1, #1
    69fc:	f880 1052 	strb.w	r1, [r0, #82]	; 0x52
    6a00:	6841      	ldr	r1, [r0, #4]
    6a02:	f041 0101 	orr.w	r1, r1, #1
    6a06:	6041      	str	r1, [r0, #4]
    6a08:	2000      	movs	r0, #0
    6a0a:	bd10      	pop	{r4, pc}
    6a0c:	3304492f 	.word	0x3304492f

00006a10 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    6a10:	b510      	push	{r4, lr}
    6a12:	1d04      	adds	r4, r0, #4
    6a14:	f003 fe48 	bl	a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6a18:	4a03      	ldr	r2, [pc, #12]	; (6a28 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    6a1a:	f001 0107 	and.w	r1, r1, #7
    6a1e:	4010      	ands	r0, r2
    6a20:	6020      	str	r0, [r4, #0]
    6a22:	6061      	str	r1, [r4, #4]
    6a24:	bd10      	pop	{r4, pc}
    6a26:	0000      	.short	0x0000
    6a28:	3304492f 	.word	0x3304492f

00006a2c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    6a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a30:	4605      	mov	r5, r0
    6a32:	7803      	ldrb	r3, [r0, #0]
    6a34:	6840      	ldr	r0, [r0, #4]
    6a36:	1d0f      	adds	r7, r1, #4
    6a38:	f100 0680 	add.w	r6, r0, #128	; 0x80
    6a3c:	f500 74a2 	add.w	r4, r0, #324	; 0x144
    6a40:	4680      	mov	r8, r0
    6a42:	f04f 0900 	mov.w	r9, #0
    6a46:	7d72      	ldrb	r2, [r6, #21]
    6a48:	2107      	movs	r1, #7
    6a4a:	4630      	mov	r0, r6
    6a4c:	f006 ff6d 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6a50:	b300      	cbz	r0, 6a94 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x68>
    6a52:	6838      	ldr	r0, [r7, #0]
    6a54:	4a10      	ldr	r2, [pc, #64]	; (6a98 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x6c>)
    6a56:	7939      	ldrb	r1, [r7, #4]
    6a58:	4010      	ands	r0, r2
    6a5a:	6670      	str	r0, [r6, #100]	; 0x64
    6a5c:	f001 0107 	and.w	r1, r1, #7
    6a60:	66b1      	str	r1, [r6, #104]	; 0x68
    6a62:	f886 904e 	strb.w	r9, [r6, #78]	; 0x4e
    6a66:	f886 9015 	strb.w	r9, [r6, #21]
    6a6a:	f8b8 1000 	ldrh.w	r1, [r8]
    6a6e:	f8a4 106c 	strh.w	r1, [r4, #108]	; 0x6c
    6a72:	f884 906a 	strb.w	r9, [r4, #106]	; 0x6a
    6a76:	6839      	ldr	r1, [r7, #0]
    6a78:	f8c4 106e 	str.w	r1, [r4, #110]	; 0x6e
    6a7c:	6879      	ldr	r1, [r7, #4]
    6a7e:	f8c4 1072 	str.w	r1, [r4, #114]	; 0x72
    6a82:	2207      	movs	r2, #7
    6a84:	f104 0060 	add.w	r0, r4, #96	; 0x60
    6a88:	6869      	ldr	r1, [r5, #4]
    6a8a:	f7ff fce1 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6a8e:	2000      	movs	r0, #0
    6a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a94:	2001      	movs	r0, #1
    6a96:	e7fb      	b.n	6a90 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    6a98:	3304492f 	.word	0x3304492f

00006a9c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    6a9c:	b570      	push	{r4, r5, r6, lr}
    6a9e:	1d0d      	adds	r5, r1, #4
    6aa0:	6844      	ldr	r4, [r0, #4]
    6aa2:	f003 fe01 	bl	a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6aa6:	4a06      	ldr	r2, [pc, #24]	; (6ac0 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    6aa8:	4010      	ands	r0, r2
    6aaa:	f001 0207 	and.w	r2, r1, #7
    6aae:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    6ab2:	4001      	ands	r1, r0
    6ab4:	f361 0007 	bfi	r0, r1, #0, #8
    6ab8:	6028      	str	r0, [r5, #0]
    6aba:	606a      	str	r2, [r5, #4]
    6abc:	bd70      	pop	{r4, r5, r6, pc}
    6abe:	0000      	.short	0x0000
    6ac0:	3304492f 	.word	0x3304492f

00006ac4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    6ac4:	4a04      	ldr	r2, [pc, #16]	; (6ad8 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    6ac6:	6812      	ldr	r2, [r2, #0]
    6ac8:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    6acc:	434b      	muls	r3, r1
    6ace:	4342      	muls	r2, r0
    6ad0:	eb03 3022 	add.w	r0, r3, r2, asr #12
    6ad4:	4770      	bx	lr
    6ad6:	0000      	.short	0x0000
    6ad8:	20000130 	.word	0x20000130

00006adc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6adc:	b570      	push	{r4, r5, r6, lr}
    6ade:	4604      	mov	r4, r0
    6ae0:	7c00      	ldrb	r0, [r0, #16]
    6ae2:	b300      	cbz	r0, 6b26 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6ae4:	2802      	cmp	r0, #2
    6ae6:	d01e      	beq.n	6b26 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6ae8:	f05f 0001 	movs.w	r0, #1
    6aec:	f104 0151 	add.w	r1, r4, #81	; 0x51
    6af0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    6af4:	460d      	mov	r5, r1
    6af6:	b1c0      	cbz	r0, 6b2a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    6af8:	7de0      	ldrb	r0, [r4, #23]
    6afa:	b1f0      	cbz	r0, 6b3a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    6afc:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6b00:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    6b04:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    6b08:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    6b0c:	7c20      	ldrb	r0, [r4, #16]
    6b0e:	f007 fd0c 	bl	e52a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xe0>
    6b12:	7620      	strb	r0, [r4, #24]
    6b14:	2008      	movs	r0, #8
    6b16:	7660      	strb	r0, [r4, #25]
    6b18:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    6b1c:	4629      	mov	r1, r5
    6b1e:	f007 fcf0 	bl	e502 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb8>
    6b22:	b9a8      	cbnz	r0, 6b50 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    6b24:	e00e      	b.n	6b44 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    6b26:	2000      	movs	r0, #0
    6b28:	e7e0      	b.n	6aec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    6b2a:	2000      	movs	r0, #0
    6b2c:	f7fe fbba 	bl	52a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6b30:	2800      	cmp	r0, #0
    6b32:	d1eb      	bne.n	6b0c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    6b34:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
    6b38:	e001      	b.n	6b3e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    6b3a:	f240 41bc 	movw	r1, #1212	; 0x4bc
    6b3e:	202d      	movs	r0, #45	; 0x2d
    6b40:	f7fd fd14 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b44:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    6b48:	4629      	mov	r1, r5
    6b4a:	f007 fce3 	bl	e514 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    6b4e:	b100      	cbz	r0, 6b52 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6b50:	2001      	movs	r0, #1
    6b52:	76a0      	strb	r0, [r4, #26]
    6b54:	7e20      	ldrb	r0, [r4, #24]
    6b56:	b130      	cbz	r0, 6b66 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    6b58:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    6b5c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6b60:	f006 fe85 	bl	d86e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6b64:	7660      	strb	r0, [r4, #25]
    6b66:	f7ff f9b3 	bl	5ed0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6b6a:	490c      	ldr	r1, [pc, #48]	; (6b9c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    6b6c:	fba0 2301 	umull	r2, r3, r0, r1
    6b70:	f104 0048 	add.w	r0, r4, #72	; 0x48
    6b74:	f007 fea3 	bl	e8be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    6b78:	2100      	movs	r1, #0
    6b7a:	4620      	mov	r0, r4
    6b7c:	f007 fe4d 	bl	e81a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    6b80:	2000      	movs	r0, #0
    6b82:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    6b86:	78a0      	ldrb	r0, [r4, #2]
    6b88:	0740      	lsls	r0, r0, #29
    6b8a:	d505      	bpl.n	6b98 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    6b8c:	4620      	mov	r0, r4
    6b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b92:	2100      	movs	r1, #0
    6b94:	f000 bda8 	b.w	76e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>
    6b98:	bd70      	pop	{r4, r5, r6, pc}
    6b9a:	0000      	.short	0x0000
    6b9c:	000f4240 	.word	0x000f4240

00006ba0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6ba0:	b530      	push	{r4, r5, lr}
    6ba2:	460c      	mov	r4, r1
    6ba4:	b08d      	sub	sp, #52	; 0x34
    6ba6:	4605      	mov	r5, r0
    6ba8:	4601      	mov	r1, r0
    6baa:	2224      	movs	r2, #36	; 0x24
    6bac:	a802      	add	r0, sp, #8
    6bae:	f005 fc74 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6bb2:	a80b      	add	r0, sp, #44	; 0x2c
    6bb4:	f007 fee0 	bl	e978 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6bb8:	7aa0      	ldrb	r0, [r4, #10]
    6bba:	f88d 0018 	strb.w	r0, [sp, #24]
    6bbe:	7820      	ldrb	r0, [r4, #0]
    6bc0:	f88d 0008 	strb.w	r0, [sp, #8]
    6bc4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6bc8:	f8ad 0000 	strh.w	r0, [sp]
    6bcc:	f89d 0000 	ldrb.w	r0, [sp]
    6bd0:	f000 0101 	and.w	r1, r0, #1
    6bd4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6bd8:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6bdc:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6be0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6be4:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6be8:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6bec:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6bf0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6bf4:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6bf8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6bfc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6c00:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6c04:	f8ad 000a 	strh.w	r0, [sp, #10]
    6c08:	7d20      	ldrb	r0, [r4, #20]
    6c0a:	2801      	cmp	r0, #1
    6c0c:	d006      	beq.n	6c1c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6c0e:	2802      	cmp	r0, #2
    6c10:	d004      	beq.n	6c1c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6c12:	f240 21e2 	movw	r1, #738	; 0x2e2
    6c16:	2006      	movs	r0, #6
    6c18:	f7fd fca8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c1c:	f88d 000c 	strb.w	r0, [sp, #12]
    6c20:	7a61      	ldrb	r1, [r4, #9]
    6c22:	a80b      	add	r0, sp, #44	; 0x2c
    6c24:	f007 fe8f 	bl	e946 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6c28:	7d20      	ldrb	r0, [r4, #20]
    6c2a:	2101      	movs	r1, #1
    6c2c:	2802      	cmp	r0, #2
    6c2e:	d102      	bne.n	6c36 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6c30:	7d60      	ldrb	r0, [r4, #21]
    6c32:	1c40      	adds	r0, r0, #1
    6c34:	b2c1      	uxtb	r1, r0
    6c36:	7ea0      	ldrb	r0, [r4, #26]
    6c38:	1c40      	adds	r0, r0, #1
    6c3a:	b2c2      	uxtb	r2, r0
    6c3c:	a80b      	add	r0, sp, #44	; 0x2c
    6c3e:	f007 fe49 	bl	e8d4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6c42:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    6c46:	0700      	lsls	r0, r0, #28
    6c48:	d501      	bpl.n	6c4e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    6c4a:	2000      	movs	r0, #0
    6c4c:	e020      	b.n	6c90 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    6c4e:	a80b      	add	r0, sp, #44	; 0x2c
    6c50:	f007 fe52 	bl	e8f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6c54:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    6c58:	2228      	movs	r2, #40	; 0x28
    6c5a:	f000 fde9 	bl	7830 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6c5e:	f240 2171 	movw	r1, #625	; 0x271
    6c62:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    6c66:	fbb0 f0f1 	udiv	r0, r0, r1
    6c6a:	4348      	muls	r0, r1
    6c6c:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6c70:	f240 2371 	movw	r3, #625	; 0x271
    6c74:	0a0a      	lsrs	r2, r1, #8
    6c76:	f240 2171 	movw	r1, #625	; 0x271
    6c7a:	434a      	muls	r2, r1
    6c7c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    6c80:	0a09      	lsrs	r1, r1, #8
    6c82:	4359      	muls	r1, r3
    6c84:	4290      	cmp	r0, r2
    6c86:	d801      	bhi.n	6c8c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    6c88:	9204      	str	r2, [sp, #16]
    6c8a:	e004      	b.n	6c96 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6c8c:	4288      	cmp	r0, r1
    6c8e:	d801      	bhi.n	6c94 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6c90:	9004      	str	r0, [sp, #16]
    6c92:	e000      	b.n	6c96 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6c94:	9104      	str	r1, [sp, #16]
    6c96:	7ca0      	ldrb	r0, [r4, #18]
    6c98:	f88d 0017 	strb.w	r0, [sp, #23]
    6c9c:	7e20      	ldrb	r0, [r4, #24]
    6c9e:	2801      	cmp	r0, #1
    6ca0:	d000      	beq.n	6ca4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6ca2:	2000      	movs	r0, #0
    6ca4:	f88d 0014 	strb.w	r0, [sp, #20]
    6ca8:	6b68      	ldr	r0, [r5, #52]	; 0x34
    6caa:	f006 fc4c 	bl	d546 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    6cae:	6b68      	ldr	r0, [r5, #52]	; 0x34
    6cb0:	f006 fced 	bl	d68e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    6cb4:	2224      	movs	r2, #36	; 0x24
    6cb6:	a902      	add	r1, sp, #8
    6cb8:	4628      	mov	r0, r5
    6cba:	f005 fbee 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6cbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6cc0:	62a8      	str	r0, [r5, #40]	; 0x28
    6cc2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    6cc6:	85a8      	strh	r0, [r5, #44]	; 0x2c
    6cc8:	7ae0      	ldrb	r0, [r4, #11]
    6cca:	b168      	cbz	r0, 6ce8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6ccc:	2802      	cmp	r0, #2
    6cce:	d00b      	beq.n	6ce8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6cd0:	f05f 0001 	movs.w	r0, #1
    6cd4:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    6cd8:	68e0      	ldr	r0, [r4, #12]
    6cda:	65a8      	str	r0, [r5, #88]	; 0x58
    6cdc:	8a20      	ldrh	r0, [r4, #16]
    6cde:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    6ce2:	b00d      	add	sp, #52	; 0x34
    6ce4:	2000      	movs	r0, #0
    6ce6:	bd30      	pop	{r4, r5, pc}
    6ce8:	2000      	movs	r0, #0
    6cea:	e7f3      	b.n	6cd4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00006cec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    6cec:	4a0a      	ldr	r2, [pc, #40]	; (6d18 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    6cee:	b510      	push	{r4, lr}
    6cf0:	2100      	movs	r1, #0
    6cf2:	7011      	strb	r1, [r2, #0]
    6cf4:	4c09      	ldr	r4, [pc, #36]	; (6d1c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    6cf6:	6060      	str	r0, [r4, #4]
    6cf8:	f000 f822 	bl	6d40 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    6cfc:	b110      	cbz	r0, 6d04 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    6cfe:	f44f 714b 	mov.w	r1, #812	; 0x32c
    6d02:	e004      	b.n	6d0e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6d04:	68a0      	ldr	r0, [r4, #8]
    6d06:	2800      	cmp	r0, #0
    6d08:	d104      	bne.n	6d14 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    6d0a:	f240 312f 	movw	r1, #815	; 0x32f
    6d0e:	202d      	movs	r0, #45	; 0x2d
    6d10:	f7fd fc2c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d14:	bd10      	pop	{r4, pc}
    6d16:	0000      	.short	0x0000
    6d18:	20001338 	.word	0x20001338
    6d1c:	20000134 	.word	0x20000134

00006d20 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6d20:	4902      	ldr	r1, [pc, #8]	; (6d2c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    6d22:	4801      	ldr	r0, [pc, #4]	; (6d28 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6d24:	6088      	str	r0, [r1, #8]
    6d26:	4770      	bx	lr
    6d28:	00007818 	.word	0x00007818
    6d2c:	20000134 	.word	0x20000134

00006d30 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    6d30:	4902      	ldr	r1, [pc, #8]	; (6d3c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    6d32:	6008      	str	r0, [r1, #0]
    6d34:	6889      	ldr	r1, [r1, #8]
    6d36:	6809      	ldr	r1, [r1, #0]
    6d38:	4708      	bx	r1
    6d3a:	0000      	.short	0x0000
    6d3c:	20000134 	.word	0x20000134

00006d40 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    6d40:	4808      	ldr	r0, [pc, #32]	; (6d64 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6d42:	b510      	push	{r4, lr}
    6d44:	7800      	ldrb	r0, [r0, #0]
    6d46:	b110      	cbz	r0, 6d4e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6d48:	240c      	movs	r4, #12
    6d4a:	4620      	mov	r0, r4
    6d4c:	bd10      	pop	{r4, pc}
    6d4e:	2400      	movs	r4, #0
    6d50:	2218      	movs	r2, #24
    6d52:	4621      	mov	r1, r4
    6d54:	4803      	ldr	r0, [pc, #12]	; (6d64 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6d56:	f005 fc1a 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6d5a:	f003 fec7 	bl	aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6d5e:	f003 fceb 	bl	a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6d62:	e7f2      	b.n	6d4a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    6d64:	20001338 	.word	0x20001338

00006d68 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6d68:	4904      	ldr	r1, [pc, #16]	; (6d7c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    6d6a:	b510      	push	{r4, lr}
    6d6c:	7809      	ldrb	r1, [r1, #0]
    6d6e:	2901      	cmp	r1, #1
    6d70:	d101      	bne.n	6d76 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    6d72:	f000 fb85 	bl	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6d76:	2000      	movs	r0, #0
    6d78:	bd10      	pop	{r4, pc}
    6d7a:	0000      	.short	0x0000
    6d7c:	20001338 	.word	0x20001338

00006d80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    6d80:	4902      	ldr	r1, [pc, #8]	; (6d8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    6d82:	4801      	ldr	r0, [pc, #4]	; (6d88 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    6d84:	6008      	str	r0, [r1, #0]
    6d86:	4770      	bx	lr
    6d88:	000075b1 	.word	0x000075b1
    6d8c:	20000140 	.word	0x20000140
    6d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d94:	000f      	movs	r7, r1
    6d96:	4604      	mov	r4, r0
    6d98:	d023      	beq.n	6de2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    6d9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6d9e:	4605      	mov	r5, r0
    6da0:	f007 fdd3 	bl	e94a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6da4:	b9b0      	cbnz	r0, 6dd4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6da6:	78a0      	ldrb	r0, [r4, #2]
    6da8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6dac:	b350      	cbz	r0, 6e04 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    6dae:	4628      	mov	r0, r5
    6db0:	f007 fda2 	bl	e8f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6db4:	4606      	mov	r6, r0
    6db6:	4628      	mov	r0, r5
    6db8:	f007 fdc7 	bl	e94a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6dbc:	1a30      	subs	r0, r6, r0
    6dbe:	b2c0      	uxtb	r0, r0
    6dc0:	f007 fe18 	bl	e9f4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6dc4:	4601      	mov	r1, r0
    6dc6:	4835      	ldr	r0, [pc, #212]	; (6e9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    6dc8:	6842      	ldr	r2, [r0, #4]
    6dca:	4411      	add	r1, r2
    6dcc:	6041      	str	r1, [r0, #4]
    6dce:	4628      	mov	r0, r5
    6dd0:	f007 fdd9 	bl	e986 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6dd4:	4628      	mov	r0, r5
    6dd6:	f007 fd9b 	bl	e910 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6dda:	4601      	mov	r1, r0
    6ddc:	4620      	mov	r0, r4
    6dde:	f007 fd58 	bl	e892 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    6de2:	4d2f      	ldr	r5, [pc, #188]	; (6ea0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6de4:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    6de8:	2100      	movs	r1, #0
    6dea:	6868      	ldr	r0, [r5, #4]
    6dec:	8001      	strh	r1, [r0, #0]
    6dee:	f007 fcf2 	bl	e7d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6df2:	8860      	ldrh	r0, [r4, #2]
    6df4:	2813      	cmp	r0, #19
    6df6:	d013      	beq.n	6e20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    6df8:	dc09      	bgt.n	6e0e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    6dfa:	2810      	cmp	r0, #16
    6dfc:	d036      	beq.n	6e6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    6dfe:	2812      	cmp	r0, #18
    6e00:	d109      	bne.n	6e16 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    6e02:	e031      	b.n	6e68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6e04:	4620      	mov	r0, r4
    6e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e0a:	f000 bb39 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6e0e:	2815      	cmp	r0, #21
    6e10:	d00f      	beq.n	6e32 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6e12:	281d      	cmp	r0, #29
    6e14:	d00d      	beq.n	6e32 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6e16:	f240 6172 	movw	r1, #1650	; 0x672
    6e1a:	202d      	movs	r0, #45	; 0x2d
    6e1c:	f7fd fba6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e20:	2100      	movs	r1, #0
    6e22:	6868      	ldr	r0, [r5, #4]
    6e24:	f006 ff9a 	bl	dd5c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6e28:	2101      	movs	r1, #1
    6e2a:	6868      	ldr	r0, [r5, #4]
    6e2c:	f007 fcd3 	bl	e7d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6e30:	e020      	b.n	6e74 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6e32:	2101      	movs	r1, #1
    6e34:	6868      	ldr	r0, [r5, #4]
    6e36:	f006 ff91 	bl	dd5c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6e3a:	2101      	movs	r1, #1
    6e3c:	6868      	ldr	r0, [r5, #4]
    6e3e:	f007 fcca 	bl	e7d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6e42:	b136      	cbz	r6, 6e52 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    6e44:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    6e48:	6868      	ldr	r0, [r5, #4]
    6e4a:	f006 ffa2 	bl	dd92 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    6e4e:	2101      	movs	r1, #1
    6e50:	e006      	b.n	6e60 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    6e52:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6e56:	6868      	ldr	r0, [r5, #4]
    6e58:	f006 ff9b 	bl	dd92 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    6e5c:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    6e60:	6868      	ldr	r0, [r5, #4]
    6e62:	f006 ff9c 	bl	dd9e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    6e66:	e005      	b.n	6e74 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6e68:	2106      	movs	r1, #6
    6e6a:	e000      	b.n	6e6e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    6e6c:	2102      	movs	r1, #2
    6e6e:	6868      	ldr	r0, [r5, #4]
    6e70:	f006 ff74 	bl	dd5c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6e74:	4620      	mov	r0, r4
    6e76:	f000 fcad 	bl	77d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>
    6e7a:	8860      	ldrh	r0, [r4, #2]
    6e7c:	281d      	cmp	r0, #29
    6e7e:	d007      	beq.n	6e90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    6e80:	2815      	cmp	r0, #21
    6e82:	d005      	beq.n	6e90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    6e84:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    6e88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6e8a:	6868      	ldr	r0, [r5, #4]
    6e8c:	f006 ff56 	bl	dd3c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    6e90:	4639      	mov	r1, r7
    6e92:	4620      	mov	r0, r4
    6e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e98:	f000 b9f0 	b.w	727c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    6e9c:	20001338 	.word	0x20001338
    6ea0:	20000134 	.word	0x20000134
    6ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ea8:	4d2e      	ldr	r5, [pc, #184]	; (6f64 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    6eaa:	4607      	mov	r7, r0
    6eac:	7828      	ldrb	r0, [r5, #0]
    6eae:	2802      	cmp	r0, #2
    6eb0:	d005      	beq.n	6ebe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6eb2:	7828      	ldrb	r0, [r5, #0]
    6eb4:	2803      	cmp	r0, #3
    6eb6:	d002      	beq.n	6ebe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6eb8:	f640 5129 	movw	r1, #3369	; 0xd29
    6ebc:	e028      	b.n	6f10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    6ebe:	4c2a      	ldr	r4, [pc, #168]	; (6f68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    6ec0:	6820      	ldr	r0, [r4, #0]
    6ec2:	7b01      	ldrb	r1, [r0, #12]
    6ec4:	b109      	cbz	r1, 6eca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    6ec6:	f007 fcef 	bl	e8a8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    6eca:	f8d4 c004 	ldr.w	ip, [r4, #4]
    6ece:	f04f 0800 	mov.w	r8, #0
    6ed2:	f89c 0000 	ldrb.w	r0, [ip]
    6ed6:	f000 060f 	and.w	r6, r0, #15
    6eda:	b33f      	cbz	r7, 6f2c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6edc:	6821      	ldr	r1, [r4, #0]
    6ede:	09c0      	lsrs	r0, r0, #7
    6ee0:	f101 0351 	add.w	r3, r1, #81	; 0x51
    6ee4:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    6ee8:	f10c 0109 	add.w	r1, ip, #9
    6eec:	f006 fc27 	bl	d73e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6ef0:	b1e0      	cbz	r0, 6f2c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6ef2:	4641      	mov	r1, r8
    6ef4:	6860      	ldr	r0, [r4, #4]
    6ef6:	f006 ff11 	bl	dd1c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    6efa:	b1b8      	cbz	r0, 6f2c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6efc:	782a      	ldrb	r2, [r5, #0]
    6efe:	6820      	ldr	r0, [r4, #0]
    6f00:	4631      	mov	r1, r6
    6f02:	2a02      	cmp	r2, #2
    6f04:	d007      	beq.n	6f16 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    6f06:	782a      	ldrb	r2, [r5, #0]
    6f08:	2a03      	cmp	r2, #3
    6f0a:	d004      	beq.n	6f16 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    6f0c:	f640 5102 	movw	r1, #3330	; 0xd02
    6f10:	202d      	movs	r0, #45	; 0x2d
    6f12:	f7fd fb2b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f16:	68a2      	ldr	r2, [r4, #8]
    6f18:	782b      	ldrb	r3, [r5, #0]
    6f1a:	6952      	ldr	r2, [r2, #20]
    6f1c:	f06f 0607 	mvn.w	r6, #7
    6f20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6f24:	58d2      	ldr	r2, [r2, r3]
    6f26:	4790      	blx	r2
    6f28:	4606      	mov	r6, r0
    6f2a:	e000      	b.n	6f2e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6f2c:	2601      	movs	r6, #1
    6f2e:	7ba8      	ldrb	r0, [r5, #14]
    6f30:	b118      	cbz	r0, 6f3a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    6f32:	f003 fddb 	bl	aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6f36:	f003 fbff 	bl	a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6f3a:	2e00      	cmp	r6, #0
    6f3c:	d00f      	beq.n	6f5e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    6f3e:	6820      	ldr	r0, [r4, #0]
    6f40:	f007 fd6e 	bl	ea20 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6f44:	b130      	cbz	r0, 6f54 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    6f46:	f003 fdf9 	bl	ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6f4a:	68a0      	ldr	r0, [r4, #8]
    6f4c:	6880      	ldr	r0, [r0, #8]
    6f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f52:	4700      	bx	r0
    6f54:	6820      	ldr	r0, [r4, #0]
    6f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f5a:	f000 ba91 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f62:	0000      	.short	0x0000
    6f64:	20001338 	.word	0x20001338
    6f68:	20000134 	.word	0x20000134
    6f6c:	b510      	push	{r4, lr}
    6f6e:	2903      	cmp	r1, #3
    6f70:	d002      	beq.n	6f78 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    6f72:	2905      	cmp	r1, #5
    6f74:	d10a      	bne.n	6f8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6f76:	e002      	b.n	6f7e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    6f78:	f000 fb7a 	bl	7670 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>
    6f7c:	e003      	b.n	6f86 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    6f7e:	4904      	ldr	r1, [pc, #16]	; (6f90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    6f80:	6809      	ldr	r1, [r1, #0]
    6f82:	b109      	cbz	r1, 6f88 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    6f84:	4788      	blx	r1
    6f86:	b108      	cbz	r0, 6f8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6f88:	2000      	movs	r0, #0
    6f8a:	bd10      	pop	{r4, pc}
    6f8c:	2001      	movs	r0, #1
    6f8e:	bd10      	pop	{r4, pc}
    6f90:	20000140 	.word	0x20000140
    6f94:	4a09      	ldr	r2, [pc, #36]	; (6fbc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    6f96:	0003      	movs	r3, r0
    6f98:	6810      	ldr	r0, [r2, #0]
    6f9a:	d001      	beq.n	6fa0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    6f9c:	f000 ba70 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6fa0:	2900      	cmp	r1, #0
    6fa2:	d009      	beq.n	6fb8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    6fa4:	6891      	ldr	r1, [r2, #8]
    6fa6:	4a06      	ldr	r2, [pc, #24]	; (6fc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    6fa8:	6909      	ldr	r1, [r1, #16]
    6faa:	7812      	ldrb	r2, [r2, #0]
    6fac:	f06f 030f 	mvn.w	r3, #15
    6fb0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6fb4:	5889      	ldr	r1, [r1, r2]
    6fb6:	4708      	bx	r1
    6fb8:	4770      	bx	lr
    6fba:	0000      	.short	0x0000
    6fbc:	20000134 	.word	0x20000134
    6fc0:	20001338 	.word	0x20001338
    6fc4:	b570      	push	{r4, r5, r6, lr}
    6fc6:	4604      	mov	r4, r0
    6fc8:	8840      	ldrh	r0, [r0, #2]
    6fca:	2810      	cmp	r0, #16
    6fcc:	d019      	beq.n	7002 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    6fce:	4d10      	ldr	r5, [pc, #64]	; (7010 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    6fd0:	7ba8      	ldrb	r0, [r5, #14]
    6fd2:	b120      	cbz	r0, 6fde <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    6fd4:	f003 fbd0 	bl	a778 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6fd8:	2040      	movs	r0, #64	; 0x40
    6fda:	f003 fd95 	bl	ab08 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6fde:	480d      	ldr	r0, [pc, #52]	; (7014 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    6fe0:	6840      	ldr	r0, [r0, #4]
    6fe2:	f004 f817 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6fe6:	78a0      	ldrb	r0, [r4, #2]
    6fe8:	0740      	lsls	r0, r0, #29
    6fea:	d404      	bmi.n	6ff6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    6fec:	2100      	movs	r1, #0
    6fee:	7922      	ldrb	r2, [r4, #4]
    6ff0:	4608      	mov	r0, r1
    6ff2:	f004 f887 	bl	b104 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6ff6:	2000      	movs	r0, #0
    6ff8:	f003 fec2 	bl	ad80 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6ffc:	2002      	movs	r0, #2
    6ffe:	7028      	strb	r0, [r5, #0]
    7000:	bd70      	pop	{r4, r5, r6, pc}
    7002:	4620      	mov	r0, r4
    7004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7008:	2101      	movs	r1, #1
    700a:	f7ff bec1 	b.w	6d90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    700e:	0000      	.short	0x0000
    7010:	20001338 	.word	0x20001338
    7014:	20000134 	.word	0x20000134
    7018:	b510      	push	{r4, lr}
    701a:	4c12      	ldr	r4, [pc, #72]	; (7064 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    701c:	6820      	ldr	r0, [r4, #0]
    701e:	f000 f825 	bl	706c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7022:	6820      	ldr	r0, [r4, #0]
    7024:	f007 fcfc 	bl	ea20 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7028:	2800      	cmp	r0, #0
    702a:	6820      	ldr	r0, [r4, #0]
    702c:	d00b      	beq.n	7046 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    702e:	490e      	ldr	r1, [pc, #56]	; (7068 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7030:	780a      	ldrb	r2, [r1, #0]
    7032:	2a02      	cmp	r2, #2
    7034:	d00b      	beq.n	704e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7036:	780a      	ldrb	r2, [r1, #0]
    7038:	2a03      	cmp	r2, #3
    703a:	d008      	beq.n	704e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    703c:	f640 4137 	movw	r1, #3127	; 0xc37
    7040:	202d      	movs	r0, #45	; 0x2d
    7042:	f7fd fa93 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    704a:	f000 ba19 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    704e:	68a2      	ldr	r2, [r4, #8]
    7050:	7809      	ldrb	r1, [r1, #0]
    7052:	68d2      	ldr	r2, [r2, #12]
    7054:	f06f 0307 	mvn.w	r3, #7
    7058:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    705c:	5851      	ldr	r1, [r2, r1]
    705e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7062:	4708      	bx	r1
    7064:	20000134 	.word	0x20000134
    7068:	20001338 	.word	0x20001338
    706c:	b510      	push	{r4, lr}
    706e:	7b01      	ldrb	r1, [r0, #12]
    7070:	b109      	cbz	r1, 7076 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    7072:	f007 fc19 	bl	e8a8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    7076:	4805      	ldr	r0, [pc, #20]	; (708c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    7078:	7b80      	ldrb	r0, [r0, #14]
    707a:	2800      	cmp	r0, #0
    707c:	d005      	beq.n	708a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    707e:	f003 fd35 	bl	aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7086:	f003 bb57 	b.w	a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    708a:	bd10      	pop	{r4, pc}
    708c:	20001338 	.word	0x20001338

00007090 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7094:	4d5d      	ldr	r5, [pc, #372]	; (720c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    7096:	4604      	mov	r4, r0
    7098:	b086      	sub	sp, #24
    709a:	7828      	ldrb	r0, [r5, #0]
    709c:	2800      	cmp	r0, #0
    709e:	d14e      	bne.n	713e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    70a0:	7820      	ldrb	r0, [r4, #0]
    70a2:	28ff      	cmp	r0, #255	; 0xff
    70a4:	d04b      	beq.n	713e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    70a6:	f04f 0800 	mov.w	r8, #0
    70aa:	f8a5 800c 	strh.w	r8, [r5, #12]
    70ae:	f8c5 8004 	str.w	r8, [r5, #4]
    70b2:	f885 8001 	strb.w	r8, [r5, #1]
    70b6:	f885 8002 	strb.w	r8, [r5, #2]
    70ba:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    70be:	4b54      	ldr	r3, [pc, #336]	; (7210 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    70c0:	4e54      	ldr	r6, [pc, #336]	; (7214 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    70c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    70c4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    70c8:	68b0      	ldr	r0, [r6, #8]
    70ca:	6840      	ldr	r0, [r0, #4]
    70cc:	9003      	str	r0, [sp, #12]
    70ce:	4668      	mov	r0, sp
    70d0:	f003 fe2a 	bl	ad28 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    70d4:	f003 fef8 	bl	aec8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    70d8:	f004 f968 	bl	b3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    70dc:	f003 fd06 	bl	aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    70e0:	f003 fb2a 	bl	a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    70e4:	484c      	ldr	r0, [pc, #304]	; (7218 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    70e6:	f004 f83f 	bl	b168 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    70ea:	484c      	ldr	r0, [pc, #304]	; (721c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    70ec:	f004 f846 	bl	b17c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    70f0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    70f4:	4607      	mov	r7, r0
    70f6:	f007 fc46 	bl	e986 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    70fa:	4638      	mov	r0, r7
    70fc:	f007 fc08 	bl	e910 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7100:	4601      	mov	r1, r0
    7102:	4620      	mov	r0, r4
    7104:	f007 fbc5 	bl	e892 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    7108:	f994 000e 	ldrsb.w	r0, [r4, #14]
    710c:	f003 ff60 	bl	afd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7110:	7921      	ldrb	r1, [r4, #4]
    7112:	2000      	movs	r0, #0
    7114:	f003 fd9c 	bl	ac50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7118:	2101      	movs	r1, #1
    711a:	60a8      	str	r0, [r5, #8]
    711c:	b198      	cbz	r0, 7146 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    711e:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7122:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7124:	f006 fa82 	bl	d62c <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7128:	4607      	mov	r7, r0
    712a:	f104 0140 	add.w	r1, r4, #64	; 0x40
    712e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7130:	f006 fa7f 	bl	d632 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    7134:	b14f      	cbz	r7, 714a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    7136:	f894 1020 	ldrb.w	r1, [r4, #32]
    713a:	b951      	cbnz	r1, 7152 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    713c:	e005      	b.n	714a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    713e:	200c      	movs	r0, #12
    7140:	b006      	add	sp, #24
    7142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7146:	7029      	strb	r1, [r5, #0]
    7148:	e05e      	b.n	7208 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    714a:	b120      	cbz	r0, 7156 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    714c:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    7150:	b108      	cbz	r0, 7156 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    7152:	2701      	movs	r7, #1
    7154:	e000      	b.n	7158 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    7156:	2700      	movs	r7, #0
    7158:	7ea0      	ldrb	r0, [r4, #26]
    715a:	b920      	cbnz	r0, 7166 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    715c:	7e20      	ldrb	r0, [r4, #24]
    715e:	b910      	cbnz	r0, 7166 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    7160:	78a0      	ldrb	r0, [r4, #2]
    7162:	0740      	lsls	r0, r0, #29
    7164:	d523      	bpl.n	71ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    7166:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    716a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    716e:	4050      	eors	r0, r2
    7170:	ea70 0101 	orns	r1, r0, r1
    7174:	d006      	beq.n	7184 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    7176:	f7fb fe13 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    717a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    717e:	1a80      	subs	r0, r0, r2
    7180:	4199      	sbcs	r1, r3
    7182:	d200      	bcs.n	7186 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6>
    7184:	b19f      	cbz	r7, 71ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    7186:	f7fe fea3 	bl	5ed0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    718a:	4925      	ldr	r1, [pc, #148]	; (7220 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>)
    718c:	fba0 2301 	umull	r2, r3, r0, r1
    7190:	f104 0048 	add.w	r0, r4, #72	; 0x48
    7194:	f007 fb93 	bl	e8be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    7198:	2101      	movs	r1, #1
    719a:	4620      	mov	r0, r4
    719c:	f007 fb3d 	bl	e81a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    71a0:	78a0      	ldrb	r0, [r4, #2]
    71a2:	0740      	lsls	r0, r0, #29
    71a4:	d503      	bpl.n	71ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    71a6:	2101      	movs	r1, #1
    71a8:	4620      	mov	r0, r4
    71aa:	f000 fa9d 	bl	76e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>
    71ae:	f7fe fee7 	bl	5f80 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    71b2:	6870      	ldr	r0, [r6, #4]
    71b4:	1cc0      	adds	r0, r0, #3
    71b6:	f006 fb4d 	bl	d854 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    71ba:	73a8      	strb	r0, [r5, #14]
    71bc:	78a0      	ldrb	r0, [r4, #2]
    71be:	07c0      	lsls	r0, r0, #31
    71c0:	d022      	beq.n	7208 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    71c2:	f8cd 8010 	str.w	r8, [sp, #16]
    71c6:	20ff      	movs	r0, #255	; 0xff
    71c8:	f8cd 8014 	str.w	r8, [sp, #20]
    71cc:	73e8      	strb	r0, [r5, #15]
    71ce:	69e6      	ldr	r6, [r4, #28]
    71d0:	f106 070a 	add.w	r7, r6, #10
    71d4:	e013      	b.n	71fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    71d6:	9c04      	ldr	r4, [sp, #16]
    71d8:	42b4      	cmp	r4, r6
    71da:	d010      	beq.n	71fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    71dc:	7a72      	ldrb	r2, [r6, #9]
    71de:	7a60      	ldrb	r0, [r4, #9]
    71e0:	463b      	mov	r3, r7
    71e2:	f104 010a 	add.w	r1, r4, #10
    71e6:	f006 faaa 	bl	d73e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    71ea:	b140      	cbz	r0, 71fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    71ec:	78a0      	ldrb	r0, [r4, #2]
    71ee:	73e8      	strb	r0, [r5, #15]
    71f0:	f8d4 0003 	ldr.w	r0, [r4, #3]
    71f4:	6128      	str	r0, [r5, #16]
    71f6:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    71fa:	82a8      	strh	r0, [r5, #20]
    71fc:	e004      	b.n	7208 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    71fe:	a804      	add	r0, sp, #16
    7200:	f7fd fbee 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7204:	2800      	cmp	r0, #0
    7206:	d0e6      	beq.n	71d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x146>
    7208:	2000      	movs	r0, #0
    720a:	e799      	b.n	7140 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    720c:	20001338 	.word	0x20001338
    7210:	000077f8 	.word	0x000077f8
    7214:	20000134 	.word	0x20000134
    7218:	8e89bed6 	.word	0x8e89bed6
    721c:	00555555 	.word	0x00555555
    7220:	000f4240 	.word	0x000f4240
    7224:	b510      	push	{r4, lr}
    7226:	4604      	mov	r4, r0
    7228:	f7ff ff32 	bl	7090 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    722c:	2800      	cmp	r0, #0
    722e:	d108      	bne.n	7242 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    7230:	4804      	ldr	r0, [pc, #16]	; (7244 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    7232:	7800      	ldrb	r0, [r0, #0]
    7234:	2801      	cmp	r0, #1
    7236:	d003      	beq.n	7240 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    7238:	2100      	movs	r1, #0
    723a:	4620      	mov	r0, r4
    723c:	f7ff fda8 	bl	6d90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7240:	2000      	movs	r0, #0
    7242:	bd10      	pop	{r4, pc}
    7244:	20001338 	.word	0x20001338
    7248:	480a      	ldr	r0, [pc, #40]	; (7274 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    724a:	b510      	push	{r4, lr}
    724c:	490a      	ldr	r1, [pc, #40]	; (7278 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    724e:	6804      	ldr	r4, [r0, #0]
    7250:	7808      	ldrb	r0, [r1, #0]
    7252:	2800      	cmp	r0, #0
    7254:	d00d      	beq.n	7272 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    7256:	7808      	ldrb	r0, [r1, #0]
    7258:	2802      	cmp	r0, #2
    725a:	d002      	beq.n	7262 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    725c:	7808      	ldrb	r0, [r1, #0]
    725e:	2803      	cmp	r0, #3
    7260:	d102      	bne.n	7268 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    7262:	4620      	mov	r0, r4
    7264:	f7ff ff02 	bl	706c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7268:	4620      	mov	r0, r4
    726a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    726e:	f000 b907 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    7272:	bd10      	pop	{r4, pc}
    7274:	20000134 	.word	0x20000134
    7278:	20001338 	.word	0x20001338
    727c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7280:	4604      	mov	r4, r0
    7282:	4827      	ldr	r0, [pc, #156]	; (7320 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    7284:	460d      	mov	r5, r1
    7286:	6840      	ldr	r0, [r0, #4]
    7288:	f003 fec4 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    728c:	4e25      	ldr	r6, [pc, #148]	; (7324 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    728e:	2004      	movs	r0, #4
    7290:	7030      	strb	r0, [r6, #0]
    7292:	b325      	cbz	r5, 72de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    7294:	8860      	ldrh	r0, [r4, #2]
    7296:	2810      	cmp	r0, #16
    7298:	d02a      	beq.n	72f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    729a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    729e:	4680      	mov	r8, r0
    72a0:	68b5      	ldr	r5, [r6, #8]
    72a2:	f007 fb29 	bl	e8f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    72a6:	4607      	mov	r7, r0
    72a8:	4640      	mov	r0, r8
    72aa:	f007 fb4e 	bl	e94a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    72ae:	1a38      	subs	r0, r7, r0
    72b0:	1e40      	subs	r0, r0, #1
    72b2:	b2c0      	uxtb	r0, r0
    72b4:	8861      	ldrh	r1, [r4, #2]
    72b6:	2228      	movs	r2, #40	; 0x28
    72b8:	f000 fada 	bl	7870 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    72bc:	4405      	add	r5, r0
    72be:	78a0      	ldrb	r0, [r4, #2]
    72c0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    72c4:	b130      	cbz	r0, 72d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    72c6:	6870      	ldr	r0, [r6, #4]
    72c8:	4405      	add	r5, r0
    72ca:	f007 fb97 	bl	e9fc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    72ce:	4428      	add	r0, r5
    72d0:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    72d4:	7922      	ldrb	r2, [r4, #4]
    72d6:	4629      	mov	r1, r5
    72d8:	2000      	movs	r0, #0
    72da:	f003 feb1 	bl	b040 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    72de:	8860      	ldrh	r0, [r4, #2]
    72e0:	2813      	cmp	r0, #19
    72e2:	d013      	beq.n	730c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    72e4:	dc09      	bgt.n	72fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26a>
    72e6:	2810      	cmp	r0, #16
    72e8:	d017      	beq.n	731a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    72ea:	2812      	cmp	r0, #18
    72ec:	d109      	bne.n	7302 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    72ee:	e00d      	b.n	730c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    72f0:	7921      	ldrb	r1, [r4, #4]
    72f2:	2000      	movs	r0, #0
    72f4:	f003 fc72 	bl	abdc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    72f8:	e7f1      	b.n	72de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    72fa:	2815      	cmp	r0, #21
    72fc:	d006      	beq.n	730c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    72fe:	281d      	cmp	r0, #29
    7300:	d004      	beq.n	730c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7302:	f640 51b8 	movw	r1, #3512	; 0xdb8
    7306:	202d      	movs	r0, #45	; 0x2d
    7308:	f7fd f930 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    730c:	7922      	ldrb	r2, [r4, #4]
    730e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7312:	2101      	movs	r1, #1
    7314:	2000      	movs	r0, #0
    7316:	f003 bef5 	b.w	b104 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    731a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    731e:	0000      	.short	0x0000
    7320:	20000134 	.word	0x20000134
    7324:	20001338 	.word	0x20001338
    7328:	b510      	push	{r4, lr}
    732a:	4604      	mov	r4, r0
    732c:	7800      	ldrb	r0, [r0, #0]
    732e:	460b      	mov	r3, r1
    7330:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    7334:	29ff      	cmp	r1, #255	; 0xff
    7336:	d010      	beq.n	735a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    7338:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    733c:	1e51      	subs	r1, r2, #1
    733e:	4618      	mov	r0, r3
    7340:	f7fe fd9a 	bl	5e78 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7344:	b130      	cbz	r0, 7354 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>
    7346:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    734a:	f040 0002 	orr.w	r0, r0, #2
    734e:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    7352:	e011      	b.n	7378 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    7354:	f241 0102 	movw	r1, #4098	; 0x1002
    7358:	e021      	b.n	739e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    735a:	4812      	ldr	r0, [pc, #72]	; (73a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x314>)
    735c:	6840      	ldr	r0, [r0, #4]
    735e:	7801      	ldrb	r1, [r0, #0]
    7360:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7364:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    7368:	f8d0 1003 	ldr.w	r1, [r0, #3]
    736c:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    7370:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7374:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    7378:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    737c:	287f      	cmp	r0, #127	; 0x7f
    737e:	d00c      	beq.n	739a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30a>
    7380:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    7384:	207f      	movs	r0, #127	; 0x7f
    7386:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    738a:	4621      	mov	r1, r4
    738c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    7390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7394:	221d      	movs	r2, #29
    7396:	f7ff b85b 	b.w	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    739a:	f640 616b 	movw	r1, #3691	; 0xe6b
    739e:	202d      	movs	r0, #45	; 0x2d
    73a0:	f7fd f8e4 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73a4:	20000134 	.word	0x20000134
    73a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    73ac:	4690      	mov	r8, r2
    73ae:	460e      	mov	r6, r1
    73b0:	4604      	mov	r4, r0
    73b2:	2903      	cmp	r1, #3
    73b4:	d004      	beq.n	73c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    73b6:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    73ba:	b108      	cbz	r0, 73c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    73bc:	2001      	movs	r0, #1
    73be:	e000      	b.n	73c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    73c0:	2000      	movs	r0, #0
    73c2:	4681      	mov	r9, r0
    73c4:	f003 fbac 	bl	ab20 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    73c8:	4605      	mov	r5, r0
    73ca:	2e03      	cmp	r6, #3
    73cc:	d003      	beq.n	73d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    73ce:	2701      	movs	r7, #1
    73d0:	2e05      	cmp	r6, #5
    73d2:	d005      	beq.n	73e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    73d4:	e008      	b.n	73e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x358>
    73d6:	78a0      	ldrb	r0, [r4, #2]
    73d8:	2702      	movs	r7, #2
    73da:	f3c0 0040 	ubfx	r0, r0, #1, #1
    73de:	e001      	b.n	73e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    73e0:	78a0      	ldrb	r0, [r4, #2]
    73e2:	07c0      	lsls	r0, r0, #31
    73e4:	2800      	cmp	r0, #0
    73e6:	d042      	beq.n	746e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    73e8:	f1b9 0f00 	cmp.w	r9, #0
    73ec:	d13e      	bne.n	746c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    73ee:	4822      	ldr	r0, [pc, #136]	; (7478 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>)
    73f0:	7b80      	ldrb	r0, [r0, #14]
    73f2:	b140      	cbz	r0, 7406 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    73f4:	f006 fa31 	bl	d85a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    73f8:	f888 0000 	strb.w	r0, [r8]
    73fc:	28ff      	cmp	r0, #255	; 0xff
    73fe:	d002      	beq.n	7406 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    7400:	f7fe fd54 	bl	5eac <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7404:	4305      	orrs	r5, r0
    7406:	4e1d      	ldr	r6, [pc, #116]	; (747c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>)
    7408:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    740c:	f104 0358 	add.w	r3, r4, #88	; 0x58
    7410:	6871      	ldr	r1, [r6, #4]
    7412:	f811 0b03 	ldrb.w	r0, [r1], #3
    7416:	f3c0 1080 	ubfx	r0, r0, #6, #1
    741a:	f006 f990 	bl	d73e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    741e:	f898 1000 	ldrb.w	r1, [r8]
    7422:	29ff      	cmp	r1, #255	; 0xff
    7424:	d004      	beq.n	7430 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    7426:	b990      	cbnz	r0, 744e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7428:	7e60      	ldrb	r0, [r4, #25]
    742a:	4288      	cmp	r0, r1
    742c:	d00f      	beq.n	744e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    742e:	e008      	b.n	7442 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7430:	b138      	cbz	r0, 7442 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7432:	6871      	ldr	r1, [r6, #4]
    7434:	f811 0b03 	ldrb.w	r0, [r1], #3
    7438:	f3c0 1080 	ubfx	r0, r0, #6, #1
    743c:	f007 f9d4 	bl	e7e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    7440:	b128      	cbz	r0, 744e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7442:	2000      	movs	r0, #0
    7444:	78a1      	ldrb	r1, [r4, #2]
    7446:	0749      	lsls	r1, r1, #29
    7448:	d503      	bpl.n	7452 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    744a:	b990      	cbnz	r0, 7472 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    744c:	e00e      	b.n	746c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    744e:	2001      	movs	r0, #1
    7450:	e7f8      	b.n	7444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    7452:	b975      	cbnz	r5, 7472 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    7454:	7be0      	ldrb	r0, [r4, #15]
    7456:	b108      	cbz	r0, 745c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    7458:	42b8      	cmp	r0, r7
    745a:	d107      	bne.n	746c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    745c:	6871      	ldr	r1, [r6, #4]
    745e:	f811 0b03 	ldrb.w	r0, [r1], #3
    7462:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7466:	f007 f9bf 	bl	e7e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    746a:	b110      	cbz	r0, 7472 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    746c:	2000      	movs	r0, #0
    746e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7472:	2001      	movs	r0, #1
    7474:	e7fb      	b.n	746e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    7476:	0000      	.short	0x0000
    7478:	20001338 	.word	0x20001338
    747c:	20000134 	.word	0x20000134
    7480:	b570      	push	{r4, r5, r6, lr}
    7482:	4604      	mov	r4, r0
    7484:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    7486:	4d10      	ldr	r5, [pc, #64]	; (74c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>)
    7488:	1c40      	adds	r0, r0, #1
    748a:	8620      	strh	r0, [r4, #48]	; 0x30
    748c:	7ba8      	ldrb	r0, [r5, #14]
    748e:	2600      	movs	r6, #0
    7490:	b120      	cbz	r0, 749c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x40c>
    7492:	f003 fb2b 	bl	aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7496:	f003 f94f 	bl	a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    749a:	73ae      	strb	r6, [r5, #14]
    749c:	702e      	strb	r6, [r5, #0]
    749e:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    74a2:	b108      	cbz	r0, 74a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x418>
    74a4:	2101      	movs	r1, #1
    74a6:	e00a      	b.n	74be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    74a8:	7b60      	ldrb	r0, [r4, #13]
    74aa:	b138      	cbz	r0, 74bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    74ac:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    74ae:	4288      	cmp	r0, r1
    74b0:	d804      	bhi.n	74bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    74b2:	2101      	movs	r1, #1
    74b4:	4620      	mov	r0, r4
    74b6:	f007 fac5 	bl	ea44 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    74ba:	bd70      	pop	{r4, r5, r6, pc}
    74bc:	2100      	movs	r1, #0
    74be:	4620      	mov	r0, r4
    74c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    74c4:	f007 babe 	b.w	ea44 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    74c8:	20001338 	.word	0x20001338
    74cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ce:	4604      	mov	r4, r0
    74d0:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    74d4:	4616      	mov	r6, r2
    74d6:	460d      	mov	r5, r1
    74d8:	f88d 0000 	strb.w	r0, [sp]
    74dc:	9800      	ldr	r0, [sp, #0]
    74de:	9000      	str	r0, [sp, #0]
    74e0:	f89d 0000 	ldrb.w	r0, [sp]
    74e4:	b110      	cbz	r0, 74ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>
    74e6:	f640 416b 	movw	r1, #3179	; 0xc6b
    74ea:	e055      	b.n	7598 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
    74ec:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    74f0:	2700      	movs	r7, #0
    74f2:	8828      	ldrh	r0, [r5, #0]
    74f4:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    74f8:	2b00      	cmp	r3, #0
    74fa:	d14a      	bne.n	7592 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x502>
    74fc:	6928      	ldr	r0, [r5, #16]
    74fe:	f006 f9fb 	bl	d8f8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7502:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    7506:	8b28      	ldrh	r0, [r5, #24]
    7508:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    750c:	8b68      	ldrh	r0, [r5, #26]
    750e:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    7512:	f895 020d 	ldrb.w	r0, [r5, #525]	; 0x20d
    7516:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    751a:	7e20      	ldrb	r0, [r4, #24]
    751c:	f104 0151 	add.w	r1, r4, #81	; 0x51
    7520:	460d      	mov	r5, r1
    7522:	b120      	cbz	r0, 752e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    7524:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    7528:	f006 fff4 	bl	e514 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    752c:	b940      	cbnz	r0, 7540 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    752e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    7532:	b170      	cbz	r0, 7552 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    7534:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    7538:	4629      	mov	r1, r5
    753a:	f006 ffe2 	bl	e502 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb8>
    753e:	b140      	cbz	r0, 7552 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    7540:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    7544:	f8c4 0082 	str.w	r0, [r4, #130]	; 0x82
    7548:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    754c:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    7550:	e003      	b.n	755a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ca>
    7552:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
    7556:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    755a:	4814      	ldr	r0, [pc, #80]	; (75ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>)
    755c:	2eff      	cmp	r6, #255	; 0xff
    755e:	6840      	ldr	r0, [r0, #4]
    7560:	7801      	ldrb	r1, [r0, #0]
    7562:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7566:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
    756a:	f850 1f03 	ldr.w	r1, [r0, #3]!
    756e:	d016      	beq.n	759e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    7570:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    7574:	8880      	ldrh	r0, [r0, #4]
    7576:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    757a:	f104 027c 	add.w	r2, r4, #124	; 0x7c
    757e:	1e51      	subs	r1, r2, #1
    7580:	4630      	mov	r0, r6
    7582:	f7fe fc79 	bl	5e78 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7586:	b128      	cbz	r0, 7594 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x504>
    7588:	f814 0f7b 	ldrb.w	r0, [r4, #123]!
    758c:	f040 0002 	orr.w	r0, r0, #2
    7590:	7020      	strb	r0, [r4, #0]
    7592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7594:	f640 418c 	movw	r1, #3212	; 0xc8c
    7598:	202d      	movs	r0, #45	; 0x2d
    759a:	f7fc ffe7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    759e:	f844 1f7c 	str.w	r1, [r4, #124]!
    75a2:	8880      	ldrh	r0, [r0, #4]
    75a4:	80a0      	strh	r0, [r4, #4]
    75a6:	60e7      	str	r7, [r4, #12]
    75a8:	8227      	strh	r7, [r4, #16]
    75aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75ac:	20000134 	.word	0x20000134
    75b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75b2:	4604      	mov	r4, r0
    75b4:	20ff      	movs	r0, #255	; 0xff
    75b6:	f88d 0000 	strb.w	r0, [sp]
    75ba:	2601      	movs	r6, #1
    75bc:	466a      	mov	r2, sp
    75be:	2105      	movs	r1, #5
    75c0:	4620      	mov	r0, r4
    75c2:	f7ff fef1 	bl	73a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    75c6:	b160      	cbz	r0, 75e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x552>
    75c8:	4d28      	ldr	r5, [pc, #160]	; (766c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>)
    75ca:	4f27      	ldr	r7, [pc, #156]	; (7668 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>)
    75cc:	6869      	ldr	r1, [r5, #4]
    75ce:	7bfa      	ldrb	r2, [r7, #15]
    75d0:	f107 0310 	add.w	r3, r7, #16
    75d4:	f811 0b03 	ldrb.w	r0, [r1], #3
    75d8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    75dc:	f006 f8af 	bl	d73e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    75e0:	b110      	cbz	r0, 75e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x558>
    75e2:	2600      	movs	r6, #0
    75e4:	4630      	mov	r0, r6
    75e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75e8:	686a      	ldr	r2, [r5, #4]
    75ea:	69e0      	ldr	r0, [r4, #28]
    75ec:	7812      	ldrb	r2, [r2, #0]
    75ee:	f810 1f9d 	ldrb.w	r1, [r0, #157]!
    75f2:	f3c2 1240 	ubfx	r2, r2, #5, #1
    75f6:	4011      	ands	r1, r2
    75f8:	7001      	strb	r1, [r0, #0]
    75fa:	2201      	movs	r2, #1
    75fc:	4620      	mov	r0, r4
    75fe:	69e1      	ldr	r1, [r4, #28]
    7600:	f000 f8a0 	bl	7744 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>
    7604:	2300      	movs	r3, #0
    7606:	f89d 2000 	ldrb.w	r2, [sp]
    760a:	4620      	mov	r0, r4
    760c:	69e1      	ldr	r1, [r4, #28]
    760e:	f7ff ff5d 	bl	74cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    7612:	2210      	movs	r2, #16
    7614:	4621      	mov	r1, r4
    7616:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    761a:	f7fe ff19 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    761e:	69e0      	ldr	r0, [r4, #28]
    7620:	2205      	movs	r2, #5
    7622:	8801      	ldrh	r1, [r0, #0]
    7624:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    7628:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    762c:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    7630:	4621      	mov	r1, r4
    7632:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    7636:	f7fe ff0b 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    763a:	2100      	movs	r1, #0
    763c:	69e0      	ldr	r0, [r4, #28]
    763e:	7039      	strb	r1, [r7, #0]
    7640:	460a      	mov	r2, r1
    7642:	4621      	mov	r1, r4
    7644:	f000 fa8c 	bl	7b60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    7648:	6868      	ldr	r0, [r5, #4]
    764a:	69e1      	ldr	r1, [r4, #28]
    764c:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7650:	f841 2f03 	str.w	r2, [r1, #3]!
    7654:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7658:	808a      	strh	r2, [r1, #4]
    765a:	7800      	ldrb	r0, [r0, #0]
    765c:	69e1      	ldr	r1, [r4, #28]
    765e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7662:	7088      	strb	r0, [r1, #2]
    7664:	e7be      	b.n	75e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x554>
    7666:	0000      	.short	0x0000
    7668:	20001338 	.word	0x20001338
    766c:	20000134 	.word	0x20000134
    7670:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7674:	4604      	mov	r4, r0
    7676:	20ff      	movs	r0, #255	; 0xff
    7678:	f88d 0000 	strb.w	r0, [sp]
    767c:	2501      	movs	r5, #1
    767e:	466a      	mov	r2, sp
    7680:	2103      	movs	r1, #3
    7682:	4620      	mov	r0, r4
    7684:	f7ff fe90 	bl	73a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7688:	b330      	cbz	r0, 76d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>
    768a:	7b20      	ldrb	r0, [r4, #12]
    768c:	2700      	movs	r7, #0
    768e:	b168      	cbz	r0, 76ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61c>
    7690:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    7694:	f88d 0004 	strb.w	r0, [sp, #4]
    7698:	9801      	ldr	r0, [sp, #4]
    769a:	9001      	str	r0, [sp, #4]
    769c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    76a0:	b920      	cbnz	r0, 76ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61c>
    76a2:	f89d 1000 	ldrb.w	r1, [sp]
    76a6:	4620      	mov	r0, r4
    76a8:	f7ff fe3e 	bl	7328 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>
    76ac:	4e0c      	ldr	r6, [pc, #48]	; (76e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>)
    76ae:	2104      	movs	r1, #4
    76b0:	6870      	ldr	r0, [r6, #4]
    76b2:	8007      	strh	r7, [r0, #0]
    76b4:	f006 fb52 	bl	dd5c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    76b8:	4620      	mov	r0, r4
    76ba:	f000 f88b 	bl	77d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>
    76be:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    76c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    76c4:	6870      	ldr	r0, [r6, #4]
    76c6:	f006 fb80 	bl	ddca <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    76ca:	4906      	ldr	r1, [pc, #24]	; (76e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    76cc:	2005      	movs	r0, #5
    76ce:	7008      	strb	r0, [r1, #0]
    76d0:	6870      	ldr	r0, [r6, #4]
    76d2:	f003 fc9f 	bl	b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    76d6:	e000      	b.n	76da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64a>
    76d8:	2500      	movs	r5, #0
    76da:	4628      	mov	r0, r5
    76dc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    76e0:	20000134 	.word	0x20000134
    76e4:	20001338 	.word	0x20001338
    76e8:	b570      	push	{r4, r5, r6, lr}
    76ea:	4604      	mov	r4, r0
    76ec:	460e      	mov	r6, r1
    76ee:	7e40      	ldrb	r0, [r0, #25]
    76f0:	f7fe fb9c 	bl	5e2c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    76f4:	0005      	movs	r5, r0
    76f6:	d019      	beq.n	772c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    76f8:	2110      	movs	r1, #16
    76fa:	f006 fa7e 	bl	dbfa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    76fe:	2800      	cmp	r0, #0
    7700:	d114      	bne.n	772c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    7702:	2001      	movs	r0, #1
    7704:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    7708:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    770c:	4632      	mov	r2, r6
    770e:	460c      	mov	r4, r1
    7710:	4628      	mov	r0, r5
    7712:	f006 f844 	bl	d79e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7716:	4621      	mov	r1, r4
    7718:	4c05      	ldr	r4, [pc, #20]	; (7730 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>)
    771a:	6860      	ldr	r0, [r4, #4]
    771c:	f006 fb39 	bl	dd92 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    7720:	6860      	ldr	r0, [r4, #4]
    7722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7726:	2101      	movs	r1, #1
    7728:	f006 bb39 	b.w	dd9e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    772c:	bd70      	pop	{r4, r5, r6, pc}
    772e:	0000      	.short	0x0000
    7730:	20000134 	.word	0x20000134
    7734:	4802      	ldr	r0, [pc, #8]	; (7740 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>)
    7736:	2101      	movs	r1, #1
    7738:	6800      	ldr	r0, [r0, #0]
    773a:	f7ff bb29 	b.w	6d90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    773e:	0000      	.short	0x0000
    7740:	20000134 	.word	0x20000134
    7744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7748:	4e21      	ldr	r6, [pc, #132]	; (77d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x740>)
    774a:	4680      	mov	r8, r0
    774c:	460c      	mov	r4, r1
    774e:	6870      	ldr	r0, [r6, #4]
    7750:	4615      	mov	r5, r2
    7752:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7756:	6161      	str	r1, [r4, #20]
    7758:	6841      	ldr	r1, [r0, #4]
    775a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    775e:	61e1      	str	r1, [r4, #28]
    7760:	8940      	ldrh	r0, [r0, #10]
    7762:	f006 f8c5 	bl	d8f0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7766:	4607      	mov	r7, r0
    7768:	6120      	str	r0, [r4, #16]
    776a:	6870      	ldr	r0, [r6, #4]
    776c:	4639      	mov	r1, r7
    776e:	7d80      	ldrb	r0, [r0, #22]
    7770:	f006 fa3a 	bl	dbe8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7774:	84a0      	strh	r0, [r4, #36]	; 0x24
    7776:	6870      	ldr	r0, [r6, #4]
    7778:	4639      	mov	r1, r7
    777a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    777e:	f006 fa2f 	bl	dbe0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7782:	6220      	str	r0, [r4, #32]
    7784:	6870      	ldr	r0, [r6, #4]
    7786:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    778a:	8321      	strh	r1, [r4, #24]
    778c:	8841      	ldrh	r1, [r0, #2]
    778e:	8361      	strh	r1, [r4, #26]
    7790:	6841      	ldr	r1, [r0, #4]
    7792:	f8c4 109e 	str.w	r1, [r4, #158]	; 0x9e
    7796:	7a01      	ldrb	r1, [r0, #8]
    7798:	f884 10a2 	strb.w	r1, [r4, #162]	; 0xa2
    779c:	7a41      	ldrb	r1, [r0, #9]
    779e:	f001 011f 	and.w	r1, r1, #31
    77a2:	f884 10a9 	strb.w	r1, [r4, #169]	; 0xa9
    77a6:	7a40      	ldrb	r0, [r0, #9]
    77a8:	0940      	lsrs	r0, r0, #5
    77aa:	f884 020d 	strb.w	r0, [r4, #525]	; 0x20d
    77ae:	f104 0062 	add.w	r0, r4, #98	; 0x62
    77b2:	7205      	strb	r5, [r0, #8]
    77b4:	7245      	strb	r5, [r0, #9]
    77b6:	21ff      	movs	r1, #255	; 0xff
    77b8:	7281      	strb	r1, [r0, #10]
    77ba:	2100      	movs	r1, #0
    77bc:	3836      	subs	r0, #54	; 0x36
    77be:	f006 fd76 	bl	e2ae <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    77c2:	f898 000e 	ldrb.w	r0, [r8, #14]
    77c6:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    77ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77ce:	0000      	.short	0x0000
    77d0:	20000134 	.word	0x20000134
    77d4:	b570      	push	{r4, r5, r6, lr}
    77d6:	4d07      	ldr	r5, [pc, #28]	; (77f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x764>)
    77d8:	4604      	mov	r4, r0
    77da:	f100 0151 	add.w	r1, r0, #81	; 0x51
    77de:	6868      	ldr	r0, [r5, #4]
    77e0:	f006 fae4 	bl	ddac <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    77e4:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    77e8:	6868      	ldr	r0, [r5, #4]
    77ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77ee:	f006 bae3 	b.w	ddb8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    77f2:	0000      	.short	0x0000
    77f4:	20000134 	.word	0x20000134
    77f8:	00007019 	.word	0x00007019
    77fc:	00006ea5 	.word	0x00006ea5
    7800:	00006f95 	.word	0x00006f95
    7804:	00000000 	.word	0x00000000
    7808:	00006f6d 	.word	0x00006f6d
    780c:	00006fc5 	.word	0x00006fc5
    7810:	0000e80f 	.word	0x0000e80f
    7814:	0000e815 	.word	0x0000e815
    7818:	00007225 	.word	0x00007225
    781c:	00007249 	.word	0x00007249
    7820:	00007735 	.word	0x00007735
    7824:	00007814 	.word	0x00007814
    7828:	0000780c 	.word	0x0000780c
    782c:	00007808 	.word	0x00007808

00007830 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7830:	b510      	push	{r4, lr}
    7832:	1e42      	subs	r2, r0, #1
    7834:	2a02      	cmp	r2, #2
    7836:	d901      	bls.n	783c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7838:	21ca      	movs	r1, #202	; 0xca
    783a:	e009      	b.n	7850 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    783c:	1e40      	subs	r0, r0, #1
    783e:	2910      	cmp	r1, #16
    7840:	d009      	beq.n	7856 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7842:	2912      	cmp	r1, #18
    7844:	d00c      	beq.n	7860 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7846:	2913      	cmp	r1, #19
    7848:	d00a      	beq.n	7860 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    784a:	2915      	cmp	r1, #21
    784c:	d005      	beq.n	785a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    784e:	21d8      	movs	r1, #216	; 0xd8
    7850:	202f      	movs	r0, #47	; 0x2f
    7852:	f7fc fe8b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7856:	4905      	ldr	r1, [pc, #20]	; (786c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7858:	e004      	b.n	7864 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    785a:	4904      	ldr	r1, [pc, #16]	; (786c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    785c:	1d89      	adds	r1, r1, #6
    785e:	e001      	b.n	7864 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7860:	4902      	ldr	r1, [pc, #8]	; (786c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7862:	1f89      	subs	r1, r1, #6
    7864:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7868:	bd10      	pop	{r4, pc}
    786a:	0000      	.short	0x0000
    786c:	0000ea14 	.word	0x0000ea14

00007870 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7870:	1e42      	subs	r2, r0, #1
    7872:	b510      	push	{r4, lr}
    7874:	b2d2      	uxtb	r2, r2
    7876:	2a01      	cmp	r2, #1
    7878:	d903      	bls.n	7882 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    787a:	291d      	cmp	r1, #29
    787c:	d001      	beq.n	7882 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    787e:	21ee      	movs	r1, #238	; 0xee
    7880:	e00d      	b.n	789e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7882:	2913      	cmp	r1, #19
    7884:	d013      	beq.n	78ae <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7886:	dc04      	bgt.n	7892 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7888:	2910      	cmp	r1, #16
    788a:	d00b      	beq.n	78a4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    788c:	2912      	cmp	r1, #18
    788e:	d104      	bne.n	789a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7890:	e00d      	b.n	78ae <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7892:	2915      	cmp	r1, #21
    7894:	d008      	beq.n	78a8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7896:	291d      	cmp	r1, #29
    7898:	d00e      	beq.n	78b8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    789a:	f44f 7181 	mov.w	r1, #258	; 0x102
    789e:	202f      	movs	r0, #47	; 0x2f
    78a0:	f7fc fe64 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78a4:	4807      	ldr	r0, [pc, #28]	; (78c4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    78a6:	e004      	b.n	78b2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    78a8:	4806      	ldr	r0, [pc, #24]	; (78c4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    78aa:	3008      	adds	r0, #8
    78ac:	e001      	b.n	78b2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    78ae:	4805      	ldr	r0, [pc, #20]	; (78c4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    78b0:	1d00      	adds	r0, r0, #4
    78b2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    78b6:	bd10      	pop	{r4, pc}
    78b8:	f240 315a 	movw	r1, #858	; 0x35a
    78bc:	fb10 f001 	smulbb	r0, r0, r1
    78c0:	bd10      	pop	{r4, pc}
    78c2:	0000      	.short	0x0000
    78c4:	0000ea02 	.word	0x0000ea02

000078c8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    78c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78cc:	4604      	mov	r4, r0
    78ce:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    78d2:	4616      	mov	r6, r2
    78d4:	460d      	mov	r5, r1
    78d6:	2800      	cmp	r0, #0
    78d8:	d15e      	bne.n	7998 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    78da:	4621      	mov	r1, r4
    78dc:	484c      	ldr	r0, [pc, #304]	; (7a10 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x148>)
    78de:	f7fb f84f 	bl	2980 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    78e2:	4607      	mov	r7, r0
    78e4:	2820      	cmp	r0, #32
    78e6:	d057      	beq.n	7998 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    78e8:	2250      	movs	r2, #80	; 0x50
    78ea:	2100      	movs	r1, #0
    78ec:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    78f0:	f004 fe4d 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    78f4:	f884 70c8 	strb.w	r7, [r4, #200]	; 0xc8
    78f8:	2701      	movs	r7, #1
    78fa:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    78fe:	f884 70e0 	strb.w	r7, [r4, #224]	; 0xe0
    7902:	b135      	cbz	r5, 7912 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    7904:	f7ff f842 	bl	698c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7908:	f000 0007 	and.w	r0, r0, #7
    790c:	1c40      	adds	r0, r0, #1
    790e:	f885 023c 	strb.w	r0, [r5, #572]	; 0x23c
    7912:	4620      	mov	r0, r4
    7914:	f007 fa33 	bl	ed7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    7918:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    791c:	2002      	movs	r0, #2
    791e:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    7922:	f884 70f3 	strb.w	r7, [r4, #243]	; 0xf3
    7926:	2500      	movs	r5, #0
    7928:	46b8      	mov	r8, r7
    792a:	f804 5fe8 	strb.w	r5, [r4, #232]!
    792e:	f7fc f995 	bl	3c5c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    7932:	4607      	mov	r7, r0
    7934:	f004 fc4e 	bl	c1d4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7938:	8921      	ldrh	r1, [r4, #8]
    793a:	3ce8      	subs	r4, #232	; 0xe8
    793c:	4288      	cmp	r0, r1
    793e:	d800      	bhi.n	7942 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    7940:	4608      	mov	r0, r1
    7942:	4438      	add	r0, r7
    7944:	30cc      	adds	r0, #204	; 0xcc
    7946:	b287      	uxth	r7, r0
    7948:	4620      	mov	r0, r4
    794a:	f006 fef6 	bl	e73a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    794e:	b330      	cbz	r0, 799e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    7950:	f008 fe60 	bl	10614 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7954:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7958:	b281      	uxth	r1, r0
    795a:	4630      	mov	r0, r6
    795c:	f004 fc6e 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7960:	4430      	add	r0, r6
    7962:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    7966:	3490      	adds	r4, #144	; 0x90
    7968:	f7fb fa1a 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    796c:	19c0      	adds	r0, r0, r7
    796e:	4169      	adcs	r1, r5
    7970:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    7974:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    7978:	f824 5c6e 	strh.w	r5, [r4, #-110]
    797c:	2001      	movs	r0, #1
    797e:	f007 f839 	bl	e9f4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7982:	f500 7088 	add.w	r0, r0, #272	; 0x110
    7986:	1a30      	subs	r0, r6, r0
    7988:	6460      	str	r0, [r4, #68]	; 0x44
    798a:	f04f 30ff 	mov.w	r0, #4294967295
    798e:	0841      	lsrs	r1, r0, #1
    7990:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    7994:	3c90      	subs	r4, #144	; 0x90
    7996:	e023      	b.n	79e0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    7998:	200c      	movs	r0, #12
    799a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    799e:	2100      	movs	r1, #0
    79a0:	4620      	mov	r0, r4
    79a2:	f007 f93e 	bl	ec22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    79a6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7a14 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>
    79aa:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    79ae:	2000      	movs	r0, #0
    79b0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    79b4:	b139      	cbz	r1, 79c6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xfe>
    79b6:	f7fe ffe9 	bl	698c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    79ba:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    79be:	fbb0 f2f1 	udiv	r2, r0, r1
    79c2:	fb01 0012 	mls	r0, r1, r2, r0
    79c6:	4407      	add	r7, r0
    79c8:	f7fb f9ea 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    79cc:	19c0      	adds	r0, r0, r7
    79ce:	4169      	adcs	r1, r5
    79d0:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    79d4:	b19e      	cbz	r6, 79fe <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x136>
    79d6:	1980      	adds	r0, r0, r6
    79d8:	eb51 0105 	adcs.w	r1, r1, r5
    79dc:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    79e0:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    79e4:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    79e8:	f007 f9c7 	bl	ed7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    79ec:	b158      	cbz	r0, 7a06 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13e>
    79ee:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    79f2:	2100      	movs	r1, #0
    79f4:	4620      	mov	r0, r4
    79f6:	f006 fed0 	bl	e79a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    79fa:	2000      	movs	r0, #0
    79fc:	e7cd      	b.n	799a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    79fe:	f04f 30ff 	mov.w	r0, #4294967295
    7a02:	0841      	lsrs	r1, r0, #1
    7a04:	e7ea      	b.n	79dc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x114>
    7a06:	f240 11e7 	movw	r1, #487	; 0x1e7
    7a0a:	2030      	movs	r0, #48	; 0x30
    7a0c:	f7fc fdae 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a10:	0000eef7 	.word	0x0000eef7
    7a14:	20000144 	.word	0x20000144

00007a18 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    7a18:	4901      	ldr	r1, [pc, #4]	; (7a20 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    7a1a:	8088      	strh	r0, [r1, #4]
    7a1c:	4770      	bx	lr
    7a1e:	0000      	.short	0x0000
    7a20:	20000144 	.word	0x20000144

00007a24 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    7a24:	4805      	ldr	r0, [pc, #20]	; (7a3c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    7a26:	2100      	movs	r1, #0
    7a28:	7001      	strb	r1, [r0, #0]
    7a2a:	2201      	movs	r2, #1
    7a2c:	7082      	strb	r2, [r0, #2]
    7a2e:	7041      	strb	r1, [r0, #1]
    7a30:	f242 7110 	movw	r1, #10000	; 0x2710
    7a34:	8081      	strh	r1, [r0, #4]
    7a36:	f000 b803 	b.w	7a40 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    7a3a:	0000      	.short	0x0000
    7a3c:	20000144 	.word	0x20000144

00007a40 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    7a40:	b51c      	push	{r2, r3, r4, lr}
    7a42:	4909      	ldr	r1, [pc, #36]	; (7a68 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    7a44:	e9d1 0100 	ldrd	r0, r1, [r1]
    7a48:	e9cd 0100 	strd	r0, r1, [sp]
    7a4c:	e002      	b.n	7a54 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    7a4e:	9800      	ldr	r0, [sp, #0]
    7a50:	f007 f80c 	bl	ea6c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    7a54:	4668      	mov	r0, sp
    7a56:	f7fc ffc3 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7a5a:	2800      	cmp	r0, #0
    7a5c:	d0f7      	beq.n	7a4e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    7a5e:	f000 f8ab 	bl	7bb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    7a62:	2000      	movs	r0, #0
    7a64:	bd1c      	pop	{r2, r3, r4, pc}
    7a66:	0000      	.short	0x0000
    7a68:	000081d8 	.word	0x000081d8

00007a6c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    7a6c:	4901      	ldr	r1, [pc, #4]	; (7a74 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    7a6e:	7008      	strb	r0, [r1, #0]
    7a70:	4770      	bx	lr
    7a72:	0000      	.short	0x0000
    7a74:	20000144 	.word	0x20000144

00007a78 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    7a78:	4908      	ldr	r1, [pc, #32]	; (7a9c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    7a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7a7e:	fbb1 f1f2 	udiv	r1, r1, r2
    7a82:	b510      	push	{r4, lr}
    7a84:	f501 7125 	add.w	r1, r1, #660	; 0x294
    7a88:	f006 fc2a 	bl	e2e0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7a8c:	f640 0148 	movw	r1, #2120	; 0x848
    7a90:	4288      	cmp	r0, r1
    7a92:	d300      	bcc.n	7a96 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    7a94:	4608      	mov	r0, r1
    7a96:	b280      	uxth	r0, r0
    7a98:	bd10      	pop	{r4, pc}
    7a9a:	0000      	.short	0x0000
    7a9c:	0001527d 	.word	0x0001527d

00007aa0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7aa4:	4c10      	ldr	r4, [pc, #64]	; (7ae8 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    7aa6:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
    7aaa:	f003 f9cd 	bl	ae48 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7aae:	4606      	mov	r6, r0
    7ab0:	7820      	ldrb	r0, [r4, #0]
    7ab2:	b128      	cbz	r0, 7ac0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7ab4:	4632      	mov	r2, r6
    7ab6:	4639      	mov	r1, r7
    7ab8:	4628      	mov	r0, r5
    7aba:	f005 ff23 	bl	d904 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7abe:	4605      	mov	r5, r0
    7ac0:	68a0      	ldr	r0, [r4, #8]
    7ac2:	4285      	cmp	r5, r0
    7ac4:	d005      	beq.n	7ad2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    7ac6:	6921      	ldr	r1, [r4, #16]
    7ac8:	1a28      	subs	r0, r5, r0
    7aca:	4408      	add	r0, r1
    7acc:	6120      	str	r0, [r4, #16]
    7ace:	f7fb f899 	bl	2c04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7ad2:	60a5      	str	r5, [r4, #8]
    7ad4:	42ae      	cmp	r6, r5
    7ad6:	d801      	bhi.n	7adc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    7ad8:	7860      	ldrb	r0, [r4, #1]
    7ada:	b110      	cbz	r0, 7ae2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    7adc:	2000      	movs	r0, #0
    7ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ae2:	2001      	movs	r0, #1
    7ae4:	e7fb      	b.n	7ade <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    7ae6:	0000      	.short	0x0000
    7ae8:	20000144 	.word	0x20000144

00007aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    7aec:	b510      	push	{r4, lr}
    7aee:	4604      	mov	r4, r0
    7af0:	2906      	cmp	r1, #6
    7af2:	d22e      	bcs.n	7b52 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    7af4:	e8df f001 	tbb	[pc, r1]
    7af8:	14031105 	.word	0x14031105
    7afc:	2815      	.short	0x2815
    7afe:	2100      	movs	r1, #0
    7b00:	e006      	b.n	7b10 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    7b02:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    7b06:	b110      	cbz	r0, 7b0e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    7b08:	4620      	mov	r0, r4
    7b0a:	f007 f8c9 	bl	eca0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1dc>
    7b0e:	2101      	movs	r1, #1
    7b10:	4620      	mov	r0, r4
    7b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b16:	f000 b8f7 	b.w	7d08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    7b1a:	2003      	movs	r0, #3
    7b1c:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7b20:	bd10      	pop	{r4, pc}
    7b22:	f003 f997 	bl	ae54 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7b26:	f8c4 029c 	str.w	r0, [r4, #668]	; 0x29c
    7b2a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7b2e:	f003 fa55 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7b32:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    7b36:	1a09      	subs	r1, r1, r0
    7b38:	4808      	ldr	r0, [pc, #32]	; (7b5c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    7b3a:	6882      	ldr	r2, [r0, #8]
    7b3c:	440a      	add	r2, r1
    7b3e:	6082      	str	r2, [r0, #8]
    7b40:	68c2      	ldr	r2, [r0, #12]
    7b42:	4411      	add	r1, r2
    7b44:	60c1      	str	r1, [r0, #12]
    7b46:	bd10      	pop	{r4, pc}
    7b48:	4620      	mov	r0, r4
    7b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b4e:	f007 b892 	b.w	ec76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    7b52:	f240 7143 	movw	r1, #1859	; 0x743
    7b56:	2030      	movs	r0, #48	; 0x30
    7b58:	f7fc fd08 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b5c:	20000144 	.word	0x20000144

00007b60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    7b60:	b570      	push	{r4, r5, r6, lr}
    7b62:	460c      	mov	r4, r1
    7b64:	4605      	mov	r5, r0
    7b66:	b112      	cbz	r2, 7b6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    7b68:	f240 716d 	movw	r1, #1901	; 0x76d
    7b6c:	e010      	b.n	7b90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    7b6e:	f003 f96b 	bl	ae48 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7b72:	4601      	mov	r1, r0
    7b74:	2200      	movs	r2, #0
    7b76:	4620      	mov	r0, r4
    7b78:	f007 f971 	bl	ee5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x39a>
    7b7c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    7b80:	462a      	mov	r2, r5
    7b82:	4905      	ldr	r1, [pc, #20]	; (7b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    7b84:	f7fa fdb2 	bl	26ec <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    7b88:	2800      	cmp	r0, #0
    7b8a:	d104      	bne.n	7b96 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    7b8c:	f240 7156 	movw	r1, #1878	; 0x756
    7b90:	2030      	movs	r0, #48	; 0x30
    7b92:	f7fc fceb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b96:	bd70      	pop	{r4, r5, r6, pc}
    7b98:	0000ef99 	.word	0x0000ef99
    7b9c:	b510      	push	{r4, lr}
    7b9e:	280c      	cmp	r0, #12
    7ba0:	d304      	bcc.n	7bac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    7ba2:	f240 3183 	movw	r1, #899	; 0x383
    7ba6:	2006      	movs	r0, #6
    7ba8:	f7fc fce0 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bac:	4901      	ldr	r1, [pc, #4]	; (7bb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    7bae:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7bb2:	bd10      	pop	{r4, pc}
    7bb4:	000081f4 	.word	0x000081f4
    7bb8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7bbc:	4d15      	ldr	r5, [pc, #84]	; (7c14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>)
    7bbe:	2001      	movs	r0, #1
    7bc0:	7068      	strb	r0, [r5, #1]
    7bc2:	2400      	movs	r4, #0
    7bc4:	f64f 76ff 	movw	r6, #65535	; 0xffff
    7bc8:	e00b      	b.n	7be2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x82>
    7bca:	2100      	movs	r1, #0
    7bcc:	f005 fc0c 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7bd0:	0007      	movs	r7, r0
    7bd2:	d009      	beq.n	7be8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x88>
    7bd4:	f897 0294 	ldrb.w	r0, [r7, #660]	; 0x294
    7bd8:	f7fa fdba 	bl	2750 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7bdc:	4638      	mov	r0, r7
    7bde:	f007 f931 	bl	ee44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    7be2:	9400      	str	r4, [sp, #0]
    7be4:	9401      	str	r4, [sp, #4]
    7be6:	e00d      	b.n	7c04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7be8:	f240 111f 	movw	r1, #287	; 0x11f
    7bec:	2030      	movs	r0, #48	; 0x30
    7bee:	f7fc fcbd 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bf2:	9800      	ldr	r0, [sp, #0]
    7bf4:	b130      	cbz	r0, 7c04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7bf6:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
    7bfa:	b119      	cbz	r1, 7c04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7bfc:	8800      	ldrh	r0, [r0, #0]
    7bfe:	42b0      	cmp	r0, r6
    7c00:	d1e3      	bne.n	7bca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a>
    7c02:	e004      	b.n	7c0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae>
    7c04:	4668      	mov	r0, sp
    7c06:	f7fc feeb 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7c0a:	2800      	cmp	r0, #0
    7c0c:	d0f1      	beq.n	7bf2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    7c0e:	706c      	strb	r4, [r5, #1]
    7c10:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7c14:	20000144 	.word	0x20000144
    7c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c1c:	4604      	mov	r4, r0
    7c1e:	4839      	ldr	r0, [pc, #228]	; (7d04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>)
    7c20:	461e      	mov	r6, r3
    7c22:	4690      	mov	r8, r2
    7c24:	7880      	ldrb	r0, [r0, #2]
    7c26:	4689      	mov	r9, r1
    7c28:	2500      	movs	r5, #0
    7c2a:	2800      	cmp	r0, #0
    7c2c:	d063      	beq.n	7cf6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7c2e:	f7fc f8eb 	bl	3e08 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7c32:	b3e0      	cbz	r0, 7cae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    7c34:	f8b4 0238 	ldrh.w	r0, [r4, #568]	; 0x238
    7c38:	2802      	cmp	r0, #2
    7c3a:	d35c      	bcc.n	7cf6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7c3c:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7c40:	2802      	cmp	r0, #2
    7c42:	d058      	beq.n	7cf6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7c44:	f894 0262 	ldrb.w	r0, [r4, #610]	; 0x262
    7c48:	bb88      	cbnz	r0, 7cae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    7c4a:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    7c4e:	f7ff ffa5 	bl	7b9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7c52:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7c56:	b281      	uxth	r1, r0
    7c58:	8031      	strh	r1, [r6, #0]
    7c5a:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7c5e:	2700      	movs	r7, #0
    7c60:	2801      	cmp	r0, #1
    7c62:	d00d      	beq.n	7c80 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x120>
    7c64:	6920      	ldr	r0, [r4, #16]
    7c66:	f004 fae9 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7c6a:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    7c6e:	4442      	add	r2, r8
    7c70:	eba2 0109 	sub.w	r1, r2, r9
    7c74:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7c78:	1a82      	subs	r2, r0, r2
    7c7a:	fb01 7502 	mla	r5, r1, r2, r7
    7c7e:	e035      	b.n	7cec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x18c>
    7c80:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
    7c84:	2803      	cmp	r0, #3
    7c86:	d039      	beq.n	7cfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19c>
    7c88:	2101      	movs	r1, #1
    7c8a:	2000      	movs	r0, #0
    7c8c:	f005 ff05 	bl	da9a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7c90:	6a21      	ldr	r1, [r4, #32]
    7c92:	1847      	adds	r7, r0, r1
    7c94:	8831      	ldrh	r1, [r6, #0]
    7c96:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7c9a:	f004 facf 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7c9e:	f8d4 2240 	ldr.w	r2, [r4, #576]	; 0x240
    7ca2:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
    7ca6:	1a82      	subs	r2, r0, r2
    7ca8:	fb01 5502 	mla	r5, r1, r2, r5
    7cac:	e000      	b.n	7cb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x150>
    7cae:	e022      	b.n	7cf6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7cb0:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
    7cb4:	8831      	ldrh	r1, [r6, #0]
    7cb6:	4638      	mov	r0, r7
    7cb8:	f004 fac0 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7cbc:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7cc0:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7cc4:	1a41      	subs	r1, r0, r1
    7cc6:	440d      	add	r5, r1
    7cc8:	8831      	ldrh	r1, [r6, #0]
    7cca:	6920      	ldr	r0, [r4, #16]
    7ccc:	f004 fab6 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7cd0:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    7cd4:	4442      	add	r2, r8
    7cd6:	eba2 0109 	sub.w	r1, r2, r9
    7cda:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    7cde:	1a89      	subs	r1, r1, r2
    7ce0:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7ce4:	1a82      	subs	r2, r0, r2
    7ce6:	1e49      	subs	r1, r1, #1
    7ce8:	fb01 5502 	mla	r5, r1, r2, r5
    7cec:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7cf0:	2001      	movs	r0, #1
    7cf2:	f884 0262 	strb.w	r0, [r4, #610]	; 0x262
    7cf6:	4628      	mov	r0, r5
    7cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7cfc:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7d00:	e7c6      	b.n	7c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7d02:	0000      	.short	0x0000
    7d04:	20000144 	.word	0x20000144
    7d08:	b538      	push	{r3, r4, r5, lr}
    7d0a:	2500      	movs	r5, #0
    7d0c:	4604      	mov	r4, r0
    7d0e:	2901      	cmp	r1, #1
    7d10:	d102      	bne.n	7d18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b8>
    7d12:	4810      	ldr	r0, [pc, #64]	; (7d54 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    7d14:	7840      	ldrb	r0, [r0, #1]
    7d16:	b170      	cbz	r0, 7d36 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d6>
    7d18:	2004      	movs	r0, #4
    7d1a:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7d1e:	bf00      	nop
    7d20:	f006 ffb7 	bl	ec92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    7d24:	f8a4 5292 	strh.w	r5, [r4, #658]	; 0x292
    7d28:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    7d2c:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    7d30:	f884 5261 	strb.w	r5, [r4, #609]	; 0x261
    7d34:	bd38      	pop	{r3, r4, r5, pc}
    7d36:	9500      	str	r5, [sp, #0]
    7d38:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    7d3c:	2301      	movs	r3, #1
    7d3e:	2200      	movs	r2, #0
    7d40:	4620      	mov	r0, r4
    7d42:	f000 f809 	bl	7d58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    7d46:	2800      	cmp	r0, #0
    7d48:	d0ea      	beq.n	7d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    7d4a:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
    7d4e:	2030      	movs	r0, #48	; 0x30
    7d50:	f7fc fc0c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d54:	20000144 	.word	0x20000144
    7d58:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d5c:	b08b      	sub	sp, #44	; 0x2c
    7d5e:	4604      	mov	r4, r0
    7d60:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    7d64:	4699      	mov	r9, r3
    7d66:	460f      	mov	r7, r1
    7d68:	9307      	str	r3, [sp, #28]
    7d6a:	9005      	str	r0, [sp, #20]
    7d6c:	f008 fc52 	bl	10614 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7d70:	4605      	mov	r5, r0
    7d72:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    7d76:	f7ff ff11 	bl	7b9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7d7a:	4428      	add	r0, r5
    7d7c:	f8ad 0004 	strh.w	r0, [sp, #4]
    7d80:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7d84:	280e      	cmp	r0, #14
    7d86:	d004      	beq.n	7d92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    7d88:	2000      	movs	r0, #0
    7d8a:	9008      	str	r0, [sp, #32]
    7d8c:	980d      	ldr	r0, [sp, #52]	; 0x34
    7d8e:	b110      	cbz	r0, 7d96 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    7d90:	e02e      	b.n	7df0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7d92:	2001      	movs	r0, #1
    7d94:	e7f9      	b.n	7d8a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    7d96:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7d9a:	2803      	cmp	r0, #3
    7d9c:	d128      	bne.n	7df0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7d9e:	9808      	ldr	r0, [sp, #32]
    7da0:	b330      	cbz	r0, 7df0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7da2:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
    7da6:	42b8      	cmp	r0, r7
    7da8:	d122      	bne.n	7df0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7daa:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    7dae:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
    7db2:	6920      	ldr	r0, [r4, #16]
    7db4:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
    7db8:	f8b4 0292 	ldrh.w	r0, [r4, #658]	; 0x292
    7dbc:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    7dc0:	4408      	add	r0, r1
    7dc2:	f8c4 0248 	str.w	r0, [r4, #584]	; 0x248
    7dc6:	4620      	mov	r0, r4
    7dc8:	f007 f9fe 	bl	f1c8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    7dcc:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
    7dd0:	6220      	str	r0, [r4, #32]
    7dd2:	f8b4 02be 	ldrh.w	r0, [r4, #702]	; 0x2be
    7dd6:	84a0      	strh	r0, [r4, #36]	; 0x24
    7dd8:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
    7ddc:	6120      	str	r0, [r4, #16]
    7dde:	f8b4 02c8 	ldrh.w	r0, [r4, #712]	; 0x2c8
    7de2:	8320      	strh	r0, [r4, #24]
    7de4:	f8b4 02ca 	ldrh.w	r0, [r4, #714]	; 0x2ca
    7de8:	8360      	strh	r0, [r4, #26]
    7dea:	2002      	movs	r0, #2
    7dec:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7df0:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    7df4:	f504 751a 	add.w	r5, r4, #616	; 0x268
    7df8:	1a38      	subs	r0, r7, r0
    7dfa:	fa0f fa80 	sxth.w	sl, r0
    7dfe:	f8b4 0290 	ldrh.w	r0, [r4, #656]	; 0x290
    7e02:	1a38      	subs	r0, r7, r0
    7e04:	fa0f f880 	sxth.w	r8, r0
    7e08:	f1b8 0f00 	cmp.w	r8, #0
    7e0c:	da08      	bge.n	7e20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    7e0e:	f8d4 0280 	ldr.w	r0, [r4, #640]	; 0x280
    7e12:	f8d4 1284 	ldr.w	r1, [r4, #644]	; 0x284
    7e16:	46d0      	mov	r8, sl
    7e18:	e9c4 01a2 	strd	r0, r1, [r4, #648]	; 0x288
    7e1c:	2001      	movs	r0, #1
    7e1e:	9007      	str	r0, [sp, #28]
    7e20:	ab01      	add	r3, sp, #4
    7e22:	4652      	mov	r2, sl
    7e24:	4641      	mov	r1, r8
    7e26:	4620      	mov	r0, r4
    7e28:	f7ff fef6 	bl	7c18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb8>
    7e2c:	9004      	str	r0, [sp, #16]
    7e2e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7e32:	f8df b334 	ldr.w	fp, [pc, #820]	; 8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    7e36:	b140      	cbz	r0, 7e4a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2ea>
    7e38:	2801      	cmp	r0, #1
    7e3a:	d07d      	beq.n	7f38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    7e3c:	2802      	cmp	r0, #2
    7e3e:	d051      	beq.n	7ee4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x384>
    7e40:	2803      	cmp	r0, #3
    7e42:	d07a      	beq.n	7f3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3da>
    7e44:	f240 5146 	movw	r1, #1350	; 0x546
    7e48:	e18a      	b.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    7e4a:	2101      	movs	r1, #1
    7e4c:	2000      	movs	r0, #0
    7e4e:	f005 fe24 	bl	da9a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7e52:	4606      	mov	r6, r0
    7e54:	6a20      	ldr	r0, [r4, #32]
    7e56:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7e5a:	4430      	add	r0, r6
    7e5c:	f004 f9ee 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7e60:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7e64:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7e68:	6920      	ldr	r0, [r4, #16]
    7e6a:	f004 f9e7 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7e6e:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7e72:	a907      	add	r1, sp, #28
    7e74:	a806      	add	r0, sp, #24
    7e76:	f002 ff4f 	bl	ad18 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    7e7a:	e9d4 01a2 	ldrd	r0, r1, [r4, #648]	; 0x288
    7e7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    7e82:	f7fa ff9f 	bl	2dc4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    7e86:	4682      	mov	sl, r0
    7e88:	4620      	mov	r0, r4
    7e8a:	f006 fef4 	bl	ec76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    7e8e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7e92:	f8d4 8298 	ldr.w	r8, [r4, #664]	; 0x298
    7e96:	f003 f8cd 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7e9a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7e9e:	4401      	add	r1, r0
    7ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7ea4:	fbb1 f0f0 	udiv	r0, r1, r0
    7ea8:	6a21      	ldr	r1, [r4, #32]
    7eaa:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    7eae:	4431      	add	r1, r6
    7eb0:	1a08      	subs	r0, r1, r0
    7eb2:	1a81      	subs	r1, r0, r2
    7eb4:	4441      	add	r1, r8
    7eb6:	3920      	subs	r1, #32
    7eb8:	eba1 060a 	sub.w	r6, r1, sl
    7ebc:	0050      	lsls	r0, r2, #1
    7ebe:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7ec0:	3060      	adds	r0, #96	; 0x60
    7ec2:	4401      	add	r1, r0
    7ec4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7ec8:	f006 ff45 	bl	ed56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    7ecc:	3022      	adds	r0, #34	; 0x22
    7ece:	f8cb 0014 	str.w	r0, [fp, #20]
    7ed2:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    7ed6:	1a30      	subs	r0, r6, r0
    7ed8:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    7edc:	d258      	bcs.n	7f90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    7ede:	f240 41df 	movw	r1, #1247	; 0x4df
    7ee2:	e13d      	b.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    7ee4:	6a21      	ldr	r1, [r4, #32]
    7ee6:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7eea:	4408      	add	r0, r1
    7eec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7ef0:	f004 f9a4 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7ef4:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7ef8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7efc:	6920      	ldr	r0, [r4, #16]
    7efe:	f004 f99d 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7f02:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7f06:	4620      	mov	r0, r4
    7f08:	f006 feb5 	bl	ec76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    7f0c:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
    7f10:	bb10      	cbnz	r0, 7f58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    7f12:	f1b9 0f00 	cmp.w	r9, #0
    7f16:	d01f      	beq.n	7f58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    7f18:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    7f1c:	4640      	mov	r0, r8
    7f1e:	f003 f889 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7f22:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7f26:	4401      	add	r1, r0
    7f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7f2c:	fbb1 f0f0 	udiv	r0, r1, r0
    7f30:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7f34:	4408      	add	r0, r1
    7f36:	e001      	b.n	7f3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3dc>
    7f38:	e02b      	b.n	7f92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    7f3a:	e047      	b.n	7fcc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    7f3c:	6a22      	ldr	r2, [r4, #32]
    7f3e:	f8d4 1244 	ldr.w	r1, [r4, #580]	; 0x244
    7f42:	4411      	add	r1, r2
    7f44:	1a0e      	subs	r6, r1, r0
    7f46:	4640      	mov	r0, r8
    7f48:	f003 f848 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7f4c:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    7f50:	1a08      	subs	r0, r1, r0
    7f52:	4406      	add	r6, r0
    7f54:	3e20      	subs	r6, #32
    7f56:	e006      	b.n	7f66 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x406>
    7f58:	6a21      	ldr	r1, [r4, #32]
    7f5a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7f5e:	4408      	add	r0, r1
    7f60:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7f64:	1a46      	subs	r6, r0, r1
    7f66:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    7f6a:	f8d4 1240 	ldr.w	r1, [r4, #576]	; 0x240
    7f6e:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    7f72:	fb01 0002 	mla	r0, r1, r2, r0
    7f76:	0040      	lsls	r0, r0, #1
    7f78:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7f7a:	3060      	adds	r0, #96	; 0x60
    7f7c:	4401      	add	r1, r0
    7f7e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7f82:	f006 fee8 	bl	ed56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    7f86:	f8cb 0014 	str.w	r0, [fp, #20]
    7f8a:	2001      	movs	r0, #1
    7f8c:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7f90:	e061      	b.n	8056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
    7f92:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7f96:	6920      	ldr	r0, [r4, #16]
    7f98:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    7f9c:	1a86      	subs	r6, r0, r2
    7f9e:	eb01 000a 	add.w	r0, r1, sl
    7fa2:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
    7fa6:	f8d4 c240 	ldr.w	ip, [r4, #576]	; 0x240
    7faa:	1a40      	subs	r0, r0, r1
    7fac:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
    7fb0:	1e40      	subs	r0, r0, #1
    7fb2:	fb0c 3101 	mla	r1, ip, r1, r3
    7fb6:	fb00 1002 	mla	r0, r0, r2, r1
    7fba:	0040      	lsls	r0, r0, #1
    7fbc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7fbe:	3060      	adds	r0, #96	; 0x60
    7fc0:	4401      	add	r1, r0
    7fc2:	fb06 f608 	mul.w	r6, r6, r8
    7fc6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7fca:	e040      	b.n	804e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
    7fcc:	6920      	ldr	r0, [r4, #16]
    7fce:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    7fd2:	fb00 f008 	mul.w	r0, r0, r8
    7fd6:	fb08 0611 	mls	r6, r8, r1, r0
    7fda:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
    7fde:	2826      	cmp	r0, #38	; 0x26
    7fe0:	d003      	beq.n	7fea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    7fe2:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7fe6:	2826      	cmp	r0, #38	; 0x26
    7fe8:	d109      	bne.n	7ffe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7fea:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
    7fee:	1a38      	subs	r0, r7, r0
    7ff0:	b200      	sxth	r0, r0
    7ff2:	2800      	cmp	r0, #0
    7ff4:	db03      	blt.n	7ffe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7ff6:	f894 02bf 	ldrb.w	r0, [r4, #703]	; 0x2bf
    7ffa:	b100      	cbz	r0, 7ffe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7ffc:	9005      	str	r0, [sp, #20]
    7ffe:	9807      	ldr	r0, [sp, #28]
    8000:	b1d8      	cbz	r0, 803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
    8002:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
    8006:	b9c0      	cbnz	r0, 803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
    8008:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    800c:	2800      	cmp	r0, #0
    800e:	d07d      	beq.n	810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    8010:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8014:	f003 f80e 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8018:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    801c:	4401      	add	r1, r0
    801e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8022:	fbb1 f0f0 	udiv	r0, r1, r0
    8026:	1a36      	subs	r6, r6, r0
    8028:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    802c:	f002 ffd6 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8030:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    8034:	1a08      	subs	r0, r1, r0
    8036:	4406      	add	r6, r0
    8038:	3e20      	subs	r6, #32
    803a:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    803e:	eb01 000a 	add.w	r0, r1, sl
    8042:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8046:	4348      	muls	r0, r1
    8048:	0041      	lsls	r1, r0, #1
    804a:	3160      	adds	r1, #96	; 0x60
    804c:	9805      	ldr	r0, [sp, #20]
    804e:	f006 fe82 	bl	ed56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    8052:	f8cb 0014 	str.w	r0, [fp, #20]
    8056:	9804      	ldr	r0, [sp, #16]
    8058:	f8db 2014 	ldr.w	r2, [fp, #20]
    805c:	1a31      	subs	r1, r6, r0
    805e:	f8d4 6254 	ldr.w	r6, [r4, #596]	; 0x254
    8062:	6920      	ldr	r0, [r4, #16]
    8064:	1b80      	subs	r0, r0, r6
    8066:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    806a:	f8cb 0018 	str.w	r0, [fp, #24]
    806e:	4282      	cmp	r2, r0
    8070:	d800      	bhi.n	8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    8072:	4610      	mov	r0, r2
    8074:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
    8078:	2600      	movs	r6, #0
    807a:	702e      	strb	r6, [r5, #0]
    807c:	2064      	movs	r0, #100	; 0x64
    807e:	8128      	strh	r0, [r5, #8]
    8080:	e9d4 20a2 	ldrd	r2, r0, [r4, #648]	; 0x288
    8084:	1851      	adds	r1, r2, r1
    8086:	4170      	adcs	r0, r6
    8088:	e9c5 1004 	strd	r1, r0, [r5, #16]
    808c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8090:	f006 f8f7 	bl	e282 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8094:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
    8098:	4408      	add	r0, r1
    809a:	6068      	str	r0, [r5, #4]
    809c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    80a0:	e9c4 01a2 	strd	r0, r1, [r4, #648]	; 0x288
    80a4:	f8a4 7290 	strh.w	r7, [r4, #656]	; 0x290
    80a8:	72ae      	strb	r6, [r5, #10]
    80aa:	f8b4 0210 	ldrh.w	r0, [r4, #528]	; 0x210
    80ae:	1bc0      	subs	r0, r0, r7
    80b0:	b200      	sxth	r0, r0
    80b2:	2800      	cmp	r0, #0
    80b4:	dd01      	ble.n	80ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xba>
    80b6:	2002      	movs	r0, #2
    80b8:	72a8      	strb	r0, [r5, #10]
    80ba:	9808      	ldr	r0, [sp, #32]
    80bc:	b338      	cbz	r0, 810e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10e>
    80be:	f1b9 0f00 	cmp.w	r9, #0
    80c2:	d01c      	beq.n	80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    80c4:	f8b4 1238 	ldrh.w	r1, [r4, #568]	; 0x238
    80c8:	b3f1      	cbz	r1, 8148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>
    80ca:	f8b4 023a 	ldrh.w	r0, [r4, #570]	; 0x23a
    80ce:	bf00      	nop
    80d0:	f8a4 023a 	strh.w	r0, [r4, #570]	; 0x23a
    80d4:	f894 223c 	ldrb.w	r2, [r4, #572]	; 0x23c
    80d8:	1c40      	adds	r0, r0, #1
    80da:	4342      	muls	r2, r0
    80dc:	428a      	cmp	r2, r1
    80de:	d20e      	bcs.n	80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    80e0:	7aa8      	ldrb	r0, [r5, #10]
    80e2:	b160      	cbz	r0, 80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    80e4:	72ae      	strb	r6, [r5, #10]
    80e6:	f8b4 023a 	ldrh.w	r0, [r4, #570]	; 0x23a
    80ea:	1c40      	adds	r0, r0, #1
    80ec:	f8a4 023a 	strh.w	r0, [r4, #570]	; 0x23a
    80f0:	f7fe fc46 	bl	6980 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    80f4:	f000 0007 	and.w	r0, r0, #7
    80f8:	1c40      	adds	r0, r0, #1
    80fa:	f884 023c 	strb.w	r0, [r4, #572]	; 0x23c
    80fe:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    8102:	4629      	mov	r1, r5
    8104:	f006 fe39 	bl	ed7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    8108:	b340      	cbz	r0, 815c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>
    810a:	e001      	b.n	8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
    810c:	e009      	b.n	8122 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x122>
    810e:	e00b      	b.n	8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>
    8110:	980d      	ldr	r0, [sp, #52]	; 0x34
    8112:	f080 0001 	eor.w	r0, r0, #1
    8116:	f884 0260 	strb.w	r0, [r4, #608]	; 0x260
    811a:	2000      	movs	r0, #0
    811c:	b00f      	add	sp, #60	; 0x3c
    811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8122:	f240 5131 	movw	r1, #1329	; 0x531
    8126:	e01b      	b.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    8128:	f1b9 0f00 	cmp.w	r9, #0
    812c:	d1ca      	bne.n	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    812e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    8132:	2800      	cmp	r0, #0
    8134:	d0e3      	beq.n	80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    8136:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    813a:	6920      	ldr	r0, [r4, #16]
    813c:	1a41      	subs	r1, r0, r1
    813e:	4628      	mov	r0, r5
    8140:	f005 fcbd 	bl	dabe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8144:	0400      	lsls	r0, r0, #16
    8146:	e000      	b.n	814a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14a>
    8148:	e006      	b.n	8158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>
    814a:	0c00      	lsrs	r0, r0, #16
    814c:	d0d7      	beq.n	80fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe>
    814e:	9918      	ldr	r1, [sp, #96]	; 0x60
    8150:	b101      	cbz	r1, 8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    8152:	8008      	strh	r0, [r1, #0]
    8154:	2001      	movs	r0, #1
    8156:	e7e1      	b.n	811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>
    8158:	2000      	movs	r0, #0
    815a:	e7b9      	b.n	80d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>
    815c:	f240 518f 	movw	r1, #1423	; 0x58f
    8160:	2030      	movs	r0, #48	; 0x30
    8162:	f7fc fa03 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8166:	0000      	.short	0x0000
    8168:	20000144 	.word	0x20000144
    816c:	b570      	push	{r4, r5, r6, lr}
    816e:	4604      	mov	r4, r0
    8170:	f004 f830 	bl	c1d4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8174:	2864      	cmp	r0, #100	; 0x64
    8176:	d901      	bls.n	817c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>
    8178:	4605      	mov	r5, r0
    817a:	e000      	b.n	817e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17e>
    817c:	2564      	movs	r5, #100	; 0x64
    817e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8182:	2128      	movs	r1, #40	; 0x28
    8184:	f006 fd05 	bl	eb92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    8188:	4428      	add	r0, r5
    818a:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    818e:	f500 7010 	add.w	r0, r0, #576	; 0x240
    8192:	180e      	adds	r6, r1, r0
    8194:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8198:	2128      	movs	r1, #40	; 0x28
    819a:	f006 fcfa 	bl	eb92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    819e:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    81a2:	4620      	mov	r0, r4
    81a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    81a6:	f006 f80b 	bl	e1c0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    81aa:	4605      	mov	r5, r0
    81ac:	4632      	mov	r2, r6
    81ae:	4620      	mov	r0, r4
    81b0:	6921      	ldr	r1, [r4, #16]
    81b2:	f006 f805 	bl	e1c0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    81b6:	4907      	ldr	r1, [pc, #28]	; (81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>)
    81b8:	4285      	cmp	r5, r0
    81ba:	60c8      	str	r0, [r1, #12]
    81bc:	d200      	bcs.n	81c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0>
    81be:	4628      	mov	r0, r5
    81c0:	6088      	str	r0, [r1, #8]
    81c2:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    81c6:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    81ca:	6108      	str	r0, [r1, #16]
    81cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81d0:	f7fa bd18 	b.w	2c04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    81d4:	20000144 	.word	0x20000144
    81d8:	00000000 	.word	0x00000000
    81dc:	00010000 	.word	0x00010000
    81e0:	00000000 	.word	0x00000000
    81e4:	00010000 	.word	0x00010000
    81e8:	00000000 	.word	0x00000000
    81ec:	00001e14 	.word	0x00001e14
    81f0:	00001130 	.word	0x00001130
    81f4:	00fa01f4 	.word	0x00fa01f4
    81f8:	00640096 	.word	0x00640096
    81fc:	0032004b 	.word	0x0032004b
    8200:	0014001e 	.word	0x0014001e
    8204:	0005000a 	.word	0x0005000a
    8208:	00010002 	.word	0x00010002

0000820c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    820c:	4806      	ldr	r0, [pc, #24]	; (8228 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    820e:	4905      	ldr	r1, [pc, #20]	; (8224 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8210:	6501      	str	r1, [r0, #80]	; 0x50
    8212:	4906      	ldr	r1, [pc, #24]	; (822c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8214:	6541      	str	r1, [r0, #84]	; 0x54
    8216:	4807      	ldr	r0, [pc, #28]	; (8234 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8218:	4905      	ldr	r1, [pc, #20]	; (8230 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    821a:	6501      	str	r1, [r0, #80]	; 0x50
    821c:	4906      	ldr	r1, [pc, #24]	; (8238 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    821e:	6541      	str	r1, [r0, #84]	; 0x54
    8220:	4770      	bx	lr
    8222:	0000      	.short	0x0000
    8224:	000095a1 	.word	0x000095a1
    8228:	20000178 	.word	0x20000178
    822c:	00009685 	.word	0x00009685
    8230:	0000f477 	.word	0x0000f477
    8234:	20000224 	.word	0x20000224
    8238:	0000f4a1 	.word	0x0000f4a1

0000823c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    823c:	481e      	ldr	r0, [pc, #120]	; (82b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    823e:	491d      	ldr	r1, [pc, #116]	; (82b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8240:	6081      	str	r1, [r0, #8]
    8242:	491e      	ldr	r1, [pc, #120]	; (82bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8244:	6041      	str	r1, [r0, #4]
    8246:	491e      	ldr	r1, [pc, #120]	; (82c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8248:	6001      	str	r1, [r0, #0]
    824a:	491e      	ldr	r1, [pc, #120]	; (82c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    824c:	6281      	str	r1, [r0, #40]	; 0x28
    824e:	491e      	ldr	r1, [pc, #120]	; (82c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8250:	62c1      	str	r1, [r0, #44]	; 0x2c
    8252:	491e      	ldr	r1, [pc, #120]	; (82cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8254:	60c1      	str	r1, [r0, #12]
    8256:	491e      	ldr	r1, [pc, #120]	; (82d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8258:	6181      	str	r1, [r0, #24]
    825a:	491e      	ldr	r1, [pc, #120]	; (82d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    825c:	6301      	str	r1, [r0, #48]	; 0x30
    825e:	491e      	ldr	r1, [pc, #120]	; (82d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8260:	6201      	str	r1, [r0, #32]
    8262:	491e      	ldr	r1, [pc, #120]	; (82dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8264:	64c1      	str	r1, [r0, #76]	; 0x4c
    8266:	491e      	ldr	r1, [pc, #120]	; (82e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8268:	6481      	str	r1, [r0, #72]	; 0x48
    826a:	491e      	ldr	r1, [pc, #120]	; (82e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    826c:	6441      	str	r1, [r0, #68]	; 0x44
    826e:	491e      	ldr	r1, [pc, #120]	; (82e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8270:	6341      	str	r1, [r0, #52]	; 0x34
    8272:	491e      	ldr	r1, [pc, #120]	; (82ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8274:	61c1      	str	r1, [r0, #28]
    8276:	491e      	ldr	r1, [pc, #120]	; (82f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8278:	6241      	str	r1, [r0, #36]	; 0x24
    827a:	481f      	ldr	r0, [pc, #124]	; (82f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    827c:	491d      	ldr	r1, [pc, #116]	; (82f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    827e:	6081      	str	r1, [r0, #8]
    8280:	491e      	ldr	r1, [pc, #120]	; (82fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8282:	61c1      	str	r1, [r0, #28]
    8284:	491e      	ldr	r1, [pc, #120]	; (8300 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    8286:	6241      	str	r1, [r0, #36]	; 0x24
    8288:	491e      	ldr	r1, [pc, #120]	; (8304 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    828a:	62c1      	str	r1, [r0, #44]	; 0x2c
    828c:	491e      	ldr	r1, [pc, #120]	; (8308 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    828e:	6101      	str	r1, [r0, #16]
    8290:	491e      	ldr	r1, [pc, #120]	; (830c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8292:	6141      	str	r1, [r0, #20]
    8294:	491e      	ldr	r1, [pc, #120]	; (8310 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8296:	6441      	str	r1, [r0, #68]	; 0x44
    8298:	491e      	ldr	r1, [pc, #120]	; (8314 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    829a:	6341      	str	r1, [r0, #52]	; 0x34
    829c:	491e      	ldr	r1, [pc, #120]	; (8318 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    829e:	6181      	str	r1, [r0, #24]
    82a0:	491e      	ldr	r1, [pc, #120]	; (831c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    82a2:	6301      	str	r1, [r0, #48]	; 0x30
    82a4:	491e      	ldr	r1, [pc, #120]	; (8320 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    82a6:	6481      	str	r1, [r0, #72]	; 0x48
    82a8:	491e      	ldr	r1, [pc, #120]	; (8324 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    82aa:	64c1      	str	r1, [r0, #76]	; 0x4c
    82ac:	491e      	ldr	r1, [pc, #120]	; (8328 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    82ae:	6381      	str	r1, [r0, #56]	; 0x38
    82b0:	4770      	bx	lr
    82b2:	0000      	.short	0x0000
    82b4:	00009989 	.word	0x00009989
    82b8:	20000178 	.word	0x20000178
    82bc:	0000937d 	.word	0x0000937d
    82c0:	000093e5 	.word	0x000093e5
    82c4:	0000f339 	.word	0x0000f339
    82c8:	0000f383 	.word	0x0000f383
    82cc:	000094a1 	.word	0x000094a1
    82d0:	0000f39b 	.word	0x0000f39b
    82d4:	00009ab9 	.word	0x00009ab9
    82d8:	00009559 	.word	0x00009559
    82dc:	0000f30b 	.word	0x0000f30b
    82e0:	0000f2e5 	.word	0x0000f2e5
    82e4:	00009929 	.word	0x00009929
    82e8:	00009959 	.word	0x00009959
    82ec:	000099c1 	.word	0x000099c1
    82f0:	00009565 	.word	0x00009565
    82f4:	0000f66d 	.word	0x0000f66d
    82f8:	20000224 	.word	0x20000224
    82fc:	00009bc9 	.word	0x00009bc9
    8300:	0000f473 	.word	0x0000f473
    8304:	0000f50b 	.word	0x0000f50b
    8308:	0000f44d 	.word	0x0000f44d
    830c:	0000f5cd 	.word	0x0000f5cd
    8310:	0000f57b 	.word	0x0000f57b
    8314:	0000f5ab 	.word	0x0000f5ab
    8318:	0000f5eb 	.word	0x0000f5eb
    831c:	0000f68f 	.word	0x0000f68f
    8320:	0000f4d1 	.word	0x0000f4d1
    8324:	0000f4fb 	.word	0x0000f4fb
    8328:	0000f5c9 	.word	0x0000f5c9

0000832c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    832c:	4806      	ldr	r0, [pc, #24]	; (8348 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    832e:	4905      	ldr	r1, [pc, #20]	; (8344 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8330:	6581      	str	r1, [r0, #88]	; 0x58
    8332:	4906      	ldr	r1, [pc, #24]	; (834c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8334:	6601      	str	r1, [r0, #96]	; 0x60
    8336:	4807      	ldr	r0, [pc, #28]	; (8354 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8338:	4905      	ldr	r1, [pc, #20]	; (8350 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    833a:	6581      	str	r1, [r0, #88]	; 0x58
    833c:	4906      	ldr	r1, [pc, #24]	; (8358 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    833e:	65c1      	str	r1, [r0, #92]	; 0x5c
    8340:	4770      	bx	lr
    8342:	0000      	.short	0x0000
    8344:	000096fd 	.word	0x000096fd
    8348:	20000178 	.word	0x20000178
    834c:	000097d9 	.word	0x000097d9
    8350:	0000f531 	.word	0x0000f531
    8354:	20000224 	.word	0x20000224
    8358:	0000f55b 	.word	0x0000f55b

0000835c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    835e:	4c7c      	ldr	r4, [pc, #496]	; (8550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    8360:	2101      	movs	r1, #1
    8362:	f1a4 0610 	sub.w	r6, r4, #16
    8366:	7021      	strb	r1, [r4, #0]
    8368:	2500      	movs	r5, #0
    836a:	6060      	str	r0, [r4, #4]
    836c:	8075      	strh	r5, [r6, #2]
    836e:	7075      	strb	r5, [r6, #1]
    8370:	7035      	strb	r5, [r6, #0]
    8372:	f880 121b 	strb.w	r1, [r0, #539]	; 0x21b
    8376:	8800      	ldrh	r0, [r0, #0]
    8378:	f7fc fd06 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    837c:	b180      	cbz	r0, 83a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    837e:	6860      	ldr	r0, [r4, #4]
    8380:	8800      	ldrh	r0, [r0, #0]
    8382:	f7fc ff6b 	bl	525c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8386:	6860      	ldr	r0, [r4, #4]
    8388:	8800      	ldrh	r0, [r0, #0]
    838a:	f7fc ff0f 	bl	51ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    838e:	6860      	ldr	r0, [r4, #4]
    8390:	f8b0 1212 	ldrh.w	r1, [r0, #530]	; 0x212
    8394:	b1c9      	cbz	r1, 83ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8396:	3080      	adds	r0, #128	; 0x80
    8398:	f006 ff5b 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    839c:	b118      	cbz	r0, 83a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    839e:	e014      	b.n	83ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    83a0:	f640 41dc 	movw	r1, #3292	; 0xcdc
    83a4:	e06c      	b.n	8480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    83a6:	6860      	ldr	r0, [r4, #4]
    83a8:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    83ac:	f88d 1000 	strb.w	r1, [sp]
    83b0:	9900      	ldr	r1, [sp, #0]
    83b2:	9100      	str	r1, [sp, #0]
    83b4:	f89d 1000 	ldrb.w	r1, [sp]
    83b8:	b139      	cbz	r1, 83ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    83ba:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    83be:	2301      	movs	r3, #1
    83c0:	4619      	mov	r1, r3
    83c2:	3080      	adds	r0, #128	; 0x80
    83c4:	f005 fab1 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83c8:	b180      	cbz	r0, 83ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    83ca:	6860      	ldr	r0, [r4, #4]
    83cc:	3080      	adds	r0, #128	; 0x80
    83ce:	f006 ff40 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    83d2:	b128      	cbz	r0, 83e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    83d4:	6860      	ldr	r0, [r4, #4]
    83d6:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    83da:	bf00      	nop
    83dc:	f000 fbbc 	bl	8b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fc>
    83e0:	6860      	ldr	r0, [r4, #4]
    83e2:	f890 121d 	ldrb.w	r1, [r0, #541]	; 0x21d
    83e6:	b189      	cbz	r1, 840c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    83e8:	80b5      	strh	r5, [r6, #4]
    83ea:	e01e      	b.n	842a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    83ec:	6860      	ldr	r0, [r4, #4]
    83ee:	f8a0 50c8 	strh.w	r5, [r0, #200]	; 0xc8
    83f2:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    83f6:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    83fa:	2100      	movs	r1, #0
    83fc:	2002      	movs	r0, #2
    83fe:	f000 fe69 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8402:	6860      	ldr	r0, [r4, #4]
    8404:	f880 521a 	strb.w	r5, [r0, #538]	; 0x21a
    8408:	2002      	movs	r0, #2
    840a:	e7e7      	b.n	83dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    840c:	f890 11c2 	ldrb.w	r1, [r0, #450]	; 0x1c2
    8410:	f88d 1000 	strb.w	r1, [sp]
    8414:	9900      	ldr	r1, [sp, #0]
    8416:	9100      	str	r1, [sp, #0]
    8418:	f89d 1000 	ldrb.w	r1, [sp]
    841c:	b919      	cbnz	r1, 8426 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    841e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    8420:	8b02      	ldrh	r2, [r0, #24]
    8422:	4291      	cmp	r1, r2
    8424:	d800      	bhi.n	8428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    8426:	8b01      	ldrh	r1, [r0, #24]
    8428:	80b1      	strh	r1, [r6, #4]
    842a:	f8b0 1216 	ldrh.w	r1, [r0, #534]	; 0x216
    842e:	1e49      	subs	r1, r1, #1
    8430:	b28f      	uxth	r7, r1
    8432:	f8b0 1218 	ldrh.w	r1, [r0, #536]	; 0x218
    8436:	4439      	add	r1, r7
    8438:	f8a0 1218 	strh.w	r1, [r0, #536]	; 0x218
    843c:	f830 1fc4 	ldrh.w	r1, [r0, #196]!
    8440:	4439      	add	r1, r7
    8442:	8001      	strh	r1, [r0, #0]
    8444:	f001 fbee 	bl	9c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    8448:	b120      	cbz	r0, 8454 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    844a:	6860      	ldr	r0, [r4, #4]
    844c:	f850 1fb8 	ldr.w	r1, [r0, #184]!
    8450:	4439      	add	r1, r7
    8452:	6001      	str	r1, [r0, #0]
    8454:	6861      	ldr	r1, [r4, #4]
    8456:	f8b1 0212 	ldrh.w	r0, [r1, #530]	; 0x212
    845a:	2801      	cmp	r0, #1
    845c:	d802      	bhi.n	8464 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    845e:	1c40      	adds	r0, r0, #1
    8460:	f8a1 0212 	strh.w	r0, [r1, #530]	; 0x212
    8464:	b10f      	cbz	r7, 846a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    8466:	f881 5224 	strb.w	r5, [r1, #548]	; 0x224
    846a:	f881 521a 	strb.w	r5, [r1, #538]	; 0x21a
    846e:	f8b1 2216 	ldrh.w	r2, [r1, #534]	; 0x216
    8472:	f101 0080 	add.w	r0, r1, #128	; 0x80
    8476:	f005 fbcf 	bl	dc18 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    847a:	b120      	cbz	r0, 8486 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    847c:	f640 5123 	movw	r1, #3363	; 0xd23
    8480:	2031      	movs	r0, #49	; 0x31
    8482:	f7fc f873 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8486:	6860      	ldr	r0, [r4, #4]
    8488:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    848c:	290b      	cmp	r1, #11
    848e:	d001      	beq.n	8494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    8490:	290c      	cmp	r1, #12
    8492:	d119      	bne.n	84c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8494:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
    8498:	f8b0 32bc 	ldrh.w	r3, [r0, #700]	; 0x2bc
    849c:	1ad2      	subs	r2, r2, r3
    849e:	b212      	sxth	r2, r2
    84a0:	2a00      	cmp	r2, #0
    84a2:	db11      	blt.n	84c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    84a4:	f8d0 12be 	ldr.w	r1, [r0, #702]	; 0x2be
    84a8:	f8c0 109e 	str.w	r1, [r0, #158]	; 0x9e
    84ac:	f890 12c2 	ldrb.w	r1, [r0, #706]	; 0x2c2
    84b0:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    84b4:	2103      	movs	r1, #3
    84b6:	f7fd fe51 	bl	615c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    84ba:	6860      	ldr	r0, [r4, #4]
    84bc:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    84c0:	21ff      	movs	r1, #255	; 0xff
    84c2:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    84c6:	e026      	b.n	8516 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    84c8:	2926      	cmp	r1, #38	; 0x26
    84ca:	d111      	bne.n	84f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    84cc:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    84d0:	f8b0 22bc 	ldrh.w	r2, [r0, #700]	; 0x2bc
    84d4:	1a89      	subs	r1, r1, r2
    84d6:	b209      	sxth	r1, r1
    84d8:	2900      	cmp	r1, #0
    84da:	db09      	blt.n	84f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    84dc:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    84e0:	f000 feb2 	bl	9248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeec>
    84e4:	2800      	cmp	r0, #0
    84e6:	6860      	ldr	r0, [r4, #4]
    84e8:	f880 5134 	strb.w	r5, [r0, #308]	; 0x134
    84ec:	d029      	beq.n	8542 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    84ee:	e012      	b.n	8516 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    84f0:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    84f4:	2926      	cmp	r1, #38	; 0x26
    84f6:	d001      	beq.n	84fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    84f8:	2928      	cmp	r1, #40	; 0x28
    84fa:	d10c      	bne.n	8516 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    84fc:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    8500:	f8b0 22bc 	ldrh.w	r2, [r0, #700]	; 0x2bc
    8504:	1a89      	subs	r1, r1, r2
    8506:	b209      	sxth	r1, r1
    8508:	2900      	cmp	r1, #0
    850a:	db04      	blt.n	8516 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    850c:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
    8510:	f000 fe9a 	bl	9248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeec>
    8514:	b1a8      	cbz	r0, 8542 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8516:	480f      	ldr	r0, [pc, #60]	; (8554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    8518:	9000      	str	r0, [sp, #0]
    851a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    851e:	4b0e      	ldr	r3, [pc, #56]	; (8558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8520:	4a0e      	ldr	r2, [pc, #56]	; (855c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8522:	f7fc ff27 	bl	5374 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8526:	6860      	ldr	r0, [r4, #4]
    8528:	2301      	movs	r3, #1
    852a:	2105      	movs	r1, #5
    852c:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8530:	3080      	adds	r0, #128	; 0x80
    8532:	f005 f9fa 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8536:	2800      	cmp	r0, #0
    8538:	d009      	beq.n	854e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    853a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    853e:	f7fc bf13 	b.w	5368 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8542:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8546:	2100      	movs	r1, #0
    8548:	4608      	mov	r0, r1
    854a:	f000 bbd1 	b.w	8cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x994>
    854e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8550:	20000170 	.word	0x20000170
    8554:	00008cf1 	.word	0x00008cf1
    8558:	00008815 	.word	0x00008815
    855c:	00009195 	.word	0x00009195
    8560:	4804      	ldr	r0, [pc, #16]	; (8574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    8562:	2100      	movs	r1, #0
    8564:	6840      	ldr	r0, [r0, #4]
    8566:	f820 1fd0 	strh.w	r1, [r0, #208]!
    856a:	7881      	ldrb	r1, [r0, #2]
    856c:	1c49      	adds	r1, r1, #1
    856e:	7081      	strb	r1, [r0, #2]
    8570:	4770      	bx	lr
    8572:	0000      	.short	0x0000
    8574:	20000170 	.word	0x20000170
    8578:	4807      	ldr	r0, [pc, #28]	; (8598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    857a:	b510      	push	{r4, lr}
    857c:	6841      	ldr	r1, [r0, #4]
    857e:	f811 0fd2 	ldrb.w	r0, [r1, #210]!
    8582:	1e40      	subs	r0, r0, #1
    8584:	b240      	sxtb	r0, r0
    8586:	7008      	strb	r0, [r1, #0]
    8588:	2800      	cmp	r0, #0
    858a:	da04      	bge.n	8596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    858c:	f240 11f3 	movw	r1, #499	; 0x1f3
    8590:	2031      	movs	r0, #49	; 0x31
    8592:	f7fb ffeb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8596:	bd10      	pop	{r4, pc}
    8598:	20000170 	.word	0x20000170
    859c:	491d      	ldr	r1, [pc, #116]	; (8614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    859e:	b508      	push	{r3, lr}
    85a0:	6849      	ldr	r1, [r1, #4]
    85a2:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    85a6:	b1c0      	cbz	r0, 85da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    85a8:	2a12      	cmp	r2, #18
    85aa:	d006      	beq.n	85ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    85ac:	2a16      	cmp	r2, #22
    85ae:	d007      	beq.n	85c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    85b0:	2a17      	cmp	r2, #23
    85b2:	d009      	beq.n	85c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26c>
    85b4:	2a1d      	cmp	r2, #29
    85b6:	d128      	bne.n	860a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    85b8:	e009      	b.n	85ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    85ba:	2101      	movs	r1, #1
    85bc:	200b      	movs	r0, #11
    85be:	e008      	b.n	85d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    85c0:	4814      	ldr	r0, [pc, #80]	; (8614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    85c2:	f006 fefb 	bl	f3bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    85c6:	e006      	b.n	85d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    85c8:	f000 fda2 	bl	9110 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb4>
    85cc:	e003      	b.n	85d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    85ce:	2101      	movs	r1, #1
    85d0:	2006      	movs	r0, #6
    85d2:	f000 fd7f 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    85d6:	2001      	movs	r0, #1
    85d8:	bd08      	pop	{r3, pc}
    85da:	2a23      	cmp	r2, #35	; 0x23
    85dc:	d004      	beq.n	85e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    85de:	2a2f      	cmp	r2, #47	; 0x2f
    85e0:	d113      	bne.n	860a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    85e2:	2101      	movs	r1, #1
    85e4:	2011      	movs	r0, #17
    85e6:	e7f4      	b.n	85d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    85e8:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    85ec:	2802      	cmp	r0, #2
    85ee:	d00e      	beq.n	860e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    85f0:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    85f4:	2801      	cmp	r0, #1
    85f6:	d108      	bne.n	860a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    85f8:	f891 0135 	ldrb.w	r0, [r1, #309]	; 0x135
    85fc:	f88d 0000 	strb.w	r0, [sp]
    8600:	9800      	ldr	r0, [sp, #0]
    8602:	9000      	str	r0, [sp, #0]
    8604:	f89d 0000 	ldrb.w	r0, [sp]
    8608:	b108      	cbz	r0, 860e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    860a:	2000      	movs	r0, #0
    860c:	bd08      	pop	{r3, pc}
    860e:	2101      	movs	r1, #1
    8610:	2017      	movs	r0, #23
    8612:	e7de      	b.n	85d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    8614:	20000170 	.word	0x20000170
    8618:	b538      	push	{r3, r4, r5, lr}
    861a:	2800      	cmp	r0, #0
    861c:	d172      	bne.n	8704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    861e:	4c3a      	ldr	r4, [pc, #232]	; (8708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ac>)
    8620:	6860      	ldr	r0, [r4, #4]
    8622:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    8626:	07ca      	lsls	r2, r1, #31
    8628:	d002      	beq.n	8630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    862a:	2101      	movs	r1, #1
    862c:	2009      	movs	r0, #9
    862e:	e065      	b.n	86fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8630:	078a      	lsls	r2, r1, #30
    8632:	d50a      	bpl.n	864a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    8634:	2101      	movs	r1, #1
    8636:	200c      	movs	r0, #12
    8638:	f000 fd4c 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    863c:	6860      	ldr	r0, [r4, #4]
    863e:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    8642:	f041 0101 	orr.w	r1, r1, #1
    8646:	7001      	strb	r1, [r0, #0]
    8648:	e05a      	b.n	8700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>
    864a:	074a      	lsls	r2, r1, #29
    864c:	d502      	bpl.n	8654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    864e:	2101      	movs	r1, #1
    8650:	2013      	movs	r0, #19
    8652:	e053      	b.n	86fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8654:	070a      	lsls	r2, r1, #28
    8656:	d506      	bpl.n	8666 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    8658:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    865c:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    8660:	2101      	movs	r1, #1
    8662:	2007      	movs	r0, #7
    8664:	e04a      	b.n	86fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8666:	f011 0f30 	tst.w	r1, #48	; 0x30
    866a:	d043      	beq.n	86f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    866c:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    8670:	f88d 1000 	strb.w	r1, [sp]
    8674:	9900      	ldr	r1, [sp, #0]
    8676:	9100      	str	r1, [sp, #0]
    8678:	f89d 1000 	ldrb.w	r1, [sp]
    867c:	bbb9      	cbnz	r1, 86ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x392>
    867e:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    8682:	2500      	movs	r5, #0
    8684:	f88d 1000 	strb.w	r1, [sp]
    8688:	9900      	ldr	r1, [sp, #0]
    868a:	9100      	str	r1, [sp, #0]
    868c:	f89d 1000 	ldrb.w	r1, [sp]
    8690:	b1c1      	cbz	r1, 86c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    8692:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8696:	2926      	cmp	r1, #38	; 0x26
    8698:	d02a      	beq.n	86f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    869a:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    869e:	2926      	cmp	r1, #38	; 0x26
    86a0:	d026      	beq.n	86f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    86a2:	2300      	movs	r3, #0
    86a4:	f200 22be 	addw	r2, r0, #702	; 0x2be
    86a8:	f500 7195 	add.w	r1, r0, #298	; 0x12a
    86ac:	f005 fd7a 	bl	e1a4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    86b0:	6860      	ldr	r0, [r4, #4]
    86b2:	f850 1f84 	ldr.w	r1, [r0, #132]!
    86b6:	f021 0120 	bic.w	r1, r1, #32
    86ba:	f041 0110 	orr.w	r1, r1, #16
    86be:	6001      	str	r1, [r0, #0]
    86c0:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    86c4:	6860      	ldr	r0, [r4, #4]
    86c6:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    86ca:	06c9      	lsls	r1, r1, #27
    86cc:	d51a      	bpl.n	8704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    86ce:	f005 fd84 	bl	e1da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    86d2:	f000 f925 	bl	8920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    86d6:	6861      	ldr	r1, [r4, #4]
    86d8:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    86dc:	8bc2      	ldrh	r2, [r0, #30]
    86de:	f8a1 211e 	strh.w	r2, [r1, #286]	; 0x11e
    86e2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    86e4:	f8a1 0120 	strh.w	r0, [r1, #288]	; 0x120
    86e8:	2101      	movs	r1, #1
    86ea:	2015      	movs	r0, #21
    86ec:	e006      	b.n	86fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    86ee:	e009      	b.n	8704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    86f0:	2301      	movs	r3, #1
    86f2:	e7d7      	b.n	86a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    86f4:	0648      	lsls	r0, r1, #25
    86f6:	d505      	bpl.n	8704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    86f8:	2101      	movs	r1, #1
    86fa:	2024      	movs	r0, #36	; 0x24
    86fc:	f000 fcea 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8700:	2001      	movs	r0, #1
    8702:	bd38      	pop	{r3, r4, r5, pc}
    8704:	2000      	movs	r0, #0
    8706:	bd38      	pop	{r3, r4, r5, pc}
    8708:	20000170 	.word	0x20000170
    870c:	b570      	push	{r4, r5, r6, lr}
    870e:	460d      	mov	r5, r1
    8710:	4606      	mov	r6, r0
    8712:	f005 fc04 	bl	df1e <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    8716:	4604      	mov	r4, r0
    8718:	4630      	mov	r0, r6
    871a:	f005 fc02 	bl	df22 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    871e:	4629      	mov	r1, r5
    8720:	f000 f81e 	bl	8760 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x404>
    8724:	b1b8      	cbz	r0, 8756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fa>
    8726:	4620      	mov	r0, r4
    8728:	f005 f9a9 	bl	da7e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    872c:	0001      	movs	r1, r0
    872e:	d00d      	beq.n	874c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    8730:	480a      	ldr	r0, [pc, #40]	; (875c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x400>)
    8732:	6840      	ldr	r0, [r0, #4]
    8734:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    8738:	428a      	cmp	r2, r1
    873a:	d007      	beq.n	874c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    873c:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    8740:	2901      	cmp	r1, #1
    8742:	d005      	beq.n	8750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f4>
    8744:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8748:	4220      	tst	r0, r4
    874a:	d004      	beq.n	8756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fa>
    874c:	2001      	movs	r0, #1
    874e:	bd70      	pop	{r4, r5, r6, pc}
    8750:	f890 0137 	ldrb.w	r0, [r0, #311]	; 0x137
    8754:	e7f8      	b.n	8748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    8756:	2000      	movs	r0, #0
    8758:	bd70      	pop	{r4, r5, r6, pc}
    875a:	0000      	.short	0x0000
    875c:	20000170 	.word	0x20000170
    8760:	b570      	push	{r4, r5, r6, lr}
    8762:	460d      	mov	r5, r1
    8764:	4604      	mov	r4, r0
    8766:	f005 f98a 	bl	da7e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    876a:	b350      	cbz	r0, 87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    876c:	4916      	ldr	r1, [pc, #88]	; (87c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46c>)
    876e:	6849      	ldr	r1, [r1, #4]
    8770:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    8774:	4282      	cmp	r2, r0
    8776:	d024      	beq.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    8778:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
    877c:	2b01      	cmp	r3, #1
    877e:	d005      	beq.n	878c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>
    8780:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    8784:	4223      	tst	r3, r4
    8786:	d013      	beq.n	87b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>
    8788:	b11d      	cbz	r5, 8792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x436>
    878a:	e01a      	b.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    878c:	f891 3136 	ldrb.w	r3, [r1, #310]	; 0x136
    8790:	e7f8      	b.n	8784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    8792:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    8796:	4221      	tst	r1, r4
    8798:	d113      	bne.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    879a:	b15a      	cbz	r2, 87b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
    879c:	2a04      	cmp	r2, #4
    879e:	d00e      	beq.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    87a0:	2804      	cmp	r0, #4
    87a2:	d00c      	beq.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    87a4:	2a08      	cmp	r2, #8
    87a6:	d00a      	beq.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    87a8:	2808      	cmp	r0, #8
    87aa:	d008      	beq.n	87be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    87ac:	4282      	cmp	r2, r0
    87ae:	d908      	bls.n	87c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    87b0:	2000      	movs	r0, #0
    87b2:	bd70      	pop	{r4, r5, r6, pc}
    87b4:	f240 1193 	movw	r1, #403	; 0x193
    87b8:	2006      	movs	r0, #6
    87ba:	f7fb fed7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87be:	4282      	cmp	r2, r0
    87c0:	d3f6      	bcc.n	87b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>
    87c2:	2001      	movs	r0, #1
    87c4:	bd70      	pop	{r4, r5, r6, pc}
    87c6:	0000      	.short	0x0000
    87c8:	20000170 	.word	0x20000170
    87cc:	b510      	push	{r4, lr}
    87ce:	4c10      	ldr	r4, [pc, #64]	; (8810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b4>)
    87d0:	2301      	movs	r3, #1
    87d2:	2100      	movs	r1, #0
    87d4:	6860      	ldr	r0, [r4, #4]
    87d6:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    87da:	3080      	adds	r0, #128	; 0x80
    87dc:	f005 f8a5 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    87e0:	b140      	cbz	r0, 87f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x498>
    87e2:	6860      	ldr	r0, [r4, #4]
    87e4:	2301      	movs	r3, #1
    87e6:	2104      	movs	r1, #4
    87e8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    87ec:	3080      	adds	r0, #128	; 0x80
    87ee:	f005 f89c 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    87f2:	b108      	cbz	r0, 87f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>
    87f4:	2000      	movs	r0, #0
    87f6:	bd10      	pop	{r4, pc}
    87f8:	6860      	ldr	r0, [r4, #4]
    87fa:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
    87fe:	2800      	cmp	r0, #0
    8800:	d0f9      	beq.n	87f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    8802:	2100      	movs	r1, #0
    8804:	2012      	movs	r0, #18
    8806:	f000 fc65 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    880a:	2001      	movs	r0, #1
    880c:	bd10      	pop	{r4, pc}
    880e:	0000      	.short	0x0000
    8810:	20000170 	.word	0x20000170
    8814:	490d      	ldr	r1, [pc, #52]	; (884c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f0>)
    8816:	4602      	mov	r2, r0
    8818:	7848      	ldrb	r0, [r1, #1]
    881a:	b9a0      	cbnz	r0, 8846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    881c:	f101 0010 	add.w	r0, r1, #16
    8820:	6840      	ldr	r0, [r0, #4]
    8822:	b142      	cbz	r2, 8836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4da>
    8824:	7889      	ldrb	r1, [r1, #2]
    8826:	0709      	lsls	r1, r1, #28
    8828:	d503      	bpl.n	8832 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d6>
    882a:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
    882e:	2808      	cmp	r0, #8
    8830:	d009      	beq.n	8846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    8832:	2001      	movs	r0, #1
    8834:	4770      	bx	lr
    8836:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    883a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    883c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    883e:	428a      	cmp	r2, r1
    8840:	d801      	bhi.n	8846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    8842:	f7ff b92d 	b.w	7aa0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8846:	2000      	movs	r0, #0
    8848:	4770      	bx	lr
    884a:	0000      	.short	0x0000
    884c:	20000160 	.word	0x20000160
    8850:	b538      	push	{r3, r4, r5, lr}
    8852:	4c32      	ldr	r4, [pc, #200]	; (891c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c0>)
    8854:	4605      	mov	r5, r0
    8856:	6860      	ldr	r0, [r4, #4]
    8858:	3080      	adds	r0, #128	; 0x80
    885a:	f006 fcfa 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    885e:	2800      	cmp	r0, #0
    8860:	d15b      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8862:	2d00      	cmp	r5, #0
    8864:	d159      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8866:	6860      	ldr	r0, [r4, #4]
    8868:	2301      	movs	r3, #1
    886a:	4619      	mov	r1, r3
    886c:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    8870:	3080      	adds	r0, #128	; 0x80
    8872:	f005 f85a 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8876:	2800      	cmp	r0, #0
    8878:	d14f      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    887a:	6860      	ldr	r0, [r4, #4]
    887c:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    8880:	f88d 1000 	strb.w	r1, [sp]
    8884:	9900      	ldr	r1, [sp, #0]
    8886:	9100      	str	r1, [sp, #0]
    8888:	f89d 2000 	ldrb.w	r2, [sp]
    888c:	2100      	movs	r1, #0
    888e:	b142      	cbz	r2, 88a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x546>
    8890:	f8a0 10c8 	strh.w	r1, [r0, #200]	; 0xc8
    8894:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    8898:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    889c:	2100      	movs	r1, #0
    889e:	2002      	movs	r0, #2
    88a0:	e030      	b.n	8904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    88a2:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    88a6:	2301      	movs	r3, #1
    88a8:	2104      	movs	r1, #4
    88aa:	3080      	adds	r0, #128	; 0x80
    88ac:	f005 f83d 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    88b0:	4605      	mov	r5, r0
    88b2:	f7ff feb1 	bl	8618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    88b6:	2800      	cmp	r0, #0
    88b8:	d12f      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88ba:	4628      	mov	r0, r5
    88bc:	f7ff fe6e 	bl	859c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    88c0:	2800      	cmp	r0, #0
    88c2:	d12a      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88c4:	f7ff ff82 	bl	87cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x470>
    88c8:	2800      	cmp	r0, #0
    88ca:	d126      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88cc:	6860      	ldr	r0, [r4, #4]
    88ce:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    88d2:	290a      	cmp	r1, #10
    88d4:	d01a      	beq.n	890c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    88d6:	2d00      	cmp	r5, #0
    88d8:	d11f      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88da:	f000 fb27 	bl	8f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd0>
    88de:	2800      	cmp	r0, #0
    88e0:	d11b      	bne.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88e2:	6860      	ldr	r0, [r4, #4]
    88e4:	2301      	movs	r3, #1
    88e6:	2100      	movs	r1, #0
    88e8:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    88ec:	3080      	adds	r0, #128	; 0x80
    88ee:	f005 f81c 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    88f2:	2800      	cmp	r0, #0
    88f4:	d011      	beq.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    88f6:	6860      	ldr	r0, [r4, #4]
    88f8:	f890 02b4 	ldrb.w	r0, [r0, #692]	; 0x2b4
    88fc:	2800      	cmp	r0, #0
    88fe:	d00c      	beq.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8900:	2100      	movs	r1, #0
    8902:	20ff      	movs	r0, #255	; 0xff
    8904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8908:	f000 bbe4 	b.w	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    890c:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    8910:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    8914:	2100      	movs	r1, #0
    8916:	2007      	movs	r0, #7
    8918:	e7f4      	b.n	8904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    891a:	bd38      	pop	{r3, r4, r5, pc}
    891c:	20000170 	.word	0x20000170
    8920:	4808      	ldr	r0, [pc, #32]	; (8944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>)
    8922:	6843      	ldr	r3, [r0, #4]
    8924:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    8928:	2801      	cmp	r0, #1
    892a:	d006      	beq.n	893a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5de>
    892c:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
    8930:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    8934:	8818      	ldrh	r0, [r3, #0]
    8936:	f005 bc0d 	b.w	e154 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    893a:	2002      	movs	r0, #2
    893c:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    8940:	4770      	bx	lr
    8942:	0000      	.short	0x0000
    8944:	20000170 	.word	0x20000170
    8948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    894a:	4d2b      	ldr	r5, [pc, #172]	; (89f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    894c:	0006      	movs	r6, r0
    894e:	f105 0410 	add.w	r4, r5, #16
    8952:	d133      	bne.n	89bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8954:	f000 f8b6 	bl	8ac4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x768>
    8958:	f000 f852 	bl	8a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
    895c:	0006      	movs	r6, r0
    895e:	d12d      	bne.n	89bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8960:	8869      	ldrh	r1, [r5, #2]
    8962:	0748      	lsls	r0, r1, #29
    8964:	d506      	bpl.n	8974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x618>
    8966:	6860      	ldr	r0, [r4, #4]
    8968:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
    896c:	2807      	cmp	r0, #7
    896e:	d101      	bne.n	8974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x618>
    8970:	2001      	movs	r0, #1
    8972:	7028      	strb	r0, [r5, #0]
    8974:	0788      	lsls	r0, r1, #30
    8976:	d516      	bpl.n	89a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    8978:	68a8      	ldr	r0, [r5, #8]
    897a:	78c0      	ldrb	r0, [r0, #3]
    897c:	282b      	cmp	r0, #43	; 0x2b
    897e:	d207      	bcs.n	8990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    8980:	491e      	ldr	r1, [pc, #120]	; (89fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
    8982:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    8986:	b119      	cbz	r1, 8990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    8988:	481b      	ldr	r0, [pc, #108]	; (89f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    898a:	3010      	adds	r0, #16
    898c:	4788      	blx	r1
    898e:	e00a      	b.n	89a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    8990:	28ff      	cmp	r0, #255	; 0xff
    8992:	d004      	beq.n	899e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x642>
    8994:	f640 01c1 	movw	r1, #2241	; 0x8c1
    8998:	2031      	movs	r0, #49	; 0x31
    899a:	f7fb fde7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    899e:	4816      	ldr	r0, [pc, #88]	; (89f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    89a0:	3010      	adds	r0, #16
    89a2:	f006 fd4a 	bl	f43a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x206>
    89a6:	78a8      	ldrb	r0, [r5, #2]
    89a8:	06c0      	lsls	r0, r0, #27
    89aa:	d507      	bpl.n	89bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    89ac:	6860      	ldr	r0, [r4, #4]
    89ae:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    89b2:	290b      	cmp	r1, #11
    89b4:	d102      	bne.n	89bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    89b6:	210c      	movs	r1, #12
    89b8:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    89bc:	7868      	ldrb	r0, [r5, #1]
    89be:	0700      	lsls	r0, r0, #28
    89c0:	d518      	bpl.n	89f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    89c2:	6860      	ldr	r0, [r4, #4]
    89c4:	2301      	movs	r3, #1
    89c6:	2105      	movs	r1, #5
    89c8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    89cc:	3080      	adds	r0, #128	; 0x80
    89ce:	f004 ffac 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89d2:	b108      	cbz	r0, 89d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67c>
    89d4:	2608      	movs	r6, #8
    89d6:	e00d      	b.n	89f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    89d8:	2500      	movs	r5, #0
    89da:	4669      	mov	r1, sp
    89dc:	4628      	mov	r0, r5
    89de:	9500      	str	r5, [sp, #0]
    89e0:	f7fc fd8e 	bl	5500 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    89e4:	9800      	ldr	r0, [sp, #0]
    89e6:	b128      	cbz	r0, 89f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    89e8:	7205      	strb	r5, [r0, #8]
    89ea:	2227      	movs	r2, #39	; 0x27
    89ec:	6861      	ldr	r1, [r4, #4]
    89ee:	9800      	ldr	r0, [sp, #0]
    89f0:	f7fd fd2e 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    89f4:	4630      	mov	r0, r6
    89f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    89f8:	20000160 	.word	0x20000160
    89fc:	20000224 	.word	0x20000224
    8a00:	b570      	push	{r4, r5, r6, lr}
    8a02:	4d2e      	ldr	r5, [pc, #184]	; (8abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8a04:	2000      	movs	r0, #0
    8a06:	78a9      	ldrb	r1, [r5, #2]
    8a08:	07c9      	lsls	r1, r1, #31
    8a0a:	d017      	beq.n	8a3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e0>
    8a0c:	68e8      	ldr	r0, [r5, #12]
    8a0e:	f105 0410 	add.w	r4, r5, #16
    8a12:	2301      	movs	r3, #1
    8a14:	78c6      	ldrb	r6, [r0, #3]
    8a16:	6860      	ldr	r0, [r4, #4]
    8a18:	2105      	movs	r1, #5
    8a1a:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8a1e:	3080      	adds	r0, #128	; 0x80
    8a20:	f004 ff83 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a24:	b158      	cbz	r0, 8a3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    8a26:	1eb6      	subs	r6, r6, #2
    8a28:	2e0a      	cmp	r6, #10
    8a2a:	d206      	bcs.n	8a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    8a2c:	e8df f006 	tbb	[pc, r6]
    8a30:	05050707 	.word	0x05050707
    8a34:	05050707 	.word	0x05050707
    8a38:	0707      	.short	0x0707
    8a3a:	2008      	movs	r0, #8
    8a3c:	bd70      	pop	{r4, r5, r6, pc}
    8a3e:	68e8      	ldr	r0, [r5, #12]
    8a40:	f7fd fc6c 	bl	631c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    8a44:	b138      	cbz	r0, 8a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    8a46:	68e8      	ldr	r0, [r5, #12]
    8a48:	78c5      	ldrb	r5, [r0, #3]
    8a4a:	b155      	cbz	r5, 8a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8a4c:	2d01      	cmp	r5, #1
    8a4e:	d008      	beq.n	8a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8a50:	2d16      	cmp	r5, #22
    8a52:	d11a      	bne.n	8a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8a54:	e005      	b.n	8a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8a5a:	4818      	ldr	r0, [pc, #96]	; (8abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8a5c:	3010      	adds	r0, #16
    8a5e:	f000 bd87 	b.w	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    8a62:	6860      	ldr	r0, [r4, #4]
    8a64:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    8a68:	f004 ffb7 	bl	d9da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8a6c:	b168      	cbz	r0, 8a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8a6e:	6860      	ldr	r0, [r4, #4]
    8a70:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8a74:	2921      	cmp	r1, #33	; 0x21
    8a76:	d008      	beq.n	8a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8a78:	2922      	cmp	r1, #34	; 0x22
    8a7a:	d003      	beq.n	8a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    8a7c:	2d16      	cmp	r5, #22
    8a7e:	d00e      	beq.n	8a9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    8a80:	2002      	movs	r0, #2
    8a82:	bd70      	pop	{r4, r5, r6, pc}
    8a84:	212e      	movs	r1, #46	; 0x2e
    8a86:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8a8a:	2d2b      	cmp	r5, #43	; 0x2b
    8a8c:	d209      	bcs.n	8aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    8a8e:	480c      	ldr	r0, [pc, #48]	; (8ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x764>)
    8a90:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    8a94:	b129      	cbz	r1, 8aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    8a96:	4809      	ldr	r0, [pc, #36]	; (8abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8a98:	3010      	adds	r0, #16
    8a9a:	4788      	blx	r1
    8a9c:	e005      	b.n	8aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74e>
    8a9e:	2020      	movs	r0, #32
    8aa0:	bd70      	pop	{r4, r5, r6, pc}
    8aa2:	4806      	ldr	r0, [pc, #24]	; (8abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8aa4:	3010      	adds	r0, #16
    8aa6:	f000 fd63 	bl	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    8aaa:	6862      	ldr	r2, [r4, #4]
    8aac:	e9f2 133e 	ldrd	r1, r3, [r2, #248]!	; 0xf8
    8ab0:	1c49      	adds	r1, r1, #1
    8ab2:	f143 0300 	adc.w	r3, r3, #0
    8ab6:	e9c2 1300 	strd	r1, r3, [r2]
    8aba:	bd70      	pop	{r4, r5, r6, pc}
    8abc:	20000160 	.word	0x20000160
    8ac0:	20000178 	.word	0x20000178
    8ac4:	b570      	push	{r4, r5, r6, lr}
    8ac6:	4e23      	ldr	r6, [pc, #140]	; (8b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f8>)
    8ac8:	78b0      	ldrb	r0, [r6, #2]
    8aca:	0700      	lsls	r0, r0, #28
    8acc:	d540      	bpl.n	8b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f4>
    8ace:	f106 0410 	add.w	r4, r6, #16
    8ad2:	6860      	ldr	r0, [r4, #4]
    8ad4:	3080      	adds	r0, #128	; 0x80
    8ad6:	f006 fbbc 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8ada:	b148      	cbz	r0, 8af0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x794>
    8adc:	6860      	ldr	r0, [r4, #4]
    8ade:	21fe      	movs	r1, #254	; 0xfe
    8ae0:	2500      	movs	r5, #0
    8ae2:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    8ae6:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8aea:	291b      	cmp	r1, #27
    8aec:	d10c      	bne.n	8b08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ac>
    8aee:	e004      	b.n	8afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x79e>
    8af0:	f640 01cd 	movw	r1, #2253	; 0x8cd
    8af4:	2031      	movs	r0, #49	; 0x31
    8af6:	f7fb fd39 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8afa:	f880 50d3 	strb.w	r5, [r0, #211]	; 0xd3
    8afe:	f7ff fd3b 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8b02:	6860      	ldr	r0, [r4, #4]
    8b04:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    8b08:	6860      	ldr	r0, [r4, #4]
    8b0a:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8b0e:	2921      	cmp	r1, #33	; 0x21
    8b10:	d002      	beq.n	8b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7bc>
    8b12:	2930      	cmp	r1, #48	; 0x30
    8b14:	d113      	bne.n	8b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    8b16:	e00b      	b.n	8b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d4>
    8b18:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    8b1c:	f004 ff5d 	bl	d9da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8b20:	b108      	cbz	r0, 8b26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ca>
    8b22:	202e      	movs	r0, #46	; 0x2e
    8b24:	e000      	b.n	8b28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7cc>
    8b26:	2022      	movs	r0, #34	; 0x22
    8b28:	6861      	ldr	r1, [r4, #4]
    8b2a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    8b2e:	e006      	b.n	8b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    8b30:	2101      	movs	r1, #1
    8b32:	f880 12b5 	strb.w	r1, [r0, #693]	; 0x2b5
    8b36:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
    8b3a:	f880 50ce 	strb.w	r5, [r0, #206]	; 0xce
    8b3e:	6860      	ldr	r0, [r4, #4]
    8b40:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
    8b44:	2908      	cmp	r1, #8
    8b46:	d103      	bne.n	8b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f4>
    8b48:	2102      	movs	r1, #2
    8b4a:	7031      	strb	r1, [r6, #0]
    8b4c:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    8b50:	bd70      	pop	{r4, r5, r6, pc}
    8b52:	0000      	.short	0x0000
    8b54:	20000160 	.word	0x20000160
    8b58:	b538      	push	{r3, r4, r5, lr}
    8b5a:	4605      	mov	r5, r0
    8b5c:	4668      	mov	r0, sp
    8b5e:	f7fc fb67 	bl	5230 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    8b62:	b308      	cbz	r0, 8ba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84c>
    8b64:	2222      	movs	r2, #34	; 0x22
    8b66:	2100      	movs	r1, #0
    8b68:	9800      	ldr	r0, [sp, #0]
    8b6a:	f003 fd10 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8b6e:	2103      	movs	r1, #3
    8b70:	9800      	ldr	r0, [sp, #0]
    8b72:	f005 f9ee 	bl	df52 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    8b76:	9800      	ldr	r0, [sp, #0]
    8b78:	7801      	ldrb	r1, [r0, #0]
    8b7a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    8b7e:	7001      	strb	r1, [r0, #0]
    8b80:	4629      	mov	r1, r5
    8b82:	f7fd fbdb 	bl	633c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    8b86:	4c59      	ldr	r4, [pc, #356]	; (8cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    8b88:	2d11      	cmp	r5, #17
    8b8a:	d02d      	beq.n	8be8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88c>
    8b8c:	dc0f      	bgt.n	8bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x852>
    8b8e:	f1a5 0502 	sub.w	r5, r5, #2
    8b92:	2d0d      	cmp	r5, #13
    8b94:	d21f      	bcs.n	8bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87a>
    8b96:	e8df f005 	tbb	[pc, r5]
    8b9a:	1e21      	.short	0x1e21
    8b9c:	219e9e51 	.word	0x219e9e51
    8ba0:	9e1e5e1e 	.word	0x9e1e5e1e
    8ba4:	008c343a 	.word	0x008c343a
    8ba8:	f640 314c 	movw	r1, #2892	; 0xb4c
    8bac:	e099      	b.n	8ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x986>
    8bae:	2d17      	cmp	r5, #23
    8bb0:	d070      	beq.n	8c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    8bb2:	dc08      	bgt.n	8bc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    8bb4:	f1a5 0512 	sub.w	r5, r5, #18
    8bb8:	2d05      	cmp	r5, #5
    8bba:	d20c      	bcs.n	8bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87a>
    8bbc:	e8df f005 	tbb	[pc, r5]
    8bc0:	50508b8b 	.word	0x50508b8b
    8bc4:	0033      	.short	0x0033
    8bc6:	2d23      	cmp	r5, #35	; 0x23
    8bc8:	d077      	beq.n	8cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8bca:	2d24      	cmp	r5, #36	; 0x24
    8bcc:	d075      	beq.n	8cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8bce:	2d25      	cmp	r5, #37	; 0x25
    8bd0:	d073      	beq.n	8cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8bd2:	2dff      	cmp	r5, #255	; 0xff
    8bd4:	d077      	beq.n	8cc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    8bd6:	f640 31e3 	movw	r1, #3043	; 0xbe3
    8bda:	e082      	b.n	8ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x986>
    8bdc:	6860      	ldr	r0, [r4, #4]
    8bde:	9900      	ldr	r1, [sp, #0]
    8be0:	f890 011e 	ldrb.w	r0, [r0, #286]	; 0x11e
    8be4:	7108      	strb	r0, [r1, #4]
    8be6:	e076      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8be8:	6860      	ldr	r0, [r4, #4]
    8bea:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    8bee:	9800      	ldr	r0, [sp, #0]
    8bf0:	f005 f99b 	bl	df2a <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    8bf4:	6860      	ldr	r0, [r4, #4]
    8bf6:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    8bfa:	9800      	ldr	r0, [sp, #0]
    8bfc:	f005 f999 	bl	df32 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    8c00:	e069      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c02:	6861      	ldr	r1, [r4, #4]
    8c04:	9800      	ldr	r0, [sp, #0]
    8c06:	f891 111a 	ldrb.w	r1, [r1, #282]	; 0x11a
    8c0a:	7101      	strb	r1, [r0, #4]
    8c0c:	e063      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c0e:	9800      	ldr	r0, [sp, #0]
    8c10:	210c      	movs	r1, #12
    8c12:	7101      	strb	r1, [r0, #4]
    8c14:	2159      	movs	r1, #89	; 0x59
    8c16:	7141      	strb	r1, [r0, #5]
    8c18:	2100      	movs	r1, #0
    8c1a:	7181      	strb	r1, [r0, #6]
    8c1c:	21fa      	movs	r1, #250	; 0xfa
    8c1e:	71c1      	strb	r1, [r0, #7]
    8c20:	2111      	movs	r1, #17
    8c22:	7201      	strb	r1, [r0, #8]
    8c24:	e057      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c26:	9800      	ldr	r0, [sp, #0]
    8c28:	f8d4 1004 	ldr.w	r1, [r4, #4]
    8c2c:	f891 1136 	ldrb.w	r1, [r1, #310]	; 0x136
    8c30:	7101      	strb	r1, [r0, #4]
    8c32:	6861      	ldr	r1, [r4, #4]
    8c34:	f891 1137 	ldrb.w	r1, [r1, #311]	; 0x137
    8c38:	7141      	strb	r1, [r0, #5]
    8c3a:	e04c      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c3c:	6861      	ldr	r1, [r4, #4]
    8c3e:	9800      	ldr	r0, [sp, #0]
    8c40:	f501 710c 	add.w	r1, r1, #560	; 0x230
    8c44:	f005 f92c 	bl	dea0 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    8c48:	6861      	ldr	r1, [r4, #4]
    8c4a:	9800      	ldr	r0, [sp, #0]
    8c4c:	f501 718a 	add.w	r1, r1, #276	; 0x114
    8c50:	f005 f923 	bl	de9a <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    8c54:	e03f      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c56:	4825      	ldr	r0, [pc, #148]	; (8cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    8c58:	9900      	ldr	r1, [sp, #0]
    8c5a:	f7fd ff1f 	bl	6a9c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    8c5e:	e03a      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c60:	6860      	ldr	r0, [r4, #4]
    8c62:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    8c66:	9800      	ldr	r0, [sp, #0]
    8c68:	f005 f97b 	bl	df62 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    8c6c:	6860      	ldr	r0, [r4, #4]
    8c6e:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    8c72:	9800      	ldr	r0, [sp, #0]
    8c74:	f005 f979 	bl	df6a <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    8c78:	6860      	ldr	r0, [r4, #4]
    8c7a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    8c7e:	9800      	ldr	r0, [sp, #0]
    8c80:	f005 f977 	bl	df72 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    8c84:	6860      	ldr	r0, [r4, #4]
    8c86:	f8b0 111e 	ldrh.w	r1, [r0, #286]	; 0x11e
    8c8a:	9800      	ldr	r0, [sp, #0]
    8c8c:	f005 f975 	bl	df7a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    8c90:	e021      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8c92:	e7ff      	b.n	8c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    8c94:	6861      	ldr	r1, [r4, #4]
    8c96:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    8c9a:	2801      	cmp	r0, #1
    8c9c:	9800      	ldr	r0, [sp, #0]
    8c9e:	d0c5      	beq.n	8c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d0>
    8ca0:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    8ca4:	7101      	strb	r1, [r0, #4]
    8ca6:	6861      	ldr	r1, [r4, #4]
    8ca8:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    8cac:	e7c4      	b.n	8c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8dc>
    8cae:	e004      	b.n	8cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8cb0:	e009      	b.n	8cc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    8cb2:	9800      	ldr	r0, [sp, #0]
    8cb4:	f7fd feac 	bl	6a10 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    8cb8:	e00d      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8cba:	4a0c      	ldr	r2, [pc, #48]	; (8cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    8cbc:	4628      	mov	r0, r5
    8cbe:	9900      	ldr	r1, [sp, #0]
    8cc0:	f006 fd12 	bl	f6e8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    8cc4:	e007      	b.n	8cd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8cc6:	6860      	ldr	r0, [r4, #4]
    8cc8:	f890 22b7 	ldrb.w	r2, [r0, #695]	; 0x2b7
    8ccc:	f8d0 12b8 	ldr.w	r1, [r0, #696]	; 0x2b8
    8cd0:	9800      	ldr	r0, [sp, #0]
    8cd2:	f005 f930 	bl	df36 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    8cd6:	f7fc fa85 	bl	51e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8cda:	2800      	cmp	r0, #0
    8cdc:	d104      	bne.n	8ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98c>
    8cde:	f640 31e7 	movw	r1, #3047	; 0xbe7
    8ce2:	2031      	movs	r0, #49	; 0x31
    8ce4:	f7fb fc42 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ce8:	bd38      	pop	{r3, r4, r5, pc}
    8cea:	0000      	.short	0x0000
    8cec:	20000170 	.word	0x20000170
    8cf0:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8cf4:	4e8c      	ldr	r6, [pc, #560]	; (8f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbcc>)
    8cf6:	468a      	mov	sl, r1
    8cf8:	6870      	ldr	r0, [r6, #4]
    8cfa:	8800      	ldrh	r0, [r0, #0]
    8cfc:	f7fc f844 	bl	4d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8d00:	0007      	movs	r7, r0
    8d02:	d00c      	beq.n	8d1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c2>
    8d04:	f1a6 0510 	sub.w	r5, r6, #16
    8d08:	f04f 0400 	mov.w	r4, #0
    8d0c:	8868      	ldrh	r0, [r5, #2]
    8d0e:	05c0      	lsls	r0, r0, #23
    8d10:	d50a      	bpl.n	8d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9cc>
    8d12:	6870      	ldr	r0, [r6, #4]
    8d14:	f8a0 40c4 	strh.w	r4, [r0, #196]	; 0xc4
    8d18:	f880 4224 	strb.w	r4, [r0, #548]	; 0x224
    8d1c:	e009      	b.n	8d32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d6>
    8d1e:	f640 61d2 	movw	r1, #3794	; 0xed2
    8d22:	2031      	movs	r0, #49	; 0x31
    8d24:	f7fb fc22 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d28:	6871      	ldr	r1, [r6, #4]
    8d2a:	f831 0fc4 	ldrh.w	r0, [r1, #196]!
    8d2e:	1c40      	adds	r0, r0, #1
    8d30:	8008      	strh	r0, [r1, #0]
    8d32:	f000 ff77 	bl	9c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    8d36:	f04f 0901 	mov.w	r9, #1
    8d3a:	b338      	cbz	r0, 8d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8d3c:	8868      	ldrh	r0, [r5, #2]
    8d3e:	0500      	lsls	r0, r0, #20
    8d40:	d506      	bpl.n	8d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    8d42:	6870      	ldr	r0, [r6, #4]
    8d44:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
    8d48:	b111      	cbz	r1, 8d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    8d4a:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8
    8d4e:	e01d      	b.n	8d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8d50:	6871      	ldr	r1, [r6, #4]
    8d52:	f8d1 00b8 	ldr.w	r0, [r1, #184]	; 0xb8
    8d56:	1c40      	adds	r0, r0, #1
    8d58:	f8c1 00b8 	str.w	r0, [r1, #184]	; 0xb8
    8d5c:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    8d60:	4282      	cmp	r2, r0
    8d62:	d301      	bcc.n	8d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0c>
    8d64:	1a13      	subs	r3, r2, r0
    8d66:	e000      	b.n	8d6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    8d68:	2300      	movs	r3, #0
    8d6a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    8d6e:	f10c 0c05 	add.w	ip, ip, #5
    8d72:	4563      	cmp	r3, ip
    8d74:	d801      	bhi.n	8d7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    8d76:	f881 90c2 	strb.w	r9, [r1, #194]	; 0xc2
    8d7a:	4290      	cmp	r0, r2
    8d7c:	d306      	bcc.n	8d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8d7e:	f501 70a9 	add.w	r0, r1, #338	; 0x152
    8d82:	220e      	movs	r2, #14
    8d84:	f8c1 40b8 	str.w	r4, [r1, #184]	; 0xb8
    8d88:	f7fd fb62 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8d8c:	8868      	ldrh	r0, [r5, #2]
    8d8e:	f04f 0b02 	mov.w	fp, #2
    8d92:	f410 7f40 	tst.w	r0, #768	; 0x300
    8d96:	d00e      	beq.n	8db6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    8d98:	6870      	ldr	r0, [r6, #4]
    8d9a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8d9e:	b111      	cbz	r1, 8da6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4a>
    8da0:	2903      	cmp	r1, #3
    8da2:	d108      	bne.n	8db6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    8da4:	e002      	b.n	8dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa50>
    8da6:	f880 9099 	strb.w	r9, [r0, #153]	; 0x99
    8daa:	e001      	b.n	8db0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa54>
    8dac:	f880 b099 	strb.w	fp, [r0, #153]	; 0x99
    8db0:	2101      	movs	r1, #1
    8db2:	f7fe fe9b 	bl	7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8db6:	6870      	ldr	r0, [r6, #4]
    8db8:	46b0      	mov	r8, r6
    8dba:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8dbe:	2901      	cmp	r1, #1
    8dc0:	d104      	bne.n	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa70>
    8dc2:	8869      	ldrh	r1, [r5, #2]
    8dc4:	0549      	lsls	r1, r1, #21
    8dc6:	d501      	bpl.n	8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa70>
    8dc8:	f880 b099 	strb.w	fp, [r0, #153]	; 0x99
    8dcc:	9900      	ldr	r1, [sp, #0]
    8dce:	2900      	cmp	r1, #0
    8dd0:	d179      	bne.n	8ec6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
    8dd2:	78a9      	ldrb	r1, [r5, #2]
    8dd4:	0649      	lsls	r1, r1, #25
    8dd6:	d502      	bpl.n	8dde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    8dd8:	f8a0 4238 	strh.w	r4, [r0, #568]	; 0x238
    8ddc:	e004      	b.n	8de8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa8c>
    8dde:	f8b0 1238 	ldrh.w	r1, [r0, #568]	; 0x238
    8de2:	1c49      	adds	r1, r1, #1
    8de4:	f8a0 1238 	strh.w	r1, [r0, #568]	; 0x238
    8de8:	4650      	mov	r0, sl
    8dea:	f7ff fdad 	bl	8948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ec>
    8dee:	ea40 000a 	orr.w	r0, r0, sl
    8df2:	4682      	mov	sl, r0
    8df4:	f7ff fd2c 	bl	8850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f4>
    8df8:	f8d8 6004 	ldr.w	r6, [r8, #4]
    8dfc:	f8b6 0218 	ldrh.w	r0, [r6, #536]	; 0x218
    8e00:	1c40      	adds	r0, r0, #1
    8e02:	f8a6 0218 	strh.w	r0, [r6, #536]	; 0x218
    8e06:	f896 021c 	ldrb.w	r0, [r6, #540]	; 0x21c
    8e0a:	b128      	cbz	r0, 8e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xabc>
    8e0c:	f7fc fbd8 	bl	55c0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    8e10:	b1b0      	cbz	r0, 8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8e12:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8e16:	e013      	b.n	8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8e18:	f7fc fa8c 	bl	5334 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8e1c:	b108      	cbz	r0, 8e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac6>
    8e1e:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8e22:	f7fc fa81 	bl	5328 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8e26:	b158      	cbz	r0, 8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8e28:	f896 0224 	ldrb.w	r0, [r6, #548]	; 0x224
    8e2c:	1c40      	adds	r0, r0, #1
    8e2e:	b2c0      	uxtb	r0, r0
    8e30:	f886 0224 	strb.w	r0, [r6, #548]	; 0x224
    8e34:	2802      	cmp	r0, #2
    8e36:	d903      	bls.n	8e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8e38:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8e3c:	f886 4224 	strb.w	r4, [r6, #548]	; 0x224
    8e40:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8e44:	4646      	mov	r6, r8
    8e46:	2301      	movs	r3, #1
    8e48:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8e4c:	2100      	movs	r1, #0
    8e4e:	3080      	adds	r0, #128	; 0x80
    8e50:	f004 fd6b 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e54:	b920      	cbnz	r0, 8e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    8e56:	6870      	ldr	r0, [r6, #4]
    8e58:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    8e5c:	280c      	cmp	r0, #12
    8e5e:	d160      	bne.n	8f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8e60:	6870      	ldr	r0, [r6, #4]
    8e62:	2301      	movs	r3, #1
    8e64:	2100      	movs	r1, #0
    8e66:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    8e6a:	3080      	adds	r0, #128	; 0x80
    8e6c:	f004 fd5d 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e70:	b350      	cbz	r0, 8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e72:	6870      	ldr	r0, [r6, #4]
    8e74:	2301      	movs	r3, #1
    8e76:	2100      	movs	r1, #0
    8e78:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    8e7c:	3080      	adds	r0, #128	; 0x80
    8e7e:	f004 fd54 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e82:	b308      	cbz	r0, 8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e84:	6870      	ldr	r0, [r6, #4]
    8e86:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8e8a:	2902      	cmp	r1, #2
    8e8c:	d149      	bne.n	8f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8e8e:	f890 0224 	ldrb.w	r0, [r0, #548]	; 0x224
    8e92:	b9c8      	cbnz	r0, 8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e94:	4638      	mov	r0, r7
    8e96:	f004 f84f 	bl	cf38 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8e9a:	b1a8      	cbz	r0, 8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8e9c:	6870      	ldr	r0, [r6, #4]
    8e9e:	3080      	adds	r0, #128	; 0x80
    8ea0:	f006 f9d7 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8ea4:	b980      	cbnz	r0, 8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8ea6:	6871      	ldr	r1, [r6, #4]
    8ea8:	f8b1 0212 	ldrh.w	r0, [r1, #530]	; 0x212
    8eac:	2801      	cmp	r0, #1
    8eae:	d938      	bls.n	8f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8eb0:	f881 921a 	strb.w	r9, [r1, #538]	; 0x21a
    8eb4:	f8b1 00c6 	ldrh.w	r0, [r1, #198]	; 0xc6
    8eb8:	f8b1 20c4 	ldrh.w	r2, [r1, #196]	; 0xc4
    8ebc:	1e83      	subs	r3, r0, #2
    8ebe:	429a      	cmp	r2, r3
    8ec0:	db03      	blt.n	8eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6e>
    8ec2:	2001      	movs	r0, #1
    8ec4:	e004      	b.n	8ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb74>
    8ec6:	e01d      	b.n	8f04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    8ec8:	e02b      	b.n	8f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8eca:	1a80      	subs	r0, r0, r2
    8ecc:	1e40      	subs	r0, r0, #1
    8ece:	b280      	uxth	r0, r0
    8ed0:	f8b1 2218 	ldrh.w	r2, [r1, #536]	; 0x218
    8ed4:	88ab      	ldrh	r3, [r5, #4]
    8ed6:	429a      	cmp	r2, r3
    8ed8:	d301      	bcc.n	8ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    8eda:	2201      	movs	r2, #1
    8edc:	e002      	b.n	8ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    8ede:	1a9a      	subs	r2, r3, r2
    8ee0:	1c52      	adds	r2, r2, #1
    8ee2:	b292      	uxth	r2, r2
    8ee4:	4290      	cmp	r0, r2
    8ee6:	d900      	bls.n	8eea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8e>
    8ee8:	4610      	mov	r0, r2
    8eea:	2801      	cmp	r0, #1
    8eec:	d102      	bne.n	8ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb98>
    8eee:	bf00      	nop
    8ef0:	f881 421a 	strb.w	r4, [r1, #538]	; 0x21a
    8ef4:	6871      	ldr	r1, [r6, #4]
    8ef6:	f8b1 208c 	ldrh.w	r2, [r1, #140]	; 0x8c
    8efa:	4410      	add	r0, r2
    8efc:	f8a1 0214 	strh.w	r0, [r1, #532]	; 0x214
    8f00:	f000 ff64 	bl	9dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a70>
    8f04:	78a8      	ldrb	r0, [r5, #2]
    8f06:	4652      	mov	r2, sl
    8f08:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8f0c:	9800      	ldr	r0, [sp, #0]
    8f0e:	f000 fe9d 	bl	9c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    8f12:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8f16:	f880 421b 	strb.w	r4, [r0, #539]	; 0x21b
    8f1a:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8f1e:	f7fc b94b 	b.w	51b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8f22:	2001      	movs	r0, #1
    8f24:	6871      	ldr	r1, [r6, #4]
    8f26:	e7e3      	b.n	8ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb94>
    8f28:	20000170 	.word	0x20000170
    8f2c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8f2e:	4c68      	ldr	r4, [pc, #416]	; (90d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd74>)
    8f30:	2301      	movs	r3, #1
    8f32:	2100      	movs	r1, #0
    8f34:	6860      	ldr	r0, [r4, #4]
    8f36:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    8f3a:	3080      	adds	r0, #128	; 0x80
    8f3c:	f004 fcf5 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f40:	2800      	cmp	r0, #0
    8f42:	d07a      	beq.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcde>
    8f44:	6860      	ldr	r0, [r4, #4]
    8f46:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    8f4a:	2500      	movs	r5, #0
    8f4c:	b139      	cbz	r1, 8f5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc02>
    8f4e:	2100      	movs	r1, #0
    8f50:	200e      	movs	r0, #14
    8f52:	f000 f8bf 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8f56:	6860      	ldr	r0, [r4, #4]
    8f58:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    8f5c:	e0b5      	b.n	90ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8f5e:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    8f62:	b119      	cbz	r1, 8f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc10>
    8f64:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    8f68:	0789      	lsls	r1, r1, #30
    8f6a:	d016      	beq.n	8f9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    8f6c:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    8f70:	f88d 1004 	strb.w	r1, [sp, #4]
    8f74:	9901      	ldr	r1, [sp, #4]
    8f76:	9101      	str	r1, [sp, #4]
    8f78:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8f7c:	b141      	cbz	r1, 8f90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc34>
    8f7e:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    8f82:	f88d 1000 	strb.w	r1, [sp]
    8f86:	9900      	ldr	r1, [sp, #0]
    8f88:	9100      	str	r1, [sp, #0]
    8f8a:	f89d 1000 	ldrb.w	r1, [sp]
    8f8e:	b189      	cbz	r1, 8fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc58>
    8f90:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    8f94:	2901      	cmp	r1, #1
    8f96:	d030      	beq.n	8ffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9e>
    8f98:	e040      	b.n	901c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc0>
    8f9a:	2100      	movs	r1, #0
    8f9c:	200c      	movs	r0, #12
    8f9e:	f000 f899 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8fa2:	6860      	ldr	r0, [r4, #4]
    8fa4:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    8fa8:	f041 0101 	orr.w	r1, r1, #1
    8fac:	7001      	strb	r1, [r0, #0]
    8fae:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    8fb2:	e08a      	b.n	90ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8fb4:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8fb8:	2926      	cmp	r1, #38	; 0x26
    8fba:	d01c      	beq.n	8ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9a>
    8fbc:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8fc0:	2926      	cmp	r1, #38	; 0x26
    8fc2:	d018      	beq.n	8ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9a>
    8fc4:	f05f 0300 	movs.w	r3, #0
    8fc8:	f200 22be 	addw	r2, r0, #702	; 0x2be
    8fcc:	f500 7195 	add.w	r1, r0, #298	; 0x12a
    8fd0:	f005 f8e8 	bl	e1a4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8fd4:	6860      	ldr	r0, [r4, #4]
    8fd6:	f880 512a 	strb.w	r5, [r0, #298]	; 0x12a
    8fda:	2100      	movs	r1, #0
    8fdc:	2014      	movs	r0, #20
    8fde:	f000 f879 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8fe2:	6861      	ldr	r1, [r4, #4]
    8fe4:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8fe8:	8bc2      	ldrh	r2, [r0, #30]
    8fea:	f8a1 211e 	strh.w	r2, [r1, #286]	; 0x11e
    8fee:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8ff0:	f8a1 0120 	strh.w	r0, [r1, #288]	; 0x120
    8ff4:	e069      	b.n	90ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8ff6:	2301      	movs	r3, #1
    8ff8:	e7e6      	b.n	8fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    8ffa:	f890 1135 	ldrb.w	r1, [r0, #309]	; 0x135
    8ffe:	f88d 1000 	strb.w	r1, [sp]
    9002:	9900      	ldr	r1, [sp, #0]
    9004:	9100      	str	r1, [sp, #0]
    9006:	f89d 1000 	ldrb.w	r1, [sp]
    900a:	b939      	cbnz	r1, 901c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc0>
    900c:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9010:	2301      	movs	r3, #1
    9012:	210b      	movs	r1, #11
    9014:	3080      	adds	r0, #128	; 0x80
    9016:	f004 fc88 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    901a:	b178      	cbz	r0, 903c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    901c:	6860      	ldr	r0, [r4, #4]
    901e:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    9022:	f88d 1000 	strb.w	r1, [sp]
    9026:	9900      	ldr	r1, [sp, #0]
    9028:	9100      	str	r1, [sp, #0]
    902a:	f89d 1000 	ldrb.w	r1, [sp]
    902e:	b3b9      	cbz	r1, 90a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9030:	2100      	movs	r1, #0
    9032:	2023      	movs	r0, #35	; 0x23
    9034:	f000 f84e 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9038:	e047      	b.n	90ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    903a:	e030      	b.n	909e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    903c:	6860      	ldr	r0, [r4, #4]
    903e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9042:	f006 f90e 	bl	f262 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9046:	4605      	mov	r5, r0
    9048:	6860      	ldr	r0, [r4, #4]
    904a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    904e:	f006 f908 	bl	f262 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9052:	4606      	mov	r6, r0
    9054:	6860      	ldr	r0, [r4, #4]
    9056:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
    905a:	4628      	mov	r0, r5
    905c:	f006 f90c 	bl	f278 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9060:	b150      	cbz	r0, 9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    9062:	6860      	ldr	r0, [r4, #4]
    9064:	f890 1137 	ldrb.w	r1, [r0, #311]	; 0x137
    9068:	4630      	mov	r0, r6
    906a:	f006 f905 	bl	f278 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    906e:	b118      	cbz	r0, 9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    9070:	2000      	movs	r0, #0
    9072:	f000 f93f 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9076:	e011      	b.n	909c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    9078:	6860      	ldr	r0, [r4, #4]
    907a:	2301      	movs	r3, #1
    907c:	2103      	movs	r1, #3
    907e:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9082:	3080      	adds	r0, #128	; 0x80
    9084:	f004 fc51 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9088:	b940      	cbnz	r0, 909c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    908a:	6860      	ldr	r0, [r4, #4]
    908c:	2301      	movs	r3, #1
    908e:	2102      	movs	r1, #2
    9090:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9094:	3080      	adds	r0, #128	; 0x80
    9096:	f004 fc48 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    909a:	b110      	cbz	r0, 90a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd46>
    909c:	2000      	movs	r0, #0
    909e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    90a0:	e002      	b.n	90a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    90a2:	2100      	movs	r1, #0
    90a4:	2016      	movs	r0, #22
    90a6:	e7c5      	b.n	9034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
    90a8:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    90ac:	f88d 0000 	strb.w	r0, [sp]
    90b0:	9800      	ldr	r0, [sp, #0]
    90b2:	9000      	str	r0, [sp, #0]
    90b4:	f89d 0000 	ldrb.w	r0, [sp]
    90b8:	2800      	cmp	r0, #0
    90ba:	d0f0      	beq.n	909e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    90bc:	2100      	movs	r1, #0
    90be:	2025      	movs	r0, #37	; 0x25
    90c0:	f000 f808 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    90c4:	6860      	ldr	r0, [r4, #4]
    90c6:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    90ca:	2001      	movs	r0, #1
    90cc:	e7e7      	b.n	909e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    90ce:	0000      	.short	0x0000
    90d0:	20000170 	.word	0x20000170
    90d4:	b570      	push	{r4, r5, r6, lr}
    90d6:	4c0d      	ldr	r4, [pc, #52]	; (910c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb0>)
    90d8:	4606      	mov	r6, r0
    90da:	460d      	mov	r5, r1
    90dc:	6860      	ldr	r0, [r4, #4]
    90de:	3080      	adds	r0, #128	; 0x80
    90e0:	f006 f8b7 	bl	f252 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    90e4:	b120      	cbz	r0, 90f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd94>
    90e6:	f640 31ec 	movw	r1, #3052	; 0xbec
    90ea:	2031      	movs	r0, #49	; 0x31
    90ec:	f7fb fa3e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90f0:	6862      	ldr	r2, [r4, #4]
    90f2:	2000      	movs	r0, #0
    90f4:	2d01      	cmp	r5, #1
    90f6:	f882 611c 	strb.w	r6, [r2, #284]	; 0x11c
    90fa:	d004      	beq.n	9106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdaa>
    90fc:	f822 0fca 	strh.w	r0, [r2, #202]!
    9100:	2001      	movs	r0, #1
    9102:	7110      	strb	r0, [r2, #4]
    9104:	bd70      	pop	{r4, r5, r6, pc}
    9106:	f8a2 00d0 	strh.w	r0, [r2, #208]	; 0xd0
    910a:	bd70      	pop	{r4, r5, r6, pc}
    910c:	20000170 	.word	0x20000170
    9110:	b538      	push	{r3, r4, r5, lr}
    9112:	4c1f      	ldr	r4, [pc, #124]	; (9190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe34>)
    9114:	2500      	movs	r5, #0
    9116:	6860      	ldr	r0, [r4, #4]
    9118:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    911c:	2901      	cmp	r1, #1
    911e:	d00c      	beq.n	913a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdde>
    9120:	2902      	cmp	r1, #2
    9122:	d133      	bne.n	918c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe30>
    9124:	f890 10d4 	ldrb.w	r1, [r0, #212]	; 0xd4
    9128:	2900      	cmp	r1, #0
    912a:	f04f 0106 	mov.w	r1, #6
    912e:	d01a      	beq.n	9166 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    9130:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    9134:	2101      	movs	r1, #1
    9136:	2002      	movs	r0, #2
    9138:	e023      	b.n	9182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    913a:	f890 1205 	ldrb.w	r1, [r0, #517]	; 0x205
    913e:	f88d 1000 	strb.w	r1, [sp]
    9142:	9900      	ldr	r1, [sp, #0]
    9144:	9100      	str	r1, [sp, #0]
    9146:	f89d 1000 	ldrb.w	r1, [sp]
    914a:	2900      	cmp	r1, #0
    914c:	d11e      	bne.n	918c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe30>
    914e:	f500 7380 	add.w	r3, r0, #256	; 0x100
    9152:	f500 710a 	add.w	r1, r0, #552	; 0x228
    9156:	2200      	movs	r2, #0
    9158:	f200 20a1 	addw	r0, r0, #673	; 0x2a1
    915c:	f004 fb9d 	bl	d89a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9160:	2101      	movs	r1, #1
    9162:	2005      	movs	r0, #5
    9164:	e00d      	b.n	9182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    9166:	2003      	movs	r0, #3
    9168:	f000 fd24 	bl	9bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1858>
    916c:	6860      	ldr	r0, [r4, #4]
    916e:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    9172:	0880      	lsrs	r0, r0, #2
    9174:	f010 0f01 	tst.w	r0, #1
    9178:	d001      	beq.n	917e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe22>
    917a:	2011      	movs	r0, #17
    917c:	e000      	b.n	9180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    917e:	200d      	movs	r0, #13
    9180:	2101      	movs	r1, #1
    9182:	f7ff ffa7 	bl	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9186:	6860      	ldr	r0, [r4, #4]
    9188:	f880 52a0 	strb.w	r5, [r0, #672]	; 0x2a0
    918c:	bd38      	pop	{r3, r4, r5, pc}
    918e:	0000      	.short	0x0000
    9190:	20000170 	.word	0x20000170
    9194:	b570      	push	{r4, r5, r6, lr}
    9196:	4b2b      	ldr	r3, [pc, #172]	; (9244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>)
    9198:	4602      	mov	r2, r0
    919a:	8858      	ldrh	r0, [r3, #2]
    919c:	4310      	orrs	r0, r2
    919e:	8058      	strh	r0, [r3, #2]
    91a0:	f103 0010 	add.w	r0, r3, #16
    91a4:	2a40      	cmp	r2, #64	; 0x40
    91a6:	6840      	ldr	r0, [r0, #4]
    91a8:	d00d      	beq.n	91c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6a>
    91aa:	0796      	lsls	r6, r2, #30
    91ac:	f04f 0500 	mov.w	r5, #0
    91b0:	f04f 0401 	mov.w	r4, #1
    91b4:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    91b8:	d50c      	bpl.n	91d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe78>
    91ba:	b14e      	cbz	r6, 91d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe74>
    91bc:	f640 613f 	movw	r1, #3647	; 0xe3f
    91c0:	2031      	movs	r0, #49	; 0x31
    91c2:	f7fb f9d3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    91ca:	2104      	movs	r1, #4
    91cc:	f7fe bc8e 	b.w	7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    91d0:	6099      	str	r1, [r3, #8]
    91d2:	e01c      	b.n	920e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    91d4:	b1c6      	cbz	r6, 9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91d6:	60d9      	str	r1, [r3, #12]
    91d8:	78c9      	ldrb	r1, [r1, #3]
    91da:	2906      	cmp	r1, #6
    91dc:	d002      	beq.n	91e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>
    91de:	290b      	cmp	r1, #11
    91e0:	d112      	bne.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91e2:	e009      	b.n	91f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe9c>
    91e4:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    91e8:	2919      	cmp	r1, #25
    91ea:	d10d      	bne.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91ec:	2100      	movs	r1, #0
    91ee:	e9c0 113c 	strd	r1, r1, [r0, #240]	; 0xf0
    91f2:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
    91f6:	e007      	b.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    91f8:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    91fc:	2913      	cmp	r1, #19
    91fe:	d103      	bne.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9200:	f880 509a 	strb.w	r5, [r0, #154]	; 0x9a
    9204:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
    9208:	0791      	lsls	r1, r2, #30
    920a:	d516      	bpl.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    920c:	6899      	ldr	r1, [r3, #8]
    920e:	78c9      	ldrb	r1, [r1, #3]
    9210:	2905      	cmp	r1, #5
    9212:	d002      	beq.n	921a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebe>
    9214:	290b      	cmp	r1, #11
    9216:	d110      	bne.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9218:	e009      	b.n	922e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    921a:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    921e:	2917      	cmp	r1, #23
    9220:	d10b      	bne.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9222:	2100      	movs	r1, #0
    9224:	e9e0 113e 	strd	r1, r1, [r0, #248]!	; 0xf8
    9228:	f800 4c5d 	strb.w	r4, [r0, #-93]
    922c:	e005      	b.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    922e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    9232:	2912      	cmp	r1, #18
    9234:	d101      	bne.n	923a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9236:	f880 509b 	strb.w	r5, [r0, #155]	; 0x9b
    923a:	0690      	lsls	r0, r2, #26
    923c:	d501      	bpl.n	9242 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee6>
    923e:	2008      	movs	r0, #8
    9240:	7058      	strb	r0, [r3, #1]
    9242:	bd70      	pop	{r4, r5, r6, pc}
    9244:	20000160 	.word	0x20000160
    9248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    924c:	4c28      	ldr	r4, [pc, #160]	; (92f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf94>)
    924e:	2701      	movs	r7, #1
    9250:	6860      	ldr	r0, [r4, #4]
    9252:	f890 12be 	ldrb.w	r1, [r0, #702]	; 0x2be
    9256:	b109      	cbz	r1, 925c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf00>
    9258:	2601      	movs	r6, #1
    925a:	e000      	b.n	925e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf02>
    925c:	2600      	movs	r6, #0
    925e:	f890 22bf 	ldrb.w	r2, [r0, #703]	; 0x2bf
    9262:	b10a      	cbz	r2, 9268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    9264:	2501      	movs	r5, #1
    9266:	e000      	b.n	926a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    9268:	2500      	movs	r5, #0
    926a:	b90e      	cbnz	r6, 9270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
    926c:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    9270:	b90d      	cbnz	r5, 9276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1a>
    9272:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    9276:	f100 0362 	add.w	r3, r0, #98	; 0x62
    927a:	7219      	strb	r1, [r3, #8]
    927c:	725a      	strb	r2, [r3, #9]
    927e:	22ff      	movs	r2, #255	; 0xff
    9280:	729a      	strb	r2, [r3, #10]
    9282:	f006 fae1 	bl	f848 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    9286:	6860      	ldr	r0, [r4, #4]
    9288:	f890 0134 	ldrb.w	r0, [r0, #308]	; 0x134
    928c:	2801      	cmp	r0, #1
    928e:	d001      	beq.n	9294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9290:	b906      	cbnz	r6, 9294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9292:	b115      	cbz	r5, 929a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3e>
    9294:	2000      	movs	r0, #0
    9296:	f000 f82d 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    929a:	6860      	ldr	r0, [r4, #4]
    929c:	302c      	adds	r0, #44	; 0x2c
    929e:	f004 fff0 	bl	e282 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    92a2:	4606      	mov	r6, r0
    92a4:	2105      	movs	r1, #5
    92a6:	6860      	ldr	r0, [r4, #4]
    92a8:	f7fe fc20 	bl	7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    92ac:	6860      	ldr	r0, [r4, #4]
    92ae:	302c      	adds	r0, #44	; 0x2c
    92b0:	f004 ffe7 	bl	e282 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    92b4:	4605      	mov	r5, r0
    92b6:	42ae      	cmp	r6, r5
    92b8:	d20a      	bcs.n	92d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf74>
    92ba:	f7f8 fcbb 	bl	1c34 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    92be:	4601      	mov	r1, r0
    92c0:	1ba8      	subs	r0, r5, r6
    92c2:	2865      	cmp	r0, #101	; 0x65
    92c4:	d200      	bcs.n	92c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>
    92c6:	2065      	movs	r0, #101	; 0x65
    92c8:	f7f8 fbd6 	bl	1a78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    92cc:	b100      	cbz	r0, 92d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf74>
    92ce:	2700      	movs	r7, #0
    92d0:	6860      	ldr	r0, [r4, #4]
    92d2:	f004 ff82 	bl	e1da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    92d6:	b138      	cbz	r0, 92e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>
    92d8:	6863      	ldr	r3, [r4, #4]
    92da:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
    92de:	8818      	ldrh	r0, [r3, #0]
    92e0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    92e4:	f004 ff36 	bl	e154 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    92e8:	4638      	mov	r0, r7
    92ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92ee:	0000      	.short	0x0000
    92f0:	20000170 	.word	0x20000170
    92f4:	b510      	push	{r4, lr}
    92f6:	4c0f      	ldr	r4, [pc, #60]	; (9334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    92f8:	6861      	ldr	r1, [r4, #4]
    92fa:	880a      	ldrh	r2, [r1, #0]
    92fc:	f8a1 21a0 	strh.w	r2, [r1, #416]	; 0x1a0
    9300:	f881 019e 	strb.w	r0, [r1, #414]	; 0x19e
    9304:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9308:	f005 ffab 	bl	f262 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    930c:	6861      	ldr	r1, [r4, #4]
    930e:	f881 01a2 	strb.w	r0, [r1, #418]	; 0x1a2
    9312:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    9316:	f005 ffa4 	bl	f262 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    931a:	6861      	ldr	r1, [r4, #4]
    931c:	2213      	movs	r2, #19
    931e:	f881 01a3 	strb.w	r0, [r1, #419]	; 0x1a3
    9322:	f501 70ca 	add.w	r0, r1, #404	; 0x194
    9326:	f7fd f893 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    932a:	6861      	ldr	r1, [r4, #4]
    932c:	2000      	movs	r0, #0
    932e:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    9332:	bd10      	pop	{r4, pc}
    9334:	20000170 	.word	0x20000170
    9338:	b570      	push	{r4, r5, r6, lr}
    933a:	4d0f      	ldr	r5, [pc, #60]	; (9378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101c>)
    933c:	686c      	ldr	r4, [r5, #4]
    933e:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
    9342:	2922      	cmp	r1, #34	; 0x22
    9344:	d002      	beq.n	934c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9346:	292e      	cmp	r1, #46	; 0x2e
    9348:	d003      	beq.n	9352 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff6>
    934a:	e011      	b.n	9370 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1014>
    934c:	f7ff ffd2 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9350:	e008      	b.n	9364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1008>
    9352:	f894 2096 	ldrb.w	r2, [r4, #150]	; 0x96
    9356:	f104 0080 	add.w	r0, r4, #128	; 0x80
    935a:	2301      	movs	r3, #1
    935c:	210b      	movs	r1, #11
    935e:	f004 fae4 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9362:	b138      	cbz	r0, 9374 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1018>
    9364:	6869      	ldr	r1, [r5, #4]
    9366:	2000      	movs	r0, #0
    9368:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    936c:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    9370:	2000      	movs	r0, #0
    9372:	bd70      	pop	{r4, r5, r6, pc}
    9374:	202a      	movs	r0, #42	; 0x2a
    9376:	e7e9      	b.n	934c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9378:	20000170 	.word	0x20000170
    937c:	b570      	push	{r4, r5, r6, lr}
    937e:	4604      	mov	r4, r0
    9380:	6840      	ldr	r0, [r0, #4]
    9382:	2301      	movs	r3, #1
    9384:	2100      	movs	r1, #0
    9386:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    938a:	3080      	adds	r0, #128	; 0x80
    938c:	f004 facd 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9390:	b1b8      	cbz	r0, 93c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1066>
    9392:	4d13      	ldr	r5, [pc, #76]	; (93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    9394:	68e8      	ldr	r0, [r5, #12]
    9396:	f004 fd2e 	bl	ddf6 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    939a:	6861      	ldr	r1, [r4, #4]
    939c:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    93a0:	6861      	ldr	r1, [r4, #4]
    93a2:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    93a6:	f005 ff75 	bl	f294 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    93aa:	b160      	cbz	r0, 93c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x106a>
    93ac:	6861      	ldr	r1, [r4, #4]
    93ae:	2028      	movs	r0, #40	; 0x28
    93b0:	220a      	movs	r2, #10
    93b2:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    93b6:	6861      	ldr	r1, [r4, #4]
    93b8:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    93bc:	f7fd f848 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    93c0:	e00b      	b.n	93da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    93c2:	2001      	movs	r0, #1
    93c4:	bd70      	pop	{r4, r5, r6, pc}
    93c6:	6861      	ldr	r1, [r4, #4]
    93c8:	68e8      	ldr	r0, [r5, #12]
    93ca:	f201 21be 	addw	r1, r1, #702	; 0x2be
    93ce:	f004 fd0d 	bl	ddec <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    93d2:	6861      	ldr	r1, [r4, #4]
    93d4:	200b      	movs	r0, #11
    93d6:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    93da:	2000      	movs	r0, #0
    93dc:	bd70      	pop	{r4, r5, r6, pc}
    93de:	0000      	.short	0x0000
    93e0:	20000160 	.word	0x20000160
    93e4:	b570      	push	{r4, r5, r6, lr}
    93e6:	4604      	mov	r4, r0
    93e8:	6840      	ldr	r0, [r0, #4]
    93ea:	2301      	movs	r3, #1
    93ec:	2100      	movs	r1, #0
    93ee:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    93f2:	3080      	adds	r0, #128	; 0x80
    93f4:	f004 fa99 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93f8:	b1e0      	cbz	r0, 9434 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10d8>
    93fa:	4d28      	ldr	r5, [pc, #160]	; (949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>)
    93fc:	2100      	movs	r1, #0
    93fe:	68e8      	ldr	r0, [r5, #12]
    9400:	f004 fcfc 	bl	ddfc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    9404:	b1c0      	cbz	r0, 9438 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10dc>
    9406:	68e8      	ldr	r0, [r5, #12]
    9408:	6861      	ldr	r1, [r4, #4]
    940a:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    940e:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    9412:	6861      	ldr	r1, [r4, #4]
    9414:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    9418:	f005 ff3c 	bl	f294 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    941c:	b188      	cbz	r0, 9442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e6>
    941e:	6861      	ldr	r1, [r4, #4]
    9420:	2028      	movs	r0, #40	; 0x28
    9422:	220a      	movs	r2, #10
    9424:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9428:	6861      	ldr	r1, [r4, #4]
    942a:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    942e:	f7fd f80f 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9432:	e030      	b.n	9496 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113a>
    9434:	2001      	movs	r0, #1
    9436:	bd70      	pop	{r4, r5, r6, pc}
    9438:	4620      	mov	r0, r4
    943a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    943e:	f000 b897 	b.w	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    9442:	68e8      	ldr	r0, [r5, #12]
    9444:	f004 fd04 	bl	de50 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    9448:	f004 fa52 	bl	d8f0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    944c:	4606      	mov	r6, r0
    944e:	6860      	ldr	r0, [r4, #4]
    9450:	4631      	mov	r1, r6
    9452:	f8c0 62c4 	str.w	r6, [r0, #708]	; 0x2c4
    9456:	68e8      	ldr	r0, [r5, #12]
    9458:	7900      	ldrb	r0, [r0, #4]
    945a:	f004 fbc5 	bl	dbe8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    945e:	6861      	ldr	r1, [r4, #4]
    9460:	f8a1 02be 	strh.w	r0, [r1, #702]	; 0x2be
    9464:	68e8      	ldr	r0, [r5, #12]
    9466:	4631      	mov	r1, r6
    9468:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    946c:	f004 fbb8 	bl	dbe0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9470:	6861      	ldr	r1, [r4, #4]
    9472:	f8c1 02c0 	str.w	r0, [r1, #704]	; 0x2c0
    9476:	68e8      	ldr	r0, [r5, #12]
    9478:	f004 fced 	bl	de56 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    947c:	6861      	ldr	r1, [r4, #4]
    947e:	f8a1 02c8 	strh.w	r0, [r1, #712]	; 0x2c8
    9482:	68e8      	ldr	r0, [r5, #12]
    9484:	f004 fcea 	bl	de5c <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    9488:	6861      	ldr	r1, [r4, #4]
    948a:	f8a1 02ca 	strh.w	r0, [r1, #714]	; 0x2ca
    948e:	6861      	ldr	r1, [r4, #4]
    9490:	200e      	movs	r0, #14
    9492:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    9496:	2000      	movs	r0, #0
    9498:	bd70      	pop	{r4, r5, r6, pc}
    949a:	0000      	.short	0x0000
    949c:	20000160 	.word	0x20000160
    94a0:	b538      	push	{r3, r4, r5, lr}
    94a2:	4604      	mov	r4, r0
    94a4:	6840      	ldr	r0, [r0, #4]
    94a6:	2301      	movs	r3, #1
    94a8:	2100      	movs	r1, #0
    94aa:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    94ae:	3080      	adds	r0, #128	; 0x80
    94b0:	f004 fa3b 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94b4:	b970      	cbnz	r0, 94d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    94b6:	6860      	ldr	r0, [r4, #4]
    94b8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    94bc:	2a14      	cmp	r2, #20
    94be:	d009      	beq.n	94d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    94c0:	2301      	movs	r3, #1
    94c2:	2105      	movs	r1, #5
    94c4:	3080      	adds	r0, #128	; 0x80
    94c6:	f004 fa30 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94ca:	b108      	cbz	r0, 94d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    94cc:	2008      	movs	r0, #8
    94ce:	bd38      	pop	{r3, r4, r5, pc}
    94d0:	2001      	movs	r0, #1
    94d2:	bd38      	pop	{r3, r4, r5, pc}
    94d4:	6860      	ldr	r0, [r4, #4]
    94d6:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    94da:	b908      	cbnz	r0, 94e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    94dc:	f7ff f840 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    94e0:	4d1b      	ldr	r5, [pc, #108]	; (9550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f4>)
    94e2:	6861      	ldr	r1, [r4, #4]
    94e4:	f501 710a 	add.w	r1, r1, #552	; 0x228
    94e8:	68e8      	ldr	r0, [r5, #12]
    94ea:	f004 fcd0 	bl	de8e <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    94ee:	6861      	ldr	r1, [r4, #4]
    94f0:	68e8      	ldr	r0, [r5, #12]
    94f2:	f501 7188 	add.w	r1, r1, #272	; 0x110
    94f6:	f004 fcc1 	bl	de7c <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    94fa:	6860      	ldr	r0, [r4, #4]
    94fc:	f890 12d4 	ldrb.w	r1, [r0, #724]	; 0x2d4
    9500:	f88d 1000 	strb.w	r1, [sp]
    9504:	9900      	ldr	r1, [sp, #0]
    9506:	9100      	str	r1, [sp, #0]
    9508:	f89d 1000 	ldrb.w	r1, [sp]
    950c:	b121      	cbz	r1, 9518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    950e:	f240 3117 	movw	r1, #791	; 0x317
    9512:	2031      	movs	r0, #49	; 0x31
    9514:	f7fb f82a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9518:	8801      	ldrh	r1, [r0, #0]
    951a:	f8a0 12d6 	strh.w	r1, [r0, #726]	; 0x2d6
    951e:	6861      	ldr	r1, [r4, #4]
    9520:	68e8      	ldr	r0, [r5, #12]
    9522:	f501 7136 	add.w	r1, r1, #728	; 0x2d8
    9526:	f004 fcad 	bl	de84 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    952a:	6861      	ldr	r1, [r4, #4]
    952c:	68e8      	ldr	r0, [r5, #12]
    952e:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
    9532:	f004 fca0 	bl	de76 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    9536:	6860      	ldr	r0, [r4, #4]
    9538:	2209      	movs	r2, #9
    953a:	4906      	ldr	r1, [pc, #24]	; (9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f8>)
    953c:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
    9540:	f7fc ff86 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9544:	6861      	ldr	r1, [r4, #4]
    9546:	2016      	movs	r0, #22
    9548:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    954c:	2000      	movs	r0, #0
    954e:	bd38      	pop	{r3, r4, r5, pc}
    9550:	20000160 	.word	0x20000160
    9554:	0000f2ad 	.word	0x0000f2ad
    9558:	4901      	ldr	r1, [pc, #4]	; (9560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>)
    955a:	68c9      	ldr	r1, [r1, #12]
    955c:	f7fd ba36 	b.w	69cc <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    9560:	20000160 	.word	0x20000160
    9564:	4901      	ldr	r1, [pc, #4]	; (956c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>)
    9566:	68c9      	ldr	r1, [r1, #12]
    9568:	f7fd ba60 	b.w	6a2c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    956c:	20000160 	.word	0x20000160
    9570:	b510      	push	{r4, lr}
    9572:	6842      	ldr	r2, [r0, #4]
    9574:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
    9578:	070b      	lsls	r3, r1, #28
    957a:	d501      	bpl.n	9580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1224>
    957c:	2001      	movs	r0, #1
    957e:	bd10      	pop	{r4, pc}
    9580:	f041 0108 	orr.w	r1, r1, #8
    9584:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    9588:	4904      	ldr	r1, [pc, #16]	; (959c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1240>)
    958a:	6840      	ldr	r0, [r0, #4]
    958c:	68c9      	ldr	r1, [r1, #12]
    958e:	78c9      	ldrb	r1, [r1, #3]
    9590:	f880 1118 	strb.w	r1, [r0, #280]	; 0x118
    9594:	f7fe ffe4 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9598:	2000      	movs	r0, #0
    959a:	bd10      	pop	{r4, pc}
    959c:	20000160 	.word	0x20000160
    95a0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    95a4:	4605      	mov	r5, r0
    95a6:	6840      	ldr	r0, [r0, #4]
    95a8:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    95ac:	f010 0f30 	tst.w	r0, #48	; 0x30
    95b0:	d002      	beq.n	95b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125c>
    95b2:	2001      	movs	r0, #1
    95b4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    95b8:	4c31      	ldr	r4, [pc, #196]	; (9680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1324>)
    95ba:	68e0      	ldr	r0, [r4, #12]
    95bc:	f004 fc81 	bl	dec2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    95c0:	b330      	cbz	r0, 9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b4>
    95c2:	68e0      	ldr	r0, [r4, #12]
    95c4:	f004 fc77 	bl	deb6 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    95c8:	4680      	mov	r8, r0
    95ca:	68e0      	ldr	r0, [r4, #12]
    95cc:	f004 fc77 	bl	debe <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    95d0:	4607      	mov	r7, r0
    95d2:	68e0      	ldr	r0, [r4, #12]
    95d4:	f004 fc6d 	bl	deb2 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    95d8:	4606      	mov	r6, r0
    95da:	68e0      	ldr	r0, [r4, #12]
    95dc:	f004 fc6d 	bl	deba <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    95e0:	4601      	mov	r1, r0
    95e2:	f8cd 8000 	str.w	r8, [sp]
    95e6:	6868      	ldr	r0, [r5, #4]
    95e8:	463b      	mov	r3, r7
    95ea:	4632      	mov	r2, r6
    95ec:	302c      	adds	r0, #44	; 0x2c
    95ee:	f004 fe82 	bl	e2f6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    95f2:	78a0      	ldrb	r0, [r4, #2]
    95f4:	0781      	lsls	r1, r0, #30
    95f6:	f04f 0001 	mov.w	r0, #1
    95fa:	d503      	bpl.n	9604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a8>
    95fc:	68a1      	ldr	r1, [r4, #8]
    95fe:	78c9      	ldrb	r1, [r1, #3]
    9600:	2914      	cmp	r1, #20
    9602:	d00a      	beq.n	961a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12be>
    9604:	6869      	ldr	r1, [r5, #4]
    9606:	f891 1095 	ldrb.w	r1, [r1, #149]	; 0x95
    960a:	291e      	cmp	r1, #30
    960c:	d005      	beq.n	961a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12be>
    960e:	e007      	b.n	9620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    9610:	4628      	mov	r0, r5
    9612:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9616:	f7ff bfab 	b.w	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    961a:	6869      	ldr	r1, [r5, #4]
    961c:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9620:	6868      	ldr	r0, [r5, #4]
    9622:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    9626:	2901      	cmp	r1, #1
    9628:	d011      	beq.n	964e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f2>
    962a:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    962e:	f88d 1004 	strb.w	r1, [sp, #4]
    9632:	9901      	ldr	r1, [sp, #4]
    9634:	9101      	str	r1, [sp, #4]
    9636:	f89d 1004 	ldrb.w	r1, [sp, #4]
    963a:	b941      	cbnz	r1, 964e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f2>
    963c:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    9640:	f88d 1000 	strb.w	r1, [sp]
    9644:	9900      	ldr	r1, [sp, #0]
    9646:	9100      	str	r1, [sp, #0]
    9648:	f89d 1000 	ldrb.w	r1, [sp]
    964c:	b141      	cbz	r1, 9660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1304>
    964e:	f850 1f84 	ldr.w	r1, [r0, #132]!
    9652:	f041 0110 	orr.w	r1, r1, #16
    9656:	6001      	str	r1, [r0, #0]
    9658:	f7fe ff82 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    965c:	2000      	movs	r0, #0
    965e:	e7a9      	b.n	95b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1258>
    9660:	f850 1f84 	ldr.w	r1, [r0, #132]!
    9664:	f041 0120 	orr.w	r1, r1, #32
    9668:	6001      	str	r1, [r0, #0]
    966a:	4805      	ldr	r0, [pc, #20]	; (9680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1324>)
    966c:	3010      	adds	r0, #16
    966e:	6843      	ldr	r3, [r0, #4]
    9670:	f503 72b9 	add.w	r2, r3, #370	; 0x172
    9674:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    9678:	8818      	ldrh	r0, [r3, #0]
    967a:	f004 fe43 	bl	e304 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    967e:	e7eb      	b.n	9658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12fc>
    9680:	20000160 	.word	0x20000160
    9684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9688:	4604      	mov	r4, r0
    968a:	6840      	ldr	r0, [r0, #4]
    968c:	2301      	movs	r3, #1
    968e:	210a      	movs	r1, #10
    9690:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9694:	3080      	adds	r0, #128	; 0x80
    9696:	f004 f948 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    969a:	b350      	cbz	r0, 96f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    969c:	4d16      	ldr	r5, [pc, #88]	; (96f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x139c>)
    969e:	68e8      	ldr	r0, [r5, #12]
    96a0:	f004 fc0f 	bl	dec2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    96a4:	b1c8      	cbz	r0, 96da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137e>
    96a6:	68e8      	ldr	r0, [r5, #12]
    96a8:	f004 fc05 	bl	deb6 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    96ac:	4607      	mov	r7, r0
    96ae:	68e8      	ldr	r0, [r5, #12]
    96b0:	f004 fc05 	bl	debe <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    96b4:	4680      	mov	r8, r0
    96b6:	68e8      	ldr	r0, [r5, #12]
    96b8:	f004 fbfb 	bl	deb2 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    96bc:	4606      	mov	r6, r0
    96be:	68e8      	ldr	r0, [r5, #12]
    96c0:	f004 fbfb 	bl	deba <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    96c4:	4601      	mov	r1, r0
    96c6:	9700      	str	r7, [sp, #0]
    96c8:	6860      	ldr	r0, [r4, #4]
    96ca:	4643      	mov	r3, r8
    96cc:	4632      	mov	r2, r6
    96ce:	302c      	adds	r0, #44	; 0x2c
    96d0:	f004 fe11 	bl	e2f6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    96d4:	6860      	ldr	r0, [r4, #4]
    96d6:	f004 fd80 	bl	e1da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    96da:	6861      	ldr	r1, [r4, #4]
    96dc:	2000      	movs	r0, #0
    96de:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    96e2:	6861      	ldr	r1, [r4, #4]
    96e4:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    96e8:	f7ff f91a 	bl	8920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    96ec:	2000      	movs	r0, #0
    96ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    96f2:	2001      	movs	r0, #1
    96f4:	e7fb      	b.n	96ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1392>
    96f6:	0000      	.short	0x0000
    96f8:	20000160 	.word	0x20000160
    96fc:	b538      	push	{r3, r4, r5, lr}
    96fe:	4604      	mov	r4, r0
    9700:	6840      	ldr	r0, [r0, #4]
    9702:	2301      	movs	r3, #1
    9704:	210b      	movs	r1, #11
    9706:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    970a:	3080      	adds	r0, #128	; 0x80
    970c:	f004 f90d 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9710:	bb60      	cbnz	r0, 976c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1410>
    9712:	6860      	ldr	r0, [r4, #4]
    9714:	2301      	movs	r3, #1
    9716:	2100      	movs	r1, #0
    9718:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    971c:	3080      	adds	r0, #128	; 0x80
    971e:	f004 f904 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9722:	b308      	cbz	r0, 9768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140c>
    9724:	6860      	ldr	r0, [r4, #4]
    9726:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    972a:	2826      	cmp	r0, #38	; 0x26
    972c:	d01e      	beq.n	976c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1410>
    972e:	4d29      	ldr	r5, [pc, #164]	; (97d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1478>)
    9730:	68e8      	ldr	r0, [r5, #12]
    9732:	f004 fbd8 	bl	dee6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    9736:	b1d8      	cbz	r0, 9770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1414>
    9738:	68e8      	ldr	r0, [r5, #12]
    973a:	6862      	ldr	r2, [r4, #4]
    973c:	7941      	ldrb	r1, [r0, #5]
    973e:	f001 0107 	and.w	r1, r1, #7
    9742:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    9746:	7900      	ldrb	r0, [r0, #4]
    9748:	f000 0107 	and.w	r1, r0, #7
    974c:	6860      	ldr	r0, [r4, #4]
    974e:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    9752:	6860      	ldr	r0, [r4, #4]
    9754:	f890 2135 	ldrb.w	r2, [r0, #309]	; 0x135
    9758:	f88d 2000 	strb.w	r2, [sp]
    975c:	9a00      	ldr	r2, [sp, #0]
    975e:	9200      	str	r2, [sp, #0]
    9760:	f89d 2000 	ldrb.w	r2, [sp]
    9764:	bb72      	cbnz	r2, 97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    9766:	e008      	b.n	977a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x141e>
    9768:	2001      	movs	r0, #1
    976a:	bd38      	pop	{r3, r4, r5, pc}
    976c:	2020      	movs	r0, #32
    976e:	bd38      	pop	{r3, r4, r5, pc}
    9770:	4620      	mov	r0, r4
    9772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9776:	f7ff befb 	b.w	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    977a:	f890 2134 	ldrb.w	r2, [r0, #308]	; 0x134
    977e:	2a01      	cmp	r2, #1
    9780:	d020      	beq.n	97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    9782:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    9786:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    978a:	7855      	ldrb	r5, [r2, #1]
    978c:	428d      	cmp	r5, r1
    978e:	d106      	bne.n	979e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1442>
    9790:	7811      	ldrb	r1, [r2, #0]
    9792:	4299      	cmp	r1, r3
    9794:	d103      	bne.n	979e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1442>
    9796:	2102      	movs	r1, #2
    9798:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    979c:	e012      	b.n	97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    979e:	480d      	ldr	r0, [pc, #52]	; (97d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1478>)
    97a0:	3010      	adds	r0, #16
    97a2:	6841      	ldr	r1, [r0, #4]
    97a4:	f501 70c8 	add.w	r0, r1, #400	; 0x190
    97a8:	880a      	ldrh	r2, [r1, #0]
    97aa:	f820 2b02 	strh.w	r2, [r0], #2
    97ae:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    97b2:	f800 2b01 	strb.w	r2, [r0], #1
    97b6:	f891 2063 	ldrb.w	r2, [r1, #99]	; 0x63
    97ba:	f800 290d 	strb.w	r2, [r0], #-13
    97be:	221f      	movs	r2, #31
    97c0:	f7fc fe46 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    97c4:	6861      	ldr	r1, [r4, #4]
    97c6:	2023      	movs	r0, #35	; 0x23
    97c8:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    97cc:	f7fe fec8 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    97d0:	2000      	movs	r0, #0
    97d2:	bd38      	pop	{r3, r4, r5, pc}
    97d4:	20000160 	.word	0x20000160
    97d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97dc:	6845      	ldr	r5, [r0, #4]
    97de:	4604      	mov	r4, r0
    97e0:	f895 0095 	ldrb.w	r0, [r5, #149]	; 0x95
    97e4:	2822      	cmp	r0, #34	; 0x22
    97e6:	d008      	beq.n	97fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149e>
    97e8:	f05f 0600 	movs.w	r6, #0
    97ec:	f895 0096 	ldrb.w	r0, [r5, #150]	; 0x96
    97f0:	2824      	cmp	r0, #36	; 0x24
    97f2:	d004      	beq.n	97fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    97f4:	b38e      	cbz	r6, 985a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    97f6:	3595      	adds	r5, #149	; 0x95
    97f8:	e002      	b.n	9800 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a4>
    97fa:	2601      	movs	r6, #1
    97fc:	e7f6      	b.n	97ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1490>
    97fe:	3596      	adds	r5, #150	; 0x96
    9800:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>
    9804:	f8d8 000c 	ldr.w	r0, [r8, #12]
    9808:	f004 fb79 	bl	defe <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    980c:	2700      	movs	r7, #0
    980e:	b340      	cbz	r0, 9862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1506>
    9810:	4631      	mov	r1, r6
    9812:	f8d8 000c 	ldr.w	r0, [r8, #12]
    9816:	f7fe ff79 	bl	870c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    981a:	b310      	cbz	r0, 9862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1506>
    981c:	466a      	mov	r2, sp
    981e:	4646      	mov	r6, r8
    9820:	6860      	ldr	r0, [r4, #4]
    9822:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9826:	f004 f995 	bl	db54 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    982a:	b3c0      	cbz	r0, 989e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    982c:	68f0      	ldr	r0, [r6, #12]
    982e:	f004 fb64 	bl	defa <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    9832:	6861      	ldr	r1, [r4, #4]
    9834:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    9838:	6861      	ldr	r1, [r4, #4]
    983a:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    983e:	f005 fd29 	bl	f294 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9842:	b368      	cbz	r0, 98a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1544>
    9844:	6861      	ldr	r1, [r4, #4]
    9846:	2028      	movs	r0, #40	; 0x28
    9848:	220a      	movs	r2, #10
    984a:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    984e:	6861      	ldr	r1, [r4, #4]
    9850:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9854:	f7fc fdfc 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9858:	e058      	b.n	990c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    985a:	e7ff      	b.n	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1500>
    985c:	2002      	movs	r0, #2
    985e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9862:	6860      	ldr	r0, [r4, #4]
    9864:	f04f 0900 	mov.w	r9, #0
    9868:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    986c:	2901      	cmp	r1, #1
    986e:	d018      	beq.n	98a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
    9870:	f880 7134 	strb.w	r7, [r0, #308]	; 0x134
    9874:	b30e      	cbz	r6, 98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155e>
    9876:	f8d8 000c 	ldr.w	r0, [r8, #12]
    987a:	6861      	ldr	r1, [r4, #4]
    987c:	2201      	movs	r2, #1
    987e:	78c0      	ldrb	r0, [r0, #3]
    9880:	f881 0119 	strb.w	r0, [r1, #281]	; 0x119
    9884:	4082      	lsls	r2, r0
    9886:	6861      	ldr	r1, [r4, #4]
    9888:	f3c2 6000 	ubfx	r0, r2, #24, #1
    988c:	b168      	cbz	r0, 98aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154e>
    988e:	200a      	movs	r0, #10
    9890:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    9894:	6860      	ldr	r0, [r4, #4]
    9896:	f890 00ce 	ldrb.w	r0, [r0, #206]	; 0xce
    989a:	b9a8      	cbnz	r0, 98c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156c>
    989c:	e008      	b.n	98b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>
    989e:	e015      	b.n	98cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1570>
    98a0:	e028      	b.n	98f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1598>
    98a2:	201e      	movs	r0, #30
    98a4:	f7ff fd26 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    98a8:	e7e4      	b.n	9874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1518>
    98aa:	f240 4163 	movw	r1, #1123	; 0x463
    98ae:	e001      	b.n	98b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
    98b0:	f240 416b 	movw	r1, #1131	; 0x46b
    98b4:	2031      	movs	r0, #49	; 0x31
    98b6:	f7fa fe59 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98ba:	702f      	strb	r7, [r5, #0]
    98bc:	f7fe fe5c 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    98c0:	4620      	mov	r0, r4
    98c2:	f7ff fe55 	bl	9570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    98c6:	4681      	mov	r9, r0
    98c8:	4648      	mov	r0, r9
    98ca:	e7c8      	b.n	985e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    98cc:	6860      	ldr	r0, [r4, #4]
    98ce:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    98d2:	2901      	cmp	r1, #1
    98d4:	d009      	beq.n	98ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158e>
    98d6:	f880 7134 	strb.w	r7, [r0, #308]	; 0x134
    98da:	6860      	ldr	r0, [r4, #4]
    98dc:	f100 0196 	add.w	r1, r0, #150	; 0x96
    98e0:	42a9      	cmp	r1, r5
    98e2:	d113      	bne.n	990c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    98e4:	f880 7096 	strb.w	r7, [r0, #150]	; 0x96
    98e8:	e010      	b.n	990c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    98ea:	2000      	movs	r0, #0
    98ec:	f7ff fd02 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    98f0:	702f      	strb	r7, [r5, #0]
    98f2:	e7f2      	b.n	98da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157e>
    98f4:	6861      	ldr	r1, [r4, #4]
    98f6:	f89d 0000 	ldrb.w	r0, [sp]
    98fa:	f881 02be 	strb.w	r0, [r1, #702]	; 0x2be
    98fe:	6861      	ldr	r1, [r4, #4]
    9900:	f89d 0001 	ldrb.w	r0, [sp, #1]
    9904:	f881 02bf 	strb.w	r0, [r1, #703]	; 0x2bf
    9908:	2026      	movs	r0, #38	; 0x26
    990a:	7028      	strb	r0, [r5, #0]
    990c:	6860      	ldr	r0, [r4, #4]
    990e:	f100 0196 	add.w	r1, r0, #150	; 0x96
    9912:	42a9      	cmp	r1, r5
    9914:	d102      	bne.n	991c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    9916:	f7fe fe2f 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    991a:	e001      	b.n	9920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    991c:	f880 70ce 	strb.w	r7, [r0, #206]	; 0xce
    9920:	2000      	movs	r0, #0
    9922:	e79c      	b.n	985e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    9924:	20000160 	.word	0x20000160
    9928:	b570      	push	{r4, r5, r6, lr}
    992a:	6840      	ldr	r0, [r0, #4]
    992c:	4d09      	ldr	r5, [pc, #36]	; (9954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
    992e:	f810 1fe4 	ldrb.w	r1, [r0, #228]!
    9932:	f041 0104 	orr.w	r1, r1, #4
    9936:	7001      	strb	r1, [r0, #0]
    9938:	68e8      	ldr	r0, [r5, #12]
    993a:	f004 faf4 	bl	df26 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    993e:	4604      	mov	r4, r0
    9940:	68e8      	ldr	r0, [r5, #12]
    9942:	f004 faf4 	bl	df2e <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    9946:	4601      	mov	r1, r0
    9948:	4620      	mov	r0, r4
    994a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    994e:	f000 b91b 	b.w	9b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    9952:	0000      	.short	0x0000
    9954:	20000160 	.word	0x20000160
    9958:	480a      	ldr	r0, [pc, #40]	; (9984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1628>)
    995a:	68c0      	ldr	r0, [r0, #12]
    995c:	7901      	ldrb	r1, [r0, #4]
    995e:	4809      	ldr	r0, [pc, #36]	; (9984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1628>)
    9960:	3010      	adds	r0, #16
    9962:	6840      	ldr	r0, [r0, #4]
    9964:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    9968:	2822      	cmp	r0, #34	; 0x22
    996a:	d007      	beq.n	997c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1620>
    996c:	282e      	cmp	r0, #46	; 0x2e
    996e:	d005      	beq.n	997c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1620>
    9970:	2829      	cmp	r0, #41	; 0x29
    9972:	d005      	beq.n	9980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1624>
    9974:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    9978:	f000 b906 	b.w	9b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    997c:	2016      	movs	r0, #22
    997e:	e7fb      	b.n	9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    9980:	2023      	movs	r0, #35	; 0x23
    9982:	e7f9      	b.n	9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    9984:	20000160 	.word	0x20000160
    9988:	b510      	push	{r4, lr}
    998a:	4604      	mov	r4, r0
    998c:	6840      	ldr	r0, [r0, #4]
    998e:	2301      	movs	r3, #1
    9990:	4619      	mov	r1, r3
    9992:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    9996:	3080      	adds	r0, #128	; 0x80
    9998:	f003 ffc7 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    999c:	b108      	cbz	r0, 99a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    999e:	2000      	movs	r0, #0
    99a0:	bd10      	pop	{r4, pc}
    99a2:	4806      	ldr	r0, [pc, #24]	; (99bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1660>)
    99a4:	68c0      	ldr	r0, [r0, #12]
    99a6:	f004 faec 	bl	df82 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    99aa:	6861      	ldr	r1, [r4, #4]
    99ac:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    99b0:	6861      	ldr	r1, [r4, #4]
    99b2:	2007      	movs	r0, #7
    99b4:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    99b8:	e7f1      	b.n	999e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1642>
    99ba:	0000      	.short	0x0000
    99bc:	20000160 	.word	0x20000160
    99c0:	b570      	push	{r4, r5, r6, lr}
    99c2:	4604      	mov	r4, r0
    99c4:	483a      	ldr	r0, [pc, #232]	; (9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    99c6:	6861      	ldr	r1, [r4, #4]
    99c8:	2500      	movs	r5, #0
    99ca:	68c0      	ldr	r0, [r0, #12]
    99cc:	7902      	ldrb	r2, [r0, #4]
    99ce:	f891 0095 	ldrb.w	r0, [r1, #149]	; 0x95
    99d2:	2a16      	cmp	r2, #22
    99d4:	d034      	beq.n	9a40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    99d6:	dc06      	bgt.n	99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x168a>
    99d8:	2a0e      	cmp	r2, #14
    99da:	d009      	beq.n	99f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
    99dc:	2a12      	cmp	r2, #18
    99de:	d01b      	beq.n	9a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    99e0:	2a14      	cmp	r2, #20
    99e2:	d162      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    99e4:	e01f      	b.n	9a26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ca>
    99e6:	2a17      	cmp	r2, #23
    99e8:	d043      	beq.n	9a72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1716>
    99ea:	2a23      	cmp	r2, #35	; 0x23
    99ec:	d15d      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    99ee:	e055      	b.n	9a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1740>
    99f0:	2804      	cmp	r0, #4
    99f2:	d15a      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    99f4:	4620      	mov	r0, r4
    99f6:	f005 fc6a 	bl	f2ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    99fa:	482d      	ldr	r0, [pc, #180]	; (9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    99fc:	2207      	movs	r2, #7
    99fe:	3010      	adds	r0, #16
    9a00:	6841      	ldr	r1, [r0, #4]
    9a02:	8808      	ldrh	r0, [r1, #0]
    9a04:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    9a08:	201a      	movs	r0, #26
    9a0a:	f881 01ae 	strb.w	r0, [r1, #430]	; 0x1ae
    9a0e:	f501 70d2 	add.w	r0, r1, #420	; 0x1a4
    9a12:	f7fc fd1d 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9a16:	e048      	b.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a18:	2810      	cmp	r0, #16
    9a1a:	d146      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a1c:	4620      	mov	r0, r4
    9a1e:	f005 fc74 	bl	f30a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xd6>
    9a22:	4605      	mov	r5, r0
    9a24:	e041      	b.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a26:	281e      	cmp	r0, #30
    9a28:	d13f      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a2a:	4620      	mov	r0, r4
    9a2c:	f005 fc4f 	bl	f2ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    9a30:	6860      	ldr	r0, [r4, #4]
    9a32:	2105      	movs	r1, #5
    9a34:	30e4      	adds	r0, #228	; 0xe4
    9a36:	f005 fbbd 	bl	f1b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9a3a:	f7fe ff71 	bl	8920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    9a3e:	e034      	b.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a40:	2822      	cmp	r0, #34	; 0x22
    9a42:	d001      	beq.n	9a48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ec>
    9a44:	282e      	cmp	r0, #46	; 0x2e
    9a46:	d130      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a48:	4620      	mov	r0, r4
    9a4a:	f005 fc40 	bl	f2ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    9a4e:	6860      	ldr	r0, [r4, #4]
    9a50:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    9a54:	2923      	cmp	r1, #35	; 0x23
    9a56:	d028      	beq.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a58:	2108      	movs	r1, #8
    9a5a:	30e4      	adds	r0, #228	; 0xe4
    9a5c:	f005 fbaa 	bl	f1b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9a60:	6860      	ldr	r0, [r4, #4]
    9a62:	210b      	movs	r1, #11
    9a64:	30e4      	adds	r0, #228	; 0xe4
    9a66:	f005 fba5 	bl	f1b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9a6a:	201a      	movs	r0, #26
    9a6c:	f7ff fc42 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9a70:	e01b      	b.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a72:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
    9a76:	2824      	cmp	r0, #36	; 0x24
    9a78:	d117      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a7a:	2600      	movs	r6, #0
    9a7c:	f881 6096 	strb.w	r6, [r1, #150]	; 0x96
    9a80:	f7fe fd7a 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9a84:	6860      	ldr	r0, [r4, #4]
    9a86:	f890 0134 	ldrb.w	r0, [r0, #308]	; 0x134
    9a8a:	2801      	cmp	r0, #1
    9a8c:	d102      	bne.n	9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1738>
    9a8e:	2000      	movs	r0, #0
    9a90:	f7ff fc30 	bl	92f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9a94:	6860      	ldr	r0, [r4, #4]
    9a96:	f880 6134 	strb.w	r6, [r0, #308]	; 0x134
    9a9a:	e006      	b.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9a9c:	2829      	cmp	r0, #41	; 0x29
    9a9e:	d104      	bne.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9aa0:	4804      	ldr	r0, [pc, #16]	; (9ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1758>)
    9aa2:	6801      	ldr	r1, [r0, #0]
    9aa4:	b109      	cbz	r1, 9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9aa6:	4620      	mov	r0, r4
    9aa8:	4788      	blx	r1
    9aaa:	4628      	mov	r0, r5
    9aac:	bd70      	pop	{r4, r5, r6, pc}
    9aae:	0000      	.short	0x0000
    9ab0:	20000160 	.word	0x20000160
    9ab4:	200002d4 	.word	0x200002d4
    9ab8:	b570      	push	{r4, r5, r6, lr}
    9aba:	4604      	mov	r4, r0
    9abc:	6840      	ldr	r0, [r0, #4]
    9abe:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    9ac2:	0789      	lsls	r1, r1, #30
    9ac4:	d507      	bpl.n	9ad6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177a>
    9ac6:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9aca:	2301      	movs	r3, #1
    9acc:	2108      	movs	r1, #8
    9ace:	3080      	adds	r0, #128	; 0x80
    9ad0:	f003 ff2b 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ad4:	b308      	cbz	r0, 9b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17be>
    9ad6:	6860      	ldr	r0, [r4, #4]
    9ad8:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
    9adc:	0780      	lsls	r0, r0, #30
    9ade:	d416      	bmi.n	9b0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    9ae0:	4d28      	ldr	r5, [pc, #160]	; (9b84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    9ae2:	68e8      	ldr	r0, [r5, #12]
    9ae4:	f004 fa4f 	bl	df86 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    9ae8:	6861      	ldr	r1, [r4, #4]
    9aea:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
    9aee:	68e8      	ldr	r0, [r5, #12]
    9af0:	6862      	ldr	r2, [r4, #4]
    9af2:	f830 1f05 	ldrh.w	r1, [r0, #5]!
    9af6:	f8a2 10e0 	strh.w	r1, [r2, #224]	; 0xe0
    9afa:	6861      	ldr	r1, [r4, #4]
    9afc:	8840      	ldrh	r0, [r0, #2]
    9afe:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    9b02:	6860      	ldr	r0, [r4, #4]
    9b04:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    9b08:	f041 0102 	orr.w	r1, r1, #2
    9b0c:	7001      	strb	r1, [r0, #0]
    9b0e:	6860      	ldr	r0, [r4, #4]
    9b10:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    9b14:	07c9      	lsls	r1, r1, #31
    9b16:	d002      	beq.n	9b1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c2>
    9b18:	e015      	b.n	9b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ea>
    9b1a:	2001      	movs	r0, #1
    9b1c:	bd70      	pop	{r4, r5, r6, pc}
    9b1e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    9b22:	078a      	lsls	r2, r1, #30
    9b24:	d504      	bpl.n	9b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d4>
    9b26:	f240 3155 	movw	r1, #853	; 0x355
    9b2a:	2031      	movs	r0, #49	; 0x31
    9b2c:	f7fa fd1e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b30:	f041 0102 	orr.w	r1, r1, #2
    9b34:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    9b38:	f7fe fd12 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9b3c:	6860      	ldr	r0, [r4, #4]
    9b3e:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
    9b42:	07c0      	lsls	r0, r0, #31
    9b44:	d005      	beq.n	9b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f6>
    9b46:	6861      	ldr	r1, [r4, #4]
    9b48:	2203      	movs	r2, #3
    9b4a:	f101 00d6 	add.w	r0, r1, #214	; 0xd6
    9b4e:	f7fc fc7f 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9b52:	6861      	ldr	r1, [r4, #4]
    9b54:	2000      	movs	r0, #0
    9b56:	f891 2095 	ldrb.w	r2, [r1, #149]	; 0x95
    9b5a:	2a06      	cmp	r2, #6
    9b5c:	d104      	bne.n	9b68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x180c>
    9b5e:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    9b62:	6861      	ldr	r1, [r4, #4]
    9b64:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    9b68:	6861      	ldr	r1, [r4, #4]
    9b6a:	f891 213a 	ldrb.w	r2, [r1, #314]	; 0x13a
    9b6e:	b13a      	cbz	r2, 9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>
    9b70:	f881 013a 	strb.w	r0, [r1, #314]	; 0x13a
    9b74:	6861      	ldr	r1, [r4, #4]
    9b76:	f891 2095 	ldrb.w	r2, [r1, #149]	; 0x95
    9b7a:	b90a      	cbnz	r2, 9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>
    9b7c:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    9b80:	2000      	movs	r0, #0
    9b82:	bd70      	pop	{r4, r5, r6, pc}
    9b84:	20000160 	.word	0x20000160
    9b88:	4603      	mov	r3, r0
    9b8a:	2000      	movs	r0, #0
    9b8c:	2b16      	cmp	r3, #22
    9b8e:	d00b      	beq.n	9ba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    9b90:	2b23      	cmp	r3, #35	; 0x23
    9b92:	d003      	beq.n	9b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1840>
    9b94:	2b24      	cmp	r3, #36	; 0x24
    9b96:	d001      	beq.n	9b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1840>
    9b98:	2b25      	cmp	r3, #37	; 0x25
    9b9a:	d108      	bne.n	9bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    9b9c:	4a04      	ldr	r2, [pc, #16]	; (9bb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>)
    9b9e:	6812      	ldr	r2, [r2, #0]
    9ba0:	2a00      	cmp	r2, #0
    9ba2:	d004      	beq.n	9bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    9ba4:	4618      	mov	r0, r3
    9ba6:	4710      	bx	r2
    9ba8:	4608      	mov	r0, r1
    9baa:	f7ff bbc5 	b.w	9338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    9bae:	4770      	bx	lr
    9bb0:	200002d0 	.word	0x200002d0
    9bb4:	4a03      	ldr	r2, [pc, #12]	; (9bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>)
    9bb6:	6852      	ldr	r2, [r2, #4]
    9bb8:	f882 011b 	strb.w	r0, [r2, #283]	; 0x11b
    9bbc:	f882 111a 	strb.w	r1, [r2, #282]	; 0x11a
    9bc0:	4770      	bx	lr
    9bc2:	0000      	.short	0x0000
    9bc4:	20000170 	.word	0x20000170
    9bc8:	4915      	ldr	r1, [pc, #84]	; (9c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c4>)
    9bca:	b510      	push	{r4, lr}
    9bcc:	6889      	ldr	r1, [r1, #8]
    9bce:	790a      	ldrb	r2, [r1, #4]
    9bd0:	6841      	ldr	r1, [r0, #4]
    9bd2:	f891 3095 	ldrb.w	r3, [r1, #149]	; 0x95
    9bd6:	2b0a      	cmp	r3, #10
    9bd8:	d10a      	bne.n	9bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>
    9bda:	f891 3119 	ldrb.w	r3, [r1, #281]	; 0x119
    9bde:	4293      	cmp	r3, r2
    9be0:	d106      	bne.n	9bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>
    9be2:	2200      	movs	r2, #0
    9be4:	f881 2095 	strb.w	r2, [r1, #149]	; 0x95
    9be8:	6840      	ldr	r0, [r0, #4]
    9bea:	f880 20ce 	strb.w	r2, [r0, #206]	; 0xce
    9bee:	bd10      	pop	{r4, pc}
    9bf0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    9bf4:	071c      	lsls	r4, r3, #28
    9bf6:	d507      	bpl.n	9c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ac>
    9bf8:	f023 0008 	bic.w	r0, r3, #8
    9bfc:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    9c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c04:	f7fe bcb8 	b.w	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9c08:	2aff      	cmp	r2, #255	; 0xff
    9c0a:	d004      	beq.n	9c16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ba>
    9c0c:	f240 719c 	movw	r1, #1948	; 0x79c
    9c10:	2031      	movs	r0, #49	; 0x31
    9c12:	f7fa fcab 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c1a:	f005 bc0e 	b.w	f43a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x206>
    9c1e:	0000      	.short	0x0000
    9c20:	20000160 	.word	0x20000160
    9c24:	4808      	ldr	r0, [pc, #32]	; (9c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ec>)
    9c26:	b510      	push	{r4, lr}
    9c28:	6840      	ldr	r0, [r0, #4]
    9c2a:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
    9c2e:	b941      	cbnz	r1, 9c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e6>
    9c30:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9c34:	2301      	movs	r3, #1
    9c36:	2106      	movs	r1, #6
    9c38:	3080      	adds	r0, #128	; 0x80
    9c3a:	f003 fe76 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c3e:	2800      	cmp	r0, #0
    9c40:	d000      	beq.n	9c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e8>
    9c42:	2001      	movs	r0, #1
    9c44:	bd10      	pop	{r4, pc}
    9c46:	0000      	.short	0x0000
    9c48:	20000170 	.word	0x20000170
    9c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c4e:	4c5e      	ldr	r4, [pc, #376]	; (9dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    9c50:	4607      	mov	r7, r0
    9c52:	4615      	mov	r5, r2
    9c54:	6860      	ldr	r0, [r4, #4]
    9c56:	2200      	movs	r2, #0
    9c58:	b111      	cbz	r1, 9c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1904>
    9c5a:	f8a0 2226 	strh.w	r2, [r0, #550]	; 0x226
    9c5e:	e006      	b.n	9c6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1912>
    9c60:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    9c64:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
    9c68:	4411      	add	r1, r2
    9c6a:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    9c6e:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    9c72:	f88d 1000 	strb.w	r1, [sp]
    9c76:	9900      	ldr	r1, [sp, #0]
    9c78:	9100      	str	r1, [sp, #0]
    9c7a:	f89d 1000 	ldrb.w	r1, [sp]
    9c7e:	b939      	cbnz	r1, 9c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1934>
    9c80:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    9c84:	2301      	movs	r3, #1
    9c86:	4619      	mov	r1, r3
    9c88:	3080      	adds	r0, #128	; 0x80
    9c8a:	f003 fe4e 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c8e:	b130      	cbz	r0, 9c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1942>
    9c90:	6860      	ldr	r0, [r4, #4]
    9c92:	f830 1fc8 	ldrh.w	r1, [r0, #200]!
    9c96:	f8b0 214e 	ldrh.w	r2, [r0, #334]	; 0x14e
    9c9a:	4411      	add	r1, r2
    9c9c:	8001      	strh	r1, [r0, #0]
    9c9e:	6861      	ldr	r1, [r4, #4]
    9ca0:	f891 00ce 	ldrb.w	r0, [r1, #206]	; 0xce
    9ca4:	b130      	cbz	r0, 9cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1958>
    9ca6:	f8b1 20ca 	ldrh.w	r2, [r1, #202]	; 0xca
    9caa:	f8b1 3216 	ldrh.w	r3, [r1, #534]	; 0x216
    9cae:	441a      	add	r2, r3
    9cb0:	f8a1 20ca 	strh.w	r2, [r1, #202]	; 0xca
    9cb4:	f991 20d2 	ldrsb.w	r2, [r1, #210]	; 0xd2
    9cb8:	2a00      	cmp	r2, #0
    9cba:	dd06      	ble.n	9cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    9cbc:	f8b1 30d0 	ldrh.w	r3, [r1, #208]	; 0xd0
    9cc0:	f8b1 6216 	ldrh.w	r6, [r1, #534]	; 0x216
    9cc4:	4433      	add	r3, r6
    9cc6:	f8a1 30d0 	strh.w	r3, [r1, #208]	; 0xd0
    9cca:	263d      	movs	r6, #61	; 0x3d
    9ccc:	b117      	cbz	r7, 9cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    9cce:	f881 60b5 	strb.w	r6, [r1, #181]	; 0xb5
    9cd2:	e016      	b.n	9d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    9cd4:	4b3c      	ldr	r3, [pc, #240]	; (9dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    9cd6:	3b10      	subs	r3, #16
    9cd8:	781b      	ldrb	r3, [r3, #0]
    9cda:	2b02      	cmp	r3, #2
    9cdc:	d00b      	beq.n	9cf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199a>
    9cde:	2b01      	cmp	r3, #1
    9ce0:	d015      	beq.n	9d0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b2>
    9ce2:	b36d      	cbz	r5, 9d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e4>
    9ce4:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9ce8:	220a      	movs	r2, #10
    9cea:	f7fc fbb1 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9cee:	06e8      	lsls	r0, r5, #27
    9cf0:	d510      	bpl.n	9d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b8>
    9cf2:	201e      	movs	r0, #30
    9cf4:	e01b      	b.n	9d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d2>
    9cf6:	f891 011e 	ldrb.w	r0, [r1, #286]	; 0x11e
    9cfa:	2806      	cmp	r0, #6
    9cfc:	d048      	beq.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9cfe:	2016      	movs	r0, #22
    9d00:	e046      	b.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9d02:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9d06:	220a      	movs	r2, #10
    9d08:	f7fc fba2 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9d0c:	e049      	b.n	9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d0e:	f891 0098 	ldrb.w	r0, [r1, #152]	; 0x98
    9d12:	e03d      	b.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9d14:	0728      	lsls	r0, r5, #28
    9d16:	d503      	bpl.n	9d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    9d18:	6860      	ldr	r0, [r4, #4]
    9d1a:	f880 60b5 	strb.w	r6, [r0, #181]	; 0xb5
    9d1e:	e040      	b.n	9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d20:	06a8      	lsls	r0, r5, #26
    9d22:	d501      	bpl.n	9d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19cc>
    9d24:	2023      	movs	r0, #35	; 0x23
    9d26:	e002      	b.n	9d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d2>
    9d28:	07a8      	lsls	r0, r5, #30
    9d2a:	d004      	beq.n	9d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19da>
    9d2c:	202a      	movs	r0, #42	; 0x2a
    9d2e:	6861      	ldr	r1, [r4, #4]
    9d30:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9d34:	e035      	b.n	9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d36:	f640 51e9 	movw	r1, #3561	; 0xde9
    9d3a:	2031      	movs	r0, #49	; 0x31
    9d3c:	f7fa fc16 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d40:	b128      	cbz	r0, 9d4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f2>
    9d42:	f8b1 00ca 	ldrh.w	r0, [r1, #202]	; 0xca
    9d46:	f8b1 30cc 	ldrh.w	r3, [r1, #204]	; 0xcc
    9d4a:	4298      	cmp	r0, r3
    9d4c:	d216      	bcs.n	9d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a20>
    9d4e:	2a00      	cmp	r2, #0
    9d50:	dd05      	ble.n	9d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a02>
    9d52:	f8b1 00d0 	ldrh.w	r0, [r1, #208]	; 0xd0
    9d56:	f8b1 20cc 	ldrh.w	r2, [r1, #204]	; 0xcc
    9d5a:	4290      	cmp	r0, r2
    9d5c:	d20e      	bcs.n	9d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a20>
    9d5e:	f8b1 20c8 	ldrh.w	r2, [r1, #200]	; 0xc8
    9d62:	f8b1 00c6 	ldrh.w	r0, [r1, #198]	; 0xc6
    9d66:	4282      	cmp	r2, r0
    9d68:	d30a      	bcc.n	9d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    9d6a:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
    9d6e:	f88d 2000 	strb.w	r2, [sp]
    9d72:	9a00      	ldr	r2, [sp, #0]
    9d74:	9200      	str	r2, [sp, #0]
    9d76:	f89d 2000 	ldrb.w	r2, [sp]
    9d7a:	b10a      	cbz	r2, 9d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    9d7c:	2022      	movs	r0, #34	; 0x22
    9d7e:	e007      	b.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9d80:	f891 2099 	ldrb.w	r2, [r1, #153]	; 0x99
    9d84:	b13a      	cbz	r2, 9d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3a>
    9d86:	f8b1 20c4 	ldrh.w	r2, [r1, #196]	; 0xc4
    9d8a:	4282      	cmp	r2, r0
    9d8c:	d309      	bcc.n	9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d8e:	2008      	movs	r0, #8
    9d90:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9d94:	e7b5      	b.n	9d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    9d96:	f8b1 00c4 	ldrh.w	r0, [r1, #196]	; 0xc4
    9d9a:	2806      	cmp	r0, #6
    9d9c:	d301      	bcc.n	9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9d9e:	203e      	movs	r0, #62	; 0x3e
    9da0:	e7f6      	b.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9da2:	6860      	ldr	r0, [r4, #4]
    9da4:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9da8:	f88d 1000 	strb.w	r1, [sp]
    9dac:	9900      	ldr	r1, [sp, #0]
    9dae:	9100      	str	r1, [sp, #0]
    9db0:	f89d 1000 	ldrb.w	r1, [sp]
    9db4:	b119      	cbz	r1, 9dbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a62>
    9db6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9dba:	f005 ba3b 	b.w	f234 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9dbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9dc2:	2100      	movs	r1, #0
    9dc4:	f7fd be92 	b.w	7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9dc8:	20000170 	.word	0x20000170
    9dcc:	b570      	push	{r4, r5, r6, lr}
    9dce:	4d2e      	ldr	r5, [pc, #184]	; (9e88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b2c>)
    9dd0:	6868      	ldr	r0, [r5, #4]
    9dd2:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    9dd6:	b151      	cbz	r1, 9dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9dd8:	2901      	cmp	r1, #1
    9dda:	d008      	beq.n	9dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9ddc:	2902      	cmp	r1, #2
    9dde:	d009      	beq.n	9df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    9de0:	2903      	cmp	r1, #3
    9de2:	d007      	beq.n	9df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    9de4:	f640 4159 	movw	r1, #3161	; 0xc59
    9de8:	2031      	movs	r0, #49	; 0x31
    9dea:	f7fa fbbf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9dee:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    9df2:	e037      	b.n	9e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b08>
    9df4:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
    9df8:	2908      	cmp	r1, #8
    9dfa:	d036      	beq.n	9e6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0e>
    9dfc:	f8b0 20c4 	ldrh.w	r2, [r0, #196]	; 0xc4
    9e00:	f8b0 10c6 	ldrh.w	r1, [r0, #198]	; 0xc6
    9e04:	2400      	movs	r4, #0
    9e06:	1c93      	adds	r3, r2, #2
    9e08:	4299      	cmp	r1, r3
    9e0a:	d306      	bcc.n	9e1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abe>
    9e0c:	1a89      	subs	r1, r1, r2
    9e0e:	1e89      	subs	r1, r1, #2
    9e10:	040c      	lsls	r4, r1, #16
    9e12:	0c24      	lsrs	r4, r4, #16
    9e14:	d001      	beq.n	9e1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abe>
    9e16:	1e64      	subs	r4, r4, #1
    9e18:	b2a4      	uxth	r4, r4
    9e1a:	f890 10c2 	ldrb.w	r1, [r0, #194]	; 0xc2
    9e1e:	b139      	cbz	r1, 9e30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ad4>
    9e20:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9e24:	2301      	movs	r3, #1
    9e26:	2109      	movs	r1, #9
    9e28:	3080      	adds	r0, #128	; 0x80
    9e2a:	f003 fd7e 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e2e:	b340      	cbz	r0, 9e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b26>
    9e30:	f7ff fef8 	bl	9c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    9e34:	b178      	cbz	r0, 9e56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afa>
    9e36:	686a      	ldr	r2, [r5, #4]
    9e38:	2000      	movs	r0, #0
    9e3a:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
    9e3e:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
    9e42:	1c93      	adds	r3, r2, #2
    9e44:	4299      	cmp	r1, r3
    9e46:	d303      	bcc.n	9e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    9e48:	1a88      	subs	r0, r1, r2
    9e4a:	1e80      	subs	r0, r0, #2
    9e4c:	d000      	beq.n	9e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    9e4e:	1e40      	subs	r0, r0, #1
    9e50:	42a0      	cmp	r0, r4
    9e52:	d200      	bcs.n	9e56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afa>
    9e54:	b284      	uxth	r4, r0
    9e56:	b10c      	cbz	r4, 9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b00>
    9e58:	1e64      	subs	r4, r4, #1
    9e5a:	b2a4      	uxth	r4, r4
    9e5c:	6868      	ldr	r0, [r5, #4]
    9e5e:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    9e62:	4421      	add	r1, r4
    9e64:	f8a0 1210 	strh.w	r1, [r0, #528]	; 0x210
    9e68:	bd70      	pop	{r4, r5, r6, pc}
    9e6a:	f8b0 10c4 	ldrh.w	r1, [r0, #196]	; 0xc4
    9e6e:	2903      	cmp	r1, #3
    9e70:	d3bd      	bcc.n	9dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9e72:	f830 1f8c 	ldrh.w	r1, [r0, #140]!
    9e76:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    9e78:	4411      	add	r1, r2
    9e7a:	1c49      	adds	r1, r1, #1
    9e7c:	f8a0 1184 	strh.w	r1, [r0, #388]	; 0x184
    9e80:	bd70      	pop	{r4, r5, r6, pc}
    9e82:	2400      	movs	r4, #0
    9e84:	e7ea      	b.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b00>
    9e86:	0000      	.short	0x0000
    9e88:	20000170 	.word	0x20000170

00009e8c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9e8c:	4903      	ldr	r1, [pc, #12]	; (9e9c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9e8e:	884a      	ldrh	r2, [r1, #2]
    9e90:	8002      	strh	r2, [r0, #0]
    9e92:	7809      	ldrb	r1, [r1, #0]
    9e94:	7081      	strb	r1, [r0, #2]
    9e96:	2000      	movs	r0, #0
    9e98:	4770      	bx	lr
    9e9a:	0000      	.short	0x0000
    9e9c:	200012fc 	.word	0x200012fc

00009ea0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9ea0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9ea2:	460c      	mov	r4, r1
    9ea4:	4605      	mov	r5, r0
    9ea6:	8800      	ldrh	r0, [r0, #0]
    9ea8:	4669      	mov	r1, sp
    9eaa:	f003 fd14 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9eae:	2200      	movs	r2, #0
    9eb0:	b128      	cbz	r0, 9ebe <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    9eb2:	f8c4 2002 	str.w	r2, [r4, #2]
    9eb6:	71a2      	strb	r2, [r4, #6]
    9eb8:	8022      	strh	r2, [r4, #0]
    9eba:	2002      	movs	r0, #2
    9ebc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9ebe:	9901      	ldr	r1, [sp, #4]
    9ec0:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    9ec4:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    9ec8:	f8d1 001e 	ldr.w	r0, [r1, #30]
    9ecc:	f8c4 0002 	str.w	r0, [r4, #2]
    9ed0:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
    9ed4:	71a0      	strb	r0, [r4, #6]
    9ed6:	8828      	ldrh	r0, [r5, #0]
    9ed8:	8020      	strh	r0, [r4, #0]
    9eda:	f891 006c 	ldrb.w	r0, [r1, #108]	; 0x6c
    9ede:	f88d 0008 	strb.w	r0, [sp, #8]
    9ee2:	9802      	ldr	r0, [sp, #8]
    9ee4:	9002      	str	r0, [sp, #8]
    9ee6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9eea:	2800      	cmp	r0, #0
    9eec:	d1ea      	bne.n	9ec4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    9eee:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00009ef0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    9ef0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9ef2:	460d      	mov	r5, r1
    9ef4:	4606      	mov	r6, r0
    9ef6:	8800      	ldrh	r0, [r0, #0]
    9ef8:	4669      	mov	r1, sp
    9efa:	f003 fcec 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9efe:	2800      	cmp	r0, #0
    9f00:	d11a      	bne.n	9f38 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    9f02:	f8dd 4004 	ldr.w	r4, [sp, #4]
    9f06:	2700      	movs	r7, #0
    9f08:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    9f0c:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    9f10:	f006 f989 	bl	10226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    9f14:	70a8      	strb	r0, [r5, #2]
    9f16:	7860      	ldrb	r0, [r4, #1]
    9f18:	f006 f985 	bl	10226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    9f1c:	70e8      	strb	r0, [r5, #3]
    9f1e:	78a0      	ldrb	r0, [r4, #2]
    9f20:	f88d 0008 	strb.w	r0, [sp, #8]
    9f24:	9802      	ldr	r0, [sp, #8]
    9f26:	9002      	str	r0, [sp, #8]
    9f28:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9f2c:	3c6a      	subs	r4, #106	; 0x6a
    9f2e:	2800      	cmp	r0, #0
    9f30:	d1ea      	bne.n	9f08 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    9f32:	8830      	ldrh	r0, [r6, #0]
    9f34:	8028      	strh	r0, [r5, #0]
    9f36:	2000      	movs	r0, #0
    9f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00009f3c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9f3c:	4903      	ldr	r1, [pc, #12]	; (9f4c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    9f3e:	888a      	ldrh	r2, [r1, #4]
    9f40:	8002      	strh	r2, [r0, #0]
    9f42:	88c9      	ldrh	r1, [r1, #6]
    9f44:	8041      	strh	r1, [r0, #2]
    9f46:	2000      	movs	r0, #0
    9f48:	4770      	bx	lr
    9f4a:	0000      	.short	0x0000
    9f4c:	200002e0 	.word	0x200002e0

00009f50 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9f50:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9f52:	2400      	movs	r4, #0
    9f54:	a902      	add	r1, sp, #8
    9f56:	f88d 4004 	strb.w	r4, [sp, #4]
    9f5a:	f88d 4008 	strb.w	r4, [sp, #8]
    9f5e:	9100      	str	r1, [sp, #0]
    9f60:	7882      	ldrb	r2, [r0, #2]
    9f62:	7841      	ldrb	r1, [r0, #1]
    9f64:	7800      	ldrb	r0, [r0, #0]
    9f66:	ab01      	add	r3, sp, #4
    9f68:	f006 fad0 	bl	1050c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    9f6c:	2800      	cmp	r0, #0
    9f6e:	d112      	bne.n	9f96 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    9f70:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9f74:	f006 fa0b 	bl	1038e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    9f78:	b170      	cbz	r0, 9f98 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    9f7a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9f7e:	f006 fa06 	bl	1038e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    9f82:	b148      	cbz	r0, 9f98 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    9f84:	4805      	ldr	r0, [pc, #20]	; (9f9c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    9f86:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9f8a:	7381      	strb	r1, [r0, #14]
    9f8c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9f90:	73c1      	strb	r1, [r0, #15]
    9f92:	8204      	strh	r4, [r0, #16]
    9f94:	2000      	movs	r0, #0
    9f96:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9f98:	2011      	movs	r0, #17
    9f9a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9f9c:	200012fc 	.word	0x200012fc

00009fa0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    9fa0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9fa4:	460f      	mov	r7, r1
    9fa6:	4605      	mov	r5, r0
    9fa8:	7806      	ldrb	r6, [r0, #0]
    9faa:	f006 f9a3 	bl	102f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    9fae:	2800      	cmp	r0, #0
    9fb0:	d10a      	bne.n	9fc8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9fb2:	4628      	mov	r0, r5
    9fb4:	f006 f978 	bl	102a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    9fb8:	2800      	cmp	r0, #0
    9fba:	d105      	bne.n	9fc8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9fbc:	2001      	movs	r0, #1
    9fbe:	f7fa fcc5 	bl	494c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    9fc2:	4286      	cmp	r6, r0
    9fc4:	d302      	bcc.n	9fcc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    9fc6:	2007      	movs	r0, #7
    9fc8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9fcc:	2101      	movs	r1, #1
    9fce:	4630      	mov	r0, r6
    9fd0:	f003 fa0a 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9fd4:	0004      	movs	r4, r0
    9fd6:	d004      	beq.n	9fe2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    9fd8:	f004 fd71 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9fdc:	b168      	cbz	r0, 9ffa <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    9fde:	200c      	movs	r0, #12
    9fe0:	e7f2      	b.n	9fc8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9fe2:	2101      	movs	r1, #1
    9fe4:	4630      	mov	r0, r6
    9fe6:	f003 f9f5 	bl	d3d4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    9fea:	0004      	movs	r4, r0
    9fec:	d013      	beq.n	a016 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    9fee:	4817      	ldr	r0, [pc, #92]	; (a04c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    9ff0:	f990 1000 	ldrsb.w	r1, [r0]
    9ff4:	4620      	mov	r0, r4
    9ff6:	f004 fad6 	bl	e5a6 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    9ffa:	4620      	mov	r0, r4
    9ffc:	f004 fba7 	bl	e74e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    a000:	7038      	strb	r0, [r7, #0]
    a002:	74e8      	strb	r0, [r5, #19]
    a004:	4629      	mov	r1, r5
    a006:	4620      	mov	r0, r4
    a008:	f7fc fdca 	bl	6ba0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    a00c:	4606      	mov	r6, r0
    a00e:	7e68      	ldrb	r0, [r5, #25]
    a010:	b1d0      	cbz	r0, a048 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    a012:	b12e      	cbz	r6, a020 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    a014:	e018      	b.n	a048 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    a016:	f241 3162 	movw	r1, #4962	; 0x1362
    a01a:	2039      	movs	r0, #57	; 0x39
    a01c:	f7fa faa6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a020:	2200      	movs	r2, #0
    a022:	4668      	mov	r0, sp
    a024:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a026:	f003 fa91 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a02a:	2200      	movs	r2, #0
    a02c:	2101      	movs	r1, #1
    a02e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a030:	f003 fb02 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a034:	2204      	movs	r2, #4
    a036:	4668      	mov	r0, sp
    a038:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a03a:	f003 fa87 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a03e:	2200      	movs	r2, #0
    a040:	4611      	mov	r1, r2
    a042:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a044:	f003 faf8 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a048:	4630      	mov	r0, r6
    a04a:	e7bd      	b.n	9fc8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a04c:	200002d8 	.word	0x200002d8

0000a050 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a050:	7801      	ldrb	r1, [r0, #0]
    a052:	b171      	cbz	r1, a072 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a054:	7841      	ldrb	r1, [r0, #1]
    a056:	b161      	cbz	r1, a072 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a058:	8841      	ldrh	r1, [r0, #2]
    a05a:	291b      	cmp	r1, #27
    a05c:	d309      	bcc.n	a072 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a05e:	8881      	ldrh	r1, [r0, #4]
    a060:	291b      	cmp	r1, #27
    a062:	d306      	bcc.n	a072 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a064:	4904      	ldr	r1, [pc, #16]	; (a078 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a066:	6802      	ldr	r2, [r0, #0]
    a068:	600a      	str	r2, [r1, #0]
    a06a:	8880      	ldrh	r0, [r0, #4]
    a06c:	8088      	strh	r0, [r1, #4]
    a06e:	2000      	movs	r0, #0
    a070:	4770      	bx	lr
    a072:	2012      	movs	r0, #18
    a074:	4770      	bx	lr
    a076:	0000      	.short	0x0000
    a078:	200012fc 	.word	0x200012fc

0000a07c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a07c:	6800      	ldr	r0, [r0, #0]
    a07e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    a082:	4288      	cmp	r0, r1
    a084:	d303      	bcc.n	a08e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    a086:	4903      	ldr	r1, [pc, #12]	; (a094 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    a088:	6088      	str	r0, [r1, #8]
    a08a:	2000      	movs	r0, #0
    a08c:	4770      	bx	lr
    a08e:	2012      	movs	r0, #18
    a090:	4770      	bx	lr
    a092:	0000      	.short	0x0000
    a094:	200012fc 	.word	0x200012fc

0000a098 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a098:	4a03      	ldr	r2, [pc, #12]	; (a0a8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a09a:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    a09e:	6001      	str	r1, [r0, #0]
    a0a0:	6042      	str	r2, [r0, #4]
    a0a2:	2000      	movs	r0, #0
    a0a4:	4770      	bx	lr
    a0a6:	0000      	.short	0x0000
    a0a8:	0000a57c 	.word	0x0000a57c

0000a0ac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    a0ac:	b510      	push	{r4, lr}
    a0ae:	2005      	movs	r0, #5
    a0b0:	f000 faee 	bl	a690 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    a0b4:	f7fe f8aa 	bl	820c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    a0b8:	4902      	ldr	r1, [pc, #8]	; (a0c4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    a0ba:	4801      	ldr	r0, [pc, #4]	; (a0c0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    a0bc:	6048      	str	r0, [r1, #4]
    a0be:	bd10      	pop	{r4, pc}
    a0c0:	0000a0f5 	.word	0x0000a0f5
    a0c4:	200002d8 	.word	0x200002d8
    a0c8:	b51c      	push	{r2, r3, r4, lr}
    a0ca:	4909      	ldr	r1, [pc, #36]	; (a0f0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    a0cc:	e9d1 0100 	ldrd	r0, r1, [r1]
    a0d0:	e9cd 0100 	strd	r0, r1, [sp]
    a0d4:	e005      	b.n	a0e2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    a0d6:	9800      	ldr	r0, [sp, #0]
    a0d8:	f004 fcf1 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a0dc:	b108      	cbz	r0, a0e2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    a0de:	2001      	movs	r0, #1
    a0e0:	bd1c      	pop	{r2, r3, r4, pc}
    a0e2:	4668      	mov	r0, sp
    a0e4:	f7fa fc7c 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a0e8:	2800      	cmp	r0, #0
    a0ea:	d0f4      	beq.n	a0d6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    a0ec:	2000      	movs	r0, #0
    a0ee:	bd1c      	pop	{r2, r3, r4, pc}
    a0f0:	0000a57c 	.word	0x0000a57c
    a0f4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    a0f8:	4613      	mov	r3, r2
    a0fa:	4a33      	ldr	r2, [pc, #204]	; (a1c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>)
    a0fc:	460f      	mov	r7, r1
    a0fe:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    a102:	8814      	ldrh	r4, [r2, #0]
    a104:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    a108:	428c      	cmp	r4, r1
    a10a:	d200      	bcs.n	a10e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
    a10c:	4621      	mov	r1, r4
    a10e:	4688      	mov	r8, r1
    a110:	8891      	ldrh	r1, [r2, #4]
    a112:	42b1      	cmp	r1, r6
    a114:	d200      	bcs.n	a118 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6c>
    a116:	460e      	mov	r6, r1
    a118:	8851      	ldrh	r1, [r2, #2]
    a11a:	f640 0448 	movw	r4, #2120	; 0x848
    a11e:	42a1      	cmp	r1, r4
    a120:	d300      	bcc.n	a124 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x78>
    a122:	4621      	mov	r1, r4
    a124:	88d5      	ldrh	r5, [r2, #6]
    a126:	42a5      	cmp	r5, r4
    a128:	d300      	bcc.n	a12c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>
    a12a:	4625      	mov	r5, r4
    a12c:	42a1      	cmp	r1, r4
    a12e:	d200      	bcs.n	a132 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
    a130:	460c      	mov	r4, r1
    a132:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a136:	2e1b      	cmp	r6, #27
    a138:	d001      	beq.n	a13e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x92>
    a13a:	4295      	cmp	r5, r2
    a13c:	d104      	bne.n	a148 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    a13e:	f1b8 0f1b 	cmp.w	r8, #27
    a142:	d03e      	beq.n	a1c2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a144:	4294      	cmp	r4, r2
    a146:	d03c      	beq.n	a1c2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a148:	466a      	mov	r2, sp
    a14a:	4619      	mov	r1, r3
    a14c:	f006 f942 	bl	103d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    a150:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a154:	4641      	mov	r1, r8
    a156:	4540      	cmp	r0, r8
    a158:	d900      	bls.n	a15c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    a15a:	4608      	mov	r0, r1
    a15c:	80f8      	strh	r0, [r7, #6]
    a15e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a162:	42a1      	cmp	r1, r4
    a164:	d800      	bhi.n	a168 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>
    a166:	460c      	mov	r4, r1
    a168:	813c      	strh	r4, [r7, #8]
    a16a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a16e:	42b1      	cmp	r1, r6
    a170:	d800      	bhi.n	a174 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc8>
    a172:	460e      	mov	r6, r1
    a174:	807e      	strh	r6, [r7, #2]
    a176:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a17a:	42a9      	cmp	r1, r5
    a17c:	d800      	bhi.n	a180 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd4>
    a17e:	460d      	mov	r5, r1
    a180:	80bd      	strh	r5, [r7, #4]
    a182:	21ff      	movs	r1, #255	; 0xff
    a184:	7039      	strb	r1, [r7, #0]
    a186:	381b      	subs	r0, #27
    a188:	28e0      	cmp	r0, #224	; 0xe0
    a18a:	d902      	bls.n	a192 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe6>
    a18c:	f640 51a2 	movw	r1, #3490	; 0xda2
    a190:	e014      	b.n	a1bc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a192:	3e1b      	subs	r6, #27
    a194:	2ee0      	cmp	r6, #224	; 0xe0
    a196:	d902      	bls.n	a19e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf2>
    a198:	f640 51a4 	movw	r1, #3492	; 0xda4
    a19c:	e00e      	b.n	a1bc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a19e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a1a2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a1a6:	4284      	cmp	r4, r0
    a1a8:	d902      	bls.n	a1b0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x104>
    a1aa:	f640 51a6 	movw	r1, #3494	; 0xda6
    a1ae:	e005      	b.n	a1bc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a1b0:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    a1b4:	4285      	cmp	r5, r0
    a1b6:	d904      	bls.n	a1c2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a1b8:	f640 51a8 	movw	r1, #3496	; 0xda8
    a1bc:	2039      	movs	r0, #57	; 0x39
    a1be:	f7fa f9d5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1c2:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    a1c6:	0000      	.short	0x0000
    a1c8:	200002e0 	.word	0x200002e0
    a1cc:	b510      	push	{r4, lr}
    a1ce:	480d      	ldr	r0, [pc, #52]	; (a204 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x158>)
    a1d0:	2100      	movs	r1, #0
    a1d2:	4b0d      	ldr	r3, [pc, #52]	; (a208 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>)
    a1d4:	74c1      	strb	r1, [r0, #19]
    a1d6:	8281      	strh	r1, [r0, #20]
    a1d8:	221b      	movs	r2, #27
    a1da:	801a      	strh	r2, [r3, #0]
    a1dc:	f44f 74a4 	mov.w	r4, #328	; 0x148
    a1e0:	805c      	strh	r4, [r3, #2]
    a1e2:	809a      	strh	r2, [r3, #4]
    a1e4:	80dc      	strh	r4, [r3, #6]
    a1e6:	7381      	strb	r1, [r0, #14]
    a1e8:	73c1      	strb	r1, [r0, #15]
    a1ea:	2303      	movs	r3, #3
    a1ec:	7003      	strb	r3, [r0, #0]
    a1ee:	2302      	movs	r3, #2
    a1f0:	7043      	strb	r3, [r0, #1]
    a1f2:	8042      	strh	r2, [r0, #2]
    a1f4:	8082      	strh	r2, [r0, #4]
    a1f6:	f640 62a6 	movw	r2, #3750	; 0xea6
    a1fa:	6082      	str	r2, [r0, #8]
    a1fc:	7481      	strb	r1, [r0, #18]
    a1fe:	7301      	strb	r1, [r0, #12]
    a200:	bd10      	pop	{r4, pc}
    a202:	0000      	.short	0x0000
    a204:	200012fc 	.word	0x200012fc
    a208:	200002e0 	.word	0x200002e0
    a20c:	b510      	push	{r4, lr}
    a20e:	2101      	movs	r1, #1
    a210:	2000      	movs	r0, #0
    a212:	f003 f8e9 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a216:	0004      	movs	r4, r0
    a218:	d10a      	bne.n	a230 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x184>
    a21a:	2101      	movs	r1, #1
    a21c:	f003 f8da 	bl	d3d4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a220:	0004      	movs	r4, r0
    a222:	d007      	beq.n	a234 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x188>
    a224:	4806      	ldr	r0, [pc, #24]	; (a240 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x194>)
    a226:	f990 1000 	ldrsb.w	r1, [r0]
    a22a:	4620      	mov	r0, r4
    a22c:	f004 f9bb 	bl	e5a6 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a230:	4620      	mov	r0, r4
    a232:	bd10      	pop	{r4, pc}
    a234:	f240 2167 	movw	r1, #615	; 0x267
    a238:	2039      	movs	r0, #57	; 0x39
    a23a:	f7fa f997 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a23e:	0000      	.short	0x0000
    a240:	200002d8 	.word	0x200002d8

0000a244 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a248:	b087      	sub	sp, #28
    a24a:	460c      	mov	r4, r1
    a24c:	4680      	mov	r8, r0
    a24e:	4605      	mov	r5, r0
    a250:	f004 fa80 	bl	e754 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a254:	b198      	cbz	r0, a27e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a256:	4628      	mov	r0, r5
    a258:	f004 fa6f 	bl	e73a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a25c:	b130      	cbz	r0, a26c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    a25e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a262:	2012      	movs	r0, #18
    a264:	2900      	cmp	r1, #0
    a266:	d00b      	beq.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a268:	2980      	cmp	r1, #128	; 0x80
    a26a:	d809      	bhi.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a26c:	4628      	mov	r0, r5
    a26e:	f004 fa53 	bl	e718 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a272:	b140      	cbz	r0, a286 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a274:	4640      	mov	r0, r8
    a276:	f004 f960 	bl	e53a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a27a:	b130      	cbz	r0, a28a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    a27c:	e009      	b.n	a292 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    a27e:	2042      	movs	r0, #66	; 0x42
    a280:	b007      	add	sp, #28
    a282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a286:	200c      	movs	r0, #12
    a288:	e7fa      	b.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a28a:	4640      	mov	r0, r8
    a28c:	f004 fa4f 	bl	e72e <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a290:	b3c8      	cbz	r0, a306 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    a292:	4640      	mov	r0, r8
    a294:	f004 fc13 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a298:	2800      	cmp	r0, #0
    a29a:	d1f4      	bne.n	a286 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a29c:	4640      	mov	r0, r8
    a29e:	f004 f967 	bl	e570 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a2a2:	2800      	cmp	r0, #0
    a2a4:	d1ef      	bne.n	a286 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a2a6:	4640      	mov	r0, r8
    a2a8:	f7fc fc18 	bl	6adc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a2ac:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a2b0:	f242 7110 	movw	r1, #10000	; 0x2710
    a2b4:	fb00 f901 	mul.w	r9, r0, r1
    a2b8:	78e1      	ldrb	r1, [r4, #3]
    a2ba:	4640      	mov	r0, r8
    a2bc:	f004 fa23 	bl	e706 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a2c0:	4640      	mov	r0, r8
    a2c2:	f004 fa36 	bl	e732 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a2c6:	b308      	cbz	r0, a30c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    a2c8:	2100      	movs	r1, #0
    a2ca:	a801      	add	r0, sp, #4
    a2cc:	f7fa fba8 	bl	4a20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a2d0:	0004      	movs	r4, r0
    a2d2:	d07b      	beq.n	a3cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    a2d4:	2100      	movs	r1, #0
    a2d6:	f7fb ff41 	bl	615c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a2da:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a2de:	8020      	strh	r0, [r4, #0]
    a2e0:	4621      	mov	r1, r4
    a2e2:	4640      	mov	r0, r8
    a2e4:	f004 fa4d 	bl	e782 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a2e8:	f000 f9de 	bl	a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a2ec:	0940      	lsrs	r0, r0, #5
    a2ee:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    a2f2:	07c0      	lsls	r0, r0, #31
    a2f4:	4d41      	ldr	r5, [pc, #260]	; (a3fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    a2f6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a2fa:	d011      	beq.n	a320 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    a2fc:	8869      	ldrh	r1, [r5, #2]
    a2fe:	88aa      	ldrh	r2, [r5, #4]
    a300:	84c1      	strh	r1, [r0, #38]	; 0x26
    a302:	8502      	strh	r2, [r0, #40]	; 0x28
    a304:	e00f      	b.n	a326 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    a306:	e7ff      	b.n	a308 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    a308:	2012      	movs	r0, #18
    a30a:	e7b9      	b.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a30c:	464a      	mov	r2, r9
    a30e:	2100      	movs	r1, #0
    a310:	4640      	mov	r0, r8
    a312:	f7fd fad9 	bl	78c8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a316:	2800      	cmp	r0, #0
    a318:	d0b2      	beq.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a31a:	f241 51b5 	movw	r1, #5557	; 0x15b5
    a31e:	e05f      	b.n	a3e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a320:	221b      	movs	r2, #27
    a322:	84c2      	strh	r2, [r0, #38]	; 0x26
    a324:	8502      	strh	r2, [r0, #40]	; 0x28
    a326:	f000 f9bf 	bl	a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a32a:	0788      	lsls	r0, r1, #30
    a32c:	f04f 0601 	mov.w	r6, #1
    a330:	d505      	bpl.n	a33e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    a332:	f88d 6008 	strb.w	r6, [sp, #8]
    a336:	a802      	add	r0, sp, #8
    a338:	9403      	str	r4, [sp, #12]
    a33a:	f005 fa2c 	bl	f796 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    a33e:	68a8      	ldr	r0, [r5, #8]
    a340:	62e0      	str	r0, [r4, #44]	; 0x2c
    a342:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a346:	4640      	mov	r0, r8
    a348:	f004 f9fb 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a34c:	b910      	cbnz	r0, a354 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    a34e:	4640      	mov	r0, r8
    a350:	f004 fa15 	bl	e77e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a354:	6127      	str	r7, [r4, #16]
    a356:	8821      	ldrh	r1, [r4, #0]
    a358:	f8ad 1008 	strh.w	r1, [sp, #8]
    a35c:	7ba9      	ldrb	r1, [r5, #14]
    a35e:	f88d 100a 	strb.w	r1, [sp, #10]
    a362:	7be9      	ldrb	r1, [r5, #15]
    a364:	f88d 100b 	strb.w	r1, [sp, #11]
    a368:	8a29      	ldrh	r1, [r5, #16]
    a36a:	f8ad 100c 	strh.w	r1, [sp, #12]
    a36e:	a905      	add	r1, sp, #20
    a370:	9100      	str	r1, [sp, #0]
    a372:	4630      	mov	r0, r6
    a374:	ab04      	add	r3, sp, #16
    a376:	aa02      	add	r2, sp, #8
    a378:	4621      	mov	r1, r4
    a37a:	f006 f861 	bl	10440 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    a37e:	b140      	cbz	r0, a392 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    a380:	2100      	movs	r1, #0
    a382:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a386:	f7fa fb73 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a38a:	b1f0      	cbz	r0, a3ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    a38c:	f241 6117 	movw	r1, #5655	; 0x1617
    a390:	e026      	b.n	a3e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a392:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a396:	f88d 0018 	strb.w	r0, [sp, #24]
    a39a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a39e:	f88d 0019 	strb.w	r0, [sp, #25]
    a3a2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a3a6:	f8ad 001a 	strh.w	r0, [sp, #26]
    a3aa:	a906      	add	r1, sp, #24
    a3ac:	4620      	mov	r0, r4
    a3ae:	f003 fb62 	bl	da76 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a3b2:	7868      	ldrb	r0, [r5, #1]
    a3b4:	9000      	str	r0, [sp, #0]
    a3b6:	782b      	ldrb	r3, [r5, #0]
    a3b8:	88aa      	ldrh	r2, [r5, #4]
    a3ba:	8869      	ldrh	r1, [r5, #2]
    a3bc:	8820      	ldrh	r0, [r4, #0]
    a3be:	f7fa fc0d 	bl	4bdc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a3c2:	b128      	cbz	r0, a3d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    a3c4:	f241 6122 	movw	r1, #5666	; 0x1622
    a3c8:	e00a      	b.n	a3e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a3ca:	e7ff      	b.n	a3cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    a3cc:	2009      	movs	r0, #9
    a3ce:	e757      	b.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a3d0:	464a      	mov	r2, r9
    a3d2:	4621      	mov	r1, r4
    a3d4:	4640      	mov	r0, r8
    a3d6:	f7fd fa77 	bl	78c8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a3da:	b120      	cbz	r0, a3e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    a3dc:	f241 6124 	movw	r1, #5668	; 0x1624
    a3e0:	2039      	movs	r0, #57	; 0x39
    a3e2:	f7fa f8c3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3e6:	4806      	ldr	r0, [pc, #24]	; (a400 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    a3e8:	6843      	ldr	r3, [r0, #4]
    a3ea:	b123      	cbz	r3, a3f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    a3ec:	2200      	movs	r2, #0
    a3ee:	f504 7195 	add.w	r1, r4, #298	; 0x12a
    a3f2:	4620      	mov	r0, r4
    a3f4:	4798      	blx	r3
    a3f6:	2000      	movs	r0, #0
    a3f8:	e742      	b.n	a280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a3fa:	0000      	.short	0x0000
    a3fc:	200012fc 	.word	0x200012fc
    a400:	200002d8 	.word	0x200002d8
    a404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a408:	b088      	sub	sp, #32
    a40a:	4604      	mov	r4, r0
    a40c:	8800      	ldrh	r0, [r0, #0]
    a40e:	a906      	add	r1, sp, #24
    a410:	f003 fa61 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a414:	2800      	cmp	r0, #0
    a416:	d147      	bne.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a418:	9807      	ldr	r0, [sp, #28]
    a41a:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    a41e:	f88d 1008 	strb.w	r1, [sp, #8]
    a422:	9902      	ldr	r1, [sp, #8]
    a424:	9102      	str	r1, [sp, #8]
    a426:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a42a:	3080      	adds	r0, #128	; 0x80
    a42c:	b101      	cbz	r1, a430 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a42e:	2101      	movs	r1, #1
    a430:	f88d 100c 	strb.w	r1, [sp, #12]
    a434:	7901      	ldrb	r1, [r0, #4]
    a436:	f04f 0800 	mov.w	r8, #0
    a43a:	0689      	lsls	r1, r1, #26
    a43c:	d502      	bpl.n	a444 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    a43e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a442:	b149      	cbz	r1, a458 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    a444:	f05f 0100 	movs.w	r1, #0
    a448:	f88d 1004 	strb.w	r1, [sp, #4]
    a44c:	2105      	movs	r1, #5
    a44e:	3064      	adds	r0, #100	; 0x64
    a450:	f005 fa2d 	bl	f8ae <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
    a454:	b110      	cbz	r0, a45c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    a456:	e004      	b.n	a462 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    a458:	2101      	movs	r1, #1
    a45a:	e7f5      	b.n	a448 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    a45c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a460:	b308      	cbz	r0, a4a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    a462:	8921      	ldrh	r1, [r4, #8]
    a464:	88e0      	ldrh	r0, [r4, #6]
    a466:	f005 ffa7 	bl	103b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a46a:	2800      	cmp	r0, #0
    a46c:	d11c      	bne.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a46e:	88a1      	ldrh	r1, [r4, #4]
    a470:	8860      	ldrh	r0, [r4, #2]
    a472:	f005 ffa1 	bl	103b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a476:	2800      	cmp	r0, #0
    a478:	d116      	bne.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a47a:	8921      	ldrh	r1, [r4, #8]
    a47c:	88e0      	ldrh	r0, [r4, #6]
    a47e:	f005 ff91 	bl	103a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    a482:	2800      	cmp	r0, #0
    a484:	d110      	bne.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a486:	88a1      	ldrh	r1, [r4, #4]
    a488:	8860      	ldrh	r0, [r4, #2]
    a48a:	f005 ff8b 	bl	103a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    a48e:	0006      	movs	r6, r0
    a490:	d10a      	bne.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a492:	9807      	ldr	r0, [sp, #28]
    a494:	f500 7595 	add.w	r5, r0, #298	; 0x12a
    a498:	27ff      	movs	r7, #255	; 0xff
    a49a:	706f      	strb	r7, [r5, #1]
    a49c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a4a0:	b129      	cbz	r1, a4ae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    a4a2:	263a      	movs	r6, #58	; 0x3a
    a4a4:	e02e      	b.n	a504 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    a4a6:	201a      	movs	r0, #26
    a4a8:	b008      	add	sp, #32
    a4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4ae:	4641      	mov	r1, r8
    a4b0:	aa03      	add	r2, sp, #12
    a4b2:	f005 ff8f 	bl	103d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    a4b6:	8861      	ldrh	r1, [r4, #2]
    a4b8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a4bc:	4281      	cmp	r1, r0
    a4be:	d200      	bcs.n	a4c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    a4c0:	4608      	mov	r0, r1
    a4c2:	80e8      	strh	r0, [r5, #6]
    a4c4:	88a1      	ldrh	r1, [r4, #4]
    a4c6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a4ca:	4281      	cmp	r1, r0
    a4cc:	d200      	bcs.n	a4d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    a4ce:	4608      	mov	r0, r1
    a4d0:	8128      	strh	r0, [r5, #8]
    a4d2:	88e2      	ldrh	r2, [r4, #6]
    a4d4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a4d8:	428a      	cmp	r2, r1
    a4da:	d200      	bcs.n	a4de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    a4dc:	4611      	mov	r1, r2
    a4de:	8069      	strh	r1, [r5, #2]
    a4e0:	8922      	ldrh	r2, [r4, #8]
    a4e2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a4e6:	428a      	cmp	r2, r1
    a4e8:	d200      	bcs.n	a4ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    a4ea:	4611      	mov	r1, r2
    a4ec:	f640 0248 	movw	r2, #2120	; 0x848
    a4f0:	80a9      	strh	r1, [r5, #4]
    a4f2:	4291      	cmp	r1, r2
    a4f4:	d300      	bcc.n	a4f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    a4f6:	4611      	mov	r1, r2
    a4f8:	80a9      	strh	r1, [r5, #4]
    a4fa:	4290      	cmp	r0, r2
    a4fc:	d200      	bcs.n	a500 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    a4fe:	4602      	mov	r2, r0
    a500:	812a      	strh	r2, [r5, #8]
    a502:	702f      	strb	r7, [r5, #0]
    a504:	f885 8001 	strb.w	r8, [r5, #1]
    a508:	4630      	mov	r0, r6
    a50a:	e7cd      	b.n	a4a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a50c:	b51c      	push	{r2, r3, r4, lr}
    a50e:	490c      	ldr	r1, [pc, #48]	; (a540 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    a510:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    a514:	e9cd 0100 	strd	r0, r1, [sp]
    a518:	e00a      	b.n	a530 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a51a:	9c00      	ldr	r4, [sp, #0]
    a51c:	4620      	mov	r0, r4
    a51e:	f004 face 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a522:	b128      	cbz	r0, a530 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a524:	4620      	mov	r0, r4
    a526:	f004 f951 	bl	e7cc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    a52a:	b108      	cbz	r0, a530 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a52c:	2001      	movs	r0, #1
    a52e:	bd1c      	pop	{r2, r3, r4, pc}
    a530:	4668      	mov	r0, sp
    a532:	f7fa fa55 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a536:	2800      	cmp	r0, #0
    a538:	d0ef      	beq.n	a51a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    a53a:	2000      	movs	r0, #0
    a53c:	bd1c      	pop	{r2, r3, r4, pc}
    a53e:	0000      	.short	0x0000
    a540:	0000a57c 	.word	0x0000a57c
    a544:	b510      	push	{r4, lr}
    a546:	4604      	mov	r4, r0
    a548:	88c1      	ldrh	r1, [r0, #6]
    a54a:	8880      	ldrh	r0, [r0, #4]
    a54c:	f005 ff34 	bl	103b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a550:	2800      	cmp	r0, #0
    a552:	d10f      	bne.n	a574 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    a554:	8861      	ldrh	r1, [r4, #2]
    a556:	8820      	ldrh	r0, [r4, #0]
    a558:	f005 ff2e 	bl	103b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a55c:	2800      	cmp	r0, #0
    a55e:	d109      	bne.n	a574 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    a560:	4805      	ldr	r0, [pc, #20]	; (a578 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x334>)
    a562:	88a1      	ldrh	r1, [r4, #4]
    a564:	8081      	strh	r1, [r0, #4]
    a566:	8821      	ldrh	r1, [r4, #0]
    a568:	8001      	strh	r1, [r0, #0]
    a56a:	88e1      	ldrh	r1, [r4, #6]
    a56c:	80c1      	strh	r1, [r0, #6]
    a56e:	8861      	ldrh	r1, [r4, #2]
    a570:	8041      	strh	r1, [r0, #2]
    a572:	2000      	movs	r0, #0
    a574:	bd10      	pop	{r4, pc}
    a576:	0000      	.short	0x0000
    a578:	200002e0 	.word	0x200002e0
    a57c:	00000000 	.word	0x00000000
    a580:	00010000 	.word	0x00010000
    a584:	00000000 	.word	0x00000000
    a588:	00010000 	.word	0x00010000
    a58c:	0c11fa0c 	.word	0x0c11fa0c
    a590:	11fa0059 	.word	0x11fa0059
    a594:	00000000 	.word	0x00000000
    a598:	00010000 	.word	0x00010000
    a59c:	00000000 	.word	0x00000000
    a5a0:	00010000 	.word	0x00010000

0000a5a4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a5a4:	b510      	push	{r4, lr}
    a5a6:	f7fc f825 	bl	65f4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a5aa:	4805      	ldr	r0, [pc, #20]	; (a5c0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    a5ac:	6840      	ldr	r0, [r0, #4]
    a5ae:	f006 f80a 	bl	105c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a5b2:	f005 fdaf 	bl	10114 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5ba:	f7fc b9d5 	b.w	6968 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    a5be:	0000      	.short	0x0000
    a5c0:	200002e8 	.word	0x200002e8

0000a5c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a5c4:	b510      	push	{r4, lr}
    a5c6:	4c05      	ldr	r4, [pc, #20]	; (a5dc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    a5c8:	68a0      	ldr	r0, [r4, #8]
    a5ca:	f005 fffc 	bl	105c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a5ce:	68e0      	ldr	r0, [r4, #12]
    a5d0:	f005 fff9 	bl	105c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5d8:	f005 be01 	b.w	101de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a5dc:	200002e8 	.word	0x200002e8

0000a5e0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a5e0:	b510      	push	{r4, lr}
    a5e2:	4905      	ldr	r1, [pc, #20]	; (a5f8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a5e4:	4805      	ldr	r0, [pc, #20]	; (a5fc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a5e6:	f005 ffe1 	bl	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a5ea:	4804      	ldr	r0, [pc, #16]	; (a5fc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5f0:	4903      	ldr	r1, [pc, #12]	; (a600 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a5f2:	1d00      	adds	r0, r0, #4
    a5f4:	f005 bfda 	b.w	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a5f8:	200002f8 	.word	0x200002f8
    a5fc:	200002ec 	.word	0x200002ec
    a600:	20000300 	.word	0x20000300

0000a604 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a604:	b510      	push	{r4, lr}
    a606:	4908      	ldr	r1, [pc, #32]	; (a628 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a608:	4808      	ldr	r0, [pc, #32]	; (a62c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a60a:	f005 ffcf 	bl	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a60e:	4807      	ldr	r0, [pc, #28]	; (a62c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a610:	4907      	ldr	r1, [pc, #28]	; (a630 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a612:	1d00      	adds	r0, r0, #4
    a614:	f005 ffca 	bl	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a618:	4804      	ldr	r0, [pc, #16]	; (a62c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a61a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a61e:	4905      	ldr	r1, [pc, #20]	; (a634 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a620:	3008      	adds	r0, #8
    a622:	f005 bfc3 	b.w	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a626:	0000      	.short	0x0000
    a628:	20000310 	.word	0x20000310
    a62c:	200002ec 	.word	0x200002ec
    a630:	20000318 	.word	0x20000318
    a634:	20000308 	.word	0x20000308

0000a638 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a638:	4801      	ldr	r0, [pc, #4]	; (a640 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a63a:	7800      	ldrb	r0, [r0, #0]
    a63c:	4770      	bx	lr
    a63e:	0000      	.short	0x0000
    a640:	200002e8 	.word	0x200002e8
    a644:	b510      	push	{r4, lr}
    a646:	f7fc fb6b 	bl	6d20 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a64a:	f7fd f9eb 	bl	7a24 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    a64e:	4803      	ldr	r0, [pc, #12]	; (a65c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    a650:	f7fc fb4c 	bl	6cec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a658:	f7fb bfd2 	b.w	6600 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    a65c:	200015a1 	.word	0x200015a1
    a660:	4909      	ldr	r1, [pc, #36]	; (a688 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    a662:	b510      	push	{r4, lr}
    a664:	2001      	movs	r0, #1
    a666:	7008      	strb	r0, [r1, #0]
    a668:	f7fc fb8a 	bl	6d80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a66c:	f7fd fde6 	bl	823c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a670:	f003 f863 	bl	d73a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a674:	4805      	ldr	r0, [pc, #20]	; (a68c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    a676:	f7fa fe63 	bl	5340 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a67a:	2000      	movs	r0, #0
    a67c:	f002 fe91 	bl	d3a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a684:	f7fb bfc4 	b.w	6610 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    a688:	200002e8 	.word	0x200002e8
    a68c:	200015a1 	.word	0x200015a1

0000a690 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a690:	4a04      	ldr	r2, [pc, #16]	; (a6a4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    a692:	08c1      	lsrs	r1, r0, #3
    a694:	f000 0307 	and.w	r3, r0, #7
    a698:	2001      	movs	r0, #1
    a69a:	4098      	lsls	r0, r3
    a69c:	5c53      	ldrb	r3, [r2, r1]
    a69e:	4303      	orrs	r3, r0
    a6a0:	5453      	strb	r3, [r2, r1]
    a6a2:	4770      	bx	lr
    a6a4:	20000020 	.word	0x20000020

0000a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a6a8:	4901      	ldr	r1, [pc, #4]	; (a6b0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a6aa:	e9d1 0100 	ldrd	r0, r1, [r1]
    a6ae:	4770      	bx	lr
    a6b0:	20000020 	.word	0x20000020

0000a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a6b4:	4806      	ldr	r0, [pc, #24]	; (a6d0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    a6b6:	8801      	ldrh	r1, [r0, #0]
    a6b8:	7900      	ldrb	r0, [r0, #4]
    a6ba:	0602      	lsls	r2, r0, #24
    a6bc:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    a6c0:	f000 0001 	and.w	r0, r0, #1
    a6c4:	1800      	adds	r0, r0, r0
    a6c6:	b2c0      	uxtb	r0, r0
    a6c8:	f040 0001 	orr.w	r0, r0, #1
    a6cc:	4770      	bx	lr
    a6ce:	0000      	.short	0x0000
    a6d0:	20000020 	.word	0x20000020

0000a6d4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    a6d4:	b510      	push	{r4, lr}
    a6d6:	f7f9 fb73 	bl	3dc0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a6da:	2200      	movs	r2, #0
    a6dc:	4b08      	ldr	r3, [pc, #32]	; (a700 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    a6de:	4611      	mov	r1, r2
    a6e0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    a6e4:	4284      	cmp	r4, r0
    a6e6:	d303      	bcc.n	a6f0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    a6e8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a6ec:	7882      	ldrb	r2, [r0, #2]
    a6ee:	e003      	b.n	a6f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    a6f0:	1c49      	adds	r1, r1, #1
    a6f2:	b2c9      	uxtb	r1, r1
    a6f4:	290c      	cmp	r1, #12
    a6f6:	d3f3      	bcc.n	a6e0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    a6f8:	4802      	ldr	r0, [pc, #8]	; (a704 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    a6fa:	7002      	strb	r2, [r0, #0]
    a6fc:	bd10      	pop	{r4, pc}
    a6fe:	0000      	.short	0x0000
    a700:	00010618 	.word	0x00010618
    a704:	20000369 	.word	0x20000369

0000a708 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a708:	b570      	push	{r4, r5, r6, lr}
    a70a:	4605      	mov	r5, r0
    a70c:	4616      	mov	r6, r2
    a70e:	460c      	mov	r4, r1
    a710:	2002      	movs	r0, #2
    a712:	f000 f9b7 	bl	aa84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a716:	4906      	ldr	r1, [pc, #24]	; (a730 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a718:	2001      	movs	r0, #1
    a71a:	1ef6      	subs	r6, r6, #3
    a71c:	7008      	strb	r0, [r1, #0]
    a71e:	4805      	ldr	r0, [pc, #20]	; (a734 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a720:	6006      	str	r6, [r0, #0]
    a722:	4804      	ldr	r0, [pc, #16]	; (a734 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a724:	3808      	subs	r0, #8
    a726:	6005      	str	r5, [r0, #0]
    a728:	1f00      	subs	r0, r0, #4
    a72a:	6004      	str	r4, [r0, #0]
    a72c:	bd70      	pop	{r4, r5, r6, pc}
    a72e:	0000      	.short	0x0000
    a730:	2000036a 	.word	0x2000036a
    a734:	4000f510 	.word	0x4000f510

0000a738 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a738:	b510      	push	{r4, lr}
    a73a:	4c0c      	ldr	r4, [pc, #48]	; (a76c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a73c:	7820      	ldrb	r0, [r4, #0]
    a73e:	b180      	cbz	r0, a762 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a740:	490b      	ldr	r1, [pc, #44]	; (a770 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a742:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a746:	6008      	str	r0, [r1, #0]
    a748:	f000 f86a 	bl	a820 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a74c:	2100      	movs	r1, #0
    a74e:	b120      	cbz	r0, a75a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a750:	2001      	movs	r0, #1
    a752:	7060      	strb	r0, [r4, #1]
    a754:	4807      	ldr	r0, [pc, #28]	; (a774 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a756:	6800      	ldr	r0, [r0, #0]
    a758:	e001      	b.n	a75e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a75a:	7061      	strb	r1, [r4, #1]
    a75c:	2010      	movs	r0, #16
    a75e:	70a0      	strb	r0, [r4, #2]
    a760:	7021      	strb	r1, [r4, #0]
    a762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a766:	2000      	movs	r0, #0
    a768:	f000 b98c 	b.w	aa84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a76c:	2000036a 	.word	0x2000036a
    a770:	4001f508 	.word	0x4001f508
    a774:	4000f400 	.word	0x4000f400

0000a778 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a778:	b510      	push	{r4, lr}
    a77a:	2002      	movs	r0, #2
    a77c:	f000 f982 	bl	aa84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a780:	4904      	ldr	r1, [pc, #16]	; (a794 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a782:	2001      	movs	r0, #1
    a784:	7008      	strb	r0, [r1, #0]
    a786:	f000 f859 	bl	a83c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a78a:	4903      	ldr	r1, [pc, #12]	; (a798 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a78c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a790:	6008      	str	r0, [r1, #0]
    a792:	bd10      	pop	{r4, pc}
    a794:	2000036a 	.word	0x2000036a
    a798:	4001f504 	.word	0x4001f504

0000a79c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a79c:	4803      	ldr	r0, [pc, #12]	; (a7ac <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a79e:	2100      	movs	r1, #0
    a7a0:	7001      	strb	r1, [r0, #0]
    a7a2:	7041      	strb	r1, [r0, #1]
    a7a4:	2110      	movs	r1, #16
    a7a6:	7081      	strb	r1, [r0, #2]
    a7a8:	4770      	bx	lr
    a7aa:	0000      	.short	0x0000
    a7ac:	2000036a 	.word	0x2000036a

0000a7b0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a7b0:	4807      	ldr	r0, [pc, #28]	; (a7d0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a7b2:	b510      	push	{r4, lr}
    a7b4:	7801      	ldrb	r1, [r0, #0]
    a7b6:	b141      	cbz	r1, a7ca <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a7b8:	f000 f832 	bl	a820 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a7bc:	b118      	cbz	r0, a7c6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a7be:	4805      	ldr	r0, [pc, #20]	; (a7d4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a7c0:	6800      	ldr	r0, [r0, #0]
    a7c2:	b2c0      	uxtb	r0, r0
    a7c4:	bd10      	pop	{r4, pc}
    a7c6:	2010      	movs	r0, #16
    a7c8:	bd10      	pop	{r4, pc}
    a7ca:	7880      	ldrb	r0, [r0, #2]
    a7cc:	bd10      	pop	{r4, pc}
    a7ce:	0000      	.short	0x0000
    a7d0:	2000036a 	.word	0x2000036a
    a7d4:	4000f400 	.word	0x4000f400

0000a7d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a7d8:	4808      	ldr	r0, [pc, #32]	; (a7fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a7da:	b510      	push	{r4, lr}
    a7dc:	7801      	ldrb	r1, [r0, #0]
    a7de:	b159      	cbz	r1, a7f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a7e0:	4807      	ldr	r0, [pc, #28]	; (a800 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a7e2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a7e6:	b128      	cbz	r0, a7f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a7e8:	f000 f80c 	bl	a804 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a7ec:	2800      	cmp	r0, #0
    a7ee:	d000      	beq.n	a7f2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a7f0:	2001      	movs	r0, #1
    a7f2:	bd10      	pop	{r4, pc}
    a7f4:	2002      	movs	r0, #2
    a7f6:	bd10      	pop	{r4, pc}
    a7f8:	7840      	ldrb	r0, [r0, #1]
    a7fa:	bd10      	pop	{r4, pc}
    a7fc:	2000036a 	.word	0x2000036a
    a800:	4000f000 	.word	0x4000f000
    a804:	4805      	ldr	r0, [pc, #20]	; (a81c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a806:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a80a:	b111      	cbz	r1, a812 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a80c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a810:	b108      	cbz	r0, a816 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a812:	2000      	movs	r0, #0
    a814:	4770      	bx	lr
    a816:	2001      	movs	r0, #1
    a818:	4770      	bx	lr
    a81a:	0000      	.short	0x0000
    a81c:	4000f000 	.word	0x4000f000
    a820:	4805      	ldr	r0, [pc, #20]	; (a838 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a822:	b510      	push	{r4, lr}
    a824:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a828:	b120      	cbz	r0, a834 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a82a:	f7ff ffeb 	bl	a804 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a82e:	b108      	cbz	r0, a834 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a830:	2001      	movs	r0, #1
    a832:	bd10      	pop	{r4, pc}
    a834:	2000      	movs	r0, #0
    a836:	bd10      	pop	{r4, pc}
    a838:	4000f000 	.word	0x4000f000
    a83c:	4804      	ldr	r0, [pc, #16]	; (a850 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a83e:	2100      	movs	r1, #0
    a840:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a844:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a848:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a84c:	4770      	bx	lr
    a84e:	0000      	.short	0x0000
    a850:	4000f000 	.word	0x4000f000

0000a854 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a858:	4604      	mov	r4, r0
    a85a:	461e      	mov	r6, r3
    a85c:	4690      	mov	r8, r2
    a85e:	460f      	mov	r7, r1
    a860:	2001      	movs	r0, #1
    a862:	f000 f90f 	bl	aa84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a866:	4d1e      	ldr	r5, [pc, #120]	; (a8e0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    a868:	481e      	ldr	r0, [pc, #120]	; (a8e4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    a86a:	f004 0103 	and.w	r1, r4, #3
    a86e:	712e      	strb	r6, [r5, #4]
    a870:	6800      	ldr	r0, [r0, #0]
    a872:	0432      	lsls	r2, r6, #16
    a874:	f361 0007 	bfi	r0, r1, #0, #8
    a878:	f366 200f 	bfi	r0, r6, #8, #8
    a87c:	0c00      	lsrs	r0, r0, #16
    a87e:	4e1a      	ldr	r6, [pc, #104]	; (a8e8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    a880:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    a884:	4308      	orrs	r0, r1
    a886:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    a88a:	4818      	ldr	r0, [pc, #96]	; (a8ec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    a88c:	6007      	str	r7, [r0, #0]
    a88e:	f001 fdc4 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a892:	b938      	cbnz	r0, a8a4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    a894:	4815      	ldr	r0, [pc, #84]	; (a8ec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    a896:	3010      	adds	r0, #16
    a898:	6801      	ldr	r1, [r0, #0]
    a89a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a89e:	ea41 0108 	orr.w	r1, r1, r8
    a8a2:	6001      	str	r1, [r0, #0]
    a8a4:	f000 f8e4 	bl	aa70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    a8a8:	b10c      	cbz	r4, a8ae <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    a8aa:	2c04      	cmp	r4, #4
    a8ac:	d107      	bne.n	a8be <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    a8ae:	4811      	ldr	r0, [pc, #68]	; (a8f4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    a8b0:	490d      	ldr	r1, [pc, #52]	; (a8e8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    a8b2:	4a0f      	ldr	r2, [pc, #60]	; (a8f0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    a8b4:	1d09      	adds	r1, r1, #4
    a8b6:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    a8ba:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    a8be:	2001      	movs	r0, #1
    a8c0:	7068      	strb	r0, [r5, #1]
    a8c2:	70ec      	strb	r4, [r5, #3]
    a8c4:	b11c      	cbz	r4, a8ce <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    a8c6:	2c01      	cmp	r4, #1
    a8c8:	d001      	beq.n	a8ce <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    a8ca:	2c02      	cmp	r4, #2
    a8cc:	d106      	bne.n	a8dc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    a8ce:	7028      	strb	r0, [r5, #0]
    a8d0:	2100      	movs	r1, #0
    a8d2:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    a8d6:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    a8da:	6030      	str	r0, [r6, #0]
    a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a8e0:	2000036d 	.word	0x2000036d
    a8e4:	0000aa80 	.word	0x0000aa80
    a8e8:	4000f000 	.word	0x4000f000
    a8ec:	4000f508 	.word	0x4000f508
    a8f0:	4000f100 	.word	0x4000f100
    a8f4:	4001f088 	.word	0x4001f088

0000a8f8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    a8f8:	b570      	push	{r4, r5, r6, lr}
    a8fa:	4a1c      	ldr	r2, [pc, #112]	; (a96c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    a8fc:	7853      	ldrb	r3, [r2, #1]
    a8fe:	b1a3      	cbz	r3, a92a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    a900:	4b1b      	ldr	r3, [pc, #108]	; (a970 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    a902:	6019      	str	r1, [r3, #0]
    a904:	1d19      	adds	r1, r3, #4
    a906:	6008      	str	r0, [r1, #0]
    a908:	2501      	movs	r5, #1
    a90a:	7095      	strb	r5, [r2, #2]
    a90c:	4610      	mov	r0, r2
    a90e:	78d6      	ldrb	r6, [r2, #3]
    a910:	4b18      	ldr	r3, [pc, #96]	; (a974 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    a912:	7800      	ldrb	r0, [r0, #0]
    a914:	4c18      	ldr	r4, [pc, #96]	; (a978 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    a916:	2100      	movs	r1, #0
    a918:	b156      	cbz	r6, a930 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    a91a:	2e04      	cmp	r6, #4
    a91c:	d01b      	beq.n	a956 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    a91e:	b308      	cbz	r0, a964 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    a920:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a924:	0668      	lsls	r0, r5, #25
    a926:	6018      	str	r0, [r3, #0]
    a928:	bd70      	pop	{r4, r5, r6, pc}
    a92a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    a92e:	e01a      	b.n	a966 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    a930:	b178      	cbz	r0, a952 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    a932:	4620      	mov	r0, r4
    a934:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a938:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    a93c:	601e      	str	r6, [r3, #0]
    a93e:	1271      	asrs	r1, r6, #9
    a940:	f005 fe9f 	bl	10682 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    a944:	2800      	cmp	r0, #0
    a946:	d0ef      	beq.n	a928 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    a948:	6065      	str	r5, [r4, #4]
    a94a:	480a      	ldr	r0, [pc, #40]	; (a974 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    a94c:	1d00      	adds	r0, r0, #4
    a94e:	6006      	str	r6, [r0, #0]
    a950:	bd70      	pop	{r4, r5, r6, pc}
    a952:	21b3      	movs	r1, #179	; 0xb3
    a954:	e007      	b.n	a966 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    a956:	7015      	strb	r5, [r2, #0]
    a958:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a95c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    a960:	6025      	str	r5, [r4, #0]
    a962:	bd70      	pop	{r4, r5, r6, pc}
    a964:	21c6      	movs	r1, #198	; 0xc6
    a966:	203c      	movs	r0, #60	; 0x3c
    a968:	f7f9 fe00 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a96c:	2000036d 	.word	0x2000036d
    a970:	4000f50c 	.word	0x4000f50c
    a974:	4001f504 	.word	0x4001f504
    a978:	4000f000 	.word	0x4000f000

0000a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a97c:	b570      	push	{r4, r5, r6, lr}
    a97e:	4d05      	ldr	r5, [pc, #20]	; (a994 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    a980:	2400      	movs	r4, #0
    a982:	7828      	ldrb	r0, [r5, #0]
    a984:	b110      	cbz	r0, a98c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    a986:	f000 f873 	bl	aa70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    a98a:	702c      	strb	r4, [r5, #0]
    a98c:	706c      	strb	r4, [r5, #1]
    a98e:	70ac      	strb	r4, [r5, #2]
    a990:	bd70      	pop	{r4, r5, r6, pc}
    a992:	0000      	.short	0x0000
    a994:	2000036d 	.word	0x2000036d

0000a998 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a998:	4802      	ldr	r0, [pc, #8]	; (a9a4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    a99a:	2100      	movs	r1, #0
    a99c:	7001      	strb	r1, [r0, #0]
    a99e:	7041      	strb	r1, [r0, #1]
    a9a0:	7081      	strb	r1, [r0, #2]
    a9a2:	4770      	bx	lr
    a9a4:	2000036d 	.word	0x2000036d

0000a9a8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a9a8:	480b      	ldr	r0, [pc, #44]	; (a9d8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    a9aa:	b510      	push	{r4, lr}
    a9ac:	7800      	ldrb	r0, [r0, #0]
    a9ae:	b158      	cbz	r0, a9c8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    a9b0:	f44f 7182 	mov.w	r1, #260	; 0x104
    a9b4:	4809      	ldr	r0, [pc, #36]	; (a9dc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    a9b6:	f005 fe64 	bl	10682 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    a9ba:	b140      	cbz	r0, a9ce <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    a9bc:	4808      	ldr	r0, [pc, #32]	; (a9e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    a9be:	6800      	ldr	r0, [r0, #0]
    a9c0:	2800      	cmp	r0, #0
    a9c2:	d000      	beq.n	a9c6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    a9c4:	2001      	movs	r0, #1
    a9c6:	bd10      	pop	{r4, pc}
    a9c8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    a9cc:	e001      	b.n	a9d2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    a9ce:	f240 11eb 	movw	r1, #491	; 0x1eb
    a9d2:	203c      	movs	r0, #60	; 0x3c
    a9d4:	f7f9 fdca 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9d8:	2000036d 	.word	0x2000036d
    a9dc:	4000f000 	.word	0x4000f000
    a9e0:	4000f400 	.word	0x4000f400

0000a9e4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a9e4:	4801      	ldr	r0, [pc, #4]	; (a9ec <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a9e6:	2101      	movs	r1, #1
    a9e8:	6081      	str	r1, [r0, #8]
    a9ea:	4770      	bx	lr
    a9ec:	4000f000 	.word	0x4000f000

0000a9f0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9f4:	481b      	ldr	r0, [pc, #108]	; (aa64 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    a9f6:	7800      	ldrb	r0, [r0, #0]
    a9f8:	b1d8      	cbz	r0, aa32 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    a9fa:	f8df 806c 	ldr.w	r8, [pc, #108]	; aa68 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a9fe:	f44f 7682 	mov.w	r6, #260	; 0x104
    aa02:	4631      	mov	r1, r6
    aa04:	4640      	mov	r0, r8
    aa06:	f005 fe3c 	bl	10682 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    aa0a:	2800      	cmp	r0, #0
    aa0c:	d128      	bne.n	aa60 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    aa0e:	2002      	movs	r0, #2
    aa10:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    aa14:	4c15      	ldr	r4, [pc, #84]	; (aa6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    aa16:	6820      	ldr	r0, [r4, #0]
    aa18:	43c0      	mvns	r0, r0
    aa1a:	f340 1500 	sbfx	r5, r0, #4, #1
    aa1e:	6820      	ldr	r0, [r4, #0]
    aa20:	f040 0010 	orr.w	r0, r0, #16
    aa24:	6020      	str	r0, [r4, #0]
    aa26:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    aa2a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    aa2e:	1c6d      	adds	r5, r5, #1
    aa30:	e008      	b.n	aa44 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    aa32:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    aa36:	203c      	movs	r0, #60	; 0x3c
    aa38:	f7f9 fd98 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa3c:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    aa40:	f7f9 fbf0 	bl	4224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    aa44:	4631      	mov	r1, r6
    aa46:	4640      	mov	r0, r8
    aa48:	f005 fe1b 	bl	10682 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    aa4c:	2800      	cmp	r0, #0
    aa4e:	d0f5      	beq.n	aa3c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    aa50:	b91d      	cbnz	r5, aa5a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    aa52:	6820      	ldr	r0, [r4, #0]
    aa54:	f020 0010 	bic.w	r0, r0, #16
    aa58:	6020      	str	r0, [r4, #0]
    aa5a:	2002      	movs	r0, #2
    aa5c:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    aa60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa64:	2000036d 	.word	0x2000036d
    aa68:	4000f000 	.word	0x4000f000
    aa6c:	e000ed10 	.word	0xe000ed10
    aa70:	4902      	ldr	r1, [pc, #8]	; (aa7c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    aa72:	4801      	ldr	r0, [pc, #4]	; (aa78 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    aa74:	6008      	str	r0, [r1, #0]
    aa76:	4770      	bx	lr
    aa78:	02020000 	.word	0x02020000
    aa7c:	4001f508 	.word	0x4001f508
    aa80:	00010000 	.word	0x00010000

0000aa84 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    aa84:	b510      	push	{r4, lr}
    aa86:	4604      	mov	r4, r0
    aa88:	f000 f820 	bl	aacc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    aa8c:	2c00      	cmp	r4, #0
    aa8e:	d00e      	beq.n	aaae <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    aa90:	4a0b      	ldr	r2, [pc, #44]	; (aac0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    aa92:	480b      	ldr	r0, [pc, #44]	; (aac0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    aa94:	490b      	ldr	r1, [pc, #44]	; (aac4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    aa96:	3214      	adds	r2, #20
    aa98:	2c01      	cmp	r4, #1
    aa9a:	d005      	beq.n	aaa8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    aa9c:	2c02      	cmp	r4, #2
    aa9e:	d007      	beq.n	aab0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    aaa0:	2182      	movs	r1, #130	; 0x82
    aaa2:	203d      	movs	r0, #61	; 0x3d
    aaa4:	f7f9 fd62 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aaa8:	2302      	movs	r3, #2
    aaaa:	6003      	str	r3, [r0, #0]
    aaac:	6011      	str	r1, [r2, #0]
    aaae:	bd10      	pop	{r4, pc}
    aab0:	2303      	movs	r3, #3
    aab2:	6003      	str	r3, [r0, #0]
    aab4:	6011      	str	r1, [r2, #0]
    aab6:	4904      	ldr	r1, [pc, #16]	; (aac8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    aab8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    aabc:	6008      	str	r0, [r1, #0]
    aabe:	bd10      	pop	{r4, pc}
    aac0:	4000f500 	.word	0x4000f500
    aac4:	200016a3 	.word	0x200016a3
    aac8:	4001f504 	.word	0x4001f504
    aacc:	4805      	ldr	r0, [pc, #20]	; (aae4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    aace:	b510      	push	{r4, lr}
    aad0:	2100      	movs	r1, #0
    aad2:	6001      	str	r1, [r0, #0]
    aad4:	6001      	str	r1, [r0, #0]
    aad6:	f7ff ff51 	bl	a97c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    aada:	4903      	ldr	r1, [pc, #12]	; (aae8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    aadc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    aae0:	6008      	str	r0, [r1, #0]
    aae2:	bd10      	pop	{r4, pc}
    aae4:	4000f500 	.word	0x4000f500
    aae8:	4001f508 	.word	0x4001f508

0000aaec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    aaec:	4805      	ldr	r0, [pc, #20]	; (ab04 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    aaee:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    aaf2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    aaf6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    aafa:	2100      	movs	r1, #0
    aafc:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    ab00:	4770      	bx	lr
    ab02:	0000      	.short	0x0000
    ab04:	40001000 	.word	0x40001000

0000ab08 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    ab08:	4904      	ldr	r1, [pc, #16]	; (ab1c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    ab0a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    ab0e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    ab12:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ab16:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    ab1a:	4770      	bx	lr
    ab1c:	40001000 	.word	0x40001000

0000ab20 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    ab20:	4801      	ldr	r0, [pc, #4]	; (ab28 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    ab22:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    ab26:	4770      	bx	lr
    ab28:	20001360 	.word	0x20001360

0000ab2c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    ab2c:	4902      	ldr	r1, [pc, #8]	; (ab38 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    ab2e:	5c08      	ldrb	r0, [r1, r0]
    ab30:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    ab34:	4770      	bx	lr
    ab36:	0000      	.short	0x0000
    ab38:	0000b852 	.word	0x0000b852

0000ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    ab3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab3e:	4c24      	ldr	r4, [pc, #144]	; (abd0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    ab40:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    ab44:	f010 0f10 	tst.w	r0, #16
    ab48:	d001      	beq.n	ab4e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    ab4a:	2701      	movs	r7, #1
    ab4c:	e000      	b.n	ab50 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    ab4e:	2700      	movs	r7, #0
    ab50:	2010      	movs	r0, #16
    ab52:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    ab56:	2002      	movs	r0, #2
    ab58:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ab5c:	481d      	ldr	r0, [pc, #116]	; (abd4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    ab5e:	2500      	movs	r5, #0
    ab60:	491d      	ldr	r1, [pc, #116]	; (abd8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    ab62:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    ab66:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    ab6a:	6008      	str	r0, [r1, #0]
    ab6c:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    ab70:	f44f 7688 	mov.w	r6, #272	; 0x110
    ab74:	f010 0fff 	tst.w	r0, #255	; 0xff
    ab78:	d019      	beq.n	abae <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    ab7a:	20ff      	movs	r0, #255	; 0xff
    ab7c:	f88d 0000 	strb.w	r0, [sp]
    ab80:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    ab84:	2001      	movs	r0, #1
    ab86:	6120      	str	r0, [r4, #16]
    ab88:	e005      	b.n	ab96 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    ab8a:	bf00      	nop
    ab8c:	f89d 0000 	ldrb.w	r0, [sp]
    ab90:	1e40      	subs	r0, r0, #1
    ab92:	f88d 0000 	strb.w	r0, [sp]
    ab96:	f89d 0000 	ldrb.w	r0, [sp]
    ab9a:	b128      	cbz	r0, aba8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    ab9c:	4631      	mov	r1, r6
    ab9e:	4620      	mov	r0, r4
    aba0:	f005 fd9e 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    aba4:	2800      	cmp	r0, #0
    aba6:	d0f1      	beq.n	ab8c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    aba8:	f89d 0000 	ldrb.w	r0, [sp]
    abac:	b158      	cbz	r0, abc6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    abae:	f000 fc45 	bl	b43c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    abb2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    abb6:	f000 fdcd 	bl	b754 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    abba:	2f00      	cmp	r7, #0
    abbc:	d002      	beq.n	abc4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    abbe:	2010      	movs	r0, #16
    abc0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    abc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abc6:	f640 018f 	movw	r1, #2191	; 0x88f
    abca:	203e      	movs	r0, #62	; 0x3e
    abcc:	f7f9 fcce 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abd0:	40001000 	.word	0x40001000
    abd4:	20001360 	.word	0x20001360
    abd8:	4001f508 	.word	0x4001f508

0000abdc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    abdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abe0:	4d18      	ldr	r5, [pc, #96]	; (ac44 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    abe2:	4607      	mov	r7, r0
    abe4:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    abe8:	07c2      	lsls	r2, r0, #31
    abea:	d00f      	beq.n	ac0c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    abec:	4c16      	ldr	r4, [pc, #88]	; (ac48 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    abee:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    abf2:	f042 0201 	orr.w	r2, r2, #1
    abf6:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    abfa:	f040 0002 	orr.w	r0, r0, #2
    abfe:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    ac02:	2601      	movs	r6, #1
    ac04:	b13f      	cbz	r7, ac16 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    ac06:	2f01      	cmp	r7, #1
    ac08:	d00b      	beq.n	ac22 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    ac0a:	e010      	b.n	ac2e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    ac0c:	f240 717c 	movw	r1, #1916	; 0x77c
    ac10:	203e      	movs	r0, #62	; 0x3e
    ac12:	f7f9 fcab 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac16:	4608      	mov	r0, r1
    ac18:	f000 fdf6 	bl	b808 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    ac1c:	726e      	strb	r6, [r5, #9]
    ac1e:	6026      	str	r6, [r4, #0]
    ac20:	e005      	b.n	ac2e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    ac22:	4608      	mov	r0, r1
    ac24:	f000 fdd6 	bl	b7d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    ac28:	2002      	movs	r0, #2
    ac2a:	7268      	strb	r0, [r5, #9]
    ac2c:	6066      	str	r6, [r4, #4]
    ac2e:	4807      	ldr	r0, [pc, #28]	; (ac4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    ac30:	64c6      	str	r6, [r0, #76]	; 0x4c
    ac32:	4806      	ldr	r0, [pc, #24]	; (ac4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    ac34:	300c      	adds	r0, #12
    ac36:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    ac3a:	4638      	mov	r0, r7
    ac3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ac40:	f000 bd5a 	b.w	b6f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    ac44:	20001360 	.word	0x20001360
    ac48:	40001000 	.word	0x40001000
    ac4c:	40008000 	.word	0x40008000

0000ac50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac54:	4c2c      	ldr	r4, [pc, #176]	; (ad08 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    ac56:	0006      	movs	r6, r0
    ac58:	4d2c      	ldr	r5, [pc, #176]	; (ad0c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    ac5a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    ac5e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; ad10 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    ac62:	f040 0002 	orr.w	r0, r0, #2
    ac66:	4689      	mov	r9, r1
    ac68:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    ac6c:	f04f 0700 	mov.w	r7, #0
    ac70:	d002      	beq.n	ac78 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    ac72:	2e01      	cmp	r6, #1
    ac74:	d020      	beq.n	acb8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    ac76:	e036      	b.n	ace6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    ac78:	4608      	mov	r0, r1
    ac7a:	f000 fdc5 	bl	b808 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    ac7e:	2001      	movs	r0, #1
    ac80:	7260      	strb	r0, [r4, #9]
    ac82:	79e0      	ldrb	r0, [r4, #7]
    ac84:	2801      	cmp	r0, #1
    ac86:	d105      	bne.n	ac94 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    ac88:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    ac8c:	f040 0008 	orr.w	r0, r0, #8
    ac90:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    ac94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ac96:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    ac9a:	62a0      	str	r0, [r4, #40]	; 0x28
    ac9c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    aca0:	f8c8 0000 	str.w	r0, [r8]
    aca4:	491b      	ldr	r1, [pc, #108]	; (ad14 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    aca6:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    acaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    acae:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    acb2:	fbb0 f7f1 	udiv	r7, r0, r1
    acb6:	e016      	b.n	ace6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    acb8:	4608      	mov	r0, r1
    acba:	f000 fd8b 	bl	b7d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    acbe:	2002      	movs	r0, #2
    acc0:	7260      	strb	r0, [r4, #9]
    acc2:	79e0      	ldrb	r0, [r4, #7]
    acc4:	2801      	cmp	r0, #1
    acc6:	d105      	bne.n	acd4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    acc8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    accc:	f040 0004 	orr.w	r0, r0, #4
    acd0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    acd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    acd6:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    acda:	62a0      	str	r0, [r4, #40]	; 0x28
    acdc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    ace0:	f8c8 0000 	str.w	r0, [r8]
    ace4:	2729      	movs	r7, #41	; 0x29
    ace6:	f000 fc15 	bl	b514 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    acea:	f001 fa6a 	bl	c1c2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    acee:	b120      	cbz	r0, acfa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    acf0:	f7ff ff24 	bl	ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    acf4:	2000      	movs	r0, #0
    acf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    acfa:	2100      	movs	r1, #0
    acfc:	4630      	mov	r0, r6
    acfe:	f000 fcfb 	bl	b6f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    ad02:	4638      	mov	r0, r7
    ad04:	e7f7      	b.n	acf6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    ad06:	0000      	.short	0x0000
    ad08:	20001360 	.word	0x20001360
    ad0c:	40001000 	.word	0x40001000
    ad10:	4001f504 	.word	0x4001f504
    ad14:	0000b84c 	.word	0x0000b84c

0000ad18 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    ad18:	4a02      	ldr	r2, [pc, #8]	; (ad24 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    ad1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ad1c:	6003      	str	r3, [r0, #0]
    ad1e:	6b50      	ldr	r0, [r2, #52]	; 0x34
    ad20:	6008      	str	r0, [r1, #0]
    ad22:	4770      	bx	lr
    ad24:	20001360 	.word	0x20001360

0000ad28 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    ad28:	b510      	push	{r4, lr}
    ad2a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    ad2c:	4901      	ldr	r1, [pc, #4]	; (ad34 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    ad2e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    ad32:	bd10      	pop	{r4, pc}
    ad34:	20001350 	.word	0x20001350

0000ad38 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    ad38:	490f      	ldr	r1, [pc, #60]	; (ad78 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    ad3a:	b510      	push	{r4, lr}
    ad3c:	69ca      	ldr	r2, [r1, #28]
    ad3e:	4282      	cmp	r2, r0
    ad40:	d302      	bcc.n	ad48 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    ad42:	f640 111f 	movw	r1, #2335	; 0x91f
    ad46:	e00b      	b.n	ad60 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    ad48:	2201      	movs	r2, #1
    ad4a:	730a      	strb	r2, [r1, #12]
    ad4c:	6108      	str	r0, [r1, #16]
    ad4e:	490b      	ldr	r1, [pc, #44]	; (ad7c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    ad50:	644a      	str	r2, [r1, #68]	; 0x44
    ad52:	1d0a      	adds	r2, r1, #4
    ad54:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    ad58:	4283      	cmp	r3, r0
    ad5a:	d304      	bcc.n	ad66 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    ad5c:	f640 1128 	movw	r1, #2344	; 0x928
    ad60:	203e      	movs	r0, #62	; 0x3e
    ad62:	f7f9 fc03 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad66:	2300      	movs	r3, #0
    ad68:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    ad6c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ad70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad74:	f000 bc94 	b.w	b6a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    ad78:	20001360 	.word	0x20001360
    ad7c:	40008000 	.word	0x40008000

0000ad80 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    ad80:	b570      	push	{r4, r5, r6, lr}
    ad82:	4c0f      	ldr	r4, [pc, #60]	; (adc0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    ad84:	4603      	mov	r3, r0
    ad86:	2002      	movs	r0, #2
    ad88:	7320      	strb	r0, [r4, #12]
    ad8a:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    ad8e:	2096      	movs	r0, #150	; 0x96
    ad90:	f894 1020 	ldrb.w	r1, [r4, #32]
    ad94:	7d22      	ldrb	r2, [r4, #20]
    ad96:	2d01      	cmp	r5, #1
    ad98:	d00e      	beq.n	adb8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    ad9a:	f000 fd93 	bl	b8c4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ad9e:	6120      	str	r0, [r4, #16]
    ada0:	4808      	ldr	r0, [pc, #32]	; (adc4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    ada2:	2100      	movs	r1, #0
    ada4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    ada8:	6921      	ldr	r1, [r4, #16]
    adaa:	69e0      	ldr	r0, [r4, #28]
    adac:	4408      	add	r0, r1
    adae:	4905      	ldr	r1, [pc, #20]	; (adc4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    adb0:	1d09      	adds	r1, r1, #4
    adb2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    adb6:	bd70      	pop	{r4, r5, r6, pc}
    adb8:	f000 fda2 	bl	b900 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    adbc:	e7ef      	b.n	ad9e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    adbe:	0000      	.short	0x0000
    adc0:	20001360 	.word	0x20001360
    adc4:	40008000 	.word	0x40008000

0000adc8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    adc8:	b510      	push	{r4, lr}
    adca:	f001 fb42 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    adce:	2800      	cmp	r0, #0
    add0:	d006      	beq.n	ade0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    add2:	4804      	ldr	r0, [pc, #16]	; (ade4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    add4:	6801      	ldr	r1, [r0, #0]
    add6:	f021 0101 	bic.w	r1, r1, #1
    adda:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    adde:	6001      	str	r1, [r0, #0]
    ade0:	bd10      	pop	{r4, pc}
    ade2:	0000      	.short	0x0000
    ade4:	40001774 	.word	0x40001774

0000ade8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    ade8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adec:	2238      	movs	r2, #56	; 0x38
    adee:	2100      	movs	r1, #0
    adf0:	4813      	ldr	r0, [pc, #76]	; (ae40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    adf2:	f001 fbcc 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    adf6:	f000 fcad 	bl	b754 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    adfa:	f001 fae3 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    adfe:	4d11      	ldr	r5, [pc, #68]	; (ae44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ae00:	4e10      	ldr	r6, [pc, #64]	; (ae44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ae02:	2400      	movs	r4, #0
    ae04:	4f0f      	ldr	r7, [pc, #60]	; (ae44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ae06:	3508      	adds	r5, #8
    ae08:	3610      	adds	r6, #16
    ae0a:	b928      	cbnz	r0, ae18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ae0c:	f001 faf1 	bl	c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ae10:	b910      	cbnz	r0, ae18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ae12:	f001 faf8 	bl	c406 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    ae16:	b108      	cbz	r0, ae1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    ae18:	2224      	movs	r2, #36	; 0x24
    ae1a:	e006      	b.n	ae2a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ae1c:	f001 fb33 	bl	c486 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ae20:	b910      	cbnz	r0, ae28 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    ae22:	f001 fb26 	bl	c472 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    ae26:	b140      	cbz	r0, ae3a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    ae28:	2240      	movs	r2, #64	; 0x40
    ae2a:	21ff      	movs	r1, #255	; 0xff
    ae2c:	4638      	mov	r0, r7
    ae2e:	f001 fbae 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ae32:	602c      	str	r4, [r5, #0]
    ae34:	6034      	str	r4, [r6, #0]
    ae36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae3a:	2238      	movs	r2, #56	; 0x38
    ae3c:	e7f5      	b.n	ae2a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ae3e:	0000      	.short	0x0000
    ae40:	20001360 	.word	0x20001360
    ae44:	40000e00 	.word	0x40000e00

0000ae48 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    ae48:	4801      	ldr	r0, [pc, #4]	; (ae50 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    ae4a:	69c0      	ldr	r0, [r0, #28]
    ae4c:	4770      	bx	lr
    ae4e:	0000      	.short	0x0000
    ae50:	20001360 	.word	0x20001360

0000ae54 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ae54:	4801      	ldr	r0, [pc, #4]	; (ae5c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    ae56:	6980      	ldr	r0, [r0, #24]
    ae58:	4770      	bx	lr
    ae5a:	0000      	.short	0x0000
    ae5c:	20001360 	.word	0x20001360

0000ae60 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ae60:	b510      	push	{r4, lr}
    ae62:	f000 fc2b 	bl	b6bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    ae66:	f7ff fe69 	bl	ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ae6a:	f7f9 fa31 	bl	42d0 <mpsl_fem_disable>
    ae6e:	b130      	cbz	r0, ae7e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    ae70:	1c40      	adds	r0, r0, #1
    ae72:	d004      	beq.n	ae7e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    ae74:	f240 516d 	movw	r1, #1389	; 0x56d
    ae78:	203e      	movs	r0, #62	; 0x3e
    ae7a:	f7f9 fb77 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae7e:	480f      	ldr	r0, [pc, #60]	; (aebc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    ae80:	4a0f      	ldr	r2, [pc, #60]	; (aec0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    ae82:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ae84:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    ae88:	6011      	str	r1, [r2, #0]
    ae8a:	2400      	movs	r4, #0
    ae8c:	6284      	str	r4, [r0, #40]	; 0x28
    ae8e:	7304      	strb	r4, [r0, #12]
    ae90:	61c4      	str	r4, [r0, #28]
    ae92:	6184      	str	r4, [r0, #24]
    ae94:	f000 fc12 	bl	b6bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    ae98:	480a      	ldr	r0, [pc, #40]	; (aec4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    ae9a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    ae9e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    aea2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    aea6:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    aeaa:	2001      	movs	r0, #1
    aeac:	f005 fc07 	bl	106be <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    aeb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aeb4:	2001      	movs	r0, #1
    aeb6:	f005 bbf5 	b.w	106a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    aeba:	0000      	.short	0x0000
    aebc:	20001360 	.word	0x20001360
    aec0:	4001f508 	.word	0x4001f508
    aec4:	40008000 	.word	0x40008000

0000aec8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    aec8:	b570      	push	{r4, r5, r6, lr}
    aeca:	2001      	movs	r0, #1
    aecc:	f005 fbf7 	bl	106be <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    aed0:	4c37      	ldr	r4, [pc, #220]	; (afb0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    aed2:	2000      	movs	r0, #0
    aed4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    aed8:	2001      	movs	r0, #1
    aeda:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    aede:	f001 faa8 	bl	c432 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    aee2:	4d34      	ldr	r5, [pc, #208]	; (afb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aee4:	b118      	cbz	r0, aeee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    aee6:	6828      	ldr	r0, [r5, #0]
    aee8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    aeec:	6028      	str	r0, [r5, #0]
    aeee:	f001 fa94 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    aef2:	b128      	cbz	r0, af00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    aef4:	6828      	ldr	r0, [r5, #0]
    aef6:	4930      	ldr	r1, [pc, #192]	; (afb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    aef8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    aefc:	4308      	orrs	r0, r1
    aefe:	6028      	str	r0, [r5, #0]
    af00:	f001 faa7 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    af04:	b138      	cbz	r0, af16 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    af06:	482b      	ldr	r0, [pc, #172]	; (afb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    af08:	1d00      	adds	r0, r0, #4
    af0a:	6801      	ldr	r1, [r0, #0]
    af0c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    af10:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    af14:	6001      	str	r1, [r0, #0]
    af16:	4927      	ldr	r1, [pc, #156]	; (afb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    af18:	4828      	ldr	r0, [pc, #160]	; (afbc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    af1a:	313c      	adds	r1, #60	; 0x3c
    af1c:	6008      	str	r0, [r1, #0]
    af1e:	f7f9 fa0d 	bl	433c <mpsl_fem_device_config_254_apply_get>
    af22:	b140      	cbz	r0, af36 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    af24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    af28:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    af2c:	1c41      	adds	r1, r0, #1
    af2e:	d002      	beq.n	af36 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    af30:	4920      	ldr	r1, [pc, #128]	; (afb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    af32:	3110      	adds	r1, #16
    af34:	6008      	str	r0, [r1, #0]
    af36:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    af3a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    af3c:	1c41      	adds	r1, r0, #1
    af3e:	d004      	beq.n	af4a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    af40:	491f      	ldr	r1, [pc, #124]	; (afc0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    af42:	680a      	ldr	r2, [r1, #0]
    af44:	f360 4217 	bfi	r2, r0, #16, #8
    af48:	600a      	str	r2, [r1, #0]
    af4a:	f240 1103 	movw	r1, #259	; 0x103
    af4e:	f240 605b 	movw	r0, #1627	; 0x65b
    af52:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    af56:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    af5a:	2001      	movs	r0, #1
    af5c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    af60:	f000 f842 	bl	afe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    af64:	f240 2001 	movw	r0, #513	; 0x201
    af68:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    af6c:	2002      	movs	r0, #2
    af6e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    af72:	4914      	ldr	r1, [pc, #80]	; (afc4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    af74:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    af78:	6008      	str	r0, [r1, #0]
    af7a:	4913      	ldr	r1, [pc, #76]	; (afc8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    af7c:	2000      	movs	r0, #0
    af7e:	4d13      	ldr	r5, [pc, #76]	; (afcc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    af80:	8608      	strh	r0, [r1, #48]	; 0x30
    af82:	3110      	adds	r1, #16
    af84:	61c8      	str	r0, [r1, #28]
    af86:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    af8a:	7028      	strb	r0, [r5, #0]
    af8c:	2001      	movs	r0, #1
    af8e:	f005 fb89 	bl	106a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    af92:	2010      	movs	r0, #16
    af94:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    af98:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    af9c:	2002      	movs	r0, #2
    af9e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    afa2:	6868      	ldr	r0, [r5, #4]
    afa4:	2800      	cmp	r0, #0
    afa6:	d002      	beq.n	afae <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    afa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    afac:	4700      	bx	r0
    afae:	bd70      	pop	{r4, r5, r6, pc}
    afb0:	40001000 	.word	0x40001000
    afb4:	4000173c 	.word	0x4000173c
    afb8:	80000096 	.word	0x80000096
    afbc:	8900002c 	.word	0x8900002c
    afc0:	4000158c 	.word	0x4000158c
    afc4:	4001f504 	.word	0x4001f504
    afc8:	20001350 	.word	0x20001350
    afcc:	20000320 	.word	0x20000320

0000afd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    afd0:	4901      	ldr	r1, [pc, #4]	; (afd8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    afd2:	7548      	strb	r0, [r1, #21]
    afd4:	4770      	bx	lr
    afd6:	0000      	.short	0x0000
    afd8:	20001360 	.word	0x20001360

0000afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    afdc:	4901      	ldr	r1, [pc, #4]	; (afe4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    afde:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    afe2:	4770      	bx	lr
    afe4:	0000b8a0 	.word	0x0000b8a0

0000afe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    afe8:	4908      	ldr	r1, [pc, #32]	; (b00c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    afea:	b510      	push	{r4, lr}
    afec:	7508      	strb	r0, [r1, #20]
    afee:	4908      	ldr	r1, [pc, #32]	; (b010 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    aff0:	2801      	cmp	r0, #1
    aff2:	d006      	beq.n	b002 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    aff4:	2802      	cmp	r0, #2
    aff6:	d006      	beq.n	b006 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    aff8:	f640 5169 	movw	r1, #3433	; 0xd69
    affc:	203e      	movs	r0, #62	; 0x3e
    affe:	f7f9 fab5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b002:	2003      	movs	r0, #3
    b004:	e000      	b.n	b008 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    b006:	2004      	movs	r0, #4
    b008:	6008      	str	r0, [r1, #0]
    b00a:	bd10      	pop	{r4, pc}
    b00c:	20001360 	.word	0x20001360
    b010:	40001510 	.word	0x40001510

0000b014 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b014:	4905      	ldr	r1, [pc, #20]	; (b02c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b016:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    b01a:	4805      	ldr	r0, [pc, #20]	; (b030 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    b01c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    b020:	f041 0101 	orr.w	r1, r1, #1
    b024:	7001      	strb	r1, [r0, #0]
    b026:	f000 ba3b 	b.w	b4a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b02a:	0000      	.short	0x0000
    b02c:	40001000 	.word	0x40001000
    b030:	20001360 	.word	0x20001360

0000b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    b034:	4901      	ldr	r1, [pc, #4]	; (b03c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    b036:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b03a:	4770      	bx	lr
    b03c:	0000b8ac 	.word	0x0000b8ac

0000b040 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b044:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b0e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    b048:	4d28      	ldr	r5, [pc, #160]	; (b0ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    b04a:	460f      	mov	r7, r1
    b04c:	0006      	movs	r6, r0
    b04e:	4614      	mov	r4, r2
    b050:	f04f 0801 	mov.w	r8, #1
    b054:	d004      	beq.n	b060 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    b056:	2e01      	cmp	r6, #1
    b058:	d010      	beq.n	b07c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    b05a:	f640 0124 	movw	r1, #2084	; 0x824
    b05e:	e039      	b.n	b0d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    b060:	4610      	mov	r0, r2
    b062:	f000 fbd1 	bl	b808 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b066:	4822      	ldr	r0, [pc, #136]	; (b0f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    b068:	f885 8009 	strb.w	r8, [r5, #9]
    b06c:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    b070:	4638      	mov	r0, r7
    b072:	f000 fb77 	bl	b764 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    b076:	4604      	mov	r4, r0
    b078:	4648      	mov	r0, r9
    b07a:	e00c      	b.n	b096 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    b07c:	4610      	mov	r0, r2
    b07e:	f000 fba9 	bl	b7d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b082:	2002      	movs	r0, #2
    b084:	7268      	strb	r0, [r5, #9]
    b086:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b08a:	4638      	mov	r0, r7
    b08c:	f000 fb6a 	bl	b764 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    b090:	4604      	mov	r4, r0
    b092:	4815      	ldr	r0, [pc, #84]	; (b0e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    b094:	1d00      	adds	r0, r0, #4
    b096:	f000 fb23 	bl	b6e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    b09a:	4f16      	ldr	r7, [pc, #88]	; (b0f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    b09c:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    b0a0:	4916      	ldr	r1, [pc, #88]	; (b0fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    b0a2:	4815      	ldr	r0, [pc, #84]	; (b0f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    b0a4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b0a8:	2010      	movs	r0, #16
    b0aa:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    b0ae:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    b0b0:	4913      	ldr	r1, [pc, #76]	; (b100 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    b0b2:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b0b6:	62a8      	str	r0, [r5, #40]	; 0x28
    b0b8:	0138      	lsls	r0, r7, #4
    b0ba:	6008      	str	r0, [r1, #0]
    b0bc:	f000 fa2a 	bl	b514 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    b0c0:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    b0c4:	480b      	ldr	r0, [pc, #44]	; (b0f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    b0c6:	300c      	adds	r0, #12
    b0c8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b0cc:	42a0      	cmp	r0, r4
    b0ce:	d304      	bcc.n	b0da <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    b0d0:	f640 013a 	movw	r1, #2106	; 0x83a
    b0d4:	203e      	movs	r0, #62	; 0x3e
    b0d6:	f7f9 fa49 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0da:	4621      	mov	r1, r4
    b0dc:	4630      	mov	r0, r6
    b0de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0e2:	f000 bb09 	b.w	b6f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b0e6:	0000      	.short	0x0000
    b0e8:	40001000 	.word	0x40001000
    b0ec:	20001360 	.word	0x20001360
    b0f0:	0000b84c 	.word	0x0000b84c
    b0f4:	40008000 	.word	0x40008000
    b0f8:	40008140 	.word	0x40008140
    b0fc:	4001f098 	.word	0x4001f098
    b100:	4001f504 	.word	0x4001f504

0000b104 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b104:	4b0d      	ldr	r3, [pc, #52]	; (b13c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    b106:	b510      	push	{r4, lr}
    b108:	71d8      	strb	r0, [r3, #7]
    b10a:	729a      	strb	r2, [r3, #10]
    b10c:	b151      	cbz	r1, b124 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    b10e:	2002      	movs	r0, #2
    b110:	7218      	strb	r0, [r3, #8]
    b112:	2801      	cmp	r0, #1
    b114:	d008      	beq.n	b128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    b116:	2802      	cmp	r0, #2
    b118:	d00f      	beq.n	b13a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b11a:	f640 2145 	movw	r1, #2629	; 0xa45
    b11e:	203e      	movs	r0, #62	; 0x3e
    b120:	f7f9 fa24 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b124:	2001      	movs	r0, #1
    b126:	e7f3      	b.n	b110 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    b128:	7a58      	ldrb	r0, [r3, #9]
    b12a:	2802      	cmp	r0, #2
    b12c:	d105      	bne.n	b13a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b12e:	f000 f97b 	bl	b428 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    b132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b136:	f000 baa9 	b.w	b68c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    b13a:	bd10      	pop	{r4, pc}
    b13c:	20001360 	.word	0x20001360

0000b140 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    b140:	4902      	ldr	r1, [pc, #8]	; (b14c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    b142:	2000      	movs	r0, #0
    b144:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b148:	4770      	bx	lr
    b14a:	0000      	.short	0x0000
    b14c:	40008000 	.word	0x40008000

0000b150 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b150:	4904      	ldr	r1, [pc, #16]	; (b164 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    b152:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    b156:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    b15a:	4249      	negs	r1, r1
    b15c:	7001      	strb	r1, [r0, #0]
    b15e:	2001      	movs	r0, #1
    b160:	4770      	bx	lr
    b162:	0000      	.short	0x0000
    b164:	40001000 	.word	0x40001000

0000b168 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b168:	4903      	ldr	r1, [pc, #12]	; (b178 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    b16a:	0e02      	lsrs	r2, r0, #24
    b16c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    b170:	0200      	lsls	r0, r0, #8
    b172:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    b176:	4770      	bx	lr
    b178:	40001000 	.word	0x40001000

0000b17c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b17c:	4901      	ldr	r1, [pc, #4]	; (b184 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    b17e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b182:	4770      	bx	lr
    b184:	40001000 	.word	0x40001000

0000b188 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    b188:	b510      	push	{r4, lr}
    b18a:	2200      	movs	r2, #0
    b18c:	2901      	cmp	r1, #1
    b18e:	d006      	beq.n	b19e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    b190:	2902      	cmp	r1, #2
    b192:	d002      	beq.n	b19a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    b194:	f240 21d9 	movw	r1, #729	; 0x2d9
    b198:	e014      	b.n	b1c4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    b19a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b19e:	490b      	ldr	r1, [pc, #44]	; (b1cc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    b1a0:	430a      	orrs	r2, r1
    b1a2:	490b      	ldr	r1, [pc, #44]	; (b1d0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    b1a4:	600a      	str	r2, [r1, #0]
    b1a6:	490b      	ldr	r1, [pc, #44]	; (b1d4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    b1a8:	4308      	orrs	r0, r1
    b1aa:	4909      	ldr	r1, [pc, #36]	; (b1d0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    b1ac:	1d09      	adds	r1, r1, #4
    b1ae:	6008      	str	r0, [r1, #0]
    b1b0:	4809      	ldr	r0, [pc, #36]	; (b1d8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    b1b2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b1b6:	b2c0      	uxtb	r0, r0
    b1b8:	2803      	cmp	r0, #3
    b1ba:	d001      	beq.n	b1c0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    b1bc:	280b      	cmp	r0, #11
    b1be:	d104      	bne.n	b1ca <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    b1c0:	f240 21f1 	movw	r1, #753	; 0x2f1
    b1c4:	203e      	movs	r0, #62	; 0x3e
    b1c6:	f7f9 f9d1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1ca:	bd10      	pop	{r4, pc}
    b1cc:	00100108 	.word	0x00100108
    b1d0:	40001514 	.word	0x40001514
    b1d4:	02030000 	.word	0x02030000
    b1d8:	40001000 	.word	0x40001000

0000b1dc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b1dc:	4901      	ldr	r1, [pc, #4]	; (b1e4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b1de:	7588      	strb	r0, [r1, #22]
    b1e0:	4770      	bx	lr
    b1e2:	0000      	.short	0x0000
    b1e4:	20001360 	.word	0x20001360

0000b1e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1ec:	4852      	ldr	r0, [pc, #328]	; (b338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b1ee:	f04f 0a01 	mov.w	sl, #1
    b1f2:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    b1f6:	4850      	ldr	r0, [pc, #320]	; (b338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b1f8:	300c      	adds	r0, #12
    b1fa:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    b1fe:	f000 ffde 	bl	c1be <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    b202:	4c4e      	ldr	r4, [pc, #312]	; (b33c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b204:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    b208:	f000 f918 	bl	b43c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    b20c:	494c      	ldr	r1, [pc, #304]	; (b340 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    b20e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b210:	6008      	str	r0, [r1, #0]
    b212:	f8df 9130 	ldr.w	r9, [pc, #304]	; b344 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b216:	2000      	movs	r0, #0
    b218:	62a0      	str	r0, [r4, #40]	; 0x28
    b21a:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    b21e:	f240 131d 	movw	r3, #285	; 0x11d
    b222:	439a      	bics	r2, r3
    b224:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    b228:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b22c:	f000 f986 	bl	b53c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    b230:	4605      	mov	r5, r0
    b232:	4841      	ldr	r0, [pc, #260]	; (b338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b234:	3008      	adds	r0, #8
    b236:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b23a:	4e3f      	ldr	r6, [pc, #252]	; (b338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b23c:	61e0      	str	r0, [r4, #28]
    b23e:	1d36      	adds	r6, r6, #4
    b240:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    b244:	61a0      	str	r0, [r4, #24]
    b246:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b24a:	7d21      	ldrb	r1, [r4, #20]
    b24c:	f884 1020 	strb.w	r1, [r4, #32]
    b250:	7a61      	ldrb	r1, [r4, #9]
    b252:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b256:	46a0      	mov	r8, r4
    b258:	2400      	movs	r4, #0
    b25a:	4639      	mov	r1, r7
    b25c:	4628      	mov	r0, r5
    b25e:	f000 f9e1 	bl	b624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    b262:	b910      	cbnz	r0, b26a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    b264:	f8c9 a010 	str.w	sl, [r9, #16]
    b268:	2401      	movs	r4, #1
    b26a:	4f34      	ldr	r7, [pc, #208]	; (b33c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b26c:	07e8      	lsls	r0, r5, #31
    b26e:	f1a7 0710 	sub.w	r7, r7, #16
    b272:	d002      	beq.n	b27a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    b274:	6838      	ldr	r0, [r7, #0]
    b276:	4780      	blx	r0
    b278:	e032      	b.n	b2e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    b27a:	07a8      	lsls	r0, r5, #30
    b27c:	d527      	bpl.n	b2ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    b27e:	0768      	lsls	r0, r5, #29
    b280:	d41f      	bmi.n	b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b282:	f001 f8e6 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b286:	b9e0      	cbnz	r0, b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b288:	f001 f8d3 	bl	c432 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b28c:	b9c8      	cbnz	r0, b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b28e:	482e      	ldr	r0, [pc, #184]	; (b348 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b290:	6800      	ldr	r0, [r0, #0]
    b292:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    b296:	f3c0 5142 	ubfx	r1, r0, #21, #3
    b29a:	f000 030f 	and.w	r3, r0, #15
    b29e:	f3c0 1203 	ubfx	r2, r0, #4, #4
    b2a2:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b2a6:	f1bc 0f00 	cmp.w	ip, #0
    b2aa:	d00a      	beq.n	b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b2ac:	b10b      	cbz	r3, b2b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    b2ae:	b102      	cbz	r2, b2b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    b2b0:	b938      	cbnz	r0, b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b2b2:	4825      	ldr	r0, [pc, #148]	; (b348 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b2b4:	1d00      	adds	r0, r0, #4
    b2b6:	6800      	ldr	r0, [r0, #0]
    b2b8:	b118      	cbz	r0, b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b2ba:	2903      	cmp	r1, #3
    b2bc:	d201      	bcs.n	b2c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b2be:	f045 0504 	orr.w	r5, r5, #4
    b2c2:	f345 0080 	sbfx	r0, r5, #2, #1
    b2c6:	4621      	mov	r1, r4
    b2c8:	1c40      	adds	r0, r0, #1
    b2ca:	687a      	ldr	r2, [r7, #4]
    b2cc:	e007      	b.n	b2de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    b2ce:	f015 0f28 	tst.w	r5, #40	; 0x28
    b2d2:	d005      	beq.n	b2e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    b2d4:	f345 1140 	sbfx	r1, r5, #5, #1
    b2d8:	68ba      	ldr	r2, [r7, #8]
    b2da:	4620      	mov	r0, r4
    b2dc:	1c49      	adds	r1, r1, #1
    b2de:	4790      	blx	r2
    b2e0:	06e8      	lsls	r0, r5, #27
    b2e2:	d501      	bpl.n	b2e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    b2e4:	68f8      	ldr	r0, [r7, #12]
    b2e6:	4780      	blx	r0
    b2e8:	f898 1009 	ldrb.w	r1, [r8, #9]
    b2ec:	4640      	mov	r0, r8
    b2ee:	2902      	cmp	r1, #2
    b2f0:	d120      	bne.n	b334 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    b2f2:	7b01      	ldrb	r1, [r0, #12]
    b2f4:	2900      	cmp	r1, #0
    b2f6:	d01d      	beq.n	b334 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    b2f8:	2902      	cmp	r1, #2
    b2fa:	d004      	beq.n	b306 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    b2fc:	2901      	cmp	r1, #1
    b2fe:	d009      	beq.n	b314 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    b300:	f640 4148 	movw	r1, #3144	; 0xc48
    b304:	e00d      	b.n	b322 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    b306:	69c1      	ldr	r1, [r0, #28]
    b308:	f8d8 0010 	ldr.w	r0, [r8, #16]
    b30c:	4408      	add	r0, r1
    b30e:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b312:	e00b      	b.n	b32c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    b314:	6901      	ldr	r1, [r0, #16]
    b316:	f8d8 001c 	ldr.w	r0, [r8, #28]
    b31a:	4281      	cmp	r1, r0
    b31c:	d804      	bhi.n	b328 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    b31e:	f640 4149 	movw	r1, #3145	; 0xc49
    b322:	203e      	movs	r0, #62	; 0x3e
    b324:	f7f9 f922 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b328:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    b32c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b330:	f000 b9b6 	b.w	b6a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b338:	40008000 	.word	0x40008000
    b33c:	20001360 	.word	0x20001360
    b340:	4001f508 	.word	0x4001f508
    b344:	40001000 	.word	0x40001000
    b348:	40001450 	.word	0x40001450

0000b34c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b34c:	b570      	push	{r4, r5, r6, lr}
    b34e:	4b16      	ldr	r3, [pc, #88]	; (b3a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    b350:	888c      	ldrh	r4, [r1, #4]
    b352:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    b356:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    b35a:	780c      	ldrb	r4, [r1, #0]
    b35c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b360:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b364:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    b368:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    b36c:	2401      	movs	r4, #1
    b36e:	4084      	lsls	r4, r0
    b370:	b2c9      	uxtb	r1, r1
    b372:	b2e5      	uxtb	r5, r4
    b374:	4329      	orrs	r1, r5
    b376:	b132      	cbz	r2, b386 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b378:	2a01      	cmp	r2, #1
    b37a:	d00a      	beq.n	b392 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    b37c:	f240 51d4 	movw	r1, #1492	; 0x5d4
    b380:	203e      	movs	r0, #62	; 0x3e
    b382:	f7f9 f8f3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b386:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b38a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b38e:	43a0      	bics	r0, r4
    b390:	e004      	b.n	b39c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b392:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b396:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b39a:	4328      	orrs	r0, r5
    b39c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b3a0:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b3a4:	bd70      	pop	{r4, r5, r6, pc}
    b3a6:	0000      	.short	0x0000
    b3a8:	40001000 	.word	0x40001000

0000b3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    b3ac:	4901      	ldr	r1, [pc, #4]	; (b3b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    b3ae:	2001      	movs	r0, #1
    b3b0:	7008      	strb	r0, [r1, #0]
    b3b2:	4770      	bx	lr
    b3b4:	20000320 	.word	0x20000320
    b3b8:	480b      	ldr	r0, [pc, #44]	; (b3e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    b3ba:	7d81      	ldrb	r1, [r0, #22]
    b3bc:	480b      	ldr	r0, [pc, #44]	; (b3ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    b3be:	5c40      	ldrb	r0, [r0, r1]
    b3c0:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    b3c4:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    b3c8:	d204      	bcs.n	b3d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    b3ca:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    b3ce:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b3d2:	e001      	b.n	b3d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    b3d4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    b3d8:	4a05      	ldr	r2, [pc, #20]	; (b3f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    b3da:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    b3de:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    b3e2:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    b3e6:	4770      	bx	lr
    b3e8:	20001360 	.word	0x20001360
    b3ec:	0000b852 	.word	0x0000b852
    b3f0:	40001000 	.word	0x40001000
    b3f4:	b508      	push	{r3, lr}
    b3f6:	490b      	ldr	r1, [pc, #44]	; (b424 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    b3f8:	466b      	mov	r3, sp
    b3fa:	f991 2015 	ldrsb.w	r2, [r1, #21]
    b3fe:	7d89      	ldrb	r1, [r1, #22]
    b400:	f000 faca 	bl	b998 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    b404:	f99d 0000 	ldrsb.w	r0, [sp]
    b408:	f000 fa9a 	bl	b940 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b40c:	f10d 0001 	add.w	r0, sp, #1
    b410:	f7f8 ff82 	bl	4318 <mpsl_fem_pa_gain_set>
    b414:	2800      	cmp	r0, #0
    b416:	d004      	beq.n	b422 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    b418:	f240 6115 	movw	r1, #1557	; 0x615
    b41c:	203e      	movs	r0, #62	; 0x3e
    b41e:	f7f9 f8a5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b422:	bd08      	pop	{r3, pc}
    b424:	20001360 	.word	0x20001360
    b428:	4803      	ldr	r0, [pc, #12]	; (b438 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    b42a:	7a01      	ldrb	r1, [r0, #8]
    b42c:	2901      	cmp	r1, #1
    b42e:	d102      	bne.n	b436 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    b430:	7a80      	ldrb	r0, [r0, #10]
    b432:	f7ff bfdf 	b.w	b3f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    b436:	4770      	bx	lr
    b438:	20001360 	.word	0x20001360
    b43c:	480d      	ldr	r0, [pc, #52]	; (b474 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    b43e:	b510      	push	{r4, lr}
    b440:	7a40      	ldrb	r0, [r0, #9]
    b442:	2801      	cmp	r0, #1
    b444:	d00c      	beq.n	b460 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    b446:	2802      	cmp	r0, #2
    b448:	d113      	bne.n	b472 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b44a:	f7f8 ff47 	bl	42dc <mpsl_fem_lna_configuration_clear>
    b44e:	2800      	cmp	r0, #0
    b450:	d00f      	beq.n	b472 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b452:	1c40      	adds	r0, r0, #1
    b454:	d00d      	beq.n	b472 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b456:	f640 01a6 	movw	r1, #2214	; 0x8a6
    b45a:	203e      	movs	r0, #62	; 0x3e
    b45c:	f7f9 f886 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b460:	f7f8 ff4e 	bl	4300 <mpsl_fem_pa_configuration_clear>
    b464:	2800      	cmp	r0, #0
    b466:	d004      	beq.n	b472 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b468:	1c40      	adds	r0, r0, #1
    b46a:	d002      	beq.n	b472 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b46c:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    b470:	e7f3      	b.n	b45a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    b472:	bd10      	pop	{r4, pc}
    b474:	20001360 	.word	0x20001360
    b478:	4808      	ldr	r0, [pc, #32]	; (b49c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    b47a:	2100      	movs	r1, #0
    b47c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b480:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b484:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b488:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b48c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b490:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b494:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b498:	4770      	bx	lr
    b49a:	0000      	.short	0x0000
    b49c:	40001000 	.word	0x40001000
    b4a0:	4818      	ldr	r0, [pc, #96]	; (b504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    b4a2:	b510      	push	{r4, lr}
    b4a4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b4a8:	07c1      	lsls	r1, r0, #31
    b4aa:	d029      	beq.n	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b4ac:	0781      	lsls	r1, r0, #30
    b4ae:	d514      	bpl.n	b4da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    b4b0:	4815      	ldr	r0, [pc, #84]	; (b508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    b4b2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b4b6:	f041 0101 	orr.w	r1, r1, #1
    b4ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b4be:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b4c2:	b2c0      	uxtb	r0, r0
    b4c4:	280b      	cmp	r0, #11
    b4c6:	d005      	beq.n	b4d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b4c8:	280a      	cmp	r0, #10
    b4ca:	d003      	beq.n	b4d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b4cc:	2803      	cmp	r0, #3
    b4ce:	d001      	beq.n	b4d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b4d0:	2802      	cmp	r0, #2
    b4d2:	d115      	bne.n	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b4d4:	f240 613e 	movw	r1, #1598	; 0x63e
    b4d8:	e00f      	b.n	b4fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    b4da:	0740      	lsls	r0, r0, #29
    b4dc:	d510      	bpl.n	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b4de:	480a      	ldr	r0, [pc, #40]	; (b508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    b4e0:	490a      	ldr	r1, [pc, #40]	; (b50c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    b4e2:	3008      	adds	r0, #8
    b4e4:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b4e8:	f44f 71a0 	mov.w	r1, #320	; 0x140
    b4ec:	4808      	ldr	r0, [pc, #32]	; (b510 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    b4ee:	f005 f8fc 	bl	106ea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    b4f2:	2800      	cmp	r0, #0
    b4f4:	d004      	beq.n	b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b4f6:	f240 6146 	movw	r1, #1606	; 0x646
    b4fa:	203e      	movs	r0, #62	; 0x3e
    b4fc:	f7f9 f836 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b500:	bd10      	pop	{r4, pc}
    b502:	0000      	.short	0x0000
    b504:	20001360 	.word	0x20001360
    b508:	40001000 	.word	0x40001000
    b50c:	4001f098 	.word	0x4001f098
    b510:	40008000 	.word	0x40008000
    b514:	4808      	ldr	r0, [pc, #32]	; (b538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    b516:	4601      	mov	r1, r0
    b518:	79c2      	ldrb	r2, [r0, #7]
    b51a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    b51e:	b112      	cbz	r2, b526 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    b520:	2a01      	cmp	r2, #1
    b522:	d003      	beq.n	b52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    b524:	e006      	b.n	b534 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    b526:	f041 0102 	orr.w	r1, r1, #2
    b52a:	e001      	b.n	b530 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    b52c:	f041 0104 	orr.w	r1, r1, #4
    b530:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    b534:	f7ff bfb4 	b.w	b4a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b538:	20001360 	.word	0x20001360
    b53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b540:	4d34      	ldr	r5, [pc, #208]	; (b614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    b542:	2400      	movs	r4, #0
    b544:	7b28      	ldrb	r0, [r5, #12]
    b546:	b138      	cbz	r0, b558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    b548:	f44f 71a2 	mov.w	r1, #324	; 0x144
    b54c:	4832      	ldr	r0, [pc, #200]	; (b618 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    b54e:	f005 f8cc 	bl	106ea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    b552:	b108      	cbz	r0, b558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    b554:	2601      	movs	r6, #1
    b556:	e000      	b.n	b55a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    b558:	2600      	movs	r6, #0
    b55a:	7a68      	ldrb	r0, [r5, #9]
    b55c:	4f2f      	ldr	r7, [pc, #188]	; (b61c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    b55e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    b562:	2801      	cmp	r0, #1
    b564:	d002      	beq.n	b56c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    b566:	2802      	cmp	r0, #2
    b568:	d006      	beq.n	b578 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b56a:	e016      	b.n	b59a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b56c:	4638      	mov	r0, r7
    b56e:	f005 f8b7 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b572:	b190      	cbz	r0, b59a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b574:	2408      	movs	r4, #8
    b576:	e010      	b.n	b59a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b578:	4638      	mov	r0, r7
    b57a:	f005 f8b1 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b57e:	b100      	cbz	r0, b582 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    b580:	2402      	movs	r4, #2
    b582:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    b586:	43c0      	mvns	r0, r0
    b588:	f340 0000 	sbfx	r0, r0, #0, #1
    b58c:	1c40      	adds	r0, r0, #1
    b58e:	d101      	bne.n	b594 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    b590:	f044 0404 	orr.w	r4, r4, #4
    b594:	b10e      	cbz	r6, b59a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b596:	f044 0401 	orr.w	r4, r4, #1
    b59a:	f014 0f0b 	tst.w	r4, #11
    b59e:	d107      	bne.n	b5b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    b5a0:	f44f 7188 	mov.w	r1, #272	; 0x110
    b5a4:	4638      	mov	r0, r7
    b5a6:	f005 f89b 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b5aa:	b108      	cbz	r0, b5b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    b5ac:	f044 0410 	orr.w	r4, r4, #16
    b5b0:	481b      	ldr	r0, [pc, #108]	; (b620 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    b5b2:	7800      	ldrb	r0, [r0, #0]
    b5b4:	b1f8      	cbz	r0, b5f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    b5b6:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    b5ba:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    b5be:	d007      	beq.n	b5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b5c0:	f44f 718a 	mov.w	r1, #276	; 0x114
    b5c4:	4638      	mov	r0, r7
    b5c6:	f005 f88b 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b5ca:	b108      	cbz	r0, b5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b5cc:	2001      	movs	r0, #1
    b5ce:	e000      	b.n	b5d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    b5d0:	2000      	movs	r0, #0
    b5d2:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    b5d6:	b13e      	cbz	r6, b5e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    b5d8:	f44f 718c 	mov.w	r1, #280	; 0x118
    b5dc:	4638      	mov	r0, r7
    b5de:	f005 f87f 	bl	106e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b5e2:	b108      	cbz	r0, b5e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    b5e4:	2001      	movs	r0, #1
    b5e6:	e000      	b.n	b5ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    b5e8:	2000      	movs	r0, #0
    b5ea:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    b5ee:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    b5f2:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    b5f6:	f7ff ff3f 	bl	b478 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    b5fa:	06e0      	lsls	r0, r4, #27
    b5fc:	d506      	bpl.n	b60c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b5fe:	0720      	lsls	r0, r4, #28
    b600:	d404      	bmi.n	b60c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b602:	7a68      	ldrb	r0, [r5, #9]
    b604:	2801      	cmp	r0, #1
    b606:	d101      	bne.n	b60c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b608:	f044 0420 	orr.w	r4, r4, #32
    b60c:	4620      	mov	r0, r4
    b60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b612:	0000      	.short	0x0000
    b614:	20001360 	.word	0x20001360
    b618:	40008000 	.word	0x40008000
    b61c:	40001000 	.word	0x40001000
    b620:	20000320 	.word	0x20000320
    b624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b628:	4c17      	ldr	r4, [pc, #92]	; (b688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    b62a:	460d      	mov	r5, r1
    b62c:	7a21      	ldrb	r1, [r4, #8]
    b62e:	b129      	cbz	r1, b63c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    b630:	f010 0f11 	tst.w	r0, #17
    b634:	d007      	beq.n	b646 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    b636:	f7ff fa81 	bl	ab3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b63a:	e023      	b.n	b684 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    b63c:	f000 f88a 	bl	b754 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b640:	2000      	movs	r0, #0
    b642:	7320      	strb	r0, [r4, #12]
    b644:	e01e      	b.n	b684 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    b646:	2901      	cmp	r1, #1
    b648:	d001      	beq.n	b64e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    b64a:	2601      	movs	r6, #1
    b64c:	e000      	b.n	b650 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    b64e:	2600      	movs	r6, #0
    b650:	79e0      	ldrb	r0, [r4, #7]
    b652:	2801      	cmp	r0, #1
    b654:	d00e      	beq.n	b674 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    b656:	2700      	movs	r7, #0
    b658:	f000 f87c 	bl	b754 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b65c:	2196      	movs	r1, #150	; 0x96
    b65e:	4630      	mov	r0, r6
    b660:	f000 f88e 	bl	b780 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    b664:	4601      	mov	r1, r0
    b666:	b14f      	cbz	r7, b67c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    b668:	353b      	adds	r5, #59	; 0x3b
    b66a:	428d      	cmp	r5, r1
    b66c:	d904      	bls.n	b678 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    b66e:	2000      	movs	r0, #0
    b670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b674:	2701      	movs	r7, #1
    b676:	e7ef      	b.n	b658 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    b678:	2001      	movs	r0, #1
    b67a:	71e0      	strb	r0, [r4, #7]
    b67c:	7aa2      	ldrb	r2, [r4, #10]
    b67e:	4630      	mov	r0, r6
    b680:	f7ff fcde 	bl	b040 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b684:	2001      	movs	r0, #1
    b686:	e7f3      	b.n	b670 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    b688:	20001360 	.word	0x20001360
    b68c:	4803      	ldr	r0, [pc, #12]	; (b69c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    b68e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b692:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b696:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b69a:	4770      	bx	lr
    b69c:	40001000 	.word	0x40001000
    b6a0:	4804      	ldr	r0, [pc, #16]	; (b6b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    b6a2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b6a4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b6a8:	6281      	str	r1, [r0, #40]	; 0x28
    b6aa:	4903      	ldr	r1, [pc, #12]	; (b6b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    b6ac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b6b0:	6008      	str	r0, [r1, #0]
    b6b2:	4770      	bx	lr
    b6b4:	20001360 	.word	0x20001360
    b6b8:	4001f504 	.word	0x4001f504
    b6bc:	4a07      	ldr	r2, [pc, #28]	; (b6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b6be:	2000      	movs	r0, #0
    b6c0:	3208      	adds	r2, #8
    b6c2:	4906      	ldr	r1, [pc, #24]	; (b6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b6c4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b6c8:	1d0a      	adds	r2, r1, #4
    b6ca:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b6ce:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b6d2:	4902      	ldr	r1, [pc, #8]	; (b6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b6d4:	310c      	adds	r1, #12
    b6d6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b6da:	4770      	bx	lr
    b6dc:	40008000 	.word	0x40008000
    b6e0:	4903      	ldr	r1, [pc, #12]	; (b6f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    b6e2:	79c9      	ldrb	r1, [r1, #7]
    b6e4:	2900      	cmp	r1, #0
    b6e6:	d102      	bne.n	b6ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    b6e8:	4902      	ldr	r1, [pc, #8]	; (b6f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    b6ea:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b6ee:	4770      	bx	lr
    b6f0:	20001360 	.word	0x20001360
    b6f4:	4001f098 	.word	0x4001f098
    b6f8:	b510      	push	{r4, lr}
    b6fa:	4a14      	ldr	r2, [pc, #80]	; (b74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b6fc:	b120      	cbz	r0, b708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    b6fe:	2801      	cmp	r0, #1
    b700:	d011      	beq.n	b726 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    b702:	f44f 61ec 	mov.w	r1, #1888	; 0x760
    b706:	e01c      	b.n	b742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    b708:	f101 0028 	add.w	r0, r1, #40	; 0x28
    b70c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    b710:	490f      	ldr	r1, [pc, #60]	; (b750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    b712:	480e      	ldr	r0, [pc, #56]	; (b74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b714:	f7f8 fdfa 	bl	430c <mpsl_fem_pa_configuration_set>
    b718:	2800      	cmp	r0, #0
    b71a:	d015      	beq.n	b748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b71c:	1c40      	adds	r0, r0, #1
    b71e:	d013      	beq.n	b748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b720:	f240 714f 	movw	r1, #1871	; 0x74f
    b724:	e00d      	b.n	b742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    b726:	f101 0029 	add.w	r0, r1, #41	; 0x29
    b72a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    b72e:	4908      	ldr	r1, [pc, #32]	; (b750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    b730:	4806      	ldr	r0, [pc, #24]	; (b74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b732:	f7f8 fdd9 	bl	42e8 <mpsl_fem_lna_configuration_set>
    b736:	2800      	cmp	r0, #0
    b738:	d006      	beq.n	b748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b73a:	1c40      	adds	r0, r0, #1
    b73c:	d004      	beq.n	b748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b73e:	f240 715c 	movw	r1, #1884	; 0x75c
    b742:	203e      	movs	r0, #62	; 0x3e
    b744:	f7f8 ff12 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b748:	bd10      	pop	{r4, pc}
    b74a:	0000      	.short	0x0000
    b74c:	20000328 	.word	0x20000328
    b750:	0000b87c 	.word	0x0000b87c
    b754:	4802      	ldr	r0, [pc, #8]	; (b760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    b756:	2100      	movs	r1, #0
    b758:	71c1      	strb	r1, [r0, #7]
    b75a:	7201      	strb	r1, [r0, #8]
    b75c:	7241      	strb	r1, [r0, #9]
    b75e:	4770      	bx	lr
    b760:	20001360 	.word	0x20001360
    b764:	4a05      	ldr	r2, [pc, #20]	; (b77c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    b766:	79d2      	ldrb	r2, [r2, #7]
    b768:	2a01      	cmp	r2, #1
    b76a:	d006      	beq.n	b77a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    b76c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b770:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b774:	fbb1 f1f2 	udiv	r1, r1, r2
    b778:	1a40      	subs	r0, r0, r1
    b77a:	4770      	bx	lr
    b77c:	20001360 	.word	0x20001360
    b780:	b570      	push	{r4, r5, r6, lr}
    b782:	4c13      	ldr	r4, [pc, #76]	; (b7d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    b784:	4603      	mov	r3, r0
    b786:	460d      	mov	r5, r1
    b788:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b78c:	2000      	movs	r0, #0
    b78e:	b15a      	cbz	r2, b7a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    b790:	4621      	mov	r1, r4
    b792:	f891 1020 	ldrb.w	r1, [r1, #32]
    b796:	b163      	cbz	r3, b7b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    b798:	2b01      	cmp	r3, #1
    b79a:	d111      	bne.n	b7c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    b79c:	2a01      	cmp	r2, #1
    b79e:	4628      	mov	r0, r5
    b7a0:	d012      	beq.n	b7c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    b7a2:	f004 ffa7 	bl	106f4 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b7a6:	e009      	b.n	b7bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b7a8:	f640 0153 	movw	r1, #2131	; 0x853
    b7ac:	203e      	movs	r0, #62	; 0x3e
    b7ae:	f7f8 fedd 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7b2:	2a01      	cmp	r2, #1
    b7b4:	4628      	mov	r0, r5
    b7b6:	d004      	beq.n	b7c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    b7b8:	f004 ffaa 	bl	10710 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b7bc:	69e1      	ldr	r1, [r4, #28]
    b7be:	4408      	add	r0, r1
    b7c0:	bd70      	pop	{r4, r5, r6, pc}
    b7c2:	f000 f8d1 	bl	b968 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b7c6:	e7f9      	b.n	b7bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b7c8:	f000 f8c0 	bl	b94c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b7cc:	e7f6      	b.n	b7bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b7ce:	0000      	.short	0x0000
    b7d0:	20001360 	.word	0x20001360
    b7d4:	b510      	push	{r4, lr}
    b7d6:	f7ff fc07 	bl	afe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b7da:	f7ff fded 	bl	b3b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b7de:	f7ff fe23 	bl	b428 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    b7e2:	f7ff ff53 	bl	b68c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    b7e6:	f000 fe34 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b7ea:	2800      	cmp	r0, #0
    b7ec:	d108      	bne.n	b800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b7ee:	f000 fe20 	bl	c432 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b7f2:	2800      	cmp	r0, #0
    b7f4:	d104      	bne.n	b800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b7f6:	4803      	ldr	r0, [pc, #12]	; (b804 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    b7f8:	6801      	ldr	r1, [r0, #0]
    b7fa:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b7fe:	6001      	str	r1, [r0, #0]
    b800:	bd10      	pop	{r4, pc}
    b802:	0000      	.short	0x0000
    b804:	40001568 	.word	0x40001568
    b808:	b510      	push	{r4, lr}
    b80a:	4604      	mov	r4, r0
    b80c:	f7ff fbec 	bl	afe8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b810:	f7ff fdd2 	bl	b3b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b814:	4620      	mov	r0, r4
    b816:	f7ff fded 	bl	b3f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    b81a:	f000 fe1a 	bl	c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b81e:	2800      	cmp	r0, #0
    b820:	d00d      	beq.n	b83e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    b822:	4a09      	ldr	r2, [pc, #36]	; (b848 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    b824:	6811      	ldr	r1, [r2, #0]
    b826:	0650      	lsls	r0, r2, #25
    b828:	2c02      	cmp	r4, #2
    b82a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b82e:	d007      	beq.n	b840 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    b830:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b834:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b838:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b83c:	6010      	str	r0, [r2, #0]
    b83e:	bd10      	pop	{r4, pc}
    b840:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b844:	e7f6      	b.n	b834 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    b846:	0000      	.short	0x0000
    b848:	40001588 	.word	0x40001588
    b84c:	a62c0000 	.word	0xa62c0000
    b850:	0604a1e0 	.word	0x0604a1e0
    b854:	0e0c0a08 	.word	0x0e0c0a08
    b858:	16141210 	.word	0x16141210
    b85c:	201e1c18 	.word	0x201e1c18
    b860:	28262422 	.word	0x28262422
    b864:	302e2c2a 	.word	0x302e2c2a
    b868:	38363432 	.word	0x38363432
    b86c:	403e3c3a 	.word	0x403e3c3a
    b870:	48464442 	.word	0x48464442
    b874:	024e4c4a 	.word	0x024e4c4a
    b878:	0000501a 	.word	0x0000501a
    b87c:	00000001 	.word	0x00000001
    b880:	40001110 	.word	0x40001110
	...
    b898:	00001e14 	.word	0x00001e14
    b89c:	00001130 	.word	0x00001130
    b8a0:	00000000 	.word	0x00000000
    b8a4:	00000028 	.word	0x00000028
    b8a8:	00000018 	.word	0x00000018
    b8ac:	00000000 	.word	0x00000000
    b8b0:	00001e14 	.word	0x00001e14
    b8b4:	00001130 	.word	0x00001130
    b8b8:	00000000 	.word	0x00000000
    b8bc:	00001770 	.word	0x00001770
    b8c0:	00000fa0 	.word	0x00000fa0

0000b8c4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    b8c4:	b570      	push	{r4, r5, r6, lr}
    b8c6:	4605      	mov	r5, r0
    b8c8:	4614      	mov	r4, r2
    b8ca:	4608      	mov	r0, r1
    b8cc:	f7ff fbb2 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    b8d0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    b8d4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    b8d8:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    b8dc:	4807      	ldr	r0, [pc, #28]	; (b8fc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    b8de:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    b8e2:	4408      	add	r0, r1
    b8e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b8e8:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    b8ec:	fbb0 f5f1 	udiv	r5, r0, r1
    b8f0:	4620      	mov	r0, r4
    b8f2:	f7ff fb73 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b8f6:	4428      	add	r0, r5
    b8f8:	1d40      	adds	r0, r0, #5
    b8fa:	bd70      	pop	{r4, r5, r6, pc}
    b8fc:	0000b98c 	.word	0x0000b98c

0000b900 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    b900:	b570      	push	{r4, r5, r6, lr}
    b902:	4d0e      	ldr	r5, [pc, #56]	; (b93c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    b904:	461c      	mov	r4, r3
    b906:	3d08      	subs	r5, #8
    b908:	4b0c      	ldr	r3, [pc, #48]	; (b93c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    b90a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    b90e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    b912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b916:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    b91a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    b91e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    b922:	4418      	add	r0, r3
    b924:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b928:	fbb0 f5f1 	udiv	r5, r0, r1
    b92c:	4610      	mov	r0, r2
    b92e:	f7ff fb55 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b932:	4428      	add	r0, r5
    b934:	4420      	add	r0, r4
    b936:	1d40      	adds	r0, r0, #5
    b938:	bd70      	pop	{r4, r5, r6, pc}
    b93a:	0000      	.short	0x0000
    b93c:	0000b98c 	.word	0x0000b98c

0000b940 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b940:	4901      	ldr	r1, [pc, #4]	; (b948 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b942:	b2c0      	uxtb	r0, r0
    b944:	6008      	str	r0, [r1, #0]
    b946:	4770      	bx	lr
    b948:	4000150c 	.word	0x4000150c

0000b94c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    b94c:	4a05      	ldr	r2, [pc, #20]	; (b964 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    b94e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    b952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b956:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    b95a:	fbb1 f1f2 	udiv	r1, r1, r2
    b95e:	4408      	add	r0, r1
    b960:	1e80      	subs	r0, r0, #2
    b962:	4770      	bx	lr
    b964:	0000b984 	.word	0x0000b984

0000b968 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    b968:	4a05      	ldr	r2, [pc, #20]	; (b980 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    b96a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    b96e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b972:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    b976:	fbb1 f1f2 	udiv	r1, r1, r2
    b97a:	4408      	add	r0, r1
    b97c:	4770      	bx	lr
    b97e:	0000      	.short	0x0000
    b980:	0000b984 	.word	0x0000b984
    b984:	05dc0000 	.word	0x05dc0000
    b988:	000003e8 	.word	0x000003e8
    b98c:	00000000 	.word	0x00000000
    b990:	00001e14 	.word	0x00001e14
    b994:	00001130 	.word	0x00001130

0000b998 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    b998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b99c:	461e      	mov	r6, r3
    b99e:	4617      	mov	r7, r2
    b9a0:	460c      	mov	r4, r1
    b9a2:	4605      	mov	r5, r0
    b9a4:	f7f4 ff08 	bl	7b8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    b9a8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba50 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    b9ac:	4680      	mov	r8, r0
    b9ae:	f899 0000 	ldrb.w	r0, [r9]
    b9b2:	42a8      	cmp	r0, r5
    b9b4:	d110      	bne.n	b9d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b9b6:	f899 1001 	ldrb.w	r1, [r9, #1]
    b9ba:	4648      	mov	r0, r9
    b9bc:	42a1      	cmp	r1, r4
    b9be:	d10b      	bne.n	b9d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b9c0:	f990 1002 	ldrsb.w	r1, [r0, #2]
    b9c4:	42b9      	cmp	r1, r7
    b9c6:	d107      	bne.n	b9d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b9c8:	78c2      	ldrb	r2, [r0, #3]
    b9ca:	4542      	cmp	r2, r8
    b9cc:	d104      	bne.n	b9d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b9ce:	8881      	ldrh	r1, [r0, #4]
    b9d0:	8031      	strh	r1, [r6, #0]
    b9d2:	7980      	ldrb	r0, [r0, #6]
    b9d4:	70b0      	strb	r0, [r6, #2]
    b9d6:	e036      	b.n	ba46 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    b9d8:	463a      	mov	r2, r7
    b9da:	4621      	mov	r1, r4
    b9dc:	2d01      	cmp	r5, #1
    b9de:	d009      	beq.n	b9f4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    b9e0:	2d02      	cmp	r5, #2
    b9e2:	d009      	beq.n	b9f8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    b9e4:	2d04      	cmp	r5, #4
    b9e6:	d009      	beq.n	b9fc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    b9e8:	2d08      	cmp	r5, #8
    b9ea:	d009      	beq.n	ba00 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    b9ec:	f240 415a 	movw	r1, #1114	; 0x45a
    b9f0:	2006      	movs	r0, #6
    b9f2:	e00c      	b.n	ba0e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    b9f4:	2000      	movs	r0, #0
    b9f6:	e004      	b.n	ba02 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    b9f8:	2001      	movs	r0, #1
    b9fa:	e002      	b.n	ba02 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    b9fc:	2003      	movs	r0, #3
    b9fe:	e000      	b.n	ba02 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    ba00:	2002      	movs	r0, #2
    ba02:	466b      	mov	r3, sp
    ba04:	f7f4 ff28 	bl	858 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    ba08:	b118      	cbz	r0, ba12 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    ba0a:	213d      	movs	r1, #61	; 0x3d
    ba0c:	2075      	movs	r0, #117	; 0x75
    ba0e:	f7f8 fdad 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba12:	4620      	mov	r0, r4
    ba14:	f7ff f88a 	bl	ab2c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    ba18:	4602      	mov	r2, r0
    ba1a:	4631      	mov	r1, r6
    ba1c:	f99d 0000 	ldrsb.w	r0, [sp]
    ba20:	f7f8 fc86 	bl	4330 <mpsl_fem_tx_power_split>
    ba24:	4601      	mov	r1, r0
    ba26:	f889 1007 	strb.w	r1, [r9, #7]
    ba2a:	8831      	ldrh	r1, [r6, #0]
    ba2c:	f8a9 1004 	strh.w	r1, [r9, #4]
    ba30:	78b1      	ldrb	r1, [r6, #2]
    ba32:	f889 1006 	strb.w	r1, [r9, #6]
    ba36:	f889 5000 	strb.w	r5, [r9]
    ba3a:	f889 4001 	strb.w	r4, [r9, #1]
    ba3e:	f889 7002 	strb.w	r7, [r9, #2]
    ba42:	f889 8003 	strb.w	r8, [r9, #3]
    ba46:	f999 0007 	ldrsb.w	r0, [r9, #7]
    ba4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba4e:	0000      	.short	0x0000
    ba50:	20000372 	.word	0x20000372

0000ba54 <__udivmoddi4>:
    ba54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba58:	4686      	mov	lr, r0
    ba5a:	468c      	mov	ip, r1
    ba5c:	4608      	mov	r0, r1
    ba5e:	9e08      	ldr	r6, [sp, #32]
    ba60:	4615      	mov	r5, r2
    ba62:	4674      	mov	r4, lr
    ba64:	4619      	mov	r1, r3
    ba66:	2b00      	cmp	r3, #0
    ba68:	f040 80c2 	bne.w	bbf0 <__udivmoddi4+0x19c>
    ba6c:	4285      	cmp	r5, r0
    ba6e:	fab2 f282 	clz	r2, r2
    ba72:	d945      	bls.n	bb00 <__udivmoddi4+0xac>
    ba74:	b14a      	cbz	r2, ba8a <__udivmoddi4+0x36>
    ba76:	f1c2 0320 	rsb	r3, r2, #32
    ba7a:	fa00 fc02 	lsl.w	ip, r0, r2
    ba7e:	fa2e f303 	lsr.w	r3, lr, r3
    ba82:	4095      	lsls	r5, r2
    ba84:	ea43 0c0c 	orr.w	ip, r3, ip
    ba88:	4094      	lsls	r4, r2
    ba8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ba8e:	b2a8      	uxth	r0, r5
    ba90:	fbbc f8fe 	udiv	r8, ip, lr
    ba94:	0c23      	lsrs	r3, r4, #16
    ba96:	fb0e cc18 	mls	ip, lr, r8, ip
    ba9a:	fb08 f900 	mul.w	r9, r8, r0
    ba9e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    baa2:	4599      	cmp	r9, r3
    baa4:	d928      	bls.n	baf8 <__udivmoddi4+0xa4>
    baa6:	18eb      	adds	r3, r5, r3
    baa8:	f108 37ff 	add.w	r7, r8, #4294967295
    baac:	d204      	bcs.n	bab8 <__udivmoddi4+0x64>
    baae:	4599      	cmp	r9, r3
    bab0:	d902      	bls.n	bab8 <__udivmoddi4+0x64>
    bab2:	f1a8 0702 	sub.w	r7, r8, #2
    bab6:	442b      	add	r3, r5
    bab8:	eba3 0309 	sub.w	r3, r3, r9
    babc:	b2a4      	uxth	r4, r4
    babe:	fbb3 fcfe 	udiv	ip, r3, lr
    bac2:	fb0e 331c 	mls	r3, lr, ip, r3
    bac6:	fb0c f000 	mul.w	r0, ip, r0
    baca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    bace:	42a0      	cmp	r0, r4
    bad0:	d914      	bls.n	bafc <__udivmoddi4+0xa8>
    bad2:	192c      	adds	r4, r5, r4
    bad4:	f10c 33ff 	add.w	r3, ip, #4294967295
    bad8:	d204      	bcs.n	bae4 <__udivmoddi4+0x90>
    bada:	42a0      	cmp	r0, r4
    badc:	d902      	bls.n	bae4 <__udivmoddi4+0x90>
    bade:	f1ac 0302 	sub.w	r3, ip, #2
    bae2:	442c      	add	r4, r5
    bae4:	1a24      	subs	r4, r4, r0
    bae6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    baea:	b11e      	cbz	r6, baf4 <__udivmoddi4+0xa0>
    baec:	40d4      	lsrs	r4, r2
    baee:	2300      	movs	r3, #0
    baf0:	6034      	str	r4, [r6, #0]
    baf2:	6073      	str	r3, [r6, #4]
    baf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    baf8:	4647      	mov	r7, r8
    bafa:	e7dd      	b.n	bab8 <__udivmoddi4+0x64>
    bafc:	4663      	mov	r3, ip
    bafe:	e7f1      	b.n	bae4 <__udivmoddi4+0x90>
    bb00:	bb92      	cbnz	r2, bb68 <__udivmoddi4+0x114>
    bb02:	1b43      	subs	r3, r0, r5
    bb04:	2101      	movs	r1, #1
    bb06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    bb0a:	b2af      	uxth	r7, r5
    bb0c:	fbb3 fcfe 	udiv	ip, r3, lr
    bb10:	0c20      	lsrs	r0, r4, #16
    bb12:	fb0e 331c 	mls	r3, lr, ip, r3
    bb16:	fb0c f807 	mul.w	r8, ip, r7
    bb1a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    bb1e:	4598      	cmp	r8, r3
    bb20:	d962      	bls.n	bbe8 <__udivmoddi4+0x194>
    bb22:	18eb      	adds	r3, r5, r3
    bb24:	f10c 30ff 	add.w	r0, ip, #4294967295
    bb28:	d204      	bcs.n	bb34 <__udivmoddi4+0xe0>
    bb2a:	4598      	cmp	r8, r3
    bb2c:	d902      	bls.n	bb34 <__udivmoddi4+0xe0>
    bb2e:	f1ac 0002 	sub.w	r0, ip, #2
    bb32:	442b      	add	r3, r5
    bb34:	eba3 0308 	sub.w	r3, r3, r8
    bb38:	b2a4      	uxth	r4, r4
    bb3a:	fbb3 fcfe 	udiv	ip, r3, lr
    bb3e:	fb0e 331c 	mls	r3, lr, ip, r3
    bb42:	fb0c f707 	mul.w	r7, ip, r7
    bb46:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    bb4a:	42a7      	cmp	r7, r4
    bb4c:	d94e      	bls.n	bbec <__udivmoddi4+0x198>
    bb4e:	192c      	adds	r4, r5, r4
    bb50:	f10c 33ff 	add.w	r3, ip, #4294967295
    bb54:	d204      	bcs.n	bb60 <__udivmoddi4+0x10c>
    bb56:	42a7      	cmp	r7, r4
    bb58:	d902      	bls.n	bb60 <__udivmoddi4+0x10c>
    bb5a:	f1ac 0302 	sub.w	r3, ip, #2
    bb5e:	442c      	add	r4, r5
    bb60:	1be4      	subs	r4, r4, r7
    bb62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    bb66:	e7c0      	b.n	baea <__udivmoddi4+0x96>
    bb68:	f1c2 0320 	rsb	r3, r2, #32
    bb6c:	fa20 f103 	lsr.w	r1, r0, r3
    bb70:	4095      	lsls	r5, r2
    bb72:	4090      	lsls	r0, r2
    bb74:	fa2e f303 	lsr.w	r3, lr, r3
    bb78:	4303      	orrs	r3, r0
    bb7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    bb7e:	b2af      	uxth	r7, r5
    bb80:	fbb1 fcfe 	udiv	ip, r1, lr
    bb84:	fb0e 101c 	mls	r0, lr, ip, r1
    bb88:	0c19      	lsrs	r1, r3, #16
    bb8a:	fb0c f807 	mul.w	r8, ip, r7
    bb8e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    bb92:	4588      	cmp	r8, r1
    bb94:	fa04 f402 	lsl.w	r4, r4, r2
    bb98:	d922      	bls.n	bbe0 <__udivmoddi4+0x18c>
    bb9a:	1869      	adds	r1, r5, r1
    bb9c:	f10c 30ff 	add.w	r0, ip, #4294967295
    bba0:	d204      	bcs.n	bbac <__udivmoddi4+0x158>
    bba2:	4588      	cmp	r8, r1
    bba4:	d902      	bls.n	bbac <__udivmoddi4+0x158>
    bba6:	f1ac 0002 	sub.w	r0, ip, #2
    bbaa:	4429      	add	r1, r5
    bbac:	eba1 0108 	sub.w	r1, r1, r8
    bbb0:	b29b      	uxth	r3, r3
    bbb2:	fbb1 fcfe 	udiv	ip, r1, lr
    bbb6:	fb0e 111c 	mls	r1, lr, ip, r1
    bbba:	fb0c f707 	mul.w	r7, ip, r7
    bbbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    bbc2:	429f      	cmp	r7, r3
    bbc4:	d90e      	bls.n	bbe4 <__udivmoddi4+0x190>
    bbc6:	18eb      	adds	r3, r5, r3
    bbc8:	f10c 31ff 	add.w	r1, ip, #4294967295
    bbcc:	d204      	bcs.n	bbd8 <__udivmoddi4+0x184>
    bbce:	429f      	cmp	r7, r3
    bbd0:	d902      	bls.n	bbd8 <__udivmoddi4+0x184>
    bbd2:	f1ac 0102 	sub.w	r1, ip, #2
    bbd6:	442b      	add	r3, r5
    bbd8:	1bdb      	subs	r3, r3, r7
    bbda:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    bbde:	e792      	b.n	bb06 <__udivmoddi4+0xb2>
    bbe0:	4660      	mov	r0, ip
    bbe2:	e7e3      	b.n	bbac <__udivmoddi4+0x158>
    bbe4:	4661      	mov	r1, ip
    bbe6:	e7f7      	b.n	bbd8 <__udivmoddi4+0x184>
    bbe8:	4660      	mov	r0, ip
    bbea:	e7a3      	b.n	bb34 <__udivmoddi4+0xe0>
    bbec:	4663      	mov	r3, ip
    bbee:	e7b7      	b.n	bb60 <__udivmoddi4+0x10c>
    bbf0:	4283      	cmp	r3, r0
    bbf2:	d906      	bls.n	bc02 <__udivmoddi4+0x1ae>
    bbf4:	b916      	cbnz	r6, bbfc <__udivmoddi4+0x1a8>
    bbf6:	2100      	movs	r1, #0
    bbf8:	4608      	mov	r0, r1
    bbfa:	e77b      	b.n	baf4 <__udivmoddi4+0xa0>
    bbfc:	e9c6 e000 	strd	lr, r0, [r6]
    bc00:	e7f9      	b.n	bbf6 <__udivmoddi4+0x1a2>
    bc02:	fab3 f783 	clz	r7, r3
    bc06:	b98f      	cbnz	r7, bc2c <__udivmoddi4+0x1d8>
    bc08:	4283      	cmp	r3, r0
    bc0a:	d301      	bcc.n	bc10 <__udivmoddi4+0x1bc>
    bc0c:	4572      	cmp	r2, lr
    bc0e:	d808      	bhi.n	bc22 <__udivmoddi4+0x1ce>
    bc10:	ebbe 0402 	subs.w	r4, lr, r2
    bc14:	eb60 0303 	sbc.w	r3, r0, r3
    bc18:	2001      	movs	r0, #1
    bc1a:	469c      	mov	ip, r3
    bc1c:	b91e      	cbnz	r6, bc26 <__udivmoddi4+0x1d2>
    bc1e:	2100      	movs	r1, #0
    bc20:	e768      	b.n	baf4 <__udivmoddi4+0xa0>
    bc22:	4638      	mov	r0, r7
    bc24:	e7fa      	b.n	bc1c <__udivmoddi4+0x1c8>
    bc26:	e9c6 4c00 	strd	r4, ip, [r6]
    bc2a:	e7f8      	b.n	bc1e <__udivmoddi4+0x1ca>
    bc2c:	f1c7 0c20 	rsb	ip, r7, #32
    bc30:	40bb      	lsls	r3, r7
    bc32:	fa22 f40c 	lsr.w	r4, r2, ip
    bc36:	431c      	orrs	r4, r3
    bc38:	fa2e f10c 	lsr.w	r1, lr, ip
    bc3c:	fa20 f30c 	lsr.w	r3, r0, ip
    bc40:	40b8      	lsls	r0, r7
    bc42:	4301      	orrs	r1, r0
    bc44:	ea4f 4914 	mov.w	r9, r4, lsr #16
    bc48:	fa0e f507 	lsl.w	r5, lr, r7
    bc4c:	fbb3 f8f9 	udiv	r8, r3, r9
    bc50:	fa1f fe84 	uxth.w	lr, r4
    bc54:	fb09 3018 	mls	r0, r9, r8, r3
    bc58:	0c0b      	lsrs	r3, r1, #16
    bc5a:	fb08 fa0e 	mul.w	sl, r8, lr
    bc5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    bc62:	459a      	cmp	sl, r3
    bc64:	fa02 f207 	lsl.w	r2, r2, r7
    bc68:	d940      	bls.n	bcec <__udivmoddi4+0x298>
    bc6a:	18e3      	adds	r3, r4, r3
    bc6c:	f108 30ff 	add.w	r0, r8, #4294967295
    bc70:	d204      	bcs.n	bc7c <__udivmoddi4+0x228>
    bc72:	459a      	cmp	sl, r3
    bc74:	d902      	bls.n	bc7c <__udivmoddi4+0x228>
    bc76:	f1a8 0002 	sub.w	r0, r8, #2
    bc7a:	4423      	add	r3, r4
    bc7c:	eba3 030a 	sub.w	r3, r3, sl
    bc80:	b289      	uxth	r1, r1
    bc82:	fbb3 f8f9 	udiv	r8, r3, r9
    bc86:	fb09 3318 	mls	r3, r9, r8, r3
    bc8a:	fb08 fe0e 	mul.w	lr, r8, lr
    bc8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    bc92:	458e      	cmp	lr, r1
    bc94:	d92c      	bls.n	bcf0 <__udivmoddi4+0x29c>
    bc96:	1861      	adds	r1, r4, r1
    bc98:	f108 33ff 	add.w	r3, r8, #4294967295
    bc9c:	d204      	bcs.n	bca8 <__udivmoddi4+0x254>
    bc9e:	458e      	cmp	lr, r1
    bca0:	d902      	bls.n	bca8 <__udivmoddi4+0x254>
    bca2:	f1a8 0302 	sub.w	r3, r8, #2
    bca6:	4421      	add	r1, r4
    bca8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    bcac:	fba0 9802 	umull	r9, r8, r0, r2
    bcb0:	eba1 010e 	sub.w	r1, r1, lr
    bcb4:	4541      	cmp	r1, r8
    bcb6:	46ce      	mov	lr, r9
    bcb8:	4643      	mov	r3, r8
    bcba:	d302      	bcc.n	bcc2 <__udivmoddi4+0x26e>
    bcbc:	d106      	bne.n	bccc <__udivmoddi4+0x278>
    bcbe:	454d      	cmp	r5, r9
    bcc0:	d204      	bcs.n	bccc <__udivmoddi4+0x278>
    bcc2:	ebb9 0e02 	subs.w	lr, r9, r2
    bcc6:	eb68 0304 	sbc.w	r3, r8, r4
    bcca:	3801      	subs	r0, #1
    bccc:	2e00      	cmp	r6, #0
    bcce:	d0a6      	beq.n	bc1e <__udivmoddi4+0x1ca>
    bcd0:	ebb5 020e 	subs.w	r2, r5, lr
    bcd4:	eb61 0103 	sbc.w	r1, r1, r3
    bcd8:	fa01 fc0c 	lsl.w	ip, r1, ip
    bcdc:	fa22 f307 	lsr.w	r3, r2, r7
    bce0:	ea4c 0303 	orr.w	r3, ip, r3
    bce4:	40f9      	lsrs	r1, r7
    bce6:	e9c6 3100 	strd	r3, r1, [r6]
    bcea:	e798      	b.n	bc1e <__udivmoddi4+0x1ca>
    bcec:	4640      	mov	r0, r8
    bcee:	e7c5      	b.n	bc7c <__udivmoddi4+0x228>
    bcf0:	4643      	mov	r3, r8
    bcf2:	e7d9      	b.n	bca8 <__udivmoddi4+0x254>
    bcf4:	2804      	cmp	r0, #4
    bcf6:	d202      	bcs.n	bcfe <__udivmoddi4+0x2aa>
    bcf8:	f04f 0028 	mov.w	r0, #40	; 0x28
    bcfc:	4770      	bx	lr
    bcfe:	d102      	bne.n	bd06 <__udivmoddi4+0x2b2>
    bd00:	f04f 0010 	mov.w	r0, #16
    bd04:	4770      	bx	lr
    bd06:	f04f 0000 	mov.w	r0, #0
    bd0a:	4770      	bx	lr
    bd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd10:	000d      	movs	r5, r1
    bd12:	4604      	mov	r4, r0
    bd14:	f04f 0602 	mov.w	r6, #2
    bd18:	f04f 0701 	mov.w	r7, #1
    bd1c:	d008      	beq.n	bd30 <__udivmoddi4+0x2dc>
    bd1e:	7828      	ldrb	r0, [r5, #0]
    bd20:	b1d0      	cbz	r0, bd58 <__udivmoddi4+0x304>
    bd22:	2801      	cmp	r0, #1
    bd24:	d007      	beq.n	bd36 <__udivmoddi4+0x2e2>
    bd26:	2802      	cmp	r0, #2
    bd28:	d014      	beq.n	bd54 <__udivmoddi4+0x300>
    bd2a:	2803      	cmp	r0, #3
    bd2c:	d13e      	bne.n	bdac <__udivmoddi4+0x358>
    bd2e:	e016      	b.n	bd5e <__udivmoddi4+0x30a>
    bd30:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    bd34:	e00e      	b.n	bd54 <__udivmoddi4+0x300>
    bd36:	6868      	ldr	r0, [r5, #4]
    bd38:	28c8      	cmp	r0, #200	; 0xc8
    bd3a:	d303      	bcc.n	bd44 <__udivmoddi4+0x2f0>
    bd3c:	2103      	movs	r1, #3
    bd3e:	f7f5 fe9b 	bl	1a78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    bd42:	b108      	cbz	r0, bd48 <__udivmoddi4+0x2f4>
    bd44:	2600      	movs	r6, #0
    bd46:	e007      	b.n	bd58 <__udivmoddi4+0x304>
    bd48:	4620      	mov	r0, r4
    bd4a:	6869      	ldr	r1, [r5, #4]
    bd4c:	f000 f943 	bl	bfd6 <__udivmoddi4+0x582>
    bd50:	2601      	movs	r6, #1
    bd52:	e001      	b.n	bd58 <__udivmoddi4+0x304>
    bd54:	f7f4 fdce 	bl	8f4 <CONFIG_BT_RX_STACK_SIZE+0x5c>
    bd58:	4630      	mov	r0, r6
    bd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd5e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    bd62:	2800      	cmp	r0, #0
    bd64:	d1f6      	bne.n	bd54 <__udivmoddi4+0x300>
    bd66:	6868      	ldr	r0, [r5, #4]
    bd68:	f7f4 fd96 	bl	898 <CONFIG_BT_RX_STACK_SIZE>
    bd6c:	b1f0      	cbz	r0, bdac <__udivmoddi4+0x358>
    bd6e:	6869      	ldr	r1, [r5, #4]
    bd70:	7808      	ldrb	r0, [r1, #0]
    bd72:	b130      	cbz	r0, bd82 <__udivmoddi4+0x32e>
    bd74:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bd78:	2805      	cmp	r0, #5
    bd7a:	d008      	beq.n	bd8e <__udivmoddi4+0x33a>
    bd7c:	f44f 71be 	mov.w	r1, #380	; 0x17c
    bd80:	e011      	b.n	bda6 <__udivmoddi4+0x352>
    bd82:	4620      	mov	r0, r4
    bd84:	f000 f92f 	bl	bfe6 <__udivmoddi4+0x592>
    bd88:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    bd8c:	e7e2      	b.n	bd54 <__udivmoddi4+0x300>
    bd8e:	4620      	mov	r0, r4
    bd90:	f000 f942 	bl	c018 <__udivmoddi4+0x5c4>
    bd94:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    bd98:	4621      	mov	r1, r4
    bd9a:	f000 f80a 	bl	bdb2 <__udivmoddi4+0x35e>
    bd9e:	2800      	cmp	r0, #0
    bda0:	d1d8      	bne.n	bd54 <__udivmoddi4+0x300>
    bda2:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    bda6:	206a      	movs	r0, #106	; 0x6a
    bda8:	f7f8 f902 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bdac:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    bdb0:	e7d0      	b.n	bd54 <__udivmoddi4+0x300>
    bdb2:	f7f6 b847 	b.w	1e44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    bdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdba:	460d      	mov	r5, r1
    bdbc:	0004      	movs	r4, r0
    bdbe:	d00c      	beq.n	bdda <__udivmoddi4+0x386>
    bdc0:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    bdc4:	2700      	movs	r7, #0
    bdc6:	2002      	movs	r0, #2
    bdc8:	2d09      	cmp	r5, #9
    bdca:	d270      	bcs.n	beae <__udivmoddi4+0x45a>
    bdcc:	e8df f005 	tbb	[pc, r5]
    bdd0:	35351108 	.word	0x35351108
    bdd4:	a5887065 	.word	0xa5887065
    bdd8:	0093      	.short	0x0093
    bdda:	f44f 71cb 	mov.w	r1, #406	; 0x196
    bdde:	e0f7      	b.n	bfd0 <__udivmoddi4+0x57c>
    bde0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bde4:	2804      	cmp	r0, #4
    bde6:	d07a      	beq.n	bede <__udivmoddi4+0x48a>
    bde8:	2803      	cmp	r0, #3
    bdea:	d0fc      	beq.n	bde6 <__udivmoddi4+0x392>
    bdec:	f240 11a1 	movw	r1, #417	; 0x1a1
    bdf0:	e0ee      	b.n	bfd0 <__udivmoddi4+0x57c>
    bdf2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bdf6:	2804      	cmp	r0, #4
    bdf8:	d004      	beq.n	be04 <__udivmoddi4+0x3b0>
    bdfa:	2803      	cmp	r0, #3
    bdfc:	d002      	beq.n	be04 <__udivmoddi4+0x3b0>
    bdfe:	f240 11a5 	movw	r1, #421	; 0x1a5
    be02:	e0e5      	b.n	bfd0 <__udivmoddi4+0x57c>
    be04:	2005      	movs	r0, #5
    be06:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    be0a:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    be0e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    be12:	bbb0      	cbnz	r0, be82 <__udivmoddi4+0x42e>
    be14:	2100      	movs	r1, #0
    be16:	4620      	mov	r0, r4
    be18:	f000 f8dd 	bl	bfd6 <__udivmoddi4+0x582>
    be1c:	7820      	ldrb	r0, [r4, #0]
    be1e:	2801      	cmp	r0, #1
    be20:	d006      	beq.n	be30 <__udivmoddi4+0x3dc>
    be22:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    be26:	e9c4 0106 	strd	r0, r1, [r4, #24]
    be2a:	2100      	movs	r1, #0
    be2c:	6a22      	ldr	r2, [r4, #32]
    be2e:	e048      	b.n	bec2 <__udivmoddi4+0x46e>
    be30:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    be34:	f7f5 ff0e 	bl	1c54 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    be38:	e7f5      	b.n	be26 <__udivmoddi4+0x3d2>
    be3a:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    be3e:	2904      	cmp	r1, #4
    be40:	d004      	beq.n	be4c <__udivmoddi4+0x3f8>
    be42:	2903      	cmp	r1, #3
    be44:	d002      	beq.n	be4c <__udivmoddi4+0x3f8>
    be46:	f240 11c3 	movw	r1, #451	; 0x1c3
    be4a:	e0c1      	b.n	bfd0 <__udivmoddi4+0x57c>
    be4c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    be50:	b122      	cbz	r2, be5c <__udivmoddi4+0x408>
    be52:	4621      	mov	r1, r4
    be54:	4630      	mov	r0, r6
    be56:	f000 f8fe 	bl	c056 <__udivmoddi4+0x602>
    be5a:	e0b1      	b.n	bfc0 <__udivmoddi4+0x56c>
    be5c:	2904      	cmp	r1, #4
    be5e:	d000      	beq.n	be62 <__udivmoddi4+0x40e>
    be60:	2001      	movs	r0, #1
    be62:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    be66:	6a22      	ldr	r2, [r4, #32]
    be68:	2d02      	cmp	r5, #2
    be6a:	d00b      	beq.n	be84 <__udivmoddi4+0x430>
    be6c:	2106      	movs	r1, #6
    be6e:	4630      	mov	r0, r6
    be70:	4790      	blx	r2
    be72:	2800      	cmp	r0, #0
    be74:	d06d      	beq.n	bf52 <__udivmoddi4+0x4fe>
    be76:	7800      	ldrb	r0, [r0, #0]
    be78:	2800      	cmp	r0, #0
    be7a:	d06a      	beq.n	bf52 <__udivmoddi4+0x4fe>
    be7c:	f240 11dd 	movw	r1, #477	; 0x1dd
    be80:	e0a6      	b.n	bfd0 <__udivmoddi4+0x57c>
    be82:	e034      	b.n	beee <__udivmoddi4+0x49a>
    be84:	2105      	movs	r1, #5
    be86:	4630      	mov	r0, r6
    be88:	4790      	blx	r2
    be8a:	2800      	cmp	r0, #0
    be8c:	d07c      	beq.n	bf88 <__udivmoddi4+0x534>
    be8e:	7800      	ldrb	r0, [r0, #0]
    be90:	2800      	cmp	r0, #0
    be92:	d079      	beq.n	bf88 <__udivmoddi4+0x534>
    be94:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    be98:	e09a      	b.n	bfd0 <__udivmoddi4+0x57c>
    be9a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    be9e:	2805      	cmp	r0, #5
    bea0:	d002      	beq.n	bea8 <__udivmoddi4+0x454>
    bea2:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    bea6:	e093      	b.n	bfd0 <__udivmoddi4+0x57c>
    bea8:	2102      	movs	r1, #2
    beaa:	6a22      	ldr	r2, [r4, #32]
    beac:	e009      	b.n	bec2 <__udivmoddi4+0x46e>
    beae:	e07e      	b.n	bfae <__udivmoddi4+0x55a>
    beb0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    beb4:	2805      	cmp	r0, #5
    beb6:	d002      	beq.n	bebe <__udivmoddi4+0x46a>
    beb8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    bebc:	e088      	b.n	bfd0 <__udivmoddi4+0x57c>
    bebe:	6a22      	ldr	r2, [r4, #32]
    bec0:	2101      	movs	r1, #1
    bec2:	4630      	mov	r0, r6
    bec4:	4790      	blx	r2
    bec6:	4601      	mov	r1, r0
    bec8:	4620      	mov	r0, r4
    beca:	f7ff ff1f 	bl	bd0c <__udivmoddi4+0x2b8>
    bece:	2802      	cmp	r0, #2
    bed0:	d076      	beq.n	bfc0 <__udivmoddi4+0x56c>
    bed2:	b3e8      	cbz	r0, bf50 <__udivmoddi4+0x4fc>
    bed4:	2801      	cmp	r0, #1
    bed6:	d06d      	beq.n	bfb4 <__udivmoddi4+0x560>
    bed8:	f240 212a 	movw	r1, #554	; 0x22a
    bedc:	e078      	b.n	bfd0 <__udivmoddi4+0x57c>
    bede:	e071      	b.n	bfc4 <__udivmoddi4+0x570>
    bee0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bee4:	2805      	cmp	r0, #5
    bee6:	d002      	beq.n	beee <__udivmoddi4+0x49a>
    bee8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    beec:	e070      	b.n	bfd0 <__udivmoddi4+0x57c>
    beee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bef2:	f7f4 bcff 	b.w	8f4 <CONFIG_BT_RX_STACK_SIZE+0x5c>
    bef6:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    befa:	2805      	cmp	r0, #5
    befc:	d002      	beq.n	bf04 <__udivmoddi4+0x4b0>
    befe:	f240 11f5 	movw	r1, #501	; 0x1f5
    bf02:	e065      	b.n	bfd0 <__udivmoddi4+0x57c>
    bf04:	6a22      	ldr	r2, [r4, #32]
    bf06:	210a      	movs	r1, #10
    bf08:	4630      	mov	r0, r6
    bf0a:	4790      	blx	r2
    bf0c:	4601      	mov	r1, r0
    bf0e:	4620      	mov	r0, r4
    bf10:	f7ff fefc 	bl	bd0c <__udivmoddi4+0x2b8>
    bf14:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    bf18:	e05a      	b.n	bfd0 <__udivmoddi4+0x57c>
    bf1a:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    bf1e:	2905      	cmp	r1, #5
    bf20:	d007      	beq.n	bf32 <__udivmoddi4+0x4de>
    bf22:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    bf26:	b10a      	cbz	r2, bf2c <__udivmoddi4+0x4d8>
    bf28:	2903      	cmp	r1, #3
    bf2a:	d002      	beq.n	bf32 <__udivmoddi4+0x4de>
    bf2c:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    bf30:	e04e      	b.n	bfd0 <__udivmoddi4+0x57c>
    bf32:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    bf36:	b129      	cbz	r1, bf44 <__udivmoddi4+0x4f0>
    bf38:	4621      	mov	r1, r4
    bf3a:	4630      	mov	r0, r6
    bf3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bf40:	f000 b889 	b.w	c056 <__udivmoddi4+0x602>
    bf44:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    bf48:	b199      	cbz	r1, bf72 <__udivmoddi4+0x51e>
    bf4a:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    bf4e:	e001      	b.n	bf54 <__udivmoddi4+0x500>
    bf50:	e033      	b.n	bfba <__udivmoddi4+0x566>
    bf52:	e035      	b.n	bfc0 <__udivmoddi4+0x56c>
    bf54:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    bf58:	6a22      	ldr	r2, [r4, #32]
    bf5a:	2108      	movs	r1, #8
    bf5c:	4630      	mov	r0, r6
    bf5e:	4790      	blx	r2
    bf60:	2800      	cmp	r0, #0
    bf62:	d011      	beq.n	bf88 <__udivmoddi4+0x534>
    bf64:	7800      	ldrb	r0, [r0, #0]
    bf66:	2800      	cmp	r0, #0
    bf68:	d00e      	beq.n	bf88 <__udivmoddi4+0x534>
    bf6a:	f44f 7102 	mov.w	r1, #520	; 0x208
    bf6e:	e02f      	b.n	bfd0 <__udivmoddi4+0x57c>
    bf70:	e00a      	b.n	bf88 <__udivmoddi4+0x534>
    bf72:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    bf76:	b161      	cbz	r1, bf92 <__udivmoddi4+0x53e>
    bf78:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    bf7c:	4621      	mov	r1, r4
    bf7e:	f7ff ff18 	bl	bdb2 <__udivmoddi4+0x35e>
    bf82:	b118      	cbz	r0, bf8c <__udivmoddi4+0x538>
    bf84:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    bf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf8c:	f44f 7103 	mov.w	r1, #524	; 0x20c
    bf90:	e01e      	b.n	bfd0 <__udivmoddi4+0x57c>
    bf92:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    bf96:	6a22      	ldr	r2, [r4, #32]
    bf98:	2107      	movs	r1, #7
    bf9a:	4630      	mov	r0, r6
    bf9c:	4790      	blx	r2
    bf9e:	2800      	cmp	r0, #0
    bfa0:	d0f2      	beq.n	bf88 <__udivmoddi4+0x534>
    bfa2:	7800      	ldrb	r0, [r0, #0]
    bfa4:	2800      	cmp	r0, #0
    bfa6:	d0ef      	beq.n	bf88 <__udivmoddi4+0x534>
    bfa8:	f44f 7105 	mov.w	r1, #532	; 0x214
    bfac:	e010      	b.n	bfd0 <__udivmoddi4+0x57c>
    bfae:	f240 2119 	movw	r1, #537	; 0x219
    bfb2:	e00d      	b.n	bfd0 <__udivmoddi4+0x57c>
    bfb4:	2104      	movs	r1, #4
    bfb6:	6a22      	ldr	r2, [r4, #32]
    bfb8:	e783      	b.n	bec2 <__udivmoddi4+0x46e>
    bfba:	2103      	movs	r1, #3
    bfbc:	6a22      	ldr	r2, [r4, #32]
    bfbe:	e780      	b.n	bec2 <__udivmoddi4+0x46e>
    bfc0:	2d00      	cmp	r5, #0
    bfc2:	d1e1      	bne.n	bf88 <__udivmoddi4+0x534>
    bfc4:	f000 f8fd 	bl	c1c2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    bfc8:	2800      	cmp	r0, #0
    bfca:	d0dd      	beq.n	bf88 <__udivmoddi4+0x534>
    bfcc:	f240 2133 	movw	r1, #563	; 0x233
    bfd0:	206a      	movs	r0, #106	; 0x6a
    bfd2:	f7f7 ffed 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bfd6:	4602      	mov	r2, r0
    bfd8:	7803      	ldrb	r3, [r0, #0]
    bfda:	6840      	ldr	r0, [r0, #4]
    bfdc:	4408      	add	r0, r1
    bfde:	6050      	str	r0, [r2, #4]
    bfe0:	3859      	subs	r0, #89	; 0x59
    bfe2:	f7f6 be0f 	b.w	2c04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    bfe6:	2201      	movs	r2, #1
    bfe8:	7002      	strb	r2, [r0, #0]
    bfea:	2200      	movs	r2, #0
    bfec:	72c2      	strb	r2, [r0, #11]
    bfee:	790a      	ldrb	r2, [r1, #4]
    bff0:	b172      	cbz	r2, c010 <__udivmoddi4+0x5bc>
    bff2:	2200      	movs	r2, #0
    bff4:	8102      	strh	r2, [r0, #8]
    bff6:	794a      	ldrb	r2, [r1, #5]
    bff8:	b162      	cbz	r2, c014 <__udivmoddi4+0x5c0>
    bffa:	2203      	movs	r2, #3
    bffc:	7282      	strb	r2, [r0, #10]
    bffe:	688a      	ldr	r2, [r1, #8]
    c000:	326a      	adds	r2, #106	; 0x6a
    c002:	6042      	str	r2, [r0, #4]
    c004:	68c9      	ldr	r1, [r1, #12]
    c006:	6101      	str	r1, [r0, #16]
    c008:	2103      	movs	r1, #3
    c00a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    c00e:	4770      	bx	lr
    c010:	222b      	movs	r2, #43	; 0x2b
    c012:	e7ef      	b.n	bff4 <__udivmoddi4+0x5a0>
    c014:	2202      	movs	r2, #2
    c016:	e7f1      	b.n	bffc <__udivmoddi4+0x5a8>
    c018:	b510      	push	{r4, lr}
    c01a:	2200      	movs	r2, #0
    c01c:	7002      	strb	r2, [r0, #0]
    c01e:	72c2      	strb	r2, [r0, #11]
    c020:	790a      	ldrb	r2, [r1, #4]
    c022:	b1a2      	cbz	r2, c04e <__udivmoddi4+0x5fa>
    c024:	2200      	movs	r2, #0
    c026:	8102      	strh	r2, [r0, #8]
    c028:	794a      	ldrb	r2, [r1, #5]
    c02a:	b192      	cbz	r2, c052 <__udivmoddi4+0x5fe>
    c02c:	2203      	movs	r2, #3
    c02e:	7282      	strb	r2, [r0, #10]
    c030:	68ca      	ldr	r2, [r1, #12]
    c032:	326a      	adds	r2, #106	; 0x6a
    c034:	6042      	str	r2, [r0, #4]
    c036:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    c03a:	6889      	ldr	r1, [r1, #8]
    c03c:	17cb      	asrs	r3, r1, #31
    c03e:	1861      	adds	r1, r4, r1
    c040:	415a      	adcs	r2, r3
    c042:	e9c0 1204 	strd	r1, r2, [r0, #16]
    c046:	2104      	movs	r1, #4
    c048:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    c04c:	bd10      	pop	{r4, pc}
    c04e:	222b      	movs	r2, #43	; 0x2b
    c050:	e7e9      	b.n	c026 <__udivmoddi4+0x5d2>
    c052:	2202      	movs	r2, #2
    c054:	e7eb      	b.n	c02e <__udivmoddi4+0x5da>
    c056:	b570      	push	{r4, r5, r6, lr}
    c058:	4605      	mov	r5, r0
    c05a:	460c      	mov	r4, r1
    c05c:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    c060:	f7f6 fb54 	bl	270c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    c064:	b178      	cbz	r0, c086 <__udivmoddi4+0x632>
    c066:	4620      	mov	r0, r4
    c068:	f000 f810 	bl	c08c <__udivmoddi4+0x638>
    c06c:	6a22      	ldr	r2, [r4, #32]
    c06e:	2109      	movs	r1, #9
    c070:	4628      	mov	r0, r5
    c072:	4790      	blx	r2
    c074:	2800      	cmp	r0, #0
    c076:	d008      	beq.n	c08a <__udivmoddi4+0x636>
    c078:	7800      	ldrb	r0, [r0, #0]
    c07a:	2800      	cmp	r0, #0
    c07c:	d005      	beq.n	c08a <__udivmoddi4+0x636>
    c07e:	21dc      	movs	r1, #220	; 0xdc
    c080:	206a      	movs	r0, #106	; 0x6a
    c082:	f7f7 ff95 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c086:	21d8      	movs	r1, #216	; 0xd8
    c088:	e7fa      	b.n	c080 <__udivmoddi4+0x62c>
    c08a:	bd70      	pop	{r4, r5, r6, pc}
    c08c:	2100      	movs	r1, #0
    c08e:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    c092:	f800 1f24 	strb.w	r1, [r0, #36]!
    c096:	7041      	strb	r1, [r0, #1]
    c098:	4770      	bx	lr

0000c09a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c09a:	b570      	push	{r4, r5, r6, lr}
    c09c:	f7f4 fc86 	bl	9ac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c0a0:	4605      	mov	r5, r0
    c0a2:	2400      	movs	r4, #0
    c0a4:	e006      	b.n	c0b4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c0a6:	4620      	mov	r0, r4
    c0a8:	f7f4 fc86 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c0ac:	f7ff ffee 	bl	c08c <__udivmoddi4+0x638>
    c0b0:	1c64      	adds	r4, r4, #1
    c0b2:	b2e4      	uxtb	r4, r4
    c0b4:	42ac      	cmp	r4, r5
    c0b6:	d3f6      	bcc.n	c0a6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c0b8:	bd70      	pop	{r4, r5, r6, pc}

0000c0ba <mpsl_timeslot_request>:
    c0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0be:	460d      	mov	r5, r1
    c0c0:	f7f4 fc7a 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c0c4:	0004      	movs	r4, r0
    c0c6:	d008      	beq.n	c0da <mpsl_timeslot_request+0x20>
    c0c8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c0cc:	f06f 0622 	mvn.w	r6, #34	; 0x22
    c0d0:	2801      	cmp	r0, #1
    c0d2:	d006      	beq.n	c0e2 <mpsl_timeslot_request+0x28>
    c0d4:	2802      	cmp	r0, #2
    c0d6:	d111      	bne.n	c0fc <mpsl_timeslot_request+0x42>
    c0d8:	e003      	b.n	c0e2 <mpsl_timeslot_request+0x28>
    c0da:	f06f 0001 	mvn.w	r0, #1
    c0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0e2:	f06f 0715 	mvn.w	r7, #21
    c0e6:	b15d      	cbz	r5, c100 <mpsl_timeslot_request+0x46>
    c0e8:	4628      	mov	r0, r5
    c0ea:	f7f4 fbd5 	bl	898 <CONFIG_BT_RX_STACK_SIZE>
    c0ee:	b138      	cbz	r0, c100 <mpsl_timeslot_request+0x46>
    c0f0:	7828      	ldrb	r0, [r5, #0]
    c0f2:	b138      	cbz	r0, c104 <mpsl_timeslot_request+0x4a>
    c0f4:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    c0f8:	2802      	cmp	r0, #2
    c0fa:	d008      	beq.n	c10e <mpsl_timeslot_request+0x54>
    c0fc:	4630      	mov	r0, r6
    c0fe:	e7ee      	b.n	c0de <mpsl_timeslot_request+0x24>
    c100:	4638      	mov	r0, r7
    c102:	e7ec      	b.n	c0de <mpsl_timeslot_request+0x24>
    c104:	4629      	mov	r1, r5
    c106:	4620      	mov	r0, r4
    c108:	f7ff ff6d 	bl	bfe6 <__udivmoddi4+0x592>
    c10c:	e003      	b.n	c116 <mpsl_timeslot_request+0x5c>
    c10e:	4629      	mov	r1, r5
    c110:	4620      	mov	r0, r4
    c112:	f7ff ff81 	bl	c018 <__udivmoddi4+0x5c4>
    c116:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    c11a:	4621      	mov	r1, r4
    c11c:	f7ff fe49 	bl	bdb2 <__udivmoddi4+0x35e>
    c120:	b108      	cbz	r0, c126 <mpsl_timeslot_request+0x6c>
    c122:	2000      	movs	r0, #0
    c124:	e7db      	b.n	c0de <mpsl_timeslot_request+0x24>
    c126:	f240 21b1 	movw	r1, #689	; 0x2b1
    c12a:	206a      	movs	r0, #106	; 0x6a
    c12c:	f7f7 ff40 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000c130 <mpsl_timeslot_session_close>:
    c130:	b510      	push	{r4, lr}
    c132:	4604      	mov	r4, r0
    c134:	f7f4 fc40 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c138:	0001      	movs	r1, r0
    c13a:	d005      	beq.n	c148 <mpsl_timeslot_session_close+0x18>
    c13c:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    c140:	f06f 0222 	mvn.w	r2, #34	; 0x22
    c144:	b978      	cbnz	r0, c166 <mpsl_timeslot_session_close+0x36>
    c146:	e002      	b.n	c14e <mpsl_timeslot_session_close+0x1e>
    c148:	f06f 0001 	mvn.w	r0, #1
    c14c:	bd10      	pop	{r4, pc}
    c14e:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    c152:	b140      	cbz	r0, c166 <mpsl_timeslot_session_close+0x36>
    c154:	2802      	cmp	r0, #2
    c156:	d008      	beq.n	c16a <mpsl_timeslot_session_close+0x3a>
    c158:	2801      	cmp	r0, #1
    c15a:	d006      	beq.n	c16a <mpsl_timeslot_session_close+0x3a>
    c15c:	2001      	movs	r0, #1
    c15e:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    c162:	2000      	movs	r0, #0
    c164:	bd10      	pop	{r4, pc}
    c166:	4610      	mov	r0, r2
    c168:	bd10      	pop	{r4, pc}
    c16a:	4620      	mov	r0, r4
    c16c:	f7ff ff73 	bl	c056 <__udivmoddi4+0x602>
    c170:	e7f7      	b.n	c162 <mpsl_timeslot_session_close+0x32>

0000c172 <mpsl_timeslot_session_count_set>:
    c172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c176:	460e      	mov	r6, r1
    c178:	4607      	mov	r7, r0
    c17a:	f7f4 fc17 	bl	9ac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c17e:	4605      	mov	r5, r0
    c180:	2400      	movs	r4, #0
    c182:	e00b      	b.n	c19c <mpsl_timeslot_session_count_set+0x2a>
    c184:	4620      	mov	r0, r4
    c186:	f7f4 fc17 	bl	9b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c18a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    c18e:	b118      	cbz	r0, c198 <mpsl_timeslot_session_count_set+0x26>
    c190:	f04f 30ff 	mov.w	r0, #4294967295
    c194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c198:	1c64      	adds	r4, r4, #1
    c19a:	b2e4      	uxtb	r4, r4
    c19c:	42ac      	cmp	r4, r5
    c19e:	d3f1      	bcc.n	c184 <mpsl_timeslot_session_count_set+0x12>
    c1a0:	2e08      	cmp	r6, #8
    c1a2:	d902      	bls.n	c1aa <mpsl_timeslot_session_count_set+0x38>
    c1a4:	f06f 0015 	mvn.w	r0, #21
    c1a8:	e7f4      	b.n	c194 <mpsl_timeslot_session_count_set+0x22>
    c1aa:	b117      	cbz	r7, c1b2 <mpsl_timeslot_session_count_set+0x40>
    c1ac:	4631      	mov	r1, r6
    c1ae:	4638      	mov	r0, r7
    c1b0:	e001      	b.n	c1b6 <mpsl_timeslot_session_count_set+0x44>
    c1b2:	2100      	movs	r1, #0
    c1b4:	4608      	mov	r0, r1
    c1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c1ba:	f7f4 bbe3 	b.w	984 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000c1be <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    c1be:	f7f6 bfd9 	b.w	3174 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000c1c2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    c1c2:	b510      	push	{r4, lr}
    c1c4:	2000      	movs	r0, #0
    c1c6:	f7f7 fafb 	bl	37c0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    c1ca:	6800      	ldr	r0, [r0, #0]
    c1cc:	2800      	cmp	r0, #0
    c1ce:	bf18      	it	ne
    c1d0:	2001      	movne	r0, #1
    c1d2:	bd10      	pop	{r4, pc}

0000c1d4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    c1d4:	b510      	push	{r4, lr}
    c1d6:	f7f7 fb73 	bl	38c0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    c1da:	f7f6 fe45 	bl	2e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    c1de:	f000 f802 	bl	c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    c1e2:	b280      	uxth	r0, r0
    c1e4:	bd10      	pop	{r4, pc}

0000c1e6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c1e6:	0a41      	lsrs	r1, r0, #9
    c1e8:	f643 5209 	movw	r2, #15625	; 0x3d09
    c1ec:	4351      	muls	r1, r2
    c1ee:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c1f2:	fb10 f002 	smulbb	r0, r0, r2
    c1f6:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c1fa:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c1fe:	4770      	bx	lr
    c200:	2800      	cmp	r0, #0
    c202:	db09      	blt.n	c218 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    c204:	f000 021f 	and.w	r2, r0, #31
    c208:	2101      	movs	r1, #1
    c20a:	4091      	lsls	r1, r2
    c20c:	0940      	lsrs	r0, r0, #5
    c20e:	0080      	lsls	r0, r0, #2
    c210:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c214:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c218:	4770      	bx	lr
    c21a:	2800      	cmp	r0, #0
    c21c:	db0d      	blt.n	c23a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    c21e:	f000 021f 	and.w	r2, r0, #31
    c222:	2101      	movs	r1, #1
    c224:	4091      	lsls	r1, r2
    c226:	0940      	lsrs	r0, r0, #5
    c228:	0080      	lsls	r0, r0, #2
    c22a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c22e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c232:	f3bf 8f4f 	dsb	sy
    c236:	f3bf 8f6f 	isb	sy
    c23a:	4770      	bx	lr

0000c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c23c:	b570      	push	{r4, r5, r6, lr}
    c23e:	4602      	mov	r2, r0
    c240:	2000      	movs	r0, #0
    c242:	2900      	cmp	r1, #0
    c244:	d01d      	beq.n	c282 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c246:	fba2 0101 	umull	r0, r1, r2, r1
    c24a:	0a40      	lsrs	r0, r0, #9
    c24c:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c250:	0a49      	lsrs	r1, r1, #9
    c252:	1c40      	adds	r0, r0, #1
    c254:	f141 0100 	adc.w	r1, r1, #0
    c258:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c25c:	1883      	adds	r3, r0, r2
    c25e:	f141 0100 	adc.w	r1, r1, #0
    c262:	1c5b      	adds	r3, r3, #1
    c264:	f141 0400 	adc.w	r4, r1, #0
    c268:	2100      	movs	r1, #0
    c26a:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c26e:	41a1      	sbcs	r1, r4
    c270:	d203      	bcs.n	c27a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c272:	2172      	movs	r1, #114	; 0x72
    c274:	206d      	movs	r0, #109	; 0x6d
    c276:	f7f7 fe9b 	bl	3fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c27a:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c27e:	fbb0 f0f2 	udiv	r0, r0, r2
    c282:	bd70      	pop	{r4, r5, r6, pc}
    c284:	5840      	ldr	r0, [r0, r1]
    c286:	2800      	cmp	r0, #0
    c288:	d000      	beq.n	c28c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c28a:	2001      	movs	r0, #1
    c28c:	4770      	bx	lr
    c28e:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c292:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c296:	f002 0201 	and.w	r2, r2, #1
    c29a:	03c0      	lsls	r0, r0, #15
    c29c:	d503      	bpl.n	c2a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c29e:	428a      	cmp	r2, r1
    c2a0:	d101      	bne.n	c2a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c2a2:	2001      	movs	r0, #1
    c2a4:	4770      	bx	lr
    c2a6:	2000      	movs	r0, #0
    c2a8:	4770      	bx	lr

0000c2aa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c2aa:	b510      	push	{r4, lr}
    c2ac:	2101      	movs	r1, #1
    c2ae:	0788      	lsls	r0, r1, #30
    c2b0:	f7f7 fe28 	bl	3f04 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c2b4:	2800      	cmp	r0, #0
    c2b6:	d000      	beq.n	c2ba <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c2b8:	2001      	movs	r0, #1
    c2ba:	bd10      	pop	{r4, pc}

0000c2bc <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c2bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c2c0:	2101      	movs	r1, #1
    c2c2:	6001      	str	r1, [r0, #0]
    c2c4:	4770      	bx	lr

0000c2c6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c2c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c2ca:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c2ce:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c2d2:	f002 0203 	and.w	r2, r2, #3
    c2d6:	03c9      	lsls	r1, r1, #15
    c2d8:	d503      	bpl.n	c2e2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c2da:	4282      	cmp	r2, r0
    c2dc:	d101      	bne.n	c2e2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c2de:	2001      	movs	r0, #1
    c2e0:	4770      	bx	lr
    c2e2:	2000      	movs	r0, #0
    c2e4:	4770      	bx	lr

0000c2e6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c2e6:	b510      	push	{r4, lr}
    c2e8:	2100      	movs	r1, #0
    c2ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c2ee:	f7f7 fe09 	bl	3f04 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c2f2:	2800      	cmp	r0, #0
    c2f4:	d000      	beq.n	c2f8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c2f6:	2001      	movs	r0, #1
    c2f8:	bd10      	pop	{r4, pc}
    c2fa:	2800      	cmp	r0, #0
    c2fc:	db09      	blt.n	c312 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c2fe:	f000 021f 	and.w	r2, r0, #31
    c302:	2101      	movs	r1, #1
    c304:	4091      	lsls	r1, r2
    c306:	0940      	lsrs	r0, r0, #5
    c308:	0080      	lsls	r0, r0, #2
    c30a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c30e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c312:	4770      	bx	lr
    c314:	2800      	cmp	r0, #0
    c316:	db0d      	blt.n	c334 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c318:	f000 021f 	and.w	r2, r0, #31
    c31c:	2101      	movs	r1, #1
    c31e:	4091      	lsls	r1, r2
    c320:	0940      	lsrs	r0, r0, #5
    c322:	0080      	lsls	r0, r0, #2
    c324:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c328:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c32c:	f3bf 8f4f 	dsb	sy
    c330:	f3bf 8f6f 	isb	sy
    c334:	4770      	bx	lr
    c336:	1000      	.short	0x1000
    c338:	00fa0002 	.word	0x00fa0002
    c33c:	edb80000 	.word	0xedb80000
    c340:	0ef2aa4d 	.word	0x0ef2aa4d
    c344:	b5ea3202 	.word	0xb5ea3202
    c348:	d1502fde 	.word	0xd1502fde
    c34c:	d2b55ab7 	.word	0xd2b55ab7
    c350:	41c7      	.short	0x41c7
    c352:	2800      	cmp	r0, #0
    c354:	db09      	blt.n	c36a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c356:	f000 021f 	and.w	r2, r0, #31
    c35a:	2101      	movs	r1, #1
    c35c:	4091      	lsls	r1, r2
    c35e:	0940      	lsrs	r0, r0, #5
    c360:	0080      	lsls	r0, r0, #2
    c362:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c366:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c36a:	4770      	bx	lr

0000c36c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c36c:	f3ef 8110 	mrs	r1, PRIMASK
    c370:	b672      	cpsid	i
    c372:	7802      	ldrb	r2, [r0, #0]
    c374:	2a01      	cmp	r2, #1
    c376:	d001      	beq.n	c37c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c378:	2201      	movs	r2, #1
    c37a:	e000      	b.n	c37e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c37c:	2200      	movs	r2, #0
    c37e:	2301      	movs	r3, #1
    c380:	7003      	strb	r3, [r0, #0]
    c382:	b901      	cbnz	r1, c386 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c384:	b662      	cpsie	i
    c386:	b10a      	cbz	r2, c38c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c388:	2000      	movs	r0, #0
    c38a:	4770      	bx	lr
    c38c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c390:	4770      	bx	lr

0000c392 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c392:	2100      	movs	r1, #0
    c394:	7001      	strb	r1, [r0, #0]
    c396:	4608      	mov	r0, r1
    c398:	4770      	bx	lr

0000c39a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c39a:	f3ef 8110 	mrs	r1, PRIMASK
    c39e:	b672      	cpsid	i
    c3a0:	2200      	movs	r2, #0
    c3a2:	7002      	strb	r2, [r0, #0]
    c3a4:	b901      	cbnz	r1, c3a8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c3a6:	b662      	cpsie	i
    c3a8:	2000      	movs	r0, #0
    c3aa:	4770      	bx	lr

0000c3ac <mpsl_low_priority_process>:
    c3ac:	f7f7 bf00 	b.w	41b0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c3b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c3b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3b4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3b8:	280f      	cmp	r0, #15
    c3ba:	d001      	beq.n	c3c0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c3bc:	2000      	movs	r0, #0
    c3be:	4770      	bx	lr
    c3c0:	2001      	movs	r0, #1
    c3c2:	4770      	bx	lr

0000c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c3c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3c8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3cc:	280a      	cmp	r0, #10
    c3ce:	d001      	beq.n	c3d4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c3d0:	2000      	movs	r0, #0
    c3d2:	4770      	bx	lr
    c3d4:	2001      	movs	r0, #1
    c3d6:	4770      	bx	lr

0000c3d8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c3d8:	b500      	push	{lr}
    c3da:	f7ff fff3 	bl	c3c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c3de:	b120      	cbz	r0, c3ea <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c3e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3e4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c3e8:	b108      	cbz	r0, c3ee <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c3ea:	2000      	movs	r0, #0
    c3ec:	bd00      	pop	{pc}
    c3ee:	2001      	movs	r0, #1
    c3f0:	bd00      	pop	{pc}

0000c3f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c3f2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c3f6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c3fa:	280e      	cmp	r0, #14
    c3fc:	d001      	beq.n	c402 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c3fe:	2000      	movs	r0, #0
    c400:	4770      	bx	lr
    c402:	2001      	movs	r0, #1
    c404:	4770      	bx	lr

0000c406 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c406:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c40a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c40e:	2810      	cmp	r0, #16
    c410:	d001      	beq.n	c416 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c412:	2000      	movs	r0, #0
    c414:	4770      	bx	lr
    c416:	2001      	movs	r0, #1
    c418:	4770      	bx	lr

0000c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c41a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c41e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c422:	2806      	cmp	r0, #6
    c424:	d003      	beq.n	c42e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c426:	1c40      	adds	r0, r0, #1
    c428:	d001      	beq.n	c42e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c42a:	2000      	movs	r0, #0
    c42c:	4770      	bx	lr
    c42e:	2001      	movs	r0, #1
    c430:	4770      	bx	lr

0000c432 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c432:	b500      	push	{lr}
    c434:	f7ff fff1 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c438:	b148      	cbz	r0, c44e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c43a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c43e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c442:	2806      	cmp	r0, #6
    c444:	d303      	bcc.n	c44e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c446:	1c40      	adds	r0, r0, #1
    c448:	d001      	beq.n	c44e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c44a:	2001      	movs	r0, #1
    c44c:	bd00      	pop	{pc}
    c44e:	2000      	movs	r0, #0
    c450:	bd00      	pop	{pc}

0000c452 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c452:	b500      	push	{lr}
    c454:	f7ff ffe1 	bl	c41a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c458:	b138      	cbz	r0, c46a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c45a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c45e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c462:	2806      	cmp	r0, #6
    c464:	d303      	bcc.n	c46e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c466:	1c40      	adds	r0, r0, #1
    c468:	d001      	beq.n	c46e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c46a:	2000      	movs	r0, #0
    c46c:	bd00      	pop	{pc}
    c46e:	2001      	movs	r0, #1
    c470:	bd00      	pop	{pc}

0000c472 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c472:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c476:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c47a:	280d      	cmp	r0, #13
    c47c:	d001      	beq.n	c482 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c47e:	2000      	movs	r0, #0
    c480:	4770      	bx	lr
    c482:	2001      	movs	r0, #1
    c484:	4770      	bx	lr

0000c486 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c486:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c48a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c48e:	2808      	cmp	r0, #8
    c490:	d001      	beq.n	c496 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c492:	2000      	movs	r0, #0
    c494:	4770      	bx	lr
    c496:	2001      	movs	r0, #1
    c498:	4770      	bx	lr

0000c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c49a:	b4f0      	push	{r4, r5, r6, r7}
    c49c:	ea80 0c01 	eor.w	ip, r0, r1
    c4a0:	4603      	mov	r3, r0
    c4a2:	f01c 0f03 	tst.w	ip, #3
    c4a6:	d13c      	bne.n	c522 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c4a8:	f013 0f03 	tst.w	r3, #3
    c4ac:	d00b      	beq.n	c4c6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c4ae:	2a00      	cmp	r2, #0
    c4b0:	bf04      	itt	eq
    c4b2:	bcf0      	popeq	{r4, r5, r6, r7}
    c4b4:	4770      	bxeq	lr
    c4b6:	f811 cb01 	ldrb.w	ip, [r1], #1
    c4ba:	f803 cb01 	strb.w	ip, [r3], #1
    c4be:	1e52      	subs	r2, r2, #1
    c4c0:	f013 0f03 	tst.w	r3, #3
    c4c4:	d1f3      	bne.n	c4ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c4c6:	2a03      	cmp	r2, #3
    c4c8:	d94f      	bls.n	c56a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c4ca:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c4ce:	d24c      	bcs.n	c56a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c4d0:	f1c2 0c00 	rsb	ip, r2, #0
    c4d4:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c4d8:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c4dc:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c4e0:	f1cc 0c00 	rsb	ip, ip, #0
    c4e4:	f1bc 0f00 	cmp.w	ip, #0
    c4e8:	dd1b      	ble.n	c522 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c4ea:	1f0d      	subs	r5, r1, #4
    c4ec:	1f1c      	subs	r4, r3, #4
    c4ee:	f01c 0f01 	tst.w	ip, #1
    c4f2:	d003      	beq.n	c4fc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c4f4:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c4f8:	f844 6f04 	str.w	r6, [r4, #4]!
    c4fc:	ea5f 066c 	movs.w	r6, ip, asr #1
    c500:	d007      	beq.n	c512 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c502:	686f      	ldr	r7, [r5, #4]
    c504:	6067      	str	r7, [r4, #4]
    c506:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c50a:	f844 7f08 	str.w	r7, [r4, #8]!
    c50e:	1e76      	subs	r6, r6, #1
    c510:	d1f7      	bne.n	c502 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c512:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c516:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c51a:	f1cc 0c00 	rsb	ip, ip, #0
    c51e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c522:	2a00      	cmp	r2, #0
    c524:	bf04      	itt	eq
    c526:	bcf0      	popeq	{r4, r5, r6, r7}
    c528:	4770      	bxeq	lr
    c52a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c52e:	d226      	bcs.n	c57e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c530:	2a00      	cmp	r2, #0
    c532:	bfdc      	itt	le
    c534:	bcf0      	pople	{r4, r5, r6, r7}
    c536:	4770      	bxle	lr
    c538:	1e49      	subs	r1, r1, #1
    c53a:	1e5b      	subs	r3, r3, #1
    c53c:	f012 0f01 	tst.w	r2, #1
    c540:	d003      	beq.n	c54a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c542:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c546:	f803 cf01 	strb.w	ip, [r3, #1]!
    c54a:	1052      	asrs	r2, r2, #1
    c54c:	bf04      	itt	eq
    c54e:	bcf0      	popeq	{r4, r5, r6, r7}
    c550:	4770      	bxeq	lr
    c552:	f891 c001 	ldrb.w	ip, [r1, #1]
    c556:	f883 c001 	strb.w	ip, [r3, #1]
    c55a:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c55e:	f803 cf02 	strb.w	ip, [r3, #2]!
    c562:	1e52      	subs	r2, r2, #1
    c564:	d1f5      	bne.n	c552 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c566:	bcf0      	pop	{r4, r5, r6, r7}
    c568:	4770      	bx	lr
    c56a:	2a04      	cmp	r2, #4
    c56c:	d3d9      	bcc.n	c522 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c56e:	f851 cb04 	ldr.w	ip, [r1], #4
    c572:	1f12      	subs	r2, r2, #4
    c574:	f843 cb04 	str.w	ip, [r3], #4
    c578:	2a04      	cmp	r2, #4
    c57a:	d2f8      	bcs.n	c56e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c57c:	e7d1      	b.n	c522 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c57e:	f811 cb01 	ldrb.w	ip, [r1], #1
    c582:	f803 cb01 	strb.w	ip, [r3], #1
    c586:	1e52      	subs	r2, r2, #1
    c588:	d1f9      	bne.n	c57e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c58a:	bcf0      	pop	{r4, r5, r6, r7}
    c58c:	4770      	bx	lr

0000c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c58e:	b470      	push	{r4, r5, r6}
    c590:	4603      	mov	r3, r0
    c592:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c596:	f010 0f03 	tst.w	r0, #3
    c59a:	d009      	beq.n	c5b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c59c:	2a00      	cmp	r2, #0
    c59e:	bf04      	itt	eq
    c5a0:	bc70      	popeq	{r4, r5, r6}
    c5a2:	4770      	bxeq	lr
    c5a4:	f803 cb01 	strb.w	ip, [r3], #1
    c5a8:	1e52      	subs	r2, r2, #1
    c5aa:	f013 0f03 	tst.w	r3, #3
    c5ae:	d1f5      	bne.n	c59c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c5b0:	b2c9      	uxtb	r1, r1
    c5b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c5b6:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c5ba:	2a03      	cmp	r2, #3
    c5bc:	d939      	bls.n	c632 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c5be:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c5c2:	d236      	bcs.n	c632 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c5c4:	4251      	negs	r1, r2
    c5c6:	17cc      	asrs	r4, r1, #31
    c5c8:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c5cc:	1089      	asrs	r1, r1, #2
    c5ce:	424e      	negs	r6, r1
    c5d0:	2e00      	cmp	r6, #0
    c5d2:	dd11      	ble.n	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c5d4:	1f19      	subs	r1, r3, #4
    c5d6:	f016 0f01 	tst.w	r6, #1
    c5da:	bf18      	it	ne
    c5dc:	f841 5f04 	strne.w	r5, [r1, #4]!
    c5e0:	1074      	asrs	r4, r6, #1
    c5e2:	d004      	beq.n	c5ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c5e4:	604d      	str	r5, [r1, #4]
    c5e6:	f841 5f08 	str.w	r5, [r1, #8]!
    c5ea:	1e64      	subs	r4, r4, #1
    c5ec:	d1fa      	bne.n	c5e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c5ee:	4271      	negs	r1, r6
    c5f0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c5f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c5f8:	2a00      	cmp	r2, #0
    c5fa:	bf04      	itt	eq
    c5fc:	bc70      	popeq	{r4, r5, r6}
    c5fe:	4770      	bxeq	lr
    c600:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c604:	d21d      	bcs.n	c642 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c606:	2a00      	cmp	r2, #0
    c608:	bfdc      	itt	le
    c60a:	bc70      	pople	{r4, r5, r6}
    c60c:	4770      	bxle	lr
    c60e:	1e59      	subs	r1, r3, #1
    c610:	f012 0f01 	tst.w	r2, #1
    c614:	bf18      	it	ne
    c616:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c61a:	1052      	asrs	r2, r2, #1
    c61c:	bf04      	itt	eq
    c61e:	bc70      	popeq	{r4, r5, r6}
    c620:	4770      	bxeq	lr
    c622:	f881 c001 	strb.w	ip, [r1, #1]
    c626:	f801 cf02 	strb.w	ip, [r1, #2]!
    c62a:	1e52      	subs	r2, r2, #1
    c62c:	d1f9      	bne.n	c622 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c62e:	bc70      	pop	{r4, r5, r6}
    c630:	4770      	bx	lr
    c632:	2a04      	cmp	r2, #4
    c634:	d3e0      	bcc.n	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c636:	1f12      	subs	r2, r2, #4
    c638:	f843 5b04 	str.w	r5, [r3], #4
    c63c:	2a04      	cmp	r2, #4
    c63e:	d2fa      	bcs.n	c636 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c640:	e7da      	b.n	c5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c642:	f803 cb01 	strb.w	ip, [r3], #1
    c646:	1e52      	subs	r2, r2, #1
    c648:	d1fb      	bne.n	c642 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c64a:	bc70      	pop	{r4, r5, r6}
    c64c:	4770      	bx	lr
    c64e:	f04f 30ff 	mov.w	r0, #4294967295
    c652:	4770      	bx	lr
    c654:	2000      	movs	r0, #0
    c656:	4770      	bx	lr
    c658:	2000      	movs	r0, #0
    c65a:	4770      	bx	lr
    c65c:	f04f 30ff 	mov.w	r0, #4294967295
    c660:	4770      	bx	lr
    c662:	4770      	bx	lr
    c664:	4770      	bx	lr
    c666:	2000      	movs	r0, #0
    c668:	4770      	bx	lr
    c66a:	2100      	movs	r1, #0
    c66c:	7001      	strb	r1, [r0, #0]
    c66e:	4770      	bx	lr
    c670:	f04f 30ff 	mov.w	r0, #4294967295
    c674:	4770      	bx	lr
    c676:	f04f 30ff 	mov.w	r0, #4294967295
    c67a:	4770      	bx	lr
    c67c:	2100      	movs	r1, #0
    c67e:	7001      	strb	r1, [r0, #0]
    c680:	4770      	bx	lr
    c682:	f04f 30ff 	mov.w	r0, #4294967295
    c686:	4770      	bx	lr
    c688:	f04f 30ff 	mov.w	r0, #4294967295
    c68c:	4770      	bx	lr
    c68e:	7800      	ldrb	r0, [r0, #0]
    c690:	2800      	cmp	r0, #0
    c692:	d001      	beq.n	c698 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    c694:	f06f 0015 	mvn.w	r0, #21
    c698:	4770      	bx	lr
    c69a:	2000      	movs	r0, #0
    c69c:	4770      	bx	lr
    c69e:	2200      	movs	r2, #0
    c6a0:	f000 b802 	b.w	c6a8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000c6a4 <mpsl_fem_init>:
    c6a4:	f7f4 b88e 	b.w	7c4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000c6a8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    c6a8:	b570      	push	{r4, r5, r6, lr}
    c6aa:	4614      	mov	r4, r2
    c6ac:	460d      	mov	r5, r1
    c6ae:	1b00      	subs	r0, r0, r4
    c6b0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    c6b4:	4288      	cmp	r0, r1
    c6b6:	da01      	bge.n	c6bc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    c6b8:	4608      	mov	r0, r1
    c6ba:	e002      	b.n	c6c2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c6bc:	287f      	cmp	r0, #127	; 0x7f
    c6be:	dd00      	ble.n	c6c2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c6c0:	207f      	movs	r0, #127	; 0x7f
    c6c2:	b240      	sxtb	r0, r0
    c6c4:	f7f4 f8b2 	bl	82c <mpsl_tx_power_radio_supported_power_adjust>
    c6c8:	7028      	strb	r0, [r5, #0]
    c6ca:	706c      	strb	r4, [r5, #1]
    c6cc:	2100      	movs	r1, #0
    c6ce:	4420      	add	r0, r4
    c6d0:	70a9      	strb	r1, [r5, #2]
    c6d2:	b240      	sxtb	r0, r0
    c6d4:	bd70      	pop	{r4, r5, r6, pc}
    c6d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6da:	460c      	mov	r4, r1
    c6dc:	4681      	mov	r9, r0
    c6de:	7849      	ldrb	r1, [r1, #1]
    c6e0:	f100 0003 	add.w	r0, r0, #3
    c6e4:	f88d 1000 	strb.w	r1, [sp]
    c6e8:	f020 0003 	bic.w	r0, r0, #3
    c6ec:	78a1      	ldrb	r1, [r4, #2]
    c6ee:	0016      	movs	r6, r2
    c6f0:	4605      	mov	r5, r0
    c6f2:	f88d 1001 	strb.w	r1, [sp, #1]
    c6f6:	d000      	beq.n	c6fa <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    c6f8:	2000      	movs	r0, #0
    c6fa:	4669      	mov	r1, sp
    c6fc:	f7f8 f934 	bl	4968 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c700:	4428      	add	r0, r5
    c702:	78a1      	ldrb	r1, [r4, #2]
    c704:	4605      	mov	r5, r0
    c706:	b131      	cbz	r1, c716 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    c708:	8a63      	ldrh	r3, [r4, #18]
    c70a:	78e2      	ldrb	r2, [r4, #3]
    c70c:	b106      	cbz	r6, c710 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    c70e:	2000      	movs	r0, #0
    c710:	f7f8 fb92 	bl	4e38 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c714:	4405      	add	r5, r0
    c716:	7820      	ldrb	r0, [r4, #0]
    c718:	7861      	ldrb	r1, [r4, #1]
    c71a:	46b2      	mov	sl, r6
    c71c:	2600      	movs	r6, #0
    c71e:	4408      	add	r0, r1
    c720:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c724:	4637      	mov	r7, r6
    c726:	e008      	b.n	c73a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    c728:	7a23      	ldrb	r3, [r4, #8]
    c72a:	79e2      	ldrb	r2, [r4, #7]
    c72c:	79a1      	ldrb	r1, [r4, #6]
    c72e:	7960      	ldrb	r0, [r4, #5]
    c730:	f000 fe6e 	bl	d410 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c734:	1c7f      	adds	r7, r7, #1
    c736:	4406      	add	r6, r0
    c738:	b2ff      	uxtb	r7, r7
    c73a:	4547      	cmp	r7, r8
    c73c:	d3f4      	bcc.n	c728 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    c73e:	1ced      	adds	r5, r5, #3
    c740:	f025 0003 	bic.w	r0, r5, #3
    c744:	4604      	mov	r4, r0
    c746:	f1ba 0f00 	cmp.w	sl, #0
    c74a:	d000      	beq.n	c74e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    c74c:	2000      	movs	r0, #0
    c74e:	4632      	mov	r2, r6
    c750:	4641      	mov	r1, r8
    c752:	f7f8 fabd 	bl	4cd0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c756:	4420      	add	r0, r4
    c758:	1dc0      	adds	r0, r0, #7
    c75a:	f020 0007 	bic.w	r0, r0, #7
    c75e:	eba0 0009 	sub.w	r0, r0, r9
    c762:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c766 <sdc_soc_ecb_block_encrypt>:
    c766:	b530      	push	{r4, r5, lr}
    c768:	460d      	mov	r5, r1
    c76a:	b08d      	sub	sp, #52	; 0x34
    c76c:	4614      	mov	r4, r2
    c76e:	4601      	mov	r1, r0
    c770:	2210      	movs	r2, #16
    c772:	4668      	mov	r0, sp
    c774:	f7ff fe91 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c778:	2210      	movs	r2, #16
    c77a:	4629      	mov	r1, r5
    c77c:	a804      	add	r0, sp, #16
    c77e:	f7ff fe8c 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c782:	4668      	mov	r0, sp
    c784:	f000 ffc5 	bl	d712 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c788:	b118      	cbz	r0, c792 <sdc_soc_ecb_block_encrypt+0x2c>
    c78a:	f06f 0015 	mvn.w	r0, #21
    c78e:	b00d      	add	sp, #52	; 0x34
    c790:	bd30      	pop	{r4, r5, pc}
    c792:	2210      	movs	r2, #16
    c794:	4620      	mov	r0, r4
    c796:	a908      	add	r1, sp, #32
    c798:	f7ff fe7f 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c79c:	2000      	movs	r0, #0
    c79e:	e7f6      	b.n	c78e <sdc_soc_ecb_block_encrypt+0x28>

0000c7a0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c7a0:	b50e      	push	{r1, r2, r3, lr}
    c7a2:	4601      	mov	r1, r0
    c7a4:	4668      	mov	r0, sp
    c7a6:	f000 f818 	bl	c7da <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c7aa:	4668      	mov	r0, sp
    c7ac:	f001 fc38 	bl	e020 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c7b0:	bd0e      	pop	{r1, r2, r3, pc}
    c7b2:	b570      	push	{r4, r5, r6, lr}
    c7b4:	460c      	mov	r4, r1
    c7b6:	4605      	mov	r5, r0
    c7b8:	f7f8 f858 	bl	486c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c7bc:	2800      	cmp	r0, #0
    c7be:	d002      	beq.n	c7c6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    c7c0:	2d3e      	cmp	r5, #62	; 0x3e
    c7c2:	d001      	beq.n	c7c8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    c7c4:	2001      	movs	r0, #1
    c7c6:	bd70      	pop	{r4, r5, r6, pc}
    c7c8:	2c12      	cmp	r4, #18
    c7ca:	d004      	beq.n	c7d6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    c7cc:	4620      	mov	r0, r4
    c7ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c7d2:	f7f8 b85d 	b.w	4890 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c7d6:	2000      	movs	r0, #0
    c7d8:	bd70      	pop	{r4, r5, r6, pc}

0000c7da <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c7da:	880a      	ldrh	r2, [r1, #0]
    c7dc:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c7e0:	8002      	strh	r2, [r0, #0]
    c7e2:	884a      	ldrh	r2, [r1, #2]
    c7e4:	8042      	strh	r2, [r0, #2]
    c7e6:	784a      	ldrb	r2, [r1, #1]
    c7e8:	0993      	lsrs	r3, r2, #6
    c7ea:	2200      	movs	r2, #0
    c7ec:	7142      	strb	r2, [r0, #5]
    c7ee:	784b      	ldrb	r3, [r1, #1]
    c7f0:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c7f4:	b11b      	cbz	r3, c7fe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c7f6:	2b01      	cmp	r3, #1
    c7f8:	d005      	beq.n	c806 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c7fa:	2b02      	cmp	r3, #2
    c7fc:	d005      	beq.n	c80a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c7fe:	7102      	strb	r2, [r0, #4]
    c800:	1d09      	adds	r1, r1, #4
    c802:	6081      	str	r1, [r0, #8]
    c804:	4770      	bx	lr
    c806:	2201      	movs	r2, #1
    c808:	e7f9      	b.n	c7fe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c80a:	2202      	movs	r2, #2
    c80c:	e7f7      	b.n	c7fe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c80e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c80e:	b510      	push	{r4, lr}
    c810:	460c      	mov	r4, r1
    c812:	7809      	ldrb	r1, [r1, #0]
    c814:	7001      	strb	r1, [r0, #0]
    c816:	7841      	ldrb	r1, [r0, #1]
    c818:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c81c:	7041      	strb	r1, [r0, #1]
    c81e:	8822      	ldrh	r2, [r4, #0]
    c820:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c824:	4311      	orrs	r1, r2
    c826:	7041      	strb	r1, [r0, #1]
    c828:	78a2      	ldrb	r2, [r4, #2]
    c82a:	7082      	strb	r2, [r0, #2]
    c82c:	8862      	ldrh	r2, [r4, #2]
    c82e:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    c832:	0a12      	lsrs	r2, r2, #8
    c834:	70c2      	strb	r2, [r0, #3]
    c836:	7041      	strb	r1, [r0, #1]
    c838:	7922      	ldrb	r2, [r4, #4]
    c83a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c83e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    c842:	7041      	strb	r1, [r0, #1]
    c844:	7962      	ldrb	r2, [r4, #5]
    c846:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c84a:	7041      	strb	r1, [r0, #1]
    c84c:	68a1      	ldr	r1, [r4, #8]
    c84e:	1d02      	adds	r2, r0, #4
    c850:	4291      	cmp	r1, r2
    c852:	d006      	beq.n	c862 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    c854:	8862      	ldrh	r2, [r4, #2]
    c856:	2afb      	cmp	r2, #251	; 0xfb
    c858:	d300      	bcc.n	c85c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    c85a:	22fb      	movs	r2, #251	; 0xfb
    c85c:	1d00      	adds	r0, r0, #4
    c85e:	f7ff fe1c 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c862:	78a0      	ldrb	r0, [r4, #2]
    c864:	1d00      	adds	r0, r0, #4
    c866:	b2c0      	uxtb	r0, r0
    c868:	bd10      	pop	{r4, pc}

0000c86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c86e:	4604      	mov	r4, r0
    c870:	f891 c000 	ldrb.w	ip, [r1]
    c874:	2000      	movs	r0, #0
    c876:	2513      	movs	r5, #19
    c878:	260c      	movs	r6, #12
    c87a:	2705      	movs	r7, #5
    c87c:	223e      	movs	r2, #62	; 0x3e
    c87e:	23ff      	movs	r3, #255	; 0xff
    c880:	f1bc 0f1d 	cmp.w	ip, #29
    c884:	d27d      	bcs.n	c982 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    c886:	e8df f00c 	tbb	[pc, ip]
    c88a:	0f7c      	.short	0x0f7c
    c88c:	882e2826 	.word	0x882e2826
    c890:	d1bea492 	.word	0xd1bea492
    c894:	f5f7ded3 	.word	0xf5f7ded3
    c898:	547c7cf4 	.word	0x547c7cf4
    c89c:	f0f1f2f3 	.word	0xf0f1f2f3
    c8a0:	ecedeeef 	.word	0xecedeeef
    c8a4:	00e9eaeb 	.word	0x00e9eaeb
    c8a8:	7026      	strb	r6, [r4, #0]
    c8aa:	7908      	ldrb	r0, [r1, #4]
    c8ac:	70a0      	strb	r0, [r4, #2]
    c8ae:	7948      	ldrb	r0, [r1, #5]
    c8b0:	70e0      	strb	r0, [r4, #3]
    c8b2:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c8b6:	0a00      	lsrs	r0, r0, #8
    c8b8:	7120      	strb	r0, [r4, #4]
    c8ba:	79c8      	ldrb	r0, [r1, #7]
    c8bc:	7160      	strb	r0, [r4, #5]
    c8be:	7a08      	ldrb	r0, [r1, #8]
    c8c0:	71a0      	strb	r0, [r4, #6]
    c8c2:	8908      	ldrh	r0, [r1, #8]
    c8c4:	0a00      	lsrs	r0, r0, #8
    c8c6:	71e0      	strb	r0, [r4, #7]
    c8c8:	7a88      	ldrb	r0, [r1, #10]
    c8ca:	7220      	strb	r0, [r4, #8]
    c8cc:	8948      	ldrh	r0, [r1, #10]
    c8ce:	0a00      	lsrs	r0, r0, #8
    c8d0:	7260      	strb	r0, [r4, #9]
    c8d2:	2008      	movs	r0, #8
    c8d4:	e190      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c8d6:	2010      	movs	r0, #16
    c8d8:	e000      	b.n	c8dc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x72>
    c8da:	201a      	movs	r0, #26
    c8dc:	7020      	strb	r0, [r4, #0]
    c8de:	7908      	ldrb	r0, [r1, #4]
    c8e0:	70a0      	strb	r0, [r4, #2]
    c8e2:	2001      	movs	r0, #1
    c8e4:	e188      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c8e6:	7022      	strb	r2, [r4, #0]
    c8e8:	2001      	movs	r0, #1
    c8ea:	70a0      	strb	r0, [r4, #2]
    c8ec:	7908      	ldrb	r0, [r1, #4]
    c8ee:	70e0      	strb	r0, [r4, #3]
    c8f0:	7988      	ldrb	r0, [r1, #6]
    c8f2:	7120      	strb	r0, [r4, #4]
    c8f4:	88c8      	ldrh	r0, [r1, #6]
    c8f6:	0a00      	lsrs	r0, r0, #8
    c8f8:	7160      	strb	r0, [r4, #5]
    c8fa:	7a08      	ldrb	r0, [r1, #8]
    c8fc:	71a0      	strb	r0, [r4, #6]
    c8fe:	7a48      	ldrb	r0, [r1, #9]
    c900:	71e0      	strb	r0, [r4, #7]
    c902:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c906:	60a0      	str	r0, [r4, #8]
    c908:	89c8      	ldrh	r0, [r1, #14]
    c90a:	81a0      	strh	r0, [r4, #12]
    c90c:	7c08      	ldrb	r0, [r1, #16]
    c90e:	73a0      	strb	r0, [r4, #14]
    c910:	8a08      	ldrh	r0, [r1, #16]
    c912:	0a00      	lsrs	r0, r0, #8
    c914:	73e0      	strb	r0, [r4, #15]
    c916:	7c88      	ldrb	r0, [r1, #18]
    c918:	7420      	strb	r0, [r4, #16]
    c91a:	8a48      	ldrh	r0, [r1, #18]
    c91c:	0a00      	lsrs	r0, r0, #8
    c91e:	7460      	strb	r0, [r4, #17]
    c920:	7d08      	ldrb	r0, [r1, #20]
    c922:	74a0      	strb	r0, [r4, #18]
    c924:	8a88      	ldrh	r0, [r1, #20]
    c926:	0a00      	lsrs	r0, r0, #8
    c928:	74e0      	strb	r0, [r4, #19]
    c92a:	7d88      	ldrb	r0, [r1, #22]
    c92c:	7520      	strb	r0, [r4, #20]
    c92e:	4628      	mov	r0, r5
    c930:	e162      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c932:	7022      	strb	r2, [r4, #0]
    c934:	200a      	movs	r0, #10
    c936:	70a0      	strb	r0, [r4, #2]
    c938:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c93c:	70e0      	strb	r0, [r4, #3]
    c93e:	7888      	ldrb	r0, [r1, #2]
    c940:	7120      	strb	r0, [r4, #4]
    c942:	8848      	ldrh	r0, [r1, #2]
    c944:	0a00      	lsrs	r0, r0, #8
    c946:	7160      	strb	r0, [r4, #5]
    c948:	7908      	ldrb	r0, [r1, #4]
    c94a:	71a0      	strb	r0, [r4, #6]
    c94c:	7948      	ldrb	r0, [r1, #5]
    c94e:	71e0      	strb	r0, [r4, #7]
    c950:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c954:	60a0      	str	r0, [r4, #8]
    c956:	8948      	ldrh	r0, [r1, #10]
    c958:	81a0      	strh	r0, [r4, #12]
    c95a:	68c8      	ldr	r0, [r1, #12]
    c95c:	f8c4 000e 	str.w	r0, [r4, #14]
    c960:	8a08      	ldrh	r0, [r1, #16]
    c962:	8260      	strh	r0, [r4, #18]
    c964:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c968:	6160      	str	r0, [r4, #20]
    c96a:	8ac8      	ldrh	r0, [r1, #22]
    c96c:	8320      	strh	r0, [r4, #24]
    c96e:	7e08      	ldrb	r0, [r1, #24]
    c970:	76a0      	strb	r0, [r4, #26]
    c972:	8b08      	ldrh	r0, [r1, #24]
    c974:	0a00      	lsrs	r0, r0, #8
    c976:	76e0      	strb	r0, [r4, #27]
    c978:	7e88      	ldrb	r0, [r1, #26]
    c97a:	7720      	strb	r0, [r4, #28]
    c97c:	8b48      	ldrh	r0, [r1, #26]
    c97e:	0a00      	lsrs	r0, r0, #8
    c980:	e000      	b.n	c984 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    c982:	e09a      	b.n	caba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    c984:	7760      	strb	r0, [r4, #29]
    c986:	7f08      	ldrb	r0, [r1, #28]
    c988:	77a0      	strb	r0, [r4, #30]
    c98a:	8b88      	ldrh	r0, [r1, #28]
    c98c:	0a00      	lsrs	r0, r0, #8
    c98e:	77e0      	strb	r0, [r4, #31]
    c990:	7f88      	ldrb	r0, [r1, #30]
    c992:	f884 0020 	strb.w	r0, [r4, #32]
    c996:	201f      	movs	r0, #31
    c998:	e12e      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c99a:	7022      	strb	r2, [r4, #0]
    c99c:	2014      	movs	r0, #20
    c99e:	70a0      	strb	r0, [r4, #2]
    c9a0:	7908      	ldrb	r0, [r1, #4]
    c9a2:	70e0      	strb	r0, [r4, #3]
    c9a4:	8888      	ldrh	r0, [r1, #4]
    c9a6:	0a00      	lsrs	r0, r0, #8
    c9a8:	7120      	strb	r0, [r4, #4]
    c9aa:	7988      	ldrb	r0, [r1, #6]
    c9ac:	e0c2      	b.n	cb34 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    c9ae:	7022      	strb	r2, [r4, #0]
    c9b0:	2004      	movs	r0, #4
    c9b2:	70a0      	strb	r0, [r4, #2]
    c9b4:	7908      	ldrb	r0, [r1, #4]
    c9b6:	70e0      	strb	r0, [r4, #3]
    c9b8:	7988      	ldrb	r0, [r1, #6]
    c9ba:	7120      	strb	r0, [r4, #4]
    c9bc:	88c8      	ldrh	r0, [r1, #6]
    c9be:	0a00      	lsrs	r0, r0, #8
    c9c0:	7160      	strb	r0, [r4, #5]
    c9c2:	6888      	ldr	r0, [r1, #8]
    c9c4:	f8c4 0006 	str.w	r0, [r4, #6]
    c9c8:	68c8      	ldr	r0, [r1, #12]
    c9ca:	f8c4 000a 	str.w	r0, [r4, #10]
    c9ce:	200c      	movs	r0, #12
    c9d0:	e112      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c9d2:	7022      	strb	r2, [r4, #0]
    c9d4:	2003      	movs	r0, #3
    c9d6:	70a0      	strb	r0, [r4, #2]
    c9d8:	7908      	ldrb	r0, [r1, #4]
    c9da:	70e0      	strb	r0, [r4, #3]
    c9dc:	7988      	ldrb	r0, [r1, #6]
    c9de:	7120      	strb	r0, [r4, #4]
    c9e0:	88c8      	ldrh	r0, [r1, #6]
    c9e2:	0a00      	lsrs	r0, r0, #8
    c9e4:	7160      	strb	r0, [r4, #5]
    c9e6:	7a08      	ldrb	r0, [r1, #8]
    c9e8:	71a0      	strb	r0, [r4, #6]
    c9ea:	8908      	ldrh	r0, [r1, #8]
    c9ec:	0a00      	lsrs	r0, r0, #8
    c9ee:	71e0      	strb	r0, [r4, #7]
    c9f0:	7a88      	ldrb	r0, [r1, #10]
    c9f2:	7220      	strb	r0, [r4, #8]
    c9f4:	8948      	ldrh	r0, [r1, #10]
    c9f6:	0a00      	lsrs	r0, r0, #8
    c9f8:	7260      	strb	r0, [r4, #9]
    c9fa:	7b08      	ldrb	r0, [r1, #12]
    c9fc:	72a0      	strb	r0, [r4, #10]
    c9fe:	8988      	ldrh	r0, [r1, #12]
    ca00:	0a00      	lsrs	r0, r0, #8
    ca02:	72e0      	strb	r0, [r4, #11]
    ca04:	e0d2      	b.n	cbac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    ca06:	7022      	strb	r2, [r4, #0]
    ca08:	70a7      	strb	r7, [r4, #2]
    ca0a:	7908      	ldrb	r0, [r1, #4]
    ca0c:	70e0      	strb	r0, [r4, #3]
    ca0e:	8888      	ldrh	r0, [r1, #4]
    ca10:	0a00      	lsrs	r0, r0, #8
    ca12:	7120      	strb	r0, [r4, #4]
    ca14:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ca18:	f8c4 0005 	str.w	r0, [r4, #5]
    ca1c:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ca20:	f8c4 0009 	str.w	r0, [r4, #9]
    ca24:	89c8      	ldrh	r0, [r1, #14]
    ca26:	f8a4 000d 	strh.w	r0, [r4, #13]
    ca2a:	e0e4      	b.n	cbf6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38c>
    ca2c:	2011      	movs	r0, #17
    ca2e:	e047      	b.n	cac0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x256>
    ca30:	7027      	strb	r7, [r4, #0]
    ca32:	7908      	ldrb	r0, [r1, #4]
    ca34:	70a0      	strb	r0, [r4, #2]
    ca36:	7948      	ldrb	r0, [r1, #5]
    ca38:	70e0      	strb	r0, [r4, #3]
    ca3a:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ca3e:	0a00      	lsrs	r0, r0, #8
    ca40:	7120      	strb	r0, [r4, #4]
    ca42:	79c8      	ldrb	r0, [r1, #7]
    ca44:	e076      	b.n	cb34 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    ca46:	2008      	movs	r0, #8
    ca48:	7020      	strb	r0, [r4, #0]
    ca4a:	7908      	ldrb	r0, [r1, #4]
    ca4c:	70a0      	strb	r0, [r4, #2]
    ca4e:	7988      	ldrb	r0, [r1, #6]
    ca50:	70e0      	strb	r0, [r4, #3]
    ca52:	88c8      	ldrh	r0, [r1, #6]
    ca54:	0a00      	lsrs	r0, r0, #8
    ca56:	7120      	strb	r0, [r4, #4]
    ca58:	7a08      	ldrb	r0, [r1, #8]
    ca5a:	e06b      	b.n	cb34 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    ca5c:	e0b6      	b.n	cbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x362>
    ca5e:	e08a      	b.n	cb76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    ca60:	e06b      	b.n	cb3a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d0>
    ca62:	e096      	b.n	cb92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    ca64:	e0a4      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x346>
    ca66:	e05d      	b.n	cb24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    ca68:	e045      	b.n	caf6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28c>
    ca6a:	e041      	b.n	caf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    ca6c:	e030      	b.n	cad0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x266>
    ca6e:	e011      	b.n	ca94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22a>
    ca70:	e00d      	b.n	ca8e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    ca72:	e024      	b.n	cabe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x254>
    ca74:	e01b      	b.n	caae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    ca76:	e7ff      	b.n	ca78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20e>
    ca78:	2030      	movs	r0, #48	; 0x30
    ca7a:	7020      	strb	r0, [r4, #0]
    ca7c:	7908      	ldrb	r0, [r1, #4]
    ca7e:	70a0      	strb	r0, [r4, #2]
    ca80:	7988      	ldrb	r0, [r1, #6]
    ca82:	70e0      	strb	r0, [r4, #3]
    ca84:	88c8      	ldrh	r0, [r1, #6]
    ca86:	0a00      	lsrs	r0, r0, #8
    ca88:	7120      	strb	r0, [r4, #4]
    ca8a:	2003      	movs	r0, #3
    ca8c:	e0b4      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    ca8e:	7022      	strb	r2, [r4, #0]
    ca90:	2007      	movs	r0, #7
    ca92:	e054      	b.n	cb3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d4>
    ca94:	7022      	strb	r2, [r4, #0]
    ca96:	70a6      	strb	r6, [r4, #2]
    ca98:	7908      	ldrb	r0, [r1, #4]
    ca9a:	70e0      	strb	r0, [r4, #3]
    ca9c:	7988      	ldrb	r0, [r1, #6]
    ca9e:	7120      	strb	r0, [r4, #4]
    caa0:	88c8      	ldrh	r0, [r1, #6]
    caa2:	0a00      	lsrs	r0, r0, #8
    caa4:	7160      	strb	r0, [r4, #5]
    caa6:	7a08      	ldrb	r0, [r1, #8]
    caa8:	71a0      	strb	r0, [r4, #6]
    caaa:	7a48      	ldrb	r0, [r1, #9]
    caac:	e01d      	b.n	caea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    caae:	4620      	mov	r0, r4
    cab0:	1d09      	adds	r1, r1, #4
    cab2:	f7f7 fead 	bl	4810 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb0>
    cab6:	2800      	cmp	r0, #0
    cab8:	d109      	bne.n	cace <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x264>
    caba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cabe:	2057      	movs	r0, #87	; 0x57
    cac0:	7020      	strb	r0, [r4, #0]
    cac2:	7908      	ldrb	r0, [r1, #4]
    cac4:	70a0      	strb	r0, [r4, #2]
    cac6:	8888      	ldrh	r0, [r1, #4]
    cac8:	0a00      	lsrs	r0, r0, #8
    caca:	70e0      	strb	r0, [r4, #3]
    cacc:	2002      	movs	r0, #2
    cace:	e093      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cad0:	7022      	strb	r2, [r4, #0]
    cad2:	2012      	movs	r0, #18
    cad4:	70a0      	strb	r0, [r4, #2]
    cad6:	7908      	ldrb	r0, [r1, #4]
    cad8:	70e0      	strb	r0, [r4, #3]
    cada:	7948      	ldrb	r0, [r1, #5]
    cadc:	7120      	strb	r0, [r4, #4]
    cade:	7988      	ldrb	r0, [r1, #6]
    cae0:	7160      	strb	r0, [r4, #5]
    cae2:	88c8      	ldrh	r0, [r1, #6]
    cae4:	0a00      	lsrs	r0, r0, #8
    cae6:	71a0      	strb	r0, [r4, #6]
    cae8:	7a08      	ldrb	r0, [r1, #8]
    caea:	71e0      	strb	r0, [r4, #7]
    caec:	2006      	movs	r0, #6
    caee:	e083      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    caf0:	7022      	strb	r2, [r4, #0]
    caf2:	2020      	movs	r0, #32
    caf4:	e041      	b.n	cb7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x310>
    caf6:	7022      	strb	r2, [r4, #0]
    caf8:	2021      	movs	r0, #33	; 0x21
    cafa:	70a0      	strb	r0, [r4, #2]
    cafc:	7908      	ldrb	r0, [r1, #4]
    cafe:	70e0      	strb	r0, [r4, #3]
    cb00:	7948      	ldrb	r0, [r1, #5]
    cb02:	7120      	strb	r0, [r4, #4]
    cb04:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cb08:	0a00      	lsrs	r0, r0, #8
    cb0a:	7160      	strb	r0, [r4, #5]
    cb0c:	79c8      	ldrb	r0, [r1, #7]
    cb0e:	71a0      	strb	r0, [r4, #6]
    cb10:	7a08      	ldrb	r0, [r1, #8]
    cb12:	71e0      	strb	r0, [r4, #7]
    cb14:	7a48      	ldrb	r0, [r1, #9]
    cb16:	7220      	strb	r0, [r4, #8]
    cb18:	7a88      	ldrb	r0, [r1, #10]
    cb1a:	7260      	strb	r0, [r4, #9]
    cb1c:	7ac8      	ldrb	r0, [r1, #11]
    cb1e:	72a0      	strb	r0, [r4, #10]
    cb20:	2009      	movs	r0, #9
    cb22:	e069      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb24:	7023      	strb	r3, [r4, #0]
    cb26:	20a1      	movs	r0, #161	; 0xa1
    cb28:	70a0      	strb	r0, [r4, #2]
    cb2a:	7908      	ldrb	r0, [r1, #4]
    cb2c:	70e0      	strb	r0, [r4, #3]
    cb2e:	7948      	ldrb	r0, [r1, #5]
    cb30:	7120      	strb	r0, [r4, #4]
    cb32:	2000      	movs	r0, #0
    cb34:	7160      	strb	r0, [r4, #5]
    cb36:	2004      	movs	r0, #4
    cb38:	e05e      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb3a:	7023      	strb	r3, [r4, #0]
    cb3c:	20a2      	movs	r0, #162	; 0xa2
    cb3e:	70a0      	strb	r0, [r4, #2]
    cb40:	7908      	ldrb	r0, [r1, #4]
    cb42:	70e0      	strb	r0, [r4, #3]
    cb44:	8888      	ldrh	r0, [r1, #4]
    cb46:	0a00      	lsrs	r0, r0, #8
    cb48:	7120      	strb	r0, [r4, #4]
    cb4a:	7988      	ldrb	r0, [r1, #6]
    cb4c:	7160      	strb	r0, [r4, #5]
    cb4e:	88c8      	ldrh	r0, [r1, #6]
    cb50:	0a00      	lsrs	r0, r0, #8
    cb52:	71a0      	strb	r0, [r4, #6]
    cb54:	7a08      	ldrb	r0, [r1, #8]
    cb56:	71e0      	strb	r0, [r4, #7]
    cb58:	8908      	ldrh	r0, [r1, #8]
    cb5a:	0a00      	lsrs	r0, r0, #8
    cb5c:	7220      	strb	r0, [r4, #8]
    cb5e:	7a88      	ldrb	r0, [r1, #10]
    cb60:	7260      	strb	r0, [r4, #9]
    cb62:	8948      	ldrh	r0, [r1, #10]
    cb64:	0a00      	lsrs	r0, r0, #8
    cb66:	72a0      	strb	r0, [r4, #10]
    cb68:	7b08      	ldrb	r0, [r1, #12]
    cb6a:	72e0      	strb	r0, [r4, #11]
    cb6c:	8988      	ldrh	r0, [r1, #12]
    cb6e:	0a00      	lsrs	r0, r0, #8
    cb70:	7320      	strb	r0, [r4, #12]
    cb72:	200b      	movs	r0, #11
    cb74:	e040      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb76:	7023      	strb	r3, [r4, #0]
    cb78:	20a3      	movs	r0, #163	; 0xa3
    cb7a:	70a0      	strb	r0, [r4, #2]
    cb7c:	7908      	ldrb	r0, [r1, #4]
    cb7e:	70e0      	strb	r0, [r4, #3]
    cb80:	8888      	ldrh	r0, [r1, #4]
    cb82:	0a00      	lsrs	r0, r0, #8
    cb84:	7120      	strb	r0, [r4, #4]
    cb86:	7988      	ldrb	r0, [r1, #6]
    cb88:	7160      	strb	r0, [r4, #5]
    cb8a:	79c8      	ldrb	r0, [r1, #7]
    cb8c:	71a0      	strb	r0, [r4, #6]
    cb8e:	2005      	movs	r0, #5
    cb90:	e032      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb92:	7022      	strb	r2, [r4, #0]
    cb94:	70a5      	strb	r5, [r4, #2]
    cb96:	7908      	ldrb	r0, [r1, #4]
    cb98:	70e0      	strb	r0, [r4, #3]
    cb9a:	7948      	ldrb	r0, [r1, #5]
    cb9c:	7120      	strb	r0, [r4, #4]
    cb9e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cba2:	f8c4 0005 	str.w	r0, [r4, #5]
    cba6:	8948      	ldrh	r0, [r1, #10]
    cba8:	f8a4 0009 	strh.w	r0, [r4, #9]
    cbac:	200a      	movs	r0, #10
    cbae:	e023      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cbb0:	7023      	strb	r3, [r4, #0]
    cbb2:	20a4      	movs	r0, #164	; 0xa4
    cbb4:	70a0      	strb	r0, [r4, #2]
    cbb6:	7908      	ldrb	r0, [r1, #4]
    cbb8:	70e0      	strb	r0, [r4, #3]
    cbba:	8888      	ldrh	r0, [r1, #4]
    cbbc:	0a00      	lsrs	r0, r0, #8
    cbbe:	7120      	strb	r0, [r4, #4]
    cbc0:	7988      	ldrb	r0, [r1, #6]
    cbc2:	7160      	strb	r0, [r4, #5]
    cbc4:	79c8      	ldrb	r0, [r1, #7]
    cbc6:	71a0      	strb	r0, [r4, #6]
    cbc8:	2007      	movs	r0, #7
    cbca:	e015      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cbcc:	7023      	strb	r3, [r4, #0]
    cbce:	2080      	movs	r0, #128	; 0x80
    cbd0:	70a0      	strb	r0, [r4, #2]
    cbd2:	888a      	ldrh	r2, [r1, #4]
    cbd4:	f8a4 2003 	strh.w	r2, [r4, #3]
    cbd8:	88ca      	ldrh	r2, [r1, #6]
    cbda:	f8a4 2005 	strh.w	r2, [r4, #5]
    cbde:	7a0a      	ldrb	r2, [r1, #8]
    cbe0:	71e2      	strb	r2, [r4, #7]
    cbe2:	894a      	ldrh	r2, [r1, #10]
    cbe4:	8122      	strh	r2, [r4, #8]
    cbe6:	898a      	ldrh	r2, [r1, #12]
    cbe8:	8162      	strh	r2, [r4, #10]
    cbea:	89ca      	ldrh	r2, [r1, #14]
    cbec:	81a2      	strh	r2, [r4, #12]
    cbee:	7c09      	ldrb	r1, [r1, #16]
    cbf0:	f001 0101 	and.w	r1, r1, #1
    cbf4:	73a1      	strb	r1, [r4, #14]
    cbf6:	200d      	movs	r0, #13
    cbf8:	7060      	strb	r0, [r4, #1]
    cbfa:	1c80      	adds	r0, r0, #2
    cbfc:	e75d      	b.n	caba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>

0000cbfe <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    cbfe:	223e      	movs	r2, #62	; 0x3e
    cc00:	7002      	strb	r2, [r0, #0]
    cc02:	2201      	movs	r2, #1
    cc04:	7082      	strb	r2, [r0, #2]
    cc06:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cc0a:	70c2      	strb	r2, [r0, #3]
    cc0c:	788a      	ldrb	r2, [r1, #2]
    cc0e:	7102      	strb	r2, [r0, #4]
    cc10:	884a      	ldrh	r2, [r1, #2]
    cc12:	0a12      	lsrs	r2, r2, #8
    cc14:	7142      	strb	r2, [r0, #5]
    cc16:	790a      	ldrb	r2, [r1, #4]
    cc18:	7182      	strb	r2, [r0, #6]
    cc1a:	794a      	ldrb	r2, [r1, #5]
    cc1c:	71c2      	strb	r2, [r0, #7]
    cc1e:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cc22:	6082      	str	r2, [r0, #8]
    cc24:	894a      	ldrh	r2, [r1, #10]
    cc26:	8182      	strh	r2, [r0, #12]
    cc28:	7e0a      	ldrb	r2, [r1, #24]
    cc2a:	7382      	strb	r2, [r0, #14]
    cc2c:	8b0a      	ldrh	r2, [r1, #24]
    cc2e:	0a12      	lsrs	r2, r2, #8
    cc30:	73c2      	strb	r2, [r0, #15]
    cc32:	7e8a      	ldrb	r2, [r1, #26]
    cc34:	7402      	strb	r2, [r0, #16]
    cc36:	8b4a      	ldrh	r2, [r1, #26]
    cc38:	0a12      	lsrs	r2, r2, #8
    cc3a:	7442      	strb	r2, [r0, #17]
    cc3c:	7f0a      	ldrb	r2, [r1, #28]
    cc3e:	7482      	strb	r2, [r0, #18]
    cc40:	8b8a      	ldrh	r2, [r1, #28]
    cc42:	0a12      	lsrs	r2, r2, #8
    cc44:	74c2      	strb	r2, [r0, #19]
    cc46:	7f89      	ldrb	r1, [r1, #30]
    cc48:	7501      	strb	r1, [r0, #20]
    cc4a:	2113      	movs	r1, #19
    cc4c:	7041      	strb	r1, [r0, #1]
    cc4e:	4608      	mov	r0, r1
    cc50:	4770      	bx	lr
    cc52:	094a      	lsrs	r2, r1, #5
    cc54:	f001 011f 	and.w	r1, r1, #31
    cc58:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cc5c:	40c8      	lsrs	r0, r1
    cc5e:	f000 0001 	and.w	r0, r0, #1
    cc62:	4770      	bx	lr

0000cc64 <sdc_hci_data_put>:
    cc64:	b510      	push	{r4, lr}
    cc66:	f06f 0415 	mvn.w	r4, #21
    cc6a:	b120      	cbz	r0, cc76 <sdc_hci_data_put+0x12>
    cc6c:	f7ff fd98 	bl	c7a0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cc70:	b108      	cbz	r0, cc76 <sdc_hci_data_put+0x12>
    cc72:	2000      	movs	r0, #0
    cc74:	bd10      	pop	{r4, pc}
    cc76:	4620      	mov	r0, r4
    cc78:	bd10      	pop	{r4, pc}

0000cc7a <sdc_hci_get>:
    cc7a:	b510      	push	{r4, lr}
    cc7c:	460c      	mov	r4, r1
    cc7e:	b130      	cbz	r0, cc8e <sdc_hci_get+0x14>
    cc80:	b12c      	cbz	r4, cc8e <sdc_hci_get+0x14>
    cc82:	f7f7 fd6d 	bl	4760 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cc86:	b128      	cbz	r0, cc94 <sdc_hci_get+0x1a>
    cc88:	7020      	strb	r0, [r4, #0]
    cc8a:	2000      	movs	r0, #0
    cc8c:	bd10      	pop	{r4, pc}
    cc8e:	f06f 0015 	mvn.w	r0, #21
    cc92:	bd10      	pop	{r4, pc}
    cc94:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cc98:	bd10      	pop	{r4, pc}

0000cc9a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cc9a:	f003 b9b1 	b.w	10000 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cc9e <sdc_hci_cmd_cb_read_transmit_power_level>:
    cc9e:	f003 b9fd 	b.w	1009c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cca2 <sdc_hci_cmd_cb_set_event_mask>:
    cca2:	b510      	push	{r4, lr}
    cca4:	f7f7 fe04 	bl	48b0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cca8:	2000      	movs	r0, #0
    ccaa:	bd10      	pop	{r4, pc}

0000ccac <sdc_hci_cmd_cb_set_event_mask_page_2>:
    ccac:	b510      	push	{r4, lr}
    ccae:	f7f7 fe0f 	bl	48d0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    ccb2:	2000      	movs	r0, #0
    ccb4:	bd10      	pop	{r4, pc}

0000ccb6 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    ccb6:	f003 ba0d 	b.w	100d4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000ccba <sdc_hci_cmd_vs_conn_event_extend>:
    ccba:	b508      	push	{r3, lr}
    ccbc:	7800      	ldrb	r0, [r0, #0]
    ccbe:	f88d 0000 	strb.w	r0, [sp]
    ccc2:	4668      	mov	r0, sp
    ccc4:	f003 f8bd 	bl	fe42 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    ccc8:	bd08      	pop	{r3, pc}

0000ccca <sdc_hci_cmd_vs_conn_update>:
    ccca:	2001      	movs	r0, #1
    cccc:	4770      	bx	lr

0000ccce <sdc_hci_cmd_vs_event_length_set>:
    ccce:	f7fd b9d5 	b.w	a07c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ccd2 <sdc_hci_cmd_vs_llpm_mode_set>:
    ccd2:	2001      	movs	r0, #1
    ccd4:	4770      	bx	lr

0000ccd6 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    ccd6:	7881      	ldrb	r1, [r0, #2]
    ccd8:	8800      	ldrh	r0, [r0, #0]
    ccda:	f003 b865 	b.w	fda8 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000ccde <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ccde:	7800      	ldrb	r0, [r0, #0]
    cce0:	b100      	cbz	r0, cce4 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    cce2:	2001      	movs	r0, #1
    cce4:	f003 b85b 	b.w	fd9e <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000cce8 <sdc_hci_cmd_vs_set_adv_randomness>:
    cce8:	f003 b888 	b.w	fdfc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000ccec <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    ccec:	b510      	push	{r4, lr}
    ccee:	4604      	mov	r4, r0
    ccf0:	f7f7 f9d2 	bl	4098 <mpsl_temperature_get>
    ccf4:	17c1      	asrs	r1, r0, #31
    ccf6:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ccfa:	1080      	asrs	r0, r0, #2
    ccfc:	287f      	cmp	r0, #127	; 0x7f
    ccfe:	dd01      	ble.n	cd04 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    cd00:	207f      	movs	r0, #127	; 0x7f
    cd02:	e004      	b.n	cd0e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cd04:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    cd08:	4288      	cmp	r0, r1
    cd0a:	da00      	bge.n	cd0e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cd0c:	4608      	mov	r0, r1
    cd0e:	7020      	strb	r0, [r4, #0]
    cd10:	2000      	movs	r0, #0
    cd12:	bd10      	pop	{r4, pc}

0000cd14 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    cd14:	b570      	push	{r4, r5, r6, lr}
    cd16:	4605      	mov	r5, r0
    cd18:	2210      	movs	r2, #16
    cd1a:	2100      	movs	r1, #0
    cd1c:	f7ff fc37 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd20:	2210      	movs	r2, #16
    cd22:	2100      	movs	r1, #0
    cd24:	f105 0010 	add.w	r0, r5, #16
    cd28:	f7ff fc31 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd2c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    cd30:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    cd34:	1c40      	adds	r0, r0, #1
    cd36:	d10b      	bne.n	cd50 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd38:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cd3c:	1c40      	adds	r0, r0, #1
    cd3e:	d107      	bne.n	cd50 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd40:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cd44:	1c40      	adds	r0, r0, #1
    cd46:	d103      	bne.n	cd50 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cd48:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    cd4c:	1c40      	adds	r0, r0, #1
    cd4e:	d00b      	beq.n	cd68 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    cd50:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cd54:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cd58:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    cd5c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    cd60:	612a      	str	r2, [r5, #16]
    cd62:	6168      	str	r0, [r5, #20]
    cd64:	61a9      	str	r1, [r5, #24]
    cd66:	61eb      	str	r3, [r5, #28]
    cd68:	2000      	movs	r0, #0
    cd6a:	f7f8 fac7 	bl	52fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cd6e:	b918      	cbnz	r0, cd78 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    cd70:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cd74:	07c0      	lsls	r0, r0, #31
    cd76:	d118      	bne.n	cdaa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cd78:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    cd7c:	1c40      	adds	r0, r0, #1
    cd7e:	d10b      	bne.n	cd98 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd80:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    cd84:	1c40      	adds	r0, r0, #1
    cd86:	d107      	bne.n	cd98 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd88:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    cd8c:	1c40      	adds	r0, r0, #1
    cd8e:	d103      	bne.n	cd98 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cd90:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cd94:	1c40      	adds	r0, r0, #1
    cd96:	d008      	beq.n	cdaa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cd98:	f854 0f90 	ldr.w	r0, [r4, #144]!
    cd9c:	6861      	ldr	r1, [r4, #4]
    cd9e:	68a2      	ldr	r2, [r4, #8]
    cda0:	68e3      	ldr	r3, [r4, #12]
    cda2:	6028      	str	r0, [r5, #0]
    cda4:	6069      	str	r1, [r5, #4]
    cda6:	60aa      	str	r2, [r5, #8]
    cda8:	60eb      	str	r3, [r5, #12]
    cdaa:	2000      	movs	r0, #0
    cdac:	bd70      	pop	{r4, r5, r6, pc}

0000cdae <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    cdae:	b538      	push	{r3, r4, r5, lr}
    cdb0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cdb4:	4604      	mov	r4, r0
    cdb6:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cdba:	1c40      	adds	r0, r0, #1
    cdbc:	d105      	bne.n	cdca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    cdbe:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cdc2:	43c0      	mvns	r0, r0
    cdc4:	0400      	lsls	r0, r0, #16
    cdc6:	0c00      	lsrs	r0, r0, #16
    cdc8:	d03e      	beq.n	ce48 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cdca:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    cdce:	07c0      	lsls	r0, r0, #31
    cdd0:	d03a      	beq.n	ce48 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cdd2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cdd6:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    cdda:	f8ad 1000 	strh.w	r1, [sp]
    cdde:	f8c4 0001 	str.w	r0, [r4, #1]
    cde2:	f8bd 0000 	ldrh.w	r0, [sp]
    cde6:	f8a4 0005 	strh.w	r0, [r4, #5]
    cdea:	79a0      	ldrb	r0, [r4, #6]
    cdec:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    cdf0:	71a0      	strb	r0, [r4, #6]
    cdf2:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    cdf6:	1c40      	adds	r0, r0, #1
    cdf8:	d00f      	beq.n	ce1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cdfa:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cdfe:	1c40      	adds	r0, r0, #1
    ce00:	d00b      	beq.n	ce1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ce02:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    ce06:	1c40      	adds	r0, r0, #1
    ce08:	d007      	beq.n	ce1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ce0a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    ce0e:	1c40      	adds	r0, r0, #1
    ce10:	d003      	beq.n	ce1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ce12:	2000      	movs	r0, #0
    ce14:	f7f8 fa72 	bl	52fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    ce18:	b140      	cbz	r0, ce2c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    ce1a:	2210      	movs	r2, #16
    ce1c:	2100      	movs	r1, #0
    ce1e:	1de0      	adds	r0, r4, #7
    ce20:	f7ff fbb5 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce24:	2001      	movs	r0, #1
    ce26:	7020      	strb	r0, [r4, #0]
    ce28:	2000      	movs	r0, #0
    ce2a:	bd38      	pop	{r3, r4, r5, pc}
    ce2c:	f855 2f90 	ldr.w	r2, [r5, #144]!
    ce30:	6869      	ldr	r1, [r5, #4]
    ce32:	68a8      	ldr	r0, [r5, #8]
    ce34:	68eb      	ldr	r3, [r5, #12]
    ce36:	f8c4 2007 	str.w	r2, [r4, #7]
    ce3a:	f8c4 100b 	str.w	r1, [r4, #11]
    ce3e:	f8c4 000f 	str.w	r0, [r4, #15]
    ce42:	f8c4 3013 	str.w	r3, [r4, #19]
    ce46:	e7ed      	b.n	ce24 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    ce48:	2000      	movs	r0, #0
    ce4a:	e7ec      	b.n	ce26 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000ce4c <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    ce4c:	f002 bfeb 	b.w	fe26 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000ce50 <sdc_hci_cmd_ip_read_bd_addr>:
    ce50:	f003 b8e7 	b.w	10022 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000ce54 <sdc_hci_cmd_ip_read_local_version_information>:
    ce54:	f7fd b920 	b.w	a098 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000ce58 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    ce58:	f002 bd87 	b.w	f96a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000ce5c <sdc_hci_cmd_le_clear_filter_accept_list>:
    ce5c:	f002 bd9c 	b.w	f998 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000ce60 <sdc_hci_cmd_le_encrypt>:
    ce60:	f002 bda4 	b.w	f9ac <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000ce64 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    ce64:	8802      	ldrh	r2, [r0, #0]
    ce66:	800a      	strh	r2, [r1, #0]
    ce68:	f002 bda9 	b.w	f9be <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000ce6c <sdc_hci_cmd_le_long_term_key_request_reply>:
    ce6c:	8802      	ldrh	r2, [r0, #0]
    ce6e:	800a      	strh	r2, [r1, #0]
    ce70:	f002 bdbe 	b.w	f9f0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000ce74 <sdc_hci_cmd_le_rand>:
    ce74:	f002 bde6 	b.w	fa44 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000ce78 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    ce78:	f002 bdea 	b.w	fa50 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000ce7c <sdc_hci_cmd_le_read_buffer_size>:
    ce7c:	f7fd b806 	b.w	9e8c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000ce80 <sdc_hci_cmd_le_read_channel_map>:
    ce80:	f7fd b80e 	b.w	9ea0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000ce84 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    ce84:	f002 be1b 	b.w	fabe <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000ce88 <sdc_hci_cmd_le_read_max_data_length>:
    ce88:	f002 bdeb 	b.w	fa62 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000ce8c <sdc_hci_cmd_le_read_phy>:
    ce8c:	f7fd b830 	b.w	9ef0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000ce90 <sdc_hci_cmd_le_read_remote_features>:
    ce90:	f002 bdf0 	b.w	fa74 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000ce94 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    ce94:	f7fd b852 	b.w	9f3c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000ce98 <sdc_hci_cmd_le_read_transmit_power>:
    ce98:	f002 be08 	b.w	faac <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000ce9c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    ce9c:	f002 be13 	b.w	fac6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cea0 <sdc_hci_cmd_le_set_adv_data>:
    cea0:	f002 be26 	b.w	faf0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000cea4 <sdc_hci_cmd_le_set_adv_enable>:
    cea4:	f002 be39 	b.w	fb1a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000cea8 <sdc_hci_cmd_le_set_adv_params>:
    cea8:	f002 be6a 	b.w	fb80 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000ceac <sdc_hci_cmd_le_set_data_length>:
    ceac:	f002 befd 	b.w	fcaa <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000ceb0 <sdc_hci_cmd_le_set_data_related_address_changes>:
    ceb0:	f002 bf1b 	b.w	fcea <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000ceb4 <sdc_hci_cmd_le_set_default_phy>:
    ceb4:	f7fd b84c 	b.w	9f50 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000ceb8 <sdc_hci_cmd_le_set_event_mask>:
    ceb8:	b510      	push	{r4, lr}
    ceba:	f7f7 fcf1 	bl	48a0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cebe:	2000      	movs	r0, #0
    cec0:	bd10      	pop	{r4, pc}

0000cec2 <sdc_hci_cmd_le_set_phy>:
    cec2:	f002 bf1f 	b.w	fd04 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cec6 <sdc_hci_cmd_le_set_random_address>:
    cec6:	f002 bf36 	b.w	fd36 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000ceca <sdc_hci_cmd_le_set_scan_response_data>:
    ceca:	f002 bf42 	b.w	fd52 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000cece <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cece:	f002 bf55 	b.w	fd7c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000ced2 <sdc_hci_cmd_lc_disconnect>:
    ced2:	f002 bcfc 	b.w	f8ce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000ced6 <sdc_hci_cmd_lc_read_remote_version_information>:
    ced6:	f003 b8b0 	b.w	1003a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    ceda:	b570      	push	{r4, r5, r6, lr}
    cedc:	880b      	ldrh	r3, [r1, #0]
    cede:	7cc4      	ldrb	r4, [r0, #19]
    cee0:	f100 0518 	add.w	r5, r0, #24
    cee4:	f3c3 060e 	ubfx	r6, r3, #0, #15
    cee8:	8802      	ldrh	r2, [r0, #0]
    ceea:	4435      	add	r5, r6
    ceec:	1d64      	adds	r4, r4, #5
    ceee:	882d      	ldrh	r5, [r5, #0]
    cef0:	4422      	add	r2, r4
    cef2:	b292      	uxth	r2, r2
    cef4:	4425      	add	r5, r4
    cef6:	1e54      	subs	r4, r2, #1
    cef8:	442c      	add	r4, r5
    cefa:	fb94 f4f2 	sdiv	r4, r4, r2
    cefe:	fb02 6204 	mla	r2, r2, r4, r6
    cf02:	8840      	ldrh	r0, [r0, #2]
    cf04:	b292      	uxth	r2, r2
    cf06:	4290      	cmp	r0, r2
    cf08:	d903      	bls.n	cf12 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    cf0a:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    cf0e:	4310      	orrs	r0, r2
    cf10:	e002      	b.n	cf18 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    cf12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cf16:	4398      	bics	r0, r3
    cf18:	8008      	strh	r0, [r1, #0]
    cf1a:	bd70      	pop	{r4, r5, r6, pc}
    cf1c:	0442      	lsls	r2, r0, #17
    cf1e:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    cf22:	d107      	bne.n	cf34 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    cf24:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    cf28:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    cf2c:	4288      	cmp	r0, r1
    cf2e:	d001      	beq.n	cf34 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    cf30:	2001      	movs	r0, #1
    cf32:	4770      	bx	lr
    cf34:	2000      	movs	r0, #0
    cf36:	4770      	bx	lr

0000cf38 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    cf38:	8881      	ldrh	r1, [r0, #4]
    cf3a:	88c0      	ldrh	r0, [r0, #6]
    cf3c:	4288      	cmp	r0, r1
    cf3e:	d101      	bne.n	cf44 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    cf40:	2001      	movs	r0, #1
    cf42:	4770      	bx	lr
    cf44:	2000      	movs	r0, #0
    cf46:	4770      	bx	lr

0000cf48 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    cf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf4c:	460f      	mov	r7, r1
    cf4e:	4604      	mov	r4, r0
    cf50:	f100 0118 	add.w	r1, r0, #24
    cf54:	8880      	ldrh	r0, [r0, #4]
    cf56:	2600      	movs	r6, #0
    cf58:	f3c0 000e 	ubfx	r0, r0, #0, #15
    cf5c:	1845      	adds	r5, r0, r1
    cf5e:	603e      	str	r6, [r7, #0]
    cf60:	89e0      	ldrh	r0, [r4, #14]
    cf62:	2800      	cmp	r0, #0
    cf64:	d016      	beq.n	cf94 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    cf66:	8961      	ldrh	r1, [r4, #10]
    cf68:	4408      	add	r0, r1
    cf6a:	b280      	uxth	r0, r0
    cf6c:	8160      	strh	r0, [r4, #10]
    cf6e:	8829      	ldrh	r1, [r5, #0]
    cf70:	4288      	cmp	r0, r1
    cf72:	d905      	bls.n	cf80 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    cf74:	f44f 71a9 	mov.w	r1, #338	; 0x152
    cf78:	f04f 0014 	mov.w	r0, #20
    cf7c:	f7f7 faf6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf80:	d106      	bne.n	cf90 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    cf82:	f104 0104 	add.w	r1, r4, #4
    cf86:	4620      	mov	r0, r4
    cf88:	f7ff ffa7 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cf8c:	8166      	strh	r6, [r4, #10]
    cf8e:	603d      	str	r5, [r7, #0]
    cf90:	81e6      	strh	r6, [r4, #14]
    cf92:	2001      	movs	r0, #1
    cf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cf98 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    cf98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf9c:	4604      	mov	r4, r0
    cf9e:	f100 0318 	add.w	r3, r0, #24
    cfa2:	88c0      	ldrh	r0, [r0, #6]
    cfa4:	460e      	mov	r6, r1
    cfa6:	f3c0 070e 	ubfx	r7, r0, #0, #15
    cfaa:	8a20      	ldrh	r0, [r4, #16]
    cfac:	19d9      	adds	r1, r3, r7
    cfae:	b108      	cbz	r0, cfb4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    cfb0:	42b0      	cmp	r0, r6
    cfb2:	d202      	bcs.n	cfba <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    cfb4:	2000      	movs	r0, #0
    cfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cfba:	89a0      	ldrh	r0, [r4, #12]
    cfbc:	2500      	movs	r5, #0
    cfbe:	b140      	cbz	r0, cfd2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    cfc0:	f8b1 c000 	ldrh.w	ip, [r1]
    cfc4:	4560      	cmp	r0, ip
    cfc6:	d006      	beq.n	cfd6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    cfc8:	f240 2105 	movw	r1, #517	; 0x205
    cfcc:	2014      	movs	r0, #20
    cfce:	f7f7 facd 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfd2:	800d      	strh	r5, [r1, #0]
    cfd4:	e00e      	b.n	cff4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    cfd6:	f894 c013 	ldrb.w	ip, [r4, #19]
    cfda:	4418      	add	r0, r3
    cfdc:	f10c 0c05 	add.w	ip, ip, #5
    cfe0:	44bc      	add	ip, r7
    cfe2:	4460      	add	r0, ip
    cfe4:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    cfe8:	f820 cc03 	strh.w	ip, [r0, #-3]
    cfec:	f894 c016 	ldrb.w	ip, [r4, #22]
    cff0:	f800 cc01 	strb.w	ip, [r0, #-1]
    cff4:	89a0      	ldrh	r0, [r4, #12]
    cff6:	4430      	add	r0, r6
    cff8:	81a0      	strh	r0, [r4, #12]
    cffa:	8808      	ldrh	r0, [r1, #0]
    cffc:	4430      	add	r0, r6
    cffe:	8008      	strh	r0, [r1, #0]
    d000:	b12a      	cbz	r2, d00e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d002:	1da1      	adds	r1, r4, #6
    d004:	4620      	mov	r0, r4
    d006:	f7ff ff68 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d00a:	81a5      	strh	r5, [r4, #12]
    d00c:	e00a      	b.n	d024 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d00e:	7ce0      	ldrb	r0, [r4, #19]
    d010:	89a1      	ldrh	r1, [r4, #12]
    d012:	1d40      	adds	r0, r0, #5
    d014:	4438      	add	r0, r7
    d016:	4419      	add	r1, r3
    d018:	4408      	add	r0, r1
    d01a:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d01e:	82a1      	strh	r1, [r4, #20]
    d020:	7880      	ldrb	r0, [r0, #2]
    d022:	75a0      	strb	r0, [r4, #22]
    d024:	8225      	strh	r5, [r4, #16]
    d026:	2001      	movs	r0, #1
    d028:	e7c5      	b.n	cfb6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d02a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d02a:	1c80      	adds	r0, r0, #2
    d02c:	4770      	bx	lr

0000d02e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d02e:	b510      	push	{r4, lr}
    d030:	4604      	mov	r4, r0
    d032:	88c0      	ldrh	r0, [r0, #6]
    d034:	88a1      	ldrh	r1, [r4, #4]
    d036:	4281      	cmp	r1, r0
    d038:	d003      	beq.n	d042 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d03a:	8960      	ldrh	r0, [r4, #10]
    d03c:	b908      	cbnz	r0, d042 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d03e:	89e0      	ldrh	r0, [r4, #14]
    d040:	b108      	cbz	r0, d046 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d042:	2000      	movs	r0, #0
    d044:	bd10      	pop	{r4, pc}
    d046:	1d21      	adds	r1, r4, #4
    d048:	4620      	mov	r0, r4
    d04a:	f7ff ff46 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d04e:	2000      	movs	r0, #0
    d050:	81e0      	strh	r0, [r4, #14]
    d052:	2001      	movs	r0, #1
    d054:	bd10      	pop	{r4, pc}

0000d056 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d056:	b510      	push	{r4, lr}
    d058:	4604      	mov	r4, r0
    d05a:	f100 0218 	add.w	r2, r0, #24
    d05e:	88c0      	ldrh	r0, [r0, #6]
    d060:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d064:	4402      	add	r2, r0
    d066:	8820      	ldrh	r0, [r4, #0]
    d068:	2845      	cmp	r0, #69	; 0x45
    d06a:	d200      	bcs.n	d06e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d06c:	2045      	movs	r0, #69	; 0x45
    d06e:	4288      	cmp	r0, r1
    d070:	d204      	bcs.n	d07c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d072:	f240 1105 	movw	r1, #261	; 0x105
    d076:	2014      	movs	r0, #20
    d078:	f7f7 fa78 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d07c:	7ca0      	ldrb	r0, [r4, #18]
    d07e:	2800      	cmp	r0, #0
    d080:	d003      	beq.n	d08a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d082:	8810      	ldrh	r0, [r2, #0]
    d084:	4288      	cmp	r0, r1
    d086:	d201      	bcs.n	d08c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d088:	2000      	movs	r0, #0
    d08a:	bd10      	pop	{r4, pc}
    d08c:	8011      	strh	r1, [r2, #0]
    d08e:	1da1      	adds	r1, r4, #6
    d090:	4620      	mov	r0, r4
    d092:	f7ff ff22 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d096:	2000      	movs	r0, #0
    d098:	74a0      	strb	r0, [r4, #18]
    d09a:	2001      	movs	r0, #1
    d09c:	bd10      	pop	{r4, pc}

0000d09e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d09e:	b510      	push	{r4, lr}
    d0a0:	88c4      	ldrh	r4, [r0, #6]
    d0a2:	8883      	ldrh	r3, [r0, #4]
    d0a4:	4601      	mov	r1, r0
    d0a6:	f100 0218 	add.w	r2, r0, #24
    d0aa:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d0ae:	4410      	add	r0, r2
    d0b0:	42a3      	cmp	r3, r4
    d0b2:	d002      	beq.n	d0ba <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d0b4:	8949      	ldrh	r1, [r1, #10]
    d0b6:	2900      	cmp	r1, #0
    d0b8:	d000      	beq.n	d0bc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d0ba:	2000      	movs	r0, #0
    d0bc:	bd10      	pop	{r4, pc}

0000d0be <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d0be:	8803      	ldrh	r3, [r0, #0]
    d0c0:	2b45      	cmp	r3, #69	; 0x45
    d0c2:	d200      	bcs.n	d0c6 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d0c4:	2345      	movs	r3, #69	; 0x45
    d0c6:	8013      	strh	r3, [r2, #0]
    d0c8:	88c2      	ldrh	r2, [r0, #6]
    d0ca:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d0ce:	f100 0218 	add.w	r2, r0, #24
    d0d2:	441a      	add	r2, r3
    d0d4:	600a      	str	r2, [r1, #0]
    d0d6:	8980      	ldrh	r0, [r0, #12]
    d0d8:	4770      	bx	lr

0000d0da <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d0da:	7cc0      	ldrb	r0, [r0, #19]
    d0dc:	1d40      	adds	r0, r0, #5
    d0de:	4408      	add	r0, r1
    d0e0:	1ec0      	subs	r0, r0, #3
    d0e2:	6010      	str	r0, [r2, #0]
    d0e4:	8808      	ldrh	r0, [r1, #0]
    d0e6:	4770      	bx	lr

0000d0e8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0ec:	460e      	mov	r6, r1
    d0ee:	88c1      	ldrh	r1, [r0, #6]
    d0f0:	8902      	ldrh	r2, [r0, #8]
    d0f2:	4604      	mov	r4, r0
    d0f4:	f100 0818 	add.w	r8, r0, #24
    d0f8:	8800      	ldrh	r0, [r0, #0]
    d0fa:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d0fe:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d102:	2845      	cmp	r0, #69	; 0x45
    d104:	d200      	bcs.n	d108 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d106:	2045      	movs	r0, #69	; 0x45
    d108:	42b0      	cmp	r0, r6
    d10a:	d203      	bcs.n	d114 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d10c:	21c7      	movs	r1, #199	; 0xc7
    d10e:	2014      	movs	r0, #20
    d110:	f7f7 fa2c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d114:	4610      	mov	r0, r2
    d116:	f7ff ff01 	bl	cf1c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d11a:	b110      	cbz	r0, d122 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d11c:	2000      	movs	r0, #0
    d11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d122:	42af      	cmp	r7, r5
    d124:	d908      	bls.n	d138 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d126:	7ce1      	ldrb	r1, [r4, #19]
    d128:	1b78      	subs	r0, r7, r5
    d12a:	1a40      	subs	r0, r0, r1
    d12c:	1f40      	subs	r0, r0, #5
    d12e:	4286      	cmp	r6, r0
    d130:	dd02      	ble.n	d138 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d132:	2000      	movs	r0, #0
    d134:	74a0      	strb	r0, [r4, #18]
    d136:	e7f1      	b.n	d11c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d138:	eb08 0005 	add.w	r0, r8, r5
    d13c:	2101      	movs	r1, #1
    d13e:	8006      	strh	r6, [r0, #0]
    d140:	74a1      	strb	r1, [r4, #18]
    d142:	e7ec      	b.n	d11e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d144 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d144:	b538      	push	{r3, r4, r5, lr}
    d146:	88c4      	ldrh	r4, [r0, #6]
    d148:	8881      	ldrh	r1, [r0, #4]
    d14a:	f100 0218 	add.w	r2, r0, #24
    d14e:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d152:	441a      	add	r2, r3
    d154:	42a1      	cmp	r1, r4
    d156:	d010      	beq.n	d17a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d158:	8943      	ldrh	r3, [r0, #10]
    d15a:	89c5      	ldrh	r5, [r0, #14]
    d15c:	8812      	ldrh	r2, [r2, #0]
    d15e:	442b      	add	r3, r5
    d160:	4293      	cmp	r3, r2
    d162:	d308      	bcc.n	d176 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d164:	f8ad 1000 	strh.w	r1, [sp]
    d168:	4669      	mov	r1, sp
    d16a:	f7ff feb6 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d16e:	f8bd 0000 	ldrh.w	r0, [sp]
    d172:	42a0      	cmp	r0, r4
    d174:	d001      	beq.n	d17a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d176:	2001      	movs	r0, #1
    d178:	bd38      	pop	{r3, r4, r5, pc}
    d17a:	2000      	movs	r0, #0
    d17c:	bd38      	pop	{r3, r4, r5, pc}

0000d17e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d17e:	b570      	push	{r4, r5, r6, lr}
    d180:	88c6      	ldrh	r6, [r0, #6]
    d182:	8885      	ldrh	r5, [r0, #4]
    d184:	4603      	mov	r3, r0
    d186:	f100 0418 	add.w	r4, r0, #24
    d18a:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d18e:	4420      	add	r0, r4
    d190:	42b5      	cmp	r5, r6
    d192:	d102      	bne.n	d19a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d194:	2000      	movs	r0, #0
    d196:	81d8      	strh	r0, [r3, #14]
    d198:	bd70      	pop	{r4, r5, r6, pc}
    d19a:	8804      	ldrh	r4, [r0, #0]
    d19c:	895d      	ldrh	r5, [r3, #10]
    d19e:	7cde      	ldrb	r6, [r3, #19]
    d1a0:	1b64      	subs	r4, r4, r5
    d1a2:	4435      	add	r5, r6
    d1a4:	4428      	add	r0, r5
    d1a6:	880d      	ldrh	r5, [r1, #0]
    d1a8:	b2a4      	uxth	r4, r4
    d1aa:	1c80      	adds	r0, r0, #2
    d1ac:	42a5      	cmp	r5, r4
    d1ae:	d900      	bls.n	d1b2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d1b0:	800c      	strh	r4, [r1, #0]
    d1b2:	895c      	ldrh	r4, [r3, #10]
    d1b4:	b124      	cbz	r4, d1c0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d1b6:	2400      	movs	r4, #0
    d1b8:	7014      	strb	r4, [r2, #0]
    d1ba:	8809      	ldrh	r1, [r1, #0]
    d1bc:	81d9      	strh	r1, [r3, #14]
    d1be:	bd70      	pop	{r4, r5, r6, pc}
    d1c0:	2401      	movs	r4, #1
    d1c2:	e7f9      	b.n	d1b8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d1c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1c8:	461d      	mov	r5, r3
    d1ca:	4616      	mov	r6, r2
    d1cc:	9f06      	ldr	r7, [sp, #24]
    d1ce:	460b      	mov	r3, r1
    d1d0:	4604      	mov	r4, r0
    d1d2:	463a      	mov	r2, r7
    d1d4:	4629      	mov	r1, r5
    d1d6:	4630      	mov	r0, r6
    d1d8:	f000 f839 	bl	d24e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d1dc:	4283      	cmp	r3, r0
    d1de:	d201      	bcs.n	d1e4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d1e0:	219f      	movs	r1, #159	; 0x9f
    d1e2:	e012      	b.n	d20a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d1e4:	07a0      	lsls	r0, r4, #30
    d1e6:	d001      	beq.n	d1ec <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d1e8:	21a0      	movs	r1, #160	; 0xa0
    d1ea:	e00e      	b.n	d20a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d1ec:	2218      	movs	r2, #24
    d1ee:	2100      	movs	r1, #0
    d1f0:	4620      	mov	r0, r4
    d1f2:	f7ff f9cc 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d1f6:	19a8      	adds	r0, r5, r6
    d1f8:	1d40      	adds	r0, r0, #5
    d1fa:	4378      	muls	r0, r7
    d1fc:	b280      	uxth	r0, r0
    d1fe:	74e5      	strb	r5, [r4, #19]
    d200:	8060      	strh	r0, [r4, #2]
    d202:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d206:	d903      	bls.n	d210 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d208:	21a5      	movs	r1, #165	; 0xa5
    d20a:	2014      	movs	r0, #20
    d20c:	f7f7 f9ae 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d210:	8026      	strh	r6, [r4, #0]
    d212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d216 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d216:	b570      	push	{r4, r5, r6, lr}
    d218:	460b      	mov	r3, r1
    d21a:	4604      	mov	r4, r0
    d21c:	f100 0118 	add.w	r1, r0, #24
    d220:	8902      	ldrh	r2, [r0, #8]
    d222:	8880      	ldrh	r0, [r0, #4]
    d224:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d228:	440d      	add	r5, r1
    d22a:	4282      	cmp	r2, r0
    d22c:	d101      	bne.n	d232 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d22e:	2000      	movs	r0, #0
    d230:	bd70      	pop	{r4, r5, r6, pc}
    d232:	b123      	cbz	r3, d23e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d234:	7ce2      	ldrb	r2, [r4, #19]
    d236:	1ca9      	adds	r1, r5, #2
    d238:	4618      	mov	r0, r3
    d23a:	f7ff f92e 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d23e:	882d      	ldrh	r5, [r5, #0]
    d240:	f104 0108 	add.w	r1, r4, #8
    d244:	4620      	mov	r0, r4
    d246:	f7ff fe48 	bl	ceda <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d24a:	4628      	mov	r0, r5
    d24c:	bd70      	pop	{r4, r5, r6, pc}

0000d24e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d24e:	4401      	add	r1, r0
    d250:	1d49      	adds	r1, r1, #5
    d252:	4351      	muls	r1, r2
    d254:	b28a      	uxth	r2, r1
    d256:	2100      	movs	r1, #0
    d258:	2845      	cmp	r0, #69	; 0x45
    d25a:	d202      	bcs.n	d262 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d25c:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d260:	b281      	uxth	r1, r0
    d262:	3218      	adds	r2, #24
    d264:	1850      	adds	r0, r2, r1
    d266:	b280      	uxth	r0, r0
    d268:	4770      	bx	lr

0000d26a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d26a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d26e:	4688      	mov	r8, r1
    d270:	88c1      	ldrh	r1, [r0, #6]
    d272:	4604      	mov	r4, r0
    d274:	8900      	ldrh	r0, [r0, #8]
    d276:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d27a:	f104 0518 	add.w	r5, r4, #24
    d27e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d282:	eb05 0906 	add.w	r9, r5, r6
    d286:	f7ff fe49 	bl	cf1c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d28a:	2200      	movs	r2, #0
    d28c:	b998      	cbnz	r0, d2b6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d28e:	8820      	ldrh	r0, [r4, #0]
    d290:	2845      	cmp	r0, #69	; 0x45
    d292:	d200      	bcs.n	d296 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d294:	2045      	movs	r0, #69	; 0x45
    d296:	42b7      	cmp	r7, r6
    d298:	d906      	bls.n	d2a8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d29a:	7ce3      	ldrb	r3, [r4, #19]
    d29c:	1bb9      	subs	r1, r7, r6
    d29e:	1ac9      	subs	r1, r1, r3
    d2a0:	1f49      	subs	r1, r1, #5
    d2a2:	4281      	cmp	r1, r0
    d2a4:	da00      	bge.n	d2a8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d2a6:	4608      	mov	r0, r1
    d2a8:	89a1      	ldrh	r1, [r4, #12]
    d2aa:	b111      	cbz	r1, d2b2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d2ac:	f8b9 3000 	ldrh.w	r3, [r9]
    d2b0:	1ac0      	subs	r0, r0, r3
    d2b2:	4540      	cmp	r0, r8
    d2b4:	da03      	bge.n	d2be <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d2b6:	8222      	strh	r2, [r4, #16]
    d2b8:	2000      	movs	r0, #0
    d2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d2be:	7ce0      	ldrb	r0, [r4, #19]
    d2c0:	4429      	add	r1, r5
    d2c2:	1d40      	adds	r0, r0, #5
    d2c4:	4430      	add	r0, r6
    d2c6:	4408      	add	r0, r1
    d2c8:	f8a4 8010 	strh.w	r8, [r4, #16]
    d2cc:	1ec0      	subs	r0, r0, #3
    d2ce:	e7f4      	b.n	d2ba <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d2d0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d2d0:	2100      	movs	r1, #0
    d2d2:	8181      	strh	r1, [r0, #12]
    d2d4:	8201      	strh	r1, [r0, #16]
    d2d6:	4770      	bx	lr

0000d2d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d2d8:	b570      	push	{r4, r5, r6, lr}
    d2da:	2300      	movs	r3, #0
    d2dc:	f1a1 0208 	sub.w	r2, r1, #8
    d2e0:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d2e4:	42a2      	cmp	r2, r4
    d2e6:	d304      	bcc.n	d2f2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d2e8:	f240 11cd 	movw	r1, #461	; 0x1cd
    d2ec:	2015      	movs	r0, #21
    d2ee:	f7f7 f93d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2f2:	6802      	ldr	r2, [r0, #0]
    d2f4:	b90a      	cbnz	r2, d2fa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d2f6:	e01e      	b.n	d336 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d2f8:	4610      	mov	r0, r2
    d2fa:	6802      	ldr	r2, [r0, #0]
    d2fc:	8893      	ldrh	r3, [r2, #4]
    d2fe:	428b      	cmp	r3, r1
    d300:	d002      	beq.n	d308 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d302:	6813      	ldr	r3, [r2, #0]
    d304:	2b00      	cmp	r3, #0
    d306:	d1f7      	bne.n	d2f8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d308:	8894      	ldrh	r4, [r2, #4]
    d30a:	4613      	mov	r3, r2
    d30c:	428c      	cmp	r4, r1
    d30e:	d101      	bne.n	d314 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d310:	6811      	ldr	r1, [r2, #0]
    d312:	e00d      	b.n	d330 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d314:	f101 0508 	add.w	r5, r1, #8
    d318:	b2ae      	uxth	r6, r5
    d31a:	2500      	movs	r5, #0
    d31c:	42b4      	cmp	r4, r6
    d31e:	d309      	bcc.n	d334 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d320:	1a64      	subs	r4, r4, r1
    d322:	4411      	add	r1, r2
    d324:	600d      	str	r5, [r1, #0]
    d326:	808c      	strh	r4, [r1, #4]
    d328:	6802      	ldr	r2, [r0, #0]
    d32a:	6812      	ldr	r2, [r2, #0]
    d32c:	6002      	str	r2, [r0, #0]
    d32e:	600a      	str	r2, [r1, #0]
    d330:	6001      	str	r1, [r0, #0]
    d332:	e000      	b.n	d336 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d334:	2300      	movs	r3, #0
    d336:	4618      	mov	r0, r3
    d338:	bd70      	pop	{r4, r5, r6, pc}

0000d33a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d33a:	b510      	push	{r4, lr}
    d33c:	000c      	movs	r4, r1
    d33e:	d004      	beq.n	d34a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d340:	2c08      	cmp	r4, #8
    d342:	d207      	bcs.n	d354 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d344:	f240 1195 	movw	r1, #405	; 0x195
    d348:	e00a      	b.n	d360 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d34a:	b108      	cbz	r0, d350 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d34c:	2100      	movs	r1, #0
    d34e:	6001      	str	r1, [r0, #0]
    d350:	2000      	movs	r0, #0
    d352:	bd10      	pop	{r4, pc}
    d354:	b158      	cbz	r0, d36e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d356:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d35a:	d304      	bcc.n	d366 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d35c:	f240 11a7 	movw	r1, #423	; 0x1a7
    d360:	2015      	movs	r0, #21
    d362:	f7f7 f903 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d366:	b2a1      	uxth	r1, r4
    d368:	6800      	ldr	r0, [r0, #0]
    d36a:	f000 f814 	bl	d396 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d36e:	1d20      	adds	r0, r4, #4
    d370:	bd10      	pop	{r4, pc}

0000d372 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d372:	2100      	movs	r1, #0
    d374:	6802      	ldr	r2, [r0, #0]
    d376:	e003      	b.n	d380 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d378:	8893      	ldrh	r3, [r2, #4]
    d37a:	6812      	ldr	r2, [r2, #0]
    d37c:	4419      	add	r1, r3
    d37e:	b289      	uxth	r1, r1
    d380:	2a00      	cmp	r2, #0
    d382:	d1f9      	bne.n	d378 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d384:	f000 b807 	b.w	d396 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d388 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d388:	2300      	movs	r3, #0
    d38a:	600b      	str	r3, [r1, #0]
    d38c:	808a      	strh	r2, [r1, #4]
    d38e:	6802      	ldr	r2, [r0, #0]
    d390:	600a      	str	r2, [r1, #0]
    d392:	6001      	str	r1, [r0, #0]
    d394:	4770      	bx	lr
    d396:	2300      	movs	r3, #0
    d398:	6043      	str	r3, [r0, #4]
    d39a:	1d02      	adds	r2, r0, #4
    d39c:	8101      	strh	r1, [r0, #8]
    d39e:	6002      	str	r2, [r0, #0]
    d3a0:	4770      	bx	lr

0000d3a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d3a2:	b51c      	push	{r2, r3, r4, lr}
    d3a4:	4604      	mov	r4, r0
    d3a6:	2000      	movs	r0, #0
    d3a8:	9001      	str	r0, [sp, #4]
    d3aa:	9000      	str	r0, [sp, #0]
    d3ac:	f88d 4006 	strb.w	r4, [sp, #6]
    d3b0:	e00a      	b.n	d3c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d3b2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d3b6:	4621      	mov	r1, r4
    d3b8:	f7f7 fb5a 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d3bc:	b120      	cbz	r0, d3c8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d3be:	f240 21a5 	movw	r1, #677	; 0x2a5
    d3c2:	2017      	movs	r0, #23
    d3c4:	f7f7 f8d2 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3c8:	4668      	mov	r0, sp
    d3ca:	f7f7 fb09 	bl	49e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d3ce:	2800      	cmp	r0, #0
    d3d0:	d0ef      	beq.n	d3b2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d3d2:	bd1c      	pop	{r2, r3, r4, pc}

0000d3d4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d3d4:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d3d8:	3aff      	subs	r2, #255	; 0xff
    d3da:	d001      	beq.n	d3e0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d3dc:	2902      	cmp	r1, #2
    d3de:	d301      	bcc.n	d3e4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d3e0:	2000      	movs	r0, #0
    d3e2:	4770      	bx	lr
    d3e4:	f7f7 bb76 	b.w	4ad4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d3e8:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d3ec:	3aff      	subs	r2, #255	; 0xff
    d3ee:	d001      	beq.n	d3f4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d3f0:	2902      	cmp	r1, #2
    d3f2:	d301      	bcc.n	d3f8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d3f4:	2000      	movs	r0, #0
    d3f6:	4770      	bx	lr
    d3f8:	f7f7 bb94 	b.w	4b24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    d3fc:	b510      	push	{r4, lr}
    d3fe:	4604      	mov	r4, r0
    d400:	f7f7 fbdc 	bl	4bbc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    d404:	42a0      	cmp	r0, r4
    d406:	d901      	bls.n	d40c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    d408:	2001      	movs	r0, #1
    d40a:	bd10      	pop	{r4, pc}
    d40c:	2000      	movs	r0, #0
    d40e:	bd10      	pop	{r4, pc}

0000d410 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d410:	b570      	push	{r4, r5, r6, lr}
    d412:	460e      	mov	r6, r1
    d414:	461d      	mov	r5, r3
    d416:	4611      	mov	r1, r2
    d418:	f000 f813 	bl	d442 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d41c:	4604      	mov	r4, r0
    d41e:	4629      	mov	r1, r5
    d420:	4630      	mov	r0, r6
    d422:	f000 f804 	bl	d42e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d426:	4420      	add	r0, r4
    d428:	1d00      	adds	r0, r0, #4
    d42a:	b280      	uxth	r0, r0
    d42c:	bd70      	pop	{r4, r5, r6, pc}
    d42e:	b510      	push	{r4, lr}
    d430:	460a      	mov	r2, r1
    d432:	2109      	movs	r1, #9
    d434:	f7ff ff0b 	bl	d24e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d438:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d43c:	1cc0      	adds	r0, r0, #3
    d43e:	4008      	ands	r0, r1
    d440:	bd10      	pop	{r4, pc}
    d442:	b510      	push	{r4, lr}
    d444:	460a      	mov	r2, r1
    d446:	210a      	movs	r1, #10
    d448:	f7ff ff01 	bl	d24e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d44c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d450:	1cc0      	adds	r0, r0, #3
    d452:	4008      	ands	r0, r1
    d454:	bd10      	pop	{r4, pc}
    d456:	b109      	cbz	r1, d45c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d458:	2100      	movs	r1, #0
    d45a:	e000      	b.n	d45e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d45c:	2102      	movs	r1, #2
    d45e:	1843      	adds	r3, r0, r1
    d460:	7d1a      	ldrb	r2, [r3, #20]
    d462:	2a02      	cmp	r2, #2
    d464:	d008      	beq.n	d478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d466:	7d5b      	ldrb	r3, [r3, #21]
    d468:	2b02      	cmp	r3, #2
    d46a:	d009      	beq.n	d480 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d46c:	2a03      	cmp	r2, #3
    d46e:	d003      	beq.n	d478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d470:	2b03      	cmp	r3, #3
    d472:	d005      	beq.n	d480 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d474:	2000      	movs	r0, #0
    d476:	4770      	bx	lr
    d478:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d47c:	8b00      	ldrh	r0, [r0, #24]
    d47e:	4770      	bx	lr
    d480:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d484:	8b40      	ldrh	r0, [r0, #26]
    d486:	4770      	bx	lr
    d488:	b109      	cbz	r1, d48e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d48a:	2100      	movs	r1, #0
    d48c:	e000      	b.n	d490 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d48e:	2102      	movs	r1, #2
    d490:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d494:	8b01      	ldrh	r1, [r0, #24]
    d496:	b911      	cbnz	r1, d49e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d498:	8b40      	ldrh	r0, [r0, #26]
    d49a:	2800      	cmp	r0, #0
    d49c:	d000      	beq.n	d4a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d49e:	2001      	movs	r0, #1
    d4a0:	4770      	bx	lr
    d4a2:	b538      	push	{r3, r4, r5, lr}
    d4a4:	7883      	ldrb	r3, [r0, #2]
    d4a6:	f88d 3000 	strb.w	r3, [sp]
    d4aa:	9b00      	ldr	r3, [sp, #0]
    d4ac:	9300      	str	r3, [sp, #0]
    d4ae:	f89d 3000 	ldrb.w	r3, [sp]
    d4b2:	b95b      	cbnz	r3, d4cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d4b4:	2400      	movs	r4, #0
    d4b6:	b10a      	cbz	r2, d4bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d4b8:	2300      	movs	r3, #0
    d4ba:	e000      	b.n	d4be <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d4bc:	2302      	movs	r3, #2
    d4be:	18c2      	adds	r2, r0, r3
    d4c0:	7d15      	ldrb	r5, [r2, #20]
    d4c2:	2d02      	cmp	r5, #2
    d4c4:	d004      	beq.n	d4d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d4c6:	7d52      	ldrb	r2, [r2, #21]
    d4c8:	2a02      	cmp	r2, #2
    d4ca:	d004      	beq.n	d4d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d4cc:	2000      	movs	r0, #0
    d4ce:	bd38      	pop	{r3, r4, r5, pc}
    d4d0:	461a      	mov	r2, r3
    d4d2:	1c5b      	adds	r3, r3, #1
    d4d4:	e000      	b.n	d4d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d4d6:	1c5a      	adds	r2, r3, #1
    d4d8:	b179      	cbz	r1, d4fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d4da:	18c5      	adds	r5, r0, r3
    d4dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d4e0:	752c      	strb	r4, [r5, #20]
    d4e2:	831c      	strh	r4, [r3, #24]
    d4e4:	2303      	movs	r3, #3
    d4e6:	1884      	adds	r4, r0, r2
    d4e8:	7523      	strb	r3, [r4, #20]
    d4ea:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d4ee:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d4f2:	685b      	ldr	r3, [r3, #4]
    d4f4:	600b      	str	r3, [r1, #0]
    d4f6:	8b00      	ldrh	r0, [r0, #24]
    d4f8:	8088      	strh	r0, [r1, #4]
    d4fa:	2001      	movs	r0, #1
    d4fc:	bd38      	pop	{r3, r4, r5, pc}
    d4fe:	b510      	push	{r4, lr}
    d500:	b109      	cbz	r1, d506 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d502:	2100      	movs	r1, #0
    d504:	e000      	b.n	d508 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d506:	2102      	movs	r1, #2
    d508:	1843      	adds	r3, r0, r1
    d50a:	7d1c      	ldrb	r4, [r3, #20]
    d50c:	4294      	cmp	r4, r2
    d50e:	d103      	bne.n	d518 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d510:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d514:	8b00      	ldrh	r0, [r0, #24]
    d516:	bd10      	pop	{r4, pc}
    d518:	7d5b      	ldrb	r3, [r3, #21]
    d51a:	4293      	cmp	r3, r2
    d51c:	d103      	bne.n	d526 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d51e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d522:	8b40      	ldrh	r0, [r0, #26]
    d524:	bd10      	pop	{r4, pc}
    d526:	2000      	movs	r0, #0
    d528:	bd10      	pop	{r4, pc}
    d52a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d52e:	d201      	bcs.n	d534 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d530:	0841      	lsrs	r1, r0, #1
    d532:	e000      	b.n	d536 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d534:	21ff      	movs	r1, #255	; 0xff
    d536:	1a40      	subs	r0, r0, r1
    d538:	f240 6172 	movw	r1, #1650	; 0x672
    d53c:	4288      	cmp	r0, r1
    d53e:	db00      	blt.n	d542 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d540:	4608      	mov	r0, r1
    d542:	b280      	uxth	r0, r0
    d544:	4770      	bx	lr

0000d546 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d546:	2101      	movs	r1, #1
    d548:	f7ff bf85 	b.w	d456 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d550:	4606      	mov	r6, r0
    d552:	f342 0780 	sbfx	r7, r2, #2, #1
    d556:	7848      	ldrb	r0, [r1, #1]
    d558:	460c      	mov	r4, r1
    d55a:	f022 0504 	bic.w	r5, r2, #4
    d55e:	1c7f      	adds	r7, r7, #1
    d560:	b100      	cbz	r0, d564 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d562:	b90d      	cbnz	r5, d568 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d564:	4328      	orrs	r0, r5
    d566:	d104      	bne.n	d572 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d568:	b145      	cbz	r5, d57c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d56a:	2100      	movs	r1, #0
    d56c:	4620      	mov	r0, r4
    d56e:	f7f7 fc23 	bl	4db8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d572:	20ff      	movs	r0, #255	; 0xff
    d574:	70a0      	strb	r0, [r4, #2]
    d576:	b11f      	cbz	r7, d580 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d578:	2000      	movs	r0, #0
    d57a:	e002      	b.n	d582 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d57c:	2101      	movs	r1, #1
    d57e:	e7f5      	b.n	d56c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d580:	2002      	movs	r0, #2
    d582:	1821      	adds	r1, r4, r0
    d584:	7d09      	ldrb	r1, [r1, #20]
    d586:	2903      	cmp	r1, #3
    d588:	d102      	bne.n	d590 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d58a:	2d02      	cmp	r5, #2
    d58c:	d000      	beq.n	d590 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d58e:	1c40      	adds	r0, r0, #1
    d590:	1822      	adds	r2, r4, r0
    d592:	2101      	movs	r1, #1
    d594:	7511      	strb	r1, [r2, #20]
    d596:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d59a:	2200      	movs	r2, #0
    d59c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d5a0:	830a      	strh	r2, [r1, #24]
    d5a2:	6840      	ldr	r0, [r0, #4]
    d5a4:	70a2      	strb	r2, [r4, #2]
    d5a6:	4631      	mov	r1, r6
    d5a8:	f362 010f 	bfi	r1, r2, #0, #16
    d5ac:	e9c6 0100 	strd	r0, r1, [r6]
    d5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5b4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5b8:	461e      	mov	r6, r3
    d5ba:	4613      	mov	r3, r2
    d5bc:	4604      	mov	r4, r0
    d5be:	b109      	cbz	r1, d5c4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d5c0:	2000      	movs	r0, #0
    d5c2:	e000      	b.n	d5c6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d5c4:	2002      	movs	r0, #2
    d5c6:	21ff      	movs	r1, #255	; 0xff
    d5c8:	70a1      	strb	r1, [r4, #2]
    d5ca:	1821      	adds	r1, r4, r0
    d5cc:	7d0a      	ldrb	r2, [r1, #20]
    d5ce:	2a01      	cmp	r2, #1
    d5d0:	d003      	beq.n	d5da <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d5d2:	7d49      	ldrb	r1, [r1, #21]
    d5d4:	2901      	cmp	r1, #1
    d5d6:	d10c      	bne.n	d5f2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d5d8:	1c40      	adds	r0, r0, #1
    d5da:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d5de:	2700      	movs	r7, #0
    d5e0:	8b29      	ldrh	r1, [r5, #24]
    d5e2:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d5e6:	198a      	adds	r2, r1, r6
    d5e8:	4562      	cmp	r2, ip
    d5ea:	d905      	bls.n	d5f8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d5ec:	4420      	add	r0, r4
    d5ee:	832f      	strh	r7, [r5, #24]
    d5f0:	7507      	strb	r7, [r0, #20]
    d5f2:	2000      	movs	r0, #0
    d5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d5f8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d5fc:	4632      	mov	r2, r6
    d5fe:	6840      	ldr	r0, [r0, #4]
    d600:	4408      	add	r0, r1
    d602:	4619      	mov	r1, r3
    d604:	f7fe ff49 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d608:	8b28      	ldrh	r0, [r5, #24]
    d60a:	4430      	add	r0, r6
    d60c:	8328      	strh	r0, [r5, #24]
    d60e:	70a7      	strb	r7, [r4, #2]
    d610:	2001      	movs	r0, #1
    d612:	e7ef      	b.n	d5f4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d614 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    d614:	2202      	movs	r2, #2
    d616:	2100      	movs	r1, #0
    d618:	f7ff bf71 	b.w	d4fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d61c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d61c:	b510      	push	{r4, lr}
    d61e:	2101      	movs	r1, #1
    d620:	f7ff ff32 	bl	d488 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d624:	2800      	cmp	r0, #0
    d626:	d000      	beq.n	d62a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d628:	2001      	movs	r0, #1
    d62a:	bd10      	pop	{r4, pc}

0000d62c <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d62c:	2201      	movs	r2, #1
    d62e:	f7ff bf38 	b.w	d4a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d632 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d632:	2200      	movs	r2, #0
    d634:	f7ff bf35 	b.w	d4a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d638:	b570      	push	{r4, r5, r6, lr}
    d63a:	b109      	cbz	r1, d640 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d63c:	2300      	movs	r3, #0
    d63e:	e000      	b.n	d642 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d640:	2302      	movs	r3, #2
    d642:	21ff      	movs	r1, #255	; 0xff
    d644:	7081      	strb	r1, [r0, #2]
    d646:	18c1      	adds	r1, r0, r3
    d648:	2402      	movs	r4, #2
    d64a:	7d0d      	ldrb	r5, [r1, #20]
    d64c:	2d01      	cmp	r5, #1
    d64e:	d007      	beq.n	d660 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d650:	7d4d      	ldrb	r5, [r1, #21]
    d652:	2d01      	cmp	r5, #1
    d654:	d009      	beq.n	d66a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d656:	f44f 718b 	mov.w	r1, #278	; 0x116
    d65a:	2009      	movs	r0, #9
    d65c:	f7f6 ff86 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d660:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d664:	831a      	strh	r2, [r3, #24]
    d666:	750c      	strb	r4, [r1, #20]
    d668:	e003      	b.n	d672 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d66a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d66e:	835a      	strh	r2, [r3, #26]
    d670:	754c      	strb	r4, [r1, #21]
    d672:	2100      	movs	r1, #0
    d674:	7081      	strb	r1, [r0, #2]
    d676:	bd70      	pop	{r4, r5, r6, pc}

0000d678 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d678:	2101      	movs	r1, #1
    d67a:	7001      	strb	r1, [r0, #0]
    d67c:	4770      	bx	lr

0000d67e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d67e:	2201      	movs	r2, #1
    d680:	4611      	mov	r1, r2
    d682:	f7ff bf3c 	b.w	d4fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d686 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d686:	2201      	movs	r2, #1
    d688:	2100      	movs	r1, #0
    d68a:	f7ff bf38 	b.w	d4fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d68e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d68e:	2100      	movs	r1, #0
    d690:	f7ff bee1 	b.w	d456 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d694:	2800      	cmp	r0, #0
    d696:	db09      	blt.n	d6ac <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d698:	f000 021f 	and.w	r2, r0, #31
    d69c:	2101      	movs	r1, #1
    d69e:	4091      	lsls	r1, r2
    d6a0:	0940      	lsrs	r0, r0, #5
    d6a2:	0080      	lsls	r0, r0, #2
    d6a4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6a8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d6ac:	4770      	bx	lr
    d6ae:	2800      	cmp	r0, #0
    d6b0:	db0d      	blt.n	d6ce <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    d6b2:	f000 021f 	and.w	r2, r0, #31
    d6b6:	2101      	movs	r1, #1
    d6b8:	4091      	lsls	r1, r2
    d6ba:	0940      	lsrs	r0, r0, #5
    d6bc:	0080      	lsls	r0, r0, #2
    d6be:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6c2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d6c6:	f3bf 8f4f 	dsb	sy
    d6ca:	f3bf 8f6f 	isb	sy
    d6ce:	4770      	bx	lr
    d6d0:	b510      	push	{r4, lr}
    d6d2:	200e      	movs	r0, #14
    d6d4:	f7ff ffeb 	bl	d6ae <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d6d8:	200e      	movs	r0, #14
    d6da:	f7ff ffdb 	bl	d694 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d6de:	200f      	movs	r0, #15
    d6e0:	f7ff ffe5 	bl	d6ae <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d6e8:	200f      	movs	r0, #15
    d6ea:	f7ff bfd3 	b.w	d694 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d6ee:	2800      	cmp	r0, #0
    d6f0:	db09      	blt.n	d706 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    d6f2:	f000 021f 	and.w	r2, r0, #31
    d6f6:	2101      	movs	r1, #1
    d6f8:	4091      	lsls	r1, r2
    d6fa:	0940      	lsrs	r0, r0, #5
    d6fc:	0080      	lsls	r0, r0, #2
    d6fe:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d702:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d706:	4770      	bx	lr
    d708:	5840      	ldr	r0, [r0, r1]
    d70a:	2800      	cmp	r0, #0
    d70c:	d000      	beq.n	d710 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    d70e:	2001      	movs	r0, #1
    d710:	4770      	bx	lr

0000d712 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d712:	b510      	push	{r4, lr}
    d714:	4604      	mov	r4, r0
    d716:	4620      	mov	r0, r4
    d718:	f7f7 fc58 	bl	4fcc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    d71c:	2811      	cmp	r0, #17
    d71e:	d0fa      	beq.n	d716 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d720:	bd10      	pop	{r4, pc}

0000d722 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d722:	b510      	push	{r4, lr}
    d724:	f7ff fff5 	bl	d712 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d728:	2800      	cmp	r0, #0
    d72a:	d003      	beq.n	d734 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d72c:	21a0      	movs	r1, #160	; 0xa0
    d72e:	201d      	movs	r0, #29
    d730:	f7f6 ff1c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d734:	bd10      	pop	{r4, pc}

0000d736 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d736:	f7f7 bda7 	b.w	5288 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d73a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d73a:	f7f7 bd95 	b.w	5268 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d73e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d73e:	b510      	push	{r4, lr}
    d740:	4050      	eors	r0, r2
    d742:	780a      	ldrb	r2, [r1, #0]
    d744:	781c      	ldrb	r4, [r3, #0]
    d746:	4062      	eors	r2, r4
    d748:	4410      	add	r0, r2
    d74a:	784a      	ldrb	r2, [r1, #1]
    d74c:	785c      	ldrb	r4, [r3, #1]
    d74e:	4062      	eors	r2, r4
    d750:	4410      	add	r0, r2
    d752:	788a      	ldrb	r2, [r1, #2]
    d754:	789c      	ldrb	r4, [r3, #2]
    d756:	4062      	eors	r2, r4
    d758:	4410      	add	r0, r2
    d75a:	78ca      	ldrb	r2, [r1, #3]
    d75c:	78dc      	ldrb	r4, [r3, #3]
    d75e:	4062      	eors	r2, r4
    d760:	4410      	add	r0, r2
    d762:	790a      	ldrb	r2, [r1, #4]
    d764:	791c      	ldrb	r4, [r3, #4]
    d766:	7949      	ldrb	r1, [r1, #5]
    d768:	4062      	eors	r2, r4
    d76a:	4410      	add	r0, r2
    d76c:	795a      	ldrb	r2, [r3, #5]
    d76e:	4051      	eors	r1, r2
    d770:	42c1      	cmn	r1, r0
    d772:	d101      	bne.n	d778 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d774:	2001      	movs	r0, #1
    d776:	bd10      	pop	{r4, pc}
    d778:	2000      	movs	r0, #0
    d77a:	bd10      	pop	{r4, pc}

0000d77c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d77c:	b510      	push	{r4, lr}
    d77e:	2900      	cmp	r1, #0
    d780:	4604      	mov	r4, r0
    d782:	f04f 0106 	mov.w	r1, #6
    d786:	d002      	beq.n	d78e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d788:	f7f6 ff90 	bl	46ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d78c:	e001      	b.n	d792 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d78e:	f7f6 ff9b 	bl	46c8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d792:	7960      	ldrb	r0, [r4, #5]
    d794:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d798:	7160      	strb	r0, [r4, #5]
    d79a:	bd10      	pop	{r4, pc}

0000d79c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d79c:	4770      	bx	lr

0000d79e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d79e:	b530      	push	{r4, r5, lr}
    d7a0:	460c      	mov	r4, r1
    d7a2:	4605      	mov	r5, r0
    d7a4:	b08d      	sub	sp, #52	; 0x34
    d7a6:	f04f 0103 	mov.w	r1, #3
    d7aa:	f104 0003 	add.w	r0, r4, #3
    d7ae:	b112      	cbz	r2, d7b6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d7b0:	f7f6 ff7c 	bl	46ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d7b4:	e001      	b.n	d7ba <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d7b6:	f7f6 ff87 	bl	46c8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d7ba:	7960      	ldrb	r0, [r4, #5]
    d7bc:	220d      	movs	r2, #13
    d7be:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d7c2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d7c6:	7160      	strb	r0, [r4, #5]
    d7c8:	2100      	movs	r1, #0
    d7ca:	a804      	add	r0, sp, #16
    d7cc:	f7fe fedf 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7d0:	78e0      	ldrb	r0, [r4, #3]
    d7d2:	f88d 001f 	strb.w	r0, [sp, #31]
    d7d6:	7920      	ldrb	r0, [r4, #4]
    d7d8:	f88d 001e 	strb.w	r0, [sp, #30]
    d7dc:	7960      	ldrb	r0, [r4, #5]
    d7de:	f88d 001d 	strb.w	r0, [sp, #29]
    d7e2:	2210      	movs	r2, #16
    d7e4:	4629      	mov	r1, r5
    d7e6:	4668      	mov	r0, sp
    d7e8:	f7fe fe57 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7ec:	4668      	mov	r0, sp
    d7ee:	f7ff ff98 	bl	d722 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d7f2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d7f6:	7020      	strb	r0, [r4, #0]
    d7f8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d7fc:	7060      	strb	r0, [r4, #1]
    d7fe:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d802:	70a0      	strb	r0, [r4, #2]
    d804:	b00d      	add	sp, #52	; 0x34
    d806:	bd30      	pop	{r4, r5, pc}

0000d808 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d808:	f7f8 b8fa 	b.w	5a00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    d80c:	07c1      	lsls	r1, r0, #31
    d80e:	d001      	beq.n	d814 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d810:	2001      	movs	r0, #1
    d812:	4770      	bx	lr
    d814:	0780      	lsls	r0, r0, #30
    d816:	d501      	bpl.n	d81c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d818:	2002      	movs	r0, #2
    d81a:	4770      	bx	lr
    d81c:	2000      	movs	r0, #0
    d81e:	4770      	bx	lr
    d820:	b510      	push	{r4, lr}
    d822:	2801      	cmp	r0, #1
    d824:	d008      	beq.n	d838 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d826:	2802      	cmp	r0, #2
    d828:	d004      	beq.n	d834 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d82a:	f240 411a 	movw	r1, #1050	; 0x41a
    d82e:	2006      	movs	r0, #6
    d830:	f7f6 fe9c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d834:	2001      	movs	r0, #1
    d836:	bd10      	pop	{r4, pc}
    d838:	2000      	movs	r0, #0
    d83a:	bd10      	pop	{r4, pc}
    d83c:	2900      	cmp	r1, #0
    d83e:	d004      	beq.n	d84a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d840:	2801      	cmp	r0, #1
    d842:	d003      	beq.n	d84c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d844:	2901      	cmp	r1, #1
    d846:	d001      	beq.n	d84c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d848:	2002      	movs	r0, #2
    d84a:	4770      	bx	lr
    d84c:	2001      	movs	r0, #1
    d84e:	4770      	bx	lr
    d850:	f7ff bc95 	b.w	d17e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d854 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d854:	2101      	movs	r1, #1
    d856:	f7f8 bbcd 	b.w	5ff4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d85a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d85a:	b510      	push	{r4, lr}
    d85c:	f002 feff 	bl	1065e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d860:	b118      	cbz	r0, d86a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d866:	f7fc bfa3 	b.w	a7b0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d86a:	20ff      	movs	r0, #255	; 0xff
    d86c:	bd10      	pop	{r4, pc}

0000d86e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d86e:	b510      	push	{r4, lr}
    d870:	f7f8 fc08 	bl	6084 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d874:	2810      	cmp	r0, #16
    d876:	d003      	beq.n	d880 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d878:	f7f8 fbd4 	bl	6024 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d87c:	2810      	cmp	r0, #16
    d87e:	d100      	bne.n	d882 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d880:	2008      	movs	r0, #8
    d882:	bd10      	pop	{r4, pc}

0000d884 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d884:	b510      	push	{r4, lr}
    d886:	f7f8 fbfd 	bl	6084 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d88a:	2810      	cmp	r0, #16
    d88c:	d003      	beq.n	d896 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d88e:	f7f8 fc57 	bl	6140 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    d892:	2001      	movs	r0, #1
    d894:	bd10      	pop	{r4, pc}
    d896:	2000      	movs	r0, #0
    d898:	bd10      	pop	{r4, pc}

0000d89a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d89a:	b570      	push	{r4, r5, r6, lr}
    d89c:	460e      	mov	r6, r1
    d89e:	b08c      	sub	sp, #48	; 0x30
    d8a0:	4614      	mov	r4, r2
    d8a2:	4601      	mov	r1, r0
    d8a4:	461d      	mov	r5, r3
    d8a6:	2210      	movs	r2, #16
    d8a8:	4668      	mov	r0, sp
    d8aa:	f000 f938 	bl	db1e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8ae:	2210      	movs	r2, #16
    d8b0:	4631      	mov	r1, r6
    d8b2:	a804      	add	r0, sp, #16
    d8b4:	f000 f933 	bl	db1e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8b8:	4668      	mov	r0, sp
    d8ba:	f7ff ff32 	bl	d722 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d8be:	a908      	add	r1, sp, #32
    d8c0:	f04f 0210 	mov.w	r2, #16
    d8c4:	4628      	mov	r0, r5
    d8c6:	b11c      	cbz	r4, d8d0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d8c8:	f000 f929 	bl	db1e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8cc:	b00c      	add	sp, #48	; 0x30
    d8ce:	bd70      	pop	{r4, r5, r6, pc}
    d8d0:	f7fe fde3 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d8d4:	e7fa      	b.n	d8cc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d8d6:	b510      	push	{r4, lr}
    d8d8:	460c      	mov	r4, r1
    d8da:	2100      	movs	r1, #0
    d8dc:	f7ff fd84 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d8e0:	6060      	str	r0, [r4, #4]
    d8e2:	b118      	cbz	r0, d8ec <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d8e4:	2001      	movs	r0, #1
    d8e6:	7020      	strb	r0, [r4, #0]
    d8e8:	2000      	movs	r0, #0
    d8ea:	bd10      	pop	{r4, pc}
    d8ec:	2002      	movs	r0, #2
    d8ee:	bd10      	pop	{r4, pc}

0000d8f0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d8f0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8f4:	4348      	muls	r0, r1
    d8f6:	4770      	bx	lr

0000d8f8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d8f8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8fc:	fbb0 f0f1 	udiv	r0, r0, r1
    d900:	b280      	uxth	r0, r0
    d902:	4770      	bx	lr

0000d904 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d904:	b570      	push	{r4, r5, r6, lr}
    d906:	4604      	mov	r4, r0
    d908:	4290      	cmp	r0, r2
    d90a:	d20b      	bcs.n	d924 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d90c:	1b10      	subs	r0, r2, r4
    d90e:	2865      	cmp	r0, #101	; 0x65
    d910:	d200      	bcs.n	d914 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d912:	2065      	movs	r0, #101	; 0x65
    d914:	1825      	adds	r5, r4, r0
    d916:	428d      	cmp	r5, r1
    d918:	d803      	bhi.n	d922 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d91a:	2103      	movs	r1, #3
    d91c:	f7f4 f8ac 	bl	1a78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d920:	b108      	cbz	r0, d926 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d922:	4620      	mov	r0, r4
    d924:	bd70      	pop	{r4, r5, r6, pc}
    d926:	4628      	mov	r0, r5
    d928:	bd70      	pop	{r4, r5, r6, pc}

0000d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d92a:	b510      	push	{r4, lr}
    d92c:	f1a2 0311 	sub.w	r3, r2, #17
    d930:	290d      	cmp	r1, #13
    d932:	d24d      	bcs.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d934:	e8df f001 	tbb	[pc, r1]
    d938:	150e0907 	.word	0x150e0907
    d93c:	29211d1a 	.word	0x29211d1a
    d940:	362f4e2c 	.word	0x362f4e2c
    d944:	0048      	.short	0x0048
    d946:	b3f2      	cbz	r2, d9c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    d948:	e042      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d94a:	2a07      	cmp	r2, #7
    d94c:	d03e      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d94e:	2a08      	cmp	r2, #8
    d950:	d03c      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d952:	e03d      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d954:	2a0c      	cmp	r2, #12
    d956:	d039      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d958:	2a0d      	cmp	r2, #13
    d95a:	d037      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d95c:	2a0b      	cmp	r2, #11
    d95e:	d035      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d960:	e036      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d962:	2a0e      	cmp	r2, #14
    d964:	d032      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d966:	2a0f      	cmp	r2, #15
    d968:	d030      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d96a:	e031      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d96c:	2b0c      	cmp	r3, #12
    d96e:	d92d      	bls.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d970:	e02e      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d972:	3a12      	subs	r2, #18
    d974:	2a0b      	cmp	r2, #11
    d976:	d929      	bls.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d978:	e02a      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d97a:	2b03      	cmp	r3, #3
    d97c:	d926      	bls.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d97e:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
    d982:	b1f8      	cbz	r0, d9c4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    d984:	2a1d      	cmp	r2, #29
    d986:	d921      	bls.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d988:	e022      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d98a:	2a04      	cmp	r2, #4
    d98c:	d01e      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d98e:	e01f      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d990:	2a06      	cmp	r2, #6
    d992:	d01b      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d994:	e01c      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d996:	2a1e      	cmp	r2, #30
    d998:	d018      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d99a:	2a1f      	cmp	r2, #31
    d99c:	d016      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d99e:	2a20      	cmp	r2, #32
    d9a0:	d014      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9a2:	e015      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9a4:	2a21      	cmp	r2, #33	; 0x21
    d9a6:	d011      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9a8:	2a22      	cmp	r2, #34	; 0x22
    d9aa:	d00f      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9ac:	2a23      	cmp	r2, #35	; 0x23
    d9ae:	d00d      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9b0:	2a24      	cmp	r2, #36	; 0x24
    d9b2:	d00b      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9b4:	2a25      	cmp	r2, #37	; 0x25
    d9b6:	d009      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9b8:	2a26      	cmp	r2, #38	; 0x26
    d9ba:	d007      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9bc:	2a27      	cmp	r2, #39	; 0x27
    d9be:	d005      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9c0:	2a2e      	cmp	r2, #46	; 0x2e
    d9c2:	d003      	beq.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9c4:	e004      	b.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9c6:	e001      	b.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9c8:	2a29      	cmp	r2, #41	; 0x29
    d9ca:	d101      	bne.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9cc:	2001      	movs	r0, #1
    d9ce:	bd10      	pop	{r4, pc}
    d9d0:	2000      	movs	r0, #0
    d9d2:	bd10      	pop	{r4, pc}
    d9d4:	2a10      	cmp	r2, #16
    d9d6:	d1fb      	bne.n	d9d0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9d8:	e7f8      	b.n	d9cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000d9da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d9da:	280c      	cmp	r0, #12
    d9dc:	d019      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9de:	280d      	cmp	r0, #13
    d9e0:	d017      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9e2:	280b      	cmp	r0, #11
    d9e4:	d015      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9e6:	280e      	cmp	r0, #14
    d9e8:	d013      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9ea:	280f      	cmp	r0, #15
    d9ec:	d011      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9ee:	2821      	cmp	r0, #33	; 0x21
    d9f0:	d00f      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9f2:	2822      	cmp	r0, #34	; 0x22
    d9f4:	d00d      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9f6:	2823      	cmp	r0, #35	; 0x23
    d9f8:	d00b      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9fa:	2824      	cmp	r0, #36	; 0x24
    d9fc:	d009      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9fe:	2825      	cmp	r0, #37	; 0x25
    da00:	d007      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da02:	2826      	cmp	r0, #38	; 0x26
    da04:	d005      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da06:	2827      	cmp	r0, #39	; 0x27
    da08:	d003      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da0a:	282e      	cmp	r0, #46	; 0x2e
    da0c:	d001      	beq.n	da12 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da0e:	2000      	movs	r0, #0
    da10:	4770      	bx	lr
    da12:	2001      	movs	r0, #1
    da14:	4770      	bx	lr

0000da16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    da16:	f011 0f0c 	tst.w	r1, #12
    da1a:	d018      	beq.n	da4e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    da1c:	074a      	lsls	r2, r1, #29
    da1e:	f44f 7116 	mov.w	r1, #600	; 0x258
    da22:	2a00      	cmp	r2, #0
    da24:	da02      	bge.n	da2c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    da26:	f04f 0210 	mov.w	r2, #16
    da2a:	e001      	b.n	da30 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    da2c:	f04f 0240 	mov.w	r2, #64	; 0x40
    da30:	da01      	bge.n	da36 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    da32:	f04f 0196 	mov.w	r1, #150	; 0x96
    da36:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    da3a:	eba0 0301 	sub.w	r3, r0, r1
    da3e:	4288      	cmp	r0, r1
    da40:	d903      	bls.n	da4a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da42:	fb93 f0f2 	sdiv	r0, r3, r2
    da46:	b280      	uxth	r0, r0
    da48:	4770      	bx	lr
    da4a:	2000      	movs	r0, #0
    da4c:	4770      	bx	lr
    da4e:	2902      	cmp	r1, #2
    da50:	d008      	beq.n	da64 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    da52:	2870      	cmp	r0, #112	; 0x70
    da54:	d9f9      	bls.n	da4a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da56:	3870      	subs	r0, #112	; 0x70
    da58:	17c1      	asrs	r1, r0, #31
    da5a:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    da5e:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    da62:	4770      	bx	lr
    da64:	283c      	cmp	r0, #60	; 0x3c
    da66:	d9f0      	bls.n	da4a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da68:	383c      	subs	r0, #60	; 0x3c
    da6a:	17c1      	asrs	r1, r0, #31
    da6c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    da70:	f3c0 008f 	ubfx	r0, r0, #2, #16
    da74:	4770      	bx	lr

0000da76 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    da76:	6809      	ldr	r1, [r1, #0]
    da78:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    da7c:	4770      	bx	lr

0000da7e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    da7e:	07c1      	lsls	r1, r0, #31
    da80:	d001      	beq.n	da86 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    da82:	2001      	movs	r0, #1
    da84:	4770      	bx	lr
    da86:	0781      	lsls	r1, r0, #30
    da88:	d501      	bpl.n	da8e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    da8a:	2002      	movs	r0, #2
    da8c:	4770      	bx	lr
    da8e:	0740      	lsls	r0, r0, #29
    da90:	d501      	bpl.n	da96 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    da92:	2008      	movs	r0, #8
    da94:	4770      	bx	lr
    da96:	2000      	movs	r0, #0
    da98:	4770      	bx	lr

0000da9a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    da9a:	b510      	push	{r4, lr}
    da9c:	f640 12c4 	movw	r2, #2500	; 0x9c4
    daa0:	2901      	cmp	r1, #1
    daa2:	d006      	beq.n	dab2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    daa4:	2902      	cmp	r1, #2
    daa6:	d005      	beq.n	dab4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    daa8:	f240 31af 	movw	r1, #943	; 0x3af
    daac:	2029      	movs	r0, #41	; 0x29
    daae:	f7f6 fd5d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dab2:	b108      	cbz	r0, dab8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dab4:	4610      	mov	r0, r2
    dab6:	bd10      	pop	{r4, pc}
    dab8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    dabc:	bd10      	pop	{r4, pc}

0000dabe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dabe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dac2:	4607      	mov	r7, r0
    dac4:	460e      	mov	r6, r1
    dac6:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    daca:	f7f4 fbad 	bl	2228 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dace:	b198      	cbz	r0, daf8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    dad0:	b31e      	cbz	r6, db1a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dad2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    dad6:	1b40      	subs	r0, r0, r5
    dad8:	2300      	movs	r3, #0
    dada:	eb61 0104 	sbc.w	r1, r1, r4
    dade:	461a      	mov	r2, r3
    dae0:	1a1b      	subs	r3, r3, r0
    dae2:	418a      	sbcs	r2, r1
    dae4:	da19      	bge.n	db1a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dae6:	1c42      	adds	r2, r0, #1
    dae8:	f171 0100 	sbcs.w	r1, r1, #0
    daec:	db07      	blt.n	dafe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    daee:	f240 2129 	movw	r1, #553	; 0x229
    daf2:	2029      	movs	r0, #41	; 0x29
    daf4:	f7f6 fd3a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daf8:	f240 211f 	movw	r1, #543	; 0x21f
    dafc:	e7f9      	b.n	daf2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    dafe:	4430      	add	r0, r6
    db00:	1e40      	subs	r0, r0, #1
    db02:	fbb0 f1f6 	udiv	r1, r0, r6
    db06:	fb01 f006 	mul.w	r0, r1, r6
    db0a:	1828      	adds	r0, r5, r0
    db0c:	f144 0400 	adc.w	r4, r4, #0
    db10:	e9c7 0404 	strd	r0, r4, [r7, #16]
    db14:	4608      	mov	r0, r1
    db16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db1a:	2000      	movs	r0, #0
    db1c:	e7fb      	b.n	db16 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000db1e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    db1e:	b530      	push	{r4, r5, lr}
    db20:	4613      	mov	r3, r2
    db22:	e006      	b.n	db32 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    db24:	18cc      	adds	r4, r1, r3
    db26:	1ad5      	subs	r5, r2, r3
    db28:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    db2c:	1e5b      	subs	r3, r3, #1
    db2e:	5544      	strb	r4, [r0, r5]
    db30:	b2db      	uxtb	r3, r3
    db32:	2b00      	cmp	r3, #0
    db34:	d1f6      	bne.n	db24 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    db36:	bd30      	pop	{r4, r5, pc}

0000db38 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    db38:	2300      	movs	r3, #0
    db3a:	6383      	str	r3, [r0, #56]	; 0x38
    db3c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    db40:	f240 2371 	movw	r3, #625	; 0x271
    db44:	435a      	muls	r2, r3
    db46:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    db4a:	1e52      	subs	r2, r2, #1
    db4c:	fbb2 f1f1 	udiv	r1, r2, r1
    db50:	63c1      	str	r1, [r0, #60]	; 0x3c
    db52:	4770      	bx	lr

0000db54 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    db54:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    db58:	4607      	mov	r7, r0
    db5a:	4690      	mov	r8, r2
    db5c:	468b      	mov	fp, r1
    db5e:	2601      	movs	r6, #1
    db60:	4608      	mov	r0, r1
    db62:	f000 f9dc 	bl	df1e <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    db66:	4682      	mov	sl, r0
    db68:	4658      	mov	r0, fp
    db6a:	f000 f9da 	bl	df22 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    db6e:	4681      	mov	r9, r0
    db70:	f7ff ff85 	bl	da7e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    db74:	4604      	mov	r4, r0
    db76:	4650      	mov	r0, sl
    db78:	f7ff ff81 	bl	da7e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    db7c:	4605      	mov	r5, r0
    db7e:	ea54 0005 	orrs.w	r0, r4, r5
    db82:	d100      	bne.n	db86 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    db84:	2600      	movs	r6, #0
    db86:	f7fc fd95 	bl	a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    db8a:	ea10 0f09 	tst.w	r0, r9
    db8e:	d100      	bne.n	db92 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    db90:	2400      	movs	r4, #0
    db92:	f7fc fd8f 	bl	a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    db96:	ea10 0f0a 	tst.w	r0, sl
    db9a:	d100      	bne.n	db9e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    db9c:	2500      	movs	r5, #0
    db9e:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    dba2:	42a0      	cmp	r0, r4
    dba4:	d100      	bne.n	dba8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    dba6:	2400      	movs	r4, #0
    dba8:	f888 4000 	strb.w	r4, [r8]
    dbac:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    dbb0:	42a8      	cmp	r0, r5
    dbb2:	d100      	bne.n	dbb6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    dbb4:	2500      	movs	r5, #0
    dbb6:	f888 5001 	strb.w	r5, [r8, #1]
    dbba:	b974      	cbnz	r4, dbda <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbbc:	b96d      	cbnz	r5, dbda <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbbe:	4658      	mov	r0, fp
    dbc0:	f000 f99b 	bl	defa <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    dbc4:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
    dbc8:	1a40      	subs	r0, r0, r1
    dbca:	b200      	sxth	r0, r0
    dbcc:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    dbd0:	4288      	cmp	r0, r1
    dbd2:	dc01      	bgt.n	dbd8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    dbd4:	2800      	cmp	r0, #0
    dbd6:	dc00      	bgt.n	dbda <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbd8:	2600      	movs	r6, #0
    dbda:	4630      	mov	r0, r6
    dbdc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000dbe0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dbe0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbe4:	4348      	muls	r0, r1
    dbe6:	4770      	bx	lr

0000dbe8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dbe8:	f240 2171 	movw	r1, #625	; 0x271
    dbec:	fb10 f001 	smulbb	r0, r0, r1
    dbf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dbf4:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    dbf8:	4770      	bx	lr

0000dbfa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dbfa:	b510      	push	{r4, lr}
    dbfc:	2300      	movs	r3, #0
    dbfe:	461a      	mov	r2, r3
    dc00:	e003      	b.n	dc0a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dc02:	5c84      	ldrb	r4, [r0, r2]
    dc04:	4323      	orrs	r3, r4
    dc06:	1c52      	adds	r2, r2, #1
    dc08:	b2d2      	uxtb	r2, r2
    dc0a:	428a      	cmp	r2, r1
    dc0c:	d3f9      	bcc.n	dc02 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dc0e:	b10b      	cbz	r3, dc14 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dc10:	2000      	movs	r0, #0
    dc12:	bd10      	pop	{r4, pc}
    dc14:	2001      	movs	r0, #1
    dc16:	bd10      	pop	{r4, pc}

0000dc18 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dc18:	b510      	push	{r4, lr}
    dc1a:	4604      	mov	r4, r0
    dc1c:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    dc20:	b108      	cbz	r0, dc26 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dc22:	2825      	cmp	r0, #37	; 0x25
    dc24:	d901      	bls.n	dc2a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dc26:	2012      	movs	r0, #18
    dc28:	bd10      	pop	{r4, pc}
    dc2a:	b12a      	cbz	r2, dc38 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    dc2c:	7f60      	ldrb	r0, [r4, #29]
    dc2e:	b128      	cbz	r0, dc3c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    dc30:	2801      	cmp	r0, #1
    dc32:	d009      	beq.n	dc48 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    dc34:	201f      	movs	r0, #31
    dc36:	bd10      	pop	{r4, pc}
    dc38:	2000      	movs	r0, #0
    dc3a:	bd10      	pop	{r4, pc}
    dc3c:	4620      	mov	r0, r4
    dc3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc42:	4611      	mov	r1, r2
    dc44:	f000 b827 	b.w	dc96 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    dc48:	89a2      	ldrh	r2, [r4, #12]
    dc4a:	6949      	ldr	r1, [r1, #20]
    dc4c:	f104 001d 	add.w	r0, r4, #29
    dc50:	f7f8 fb12 	bl	6278 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    dc54:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    dc58:	e7ee      	b.n	dc38 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000dc5a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dc5a:	b570      	push	{r4, r5, r6, lr}
    dc5c:	4604      	mov	r4, r0
    dc5e:	1c40      	adds	r0, r0, #1
    dc60:	4288      	cmp	r0, r1
    dc62:	d004      	beq.n	dc6e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    dc64:	6808      	ldr	r0, [r1, #0]
    dc66:	f8c4 0001 	str.w	r0, [r4, #1]
    dc6a:	7908      	ldrb	r0, [r1, #4]
    dc6c:	7160      	strb	r0, [r4, #5]
    dc6e:	7960      	ldrb	r0, [r4, #5]
    dc70:	f000 001f 	and.w	r0, r0, #31
    dc74:	7160      	strb	r0, [r4, #5]
    dc76:	2000      	movs	r0, #0
    dc78:	72e0      	strb	r0, [r4, #11]
    dc7a:	4605      	mov	r5, r0
    dc7c:	1966      	adds	r6, r4, r5
    dc7e:	7870      	ldrb	r0, [r6, #1]
    dc80:	f000 fba6 	bl	e3d0 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dc84:	71b0      	strb	r0, [r6, #6]
    dc86:	7ae1      	ldrb	r1, [r4, #11]
    dc88:	1c6d      	adds	r5, r5, #1
    dc8a:	4408      	add	r0, r1
    dc8c:	b2ed      	uxtb	r5, r5
    dc8e:	72e0      	strb	r0, [r4, #11]
    dc90:	2d05      	cmp	r5, #5
    dc92:	d3f3      	bcc.n	dc7c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    dc94:	bd70      	pop	{r4, r5, r6, pc}
    dc96:	b570      	push	{r4, r5, r6, lr}
    dc98:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
    dc9c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    dca0:	2401      	movs	r4, #1
    dca2:	fb03 2101 	mla	r1, r3, r1, r2
    dca6:	2225      	movs	r2, #37	; 0x25
    dca8:	fbb1 f3f2 	udiv	r3, r1, r2
    dcac:	fb02 1113 	mls	r1, r2, r3, r1
    dcb0:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    dcb4:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    dcb8:	f001 0307 	and.w	r3, r1, #7
    dcbc:	7f92      	ldrb	r2, [r2, #30]
    dcbe:	fa04 f303 	lsl.w	r3, r4, r3
    dcc2:	421a      	tst	r2, r3
    dcc4:	d003      	beq.n	dcce <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x74>
    dcc6:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    dcca:	2000      	movs	r0, #0
    dccc:	bd70      	pop	{r4, r5, r6, pc}
    dcce:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    dcd2:	fbb1 f3f2 	udiv	r3, r1, r2
    dcd6:	fb02 1113 	mls	r1, r2, r3, r1
    dcda:	1c49      	adds	r1, r1, #1
    dcdc:	b2c9      	uxtb	r1, r1
    dcde:	2300      	movs	r3, #0
    dce0:	18c5      	adds	r5, r0, r3
    dce2:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
    dce6:	428a      	cmp	r2, r1
    dce8:	d310      	bcc.n	dd0c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb2>
    dcea:	7fad      	ldrb	r5, [r5, #30]
    dcec:	2200      	movs	r2, #0
    dcee:	fa04 f602 	lsl.w	r6, r4, r2
    dcf2:	4235      	tst	r5, r6
    dcf4:	d001      	beq.n	dcfa <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xa0>
    dcf6:	1e49      	subs	r1, r1, #1
    dcf8:	b2c9      	uxtb	r1, r1
    dcfa:	b121      	cbz	r1, dd06 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xac>
    dcfc:	1c52      	adds	r2, r2, #1
    dcfe:	b2d2      	uxtb	r2, r2
    dd00:	2a08      	cmp	r2, #8
    dd02:	d3f4      	bcc.n	dcee <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x94>
    dd04:	e004      	b.n	dd10 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    dd06:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    dd0a:	e7dc      	b.n	dcc6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    dd0c:	1a89      	subs	r1, r1, r2
    dd0e:	b2c9      	uxtb	r1, r1
    dd10:	1c5b      	adds	r3, r3, #1
    dd12:	b2db      	uxtb	r3, r3
    dd14:	2b05      	cmp	r3, #5
    dd16:	d3e3      	bcc.n	dce0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x86>
    dd18:	201f      	movs	r0, #31
    dd1a:	bd70      	pop	{r4, r5, r6, pc}

0000dd1c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    dd1c:	7802      	ldrb	r2, [r0, #0]
    dd1e:	f002 020f 	and.w	r2, r2, #15
    dd22:	2a03      	cmp	r2, #3
    dd24:	d003      	beq.n	dd2e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    dd26:	2a05      	cmp	r2, #5
    dd28:	d104      	bne.n	dd34 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    dd2a:	f000 b92e 	b.w	df8a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    dd2e:	7840      	ldrb	r0, [r0, #1]
    dd30:	280c      	cmp	r0, #12
    dd32:	d001      	beq.n	dd38 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    dd34:	2000      	movs	r0, #0
    dd36:	4770      	bx	lr
    dd38:	2001      	movs	r0, #1
    dd3a:	4770      	bx	lr

0000dd3c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    dd3c:	b570      	push	{r4, r5, r6, lr}
    dd3e:	4614      	mov	r4, r2
    dd40:	4605      	mov	r5, r0
    dd42:	2a1f      	cmp	r2, #31
    dd44:	d903      	bls.n	dd4e <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    dd46:	21f1      	movs	r1, #241	; 0xf1
    dd48:	202a      	movs	r0, #42	; 0x2a
    dd4a:	f7f6 fc0f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd4e:	f105 0009 	add.w	r0, r5, #9
    dd52:	f7fe fba2 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd56:	1da4      	adds	r4, r4, #6
    dd58:	706c      	strb	r4, [r5, #1]
    dd5a:	bd70      	pop	{r4, r5, r6, pc}

0000dd5c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    dd5c:	b510      	push	{r4, lr}
    dd5e:	7802      	ldrb	r2, [r0, #0]
    dd60:	f001 030f 	and.w	r3, r1, #15
    dd64:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    dd68:	431a      	orrs	r2, r3
    dd6a:	7002      	strb	r2, [r0, #0]
    dd6c:	2907      	cmp	r1, #7
    dd6e:	d20c      	bcs.n	dd8a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    dd70:	e8df f001 	tbb	[pc, r1]
    dd74:	06040604 	.word	0x06040604
    dd78:	00040804 	.word	0x00040804
    dd7c:	2106      	movs	r1, #6
    dd7e:	e002      	b.n	dd86 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    dd80:	210c      	movs	r1, #12
    dd82:	e000      	b.n	dd86 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    dd84:	2122      	movs	r1, #34	; 0x22
    dd86:	7041      	strb	r1, [r0, #1]
    dd88:	bd10      	pop	{r4, pc}
    dd8a:	21ab      	movs	r1, #171	; 0xab
    dd8c:	202a      	movs	r0, #42	; 0x2a
    dd8e:	f7f6 fbed 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dd92 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    dd92:	680a      	ldr	r2, [r1, #0]
    dd94:	f840 2f09 	str.w	r2, [r0, #9]!
    dd98:	8889      	ldrh	r1, [r1, #4]
    dd9a:	8081      	strh	r1, [r0, #4]
    dd9c:	4770      	bx	lr

0000dd9e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    dd9e:	7802      	ldrb	r2, [r0, #0]
    dda0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dda4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    dda8:	7002      	strb	r2, [r0, #0]
    ddaa:	4770      	bx	lr

0000ddac <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    ddac:	680a      	ldr	r2, [r1, #0]
    ddae:	f840 2f03 	str.w	r2, [r0, #3]!
    ddb2:	8889      	ldrh	r1, [r1, #4]
    ddb4:	8081      	strh	r1, [r0, #4]
    ddb6:	4770      	bx	lr

0000ddb8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    ddb8:	7802      	ldrb	r2, [r0, #0]
    ddba:	2340      	movs	r3, #64	; 0x40
    ddbc:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ddc0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    ddc4:	430a      	orrs	r2, r1
    ddc6:	7002      	strb	r2, [r0, #0]
    ddc8:	4770      	bx	lr

0000ddca <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    ddca:	b570      	push	{r4, r5, r6, lr}
    ddcc:	4614      	mov	r4, r2
    ddce:	4605      	mov	r5, r0
    ddd0:	2a1f      	cmp	r2, #31
    ddd2:	d904      	bls.n	ddde <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    ddd4:	f240 1113 	movw	r1, #275	; 0x113
    ddd8:	202a      	movs	r0, #42	; 0x2a
    ddda:	f7f6 fbc7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddde:	f105 0009 	add.w	r0, r5, #9
    dde2:	f7fe fb5a 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dde6:	1da4      	adds	r4, r4, #6
    dde8:	706c      	strb	r4, [r5, #1]
    ddea:	bd70      	pop	{r4, r5, r6, pc}

0000ddec <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    ddec:	6842      	ldr	r2, [r0, #4]
    ddee:	600a      	str	r2, [r1, #0]
    ddf0:	7a00      	ldrb	r0, [r0, #8]
    ddf2:	7108      	strb	r0, [r1, #4]
    ddf4:	4770      	bx	lr

0000ddf6 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    ddf6:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    ddfa:	4770      	bx	lr

0000ddfc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    ddfc:	b570      	push	{r4, r5, r6, lr}
    ddfe:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    de02:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    de06:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    de0a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    de0e:	88c0      	ldrh	r0, [r0, #6]
    de10:	b131      	cbz	r1, de20 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    de12:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    de16:	d903      	bls.n	de20 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    de18:	f640 5107 	movw	r1, #3335	; 0xd07
    de1c:	428a      	cmp	r2, r1
    de1e:	d90b      	bls.n	de38 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    de20:	1f91      	subs	r1, r2, #6
    de22:	f640 467a 	movw	r6, #3194	; 0xc7a
    de26:	42b1      	cmp	r1, r6
    de28:	d810      	bhi.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de2a:	b17b      	cbz	r3, de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de2c:	2b08      	cmp	r3, #8
    de2e:	d80d      	bhi.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de30:	4293      	cmp	r3, r2
    de32:	d20b      	bcs.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de34:	4295      	cmp	r5, r2
    de36:	d809      	bhi.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de38:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    de3c:	d206      	bcs.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de3e:	f640 4176 	movw	r1, #3190	; 0xc76
    de42:	380a      	subs	r0, #10
    de44:	4288      	cmp	r0, r1
    de46:	d801      	bhi.n	de4c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de48:	2001      	movs	r0, #1
    de4a:	bd70      	pop	{r4, r5, r6, pc}
    de4c:	2000      	movs	r0, #0
    de4e:	bd70      	pop	{r4, r5, r6, pc}

0000de50 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    de50:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    de54:	4770      	bx	lr

0000de56 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    de56:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    de5a:	4770      	bx	lr

0000de5c <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    de5c:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    de60:	4770      	bx	lr

0000de62 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    de62:	b510      	push	{r4, lr}
    de64:	29fb      	cmp	r1, #251	; 0xfb
    de66:	d904      	bls.n	de72 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    de68:	f240 61ac 	movw	r1, #1708	; 0x6ac
    de6c:	202a      	movs	r0, #42	; 0x2a
    de6e:	f7f6 fb7d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de72:	7041      	strb	r1, [r0, #1]
    de74:	bd10      	pop	{r4, pc}

0000de76 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    de76:	8980      	ldrh	r0, [r0, #12]
    de78:	8008      	strh	r0, [r1, #0]
    de7a:	4770      	bx	lr

0000de7c <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    de7c:	f8d0 0016 	ldr.w	r0, [r0, #22]
    de80:	6008      	str	r0, [r1, #0]
    de82:	4770      	bx	lr

0000de84 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    de84:	6842      	ldr	r2, [r0, #4]
    de86:	600a      	str	r2, [r1, #0]
    de88:	6880      	ldr	r0, [r0, #8]
    de8a:	6048      	str	r0, [r1, #4]
    de8c:	4770      	bx	lr

0000de8e <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    de8e:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    de92:	600a      	str	r2, [r1, #0]
    de94:	6840      	ldr	r0, [r0, #4]
    de96:	6048      	str	r0, [r1, #4]
    de98:	4770      	bx	lr

0000de9a <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    de9a:	6809      	ldr	r1, [r1, #0]
    de9c:	60c1      	str	r1, [r0, #12]
    de9e:	4770      	bx	lr

0000dea0 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    dea0:	680a      	ldr	r2, [r1, #0]
    dea2:	6042      	str	r2, [r0, #4]
    dea4:	6849      	ldr	r1, [r1, #4]
    dea6:	6081      	str	r1, [r0, #8]
    dea8:	4770      	bx	lr

0000deaa <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    deaa:	7800      	ldrb	r0, [r0, #0]
    deac:	f000 0003 	and.w	r0, r0, #3
    deb0:	4770      	bx	lr

0000deb2 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    deb2:	8880      	ldrh	r0, [r0, #4]
    deb4:	4770      	bx	lr

0000deb6 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    deb6:	88c0      	ldrh	r0, [r0, #6]
    deb8:	4770      	bx	lr

0000deba <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    deba:	8900      	ldrh	r0, [r0, #8]
    debc:	4770      	bx	lr

0000debe <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    debe:	8940      	ldrh	r0, [r0, #10]
    dec0:	4770      	bx	lr

0000dec2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    dec2:	8901      	ldrh	r1, [r0, #8]
    dec4:	291b      	cmp	r1, #27
    dec6:	d30c      	bcc.n	dee2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dec8:	8941      	ldrh	r1, [r0, #10]
    deca:	f44f 72a4 	mov.w	r2, #328	; 0x148
    dece:	4291      	cmp	r1, r2
    ded0:	d307      	bcc.n	dee2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    ded2:	8881      	ldrh	r1, [r0, #4]
    ded4:	291b      	cmp	r1, #27
    ded6:	d304      	bcc.n	dee2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    ded8:	88c0      	ldrh	r0, [r0, #6]
    deda:	4290      	cmp	r0, r2
    dedc:	d301      	bcc.n	dee2 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dede:	2001      	movs	r0, #1
    dee0:	4770      	bx	lr
    dee2:	2000      	movs	r0, #0
    dee4:	4770      	bx	lr

0000dee6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    dee6:	7901      	ldrb	r1, [r0, #4]
    dee8:	0749      	lsls	r1, r1, #29
    deea:	d004      	beq.n	def6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    deec:	7940      	ldrb	r0, [r0, #5]
    deee:	0740      	lsls	r0, r0, #29
    def0:	d001      	beq.n	def6 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    def2:	2001      	movs	r0, #1
    def4:	4770      	bx	lr
    def6:	2000      	movs	r0, #0
    def8:	4770      	bx	lr

0000defa <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    defa:	88c0      	ldrh	r0, [r0, #6]
    defc:	4770      	bx	lr

0000defe <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    defe:	7901      	ldrb	r1, [r0, #4]
    df00:	7940      	ldrb	r0, [r0, #5]
    df02:	f001 0107 	and.w	r1, r1, #7
    df06:	1e4a      	subs	r2, r1, #1
    df08:	f000 0007 	and.w	r0, r0, #7
    df0c:	4011      	ands	r1, r2
    df0e:	1e42      	subs	r2, r0, #1
    df10:	4010      	ands	r0, r2
    df12:	4301      	orrs	r1, r0
    df14:	d001      	beq.n	df1a <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    df16:	2000      	movs	r0, #0
    df18:	4770      	bx	lr
    df1a:	2001      	movs	r0, #1
    df1c:	4770      	bx	lr

0000df1e <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    df1e:	7900      	ldrb	r0, [r0, #4]
    df20:	4770      	bx	lr

0000df22 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    df22:	7940      	ldrb	r0, [r0, #5]
    df24:	4770      	bx	lr

0000df26 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    df26:	7900      	ldrb	r0, [r0, #4]
    df28:	4770      	bx	lr

0000df2a <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    df2a:	7101      	strb	r1, [r0, #4]
    df2c:	4770      	bx	lr

0000df2e <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    df2e:	7940      	ldrb	r0, [r0, #5]
    df30:	4770      	bx	lr

0000df32 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    df32:	7141      	strb	r1, [r0, #5]
    df34:	4770      	bx	lr

0000df36 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    df36:	b510      	push	{r4, lr}
    df38:	2a1b      	cmp	r2, #27
    df3a:	d904      	bls.n	df46 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    df3c:	f240 4182 	movw	r1, #1154	; 0x482
    df40:	202a      	movs	r0, #42	; 0x2a
    df42:	f7f6 fb13 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df46:	7042      	strb	r2, [r0, #1]
    df48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df4c:	1cc0      	adds	r0, r0, #3
    df4e:	f7fe baa4 	b.w	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000df52 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    df52:	7802      	ldrb	r2, [r0, #0]
    df54:	f001 0103 	and.w	r1, r1, #3
    df58:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    df5c:	430a      	orrs	r2, r1
    df5e:	7002      	strb	r2, [r0, #0]
    df60:	4770      	bx	lr

0000df62 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    df62:	7101      	strb	r1, [r0, #4]
    df64:	0a09      	lsrs	r1, r1, #8
    df66:	7141      	strb	r1, [r0, #5]
    df68:	4770      	bx	lr

0000df6a <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    df6a:	7181      	strb	r1, [r0, #6]
    df6c:	0a09      	lsrs	r1, r1, #8
    df6e:	71c1      	strb	r1, [r0, #7]
    df70:	4770      	bx	lr

0000df72 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    df72:	7201      	strb	r1, [r0, #8]
    df74:	0a09      	lsrs	r1, r1, #8
    df76:	7241      	strb	r1, [r0, #9]
    df78:	4770      	bx	lr

0000df7a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    df7a:	7281      	strb	r1, [r0, #10]
    df7c:	0a09      	lsrs	r1, r1, #8
    df7e:	72c1      	strb	r1, [r0, #11]
    df80:	4770      	bx	lr

0000df82 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    df82:	7900      	ldrb	r0, [r0, #4]
    df84:	4770      	bx	lr

0000df86 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    df86:	7900      	ldrb	r0, [r0, #4]
    df88:	4770      	bx	lr
    df8a:	b570      	push	{r4, r5, r6, lr}
    df8c:	f8d0 201f 	ldr.w	r2, [r0, #31]
    df90:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    df94:	f012 0fff 	tst.w	r2, #255	; 0xff
    df98:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    df9c:	d108      	bne.n	dfb0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    df9e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    dfa2:	b92c      	cbnz	r4, dfb0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dfa4:	f3c2 4407 	ubfx	r4, r2, #16, #8
    dfa8:	b914      	cbnz	r4, dfb0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dfaa:	0e12      	lsrs	r2, r2, #24
    dfac:	d100      	bne.n	dfb0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dfae:	b34b      	cbz	r3, e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfb0:	7846      	ldrb	r6, [r0, #1]
    dfb2:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    dfb6:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    dfba:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    dfbe:	7d83      	ldrb	r3, [r0, #22]
    dfc0:	2e22      	cmp	r6, #34	; 0x22
    dfc2:	d11f      	bne.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfc4:	b131      	cbz	r1, dfd4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    dfc6:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    dfca:	d903      	bls.n	dfd4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    dfcc:	f640 5107 	movw	r1, #3335	; 0xd07
    dfd0:	428a      	cmp	r2, r1
    dfd2:	d90b      	bls.n	dfec <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    dfd4:	1f91      	subs	r1, r2, #6
    dfd6:	f640 467a 	movw	r6, #3194	; 0xc7a
    dfda:	42b1      	cmp	r1, r6
    dfdc:	d812      	bhi.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfde:	b18b      	cbz	r3, e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfe0:	2b08      	cmp	r3, #8
    dfe2:	d80f      	bhi.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfe4:	4293      	cmp	r3, r2
    dfe6:	d20d      	bcs.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfe8:	4295      	cmp	r5, r2
    dfea:	d80b      	bhi.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfec:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    dff0:	d208      	bcs.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dff2:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    dff6:	f640 4176 	movw	r1, #3190	; 0xc76
    dffa:	380a      	subs	r0, #10
    dffc:	4288      	cmp	r0, r1
    dffe:	d801      	bhi.n	e004 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e000:	2001      	movs	r0, #1
    e002:	bd70      	pop	{r4, r5, r6, pc}
    e004:	2000      	movs	r0, #0
    e006:	bd70      	pop	{r4, r5, r6, pc}

0000e008 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e008:	6841      	ldr	r1, [r0, #4]
    e00a:	2200      	movs	r2, #0
    e00c:	f891 321a 	ldrb.w	r3, [r1, #538]	; 0x21a
    e010:	2b00      	cmp	r3, #0
    e012:	d004      	beq.n	e01e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e014:	f881 221a 	strb.w	r2, [r1, #538]	; 0x21a
    e018:	6840      	ldr	r0, [r0, #4]
    e01a:	f000 bd53 	b.w	eac4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e01e:	4770      	bx	lr

0000e020 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e020:	b510      	push	{r4, lr}
    e022:	7901      	ldrb	r1, [r0, #4]
    e024:	b119      	cbz	r1, e02e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e026:	2901      	cmp	r1, #1
    e028:	d006      	beq.n	e038 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e02a:	2000      	movs	r0, #0
    e02c:	bd10      	pop	{r4, pc}
    e02e:	8842      	ldrh	r2, [r0, #2]
    e030:	6883      	ldr	r3, [r0, #8]
    e032:	8800      	ldrh	r0, [r0, #0]
    e034:	2102      	movs	r1, #2
    e036:	e003      	b.n	e040 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e038:	8842      	ldrh	r2, [r0, #2]
    e03a:	6883      	ldr	r3, [r0, #8]
    e03c:	8800      	ldrh	r0, [r0, #0]
    e03e:	2101      	movs	r1, #1
    e040:	f7f8 f9b0 	bl	63a4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e044:	b908      	cbnz	r0, e04a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e046:	f7f8 f9f9 	bl	643c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e04a:	2001      	movs	r0, #1
    e04c:	bd10      	pop	{r4, pc}

0000e04e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e04e:	f7f8 bc3f 	b.w	68d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c0>
    e052:	b570      	push	{r4, r5, r6, lr}
    e054:	b180      	cbz	r0, e078 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2a>
    e056:	4604      	mov	r4, r0
    e058:	2300      	movs	r3, #0
    e05a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    e05e:	2a12      	cmp	r2, #18
    e060:	d047      	beq.n	e0f2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    e062:	dc0c      	bgt.n	e07e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x30>
    e064:	f1a2 0207 	sub.w	r2, r2, #7
    e068:	2a08      	cmp	r2, #8
    e06a:	d210      	bcs.n	e08e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    e06c:	e8df f002 	tbb	[pc, r2]
    e070:	0f0f1435 	.word	0x0f0f1435
    e074:	3b0f212a 	.word	0x3b0f212a
    e078:	f240 11d1 	movw	r1, #465	; 0x1d1
    e07c:	e009      	b.n	e092 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    e07e:	2a13      	cmp	r2, #19
    e080:	d058      	beq.n	e134 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe6>
    e082:	2a1c      	cmp	r2, #28
    e084:	d04f      	beq.n	e126 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xd8>
    e086:	2a1e      	cmp	r2, #30
    e088:	d03e      	beq.n	e108 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xba>
    e08a:	2a1f      	cmp	r2, #31
    e08c:	d047      	beq.n	e11e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xd0>
    e08e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    e092:	2010      	movs	r0, #16
    e094:	f7f6 fa6a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e098:	704b      	strb	r3, [r1, #1]
    e09a:	2207      	movs	r2, #7
    e09c:	700a      	strb	r2, [r1, #0]
    e09e:	84e3      	strh	r3, [r4, #38]	; 0x26
    e0a0:	f850 2f80 	ldr.w	r2, [r0, #128]!
    e0a4:	604a      	str	r2, [r1, #4]
    e0a6:	6842      	ldr	r2, [r0, #4]
    e0a8:	608a      	str	r2, [r1, #8]
    e0aa:	8900      	ldrh	r0, [r0, #8]
    e0ac:	8188      	strh	r0, [r1, #12]
    e0ae:	710b      	strb	r3, [r1, #4]
    e0b0:	bd70      	pop	{r4, r5, r6, pc}
    e0b2:	704b      	strb	r3, [r1, #1]
    e0b4:	220c      	movs	r2, #12
    e0b6:	700a      	strb	r2, [r1, #0]
    e0b8:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
    e0bc:	7108      	strb	r0, [r1, #4]
    e0be:	8820      	ldrh	r0, [r4, #0]
    e0c0:	80c8      	strh	r0, [r1, #6]
    e0c2:	bd70      	pop	{r4, r5, r6, pc}
    e0c4:	704b      	strb	r3, [r1, #1]
    e0c6:	220b      	movs	r2, #11
    e0c8:	700a      	strb	r2, [r1, #0]
    e0ca:	f810 2fc2 	ldrb.w	r2, [r0, #194]!
    e0ce:	710a      	strb	r2, [r1, #4]
    e0d0:	8822      	ldrh	r2, [r4, #0]
    e0d2:	80ca      	strh	r2, [r1, #6]
    e0d4:	7900      	ldrb	r0, [r0, #4]
    e0d6:	7208      	strb	r0, [r1, #8]
    e0d8:	bd70      	pop	{r4, r5, r6, pc}
    e0da:	704b      	strb	r3, [r1, #1]
    e0dc:	2206      	movs	r2, #6
    e0de:	700a      	strb	r2, [r1, #0]
    e0e0:	f850 2f6a 	ldr.w	r2, [r0, #106]!
    e0e4:	e00a      	b.n	e0fc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xae>
    e0e6:	704b      	strb	r3, [r1, #1]
    e0e8:	200e      	movs	r0, #14
    e0ea:	7008      	strb	r0, [r1, #0]
    e0ec:	8820      	ldrh	r0, [r4, #0]
    e0ee:	8088      	strh	r0, [r1, #4]
    e0f0:	bd70      	pop	{r4, r5, r6, pc}
    e0f2:	704b      	strb	r3, [r1, #1]
    e0f4:	2212      	movs	r2, #18
    e0f6:	700a      	strb	r2, [r1, #0]
    e0f8:	f850 2f22 	ldr.w	r2, [r0, #34]!
    e0fc:	604a      	str	r2, [r1, #4]
    e0fe:	6842      	ldr	r2, [r0, #4]
    e100:	608a      	str	r2, [r1, #8]
    e102:	6880      	ldr	r0, [r0, #8]
    e104:	60c8      	str	r0, [r1, #12]
    e106:	bd70      	pop	{r4, r5, r6, pc}
    e108:	704b      	strb	r3, [r1, #1]
    e10a:	221a      	movs	r2, #26
    e10c:	700a      	strb	r2, [r1, #0]
    e10e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e110:	604a      	str	r2, [r1, #4]
    e112:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    e114:	608a      	str	r2, [r1, #8]
    e116:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e11a:	8188      	strh	r0, [r1, #12]
    e11c:	bd70      	pop	{r4, r5, r6, pc}
    e11e:	221b      	movs	r2, #27
    e120:	700a      	strb	r2, [r1, #0]
    e122:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    e124:	e004      	b.n	e130 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe2>
    e126:	704b      	strb	r3, [r1, #1]
    e128:	2218      	movs	r2, #24
    e12a:	700a      	strb	r2, [r1, #0]
    e12c:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e130:	6048      	str	r0, [r1, #4]
    e132:	bd70      	pop	{r4, r5, r6, pc}
    e134:	704b      	strb	r3, [r1, #1]
    e136:	2213      	movs	r2, #19
    e138:	700a      	strb	r2, [r1, #0]
    e13a:	f850 2f5a 	ldr.w	r2, [r0, #90]!
    e13e:	604a      	str	r2, [r1, #4]
    e140:	8880      	ldrh	r0, [r0, #4]
    e142:	8108      	strh	r0, [r1, #8]
    e144:	bd70      	pop	{r4, r5, r6, pc}
    e146:	2000      	movs	r0, #0
    e148:	7048      	strb	r0, [r1, #1]
    e14a:	2003      	movs	r0, #3
    e14c:	7008      	strb	r0, [r1, #0]
    e14e:	2001      	movs	r0, #1
    e150:	7108      	strb	r0, [r1, #4]
    e152:	4770      	bx	lr

0000e154 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e154:	b4f0      	push	{r4, r5, r6, r7}
    e156:	8150      	strh	r0, [r2, #10]
    e158:	890d      	ldrh	r5, [r1, #8]
    e15a:	4614      	mov	r4, r2
    e15c:	8195      	strh	r5, [r2, #12]
    e15e:	898a      	ldrh	r2, [r1, #12]
    e160:	81e2      	strh	r2, [r4, #14]
    e162:	8948      	ldrh	r0, [r1, #10]
    e164:	8220      	strh	r0, [r4, #16]
    e166:	89ce      	ldrh	r6, [r1, #14]
    e168:	8266      	strh	r6, [r4, #18]
    e16a:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    e16c:	42b7      	cmp	r7, r6
    e16e:	d108      	bne.n	e182 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e170:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    e172:	4286      	cmp	r6, r0
    e174:	d105      	bne.n	e182 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e176:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    e178:	4296      	cmp	r6, r2
    e17a:	d102      	bne.n	e182 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e17c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    e17e:	42aa      	cmp	r2, r5
    e180:	d001      	beq.n	e186 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e182:	2201      	movs	r2, #1
    e184:	e000      	b.n	e188 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    e186:	2200      	movs	r2, #0
    e188:	7522      	strb	r2, [r4, #20]
    e18a:	8548      	strh	r0, [r1, #42]	; 0x2a
    e18c:	8a60      	ldrh	r0, [r4, #18]
    e18e:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e190:	89a0      	ldrh	r0, [r4, #12]
    e192:	8588      	strh	r0, [r1, #44]	; 0x2c
    e194:	89e0      	ldrh	r0, [r4, #14]
    e196:	8608      	strh	r0, [r1, #48]	; 0x30
    e198:	4620      	mov	r0, r4
    e19a:	bcf0      	pop	{r4, r5, r6, r7}
    e19c:	2212      	movs	r2, #18
    e19e:	4619      	mov	r1, r3
    e1a0:	f7f8 b956 	b.w	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000e1a4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e1a4:	b510      	push	{r4, lr}
    e1a6:	888c      	ldrh	r4, [r1, #4]
    e1a8:	890a      	ldrh	r2, [r1, #8]
    e1aa:	884b      	ldrh	r3, [r1, #2]
    e1ac:	88c9      	ldrh	r1, [r1, #6]
    e1ae:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e1b2:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e1b6:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e1ba:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e1be:	bd10      	pop	{r4, pc}

0000e1c0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e1c0:	b570      	push	{r4, r5, r6, lr}
    e1c2:	4615      	mov	r5, r2
    e1c4:	460c      	mov	r4, r1
    e1c6:	f000 f8cc 	bl	e362 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    e1ca:	3096      	adds	r0, #150	; 0x96
    e1cc:	4428      	add	r0, r5
    e1ce:	42a0      	cmp	r0, r4
    e1d0:	d801      	bhi.n	e1d6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e1d2:	1a20      	subs	r0, r4, r0
    e1d4:	bd70      	pop	{r4, r5, r6, pc}
    e1d6:	2000      	movs	r0, #0
    e1d8:	bd70      	pop	{r4, r5, r6, pc}

0000e1da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e1da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1de:	4604      	mov	r4, r0
    e1e0:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e1e2:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e1e4:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e1e8:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e1ec:	4285      	cmp	r5, r0
    e1ee:	d300      	bcc.n	e1f2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e1f0:	4605      	mov	r5, r0
    e1f2:	4620      	mov	r0, r4
    e1f4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e1f8:	f000 f8a3 	bl	e342 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    e1fc:	4601      	mov	r1, r0
    e1fe:	86e5      	strh	r5, [r4, #54]	; 0x36
    e200:	8761      	strh	r1, [r4, #58]	; 0x3a
    e202:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e204:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e208:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e20a:	4680      	mov	r8, r0
    e20c:	42aa      	cmp	r2, r5
    e20e:	d200      	bcs.n	e212 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e210:	462a      	mov	r2, r5
    e212:	428b      	cmp	r3, r1
    e214:	d200      	bcs.n	e218 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e216:	460b      	mov	r3, r1
    e218:	8202      	strh	r2, [r0, #16]
    e21a:	f8a8 3012 	strh.w	r3, [r8, #18]
    e21e:	42bd      	cmp	r5, r7
    e220:	d101      	bne.n	e226 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e222:	42b1      	cmp	r1, r6
    e224:	d001      	beq.n	e22a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e226:	2001      	movs	r0, #1
    e228:	e000      	b.n	e22c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e22a:	2000      	movs	r0, #0
    e22c:	4681      	mov	r9, r0
    e22e:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e232:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e236:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e238:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e23a:	4285      	cmp	r5, r0
    e23c:	d300      	bcc.n	e240 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e23e:	4605      	mov	r5, r0
    e240:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e244:	4620      	mov	r0, r4
    e246:	f000 f884 	bl	e352 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    e24a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e24e:	2902      	cmp	r1, #2
    e250:	d108      	bne.n	e264 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e252:	42af      	cmp	r7, r5
    e254:	d200      	bcs.n	e258 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e256:	463d      	mov	r5, r7
    e258:	4286      	cmp	r6, r0
    e25a:	d200      	bcs.n	e25e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e25c:	4630      	mov	r0, r6
    e25e:	2100      	movs	r1, #0
    e260:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e264:	f8a8 5008 	strh.w	r5, [r8, #8]
    e268:	f8a8 000c 	strh.w	r0, [r8, #12]
    e26c:	42bd      	cmp	r5, r7
    e26e:	d101      	bne.n	e274 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e270:	42b0      	cmp	r0, r6
    e272:	d001      	beq.n	e278 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e274:	2001      	movs	r0, #1
    e276:	e000      	b.n	e27a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e278:	2000      	movs	r0, #0
    e27a:	ea40 0009 	orr.w	r0, r0, r9
    e27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e282 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e282:	6840      	ldr	r0, [r0, #4]
    e284:	4770      	bx	lr

0000e286 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e28a:	4616      	mov	r6, r2
    e28c:	460f      	mov	r7, r1
    e28e:	4604      	mov	r4, r0
    e290:	f000 f867 	bl	e362 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    e294:	4605      	mov	r5, r0
    e296:	463a      	mov	r2, r7
    e298:	6921      	ldr	r1, [r4, #16]
    e29a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e29c:	f000 f84c 	bl	e338 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e2a0:	19a9      	adds	r1, r5, r6
    e2a2:	4281      	cmp	r1, r0
    e2a4:	d300      	bcc.n	e2a8 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e2a6:	4608      	mov	r0, r1
    e2a8:	6320      	str	r0, [r4, #48]	; 0x30
    e2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e2ae <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e2ae:	221b      	movs	r2, #27
    e2b0:	8402      	strh	r2, [r0, #32]
    e2b2:	8382      	strh	r2, [r0, #28]
    e2b4:	82c2      	strh	r2, [r0, #22]
    e2b6:	8282      	strh	r2, [r0, #20]
    e2b8:	8142      	strh	r2, [r0, #10]
    e2ba:	8202      	strh	r2, [r0, #16]
    e2bc:	8102      	strh	r2, [r0, #8]
    e2be:	8542      	strh	r2, [r0, #42]	; 0x2a
    e2c0:	8582      	strh	r2, [r0, #44]	; 0x2c
    e2c2:	8482      	strh	r2, [r0, #36]	; 0x24
    e2c4:	2900      	cmp	r1, #0
    e2c6:	d10a      	bne.n	e2de <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e2c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e2cc:	8441      	strh	r1, [r0, #34]	; 0x22
    e2ce:	83c1      	strh	r1, [r0, #30]
    e2d0:	8341      	strh	r1, [r0, #26]
    e2d2:	8301      	strh	r1, [r0, #24]
    e2d4:	81c1      	strh	r1, [r0, #14]
    e2d6:	8241      	strh	r1, [r0, #18]
    e2d8:	8181      	strh	r1, [r0, #12]
    e2da:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e2dc:	8601      	strh	r1, [r0, #48]	; 0x30
    e2de:	4770      	bx	lr

0000e2e0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e2e0:	6800      	ldr	r0, [r0, #0]
    e2e2:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e2e6:	4290      	cmp	r0, r2
    e2e8:	d903      	bls.n	e2f2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e2ea:	1a40      	subs	r0, r0, r1
    e2ec:	389c      	subs	r0, #156	; 0x9c
    e2ee:	0840      	lsrs	r0, r0, #1
    e2f0:	4770      	bx	lr
    e2f2:	2000      	movs	r0, #0
    e2f4:	4770      	bx	lr

0000e2f6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e2f6:	b510      	push	{r4, lr}
    e2f8:	9c02      	ldr	r4, [sp, #8]
    e2fa:	8281      	strh	r1, [r0, #20]
    e2fc:	82c2      	strh	r2, [r0, #22]
    e2fe:	8303      	strh	r3, [r0, #24]
    e300:	8344      	strh	r4, [r0, #26]
    e302:	bd10      	pop	{r4, pc}

0000e304 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e304:	b430      	push	{r4, r5}
    e306:	8150      	strh	r0, [r2, #10]
    e308:	8a88      	ldrh	r0, [r1, #20]
    e30a:	8190      	strh	r0, [r2, #12]
    e30c:	8ac8      	ldrh	r0, [r1, #22]
    e30e:	81d0      	strh	r0, [r2, #14]
    e310:	8b08      	ldrh	r0, [r1, #24]
    e312:	8210      	strh	r0, [r2, #16]
    e314:	8b48      	ldrh	r0, [r1, #26]
    e316:	4614      	mov	r4, r2
    e318:	8250      	strh	r0, [r2, #18]
    e31a:	4620      	mov	r0, r4
    e31c:	bc30      	pop	{r4, r5}
    e31e:	221e      	movs	r2, #30
    e320:	4619      	mov	r1, r3
    e322:	f7f8 b895 	b.w	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e326:	2902      	cmp	r1, #2
    e328:	d003      	beq.n	e332 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    e32a:	00c0      	lsls	r0, r0, #3
    e32c:	3070      	adds	r0, #112	; 0x70
    e32e:	b280      	uxth	r0, r0
    e330:	4770      	bx	lr
    e332:	0080      	lsls	r0, r0, #2
    e334:	303c      	adds	r0, #60	; 0x3c
    e336:	e7fa      	b.n	e32e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e338:	4288      	cmp	r0, r1
    e33a:	d300      	bcc.n	e33e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    e33c:	4608      	mov	r0, r1
    e33e:	1a80      	subs	r0, r0, r2
    e340:	4770      	bx	lr
    e342:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e346:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e34a:	4281      	cmp	r1, r0
    e34c:	d200      	bcs.n	e350 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    e34e:	4608      	mov	r0, r1
    e350:	4770      	bx	lr
    e352:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e356:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e35a:	4281      	cmp	r1, r0
    e35c:	d200      	bcs.n	e360 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    e35e:	4608      	mov	r0, r1
    e360:	4770      	bx	lr
    e362:	2196      	movs	r1, #150	; 0x96
    e364:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e368:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e36c:	f000 b800 	b.w	e370 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    e370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e374:	460d      	mov	r5, r1
    e376:	4606      	mov	r6, r0
    e378:	4698      	mov	r8, r3
    e37a:	4617      	mov	r7, r2
    e37c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e37e:	4611      	mov	r1, r2
    e380:	f7ff ffd1 	bl	e326 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    e384:	4604      	mov	r4, r0
    e386:	4639      	mov	r1, r7
    e388:	4630      	mov	r0, r6
    e38a:	f7ff ffe2 	bl	e352 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    e38e:	42a0      	cmp	r0, r4
    e390:	d200      	bcs.n	e394 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    e392:	4604      	mov	r4, r0
    e394:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e396:	4641      	mov	r1, r8
    e398:	f7ff ffc5 	bl	e326 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    e39c:	4607      	mov	r7, r0
    e39e:	4641      	mov	r1, r8
    e3a0:	4630      	mov	r0, r6
    e3a2:	f7ff ffce 	bl	e342 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    e3a6:	42b8      	cmp	r0, r7
    e3a8:	d300      	bcc.n	e3ac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    e3aa:	4638      	mov	r0, r7
    e3ac:	4420      	add	r0, r4
    e3ae:	4428      	add	r0, r5
    e3b0:	1d80      	adds	r0, r0, #6
    e3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3b6:	b510      	push	{r4, lr}
    e3b8:	4604      	mov	r4, r0
    e3ba:	2108      	movs	r1, #8
    e3bc:	4620      	mov	r0, r4
    e3be:	f7f6 f983 	bl	46c8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e3c2:	6820      	ldr	r0, [r4, #0]
    e3c4:	2800      	cmp	r0, #0
    e3c6:	d102      	bne.n	e3ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xca>
    e3c8:	6860      	ldr	r0, [r4, #4]
    e3ca:	2800      	cmp	r0, #0
    e3cc:	d0f5      	beq.n	e3ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    e3ce:	bd10      	pop	{r4, pc}

0000e3d0 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e3d0:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e3d4:	2255      	movs	r2, #85	; 0x55
    e3d6:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e3da:	4408      	add	r0, r1
    e3dc:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e3e0:	2233      	movs	r2, #51	; 0x33
    e3e2:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e3e6:	4408      	add	r0, r1
    e3e8:	f000 010f 	and.w	r1, r0, #15
    e3ec:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e3f0:	4770      	bx	lr

0000e3f2 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e3f2:	b510      	push	{r4, lr}
    e3f4:	6844      	ldr	r4, [r0, #4]
    e3f6:	7803      	ldrb	r3, [r0, #0]
    e3f8:	2100      	movs	r1, #0
    e3fa:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
    e3fe:	3480      	adds	r4, #128	; 0x80
    e400:	4620      	mov	r0, r4
    e402:	f7ff fa92 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e406:	b110      	cbz	r0, e40e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e408:	2004      	movs	r0, #4
    e40a:	7560      	strb	r0, [r4, #21]
    e40c:	bd10      	pop	{r4, pc}
    e40e:	2188      	movs	r1, #136	; 0x88
    e410:	201c      	movs	r0, #28
    e412:	f7f6 f8ab 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e416 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e416:	b510      	push	{r4, lr}
    e418:	6841      	ldr	r1, [r0, #4]
    e41a:	f891 2084 	ldrb.w	r2, [r1, #132]	; 0x84
    e41e:	07d2      	lsls	r2, r2, #31
    e420:	d00b      	beq.n	e43a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e422:	f811 2fd2 	ldrb.w	r2, [r1, #210]!
    e426:	1e52      	subs	r2, r2, #1
    e428:	b252      	sxtb	r2, r2
    e42a:	700a      	strb	r2, [r1, #0]
    e42c:	6840      	ldr	r0, [r0, #4]
    e42e:	2a00      	cmp	r2, #0
    e430:	da05      	bge.n	e43e <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e432:	2197      	movs	r1, #151	; 0x97
    e434:	201c      	movs	r0, #28
    e436:	f7f6 f899 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e43a:	2195      	movs	r1, #149	; 0x95
    e43c:	e7fa      	b.n	e434 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e43e:	f850 1f84 	ldr.w	r1, [r0, #132]!
    e442:	f021 0101 	bic.w	r1, r1, #1
    e446:	6001      	str	r1, [r0, #0]
    e448:	bd10      	pop	{r4, pc}

0000e44a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    e44a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e44c:	6841      	ldr	r1, [r0, #4]
    e44e:	4606      	mov	r6, r0
    e450:	460c      	mov	r4, r1
    e452:	3180      	adds	r1, #128	; 0x80
    e454:	460d      	mov	r5, r1
    e456:	4620      	mov	r0, r4
    e458:	f000 f820 	bl	e49c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x52>
    e45c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    e460:	2901      	cmp	r1, #1
    e462:	d11a      	bne.n	e49a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e464:	2800      	cmp	r0, #0
    e466:	d018      	beq.n	e49a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e468:	6870      	ldr	r0, [r6, #4]
    e46a:	4601      	mov	r1, r0
    e46c:	f890 214c 	ldrb.w	r2, [r0, #332]	; 0x14c
    e470:	f88d 2000 	strb.w	r2, [sp]
    e474:	9a00      	ldr	r2, [sp, #0]
    e476:	9200      	str	r2, [sp, #0]
    e478:	f89d 2000 	ldrb.w	r2, [sp]
    e47c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    e480:	2a00      	cmp	r2, #0
    e482:	d10a      	bne.n	e49a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e484:	8822      	ldrh	r2, [r4, #0]
    e486:	8142      	strh	r2, [r0, #10]
    e488:	7c6a      	ldrb	r2, [r5, #17]
    e48a:	7302      	strb	r2, [r0, #12]
    e48c:	7caa      	ldrb	r2, [r5, #18]
    e48e:	7342      	strb	r2, [r0, #13]
    e490:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e494:	221c      	movs	r2, #28
    e496:	f7f7 bfdb 	b.w	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e49c:	b538      	push	{r3, r4, r5, lr}
    e49e:	4605      	mov	r5, r0
    e4a0:	460c      	mov	r4, r1
    e4a2:	4668      	mov	r0, sp
    e4a4:	f7fc fe54 	bl	b150 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e4a8:	b338      	cbz	r0, e4fa <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb0>
    e4aa:	f99d 1000 	ldrsb.w	r1, [sp]
    e4ae:	7461      	strb	r1, [r4, #17]
    e4b0:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    e4b4:	74a0      	strb	r0, [r4, #18]
    e4b6:	6820      	ldr	r0, [r4, #0]
    e4b8:	f7f8 fb04 	bl	6ac4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    e4bc:	6020      	str	r0, [r4, #0]
    e4be:	f99d 2000 	ldrsb.w	r2, [sp]
    e4c2:	f994 1013 	ldrsb.w	r1, [r4, #19]
    e4c6:	2000      	movs	r0, #0
    e4c8:	1a51      	subs	r1, r2, r1
    e4ca:	d500      	bpl.n	e4ce <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x84>
    e4cc:	4249      	negs	r1, r1
    e4ce:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    e4d2:	428b      	cmp	r3, r1
    e4d4:	dc10      	bgt.n	e4f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e4d6:	2bff      	cmp	r3, #255	; 0xff
    e4d8:	d00e      	beq.n	e4f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e4da:	7d21      	ldrb	r1, [r4, #20]
    e4dc:	1c49      	adds	r1, r1, #1
    e4de:	b2c9      	uxtb	r1, r1
    e4e0:	7521      	strb	r1, [r4, #20]
    e4e2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    e4e6:	4299      	cmp	r1, r3
    e4e8:	d802      	bhi.n	e4f0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xa6>
    e4ea:	7ce1      	ldrb	r1, [r4, #19]
    e4ec:	297f      	cmp	r1, #127	; 0x7f
    e4ee:	d103      	bne.n	e4f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e4f0:	74e2      	strb	r2, [r4, #19]
    e4f2:	2000      	movs	r0, #0
    e4f4:	7520      	strb	r0, [r4, #20]
    e4f6:	2001      	movs	r0, #1
    e4f8:	bd38      	pop	{r3, r4, r5, pc}
    e4fa:	207f      	movs	r0, #127	; 0x7f
    e4fc:	7460      	strb	r0, [r4, #17]
    e4fe:	2000      	movs	r0, #0
    e500:	bd38      	pop	{r3, r4, r5, pc}
    e502:	2801      	cmp	r0, #1
    e504:	d102      	bne.n	e50c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xc2>
    e506:	7948      	ldrb	r0, [r1, #5]
    e508:	0980      	lsrs	r0, r0, #6
    e50a:	d001      	beq.n	e510 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xc6>
    e50c:	2000      	movs	r0, #0
    e50e:	4770      	bx	lr
    e510:	2001      	movs	r0, #1
    e512:	4770      	bx	lr
    e514:	2801      	cmp	r0, #1
    e516:	d106      	bne.n	e526 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xdc>
    e518:	7948      	ldrb	r0, [r1, #5]
    e51a:	2101      	movs	r1, #1
    e51c:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e520:	d101      	bne.n	e526 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xdc>
    e522:	2001      	movs	r0, #1
    e524:	4770      	bx	lr
    e526:	2000      	movs	r0, #0
    e528:	4770      	bx	lr
    e52a:	2802      	cmp	r0, #2
    e52c:	d003      	beq.n	e536 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xec>
    e52e:	2803      	cmp	r0, #3
    e530:	d001      	beq.n	e536 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xec>
    e532:	2000      	movs	r0, #0
    e534:	4770      	bx	lr
    e536:	2001      	movs	r0, #1
    e538:	4770      	bx	lr

0000e53a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e53a:	b510      	push	{r4, lr}
    e53c:	4604      	mov	r4, r0
    e53e:	7c00      	ldrb	r0, [r0, #16]
    e540:	f7ff fff3 	bl	e52a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xe0>
    e544:	b148      	cbz	r0, e55a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e546:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    e54a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    e54e:	f7ff f98e 	bl	d86e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e552:	2808      	cmp	r0, #8
    e554:	d001      	beq.n	e55a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e556:	2001      	movs	r0, #1
    e558:	bd10      	pop	{r4, pc}
    e55a:	7c20      	ldrb	r0, [r4, #16]
    e55c:	b118      	cbz	r0, e566 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e55e:	2802      	cmp	r0, #2
    e560:	d001      	beq.n	e566 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e562:	7de0      	ldrb	r0, [r4, #23]
    e564:	bd10      	pop	{r4, pc}
    e566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e56a:	2000      	movs	r0, #0
    e56c:	f7f6 bec6 	b.w	52fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e570 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e570:	b508      	push	{r3, lr}
    e572:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e576:	f88d 1000 	strb.w	r1, [sp]
    e57a:	9900      	ldr	r1, [sp, #0]
    e57c:	9100      	str	r1, [sp, #0]
    e57e:	f89d 1000 	ldrb.w	r1, [sp]
    e582:	b109      	cbz	r1, e588 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    e584:	2001      	movs	r0, #1
    e586:	bd08      	pop	{r3, pc}
    e588:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    e58c:	f88d 0000 	strb.w	r0, [sp]
    e590:	9800      	ldr	r0, [sp, #0]
    e592:	9000      	str	r0, [sp, #0]
    e594:	f89d 0000 	ldrb.w	r0, [sp]
    e598:	2000      	movs	r0, #0
    e59a:	bd08      	pop	{r3, pc}

0000e59c <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e59c:	20ff      	movs	r0, #255	; 0xff
    e59e:	7008      	strb	r0, [r1, #0]
    e5a0:	6b48      	ldr	r0, [r1, #52]	; 0x34
    e5a2:	f7ff b869 	b.w	d678 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e5a6 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e5a6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e5a8:	460d      	mov	r5, r1
    e5aa:	4604      	mov	r4, r0
    e5ac:	f44f 728c 	mov.w	r2, #280	; 0x118
    e5b0:	2100      	movs	r1, #0
    e5b2:	f7fd ffec 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e5b6:	20ff      	movs	r0, #255	; 0xff
    e5b8:	7020      	strb	r0, [r4, #0]
    e5ba:	207f      	movs	r0, #127	; 0x7f
    e5bc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e5c0:	2013      	movs	r0, #19
    e5c2:	8060      	strh	r0, [r4, #2]
    e5c4:	f242 7010 	movw	r0, #10000	; 0x2710
    e5c8:	8460      	strh	r0, [r4, #34]	; 0x22
    e5ca:	f7f6 fc85 	bl	4ed8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e5ce:	4601      	mov	r1, r0
    e5d0:	6360      	str	r0, [r4, #52]	; 0x34
    e5d2:	2200      	movs	r2, #0
    e5d4:	4668      	mov	r0, sp
    e5d6:	f7fe ffb9 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e5da:	2200      	movs	r2, #0
    e5dc:	2101      	movs	r1, #1
    e5de:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e5e0:	f7ff f82a 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e5e4:	2204      	movs	r2, #4
    e5e6:	4668      	mov	r0, sp
    e5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e5ea:	f7fe ffaf 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e5ee:	2200      	movs	r2, #0
    e5f0:	4611      	mov	r1, r2
    e5f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e5f4:	f7ff f820 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e5f8:	73a5      	strb	r5, [r4, #14]
    e5fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e5fe:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e602:	f000 b9b9 	b.w	e978 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e606 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e606:	7880      	ldrb	r0, [r0, #2]
    e608:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e60c:	b108      	cbz	r0, e612 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e60e:	2000      	movs	r0, #0
    e610:	4770      	bx	lr
    e612:	201f      	movs	r0, #31
    e614:	4770      	bx	lr

0000e616 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e616:	f7f8 bf33 	b.w	7480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>

0000e61a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    e61a:	b510      	push	{r4, lr}
    e61c:	2300      	movs	r3, #0
    e61e:	2a05      	cmp	r2, #5
    e620:	d013      	beq.n	e64a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x30>
    e622:	2a10      	cmp	r2, #16
    e624:	d018      	beq.n	e658 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3e>
    e626:	2a14      	cmp	r2, #20
    e628:	d038      	beq.n	e69c <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x82>
    e62a:	2a1d      	cmp	r2, #29
    e62c:	d002      	beq.n	e634 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1a>
    e62e:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    e632:	e056      	b.n	e6e2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    e634:	704b      	strb	r3, [r1, #1]
    e636:	2219      	movs	r2, #25
    e638:	700a      	strb	r2, [r1, #0]
    e63a:	f850 2fbd 	ldr.w	r2, [r0, #189]!
    e63e:	604a      	str	r2, [r1, #4]
    e640:	6842      	ldr	r2, [r0, #4]
    e642:	608a      	str	r2, [r1, #8]
    e644:	7a00      	ldrb	r0, [r0, #8]
    e646:	7308      	strb	r0, [r1, #12]
    e648:	bd10      	pop	{r4, pc}
    e64a:	704b      	strb	r3, [r1, #1]
    e64c:	2205      	movs	r2, #5
    e64e:	700a      	strb	r2, [r1, #0]
    e650:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
    e654:	6048      	str	r0, [r1, #4]
    e656:	bd10      	pop	{r4, pc}
    e658:	460c      	mov	r4, r1
    e65a:	704b      	strb	r3, [r1, #1]
    e65c:	2111      	movs	r1, #17
    e65e:	7021      	strb	r1, [r4, #0]
    e660:	f100 0176 	add.w	r1, r0, #118	; 0x76
    e664:	2220      	movs	r2, #32
    e666:	1d20      	adds	r0, r4, #4
    e668:	f7fd ff17 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e66c:	2001      	movs	r0, #1
    e66e:	7220      	strb	r0, [r4, #8]
    e670:	7920      	ldrb	r0, [r4, #4]
    e672:	2800      	cmp	r0, #0
    e674:	d0ef      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e676:	88e4      	ldrh	r4, [r4, #6]
    e678:	2100      	movs	r1, #0
    e67a:	4620      	mov	r0, r4
    e67c:	f7fe feb4 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e680:	2800      	cmp	r0, #0
    e682:	d0e8      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e684:	8800      	ldrh	r0, [r0, #0]
    e686:	f7ff f856 	bl	d736 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e68a:	2100      	movs	r1, #0
    e68c:	4620      	mov	r0, r4
    e68e:	f7f6 f9ef 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e692:	2800      	cmp	r0, #0
    e694:	d0df      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e696:	f240 216a 	movw	r1, #618	; 0x26a
    e69a:	e022      	b.n	e6e2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    e69c:	704b      	strb	r3, [r1, #1]
    e69e:	2214      	movs	r2, #20
    e6a0:	700a      	strb	r2, [r1, #0]
    e6a2:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    e6a6:	604a      	str	r2, [r1, #4]
    e6a8:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    e6ac:	810a      	strh	r2, [r1, #8]
    e6ae:	790a      	ldrb	r2, [r1, #4]
    e6b0:	2a00      	cmp	r2, #0
    e6b2:	d0d0      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e6b4:	7880      	ldrb	r0, [r0, #2]
    e6b6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e6ba:	2800      	cmp	r0, #0
    e6bc:	d1cb      	bne.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e6be:	88cc      	ldrh	r4, [r1, #6]
    e6c0:	2100      	movs	r1, #0
    e6c2:	4620      	mov	r0, r4
    e6c4:	f7fe fe90 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e6c8:	2800      	cmp	r0, #0
    e6ca:	d0c4      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e6cc:	8800      	ldrh	r0, [r0, #0]
    e6ce:	f7ff f832 	bl	d736 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e6d2:	2100      	movs	r1, #0
    e6d4:	4620      	mov	r0, r4
    e6d6:	f7f6 f9cb 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e6da:	2800      	cmp	r0, #0
    e6dc:	d0bb      	beq.n	e656 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e6de:	f240 219a 	movw	r1, #666	; 0x29a
    e6e2:	202d      	movs	r0, #45	; 0x2d
    e6e4:	f7f5 ff42 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e6e8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e6e8:	6880      	ldr	r0, [r0, #8]
    e6ea:	4770      	bx	lr

0000e6ec <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e6ec:	2001      	movs	r0, #1
    e6ee:	4770      	bx	lr

0000e6f0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e6f0:	b510      	push	{r4, lr}
    e6f2:	4604      	mov	r4, r0
    e6f4:	3028      	adds	r0, #40	; 0x28
    e6f6:	f000 f8ff 	bl	e8f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e6fa:	8861      	ldrh	r1, [r4, #2]
    e6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e700:	2228      	movs	r2, #40	; 0x28
    e702:	f7f9 b895 	b.w	7830 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e706 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e706:	2200      	movs	r2, #0
    e708:	8602      	strh	r2, [r0, #48]	; 0x30
    e70a:	8843      	ldrh	r3, [r0, #2]
    e70c:	2b1d      	cmp	r3, #29
    e70e:	d001      	beq.n	e714 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e710:	7341      	strb	r1, [r0, #13]
    e712:	4770      	bx	lr
    e714:	7342      	strb	r2, [r0, #13]
    e716:	4770      	bx	lr

0000e718 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e718:	b510      	push	{r4, lr}
    e71a:	2400      	movs	r4, #0
    e71c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e71e:	f7fe ff79 	bl	d614 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    e722:	b100      	cbz	r0, e726 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    e724:	2001      	movs	r0, #1
    e726:	4384      	bics	r4, r0
    e728:	f084 0001 	eor.w	r0, r4, #1
    e72c:	bd10      	pop	{r4, pc}

0000e72e <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e72e:	2000      	movs	r0, #0
    e730:	4770      	bx	lr

0000e732 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e732:	7880      	ldrb	r0, [r0, #2]
    e734:	f000 0001 	and.w	r0, r0, #1
    e738:	4770      	bx	lr

0000e73a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e73a:	7880      	ldrb	r0, [r0, #2]
    e73c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e740:	4770      	bx	lr

0000e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e742:	2001      	movs	r0, #1
    e744:	4770      	bx	lr

0000e746 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e746:	7880      	ldrb	r0, [r0, #2]
    e748:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e74c:	4770      	bx	lr

0000e74e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e74e:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e752:	4770      	bx	lr

0000e754 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e754:	7800      	ldrb	r0, [r0, #0]
    e756:	28ff      	cmp	r0, #255	; 0xff
    e758:	d001      	beq.n	e75e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e75a:	2001      	movs	r0, #1
    e75c:	4770      	bx	lr
    e75e:	2000      	movs	r0, #0
    e760:	4770      	bx	lr

0000e762 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    e762:	f800 1f20 	strb.w	r1, [r0, #32]!
    e766:	7042      	strb	r2, [r0, #1]
    e768:	4770      	bx	lr

0000e76a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e76a:	680a      	ldr	r2, [r1, #0]
    e76c:	f840 2f11 	str.w	r2, [r0, #17]!
    e770:	8889      	ldrh	r1, [r1, #4]
    e772:	8081      	strh	r1, [r0, #4]
    e774:	2101      	movs	r1, #1
    e776:	7181      	strb	r1, [r0, #6]
    e778:	4770      	bx	lr

0000e77a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e77a:	7b00      	ldrb	r0, [r0, #12]
    e77c:	4770      	bx	lr

0000e77e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e77e:	2001      	movs	r0, #1
    e780:	4770      	bx	lr

0000e782 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e782:	61c1      	str	r1, [r0, #28]
    e784:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e788:	724a      	strb	r2, [r1, #9]
    e78a:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    e78e:	f8c1 200a 	str.w	r2, [r1, #10]
    e792:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    e796:	81c8      	strh	r0, [r1, #14]
    e798:	4770      	bx	lr

0000e79a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e79a:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    e79e:	4770      	bx	lr

0000e7a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e7a0:	b510      	push	{r4, lr}
    e7a2:	4604      	mov	r4, r0
    e7a4:	7880      	ldrb	r0, [r0, #2]
    e7a6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e7aa:	b158      	cbz	r0, e7c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    e7ac:	233c      	movs	r3, #60	; 0x3c
    e7ae:	22ff      	movs	r2, #255	; 0xff
    e7b0:	4620      	mov	r0, r4
    e7b2:	69e1      	ldr	r1, [r4, #28]
    e7b4:	f7f8 fe8a 	bl	74cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    e7b8:	2210      	movs	r2, #16
    e7ba:	4621      	mov	r1, r4
    e7bc:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    e7c0:	f7f7 fe46 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e7c4:	2001      	movs	r0, #1
    e7c6:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    e7ca:	bd10      	pop	{r4, pc}

0000e7cc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e7cc:	7bc0      	ldrb	r0, [r0, #15]
    e7ce:	2800      	cmp	r0, #0
    e7d0:	d000      	beq.n	e7d4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e7d2:	2001      	movs	r0, #1
    e7d4:	4770      	bx	lr
    e7d6:	7802      	ldrb	r2, [r0, #0]
    e7d8:	2320      	movs	r3, #32
    e7da:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e7de:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e7e2:	430a      	orrs	r2, r1
    e7e4:	7002      	strb	r2, [r0, #0]
    e7e6:	4770      	bx	lr
    e7e8:	b510      	push	{r4, lr}
    e7ea:	f7ff f840 	bl	d86e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e7ee:	4604      	mov	r4, r0
    e7f0:	f7f7 fb74 	bl	5edc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e7f4:	b138      	cbz	r0, e806 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e7f6:	4620      	mov	r0, r4
    e7f8:	f7f7 fb18 	bl	5e2c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e7fc:	b118      	cbz	r0, e806 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e7fe:	2110      	movs	r1, #16
    e800:	f7ff f9fb 	bl	dbfa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e804:	b108      	cbz	r0, e80a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    e806:	2000      	movs	r0, #0
    e808:	bd10      	pop	{r4, pc}
    e80a:	2001      	movs	r0, #1
    e80c:	bd10      	pop	{r4, pc}
    e80e:	2101      	movs	r1, #1
    e810:	f7f8 babe 	b.w	6d90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e814:	2101      	movs	r1, #1
    e816:	f7f8 babb 	b.w	6d90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e81e:	4604      	mov	r4, r0
    e820:	460f      	mov	r7, r1
    e822:	7e40      	ldrb	r0, [r0, #25]
    e824:	f7f7 fae8 	bl	5df8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e828:	4606      	mov	r6, r0
    e82a:	7e20      	ldrb	r0, [r4, #24]
    e82c:	f104 0551 	add.w	r5, r4, #81	; 0x51
    e830:	b120      	cbz	r0, e83c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    e832:	b11e      	cbz	r6, e83c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    e834:	7e60      	ldrb	r0, [r4, #25]
    e836:	f7f7 fad3 	bl	5de0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e83a:	b1a0      	cbz	r0, e866 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9a>
    e83c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    e840:	2800      	cmp	r0, #0
    e842:	d024      	beq.n	e88e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e844:	7ea0      	ldrb	r0, [r4, #26]
    e846:	2800      	cmp	r0, #0
    e848:	d021      	beq.n	e88e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e84a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    e84e:	4629      	mov	r1, r5
    e850:	f7ff fe60 	bl	e514 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    e854:	b1a8      	cbz	r0, e882 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb6>
    e856:	f7f7 fabf 	bl	5dd8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e85a:	463a      	mov	r2, r7
    e85c:	4629      	mov	r1, r5
    e85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e862:	f7fe bf9c 	b.w	d79e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e866:	2001      	movs	r0, #1
    e868:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    e86c:	463a      	mov	r2, r7
    e86e:	4629      	mov	r1, r5
    e870:	4630      	mov	r0, r6
    e872:	f7fe ff94 	bl	d79e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e876:	7e61      	ldrb	r1, [r4, #25]
    e878:	4628      	mov	r0, r5
    e87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e87e:	f7f7 bac7 	b.w	5e10 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e882:	4639      	mov	r1, r7
    e884:	4628      	mov	r0, r5
    e886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e88a:	f7fe bf77 	b.w	d77c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e892:	b510      	push	{r4, lr}
    e894:	4604      	mov	r4, r0
    e896:	4608      	mov	r0, r1
    e898:	f7fc fca0 	bl	b1dc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e89c:	7921      	ldrb	r1, [r4, #4]
    e89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8a2:	2025      	movs	r0, #37	; 0x25
    e8a4:	f7fc bc70 	b.w	b188 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    e8a8:	b510      	push	{r4, lr}
    e8aa:	4604      	mov	r4, r0
    e8ac:	302e      	adds	r0, #46	; 0x2e
    e8ae:	f7fc fc4f 	bl	b150 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e8b2:	2800      	cmp	r0, #0
    e8b4:	d102      	bne.n	e8bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf0>
    e8b6:	207f      	movs	r0, #127	; 0x7f
    e8b8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e8bc:	bd10      	pop	{r4, pc}
    e8be:	b570      	push	{r4, r5, r6, lr}
    e8c0:	4614      	mov	r4, r2
    e8c2:	461d      	mov	r5, r3
    e8c4:	4606      	mov	r6, r0
    e8c6:	f7f4 fa6b 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e8ca:	1900      	adds	r0, r0, r4
    e8cc:	4169      	adcs	r1, r5
    e8ce:	e9c6 0100 	strd	r0, r1, [r6]
    e8d2:	bd70      	pop	{r4, r5, r6, pc}

0000e8d4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e8d4:	b570      	push	{r4, r5, r6, lr}
    e8d6:	7001      	strb	r1, [r0, #0]
    e8d8:	7042      	strb	r2, [r0, #1]
    e8da:	4614      	mov	r4, r2
    e8dc:	460d      	mov	r5, r1
    e8de:	7880      	ldrb	r0, [r0, #2]
    e8e0:	f000 f87f 	bl	e9e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e8e4:	fb10 f005 	smulbb	r0, r0, r5
    e8e8:	4360      	muls	r0, r4
    e8ea:	28ff      	cmp	r0, #255	; 0xff
    e8ec:	d303      	bcc.n	e8f6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e8ee:	215c      	movs	r1, #92	; 0x5c
    e8f0:	202e      	movs	r0, #46	; 0x2e
    e8f2:	f7f5 fe3b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8f6:	bd70      	pop	{r4, r5, r6, pc}

0000e8f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e8f8:	b510      	push	{r4, lr}
    e8fa:	4604      	mov	r4, r0
    e8fc:	7880      	ldrb	r0, [r0, #2]
    e8fe:	f000 f870 	bl	e9e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e902:	7861      	ldrb	r1, [r4, #1]
    e904:	7822      	ldrb	r2, [r4, #0]
    e906:	fb11 f102 	smulbb	r1, r1, r2
    e90a:	4348      	muls	r0, r1
    e90c:	b2c0      	uxtb	r0, r0
    e90e:	bd10      	pop	{r4, pc}

0000e910 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e910:	b510      	push	{r4, lr}
    e912:	4604      	mov	r4, r0
    e914:	f000 f84d 	bl	e9b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e918:	7961      	ldrb	r1, [r4, #5]
    e91a:	1c49      	adds	r1, r1, #1
    e91c:	b2c9      	uxtb	r1, r1
    e91e:	7161      	strb	r1, [r4, #5]
    e920:	7862      	ldrb	r2, [r4, #1]
    e922:	4291      	cmp	r1, r2
    e924:	d10b      	bne.n	e93e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e926:	2200      	movs	r2, #0
    e928:	7162      	strb	r2, [r4, #5]
    e92a:	78e1      	ldrb	r1, [r4, #3]
    e92c:	4301      	orrs	r1, r0
    e92e:	70e1      	strb	r1, [r4, #3]
    e930:	78a3      	ldrb	r3, [r4, #2]
    e932:	4299      	cmp	r1, r3
    e934:	d103      	bne.n	e93e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e936:	70e2      	strb	r2, [r4, #3]
    e938:	7921      	ldrb	r1, [r4, #4]
    e93a:	1c49      	adds	r1, r1, #1
    e93c:	7121      	strb	r1, [r4, #4]
    e93e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e942:	f000 b825 	b.w	e990 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e946 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e946:	7081      	strb	r1, [r0, #2]
    e948:	4770      	bx	lr

0000e94a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e94a:	b570      	push	{r4, r5, r6, lr}
    e94c:	4604      	mov	r4, r0
    e94e:	7880      	ldrb	r0, [r0, #2]
    e950:	f000 f847 	bl	e9e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e954:	7861      	ldrb	r1, [r4, #1]
    e956:	fb11 f500 	smulbb	r5, r1, r0
    e95a:	78e0      	ldrb	r0, [r4, #3]
    e95c:	f000 f841 	bl	e9e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e960:	7861      	ldrb	r1, [r4, #1]
    e962:	7962      	ldrb	r2, [r4, #5]
    e964:	fb10 2001 	smlabb	r0, r0, r1, r2
    e968:	7821      	ldrb	r1, [r4, #0]
    e96a:	7922      	ldrb	r2, [r4, #4]
    e96c:	1a89      	subs	r1, r1, r2
    e96e:	fb11 f105 	smulbb	r1, r1, r5
    e972:	1a08      	subs	r0, r1, r0
    e974:	b2c0      	uxtb	r0, r0
    e976:	bd70      	pop	{r4, r5, r6, pc}

0000e978 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e978:	2100      	movs	r1, #0
    e97a:	6001      	str	r1, [r0, #0]
    e97c:	8081      	strh	r1, [r0, #4]
    e97e:	2101      	movs	r1, #1
    e980:	7041      	strb	r1, [r0, #1]
    e982:	7001      	strb	r1, [r0, #0]
    e984:	4770      	bx	lr

0000e986 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e986:	2100      	movs	r1, #0
    e988:	70c1      	strb	r1, [r0, #3]
    e98a:	7141      	strb	r1, [r0, #5]
    e98c:	7101      	strb	r1, [r0, #4]
    e98e:	4770      	bx	lr
    e990:	b510      	push	{r4, lr}
    e992:	2801      	cmp	r0, #1
    e994:	d007      	beq.n	e9a6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e996:	2802      	cmp	r0, #2
    e998:	d007      	beq.n	e9aa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e99a:	2804      	cmp	r0, #4
    e99c:	d007      	beq.n	e9ae <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e99e:	2139      	movs	r1, #57	; 0x39
    e9a0:	202e      	movs	r0, #46	; 0x2e
    e9a2:	f7f5 fde3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9a6:	2025      	movs	r0, #37	; 0x25
    e9a8:	bd10      	pop	{r4, pc}
    e9aa:	2026      	movs	r0, #38	; 0x26
    e9ac:	bd10      	pop	{r4, pc}
    e9ae:	2027      	movs	r0, #39	; 0x27
    e9b0:	bd10      	pop	{r4, pc}
    e9b2:	4601      	mov	r1, r0
    e9b4:	2000      	movs	r0, #0
    e9b6:	788a      	ldrb	r2, [r1, #2]
    e9b8:	07d3      	lsls	r3, r2, #31
    e9ba:	d002      	beq.n	e9c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e9bc:	78cb      	ldrb	r3, [r1, #3]
    e9be:	07db      	lsls	r3, r3, #31
    e9c0:	d006      	beq.n	e9d0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e9c2:	0793      	lsls	r3, r2, #30
    e9c4:	d506      	bpl.n	e9d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e9c6:	78cb      	ldrb	r3, [r1, #3]
    e9c8:	079b      	lsls	r3, r3, #30
    e9ca:	d403      	bmi.n	e9d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e9cc:	2002      	movs	r0, #2
    e9ce:	4770      	bx	lr
    e9d0:	2001      	movs	r0, #1
    e9d2:	4770      	bx	lr
    e9d4:	0752      	lsls	r2, r2, #29
    e9d6:	d5fc      	bpl.n	e9d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e9d8:	78c9      	ldrb	r1, [r1, #3]
    e9da:	0749      	lsls	r1, r1, #29
    e9dc:	d4f9      	bmi.n	e9d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e9de:	2004      	movs	r0, #4
    e9e0:	4770      	bx	lr
    e9e2:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e9e6:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e9ea:	4411      	add	r1, r2
    e9ec:	f000 0001 	and.w	r0, r0, #1
    e9f0:	4408      	add	r0, r1
    e9f2:	4770      	bx	lr

0000e9f4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e9f4:	f240 315a 	movw	r1, #858	; 0x35a
    e9f8:	4348      	muls	r0, r1
    e9fa:	4770      	bx	lr

0000e9fc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e9fc:	f240 20ef 	movw	r0, #751	; 0x2ef
    ea00:	4770      	bx	lr
    ea02:	020e      	.short	0x020e
    ea04:	0630041c 	.word	0x0630041c
    ea08:	035a0c60 	.word	0x035a0c60
    ea0c:	05c506b4 	.word	0x05c506b4
    ea10:	12250bf5 	.word	0x12250bf5
    ea14:	03b101a3 	.word	0x03b101a3
    ea18:	02ef05bf 	.word	0x02ef05bf
    ea1c:	09a30649 	.word	0x09a30649

0000ea20 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ea20:	b510      	push	{r4, lr}
    ea22:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ea26:	b109      	cbz	r1, ea2c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ea28:	2000      	movs	r0, #0
    ea2a:	bd10      	pop	{r4, pc}
    ea2c:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    ea30:	b131      	cbz	r1, ea40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ea32:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    ea36:	428a      	cmp	r2, r1
    ea38:	d902      	bls.n	ea40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ea3a:	f7ff feb1 	bl	e7a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ea3e:	e7f3      	b.n	ea28 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ea40:	2001      	movs	r0, #1
    ea42:	bd10      	pop	{r4, pc}

0000ea44 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ea44:	b510      	push	{r4, lr}
    ea46:	b131      	cbz	r1, ea56 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ea48:	2901      	cmp	r1, #1
    ea4a:	d008      	beq.n	ea5e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ea4c:	f240 717d 	movw	r1, #1917	; 0x77d
    ea50:	2030      	movs	r0, #48	; 0x30
    ea52:	f7f5 fd8b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea5a:	f000 b9b7 	b.w	edcc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x308>
    ea5e:	2100      	movs	r1, #0
    ea60:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    ea64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea68:	f000 b913 	b.w	ec92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>

0000ea6c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ea6c:	b510      	push	{r4, lr}
    ea6e:	4604      	mov	r4, r0
    ea70:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ea74:	2800      	cmp	r0, #0
    ea76:	d019      	beq.n	eaac <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    ea78:	2001      	movs	r0, #1
    ea7a:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    ea7e:	4601      	mov	r1, r0
    ea80:	4620      	mov	r0, r4
    ea82:	f7ff fe8a 	bl	e79a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ea86:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    ea8a:	b170      	cbz	r0, eaaa <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ea8c:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ea90:	f7f3 fcfa 	bl	2488 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ea94:	7820      	ldrb	r0, [r4, #0]
    ea96:	f7f3 fe5b 	bl	2750 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ea9a:	f814 09c8 	ldrb.w	r0, [r4], #-200
    ea9e:	f7f3 fe35 	bl	270c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eaa2:	b120      	cbz	r0, eaae <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    eaa4:	2000      	movs	r0, #0
    eaa6:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    eaaa:	2000      	movs	r0, #0
    eaac:	bd10      	pop	{r4, pc}
    eaae:	f44f 7101 	mov.w	r1, #516	; 0x204
    eab2:	2030      	movs	r0, #48	; 0x30
    eab4:	f7f5 fd5a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eab8 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    eab8:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    eabc:	4770      	bx	lr

0000eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    eabe:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    eac2:	4770      	bx	lr

0000eac4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    eac4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eac6:	4604      	mov	r4, r0
    eac8:	f890 021b 	ldrb.w	r0, [r0, #539]	; 0x21b
    eacc:	2800      	cmp	r0, #0
    eace:	d15f      	bne.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ead0:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    ead4:	2803      	cmp	r0, #3
    ead6:	d15b      	bne.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ead8:	f7f4 f962 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    eadc:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    eae0:	f8d4 2284 	ldr.w	r2, [r4, #644]	; 0x284
    eae4:	1ac0      	subs	r0, r0, r3
    eae6:	eb61 0102 	sbc.w	r1, r1, r2
    eaea:	2300      	movs	r3, #0
    eaec:	461a      	mov	r2, r3
    eaee:	1a1b      	subs	r3, r3, r0
    eaf0:	418a      	sbcs	r2, r1
    eaf2:	da4d      	bge.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eaf4:	1c42      	adds	r2, r0, #1
    eaf6:	f171 0100 	sbcs.w	r1, r1, #0
    eafa:	db02      	blt.n	eb02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    eafc:	f240 51c3 	movw	r1, #1475	; 0x5c3
    eb00:	e036      	b.n	eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    eb02:	6921      	ldr	r1, [r4, #16]
    eb04:	b111      	cbz	r1, eb0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    eb06:	fbb0 f0f1 	udiv	r0, r0, r1
    eb0a:	e000      	b.n	eb0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    eb0c:	2000      	movs	r0, #0
    eb0e:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    eb12:	1c40      	adds	r0, r0, #1
    eb14:	4408      	add	r0, r1
    eb16:	f8a4 025c 	strh.w	r0, [r4, #604]	; 0x25c
    eb1a:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    eb1e:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    eb22:	1a08      	subs	r0, r1, r0
    eb24:	b200      	sxth	r0, r0
    eb26:	2800      	cmp	r0, #0
    eb28:	dd32      	ble.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb2a:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    eb2e:	f7f3 fcab 	bl	2488 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    eb32:	2800      	cmp	r0, #0
    eb34:	d02c      	beq.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb36:	20ff      	movs	r0, #255	; 0xff
    eb38:	f884 0261 	strb.w	r0, [r4, #609]	; 0x261
    eb3c:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
    eb40:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
    eb44:	ae01      	add	r6, sp, #4
    eb46:	1a40      	subs	r0, r0, r1
    eb48:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    eb4c:	1e40      	subs	r0, r0, #1
    eb4e:	4408      	add	r0, r1
    eb50:	b285      	uxth	r5, r0
    eb52:	e017      	b.n	eb84 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    eb54:	9600      	str	r6, [sp, #0]
    eb56:	f8b4 125c 	ldrh.w	r1, [r4, #604]	; 0x25c
    eb5a:	2300      	movs	r3, #0
    eb5c:	2201      	movs	r2, #1
    eb5e:	4620      	mov	r0, r4
    eb60:	f7f9 f8fa 	bl	7d58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    eb64:	2800      	cmp	r0, #0
    eb66:	d013      	beq.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb68:	2801      	cmp	r0, #1
    eb6a:	d004      	beq.n	eb76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    eb6c:	f240 51fc 	movw	r1, #1532	; 0x5fc
    eb70:	2030      	movs	r0, #48	; 0x30
    eb72:	f7f5 fcfb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb76:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    eb7a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    eb7e:	4408      	add	r0, r1
    eb80:	f8a4 025c 	strh.w	r0, [r4, #604]	; 0x25c
    eb84:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    eb88:	1a28      	subs	r0, r5, r0
    eb8a:	b200      	sxth	r0, r0
    eb8c:	2800      	cmp	r0, #0
    eb8e:	dae1      	bge.n	eb54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    eb90:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    eb92:	2000      	movs	r0, #0
    eb94:	4770      	bx	lr
    eb96:	b570      	push	{r4, r5, r6, lr}
    eb98:	4604      	mov	r4, r0
    eb9a:	f000 f8f0 	bl	ed7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    eb9e:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    eba2:	2000      	movs	r0, #0
    eba4:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    eba8:	4601      	mov	r1, r0
    ebaa:	2501      	movs	r5, #1
    ebac:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    ebb0:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    ebb4:	4606      	mov	r6, r0
    ebb6:	f7fe ff82 	bl	dabe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ebba:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    ebbe:	1c40      	adds	r0, r0, #1
    ebc0:	280a      	cmp	r0, #10
    ebc2:	d201      	bcs.n	ebc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x104>
    ebc4:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    ebc8:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ebcc:	b138      	cbz	r0, ebde <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    ebce:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    ebd2:	1c40      	adds	r0, r0, #1
    ebd4:	280a      	cmp	r0, #10
    ebd6:	d302      	bcc.n	ebde <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    ebd8:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    ebdc:	e002      	b.n	ebe4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
    ebde:	2002      	movs	r0, #2
    ebe0:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    ebe4:	4620      	mov	r0, r4
    ebe6:	f000 f822 	bl	ec2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    ebea:	b120      	cbz	r0, ebf6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x132>
    ebec:	4620      	mov	r0, r4
    ebee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ebf2:	f000 b80d 	b.w	ec10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    ebf6:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    ebfa:	4631      	mov	r1, r6
    ebfc:	f000 f8bd 	bl	ed7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    ec00:	2800      	cmp	r0, #0
    ec02:	d104      	bne.n	ec0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14a>
    ec04:	f240 6191 	movw	r1, #1681	; 0x691
    ec08:	2030      	movs	r0, #48	; 0x30
    ec0a:	f7f5 fcaf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec0e:	bd70      	pop	{r4, r5, r6, pc}
    ec10:	b510      	push	{r4, lr}
    ec12:	4604      	mov	r4, r0
    ec14:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ec18:	f7f3 fd78 	bl	270c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ec1c:	2000      	movs	r0, #0
    ec1e:	7620      	strb	r0, [r4, #24]
    ec20:	bd10      	pop	{r4, pc}
    ec22:	b510      	push	{r4, lr}
    ec24:	f7ff fd64 	bl	e6f0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    ec28:	f500 7088 	add.w	r0, r0, #272	; 0x110
    ec2c:	bd10      	pop	{r4, pc}
    ec2e:	b570      	push	{r4, r5, r6, lr}
    ec30:	4605      	mov	r5, r0
    ec32:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    ec36:	b108      	cbz	r0, ec3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x178>
    ec38:	2001      	movs	r0, #1
    ec3a:	bd70      	pop	{r4, r5, r6, pc}
    ec3c:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    ec40:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ec44:	4050      	eors	r0, r2
    ec46:	ea70 0101 	orns	r1, r0, r1
    ec4a:	d012      	beq.n	ec72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    ec4c:	2400      	movs	r4, #0
    ec4e:	4621      	mov	r1, r4
    ec50:	4628      	mov	r0, r5
    ec52:	f7ff ffe6 	bl	ec22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    ec56:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    ec5a:	1840      	adds	r0, r0, r1
    ec5c:	4154      	adcs	r4, r2
    ec5e:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    ec62:	3df8      	subs	r5, #248	; 0xf8
    ec64:	1a10      	subs	r0, r2, r0
    ec66:	41a1      	sbcs	r1, r4
    ec68:	d503      	bpl.n	ec72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    ec6a:	4628      	mov	r0, r5
    ec6c:	f7ff fd98 	bl	e7a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ec70:	e7e2      	b.n	ec38 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x174>
    ec72:	2000      	movs	r0, #0
    ec74:	bd70      	pop	{r4, r5, r6, pc}
    ec76:	b510      	push	{r4, lr}
    ec78:	4604      	mov	r4, r0
    ec7a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    ec7e:	f000 f9ef 	bl	f060 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59c>
    ec82:	4602      	mov	r2, r0
    ec84:	4620      	mov	r0, r4
    ec86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec8a:	f240 111b 	movw	r1, #283	; 0x11b
    ec8e:	f7ff bafa 	b.w	e286 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ec92:	b510      	push	{r4, lr}
    ec94:	f7fc f8e4 	bl	ae60 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ec98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec9c:	f7f3 be98 	b.w	29d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    eca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eca4:	4604      	mov	r4, r0
    eca6:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    ecaa:	2800      	cmp	r0, #0
    ecac:	d051      	beq.n	ed52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    ecae:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    ecb2:	2803      	cmp	r0, #3
    ecb4:	d14d      	bne.n	ed52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    ecb6:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    ecba:	f001 fcab 	bl	10614 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    ecbe:	4605      	mov	r5, r0
    ecc0:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    ecc4:	f7f8 ff6a 	bl	7b9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    ecc8:	4428      	add	r0, r5
    ecca:	b286      	uxth	r6, r0
    eccc:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    ecd0:	f7f8 ff64 	bl	7b9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    ecd4:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    ecd8:	fa1f f880 	uxth.w	r8, r0
    ecdc:	4648      	mov	r0, r9
    ecde:	f7fc f97d 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ece2:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    ece6:	1a0d      	subs	r5, r1, r0
    ece8:	4648      	mov	r0, r9
    ecea:	f7fc f9a3 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ecee:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    ecf2:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    ecf6:	fbb0 f0fa 	udiv	r0, r0, sl
    ecfa:	1a2d      	subs	r5, r5, r0
    ecfc:	4648      	mov	r0, r9
    ecfe:	f7fc f96d 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ed02:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
    ed06:	1a0f      	subs	r7, r1, r0
    ed08:	4648      	mov	r0, r9
    ed0a:	f7fc f993 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ed0e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ed12:	4401      	add	r1, r0
    ed14:	fbb1 f0fa 	udiv	r0, r1, sl
    ed18:	1a39      	subs	r1, r7, r0
    ed1a:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    ed1e:	4370      	muls	r0, r6
    ed20:	fbb0 f2f8 	udiv	r2, r0, r8
    ed24:	2029      	movs	r0, #41	; 0x29
    ed26:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    ed2a:	3260      	adds	r2, #96	; 0x60
    ed2c:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    ed30:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    ed34:	42a9      	cmp	r1, r5
    ed36:	d801      	bhi.n	ed3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x278>
    ed38:	4285      	cmp	r5, r0
    ed3a:	d901      	bls.n	ed40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x27c>
    ed3c:	f7f5 f846 	bl	3dcc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    ed40:	4631      	mov	r1, r6
    ed42:	6920      	ldr	r0, [r4, #16]
    ed44:	f7fd fa7a 	bl	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ed48:	2100      	movs	r1, #0
    ed4a:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    ed4e:	f884 1262 	strb.w	r1, [r4, #610]	; 0x262
    ed52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ed56:	b570      	push	{r4, r5, r6, lr}
    ed58:	460c      	mov	r4, r1
    ed5a:	4605      	mov	r5, r0
    ed5c:	f7fc f96a 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ed60:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ed64:	4408      	add	r0, r1
    ed66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ed6a:	fbb0 f6f1 	udiv	r6, r0, r1
    ed6e:	4628      	mov	r0, r5
    ed70:	f7fc f934 	bl	afdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ed74:	4430      	add	r0, r6
    ed76:	4420      	add	r0, r4
    ed78:	bd70      	pop	{r4, r5, r6, pc}
    ed7a:	f7f3 b863 	b.w	1e44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ed7e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ed80:	4604      	mov	r4, r0
    ed82:	f7ff fcde 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ed86:	b1f8      	cbz	r0, edc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    ed88:	4620      	mov	r0, r4
    ed8a:	f7ff fcd2 	bl	e732 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ed8e:	b918      	cbnz	r0, ed98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d4>
    ed90:	4620      	mov	r0, r4
    ed92:	f7ff fcd8 	bl	e746 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ed96:	b140      	cbz	r0, edaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e6>
    ed98:	2462      	movs	r4, #98	; 0x62
    ed9a:	4668      	mov	r0, sp
    ed9c:	f7f5 fac2 	bl	4324 <mpsl_fem_pa_is_configured>
    eda0:	f89d 0000 	ldrb.w	r0, [sp]
    eda4:	b118      	cbz	r0, edae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    eda6:	2501      	movs	r5, #1
    eda8:	e002      	b.n	edb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ec>
    edaa:	245b      	movs	r4, #91	; 0x5b
    edac:	e7f5      	b.n	ed9a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    edae:	2500      	movs	r5, #0
    edb0:	a801      	add	r0, sp, #4
    edb2:	f7f5 fa9f 	bl	42f4 <mpsl_fem_lna_is_configured>
    edb6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    edba:	b100      	cbz	r0, edbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fa>
    edbc:	2001      	movs	r0, #1
    edbe:	4305      	orrs	r5, r0
    edc0:	d000      	beq.n	edc4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    edc2:	340a      	adds	r4, #10
    edc4:	4620      	mov	r0, r4
    edc6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    edc8:	2084      	movs	r0, #132	; 0x84
    edca:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    edcc:	b570      	push	{r4, r5, r6, lr}
    edce:	4604      	mov	r4, r0
    edd0:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    edd2:	2500      	movs	r5, #0
    edd4:	b130      	cbz	r0, ede4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    edd6:	f7f7 fdd3 	bl	6980 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    edda:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    eddc:	fbb0 f2f1 	udiv	r2, r0, r1
    ede0:	fb01 0512 	mls	r5, r1, r2, r0
    ede4:	4620      	mov	r0, r4
    ede6:	f7ff fc7f 	bl	e6e8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    edea:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    edee:	4428      	add	r0, r5
    edf0:	34e8      	adds	r4, #232	; 0xe8
    edf2:	2500      	movs	r5, #0
    edf4:	1882      	adds	r2, r0, r2
    edf6:	eb45 0001 	adc.w	r0, r5, r1
    edfa:	e9c4 2004 	strd	r2, r0, [r4, #16]
    edfe:	f804 5b0b 	strb.w	r5, [r4], #11
    ee02:	2001      	movs	r0, #1
    ee04:	f804 0901 	strb.w	r0, [r4], #-1
    ee08:	2002      	movs	r0, #2
    ee0a:	f804 09f2 	strb.w	r0, [r4], #-242
    ee0e:	4620      	mov	r0, r4
    ee10:	f7ff ffb5 	bl	ed7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    ee14:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    ee18:	4620      	mov	r0, r4
    ee1a:	f7ff ff08 	bl	ec2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    ee1e:	b930      	cbnz	r0, ee2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x36a>
    ee20:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    ee24:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    ee28:	f7ff ffa7 	bl	ed7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    ee2c:	b128      	cbz	r0, ee3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x376>
    ee2e:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    ee32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ee36:	f7ff bf2c 	b.w	ec92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    ee3a:	f240 61d7 	movw	r1, #1751	; 0x6d7
    ee3e:	2030      	movs	r0, #48	; 0x30
    ee40:	f7f5 fb94 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee44:	b510      	push	{r4, lr}
    ee46:	4604      	mov	r4, r0
    ee48:	2000      	movs	r0, #0
    ee4a:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    ee4e:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    ee52:	f7f3 fc5b 	bl	270c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ee56:	2020      	movs	r0, #32
    ee58:	f884 0294 	strb.w	r0, [r4, #660]	; 0x294
    ee5c:	bd10      	pop	{r4, pc}
    ee5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee62:	4604      	mov	r4, r0
    ee64:	2500      	movs	r5, #0
    ee66:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
    ee6a:	e9d4 673e 	ldrd	r6, r7, [r4, #248]	; 0xf8
    ee6e:	4689      	mov	r9, r1
    ee70:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    ee74:	f04f 0801 	mov.w	r8, #1
    ee78:	f880 80e1 	strb.w	r8, [r0, #225]	; 0xe1
    ee7c:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    ee80:	4641      	mov	r1, r8
    ee82:	34c8      	adds	r4, #200	; 0xc8
    ee84:	f7f7 f96a 	bl	615c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ee88:	6860      	ldr	r0, [r4, #4]
    ee8a:	f8c0 6280 	str.w	r6, [r0, #640]	; 0x280
    ee8e:	f8c0 7284 	str.w	r7, [r0, #644]	; 0x284
    ee92:	6861      	ldr	r1, [r4, #4]
    ee94:	7820      	ldrb	r0, [r4, #0]
    ee96:	f881 0294 	strb.w	r0, [r1, #660]	; 0x294
    ee9a:	6861      	ldr	r1, [r4, #4]
    ee9c:	f8c1 9298 	str.w	r9, [r1, #664]	; 0x298
    eea0:	6860      	ldr	r0, [r4, #4]
    eea2:	e9c0 67a2 	strd	r6, r7, [r0, #648]	; 0x288
    eea6:	6864      	ldr	r4, [r4, #4]
    eea8:	f884 524c 	strb.w	r5, [r4, #588]	; 0x24c
    eeac:	2300      	movs	r3, #0
    eeae:	f8a4 5290 	strh.w	r5, [r4, #656]	; 0x290
    eeb2:	461a      	mov	r2, r3
    eeb4:	4619      	mov	r1, r3
    eeb6:	4620      	mov	r0, r4
    eeb8:	9500      	str	r5, [sp, #0]
    eeba:	f7f8 ff4d 	bl	7d58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    eebe:	b120      	cbz	r0, eeca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    eec0:	f44f 7106 	mov.w	r1, #536	; 0x218
    eec4:	2030      	movs	r0, #48	; 0x30
    eec6:	f7f5 fb51 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eeca:	f8c4 5248 	str.w	r5, [r4, #584]	; 0x248
    eece:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    eed2:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
    eed6:	f8a4 525e 	strh.w	r5, [r4, #606]	; 0x25e
    eeda:	f8a4 525c 	strh.w	r5, [r4, #604]	; 0x25c
    eede:	348c      	adds	r4, #140	; 0x8c
    eee0:	f884 51d5 	strb.w	r5, [r4, #469]	; 0x1d5
    eee4:	8820      	ldrh	r0, [r4, #0]
    eee6:	1e40      	subs	r0, r0, #1
    eee8:	8020      	strh	r0, [r4, #0]
    eeea:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
    eeee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eef2:	f7ff bece 	b.w	ec92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    eef6:	b570      	push	{r4, r5, r6, lr}
    eef8:	b140      	cbz	r0, ef0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x448>
    eefa:	2909      	cmp	r1, #9
    eefc:	d249      	bcs.n	ef92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ce>
    eefe:	e8df f001 	tbb	[pc, r1]
    ef02:	1507      	.short	0x1507
    ef04:	48383c3c 	.word	0x48383c3c
    ef08:	0044402a 	.word	0x0044402a
    ef0c:	21ca      	movs	r1, #202	; 0xca
    ef0e:	e03d      	b.n	ef8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ef10:	4604      	mov	r4, r0
    ef12:	f7f7 ff0d 	bl	6d30 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    ef16:	b110      	cbz	r0, ef1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    ef18:	f44f 711d 	mov.w	r1, #628	; 0x274
    ef1c:	e036      	b.n	ef8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ef1e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    ef22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef26:	38ff      	subs	r0, #255	; 0xff
    ef28:	f7f3 be6c 	b.w	2c04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    ef2c:	4605      	mov	r5, r0
    ef2e:	f7ff fc04 	bl	e73a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ef32:	b9b0      	cbnz	r0, ef62 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49e>
    ef34:	2100      	movs	r1, #0
    ef36:	4628      	mov	r0, r5
    ef38:	f7ff fe73 	bl	ec22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    ef3c:	4604      	mov	r4, r0
    ef3e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    ef42:	42a0      	cmp	r0, r4
    ef44:	d20b      	bcs.n	ef5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    ef46:	1a20      	subs	r0, r4, r0
    ef48:	2103      	movs	r1, #3
    ef4a:	f7f2 fd95 	bl	1a78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ef4e:	b130      	cbz	r0, ef5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    ef50:	4628      	mov	r0, r5
    ef52:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    ef56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef5a:	f7ff bb5c 	b.w	e616 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    ef5e:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    ef62:	4628      	mov	r0, r5
    ef64:	f7f7 ff00 	bl	6d68 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    ef68:	2800      	cmp	r0, #0
    ef6a:	d014      	beq.n	ef96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d2>
    ef6c:	f240 21a7 	movw	r1, #679	; 0x2a7
    ef70:	e00c      	b.n	ef8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ef72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef76:	f7fc b937 	b.w	b1e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ef7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef7e:	f7ff be0a 	b.w	eb96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    ef82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef86:	f7ff be43 	b.w	ec10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    ef8a:	21ea      	movs	r1, #234	; 0xea
    ef8c:	2030      	movs	r0, #48	; 0x30
    ef8e:	f7f5 faed 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef92:	21ee      	movs	r1, #238	; 0xee
    ef94:	e7fa      	b.n	ef8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ef96:	bd70      	pop	{r4, r5, r6, pc}
    ef98:	b510      	push	{r4, lr}
    ef9a:	0004      	movs	r4, r0
    ef9c:	d008      	beq.n	efb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ec>
    ef9e:	2909      	cmp	r1, #9
    efa0:	d25c      	bcs.n	f05c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x598>
    efa2:	e8df f001 	tbb	[pc, r1]
    efa6:	3807      	.short	0x3807
    efa8:	5b3c4040 	.word	0x5b3c4040
    efac:	00574c45 	.word	0x00574c45
    efb0:	2196      	movs	r1, #150	; 0x96
    efb2:	e050      	b.n	f056 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    efb4:	2100      	movs	r1, #0
    efb6:	f8c4 129c 	str.w	r1, [r4, #668]	; 0x29c
    efba:	f894 1260 	ldrb.w	r1, [r4, #608]	; 0x260
    efbe:	4620      	mov	r0, r4
    efc0:	b189      	cbz	r1, efe6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x522>
    efc2:	f8b0 225e 	ldrh.w	r2, [r0, #606]	; 0x25e
    efc6:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    efca:	428a      	cmp	r2, r1
    efcc:	d106      	bne.n	efdc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x518>
    efce:	f8b0 2214 	ldrh.w	r2, [r0, #532]	; 0x214
    efd2:	1a51      	subs	r1, r2, r1
    efd4:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    efd8:	4611      	mov	r1, r2
    efda:	e00d      	b.n	eff8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    efdc:	1a51      	subs	r1, r2, r1
    efde:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    efe2:	b291      	uxth	r1, r2
    efe4:	e008      	b.n	eff8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    efe6:	f8b0 125c 	ldrh.w	r1, [r0, #604]	; 0x25c
    efea:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
    efee:	1a89      	subs	r1, r1, r2
    eff0:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    eff4:	f8b0 125c 	ldrh.w	r1, [r0, #604]	; 0x25c
    eff8:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
    effc:	e9d0 129e 	ldrd	r1, r2, [r0, #632]	; 0x278
    f000:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f004:	f8c0 2284 	str.w	r2, [r0, #644]	; 0x284
    f008:	f7f9 f9a8 	bl	835c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f00c:	4620      	mov	r0, r4
    f00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f012:	f7f9 b8ab 	b.w	816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    f016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f01a:	f000 b909 	b.w	f230 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f01e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f022:	f7fc b8e1 	b.w	b1e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f026:	4620      	mov	r0, r4
    f028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f02c:	f000 b825 	b.w	f07a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    f030:	2001      	movs	r0, #1
    f032:	f7f2 fd11 	bl	1a58 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f03a:	f7fe bbe5 	b.w	d808 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f03e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    f042:	2804      	cmp	r0, #4
    f044:	d001      	beq.n	f04a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x586>
    f046:	21b8      	movs	r1, #184	; 0xb8
    f048:	e005      	b.n	f056 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f04a:	4620      	mov	r0, r4
    f04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f050:	f7ff bef8 	b.w	ee44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f054:	21be      	movs	r1, #190	; 0xbe
    f056:	2030      	movs	r0, #48	; 0x30
    f058:	f7f5 fa88 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f05c:	21c2      	movs	r1, #194	; 0xc2
    f05e:	e7fa      	b.n	f056 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f060:	b510      	push	{r4, lr}
    f062:	f7fb ffe7 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f066:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f06a:	4408      	add	r0, r1
    f06c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f070:	fbb0 f0f1 	udiv	r0, r0, r1
    f074:	f200 1079 	addw	r0, r0, #377	; 0x179
    f078:	bd10      	pop	{r4, pc}
    f07a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f07c:	4604      	mov	r4, r0
    f07e:	f7f3 fe8f 	bl	2da0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f082:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    f086:	f8d4 2284 	ldr.w	r2, [r4, #644]	; 0x284
    f08a:	1ac0      	subs	r0, r0, r3
    f08c:	eb61 0102 	sbc.w	r1, r1, r2
    f090:	2200      	movs	r2, #0
    f092:	4613      	mov	r3, r2
    f094:	1a12      	subs	r2, r2, r0
    f096:	418b      	sbcs	r3, r1
    f098:	db02      	blt.n	f0a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5dc>
    f09a:	f240 610c 	movw	r1, #1548	; 0x60c
    f09e:	e052      	b.n	f146 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x682>
    f0a0:	1c42      	adds	r2, r0, #1
    f0a2:	f171 0100 	sbcs.w	r1, r1, #0
    f0a6:	db02      	blt.n	f0ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ea>
    f0a8:	f240 610d 	movw	r1, #1549	; 0x60d
    f0ac:	e04b      	b.n	f146 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x682>
    f0ae:	6922      	ldr	r2, [r4, #16]
    f0b0:	2100      	movs	r1, #0
    f0b2:	b10a      	cbz	r2, f0b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5f4>
    f0b4:	fbb0 f1f2 	udiv	r1, r0, r2
    f0b8:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    f0bc:	280e      	cmp	r0, #14
    f0be:	d00c      	beq.n	f0da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x616>
    f0c0:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    f0c4:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    f0c8:	1843      	adds	r3, r0, r1
    f0ca:	1ad3      	subs	r3, r2, r3
    f0cc:	b21b      	sxth	r3, r3
    f0ce:	2b00      	cmp	r3, #0
    f0d0:	db06      	blt.n	f0e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x61c>
    f0d2:	1c52      	adds	r2, r2, #1
    f0d4:	f8a4 225e 	strh.w	r2, [r4, #606]	; 0x25e
    f0d8:	e006      	b.n	f0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x624>
    f0da:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f0de:	e012      	b.n	f106 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x642>
    f0e0:	1c49      	adds	r1, r1, #1
    f0e2:	4408      	add	r0, r1
    f0e4:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f0e8:	f894 0261 	ldrb.w	r0, [r4, #609]	; 0x261
    f0ec:	f88d 0000 	strb.w	r0, [sp]
    f0f0:	9800      	ldr	r0, [sp, #0]
    f0f2:	9000      	str	r0, [sp, #0]
    f0f4:	f89d 0000 	ldrb.w	r0, [sp]
    f0f8:	b940      	cbnz	r0, f10c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x648>
    f0fa:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f0fe:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    f102:	4288      	cmp	r0, r1
    f104:	d102      	bne.n	f10c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x648>
    f106:	1c40      	adds	r0, r0, #1
    f108:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f10c:	f8b4 0292 	ldrh.w	r0, [r4, #658]	; 0x292
    f110:	1c40      	adds	r0, r0, #1
    f112:	f8a4 0292 	strh.w	r0, [r4, #658]	; 0x292
    f116:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
    f11a:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
    f11e:	1a40      	subs	r0, r0, r1
    f120:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    f124:	1e40      	subs	r0, r0, #1
    f126:	4408      	add	r0, r1
    f128:	b285      	uxth	r5, r0
    f12a:	e026      	b.n	f17a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6b6>
    f12c:	a801      	add	r0, sp, #4
    f12e:	2300      	movs	r3, #0
    f130:	9000      	str	r0, [sp, #0]
    f132:	461a      	mov	r2, r3
    f134:	4620      	mov	r0, r4
    f136:	f7f8 fe0f 	bl	7d58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f13a:	2800      	cmp	r0, #0
    f13c:	d039      	beq.n	f1b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
    f13e:	2801      	cmp	r0, #1
    f140:	d004      	beq.n	f14c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x688>
    f142:	f240 614c 	movw	r1, #1612	; 0x64c
    f146:	2030      	movs	r0, #48	; 0x30
    f148:	f7f5 fa10 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f14c:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f150:	f8b4 1210 	ldrh.w	r1, [r4, #528]	; 0x210
    f154:	1a42      	subs	r2, r0, r1
    f156:	b212      	sxth	r2, r2
    f158:	2a00      	cmp	r2, #0
    f15a:	da09      	bge.n	f170 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ac>
    f15c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f160:	4402      	add	r2, r0
    f162:	1aaa      	subs	r2, r5, r2
    f164:	b212      	sxth	r2, r2
    f166:	2a00      	cmp	r2, #0
    f168:	da02      	bge.n	f170 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ac>
    f16a:	f8a4 125e 	strh.w	r1, [r4, #606]	; 0x25e
    f16e:	e004      	b.n	f17a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6b6>
    f170:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f174:	4408      	add	r0, r1
    f176:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f17a:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
    f17e:	1a68      	subs	r0, r5, r1
    f180:	b200      	sxth	r0, r0
    f182:	2800      	cmp	r0, #0
    f184:	dad2      	bge.n	f12c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x668>
    f186:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
    f18a:	b180      	cbz	r0, f1ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ea>
    f18c:	2008      	movs	r0, #8
    f18e:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    f192:	220a      	movs	r2, #10
    f194:	4621      	mov	r1, r4
    f196:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    f19a:	f7f7 f959 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f19e:	4620      	mov	r0, r4
    f1a0:	f000 f848 	bl	f234 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    f1a4:	4620      	mov	r0, r4
    f1a6:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    f1aa:	f7ff be4b 	b.w	ee44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f1ae:	203e      	movs	r0, #62	; 0x3e
    f1b0:	e7ed      	b.n	f18e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ca>
    f1b2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f1b4:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f1b8:	f001 0307 	and.w	r3, r1, #7
    f1bc:	7802      	ldrb	r2, [r0, #0]
    f1be:	2101      	movs	r1, #1
    f1c0:	4099      	lsls	r1, r3
    f1c2:	438a      	bics	r2, r1
    f1c4:	7002      	strb	r2, [r0, #0]
    f1c6:	4770      	bx	lr

0000f1c8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    f1c8:	b510      	push	{r4, lr}
    f1ca:	4604      	mov	r4, r0
    f1cc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
    f1d0:	6921      	ldr	r1, [r4, #16]
    f1d2:	4288      	cmp	r0, r1
    f1d4:	d109      	bne.n	f1ea <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f1d6:	f8b4 12c8 	ldrh.w	r1, [r4, #712]	; 0x2c8
    f1da:	8b22      	ldrh	r2, [r4, #24]
    f1dc:	4291      	cmp	r1, r2
    f1de:	d104      	bne.n	f1ea <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f1e0:	f8b4 12ca 	ldrh.w	r1, [r4, #714]	; 0x2ca
    f1e4:	8b62      	ldrh	r2, [r4, #26]
    f1e6:	4291      	cmp	r1, r2
    f1e8:	d014      	beq.n	f214 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    f1ea:	8821      	ldrh	r1, [r4, #0]
    f1ec:	f8a4 11c6 	strh.w	r1, [r4, #454]	; 0x1c6
    f1f0:	f7fe fb82 	bl	d8f8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f1f4:	f8a4 01c8 	strh.w	r0, [r4, #456]	; 0x1c8
    f1f8:	f8b4 02c8 	ldrh.w	r0, [r4, #712]	; 0x2c8
    f1fc:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    f200:	f8b4 02ca 	ldrh.w	r0, [r4, #714]	; 0x2ca
    f204:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    f208:	2208      	movs	r2, #8
    f20a:	4621      	mov	r1, r4
    f20c:	f504 70dd 	add.w	r0, r4, #442	; 0x1ba
    f210:	f7f7 f91e 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f214:	2102      	movs	r1, #2
    f216:	4620      	mov	r0, r4
    f218:	f7f6 ffa0 	bl	615c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f21c:	2000      	movs	r0, #0
    f21e:	f804 0f96 	strb.w	r0, [r4, #150]!
    f222:	2003      	movs	r0, #3
    f224:	70e0      	strb	r0, [r4, #3]
    f226:	bd10      	pop	{r4, pc}

0000f228 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f228:	f7f5 bd26 	b.w	4c78 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f22c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f22c:	2000      	movs	r0, #0
    f22e:	4770      	bx	lr

0000f230 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f230:	f7f6 b9dc 	b.w	55ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f234 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f234:	2100      	movs	r1, #0
    f236:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    f23a:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f23e:	f880 1099 	strb.w	r1, [r0, #153]	; 0x99
    f242:	f890 121b 	ldrb.w	r1, [r0, #539]	; 0x21b
    f246:	b109      	cbz	r1, f24c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f248:	2102      	movs	r1, #2
    f24a:	e000      	b.n	f24e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f24c:	2103      	movs	r1, #3
    f24e:	f7f8 bc4d 	b.w	7aec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f252:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    f256:	28fe      	cmp	r0, #254	; 0xfe
    f258:	d001      	beq.n	f25e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f25a:	2001      	movs	r0, #1
    f25c:	4770      	bx	lr
    f25e:	2000      	movs	r0, #0
    f260:	4770      	bx	lr
    f262:	b510      	push	{r4, lr}
    f264:	2801      	cmp	r0, #1
    f266:	d006      	beq.n	f276 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f268:	2802      	cmp	r0, #2
    f26a:	d004      	beq.n	f276 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f26c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    f270:	2006      	movs	r0, #6
    f272:	f7f5 f97b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f276:	bd10      	pop	{r4, pc}
    f278:	2801      	cmp	r0, #1
    f27a:	d002      	beq.n	f282 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f27c:	2802      	cmp	r0, #2
    f27e:	d105      	bne.n	f28c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f280:	e002      	b.n	f288 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f282:	2901      	cmp	r1, #1
    f284:	d004      	beq.n	f290 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f286:	e001      	b.n	f28c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f288:	2902      	cmp	r1, #2
    f28a:	d001      	beq.n	f290 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f28c:	2000      	movs	r0, #0
    f28e:	4770      	bx	lr
    f290:	2001      	movs	r0, #1
    f292:	4770      	bx	lr
    f294:	1a40      	subs	r0, r0, r1
    f296:	b200      	sxth	r0, r0
    f298:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f29c:	4288      	cmp	r0, r1
    f29e:	dc01      	bgt.n	f2a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f2a0:	2800      	cmp	r0, #0
    f2a2:	dc01      	bgt.n	f2a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f2a4:	2001      	movs	r0, #1
    f2a6:	4770      	bx	lr
    f2a8:	2000      	movs	r0, #0
    f2aa:	4770      	bx	lr
    f2ac:	2200      	movs	r2, #0
    f2ae:	704a      	strb	r2, [r1, #1]
    f2b0:	2208      	movs	r2, #8
    f2b2:	700a      	strb	r2, [r1, #0]
    f2b4:	f5a0 7233 	sub.w	r2, r0, #716	; 0x2cc
    f2b8:	8812      	ldrh	r2, [r2, #0]
    f2ba:	808a      	strh	r2, [r1, #4]
    f2bc:	68c2      	ldr	r2, [r0, #12]
    f2be:	f8c1 2006 	str.w	r2, [r1, #6]
    f2c2:	6902      	ldr	r2, [r0, #16]
    f2c4:	f8c1 200a 	str.w	r2, [r1, #10]
    f2c8:	8a80      	ldrh	r0, [r0, #20]
    f2ca:	81c8      	strh	r0, [r1, #14]
    f2cc:	4770      	bx	lr
    f2ce:	6842      	ldr	r2, [r0, #4]
    f2d0:	2100      	movs	r1, #0
    f2d2:	f882 1095 	strb.w	r1, [r2, #149]	; 0x95
    f2d6:	6842      	ldr	r2, [r0, #4]
    f2d8:	f882 10ce 	strb.w	r1, [r2, #206]	; 0xce
    f2dc:	6840      	ldr	r0, [r0, #4]
    f2de:	f8a0 10ca 	strh.w	r1, [r0, #202]	; 0xca
    f2e2:	4770      	bx	lr
    f2e4:	b510      	push	{r4, lr}
    f2e6:	4604      	mov	r4, r0
    f2e8:	6840      	ldr	r0, [r0, #4]
    f2ea:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f2ee:	0740      	lsls	r0, r0, #29
    f2f0:	d501      	bpl.n	f2f6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xc2>
    f2f2:	2001      	movs	r0, #1
    f2f4:	bd10      	pop	{r4, pc}
    f2f6:	f7f9 f933 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f2fa:	6860      	ldr	r0, [r4, #4]
    f2fc:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f300:	f041 0104 	orr.w	r1, r1, #4
    f304:	6001      	str	r1, [r0, #0]
    f306:	2000      	movs	r0, #0
    f308:	bd10      	pop	{r4, pc}
    f30a:	b510      	push	{r4, lr}
    f30c:	4604      	mov	r4, r0
    f30e:	6840      	ldr	r0, [r0, #4]
    f310:	2301      	movs	r3, #1
    f312:	2109      	movs	r1, #9
    f314:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f318:	3080      	adds	r0, #128	; 0x80
    f31a:	f7fe fb06 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f31e:	2800      	cmp	r0, #0
    f320:	d009      	beq.n	f336 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x102>
    f322:	6861      	ldr	r1, [r4, #4]
    f324:	2000      	movs	r0, #0
    f326:	f881 00c2 	strb.w	r0, [r1, #194]	; 0xc2
    f32a:	6861      	ldr	r1, [r4, #4]
    f32c:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    f330:	6861      	ldr	r1, [r4, #4]
    f332:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f336:	bd10      	pop	{r4, pc}
    f338:	b510      	push	{r4, lr}
    f33a:	4604      	mov	r4, r0
    f33c:	6840      	ldr	r0, [r0, #4]
    f33e:	2301      	movs	r3, #1
    f340:	2100      	movs	r1, #0
    f342:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    f346:	3080      	adds	r0, #128	; 0x80
    f348:	f7fe faef 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f34c:	2800      	cmp	r0, #0
    f34e:	6860      	ldr	r0, [r4, #4]
    f350:	d00b      	beq.n	f36a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f352:	f890 009b 	ldrb.w	r0, [r0, #155]	; 0x9b
    f356:	2800      	cmp	r0, #0
    f358:	d006      	beq.n	f368 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x134>
    f35a:	f7f9 f901 	bl	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f35e:	6861      	ldr	r1, [r4, #4]
    f360:	2012      	movs	r0, #18
    f362:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f366:	2000      	movs	r0, #0
    f368:	bd10      	pop	{r4, pc}
    f36a:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    f36e:	2301      	movs	r3, #1
    f370:	2105      	movs	r1, #5
    f372:	3080      	adds	r0, #128	; 0x80
    f374:	f7fe fad9 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f378:	b108      	cbz	r0, f37e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x14a>
    f37a:	2008      	movs	r0, #8
    f37c:	bd10      	pop	{r4, pc}
    f37e:	2001      	movs	r0, #1
    f380:	bd10      	pop	{r4, pc}
    f382:	6840      	ldr	r0, [r0, #4]
    f384:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f388:	2913      	cmp	r1, #19
    f38a:	d001      	beq.n	f390 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x15c>
    f38c:	2002      	movs	r0, #2
    f38e:	4770      	bx	lr
    f390:	2114      	movs	r1, #20
    f392:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f396:	2000      	movs	r0, #0
    f398:	4770      	bx	lr
    f39a:	b510      	push	{r4, lr}
    f39c:	4604      	mov	r4, r0
    f39e:	6840      	ldr	r0, [r0, #4]
    f3a0:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    f3a4:	2819      	cmp	r0, #25
    f3a6:	d001      	beq.n	f3ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x178>
    f3a8:	2002      	movs	r0, #2
    f3aa:	bd10      	pop	{r4, pc}
    f3ac:	f7f9 f8e4 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f3b0:	6861      	ldr	r1, [r4, #4]
    f3b2:	201d      	movs	r0, #29
    f3b4:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f3b8:	2000      	movs	r0, #0
    f3ba:	bd10      	pop	{r4, pc}
    f3bc:	b510      	push	{r4, lr}
    f3be:	6843      	ldr	r3, [r0, #4]
    f3c0:	4604      	mov	r4, r0
    f3c2:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
    f3c6:	2808      	cmp	r0, #8
    f3c8:	d20d      	bcs.n	f3e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1b2>
    f3ca:	f500 720c 	add.w	r2, r0, #560	; 0x230
    f3ce:	f1c0 0008 	rsb	r0, r0, #8
    f3d2:	b2c1      	uxtb	r1, r0
    f3d4:	1898      	adds	r0, r3, r2
    f3d6:	f7f5 f969 	bl	46ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f3da:	6861      	ldr	r1, [r4, #4]
    f3dc:	f891 2122 	ldrb.w	r2, [r1, #290]	; 0x122
    f3e0:	4410      	add	r0, r2
    f3e2:	f881 0122 	strb.w	r0, [r1, #290]	; 0x122
    f3e6:	6862      	ldr	r2, [r4, #4]
    f3e8:	f892 1122 	ldrb.w	r1, [r2, #290]	; 0x122
    f3ec:	3908      	subs	r1, #8
    f3ee:	2904      	cmp	r1, #4
    f3f0:	d20d      	bcs.n	f40e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1da>
    f3f2:	f501 708a 	add.w	r0, r1, #276	; 0x114
    f3f6:	f1c1 0104 	rsb	r1, r1, #4
    f3fa:	b2c9      	uxtb	r1, r1
    f3fc:	4410      	add	r0, r2
    f3fe:	f7f5 f955 	bl	46ac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f402:	6861      	ldr	r1, [r4, #4]
    f404:	f891 2122 	ldrb.w	r2, [r1, #290]	; 0x122
    f408:	4410      	add	r0, r2
    f40a:	f881 0122 	strb.w	r0, [r1, #290]	; 0x122
    f40e:	6860      	ldr	r0, [r4, #4]
    f410:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    f414:	290c      	cmp	r1, #12
    f416:	d30f      	bcc.n	f438 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x204>
    f418:	d005      	beq.n	f426 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1f2>
    f41a:	f640 1135 	movw	r1, #2357	; 0x935
    f41e:	f04f 0031 	mov.w	r0, #49	; 0x31
    f422:	f7f5 f8a3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f426:	2100      	movs	r1, #0
    f428:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
    f42c:	2101      	movs	r1, #1
    f42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f432:	2004      	movs	r0, #4
    f434:	f7f9 be4e 	b.w	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    f438:	bd10      	pop	{r4, pc}
    f43a:	6842      	ldr	r2, [r0, #4]
    f43c:	2130      	movs	r1, #48	; 0x30
    f43e:	f882 1095 	strb.w	r1, [r2, #149]	; 0x95
    f442:	6840      	ldr	r0, [r0, #4]
    f444:	2100      	movs	r1, #0
    f446:	f880 12b4 	strb.w	r1, [r0, #692]	; 0x2b4
    f44a:	4770      	bx	lr
    f44c:	b510      	push	{r4, lr}
    f44e:	6841      	ldr	r1, [r0, #4]
    f450:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    f454:	2a16      	cmp	r2, #22
    f456:	d004      	beq.n	f462 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x22e>
    f458:	f240 71cc 	movw	r1, #1996	; 0x7cc
    f45c:	2031      	movs	r0, #49	; 0x31
    f45e:	f7f5 f885 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f462:	2201      	movs	r2, #1
    f464:	f881 20d3 	strb.w	r2, [r1, #211]	; 0xd3
    f468:	6840      	ldr	r0, [r0, #4]
    f46a:	2117      	movs	r1, #23
    f46c:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f470:	bd10      	pop	{r4, pc}
    f472:	f7fe bfd0 	b.w	e416 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f476:	b510      	push	{r4, lr}
    f478:	4604      	mov	r4, r0
    f47a:	6840      	ldr	r0, [r0, #4]
    f47c:	2301      	movs	r3, #1
    f47e:	2100      	movs	r1, #0
    f480:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f484:	3080      	adds	r0, #128	; 0x80
    f486:	f7fe fa50 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f48a:	b120      	cbz	r0, f496 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x262>
    f48c:	6861      	ldr	r1, [r4, #4]
    f48e:	201e      	movs	r0, #30
    f490:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f494:	bd10      	pop	{r4, pc}
    f496:	f640 0148 	movw	r1, #2120	; 0x848
    f49a:	2031      	movs	r0, #49	; 0x31
    f49c:	f7f5 f866 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4a0:	b510      	push	{r4, lr}
    f4a2:	6841      	ldr	r1, [r0, #4]
    f4a4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    f4a8:	06c2      	lsls	r2, r0, #27
    f4aa:	d402      	bmi.n	f4b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x27e>
    f4ac:	f640 014f 	movw	r1, #2127	; 0x84f
    f4b0:	e003      	b.n	f4ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x286>
    f4b2:	0682      	lsls	r2, r0, #26
    f4b4:	d504      	bpl.n	f4c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x28c>
    f4b6:	f44f 6105 	mov.w	r1, #2128	; 0x850
    f4ba:	2031      	movs	r0, #49	; 0x31
    f4bc:	f7f5 f856 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4c0:	f020 0010 	bic.w	r0, r0, #16
    f4c4:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    f4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4cc:	f7f9 b854 	b.w	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f4d0:	b510      	push	{r4, lr}
    f4d2:	4604      	mov	r4, r0
    f4d4:	6840      	ldr	r0, [r0, #4]
    f4d6:	2301      	movs	r3, #1
    f4d8:	2100      	movs	r1, #0
    f4da:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f4de:	3080      	adds	r0, #128	; 0x80
    f4e0:	f7fe fa23 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f4e4:	b120      	cbz	r0, f4f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2bc>
    f4e6:	6861      	ldr	r1, [r4, #4]
    f4e8:	2010      	movs	r0, #16
    f4ea:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f4ee:	bd10      	pop	{r4, pc}
    f4f0:	f640 013b 	movw	r1, #2107	; 0x83b
    f4f4:	2031      	movs	r0, #49	; 0x31
    f4f6:	f7f5 f839 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4fa:	6840      	ldr	r0, [r0, #4]
    f4fc:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f500:	f021 0104 	bic.w	r1, r1, #4
    f504:	6001      	str	r1, [r0, #0]
    f506:	f7f9 b837 	b.w	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f50a:	b510      	push	{r4, lr}
    f50c:	6841      	ldr	r1, [r0, #4]
    f50e:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    f512:	2a12      	cmp	r2, #18
    f514:	d004      	beq.n	f520 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2ec>
    f516:	f240 71c4 	movw	r1, #1988	; 0x7c4
    f51a:	2031      	movs	r0, #49	; 0x31
    f51c:	f7f5 f826 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f520:	2201      	movs	r2, #1
    f522:	f881 20d3 	strb.w	r2, [r1, #211]	; 0xd3
    f526:	6840      	ldr	r0, [r0, #4]
    f528:	2113      	movs	r1, #19
    f52a:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f52e:	bd10      	pop	{r4, pc}
    f530:	b510      	push	{r4, lr}
    f532:	4604      	mov	r4, r0
    f534:	6840      	ldr	r0, [r0, #4]
    f536:	2301      	movs	r3, #1
    f538:	2100      	movs	r1, #0
    f53a:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f53e:	3080      	adds	r0, #128	; 0x80
    f540:	f7fe f9f3 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f544:	b120      	cbz	r0, f550 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f546:	6861      	ldr	r1, [r4, #4]
    f548:	2021      	movs	r0, #33	; 0x21
    f54a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f54e:	bd10      	pop	{r4, pc}
    f550:	f640 015a 	movw	r1, #2138	; 0x85a
    f554:	2031      	movs	r0, #49	; 0x31
    f556:	f7f5 f809 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f55a:	b510      	push	{r4, lr}
    f55c:	6841      	ldr	r1, [r0, #4]
    f55e:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
    f562:	2823      	cmp	r0, #35	; 0x23
    f564:	d005      	beq.n	f572 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f566:	b120      	cbz	r0, f572 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f568:	f640 0161 	movw	r1, #2145	; 0x861
    f56c:	2031      	movs	r0, #49	; 0x31
    f56e:	f7f4 fffd 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f572:	2024      	movs	r0, #36	; 0x24
    f574:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f578:	bd10      	pop	{r4, pc}
    f57a:	b510      	push	{r4, lr}
    f57c:	6840      	ldr	r0, [r0, #4]
    f57e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f582:	292f      	cmp	r1, #47	; 0x2f
    f584:	d006      	beq.n	f594 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x360>
    f586:	2917      	cmp	r1, #23
    f588:	d00b      	beq.n	f5a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x36e>
    f58a:	f240 71ee 	movw	r1, #2030	; 0x7ee
    f58e:	2031      	movs	r0, #49	; 0x31
    f590:	f7f4 ffec 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f594:	2100      	movs	r1, #0
    f596:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f59a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f59e:	f7f8 bfeb 	b.w	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f5a2:	211b      	movs	r1, #27
    f5a4:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f5a8:	bd10      	pop	{r4, pc}
    f5aa:	b510      	push	{r4, lr}
    f5ac:	6840      	ldr	r0, [r0, #4]
    f5ae:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f5b2:	2917      	cmp	r1, #23
    f5b4:	d004      	beq.n	f5c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x38c>
    f5b6:	f240 71d9 	movw	r1, #2009	; 0x7d9
    f5ba:	2031      	movs	r0, #49	; 0x31
    f5bc:	f7f4 ffd6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5c0:	211b      	movs	r1, #27
    f5c2:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f5c6:	bd10      	pop	{r4, pc}
    f5c8:	f7fe bf13 	b.w	e3f2 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f5cc:	b510      	push	{r4, lr}
    f5ce:	6840      	ldr	r0, [r0, #4]
    f5d0:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f5d4:	2917      	cmp	r1, #23
    f5d6:	d004      	beq.n	f5e2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ae>
    f5d8:	f240 71d3 	movw	r1, #2003	; 0x7d3
    f5dc:	2031      	movs	r0, #49	; 0x31
    f5de:	f7f4 ffc5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5e2:	2119      	movs	r1, #25
    f5e4:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f5e8:	bd10      	pop	{r4, pc}
    f5ea:	b538      	push	{r3, r4, r5, lr}
    f5ec:	4604      	mov	r4, r0
    f5ee:	6840      	ldr	r0, [r0, #4]
    f5f0:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f5f4:	291d      	cmp	r1, #29
    f5f6:	d002      	beq.n	f5fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ca>
    f5f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
    f5fc:	e00f      	b.n	f61e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ea>
    f5fe:	2500      	movs	r5, #0
    f600:	f880 50d3 	strb.w	r5, [r0, #211]	; 0xd3
    f604:	6860      	ldr	r0, [r4, #4]
    f606:	f890 1205 	ldrb.w	r1, [r0, #517]	; 0x205
    f60a:	f88d 1000 	strb.w	r1, [sp]
    f60e:	9900      	ldr	r1, [sp, #0]
    f610:	9100      	str	r1, [sp, #0]
    f612:	f89d 2000 	ldrb.w	r2, [sp]
    f616:	2101      	movs	r1, #1
    f618:	b122      	cbz	r2, f624 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3f0>
    f61a:	f640 0103 	movw	r1, #2051	; 0x803
    f61e:	2031      	movs	r0, #49	; 0x31
    f620:	f7f4 ffa4 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f624:	f890 20d4 	ldrb.w	r2, [r0, #212]	; 0xd4
    f628:	b162      	cbz	r2, f644 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x410>
    f62a:	f880 50d4 	strb.w	r5, [r0, #212]	; 0xd4
    f62e:	6860      	ldr	r0, [r4, #4]
    f630:	220c      	movs	r2, #12
    f632:	8801      	ldrh	r1, [r0, #0]
    f634:	f8a0 1208 	strh.w	r1, [r0, #520]	; 0x208
    f638:	6860      	ldr	r0, [r4, #4]
    f63a:	f880 5206 	strb.w	r5, [r0, #518]	; 0x206
    f63e:	6861      	ldr	r1, [r4, #4]
    f640:	4608      	mov	r0, r1
    f642:	e00b      	b.n	f65c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x428>
    f644:	8802      	ldrh	r2, [r0, #0]
    f646:	f8a0 2208 	strh.w	r2, [r0, #520]	; 0x208
    f64a:	6860      	ldr	r0, [r4, #4]
    f64c:	220b      	movs	r2, #11
    f64e:	f880 5206 	strb.w	r5, [r0, #518]	; 0x206
    f652:	6860      	ldr	r0, [r4, #4]
    f654:	f880 120a 	strb.w	r1, [r0, #522]	; 0x20a
    f658:	6861      	ldr	r1, [r4, #4]
    f65a:	4608      	mov	r0, r1
    f65c:	f200 10fd 	addw	r0, r0, #509	; 0x1fd
    f660:	f7f6 fef6 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f664:	6860      	ldr	r0, [r4, #4]
    f666:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    f66a:	bd38      	pop	{r3, r4, r5, pc}
    f66c:	b510      	push	{r4, lr}
    f66e:	4604      	mov	r4, r0
    f670:	6840      	ldr	r0, [r0, #4]
    f672:	2301      	movs	r3, #1
    f674:	4619      	mov	r1, r3
    f676:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    f67a:	3080      	adds	r0, #128	; 0x80
    f67c:	f7fe f955 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f680:	2800      	cmp	r0, #0
    f682:	d103      	bne.n	f68c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x458>
    f684:	6861      	ldr	r1, [r4, #4]
    f686:	2008      	movs	r0, #8
    f688:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    f68c:	bd10      	pop	{r4, pc}
    f68e:	b510      	push	{r4, lr}
    f690:	4604      	mov	r4, r0
    f692:	6840      	ldr	r0, [r0, #4]
    f694:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    f698:	0789      	lsls	r1, r1, #30
    f69a:	d411      	bmi.n	f6c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x48c>
    f69c:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f6a0:	2301      	movs	r3, #1
    f6a2:	2100      	movs	r1, #0
    f6a4:	3080      	adds	r0, #128	; 0x80
    f6a6:	f7fe f940 	bl	d92a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f6aa:	b120      	cbz	r0, f6b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x482>
    f6ac:	6861      	ldr	r1, [r4, #4]
    f6ae:	2006      	movs	r0, #6
    f6b0:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f6b4:	e00a      	b.n	f6cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x498>
    f6b6:	f640 0127 	movw	r1, #2087	; 0x827
    f6ba:	2031      	movs	r0, #49	; 0x31
    f6bc:	f7f4 ff56 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6c0:	2100      	movs	r1, #0
    f6c2:	f880 10ce 	strb.w	r1, [r0, #206]	; 0xce
    f6c6:	6860      	ldr	r0, [r4, #4]
    f6c8:	f880 113a 	strb.w	r1, [r0, #314]	; 0x13a
    f6cc:	6860      	ldr	r0, [r4, #4]
    f6ce:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f6d2:	0780      	lsls	r0, r0, #30
    f6d4:	d507      	bpl.n	f6e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4b2>
    f6d6:	f7f8 ff4f 	bl	8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f6da:	6860      	ldr	r0, [r4, #4]
    f6dc:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f6e0:	f021 0102 	bic.w	r1, r1, #2
    f6e4:	6001      	str	r1, [r0, #0]
    f6e6:	bd10      	pop	{r4, pc}

0000f6e8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6ec:	6856      	ldr	r6, [r2, #4]
    f6ee:	460c      	mov	r4, r1
    f6f0:	f506 7594 	add.w	r5, r6, #296	; 0x128
    f6f4:	f106 0780 	add.w	r7, r6, #128	; 0x80
    f6f8:	2823      	cmp	r0, #35	; 0x23
    f6fa:	d008      	beq.n	f70e <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f6fc:	2824      	cmp	r0, #36	; 0x24
    f6fe:	d015      	beq.n	f72c <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x44>
    f700:	2825      	cmp	r0, #37	; 0x25
    f702:	d02a      	beq.n	f75a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f704:	f44f 718a 	mov.w	r1, #276	; 0x114
    f708:	2078      	movs	r0, #120	; 0x78
    f70a:	f7f4 ff2f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f70e:	7e68      	ldrb	r0, [r5, #25]
    f710:	f000 f8b5 	bl	f87e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f714:	7e69      	ldrb	r1, [r5, #25]
    f716:	7121      	strb	r1, [r4, #4]
    f718:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f71c:	7ea9      	ldrb	r1, [r5, #26]
    f71e:	4430      	add	r0, r6
    f720:	7161      	strb	r1, [r4, #5]
    f722:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f726:	71a0      	strb	r0, [r4, #6]
    f728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f72c:	7d68      	ldrb	r0, [r5, #21]
    f72e:	f000 f8a6 	bl	f87e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f732:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f736:	4430      	add	r0, r6
    f738:	7d79      	ldrb	r1, [r7, #21]
    f73a:	306f      	adds	r0, #111	; 0x6f
    f73c:	2929      	cmp	r1, #41	; 0x29
    f73e:	d00a      	beq.n	f756 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f740:	7881      	ldrb	r1, [r0, #2]
    f742:	7802      	ldrb	r2, [r0, #0]
    f744:	7122      	strb	r2, [r4, #4]
    f746:	7daa      	ldrb	r2, [r5, #22]
    f748:	7162      	strb	r2, [r4, #5]
    f74a:	7840      	ldrb	r0, [r0, #1]
    f74c:	71a0      	strb	r0, [r4, #6]
    f74e:	71e1      	strb	r1, [r4, #7]
    f750:	2000      	movs	r0, #0
    f752:	7528      	strb	r0, [r5, #20]
    f754:	e7e8      	b.n	f728 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x40>
    f756:	21ff      	movs	r1, #255	; 0xff
    f758:	e7f3      	b.n	f742 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f75a:	7d68      	ldrb	r0, [r5, #21]
    f75c:	f000 f88f 	bl	f87e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f760:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f764:	4430      	add	r0, r6
    f766:	7d69      	ldrb	r1, [r5, #21]
    f768:	7121      	strb	r1, [r4, #4]
    f76a:	f810 1f6f 	ldrb.w	r1, [r0, #111]!
    f76e:	7161      	strb	r1, [r4, #5]
    f770:	7da9      	ldrb	r1, [r5, #22]
    f772:	71a1      	strb	r1, [r4, #6]
    f774:	7840      	ldrb	r0, [r0, #1]
    f776:	71e0      	strb	r0, [r4, #7]
    f778:	e7d6      	b.n	f728 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x40>

0000f77a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f77a:	b510      	push	{r4, lr}
    f77c:	2801      	cmp	r0, #1
    f77e:	d006      	beq.n	f78e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f780:	2802      	cmp	r0, #2
    f782:	d006      	beq.n	f792 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f784:	f240 2176 	movw	r1, #630	; 0x276
    f788:	2078      	movs	r0, #120	; 0x78
    f78a:	f7f4 feef 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f78e:	2000      	movs	r0, #0
    f790:	bd10      	pop	{r4, pc}
    f792:	2001      	movs	r0, #1
    f794:	bd10      	pop	{r4, pc}

0000f796 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    f796:	b570      	push	{r4, r5, r6, lr}
    f798:	6844      	ldr	r4, [r0, #4]
    f79a:	220f      	movs	r2, #15
    f79c:	f504 7594 	add.w	r5, r4, #296	; 0x128
    f7a0:	2100      	movs	r1, #0
    f7a2:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    f7a6:	f7fc fef2 	bl	c58e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f7aa:	2100      	movs	r1, #0
    f7ac:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
    f7b0:	61a9      	str	r1, [r5, #24]
    f7b2:	4608      	mov	r0, r1
    f7b4:	217f      	movs	r1, #127	; 0x7f
    f7b6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f7ba:	4422      	add	r2, r4
    f7bc:	1c40      	adds	r0, r0, #1
    f7be:	b2c0      	uxtb	r0, r0
    f7c0:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    f7c4:	2802      	cmp	r0, #2
    f7c6:	d3f6      	bcc.n	f7b6 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x20>
    f7c8:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    f7cc:	4620      	mov	r0, r4
    f7ce:	f000 f814 	bl	f7fa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    f7d2:	2000      	movs	r0, #0
    f7d4:	21ff      	movs	r1, #255	; 0xff
    f7d6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f7da:	4422      	add	r2, r4
    f7dc:	1c40      	adds	r0, r0, #1
    f7de:	f802 1f71 	strb.w	r1, [r2, #113]!
    f7e2:	b2c0      	uxtb	r0, r0
    f7e4:	7191      	strb	r1, [r2, #6]
    f7e6:	2802      	cmp	r0, #2
    f7e8:	d3f5      	bcc.n	f7d6 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x40>
    f7ea:	bd70      	pop	{r4, r5, r6, pc}

0000f7ec <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>:
    f7ec:	207f      	movs	r0, #127	; 0x7f
    f7ee:	f000 b857 	b.w	f8a0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>

0000f7f2 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>:
    f7f2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f7f6:	f000 b853 	b.w	f8a0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>

0000f7fa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7fe:	460d      	mov	r5, r1
    f800:	4606      	mov	r6, r0
    f802:	f7ff fff3 	bl	f7ec <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>
    f806:	4607      	mov	r7, r0
    f808:	f7ff fff3 	bl	f7f2 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>
    f80c:	2400      	movs	r4, #0
    f80e:	4285      	cmp	r5, r0
    f810:	d100      	bne.n	f814 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f812:	2401      	movs	r4, #1
    f814:	42bd      	cmp	r5, r7
    f816:	d101      	bne.n	f81c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f818:	f044 0402 	orr.w	r4, r4, #2
    f81c:	f000 f823 	bl	f866 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1e>
    f820:	2200      	movs	r2, #0
    f822:	4601      	mov	r1, r0
    f824:	2301      	movs	r3, #1
    f826:	fa03 f002 	lsl.w	r0, r3, r2
    f82a:	4208      	tst	r0, r1
    f82c:	d006      	beq.n	f83c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x42>
    f82e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    f832:	4430      	add	r0, r6
    f834:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f838:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f83c:	1c52      	adds	r2, r2, #1
    f83e:	b2d2      	uxtb	r2, r2
    f840:	2a02      	cmp	r2, #2
    f842:	d3f0      	bcc.n	f826 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f848 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f848:	b510      	push	{r4, lr}
    f84a:	4604      	mov	r4, r0
    f84c:	4608      	mov	r0, r1
    f84e:	f7ff ff94 	bl	f77a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f852:	2802      	cmp	r0, #2
    f854:	d206      	bcs.n	f864 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f856:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f85a:	4420      	add	r0, r4
    f85c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f860:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f864:	bd10      	pop	{r4, pc}
    f866:	b510      	push	{r4, lr}
    f868:	f7fa ff1e 	bl	a6a8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f86c:	0a00      	lsrs	r0, r0, #8
    f86e:	2201      	movs	r2, #1
    f870:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f874:	07c0      	lsls	r0, r0, #31
    f876:	d000      	beq.n	f87a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x32>
    f878:	2203      	movs	r2, #3
    f87a:	4610      	mov	r0, r2
    f87c:	bd10      	pop	{r4, pc}
    f87e:	4601      	mov	r1, r0
    f880:	b510      	push	{r4, lr}
    f882:	2000      	movs	r0, #0
    f884:	2301      	movs	r3, #1
    f886:	fa03 f200 	lsl.w	r2, r3, r0
    f88a:	420a      	tst	r2, r1
    f88c:	d107      	bne.n	f89e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x56>
    f88e:	1c40      	adds	r0, r0, #1
    f890:	b2c0      	uxtb	r0, r0
    f892:	2802      	cmp	r0, #2
    f894:	d3f7      	bcc.n	f886 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f896:	2149      	movs	r1, #73	; 0x49
    f898:	2078      	movs	r0, #120	; 0x78
    f89a:	f7f4 fe67 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f89e:	bd10      	pop	{r4, pc}
    f8a0:	b508      	push	{r3, lr}
    f8a2:	f640 1288 	movw	r2, #2440	; 0x988
    f8a6:	4669      	mov	r1, sp
    f8a8:	f7f4 fd42 	bl	4330 <mpsl_fem_tx_power_split>
    f8ac:	bd08      	pop	{r3, pc}
    f8ae:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f8b2:	f001 0107 	and.w	r1, r1, #7
    f8b6:	7800      	ldrb	r0, [r0, #0]
    f8b8:	40c8      	lsrs	r0, r1
    f8ba:	f000 0001 	and.w	r0, r0, #1
    f8be:	4770      	bx	lr
    f8c0:	b118      	cbz	r0, f8ca <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x82>
    f8c2:	2802      	cmp	r0, #2
    f8c4:	d001      	beq.n	f8ca <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x82>
    f8c6:	2001      	movs	r0, #1
    f8c8:	4770      	bx	lr
    f8ca:	2000      	movs	r0, #0
    f8cc:	4770      	bx	lr

0000f8ce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f8ce:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f8d0:	7881      	ldrb	r1, [r0, #2]
    f8d2:	2500      	movs	r5, #0
    f8d4:	4604      	mov	r4, r0
    f8d6:	291a      	cmp	r1, #26
    f8d8:	d024      	beq.n	f924 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f8da:	dc0e      	bgt.n	f8fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f8dc:	2916      	cmp	r1, #22
    f8de:	d22b      	bcs.n	f938 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f8e0:	e8df f001 	tbb	[pc, r1]
    f8e4:	2a2a2a2a 	.word	0x2a2a2a2a
    f8e8:	2a2a202a 	.word	0x2a2a202a
    f8ec:	2a2a2a2a 	.word	0x2a2a2a2a
    f8f0:	2a2a2a2a 	.word	0x2a2a2a2a
    f8f4:	202a2a2a 	.word	0x202a2a2a
    f8f8:	2020      	.short	0x2020
    f8fa:	292a      	cmp	r1, #42	; 0x2a
    f8fc:	d01c      	beq.n	f938 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f8fe:	dc0b      	bgt.n	f918 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f900:	f1a1 011e 	sub.w	r1, r1, #30
    f904:	290c      	cmp	r1, #12
    f906:	d217      	bcs.n	f938 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f908:	e8df f001 	tbb	[pc, r1]
    f90c:	16161616 	.word	0x16161616
    f910:	16161616 	.word	0x16161616
    f914:	0c161616 	.word	0x0c161616
    f918:	393a      	subs	r1, #58	; 0x3a
    f91a:	2902      	cmp	r1, #2
    f91c:	d20c      	bcs.n	f938 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f91e:	e8df f001 	tbb	[pc, r1]
    f922:	010b      	.short	0x010b
    f924:	8820      	ldrh	r0, [r4, #0]
    f926:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f92a:	d205      	bcs.n	f938 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f92c:	4669      	mov	r1, sp
    f92e:	f7fd ffd2 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f932:	b118      	cbz	r0, f93c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f934:	2002      	movs	r0, #2
    f936:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f938:	2012      	movs	r0, #18
    f93a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f93c:	9901      	ldr	r1, [sp, #4]
    f93e:	4668      	mov	r0, sp
    f940:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
    f944:	f88d 2008 	strb.w	r2, [sp, #8]
    f948:	9a02      	ldr	r2, [sp, #8]
    f94a:	9202      	str	r2, [sp, #8]
    f94c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f950:	f501 7194 	add.w	r1, r1, #296	; 0x128
    f954:	b10a      	cbz	r2, f95a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    f956:	200c      	movs	r0, #12
    f958:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f95a:	78a2      	ldrb	r2, [r4, #2]
    f95c:	704a      	strb	r2, [r1, #1]
    f95e:	22ff      	movs	r2, #255	; 0xff
    f960:	700a      	strb	r2, [r1, #0]
    f962:	f7fe fb51 	bl	e008 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f966:	4628      	mov	r0, r5
    f968:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f96a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f96a:	b510      	push	{r4, lr}
    f96c:	4604      	mov	r4, r0
    f96e:	f7fa fdcd 	bl	a50c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f972:	b108      	cbz	r0, f978 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f974:	200c      	movs	r0, #12
    f976:	bd10      	pop	{r4, pc}
    f978:	7820      	ldrb	r0, [r4, #0]
    f97a:	b118      	cbz	r0, f984 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f97c:	2801      	cmp	r0, #1
    f97e:	d001      	beq.n	f984 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f980:	2012      	movs	r0, #18
    f982:	bd10      	pop	{r4, pc}
    f984:	f7ff ff9c 	bl	f8c0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x78>
    f988:	1c61      	adds	r1, r4, #1
    f98a:	f7f6 fab5 	bl	5ef8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f98e:	b108      	cbz	r0, f994 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f990:	2000      	movs	r0, #0
    f992:	bd10      	pop	{r4, pc}
    f994:	2007      	movs	r0, #7
    f996:	bd10      	pop	{r4, pc}

0000f998 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f998:	b510      	push	{r4, lr}
    f99a:	f7fa fdb7 	bl	a50c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f99e:	b108      	cbz	r0, f9a4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f9a0:	200c      	movs	r0, #12
    f9a2:	bd10      	pop	{r4, pc}
    f9a4:	f7f6 fad0 	bl	5f48 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f9a8:	2000      	movs	r0, #0
    f9aa:	bd10      	pop	{r4, pc}

0000f9ac <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f9ac:	b510      	push	{r4, lr}
    f9ae:	460b      	mov	r3, r1
    f9b0:	2201      	movs	r2, #1
    f9b2:	f100 0110 	add.w	r1, r0, #16
    f9b6:	f7fd ff70 	bl	d89a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f9ba:	2000      	movs	r0, #0
    f9bc:	bd10      	pop	{r4, pc}

0000f9be <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f9be:	b510      	push	{r4, lr}
    f9c0:	8800      	ldrh	r0, [r0, #0]
    f9c2:	2100      	movs	r1, #0
    f9c4:	f7fd fd10 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f9c8:	b118      	cbz	r0, f9d2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f9ca:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    f9ce:	b111      	cbz	r1, f9d6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f9d0:	e007      	b.n	f9e2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f9d2:	2002      	movs	r0, #2
    f9d4:	bd10      	pop	{r4, pc}
    f9d6:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f9da:	2916      	cmp	r1, #22
    f9dc:	d003      	beq.n	f9e6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f9de:	2917      	cmp	r1, #23
    f9e0:	d001      	beq.n	f9e6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f9e2:	200c      	movs	r0, #12
    f9e4:	bd10      	pop	{r4, pc}
    f9e6:	2102      	movs	r1, #2
    f9e8:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
    f9ec:	2000      	movs	r0, #0
    f9ee:	bd10      	pop	{r4, pc}

0000f9f0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9f2:	4605      	mov	r5, r0
    f9f4:	8800      	ldrh	r0, [r0, #0]
    f9f6:	2100      	movs	r1, #0
    f9f8:	f7fd fcf6 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f9fc:	0004      	movs	r4, r0
    f9fe:	d003      	beq.n	fa08 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fa00:	f894 02a0 	ldrb.w	r0, [r4, #672]	; 0x2a0
    fa04:	b110      	cbz	r0, fa0c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fa06:	e011      	b.n	fa2c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fa08:	2002      	movs	r0, #2
    fa0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa0c:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    fa10:	2816      	cmp	r0, #22
    fa12:	d001      	beq.n	fa18 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fa14:	2817      	cmp	r0, #23
    fa16:	d109      	bne.n	fa2c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fa18:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
    fa1c:	f88d 0000 	strb.w	r0, [sp]
    fa20:	9800      	ldr	r0, [sp, #0]
    fa22:	9000      	str	r0, [sp, #0]
    fa24:	f89d 0000 	ldrb.w	r0, [sp]
    fa28:	2601      	movs	r6, #1
    fa2a:	b108      	cbz	r0, fa30 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fa2c:	200c      	movs	r0, #12
    fa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa30:	2210      	movs	r2, #16
    fa32:	1ca9      	adds	r1, r5, #2
    fa34:	f204 20a1 	addw	r0, r4, #673	; 0x2a1
    fa38:	f7fc fd2f 	bl	c49a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fa3c:	f884 62a0 	strb.w	r6, [r4, #672]	; 0x2a0
    fa40:	2000      	movs	r0, #0
    fa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fa44 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fa44:	b510      	push	{r4, lr}
    fa46:	2108      	movs	r1, #8
    fa48:	f7f4 fe3e 	bl	46c8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fa4c:	2000      	movs	r0, #0
    fa4e:	bd10      	pop	{r4, pc}

0000fa50 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fa50:	b510      	push	{r4, lr}
    fa52:	4604      	mov	r4, r0
    fa54:	f7fa fbda 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fa58:	f7fe fe79 	bl	e74e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fa5c:	7020      	strb	r0, [r4, #0]
    fa5e:	2000      	movs	r0, #0
    fa60:	bd10      	pop	{r4, pc}

0000fa62 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fa62:	21fb      	movs	r1, #251	; 0xfb
    fa64:	8001      	strh	r1, [r0, #0]
    fa66:	f640 0248 	movw	r2, #2120	; 0x848
    fa6a:	8042      	strh	r2, [r0, #2]
    fa6c:	8081      	strh	r1, [r0, #4]
    fa6e:	80c2      	strh	r2, [r0, #6]
    fa70:	2000      	movs	r0, #0
    fa72:	4770      	bx	lr

0000fa74 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fa74:	b51c      	push	{r2, r3, r4, lr}
    fa76:	8800      	ldrh	r0, [r0, #0]
    fa78:	4669      	mov	r1, sp
    fa7a:	f7fd ff2c 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa7e:	2800      	cmp	r0, #0
    fa80:	d10d      	bne.n	fa9e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fa82:	f89d 0000 	ldrb.w	r0, [sp]
    fa86:	9c01      	ldr	r4, [sp, #4]
    fa88:	2801      	cmp	r0, #1
    fa8a:	f504 7494 	add.w	r4, r4, #296	; 0x128
    fa8e:	d103      	bne.n	fa98 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fa90:	9801      	ldr	r0, [sp, #4]
    fa92:	f000 fcf8 	bl	10486 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fa96:	b118      	cbz	r0, faa0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fa98:	7ce0      	ldrb	r0, [r4, #19]
    fa9a:	b118      	cbz	r0, faa4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fa9c:	203a      	movs	r0, #58	; 0x3a
    fa9e:	bd1c      	pop	{r2, r3, r4, pc}
    faa0:	2002      	movs	r0, #2
    faa2:	bd1c      	pop	{r2, r3, r4, pc}
    faa4:	2001      	movs	r0, #1
    faa6:	74e0      	strb	r0, [r4, #19]
    faa8:	2000      	movs	r0, #0
    faaa:	bd1c      	pop	{r2, r3, r4, pc}

0000faac <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    faac:	b510      	push	{r4, lr}
    faae:	4604      	mov	r4, r0
    fab0:	20d8      	movs	r0, #216	; 0xd8
    fab2:	7020      	strb	r0, [r4, #0]
    fab4:	f000 fce4 	bl	10480 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fab8:	7060      	strb	r0, [r4, #1]
    faba:	2000      	movs	r0, #0
    fabc:	bd10      	pop	{r4, pc}

0000fabe <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fabe:	2108      	movs	r1, #8
    fac0:	7001      	strb	r1, [r0, #0]
    fac2:	2000      	movs	r0, #0
    fac4:	4770      	bx	lr

0000fac6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fac6:	b510      	push	{r4, lr}
    fac8:	4604      	mov	r4, r0
    faca:	f7fa fd1f 	bl	a50c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    face:	b108      	cbz	r0, fad4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fad0:	200c      	movs	r0, #12
    fad2:	bd10      	pop	{r4, pc}
    fad4:	7820      	ldrb	r0, [r4, #0]
    fad6:	b108      	cbz	r0, fadc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fad8:	2801      	cmp	r0, #1
    fada:	d107      	bne.n	faec <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fadc:	f7ff fef0 	bl	f8c0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x78>
    fae0:	1c61      	adds	r1, r4, #1
    fae2:	f7fd fecf 	bl	d884 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fae6:	b108      	cbz	r0, faec <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fae8:	2000      	movs	r0, #0
    faea:	bd10      	pop	{r4, pc}
    faec:	2012      	movs	r0, #18
    faee:	bd10      	pop	{r4, pc}

0000faf0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    faf0:	b51c      	push	{r2, r3, r4, lr}
    faf2:	4604      	mov	r4, r0
    faf4:	f7fa fb8a 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    faf8:	2000      	movs	r0, #0
    fafa:	f88d 0002 	strb.w	r0, [sp, #2]
    fafe:	2103      	movs	r1, #3
    fb00:	f88d 1001 	strb.w	r1, [sp, #1]
    fb04:	f814 1b01 	ldrb.w	r1, [r4], #1
    fb08:	f88d 1003 	strb.w	r1, [sp, #3]
    fb0c:	f88d 0000 	strb.w	r0, [sp]
    fb10:	4668      	mov	r0, sp
    fb12:	9401      	str	r4, [sp, #4]
    fb14:	f000 f99f 	bl	fe56 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fb18:	bd1c      	pop	{r2, r3, r4, pc}

0000fb1a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fb1a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fb1c:	4605      	mov	r5, r0
    fb1e:	f7fa fb75 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fb22:	4606      	mov	r6, r0
    fb24:	7828      	ldrb	r0, [r5, #0]
    fb26:	2400      	movs	r4, #0
    fb28:	b160      	cbz	r0, fb44 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fb2a:	f88d 4000 	strb.w	r4, [sp]
    fb2e:	2001      	movs	r0, #1
    fb30:	f10d 0101 	add.w	r1, sp, #1
    fb34:	f7f5 fbb6 	bl	52a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fb38:	b120      	cbz	r0, fb44 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fb3a:	4668      	mov	r0, sp
    fb3c:	f000 f897 	bl	fc6e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fb40:	2800      	cmp	r0, #0
    fb42:	d112      	bne.n	fb6a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fb44:	f88d 400c 	strb.w	r4, [sp, #12]
    fb48:	4630      	mov	r0, r6
    fb4a:	f7fe fdf6 	bl	e73a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fb4e:	b118      	cbz	r0, fb58 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fb50:	2080      	movs	r0, #128	; 0x80
    fb52:	f8ad 000d 	strh.w	r0, [sp, #13]
    fb56:	e001      	b.n	fb5c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fb58:	f8ad 400d 	strh.w	r4, [sp, #13]
    fb5c:	f88d 400f 	strb.w	r4, [sp, #15]
    fb60:	7828      	ldrb	r0, [r5, #0]
    fb62:	2801      	cmp	r0, #1
    fb64:	d003      	beq.n	fb6e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fb66:	b138      	cbz	r0, fb78 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fb68:	2012      	movs	r0, #18
    fb6a:	b004      	add	sp, #16
    fb6c:	bd70      	pop	{r4, r5, r6, pc}
    fb6e:	a903      	add	r1, sp, #12
    fb70:	4630      	mov	r0, r6
    fb72:	f7fa fb67 	bl	a244 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fb76:	e7f8      	b.n	fb6a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fb78:	4630      	mov	r0, r6
    fb7a:	f000 fc9a 	bl	104b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fb7e:	e7f4      	b.n	fb6a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fb80 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fb80:	b530      	push	{r4, r5, lr}
    fb82:	b08b      	sub	sp, #44	; 0x2c
    fb84:	4604      	mov	r4, r0
    fb86:	f7fa fb41 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fb8a:	4602      	mov	r2, r0
    fb8c:	7920      	ldrb	r0, [r4, #4]
    fb8e:	2804      	cmp	r0, #4
    fb90:	d803      	bhi.n	fb9a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fb92:	8860      	ldrh	r0, [r4, #2]
    fb94:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fb98:	d902      	bls.n	fba0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fb9a:	2012      	movs	r0, #18
    fb9c:	b00b      	add	sp, #44	; 0x2c
    fb9e:	bd30      	pop	{r4, r5, pc}
    fba0:	2500      	movs	r5, #0
    fba2:	f88d 5004 	strb.w	r5, [sp, #4]
    fba6:	7921      	ldrb	r1, [r4, #4]
    fba8:	9500      	str	r5, [sp, #0]
    fbaa:	f89d 0000 	ldrb.w	r0, [sp]
    fbae:	2905      	cmp	r1, #5
    fbb0:	f040 0010 	orr.w	r0, r0, #16
    fbb4:	f88d 0000 	strb.w	r0, [sp]
    fbb8:	d254      	bcs.n	fc64 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fbba:	e8df f001 	tbb	[pc, r1]
    fbbe:	0803      	.short	0x0803
    fbc0:	000b1105 	.word	0x000b1105
    fbc4:	f040 0001 	orr.w	r0, r0, #1
    fbc8:	f040 0002 	orr.w	r0, r0, #2
    fbcc:	e006      	b.n	fbdc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fbce:	f040 0009 	orr.w	r0, r0, #9
    fbd2:	e001      	b.n	fbd8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fbd4:	f040 0001 	orr.w	r0, r0, #1
    fbd8:	f040 0004 	orr.w	r0, r0, #4
    fbdc:	f88d 0000 	strb.w	r0, [sp]
    fbe0:	f8bd 0000 	ldrh.w	r0, [sp]
    fbe4:	9000      	str	r0, [sp, #0]
    fbe6:	f8bd 0000 	ldrh.w	r0, [sp]
    fbea:	f8ad 0005 	strh.w	r0, [sp, #5]
    fbee:	8821      	ldrh	r1, [r4, #0]
    fbf0:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fbf4:	f361 201f 	bfi	r0, r1, #8, #24
    fbf8:	f8cd 0006 	str.w	r0, [sp, #6]
    fbfc:	8861      	ldrh	r1, [r4, #2]
    fbfe:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fc02:	f361 201f 	bfi	r0, r1, #8, #24
    fc06:	f8cd 0009 	str.w	r0, [sp, #9]
    fc0a:	7b60      	ldrb	r0, [r4, #13]
    fc0c:	f88d 000d 	strb.w	r0, [sp, #13]
    fc10:	7960      	ldrb	r0, [r4, #5]
    fc12:	f88d 000e 	strb.w	r0, [sp, #14]
    fc16:	79a0      	ldrb	r0, [r4, #6]
    fc18:	f88d 000f 	strb.w	r0, [sp, #15]
    fc1c:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fc20:	9004      	str	r0, [sp, #16]
    fc22:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fc26:	f8ad 0014 	strh.w	r0, [sp, #20]
    fc2a:	7ba0      	ldrb	r0, [r4, #14]
    fc2c:	f88d 0016 	strb.w	r0, [sp, #22]
    fc30:	207f      	movs	r0, #127	; 0x7f
    fc32:	f88d 0017 	strb.w	r0, [sp, #23]
    fc36:	2001      	movs	r0, #1
    fc38:	f88d 0018 	strb.w	r0, [sp, #24]
    fc3c:	f88d 5019 	strb.w	r5, [sp, #25]
    fc40:	f88d 001a 	strb.w	r0, [sp, #26]
    fc44:	f88d 501b 	strb.w	r5, [sp, #27]
    fc48:	4610      	mov	r0, r2
    fc4a:	f7fe fd96 	bl	e77a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fc4e:	f88d 001c 	strb.w	r0, [sp, #28]
    fc52:	f88d 501d 	strb.w	r5, [sp, #29]
    fc56:	f88d 501e 	strb.w	r5, [sp, #30]
    fc5a:	a909      	add	r1, sp, #36	; 0x24
    fc5c:	a801      	add	r0, sp, #4
    fc5e:	f7fa f99f 	bl	9fa0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fc62:	e79b      	b.n	fb9c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fc64:	f241 11d5 	movw	r1, #4565	; 0x11d5
    fc68:	2039      	movs	r0, #57	; 0x39
    fc6a:	f7f4 fc7f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fc6e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fc6e:	b570      	push	{r4, r5, r6, lr}
    fc70:	4604      	mov	r4, r0
    fc72:	7800      	ldrb	r0, [r0, #0]
    fc74:	2101      	movs	r1, #1
    fc76:	f7fd fbb7 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fc7a:	0005      	movs	r5, r0
    fc7c:	d007      	beq.n	fc8e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fc7e:	f7fe ff1e 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fc82:	b160      	cbz	r0, fc9e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fc84:	4628      	mov	r0, r5
    fc86:	f7fe fd5e 	bl	e746 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fc8a:	b110      	cbz	r0, fc92 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fc8c:	e005      	b.n	fc9a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fc8e:	2042      	movs	r0, #66	; 0x42
    fc90:	bd70      	pop	{r4, r5, r6, pc}
    fc92:	4628      	mov	r0, r5
    fc94:	f7fe fd4d 	bl	e732 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fc98:	b108      	cbz	r0, fc9e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fc9a:	200c      	movs	r0, #12
    fc9c:	bd70      	pop	{r4, r5, r6, pc}
    fc9e:	1c61      	adds	r1, r4, #1
    fca0:	4628      	mov	r0, r5
    fca2:	f7fe fd62 	bl	e76a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fca6:	2000      	movs	r0, #0
    fca8:	bd70      	pop	{r4, r5, r6, pc}

0000fcaa <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fcaa:	b50e      	push	{r1, r2, r3, lr}
    fcac:	8882      	ldrh	r2, [r0, #4]
    fcae:	f244 2390 	movw	r3, #17040	; 0x4290
    fcb2:	429a      	cmp	r2, r3
    fcb4:	d901      	bls.n	fcba <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fcb6:	2012      	movs	r0, #18
    fcb8:	bd0e      	pop	{r1, r2, r3, pc}
    fcba:	f640 0348 	movw	r3, #2120	; 0x848
    fcbe:	429a      	cmp	r2, r3
    fcc0:	d300      	bcc.n	fcc4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fcc2:	461a      	mov	r2, r3
    fcc4:	8803      	ldrh	r3, [r0, #0]
    fcc6:	f8ad 3000 	strh.w	r3, [sp]
    fcca:	8843      	ldrh	r3, [r0, #2]
    fccc:	f8ad 3002 	strh.w	r3, [sp, #2]
    fcd0:	f8ad 2004 	strh.w	r2, [sp, #4]
    fcd4:	8843      	ldrh	r3, [r0, #2]
    fcd6:	f8ad 3006 	strh.w	r3, [sp, #6]
    fcda:	f8ad 2008 	strh.w	r2, [sp, #8]
    fcde:	8800      	ldrh	r0, [r0, #0]
    fce0:	8008      	strh	r0, [r1, #0]
    fce2:	4668      	mov	r0, sp
    fce4:	f7fa fb8e 	bl	a404 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    fce8:	bd0e      	pop	{r1, r2, r3, pc}

0000fcea <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    fcea:	b510      	push	{r4, lr}
    fcec:	4604      	mov	r4, r0
    fcee:	f7fa fa8d 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fcf2:	7861      	ldrb	r1, [r4, #1]
    fcf4:	f3c1 0240 	ubfx	r2, r1, #1, #1
    fcf8:	f001 0101 	and.w	r1, r1, #1
    fcfc:	f7fe fd31 	bl	e762 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    fd00:	2000      	movs	r0, #0
    fd02:	bd10      	pop	{r4, pc}

0000fd04 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fd04:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fd06:	4604      	mov	r4, r0
    fd08:	f10d 0007 	add.w	r0, sp, #7
    fd0c:	9000      	str	r0, [sp, #0]
    fd0e:	7922      	ldrb	r2, [r4, #4]
    fd10:	78e1      	ldrb	r1, [r4, #3]
    fd12:	78a0      	ldrb	r0, [r4, #2]
    fd14:	f10d 0306 	add.w	r3, sp, #6
    fd18:	f000 fbf8 	bl	1050c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    fd1c:	2800      	cmp	r0, #0
    fd1e:	d109      	bne.n	fd34 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fd20:	8820      	ldrh	r0, [r4, #0]
    fd22:	f8ad 0004 	strh.w	r0, [sp, #4]
    fd26:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fd2a:	f8ad 0008 	strh.w	r0, [sp, #8]
    fd2e:	a801      	add	r0, sp, #4
    fd30:	f000 f94c 	bl	ffcc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fd34:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fd36 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fd36:	b510      	push	{r4, lr}
    fd38:	4604      	mov	r4, r0
    fd3a:	2001      	movs	r0, #1
    fd3c:	f000 fa7e 	bl	1023c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fd40:	b128      	cbz	r0, fd4e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fd42:	4621      	mov	r1, r4
    fd44:	2001      	movs	r0, #1
    fd46:	f7f5 fac5 	bl	52d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fd4a:	2000      	movs	r0, #0
    fd4c:	bd10      	pop	{r4, pc}
    fd4e:	200c      	movs	r0, #12
    fd50:	bd10      	pop	{r4, pc}

0000fd52 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fd52:	b51c      	push	{r2, r3, r4, lr}
    fd54:	4604      	mov	r4, r0
    fd56:	f7fa fa59 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fd5a:	2000      	movs	r0, #0
    fd5c:	f88d 0000 	strb.w	r0, [sp]
    fd60:	f88d 0002 	strb.w	r0, [sp, #2]
    fd64:	2003      	movs	r0, #3
    fd66:	f88d 0001 	strb.w	r0, [sp, #1]
    fd6a:	f814 0b01 	ldrb.w	r0, [r4], #1
    fd6e:	f88d 0003 	strb.w	r0, [sp, #3]
    fd72:	4668      	mov	r0, sp
    fd74:	9401      	str	r4, [sp, #4]
    fd76:	f000 f8d7 	bl	ff28 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    fd7a:	bd1c      	pop	{r2, r3, r4, pc}

0000fd7c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fd7c:	b51c      	push	{r2, r3, r4, lr}
    fd7e:	8801      	ldrh	r1, [r0, #0]
    fd80:	f8ad 1000 	strh.w	r1, [sp]
    fd84:	8841      	ldrh	r1, [r0, #2]
    fd86:	f8ad 1002 	strh.w	r1, [sp, #2]
    fd8a:	8801      	ldrh	r1, [r0, #0]
    fd8c:	f8ad 1004 	strh.w	r1, [sp, #4]
    fd90:	8840      	ldrh	r0, [r0, #2]
    fd92:	f8ad 0006 	strh.w	r0, [sp, #6]
    fd96:	4668      	mov	r0, sp
    fd98:	f7fa fbd4 	bl	a544 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x300>
    fd9c:	bd1c      	pop	{r2, r3, r4, pc}

0000fd9e <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fd9e:	b510      	push	{r4, lr}
    fda0:	f7f5 fabc 	bl	531c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fda4:	2000      	movs	r0, #0
    fda6:	bd10      	pop	{r4, pc}

0000fda8 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    fda8:	b510      	push	{r4, lr}
    fdaa:	460c      	mov	r4, r1
    fdac:	2100      	movs	r1, #0
    fdae:	f7fd fb1b 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fdb2:	b118      	cbz	r0, fdbc <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    fdb4:	2c02      	cmp	r4, #2
    fdb6:	d903      	bls.n	fdc0 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    fdb8:	2012      	movs	r0, #18
    fdba:	bd10      	pop	{r4, pc}
    fdbc:	2002      	movs	r0, #2
    fdbe:	bd10      	pop	{r4, pc}
    fdc0:	f014 0101 	ands.w	r1, r4, #1
    fdc4:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    fdc8:	f3c4 0240 	ubfx	r2, r4, #1, #1
    fdcc:	f880 221c 	strb.w	r2, [r0, #540]	; 0x21c
    fdd0:	d004      	beq.n	fddc <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fdd2:	f890 121a 	ldrb.w	r1, [r0, #538]	; 0x21a
    fdd6:	b109      	cbz	r1, fddc <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fdd8:	f7fe fe74 	bl	eac4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    fddc:	2000      	movs	r0, #0
    fdde:	bd10      	pop	{r4, pc}

0000fde0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fde0:	b51c      	push	{r2, r3, r4, lr}
    fde2:	460c      	mov	r4, r1
    fde4:	4669      	mov	r1, sp
    fde6:	f7fd fd76 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fdea:	2800      	cmp	r0, #0
    fdec:	d105      	bne.n	fdfa <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    fdee:	2100      	movs	r1, #0
    fdf0:	4622      	mov	r2, r4
    fdf2:	9801      	ldr	r0, [sp, #4]
    fdf4:	f000 faee 	bl	103d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    fdf8:	2000      	movs	r0, #0
    fdfa:	bd1c      	pop	{r2, r3, r4, pc}

0000fdfc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    fdfc:	b510      	push	{r4, lr}
    fdfe:	4604      	mov	r4, r0
    fe00:	7800      	ldrb	r0, [r0, #0]
    fe02:	28ff      	cmp	r0, #255	; 0xff
    fe04:	d009      	beq.n	fe1a <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    fe06:	2101      	movs	r1, #1
    fe08:	f7fd faee 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe0c:	b118      	cbz	r0, fe16 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    fe0e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    fe12:	8441      	strh	r1, [r0, #34]	; 0x22
    fe14:	e005      	b.n	fe22 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    fe16:	2042      	movs	r0, #66	; 0x42
    fe18:	bd10      	pop	{r4, pc}
    fe1a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fe1e:	f7f7 fdfb 	bl	7a18 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    fe22:	2000      	movs	r0, #0
    fe24:	bd10      	pop	{r4, pc}

0000fe26 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fe26:	b510      	push	{r4, lr}
    fe28:	4604      	mov	r4, r0
    fe2a:	2000      	movs	r0, #0
    fe2c:	f000 fa06 	bl	1023c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fe30:	b128      	cbz	r0, fe3e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    fe32:	4621      	mov	r1, r4
    fe34:	2000      	movs	r0, #0
    fe36:	f7f5 fa4d 	bl	52d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fe3a:	2000      	movs	r0, #0
    fe3c:	bd10      	pop	{r4, pc}
    fe3e:	200c      	movs	r0, #12
    fe40:	bd10      	pop	{r4, pc}

0000fe42 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fe42:	b510      	push	{r4, lr}
    fe44:	7800      	ldrb	r0, [r0, #0]
    fe46:	b100      	cbz	r0, fe4a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    fe48:	2001      	movs	r0, #1
    fe4a:	f7f7 fe0f 	bl	7a6c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    fe4e:	2000      	movs	r0, #0
    fe50:	bd10      	pop	{r4, pc}

0000fe52 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fe52:	f7fa bad7 	b.w	a404 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

0000fe56 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    fe56:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fe5a:	4606      	mov	r6, r0
    fe5c:	7845      	ldrb	r5, [r0, #1]
    fe5e:	7800      	ldrb	r0, [r0, #0]
    fe60:	2101      	movs	r1, #1
    fe62:	f7fd fac1 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe66:	0004      	movs	r4, r0
    fe68:	d01e      	beq.n	fea8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    fe6a:	f7fe fbcc 	bl	e606 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    fe6e:	78f1      	ldrb	r1, [r6, #3]
    fe70:	4281      	cmp	r1, r0
    fe72:	d800      	bhi.n	fe76 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    fe74:	4608      	mov	r0, r1
    fe76:	4607      	mov	r7, r0
    fe78:	2d04      	cmp	r5, #4
    fe7a:	d018      	beq.n	feae <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    fe7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fe7e:	f7fd fbfe 	bl	d67e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fe82:	4438      	add	r0, r7
    fe84:	b281      	uxth	r1, r0
    fe86:	4620      	mov	r0, r4
    fe88:	2201      	movs	r2, #1
    fe8a:	f000 f9e9 	bl	10260 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    fe8e:	2800      	cmp	r0, #0
    fe90:	d10b      	bne.n	feaa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fe92:	2d03      	cmp	r5, #3
    fe94:	d000      	beq.n	fe98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fe96:	b1df      	cbz	r7, fed0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fe98:	4620      	mov	r0, r4
    fe9a:	f7fe fc52 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fe9e:	7871      	ldrb	r1, [r6, #1]
    fea0:	2903      	cmp	r1, #3
    fea2:	d010      	beq.n	fec6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fea4:	b9a0      	cbnz	r0, fed0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fea6:	e004      	b.n	feb2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    fea8:	2042      	movs	r0, #66	; 0x42
    feaa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    feae:	b97f      	cbnz	r7, fed0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    feb0:	e7f2      	b.n	fe98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    feb2:	2904      	cmp	r1, #4
    feb4:	d107      	bne.n	fec6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    feb6:	4620      	mov	r0, r4
    feb8:	f7fe fe01 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    febc:	b140      	cbz	r0, fed0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    febe:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fec0:	f7fd fbac 	bl	d61c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    fec4:	b120      	cbz	r0, fed0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fec6:	2d01      	cmp	r5, #1
    fec8:	d004      	beq.n	fed4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    feca:	2d03      	cmp	r5, #3
    fecc:	d002      	beq.n	fed4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    fece:	e00e      	b.n	feee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    fed0:	2012      	movs	r0, #18
    fed2:	e7ea      	b.n	feaa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fed4:	4620      	mov	r0, r4
    fed6:	f7fe fc34 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    feda:	b108      	cbz	r0, fee0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    fedc:	2200      	movs	r2, #0
    fede:	e002      	b.n	fee6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fee0:	2d01      	cmp	r5, #1
    fee2:	d013      	beq.n	ff0c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    fee4:	2201      	movs	r2, #1
    fee6:	4668      	mov	r0, sp
    fee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    feea:	f7fd fb2f 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    feee:	2d04      	cmp	r5, #4
    fef0:	d018      	beq.n	ff24 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fef2:	6872      	ldr	r2, [r6, #4]
    fef4:	463b      	mov	r3, r7
    fef6:	2101      	movs	r1, #1
    fef8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fefa:	f7fd fb5b 	bl	d5b4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fefe:	b138      	cbz	r0, ff10 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    ff00:	7870      	ldrb	r0, [r6, #1]
    ff02:	2802      	cmp	r0, #2
    ff04:	d006      	beq.n	ff14 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    ff06:	2803      	cmp	r0, #3
    ff08:	d004      	beq.n	ff14 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    ff0a:	e00b      	b.n	ff24 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    ff0c:	2202      	movs	r2, #2
    ff0e:	e7ea      	b.n	fee6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    ff10:	2007      	movs	r0, #7
    ff12:	e7ca      	b.n	feaa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ff14:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff16:	f7fd fbb2 	bl	d67e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ff1a:	4602      	mov	r2, r0
    ff1c:	2101      	movs	r1, #1
    ff1e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff20:	f7fd fb8a 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ff24:	2000      	movs	r0, #0
    ff26:	e7c0      	b.n	feaa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000ff28 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    ff28:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ff2c:	4607      	mov	r7, r0
    ff2e:	7845      	ldrb	r5, [r0, #1]
    ff30:	78c6      	ldrb	r6, [r0, #3]
    ff32:	7800      	ldrb	r0, [r0, #0]
    ff34:	2101      	movs	r1, #1
    ff36:	f7fd fa57 	bl	d3e8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff3a:	0004      	movs	r4, r0
    ff3c:	d003      	beq.n	ff46 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    ff3e:	f7fe fc02 	bl	e746 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ff42:	b118      	cbz	r0, ff4c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    ff44:	e003      	b.n	ff4e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    ff46:	2042      	movs	r0, #66	; 0x42
    ff48:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ff4c:	2600      	movs	r6, #0
    ff4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff50:	f7fd fb99 	bl	d686 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    ff54:	4430      	add	r0, r6
    ff56:	b281      	uxth	r1, r0
    ff58:	4688      	mov	r8, r1
    ff5a:	4620      	mov	r0, r4
    ff5c:	2201      	movs	r2, #1
    ff5e:	f000 f97f 	bl	10260 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    ff62:	2800      	cmp	r0, #0
    ff64:	d1f0      	bne.n	ff48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ff66:	2d04      	cmp	r5, #4
    ff68:	d008      	beq.n	ff7c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    ff6a:	2d03      	cmp	r5, #3
    ff6c:	d00a      	beq.n	ff84 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    ff6e:	b12e      	cbz	r6, ff7c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    ff70:	4620      	mov	r0, r4
    ff72:	f7fe fda4 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ff76:	b118      	cbz	r0, ff80 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    ff78:	200c      	movs	r0, #12
    ff7a:	e7e5      	b.n	ff48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ff7c:	2012      	movs	r0, #18
    ff7e:	e7e3      	b.n	ff48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ff80:	2d01      	cmp	r5, #1
    ff82:	d10c      	bne.n	ff9e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    ff84:	4620      	mov	r0, r4
    ff86:	f7fe fbdc 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ff8a:	b108      	cbz	r0, ff90 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    ff8c:	2204      	movs	r2, #4
    ff8e:	e002      	b.n	ff96 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    ff90:	2d01      	cmp	r5, #1
    ff92:	d010      	beq.n	ffb6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    ff94:	2205      	movs	r2, #5
    ff96:	4668      	mov	r0, sp
    ff98:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ff9a:	f7fd fad7 	bl	d54c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ff9e:	687a      	ldr	r2, [r7, #4]
    ffa0:	4633      	mov	r3, r6
    ffa2:	2100      	movs	r1, #0
    ffa4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffa6:	f7fd fb05 	bl	d5b4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    ffaa:	b130      	cbz	r0, ffba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    ffac:	2d02      	cmp	r5, #2
    ffae:	d006      	beq.n	ffbe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    ffb0:	2d03      	cmp	r5, #3
    ffb2:	d004      	beq.n	ffbe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    ffb4:	e008      	b.n	ffc8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    ffb6:	2206      	movs	r2, #6
    ffb8:	e7ed      	b.n	ff96 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    ffba:	2007      	movs	r0, #7
    ffbc:	e7c4      	b.n	ff48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ffbe:	4642      	mov	r2, r8
    ffc0:	2100      	movs	r1, #0
    ffc2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffc4:	f7fd fb38 	bl	d638 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ffc8:	2000      	movs	r0, #0
    ffca:	e7bd      	b.n	ff48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000ffcc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    ffcc:	b510      	push	{r4, lr}
    ffce:	4604      	mov	r4, r0
    ffd0:	8880      	ldrh	r0, [r0, #4]
    ffd2:	b128      	cbz	r0, ffe0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ffd4:	2801      	cmp	r0, #1
    ffd6:	d003      	beq.n	ffe0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ffd8:	2802      	cmp	r0, #2
    ffda:	d001      	beq.n	ffe0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ffdc:	2012      	movs	r0, #18
    ffde:	bd10      	pop	{r4, pc}
    ffe0:	78e0      	ldrb	r0, [r4, #3]
    ffe2:	f000 f9d4 	bl	1038e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    ffe6:	b148      	cbz	r0, fffc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ffe8:	78a0      	ldrb	r0, [r4, #2]
    ffea:	f000 f9d0 	bl	1038e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    ffee:	b128      	cbz	r0, fffc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fff0:	4620      	mov	r0, r4
    fff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fff6:	2101      	movs	r1, #1
    fff8:	f000 b88e 	b.w	10118 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fffc:	2011      	movs	r0, #17
    fffe:	bd10      	pop	{r4, pc}

00010000 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10000:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10002:	460c      	mov	r4, r1
   10004:	4605      	mov	r5, r0
   10006:	8800      	ldrh	r0, [r0, #0]
   10008:	4669      	mov	r1, sp
   1000a:	f7fd fc64 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1000e:	2800      	cmp	r0, #0
   10010:	d106      	bne.n	10020 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10012:	9801      	ldr	r0, [sp, #4]
   10014:	8829      	ldrh	r1, [r5, #0]
   10016:	8021      	strh	r1, [r4, #0]
   10018:	f8b0 00c0 	ldrh.w	r0, [r0, #192]	; 0xc0
   1001c:	8060      	strh	r0, [r4, #2]
   1001e:	2000      	movs	r0, #0
   10020:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010022 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10022:	b510      	push	{r4, lr}
   10024:	4604      	mov	r4, r0
   10026:	4601      	mov	r1, r0
   10028:	2000      	movs	r0, #0
   1002a:	f7f5 f93b 	bl	52a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1002e:	b910      	cbnz	r0, 10036 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10030:	2000      	movs	r0, #0
   10032:	6020      	str	r0, [r4, #0]
   10034:	80a0      	strh	r0, [r4, #4]
   10036:	2000      	movs	r0, #0
   10038:	bd10      	pop	{r4, pc}

0001003a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   1003a:	b50e      	push	{r1, r2, r3, lr}
   1003c:	8800      	ldrh	r0, [r0, #0]
   1003e:	4669      	mov	r1, sp
   10040:	f7fd fc49 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10044:	b960      	cbnz	r0, 10060 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   10046:	9801      	ldr	r0, [sp, #4]
   10048:	f000 fa1d 	bl	10486 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
   1004c:	b140      	cbz	r0, 10060 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   1004e:	9801      	ldr	r0, [sp, #4]
   10050:	4601      	mov	r1, r0
   10052:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
   10056:	3080      	adds	r0, #128	; 0x80
   10058:	f501 719d 	add.w	r1, r1, #314	; 0x13a
   1005c:	b962      	cbnz	r2, 10078 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   1005e:	e001      	b.n	10064 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   10060:	2002      	movs	r0, #2
   10062:	bd0e      	pop	{r1, r2, r3, pc}
   10064:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
   10068:	f88d 2008 	strb.w	r2, [sp, #8]
   1006c:	9a02      	ldr	r2, [sp, #8]
   1006e:	9202      	str	r2, [sp, #8]
   10070:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10074:	2201      	movs	r2, #1
   10076:	b10b      	cbz	r3, 1007c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   10078:	203a      	movs	r0, #58	; 0x3a
   1007a:	bd0e      	pop	{r1, r2, r3, pc}
   1007c:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
   10080:	079b      	lsls	r3, r3, #30
   10082:	d006      	beq.n	10092 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
   10084:	2203      	movs	r2, #3
   10086:	3056      	adds	r0, #86	; 0x56
   10088:	9901      	ldr	r1, [sp, #4]
   1008a:	f7f6 f9e1 	bl	6450 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1008e:	2000      	movs	r0, #0
   10090:	bd0e      	pop	{r1, r2, r3, pc}
   10092:	700a      	strb	r2, [r1, #0]
   10094:	4668      	mov	r0, sp
   10096:	f7fd ffb7 	bl	e008 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   1009a:	e7f8      	b.n	1008e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>

0001009c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1009c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1009e:	460c      	mov	r4, r1
   100a0:	4605      	mov	r5, r0
   100a2:	8800      	ldrh	r0, [r0, #0]
   100a4:	4669      	mov	r1, sp
   100a6:	f7fd fc16 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100aa:	b108      	cbz	r0, 100b0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   100ac:	2002      	movs	r0, #2
   100ae:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   100b0:	78a8      	ldrb	r0, [r5, #2]
   100b2:	b130      	cbz	r0, 100c2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   100b4:	f000 f9e4 	bl	10480 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   100b8:	70a0      	strb	r0, [r4, #2]
   100ba:	8828      	ldrh	r0, [r5, #0]
   100bc:	8020      	strh	r0, [r4, #0]
   100be:	2000      	movs	r0, #0
   100c0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   100c2:	9801      	ldr	r0, [sp, #4]
   100c4:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   100c8:	e7f6      	b.n	100b8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

000100ca <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   100ca:	b510      	push	{r4, lr}
   100cc:	f7fa fa7a 	bl	a5c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   100d0:	2000      	movs	r0, #0
   100d2:	bd10      	pop	{r4, pc}

000100d4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   100d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   100d8:	4604      	mov	r4, r0
   100da:	8840      	ldrh	r0, [r0, #2]
   100dc:	460d      	mov	r5, r1
   100de:	b1b8      	cbz	r0, 10110 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   100e0:	8820      	ldrh	r0, [r4, #0]
   100e2:	4669      	mov	r1, sp
   100e4:	f7fd fbf7 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100e8:	2800      	cmp	r0, #0
   100ea:	d10f      	bne.n	1010c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   100ec:	8820      	ldrh	r0, [r4, #0]
   100ee:	8028      	strh	r0, [r5, #0]
   100f0:	9e01      	ldr	r6, [sp, #4]
   100f2:	f106 0510 	add.w	r5, r6, #16
   100f6:	3680      	adds	r6, #128	; 0x80
   100f8:	682f      	ldr	r7, [r5, #0]
   100fa:	8862      	ldrh	r2, [r4, #2]
   100fc:	4639      	mov	r1, r7
   100fe:	4630      	mov	r0, r6
   10100:	f7fd fd1a 	bl	db38 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10104:	6828      	ldr	r0, [r5, #0]
   10106:	42b8      	cmp	r0, r7
   10108:	d1f6      	bne.n	100f8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1010a:	2000      	movs	r0, #0
   1010c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10110:	2012      	movs	r0, #18
   10112:	e7fb      	b.n	1010c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010114 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10114:	f000 b863 	b.w	101de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010118 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1011c:	b086      	sub	sp, #24
   1011e:	4689      	mov	r9, r1
   10120:	4607      	mov	r7, r0
   10122:	8800      	ldrh	r0, [r0, #0]
   10124:	a901      	add	r1, sp, #4
   10126:	f7fd fbd6 	bl	d8d6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1012a:	2800      	cmp	r0, #0
   1012c:	d136      	bne.n	1019c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   1012e:	9802      	ldr	r0, [sp, #8]
   10130:	4601      	mov	r1, r0
   10132:	4688      	mov	r8, r1
   10134:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
   10138:	f500 7494 	add.w	r4, r0, #296	; 0x128
   1013c:	f88d 1000 	strb.w	r1, [sp]
   10140:	9900      	ldr	r1, [sp, #0]
   10142:	9100      	str	r1, [sp, #0]
   10144:	f89d 1000 	ldrb.w	r1, [sp]
   10148:	3080      	adds	r0, #128	; 0x80
   1014a:	b109      	cbz	r1, 10150 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   1014c:	2601      	movs	r6, #1
   1014e:	e000      	b.n	10152 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   10150:	2600      	movs	r6, #0
   10152:	7d81      	ldrb	r1, [r0, #22]
   10154:	2923      	cmp	r1, #35	; 0x23
   10156:	d100      	bne.n	1015a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10158:	b13e      	cbz	r6, 1016a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   1015a:	2500      	movs	r5, #0
   1015c:	3064      	adds	r0, #100	; 0x64
   1015e:	2108      	movs	r1, #8
   10160:	4682      	mov	sl, r0
   10162:	f7ff fba4 	bl	f8ae <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
   10166:	b110      	cbz	r0, 1016e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10168:	e007      	b.n	1017a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   1016a:	2501      	movs	r5, #1
   1016c:	e7f6      	b.n	1015c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   1016e:	210b      	movs	r1, #11
   10170:	4650      	mov	r0, sl
   10172:	f7ff fb9c 	bl	f8ae <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
   10176:	b900      	cbnz	r0, 1017a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10178:	b17d      	cbz	r5, 1019a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   1017a:	a804      	add	r0, sp, #16
   1017c:	9000      	str	r0, [sp, #0]
   1017e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10182:	ab03      	add	r3, sp, #12
   10184:	463a      	mov	r2, r7
   10186:	4641      	mov	r1, r8
   10188:	f000 f95a 	bl	10440 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   1018c:	0005      	movs	r5, r0
   1018e:	d105      	bne.n	1019c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10190:	340c      	adds	r4, #12
   10192:	20ff      	movs	r0, #255	; 0xff
   10194:	7060      	strb	r0, [r4, #1]
   10196:	b936      	cbnz	r6, 101a6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10198:	e003      	b.n	101a2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   1019a:	201a      	movs	r0, #26
   1019c:	b006      	add	sp, #24
   1019e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101a2:	7820      	ldrb	r0, [r4, #0]
   101a4:	b108      	cbz	r0, 101aa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   101a6:	253a      	movs	r5, #58	; 0x3a
   101a8:	e012      	b.n	101d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   101aa:	f884 9000 	strb.w	r9, [r4]
   101ae:	f89d 000c 	ldrb.w	r0, [sp, #12]
   101b2:	70a0      	strb	r0, [r4, #2]
   101b4:	f89d 1010 	ldrb.w	r1, [sp, #16]
   101b8:	70e1      	strb	r1, [r4, #3]
   101ba:	f88d 0000 	strb.w	r0, [sp]
   101be:	f88d 1001 	strb.w	r1, [sp, #1]
   101c2:	88b8      	ldrh	r0, [r7, #4]
   101c4:	f8ad 0002 	strh.w	r0, [sp, #2]
   101c8:	4669      	mov	r1, sp
   101ca:	4640      	mov	r0, r8
   101cc:	f7fd fc53 	bl	da76 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   101d0:	2000      	movs	r0, #0
   101d2:	7060      	strb	r0, [r4, #1]
   101d4:	4628      	mov	r0, r5
   101d6:	e7e1      	b.n	1019c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

000101d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   101d8:	2008      	movs	r0, #8
   101da:	f7fa ba59 	b.w	a690 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

000101de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   101de:	b510      	push	{r4, lr}
   101e0:	f7fd fadc 	bl	d79c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   101e4:	f7f5 fe2e 	bl	5e44 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   101e8:	f7fa fa74 	bl	a6d4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   101ec:	f7fd ff2f 	bl	e04e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   101f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101f4:	f7f9 bfea 	b.w	a1cc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>

000101f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   101f8:	f7f8 b898 	b.w	832c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   101fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10200:	4288      	cmp	r0, r1
   10202:	d303      	bcc.n	1020c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   10204:	f640 0148 	movw	r1, #2120	; 0x848
   10208:	4288      	cmp	r0, r1
   1020a:	d300      	bcc.n	1020e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   1020c:	4608      	mov	r0, r1
   1020e:	b280      	uxth	r0, r0
   10210:	4770      	bx	lr
   10212:	07c1      	lsls	r1, r0, #31
   10214:	d001      	beq.n	1021a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   10216:	2001      	movs	r0, #1
   10218:	4770      	bx	lr
   1021a:	0780      	lsls	r0, r0, #30
   1021c:	d501      	bpl.n	10222 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   1021e:	2002      	movs	r0, #2
   10220:	4770      	bx	lr
   10222:	2000      	movs	r0, #0
   10224:	4770      	bx	lr
   10226:	b510      	push	{r4, lr}
   10228:	2801      	cmp	r0, #1
   1022a:	d006      	beq.n	1023a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   1022c:	2802      	cmp	r0, #2
   1022e:	d004      	beq.n	1023a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10230:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   10234:	2006      	movs	r0, #6
   10236:	f7f4 f999 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1023a:	bd10      	pop	{r4, pc}
   1023c:	b510      	push	{r4, lr}
   1023e:	f7f9 ff43 	bl	a0c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   10242:	b158      	cbz	r0, 1025c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10244:	f7f9 ffe2 	bl	a20c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   10248:	4604      	mov	r4, r0
   1024a:	f7fe fa7c 	bl	e746 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1024e:	b918      	cbnz	r0, 10258 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   10250:	4620      	mov	r0, r4
   10252:	f7fe fa6e 	bl	e732 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10256:	b108      	cbz	r0, 1025c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10258:	2000      	movs	r0, #0
   1025a:	bd10      	pop	{r4, pc}
   1025c:	2001      	movs	r0, #1
   1025e:	bd10      	pop	{r4, pc}
   10260:	b570      	push	{r4, r5, r6, lr}
   10262:	460c      	mov	r4, r1
   10264:	4605      	mov	r5, r0
   10266:	b112      	cbz	r2, 1026e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   10268:	291f      	cmp	r1, #31
   1026a:	d80c      	bhi.n	10286 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   1026c:	e016      	b.n	1029c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   1026e:	f7f4 fe57 	bl	4f20 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10272:	42a0      	cmp	r0, r4
   10274:	d201      	bcs.n	1027a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   10276:	2007      	movs	r0, #7
   10278:	bd70      	pop	{r4, r5, r6, pc}
   1027a:	4628      	mov	r0, r5
   1027c:	f7fe fa61 	bl	e742 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10280:	b118      	cbz	r0, 1028a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10282:	2c1f      	cmp	r4, #31
   10284:	d901      	bls.n	1028a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10286:	2012      	movs	r0, #18
   10288:	bd70      	pop	{r4, r5, r6, pc}
   1028a:	4628      	mov	r0, r5
   1028c:	f7fe fa62 	bl	e754 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10290:	b130      	cbz	r0, 102a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   10292:	4621      	mov	r1, r4
   10294:	4628      	mov	r0, r5
   10296:	f7fe fa29 	bl	e6ec <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1029a:	b118      	cbz	r0, 102a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   1029c:	2000      	movs	r0, #0
   1029e:	bd70      	pop	{r4, r5, r6, pc}
   102a0:	2042      	movs	r0, #66	; 0x42
   102a2:	bd70      	pop	{r4, r5, r6, pc}
   102a4:	2045      	movs	r0, #69	; 0x45
   102a6:	bd70      	pop	{r4, r5, r6, pc}
   102a8:	b510      	push	{r4, lr}
   102aa:	4604      	mov	r4, r0
   102ac:	7840      	ldrb	r0, [r0, #1]
   102ae:	06c1      	lsls	r1, r0, #27
   102b0:	d51c      	bpl.n	102ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   102b2:	07c0      	lsls	r0, r0, #31
   102b4:	d00b      	beq.n	102ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   102b6:	f7fa f9bf 	bl	a638 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   102ba:	b1b8      	cbz	r0, 102ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   102bc:	7860      	ldrb	r0, [r4, #1]
   102be:	06c1      	lsls	r1, r0, #27
   102c0:	d405      	bmi.n	102ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   102c2:	0700      	lsls	r0, r0, #28
   102c4:	d503      	bpl.n	102ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   102c6:	7d20      	ldrb	r0, [r4, #20]
   102c8:	2802      	cmp	r0, #2
   102ca:	d10f      	bne.n	102ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   102cc:	e010      	b.n	102f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   102ce:	7d20      	ldrb	r0, [r4, #20]
   102d0:	2802      	cmp	r0, #2
   102d2:	d001      	beq.n	102d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   102d4:	7ea0      	ldrb	r0, [r4, #26]
   102d6:	b948      	cbnz	r0, 102ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   102d8:	7860      	ldrb	r0, [r4, #1]
   102da:	0700      	lsls	r0, r0, #28
   102dc:	d408      	bmi.n	102f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   102de:	f8d4 0005 	ldr.w	r0, [r4, #5]
   102e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   102e6:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   102ea:	d201      	bcs.n	102f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   102ec:	2011      	movs	r0, #17
   102ee:	bd10      	pop	{r4, pc}
   102f0:	2000      	movs	r0, #0
   102f2:	bd10      	pop	{r4, pc}
   102f4:	b538      	push	{r3, r4, r5, lr}
   102f6:	4604      	mov	r4, r0
   102f8:	7800      	ldrb	r0, [r0, #0]
   102fa:	28ef      	cmp	r0, #239	; 0xef
   102fc:	d843      	bhi.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   102fe:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10302:	f8ad 0000 	strh.w	r0, [sp]
   10306:	9800      	ldr	r0, [sp, #0]
   10308:	f000 f917 	bl	1053a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x342>
   1030c:	b3a0      	cbz	r0, 10378 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   1030e:	7861      	ldrb	r1, [r4, #1]
   10310:	0708      	lsls	r0, r1, #28
   10312:	d40b      	bmi.n	1032c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   10314:	f8d4 0002 	ldr.w	r0, [r4, #2]
   10318:	f8d4 3005 	ldr.w	r3, [r4, #5]
   1031c:	0a02      	lsrs	r2, r0, #8
   1031e:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   10322:	d830      	bhi.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10324:	2220      	movs	r2, #32
   10326:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   1032a:	d82c      	bhi.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1032c:	7a60      	ldrb	r0, [r4, #9]
   1032e:	b318      	cbz	r0, 10378 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   10330:	2807      	cmp	r0, #7
   10332:	d828      	bhi.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10334:	7aa0      	ldrb	r0, [r4, #10]
   10336:	b128      	cbz	r0, 10344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10338:	2801      	cmp	r0, #1
   1033a:	d003      	beq.n	10344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   1033c:	2802      	cmp	r0, #2
   1033e:	d001      	beq.n	10344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10340:	2803      	cmp	r0, #3
   10342:	d120      	bne.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10344:	074a      	lsls	r2, r1, #29
   10346:	d403      	bmi.n	10350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10348:	2802      	cmp	r0, #2
   1034a:	d001      	beq.n	10350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   1034c:	2803      	cmp	r0, #3
   1034e:	d105      	bne.n	1035c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   10350:	7ae0      	ldrb	r0, [r4, #11]
   10352:	b108      	cbz	r0, 10358 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   10354:	2801      	cmp	r0, #1
   10356:	d116      	bne.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10358:	0748      	lsls	r0, r1, #29
   1035a:	d407      	bmi.n	1036c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   1035c:	7ca0      	ldrb	r0, [r4, #18]
   1035e:	b128      	cbz	r0, 1036c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10360:	2801      	cmp	r0, #1
   10362:	d003      	beq.n	1036c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10364:	2802      	cmp	r0, #2
   10366:	d001      	beq.n	1036c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10368:	2803      	cmp	r0, #3
   1036a:	d10c      	bne.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1036c:	06c8      	lsls	r0, r1, #27
   1036e:	7d20      	ldrb	r0, [r4, #20]
   10370:	d503      	bpl.n	1037a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   10372:	2801      	cmp	r0, #1
   10374:	d107      	bne.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10376:	e002      	b.n	1037e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   10378:	e005      	b.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1037a:	2802      	cmp	r0, #2
   1037c:	d003      	beq.n	10386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1037e:	7e20      	ldrb	r0, [r4, #24]
   10380:	b118      	cbz	r0, 1038a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10382:	2801      	cmp	r0, #1
   10384:	d001      	beq.n	1038a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10386:	2012      	movs	r0, #18
   10388:	bd38      	pop	{r3, r4, r5, pc}
   1038a:	2000      	movs	r0, #0
   1038c:	bd38      	pop	{r3, r4, r5, pc}
   1038e:	b510      	push	{r4, lr}
   10390:	0004      	movs	r4, r0
   10392:	d005      	beq.n	103a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10394:	f7fa f98e 	bl	a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10398:	4384      	bics	r4, r0
   1039a:	d001      	beq.n	103a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   1039c:	2000      	movs	r0, #0
   1039e:	bd10      	pop	{r4, pc}
   103a0:	2001      	movs	r0, #1
   103a2:	bd10      	pop	{r4, pc}
   103a4:	28fb      	cmp	r0, #251	; 0xfb
   103a6:	d803      	bhi.n	103b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   103a8:	f640 0048 	movw	r0, #2120	; 0x848
   103ac:	4281      	cmp	r1, r0
   103ae:	d901      	bls.n	103b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   103b0:	2011      	movs	r0, #17
   103b2:	4770      	bx	lr
   103b4:	2000      	movs	r0, #0
   103b6:	4770      	bx	lr
   103b8:	381b      	subs	r0, #27
   103ba:	28e1      	cmp	r0, #225	; 0xe1
   103bc:	d206      	bcs.n	103cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   103be:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   103c2:	d303      	bcc.n	103cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   103c4:	f244 2090 	movw	r0, #17040	; 0x4290
   103c8:	4281      	cmp	r1, r0
   103ca:	d901      	bls.n	103d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   103cc:	2012      	movs	r0, #18
   103ce:	4770      	bx	lr
   103d0:	2000      	movs	r0, #0
   103d2:	4770      	bx	lr
   103d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103d8:	4606      	mov	r6, r0
   103da:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   103de:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   103e2:	4615      	mov	r5, r2
   103e4:	302c      	adds	r0, #44	; 0x2c
   103e6:	f7f7 fb47 	bl	7a78 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   103ea:	4680      	mov	r8, r0
   103ec:	2102      	movs	r1, #2
   103ee:	f7fd fb12 	bl	da16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   103f2:	4287      	cmp	r7, r0
   103f4:	d200      	bcs.n	103f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   103f6:	4638      	mov	r0, r7
   103f8:	4607      	mov	r7, r0
   103fa:	2102      	movs	r1, #2
   103fc:	4640      	mov	r0, r8
   103fe:	f7fd fb0a 	bl	da16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10402:	4284      	cmp	r4, r0
   10404:	d200      	bcs.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   10406:	4620      	mov	r0, r4
   10408:	8831      	ldrh	r1, [r6, #0]
   1040a:	8029      	strh	r1, [r5, #0]
   1040c:	2f1b      	cmp	r7, #27
   1040e:	d913      	bls.n	10438 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   10410:	2ffb      	cmp	r7, #251	; 0xfb
   10412:	d300      	bcc.n	10416 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   10414:	27fb      	movs	r7, #251	; 0xfb
   10416:	806f      	strh	r7, [r5, #2]
   10418:	281b      	cmp	r0, #27
   1041a:	d90f      	bls.n	1043c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   1041c:	28fb      	cmp	r0, #251	; 0xfb
   1041e:	d300      	bcc.n	10422 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   10420:	20fb      	movs	r0, #251	; 0xfb
   10422:	80e8      	strh	r0, [r5, #6]
   10424:	4640      	mov	r0, r8
   10426:	f7ff fee9 	bl	101fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   1042a:	80a8      	strh	r0, [r5, #4]
   1042c:	4640      	mov	r0, r8
   1042e:	f7ff fee5 	bl	101fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10432:	8128      	strh	r0, [r5, #8]
   10434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10438:	271b      	movs	r7, #27
   1043a:	e7ec      	b.n	10416 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   1043c:	201b      	movs	r0, #27
   1043e:	e7f0      	b.n	10422 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   10440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10444:	7890      	ldrb	r0, [r2, #2]
   10446:	9e06      	ldr	r6, [sp, #24]
   10448:	461d      	mov	r5, r3
   1044a:	4614      	mov	r4, r2
   1044c:	b908      	cbnz	r0, 10452 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   1044e:	f7fa f931 	bl	a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10452:	78e4      	ldrb	r4, [r4, #3]
   10454:	4607      	mov	r7, r0
   10456:	b914      	cbnz	r4, 1045e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   10458:	f7fa f92c 	bl	a6b4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1045c:	4604      	mov	r4, r0
   1045e:	b16f      	cbz	r7, 1047c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10460:	b164      	cbz	r4, 1047c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10462:	4638      	mov	r0, r7
   10464:	f7ff fed5 	bl	10212 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10468:	4620      	mov	r0, r4
   1046a:	f7ff fed2 	bl	10212 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1046e:	b12f      	cbz	r7, 1047c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10470:	b124      	cbz	r4, 1047c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10472:	702f      	strb	r7, [r5, #0]
   10474:	7034      	strb	r4, [r6, #0]
   10476:	2000      	movs	r0, #0
   10478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1047c:	2009      	movs	r0, #9
   1047e:	e7fb      	b.n	10478 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   10480:	207f      	movs	r0, #127	; 0x7f
   10482:	f000 b83c 	b.w	104fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   10486:	b508      	push	{r3, lr}
   10488:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
   1048c:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   10490:	f88d 0000 	strb.w	r0, [sp]
   10494:	9800      	ldr	r0, [sp, #0]
   10496:	9000      	str	r0, [sp, #0]
   10498:	f89d 0000 	ldrb.w	r0, [sp]
   1049c:	b100      	cbz	r0, 104a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   1049e:	2001      	movs	r0, #1
   104a0:	1e40      	subs	r0, r0, #1
   104a2:	4208      	tst	r0, r1
   104a4:	d003      	beq.n	104ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   104a6:	2904      	cmp	r1, #4
   104a8:	d001      	beq.n	104ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   104aa:	2001      	movs	r0, #1
   104ac:	bd08      	pop	{r3, pc}
   104ae:	2000      	movs	r0, #0
   104b0:	bd08      	pop	{r3, pc}
   104b2:	b570      	push	{r4, r5, r6, lr}
   104b4:	4605      	mov	r5, r0
   104b6:	f7fe f94d 	bl	e754 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   104ba:	b170      	cbz	r0, 104da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   104bc:	4628      	mov	r0, r5
   104be:	f7fe fafe 	bl	eabe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   104c2:	2800      	cmp	r0, #0
   104c4:	d008      	beq.n	104d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   104c6:	4628      	mov	r0, r5
   104c8:	f7fe faf6 	bl	eab8 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   104cc:	4604      	mov	r4, r0
   104ce:	4628      	mov	r0, r5
   104d0:	f7fe facc 	bl	ea6c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   104d4:	b118      	cbz	r0, 104de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   104d6:	200c      	movs	r0, #12
   104d8:	bd70      	pop	{r4, r5, r6, pc}
   104da:	2042      	movs	r0, #66	; 0x42
   104dc:	bd70      	pop	{r4, r5, r6, pc}
   104de:	b164      	cbz	r4, 104fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   104e0:	8820      	ldrh	r0, [r4, #0]
   104e2:	f7fd f928 	bl	d736 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   104e6:	8820      	ldrh	r0, [r4, #0]
   104e8:	2100      	movs	r1, #0
   104ea:	f7f4 fac1 	bl	4a70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   104ee:	b120      	cbz	r0, 104fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   104f0:	f241 6154 	movw	r1, #5716	; 0x1654
   104f4:	2039      	movs	r0, #57	; 0x39
   104f6:	f7f4 f839 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104fa:	2000      	movs	r0, #0
   104fc:	bd70      	pop	{r4, r5, r6, pc}
   104fe:	b508      	push	{r3, lr}
   10500:	f640 1288 	movw	r2, #2440	; 0x988
   10504:	4669      	mov	r1, sp
   10506:	f7f3 ff13 	bl	4330 <mpsl_fem_tx_power_split>
   1050a:	bd08      	pop	{r3, pc}
   1050c:	b530      	push	{r4, r5, lr}
   1050e:	f340 0400 	sbfx	r4, r0, #0, #1
   10512:	f340 0040 	sbfx	r0, r0, #1, #1
   10516:	1c40      	adds	r0, r0, #1
   10518:	9d03      	ldr	r5, [sp, #12]
   1051a:	1c64      	adds	r4, r4, #1
   1051c:	d000      	beq.n	10520 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x328>
   1051e:	b119      	cbz	r1, 10528 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x330>
   10520:	b100      	cbz	r0, 10524 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32c>
   10522:	b10a      	cbz	r2, 10528 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x330>
   10524:	b91c      	cbnz	r4, 1052e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   10526:	e001      	b.n	1052c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x334>
   10528:	2011      	movs	r0, #17
   1052a:	bd30      	pop	{r4, r5, pc}
   1052c:	2100      	movs	r1, #0
   1052e:	7019      	strb	r1, [r3, #0]
   10530:	b900      	cbnz	r0, 10534 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33c>
   10532:	2200      	movs	r2, #0
   10534:	702a      	strb	r2, [r5, #0]
   10536:	2000      	movs	r0, #0
   10538:	bd30      	pop	{r4, r5, pc}
   1053a:	b2c0      	uxtb	r0, r0
   1053c:	06c1      	lsls	r1, r0, #27
   1053e:	d40c      	bmi.n	1055a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x362>
   10540:	0681      	lsls	r1, r0, #26
   10542:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10546:	d503      	bpl.n	10550 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x358>
   10548:	b9d1      	cbnz	r1, 10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1054a:	0781      	lsls	r1, r0, #30
   1054c:	d418      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1054e:	e001      	b.n	10554 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35c>
   10550:	2900      	cmp	r1, #0
   10552:	d1fa      	bne.n	1054a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   10554:	0700      	lsls	r0, r0, #28
   10556:	d413      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10558:	e010      	b.n	1057c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x384>
   1055a:	0641      	lsls	r1, r0, #25
   1055c:	d410      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1055e:	0681      	lsls	r1, r0, #26
   10560:	d40e      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10562:	07c1      	lsls	r1, r0, #31
   10564:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10568:	d004      	beq.n	10574 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
   1056a:	2900      	cmp	r1, #0
   1056c:	db02      	blt.n	10574 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
   1056e:	0740      	lsls	r0, r0, #29
   10570:	d404      	bmi.n	1057c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x384>
   10572:	e005      	b.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10574:	0701      	lsls	r1, r0, #28
   10576:	d403      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   10578:	0740      	lsls	r0, r0, #29
   1057a:	d401      	bmi.n	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   1057c:	2001      	movs	r0, #1
   1057e:	4770      	bx	lr
   10580:	2000      	movs	r0, #0
   10582:	4770      	bx	lr
   10584:	b510      	push	{r4, lr}
   10586:	f7f7 fa5b 	bl	7a40 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   1058a:	b110      	cbz	r0, 10592 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   1058c:	f240 110d 	movw	r1, #269	; 0x10d
   10590:	e004      	b.n	1059c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a4>
   10592:	f7f6 fbd5 	bl	6d40 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10596:	b120      	cbz	r0, 105a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   10598:	f44f 7189 	mov.w	r1, #274	; 0x112
   1059c:	2001      	movs	r0, #1
   1059e:	f7f3 ffe5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   105a6:	2001      	movs	r0, #1
   105a8:	f7fc befb 	b.w	d3a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   105ac:	6802      	ldr	r2, [r0, #0]
   105ae:	b912      	cbnz	r2, 105b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   105b0:	6001      	str	r1, [r0, #0]
   105b2:	4770      	bx	lr
   105b4:	4602      	mov	r2, r0
   105b6:	6850      	ldr	r0, [r2, #4]
   105b8:	b108      	cbz	r0, 105be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   105ba:	428a      	cmp	r2, r1
   105bc:	d1fa      	bne.n	105b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   105be:	428a      	cmp	r2, r1
   105c0:	d0f7      	beq.n	105b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   105c2:	6051      	str	r1, [r2, #4]
   105c4:	4770      	bx	lr
   105c6:	b510      	push	{r4, lr}
   105c8:	4604      	mov	r4, r0
   105ca:	e002      	b.n	105d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3da>
   105cc:	6820      	ldr	r0, [r4, #0]
   105ce:	4780      	blx	r0
   105d0:	6864      	ldr	r4, [r4, #4]
   105d2:	2c00      	cmp	r4, #0
   105d4:	d1fa      	bne.n	105cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d4>
   105d6:	bd10      	pop	{r4, pc}
   105d8:	b510      	push	{r4, lr}
   105da:	2000      	movs	r0, #0
   105dc:	f7fc fee1 	bl	d3a2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   105e0:	f7f4 fba8 	bl	4d34 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   105e4:	f7f4 fe40 	bl	5268 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   105e8:	f7f4 fff2 	bl	55d0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   105ec:	2800      	cmp	r0, #0
   105ee:	d003      	beq.n	105f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
   105f0:	21ec      	movs	r1, #236	; 0xec
   105f2:	2001      	movs	r0, #1
   105f4:	f7f3 ffba 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105f8:	bd10      	pop	{r4, pc}
   105fa:	b510      	push	{r4, lr}
   105fc:	f7ff ffc2 	bl	10584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   10600:	f7fe fe14 	bl	f22c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10604:	2800      	cmp	r0, #0
   10606:	d004      	beq.n	10612 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
   10608:	f240 1129 	movw	r1, #297	; 0x129
   1060c:	2001      	movs	r0, #1
   1060e:	f7f3 ffad 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10612:	bd10      	pop	{r4, pc}

00010614 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10614:	f7f3 bbd4 	b.w	3dc0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10618:	000b0001 	.word	0x000b0001
   1061c:	000a0002 	.word	0x000a0002
   10620:	00090005 	.word	0x00090005
   10624:	0008000a 	.word	0x0008000a
   10628:	00070014 	.word	0x00070014
   1062c:	0006001e 	.word	0x0006001e
   10630:	00050032 	.word	0x00050032
   10634:	0004004b 	.word	0x0004004b
   10638:	00030064 	.word	0x00030064
   1063c:	00020096 	.word	0x00020096
   10640:	000100fa 	.word	0x000100fa
   10644:	000001f4 	.word	0x000001f4

00010648 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10648:	b510      	push	{r4, lr}
   1064a:	f7fa fbcd 	bl	ade8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   1064e:	f000 f81d 	bl	1068c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10652:	f7fa f8a3 	bl	a79c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1065a:	f7fa b99d 	b.w	a998 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001065e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1065e:	b510      	push	{r4, lr}
   10660:	24c8      	movs	r4, #200	; 0xc8
   10662:	1e64      	subs	r4, r4, #1
   10664:	b2e4      	uxtb	r4, r4
   10666:	f7fa f8b7 	bl	a7d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   1066a:	2802      	cmp	r0, #2
   1066c:	d003      	beq.n	10676 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   1066e:	2801      	cmp	r0, #1
   10670:	d000      	beq.n	10674 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10672:	2000      	movs	r0, #0
   10674:	bd10      	pop	{r4, pc}
   10676:	2c00      	cmp	r4, #0
   10678:	d1f3      	bne.n	10662 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   1067a:	21b1      	movs	r1, #177	; 0xb1
   1067c:	203b      	movs	r0, #59	; 0x3b
   1067e:	f7f3 ff75 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10682:	5840      	ldr	r0, [r0, r1]
   10684:	2800      	cmp	r0, #0
   10686:	d000      	beq.n	1068a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10688:	2001      	movs	r0, #1
   1068a:	4770      	bx	lr

0001068c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1068c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10690:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10694:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10698:	f3bf 8f4f 	dsb	sy
   1069c:	f3bf 8f6f 	isb	sy
   106a0:	f7fa ba14 	b.w	aacc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   106a4:	2800      	cmp	r0, #0
   106a6:	db09      	blt.n	106bc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   106a8:	f000 021f 	and.w	r2, r0, #31
   106ac:	2101      	movs	r1, #1
   106ae:	4091      	lsls	r1, r2
   106b0:	0940      	lsrs	r0, r0, #5
   106b2:	0080      	lsls	r0, r0, #2
   106b4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   106b8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   106bc:	4770      	bx	lr
   106be:	2800      	cmp	r0, #0
   106c0:	db0d      	blt.n	106de <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   106c2:	f000 021f 	and.w	r2, r0, #31
   106c6:	2101      	movs	r1, #1
   106c8:	4091      	lsls	r1, r2
   106ca:	0940      	lsrs	r0, r0, #5
   106cc:	0080      	lsls	r0, r0, #2
   106ce:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   106d2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   106d6:	f3bf 8f4f 	dsb	sy
   106da:	f3bf 8f6f 	isb	sy
   106de:	4770      	bx	lr
   106e0:	5840      	ldr	r0, [r0, r1]
   106e2:	2800      	cmp	r0, #0
   106e4:	d000      	beq.n	106e8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   106e6:	2001      	movs	r0, #1
   106e8:	4770      	bx	lr
   106ea:	5840      	ldr	r0, [r0, r1]
   106ec:	2800      	cmp	r0, #0
   106ee:	d000      	beq.n	106f2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   106f0:	2001      	movs	r0, #1
   106f2:	4770      	bx	lr

000106f4 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   106f4:	b510      	push	{r4, lr}
   106f6:	4604      	mov	r4, r0
   106f8:	4608      	mov	r0, r1
   106fa:	f7fa fc9b 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   106fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10702:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10706:	fbb0 f0f1 	udiv	r0, r0, r1
   1070a:	1a20      	subs	r0, r4, r0
   1070c:	1e80      	subs	r0, r0, #2
   1070e:	bd10      	pop	{r4, pc}

00010710 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10710:	b510      	push	{r4, lr}
   10712:	4604      	mov	r4, r0
   10714:	4608      	mov	r0, r1
   10716:	f7fa fc8d 	bl	b034 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1071a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1071e:	fbb0 f0f1 	udiv	r0, r0, r1
   10722:	1a20      	subs	r0, r4, r0
   10724:	bd10      	pop	{r4, pc}
   10726:	ecd8      	.short	0xecd8
   10728:	fcf8f4f0 	.word	0xfcf8f4f0
   1072c:	04030200 	.word	0x04030200
   10730:	08070605 	.word	0x08070605
	...
   10748:	01010101 	.word	0x01010101
   1074c:	02020202 	.word	0x02020202
   10750:	03030303 	.word	0x03030303
   10754:	04040404 	.word	0x04040404
   10758:	05050505 	.word	0x05050505
   1075c:	08070606 	.word	0x08070606
   10760:	0c0b0a09 	.word	0x0c0b0a09
   10764:	0000000d 	.word	0x0000000d
	...
   10778:	01010100 	.word	0x01010100
   1077c:	02020201 	.word	0x02020201
   10780:	03030302 	.word	0x03030302
   10784:	04040403 	.word	0x04040403
   10788:	05050504 	.word	0x05050504
   1078c:	06060605 	.word	0x06060605
   10790:	0908      	.short	0x0908
   10792:	080c      	.short	0x080c
   10794:	010d1702 	.word	0x010d1702
   10798:	09090201 	.word	0x09090201
   1079c:	02060101 	.word	0x02060101
   107a0:	03181809 	.word	0x03181809
   107a4:	09090101 	.word	0x09090101
   107a8:	03050303 	.word	0x03050303
   107ac:	02230102 	.word	0x02230102
   107b0:	10092402 	.word	0x10092402
   107b4:	05050404 	.word	0x05050404
   107b8:	0b040b0b 	.word	0x0b040b0b
   107bc:	0000002b 	.word	0x0000002b

000107c0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   107c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   107c2:	4dc0      	ldr	r5, [pc, #768]	; (10ac4 <bt_init+0x304>)
   107c4:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   107c8:	6899      	ldr	r1, [r3, #8]
   107ca:	f011 0101 	ands.w	r1, r1, #1
   107ce:	d121      	bne.n	10814 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   107d0:	aa01      	add	r2, sp, #4
   107d2:	f640 4003 	movw	r0, #3075	; 0xc03
   107d6:	f003 ff61 	bl	1469c <bt_hci_cmd_send_sync>
		if (err) {
   107da:	4604      	mov	r4, r0
   107dc:	2800      	cmp	r0, #0
   107de:	d165      	bne.n	108ac <bt_init+0xec>
		hci_reset_complete(rsp);
   107e0:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
   107e2:	6883      	ldr	r3, [r0, #8]
	if (status) {
   107e4:	781b      	ldrb	r3, [r3, #0]
   107e6:	b99b      	cbnz	r3, 10810 <bt_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   107e8:	f3bf 8f5b 	dmb	ish
   107ec:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   107f0:	f3bf 8f5b 	dmb	ish
   107f4:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   107f8:	f003 0309 	and.w	r3, r3, #9
   107fc:	f3bf 8f5b 	dmb	ish
   10800:	e852 1f00 	ldrex	r1, [r2]
   10804:	e842 3400 	strex	r4, r3, [r2]
   10808:	2c00      	cmp	r4, #0
   1080a:	d1f9      	bne.n	10800 <bt_init+0x40>
   1080c:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   10810:	f00b f97a 	bl	1bb08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   10814:	aa01      	add	r2, sp, #4
   10816:	2100      	movs	r1, #0
   10818:	f241 0003 	movw	r0, #4099	; 0x1003
   1081c:	f003 ff3e 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   10820:	4604      	mov	r4, r0
   10822:	2800      	cmp	r0, #0
   10824:	d142      	bne.n	108ac <bt_init+0xec>
	read_local_features_complete(rsp);
   10826:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   10828:	48a7      	ldr	r0, [pc, #668]	; (10ac8 <bt_init+0x308>)
   1082a:	68b1      	ldr	r1, [r6, #8]
   1082c:	2208      	movs	r2, #8
   1082e:	3101      	adds	r1, #1
   10830:	f016 fa24 	bl	26c7c <memcpy>
	net_buf_unref(rsp);
   10834:	4630      	mov	r0, r6
   10836:	f00b f967 	bl	1bb08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1083a:	4621      	mov	r1, r4
   1083c:	aa01      	add	r2, sp, #4
   1083e:	f241 0001 	movw	r0, #4097	; 0x1001
   10842:	f003 ff2b 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   10846:	4604      	mov	r4, r0
   10848:	bb80      	cbnz	r0, 108ac <bt_init+0xec>
	read_local_ver_complete(rsp);
   1084a:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1084c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1084e:	785a      	ldrb	r2, [r3, #1]
   10850:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   10854:	885a      	ldrh	r2, [r3, #2]
   10856:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   1085a:	791a      	ldrb	r2, [r3, #4]
   1085c:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   10860:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   10864:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   10868:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1086c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   10870:	f00b f94a 	bl	1bb08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   10874:	4621      	mov	r1, r4
   10876:	aa01      	add	r2, sp, #4
   10878:	f241 0002 	movw	r0, #4098	; 0x1002
   1087c:	f003 ff0e 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   10880:	4604      	mov	r4, r0
   10882:	b998      	cbnz	r0, 108ac <bt_init+0xec>
	read_supported_commands_complete(rsp);
   10884:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   10886:	4891      	ldr	r0, [pc, #580]	; (10acc <bt_init+0x30c>)
   10888:	68b1      	ldr	r1, [r6, #8]
   1088a:	2240      	movs	r2, #64	; 0x40
   1088c:	3101      	adds	r1, #1
   1088e:	f016 f9f5 	bl	26c7c <memcpy>
	net_buf_unref(rsp);
   10892:	4630      	mov	r0, r6
   10894:	f00b f938 	bl	1bb08 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   10898:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1089c:	065a      	lsls	r2, r3, #25
   1089e:	d408      	bmi.n	108b2 <bt_init+0xf2>
		BT_ERR("Non-LE capable controller detected!");
   108a0:	488b      	ldr	r0, [pc, #556]	; (10ad0 <bt_init+0x310>)
   108a2:	2145      	movs	r1, #69	; 0x45
   108a4:	f015 fb5a 	bl	25f5c <z_log_minimal_printk>
		return -ENODEV;
   108a8:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   108ac:	4620      	mov	r0, r4
   108ae:	b002      	add	sp, #8
   108b0:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   108b2:	4621      	mov	r1, r4
   108b4:	aa01      	add	r2, sp, #4
   108b6:	f242 0003 	movw	r0, #8195	; 0x2003
   108ba:	f003 feef 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   108be:	4604      	mov	r4, r0
   108c0:	2800      	cmp	r0, #0
   108c2:	d1f3      	bne.n	108ac <bt_init+0xec>
	read_le_features_complete(rsp);
   108c4:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   108c6:	4883      	ldr	r0, [pc, #524]	; (10ad4 <bt_init+0x314>)
   108c8:	68b1      	ldr	r1, [r6, #8]
   108ca:	2208      	movs	r2, #8
   108cc:	3101      	adds	r1, #1
   108ce:	f016 f9d5 	bl	26c7c <memcpy>
	net_buf_unref(rsp);
   108d2:	4630      	mov	r0, r6
   108d4:	f00b f918 	bl	1bb08 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   108d8:	4621      	mov	r1, r4
   108da:	aa01      	add	r2, sp, #4
   108dc:	f242 0002 	movw	r0, #8194	; 0x2002
   108e0:	f003 fedc 	bl	1469c <bt_hci_cmd_send_sync>
		if (err) {
   108e4:	4604      	mov	r4, r0
   108e6:	2800      	cmp	r0, #0
   108e8:	d1e0      	bne.n	108ac <bt_init+0xec>
		le_read_buffer_size_complete(rsp);
   108ea:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   108ec:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   108ee:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   108f2:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   108f6:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   108f8:	b121      	cbz	r1, 10904 <bt_init+0x144>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   108fa:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   108fc:	4876      	ldr	r0, [pc, #472]	; (10ad8 <bt_init+0x318>)
   108fe:	4611      	mov	r1, r2
   10900:	f018 fd29 	bl	29356 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   10904:	4620      	mov	r0, r4
   10906:	f00b f8ff 	bl	1bb08 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1090a:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   1090e:	f016 0620 	ands.w	r6, r6, #32
   10912:	d118      	bne.n	10946 <bt_init+0x186>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   10914:	2102      	movs	r1, #2
   10916:	f640 406d 	movw	r0, #3181	; 0xc6d
   1091a:	f003 fe75 	bl	14608 <bt_hci_cmd_create>
		if (!buf) {
   1091e:	4604      	mov	r4, r0
   10920:	2800      	cmp	r0, #0
   10922:	f000 80cc 	beq.w	10abe <bt_init+0x2fe>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   10926:	2102      	movs	r1, #2
   10928:	3008      	adds	r0, #8
   1092a:	f00b f9f3 	bl	1bd14 <net_buf_simple_add>
		cp_le->le = 0x01;
   1092e:	2301      	movs	r3, #1
   10930:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10932:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10934:	4621      	mov	r1, r4
   10936:	4632      	mov	r2, r6
   10938:	f640 406d 	movw	r0, #3181	; 0xc6d
   1093c:	f003 feae 	bl	1469c <bt_hci_cmd_send_sync>
		if (err) {
   10940:	4604      	mov	r4, r0
   10942:	2800      	cmp	r0, #0
   10944:	d1b2      	bne.n	108ac <bt_init+0xec>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   10946:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   1094a:	071b      	lsls	r3, r3, #28
   1094c:	d512      	bpl.n	10974 <bt_init+0x1b4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1094e:	aa01      	add	r2, sp, #4
   10950:	2100      	movs	r1, #0
   10952:	f242 001c 	movw	r0, #8220	; 0x201c
   10956:	f003 fea1 	bl	1469c <bt_hci_cmd_send_sync>
		if (err) {
   1095a:	4604      	mov	r4, r0
   1095c:	2800      	cmp	r0, #0
   1095e:	d1a5      	bne.n	108ac <bt_init+0xec>
		le_read_supp_states_complete(rsp);
   10960:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10962:	6883      	ldr	r3, [r0, #8]
   10964:	f8d3 2001 	ldr.w	r2, [r3, #1]
   10968:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1096c:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   10970:	f00b f8ca 	bl	1bb08 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   10974:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10978:	069e      	lsls	r6, r3, #26
   1097a:	d524      	bpl.n	109c6 <bt_init+0x206>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1097c:	f10d 0102 	add.w	r1, sp, #2
   10980:	4668      	mov	r0, sp
   10982:	f003 feeb 	bl	1475c <hci_le_read_max_data_len>
		if (err) {
   10986:	4604      	mov	r4, r0
   10988:	2800      	cmp	r0, #0
   1098a:	d18f      	bne.n	108ac <bt_init+0xec>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1098c:	2104      	movs	r1, #4
   1098e:	f242 0024 	movw	r0, #8228	; 0x2024
   10992:	f003 fe39 	bl	14608 <bt_hci_cmd_create>
		if (!buf) {
   10996:	4606      	mov	r6, r0
   10998:	2800      	cmp	r0, #0
   1099a:	f000 8090 	beq.w	10abe <bt_init+0x2fe>
   1099e:	2104      	movs	r1, #4
   109a0:	3008      	adds	r0, #8
   109a2:	f00b f9b7 	bl	1bd14 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   109a6:	f8bd 3000 	ldrh.w	r3, [sp]
   109aa:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   109ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   109b0:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   109b2:	4622      	mov	r2, r4
   109b4:	4631      	mov	r1, r6
   109b6:	f242 0024 	movw	r0, #8228	; 0x2024
   109ba:	f003 fe6f 	bl	1469c <bt_hci_cmd_send_sync>
		if (err) {
   109be:	4604      	mov	r4, r0
   109c0:	2800      	cmp	r0, #0
   109c2:	f47f af73 	bne.w	108ac <bt_init+0xec>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   109c6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   109ca:	065c      	lsls	r4, r3, #25
   109cc:	d510      	bpl.n	109f0 <bt_init+0x230>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   109ce:	aa01      	add	r2, sp, #4
   109d0:	2100      	movs	r1, #0
   109d2:	f242 002a 	movw	r0, #8234	; 0x202a
   109d6:	f003 fe61 	bl	1469c <bt_hci_cmd_send_sync>
		if (err) {
   109da:	4604      	mov	r4, r0
   109dc:	2800      	cmp	r0, #0
   109de:	f47f af65 	bne.w	108ac <bt_init+0xec>
		le_read_resolving_list_size_complete(rsp);
   109e2:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   109e4:	6883      	ldr	r3, [r0, #8]
   109e6:	785b      	ldrb	r3, [r3, #1]
   109e8:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   109ec:	f00b f88c 	bl	1bb08 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   109f0:	2108      	movs	r1, #8
   109f2:	f242 0001 	movw	r0, #8193	; 0x2001
   109f6:	f003 fe07 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   109fa:	4604      	mov	r4, r0
   109fc:	2800      	cmp	r0, #0
   109fe:	d05e      	beq.n	10abe <bt_init+0x2fe>
   10a00:	2108      	movs	r1, #8
   10a02:	4408      	add	r0, r1
   10a04:	f00b f986 	bl	1bd14 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   10a08:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   10a0c:	f011 0f40 	tst.w	r1, #64	; 0x40
   10a10:	4602      	mov	r2, r0
   10a12:	f240 2302 	movw	r3, #514	; 0x202
   10a16:	bf08      	it	eq
   10a18:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   10a1a:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   10a1c:	bf4c      	ite	mi
   10a1e:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   10a22:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   10a26:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10a28:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   10a2c:	bf48      	it	mi
   10a2e:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10a32:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10a36:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   10a3a:	bf18      	it	ne
   10a3c:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10a40:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10a44:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   10a46:	bf48      	it	mi
   10a48:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10a4c:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   10a4e:	bf08      	it	eq
   10a50:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   10a54:	2100      	movs	r1, #0
   10a56:	f016 fa24 	bl	26ea2 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10a5a:	4621      	mov	r1, r4
   10a5c:	2200      	movs	r2, #0
   10a5e:	f242 0001 	movw	r0, #8193	; 0x2001
   10a62:	f003 fe1b 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   10a66:	4604      	mov	r4, r0
   10a68:	2800      	cmp	r0, #0
   10a6a:	f47f af1f 	bne.w	108ac <bt_init+0xec>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10a6e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   10a72:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10a76:	0698      	lsls	r0, r3, #26
   10a78:	d430      	bmi.n	10adc <bt_init+0x31c>
	if (bt_dev.le.acl_mtu) {
   10a7a:	b9c9      	cbnz	r1, 10ab0 <bt_init+0x2f0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   10a7c:	aa01      	add	r2, sp, #4
   10a7e:	f241 0005 	movw	r0, #4101	; 0x1005
   10a82:	f003 fe0b 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   10a86:	4604      	mov	r4, r0
   10a88:	2800      	cmp	r0, #0
   10a8a:	f47f af0f 	bne.w	108ac <bt_init+0xec>
	if (bt_dev.le.acl_mtu) {
   10a8e:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   10a92:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   10a94:	b94b      	cbnz	r3, 10aaa <bt_init+0x2ea>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   10a96:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   10a98:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10a9c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10aa0:	889a      	ldrh	r2, [r3, #4]
   10aa2:	480d      	ldr	r0, [pc, #52]	; (10ad8 <bt_init+0x318>)
   10aa4:	4611      	mov	r1, r2
   10aa6:	f018 fc56 	bl	29356 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   10aaa:	4620      	mov	r0, r4
   10aac:	f00b f82c 	bl	1bb08 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10ab0:	2108      	movs	r1, #8
   10ab2:	f640 4001 	movw	r0, #3073	; 0xc01
   10ab6:	f003 fda7 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   10aba:	4604      	mov	r4, r0
   10abc:	b9b8      	cbnz	r0, 10aee <bt_init+0x32e>
		return -ENOBUFS;
   10abe:	f06f 0468 	mvn.w	r4, #104	; 0x68
   10ac2:	e6f3      	b.n	108ac <bt_init+0xec>
   10ac4:	20000380 	.word	0x20000380
   10ac8:	200003f0 	.word	0x200003f0
   10acc:	200003f8 	.word	0x200003f8
   10ad0:	0002b77e 	.word	0x0002b77e
   10ad4:	20000450 	.word	0x20000450
   10ad8:	20000480 	.word	0x20000480
	else if (!bt_dev.le.acl_mtu) {
   10adc:	2900      	cmp	r1, #0
   10ade:	d1e7      	bne.n	10ab0 <bt_init+0x2f0>
		BT_ERR("ACL BR/EDR buffers not initialized");
   10ae0:	483f      	ldr	r0, [pc, #252]	; (10be0 <bt_init+0x420>)
   10ae2:	2145      	movs	r1, #69	; 0x45
   10ae4:	f015 fa3a 	bl	25f5c <z_log_minimal_printk>
		return -EIO;
   10ae8:	f06f 0404 	mvn.w	r4, #4
   10aec:	e6de      	b.n	108ac <bt_init+0xec>
   10aee:	2108      	movs	r1, #8
   10af0:	4408      	add	r0, r1
   10af2:	f00b f90f 	bl	1bd14 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10af6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10afa:	07d9      	lsls	r1, r3, #31
   10afc:	4602      	mov	r2, r0
   10afe:	d42e      	bmi.n	10b5e <bt_init+0x39e>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   10b00:	4838      	ldr	r0, [pc, #224]	; (10be4 <bt_init+0x424>)
   10b02:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   10b06:	f016 f9cc 	bl	26ea2 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   10b0a:	4621      	mov	r1, r4
   10b0c:	2200      	movs	r2, #0
   10b0e:	f640 4001 	movw	r0, #3073	; 0xc01
   10b12:	f003 fdc3 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   10b16:	4604      	mov	r4, r0
   10b18:	2800      	cmp	r0, #0
   10b1a:	f47f aec7 	bne.w	108ac <bt_init+0xec>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   10b1e:	4601      	mov	r1, r0
   10b20:	aa01      	add	r2, sp, #4
   10b22:	f64f 4001 	movw	r0, #64513	; 0xfc01
   10b26:	f003 fdb9 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   10b2a:	4604      	mov	r4, r0
   10b2c:	b1d8      	cbz	r0, 10b66 <bt_init+0x3a6>
		BT_WARN("Vendor HCI extensions not available");
   10b2e:	482e      	ldr	r0, [pc, #184]	; (10be8 <bt_init+0x428>)
   10b30:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
   10b32:	f015 fa13 	bl	25f5c <z_log_minimal_printk>
	err = bt_id_init();
   10b36:	f016 fb29 	bl	2718c <bt_id_init>
	if (err) {
   10b3a:	4604      	mov	r4, r0
   10b3c:	2800      	cmp	r0, #0
   10b3e:	f47f aeb5 	bne.w	108ac <bt_init+0xec>
		err = bt_conn_init();
   10b42:	f006 fa03 	bl	16f4c <bt_conn_init>
		if (err) {
   10b46:	4604      	mov	r4, r0
   10b48:	2800      	cmp	r0, #0
   10b4a:	f47f aeaf 	bne.w	108ac <bt_init+0xec>
		if (!bt_dev.id_count) {
   10b4e:	79eb      	ldrb	r3, [r5, #7]
   10b50:	2b00      	cmp	r3, #0
   10b52:	d139      	bne.n	10bc8 <bt_init+0x408>
			BT_INFO("No ID address. App must call settings_load()");
   10b54:	4825      	ldr	r0, [pc, #148]	; (10bec <bt_init+0x42c>)
   10b56:	2149      	movs	r1, #73	; 0x49
   10b58:	f015 fa00 	bl	25f5c <z_log_minimal_printk>
			return 0;
   10b5c:	e6a6      	b.n	108ac <bt_init+0xec>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   10b5e:	a11e      	add	r1, pc, #120	; (adr r1, 10bd8 <bt_init+0x418>)
   10b60:	e9d1 0100 	ldrd	r0, r1, [r1]
   10b64:	e7cf      	b.n	10b06 <bt_init+0x346>
	net_buf_unref(rsp);
   10b66:	9801      	ldr	r0, [sp, #4]
   10b68:	f00a ffce 	bl	1bb08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   10b6c:	4621      	mov	r1, r4
   10b6e:	aa01      	add	r2, sp, #4
   10b70:	f64f 4002 	movw	r0, #64514	; 0xfc02
   10b74:	f003 fd92 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   10b78:	4604      	mov	r4, r0
   10b7a:	b110      	cbz	r0, 10b82 <bt_init+0x3c2>
		BT_WARN("Failed to read supported vendor commands");
   10b7c:	481c      	ldr	r0, [pc, #112]	; (10bf0 <bt_init+0x430>)
   10b7e:	2157      	movs	r1, #87	; 0x57
   10b80:	e7d7      	b.n	10b32 <bt_init+0x372>
	rp.cmds = (void *)rsp->data;
   10b82:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   10b84:	481b      	ldr	r0, [pc, #108]	; (10bf4 <bt_init+0x434>)
   10b86:	68b1      	ldr	r1, [r6, #8]
   10b88:	2202      	movs	r2, #2
   10b8a:	3101      	adds	r1, #1
   10b8c:	f016 f876 	bl	26c7c <memcpy>
	net_buf_unref(rsp);
   10b90:	4630      	mov	r0, r6
   10b92:	f00a ffb9 	bl	1bb08 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   10b96:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   10b9a:	075b      	lsls	r3, r3, #29
   10b9c:	d5cb      	bpl.n	10b36 <bt_init+0x376>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   10b9e:	aa01      	add	r2, sp, #4
   10ba0:	4621      	mov	r1, r4
   10ba2:	f64f 4003 	movw	r0, #64515	; 0xfc03
   10ba6:	f003 fd79 	bl	1469c <bt_hci_cmd_send_sync>
		if (err) {
   10baa:	b110      	cbz	r0, 10bb2 <bt_init+0x3f2>
			BT_WARN("Failed to read supported vendor features");
   10bac:	4812      	ldr	r0, [pc, #72]	; (10bf8 <bt_init+0x438>)
   10bae:	2157      	movs	r1, #87	; 0x57
   10bb0:	e7bf      	b.n	10b32 <bt_init+0x372>
		rp.feat = (void *)rsp->data;
   10bb2:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   10bb4:	4811      	ldr	r0, [pc, #68]	; (10bfc <bt_init+0x43c>)
   10bb6:	68a1      	ldr	r1, [r4, #8]
   10bb8:	2201      	movs	r2, #1
   10bba:	4411      	add	r1, r2
   10bbc:	f016 f85e 	bl	26c7c <memcpy>
		net_buf_unref(rsp);
   10bc0:	4620      	mov	r0, r4
   10bc2:	f00a ffa1 	bl	1bb08 <net_buf_unref>
   10bc6:	e7b6      	b.n	10b36 <bt_init+0x376>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10bc8:	2108      	movs	r1, #8
   10bca:	480d      	ldr	r0, [pc, #52]	; (10c00 <bt_init+0x440>)
   10bcc:	f016 f94e 	bl	26e6c <atomic_or>
	bt_finalize_init();
   10bd0:	f004 fa38 	bl	15044 <bt_finalize_init>
	return 0;
   10bd4:	e66a      	b.n	108ac <bt_init+0xec>
   10bd6:	bf00      	nop
   10bd8:	02008890 	.word	0x02008890
   10bdc:	20008000 	.word	0x20008000
   10be0:	0002b7a7 	.word	0x0002b7a7
   10be4:	02008810 	.word	0x02008810
   10be8:	0002b7cf 	.word	0x0002b7cf
   10bec:	0002b854 	.word	0x0002b854
   10bf0:	0002b7f8 	.word	0x0002b7f8
   10bf4:	20000439 	.word	0x20000439
   10bf8:	0002b826 	.word	0x0002b826
   10bfc:	20000438 	.word	0x20000438
   10c00:	2000044c 	.word	0x2000044c

00010c04 <app_button_cb>:
}

static bool app_button_cb(void)
{
	return app_button_state;
}
   10c04:	4b01      	ldr	r3, [pc, #4]	; (10c0c <app_button_cb+0x8>)
   10c06:	7818      	ldrb	r0, [r3, #0]
   10c08:	4770      	bx	lr
   10c0a:	bf00      	nop
   10c0c:	200035a0 	.word	0x200035a0

00010c10 <disconnected>:
{
   10c10:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   10c12:	4804      	ldr	r0, [pc, #16]	; (10c24 <disconnected+0x14>)
   10c14:	f014 ff8c 	bl	25b30 <printk>
}
   10c18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_off(CON_STATUS_LED);
   10c1c:	2001      	movs	r0, #1
   10c1e:	f018 b9ab 	b.w	28f78 <dk_set_led_off>
   10c22:	bf00      	nop
   10c24:	0002a4d0 	.word	0x0002a4d0

00010c28 <connected>:
{
   10c28:	b508      	push	{r3, lr}
	if (err) {
   10c2a:	b121      	cbz	r1, 10c36 <connected+0xe>
}
   10c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err %u)\n", err);
   10c30:	4805      	ldr	r0, [pc, #20]	; (10c48 <connected+0x20>)
   10c32:	f014 bf7d 	b.w	25b30 <printk>
	printk("Connected\n");
   10c36:	4805      	ldr	r0, [pc, #20]	; (10c4c <connected+0x24>)
   10c38:	f014 ff7a 	bl	25b30 <printk>
}
   10c3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_on(CON_STATUS_LED);
   10c40:	2001      	movs	r0, #1
   10c42:	f018 b996 	b.w	28f72 <dk_set_led_on>
   10c46:	bf00      	nop
   10c48:	0002a4ea 	.word	0x0002a4ea
   10c4c:	0002a506 	.word	0x0002a506

00010c50 <button_changed>:
	.button_cb = app_button_cb,
};

static void button_changed(uint32_t button_state, uint32_t has_changed)
{
	if (has_changed & USER_BUTTON) {
   10c50:	07cb      	lsls	r3, r1, #31
{
   10c52:	b510      	push	{r4, lr}
	if (has_changed & USER_BUTTON) {
   10c54:	d506      	bpl.n	10c64 <button_changed+0x14>
		uint32_t user_button_state = button_state & USER_BUTTON;

		bt_lbs_send_button_state(user_button_state);
   10c56:	f000 0401 	and.w	r4, r0, #1
   10c5a:	4620      	mov	r0, r4
   10c5c:	f002 f878 	bl	12d50 <bt_lbs_send_button_state>
		app_button_state = user_button_state ? true : false;
   10c60:	4b01      	ldr	r3, [pc, #4]	; (10c68 <button_changed+0x18>)
   10c62:	701c      	strb	r4, [r3, #0]
	}
}
   10c64:	bd10      	pop	{r4, pc}
   10c66:	bf00      	nop
   10c68:	200035a0 	.word	0x200035a0

00010c6c <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10c6c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   10c6e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10c70:	b08a      	sub	sp, #40	; 0x28
   10c72:	4604      	mov	r4, r0
   10c74:	460e      	mov	r6, r1
   10c76:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   10c78:	2b03      	cmp	r3, #3
   10c7a:	d820      	bhi.n	10cbe <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   10c7c:	e8df f003 	tbb	[pc, r3]
   10c80:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10c84:	4911      	ldr	r1, [pc, #68]	; (10ccc <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   10c86:	4628      	mov	r0, r5
   10c88:	f015 ff97 	bl	26bba <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10c8c:	9505      	str	r5, [sp, #20]
   10c8e:	7863      	ldrb	r3, [r4, #1]
   10c90:	9304      	str	r3, [sp, #16]
   10c92:	78a3      	ldrb	r3, [r4, #2]
   10c94:	9303      	str	r3, [sp, #12]
   10c96:	78e3      	ldrb	r3, [r4, #3]
   10c98:	9302      	str	r3, [sp, #8]
   10c9a:	7923      	ldrb	r3, [r4, #4]
   10c9c:	9301      	str	r3, [sp, #4]
   10c9e:	7963      	ldrb	r3, [r4, #5]
   10ca0:	9300      	str	r3, [sp, #0]
   10ca2:	79a3      	ldrb	r3, [r4, #6]
   10ca4:	4a0a      	ldr	r2, [pc, #40]	; (10cd0 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   10ca6:	211e      	movs	r1, #30
   10ca8:	4630      	mov	r0, r6
   10caa:	f014 ff4e 	bl	25b4a <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   10cae:	b00a      	add	sp, #40	; 0x28
   10cb0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   10cb2:	4908      	ldr	r1, [pc, #32]	; (10cd4 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   10cb4:	e7e7      	b.n	10c86 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   10cb6:	4908      	ldr	r1, [pc, #32]	; (10cd8 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   10cb8:	e7e5      	b.n	10c86 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   10cba:	4908      	ldr	r1, [pc, #32]	; (10cdc <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   10cbc:	e7e3      	b.n	10c86 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10cbe:	4a08      	ldr	r2, [pc, #32]	; (10ce0 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   10cc0:	210a      	movs	r1, #10
   10cc2:	4628      	mov	r0, r5
   10cc4:	f014 ff41 	bl	25b4a <snprintk>
		break;
   10cc8:	e7e0      	b.n	10c8c <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   10cca:	bf00      	nop
   10ccc:	0002a511 	.word	0x0002a511
   10cd0:	0002a53a 	.word	0x0002a53a
   10cd4:	0002a518 	.word	0x0002a518
   10cd8:	0002a51f 	.word	0x0002a51f
   10cdc:	0002a529 	.word	0x0002a529
   10ce0:	0002a533 	.word	0x0002a533

00010ce4 <security_changed>:
{
   10ce4:	b530      	push	{r4, r5, lr}
   10ce6:	b089      	sub	sp, #36	; 0x24
   10ce8:	460c      	mov	r4, r1
   10cea:	4615      	mov	r5, r2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10cec:	f016 fc0f 	bl	2750e <bt_conn_get_dst>
   10cf0:	4669      	mov	r1, sp
   10cf2:	f7ff ffbb 	bl	10c6c <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
   10cf6:	b935      	cbnz	r5, 10d06 <security_changed+0x22>
		printk("Security changed: %s level %u\n", addr, level);
   10cf8:	4806      	ldr	r0, [pc, #24]	; (10d14 <security_changed+0x30>)
   10cfa:	4622      	mov	r2, r4
   10cfc:	4669      	mov	r1, sp
   10cfe:	f014 ff17 	bl	25b30 <printk>
}
   10d02:	b009      	add	sp, #36	; 0x24
   10d04:	bd30      	pop	{r4, r5, pc}
		printk("Security failed: %s level %u err %d\n", addr, level, err);
   10d06:	4804      	ldr	r0, [pc, #16]	; (10d18 <security_changed+0x34>)
   10d08:	462b      	mov	r3, r5
   10d0a:	4622      	mov	r2, r4
   10d0c:	4669      	mov	r1, sp
   10d0e:	f014 ff0f 	bl	25b30 <printk>
}
   10d12:	e7f6      	b.n	10d02 <security_changed+0x1e>
   10d14:	0002a55d 	.word	0x0002a55d
   10d18:	0002a57c 	.word	0x0002a57c

00010d1c <pairing_failed>:
{
   10d1c:	b510      	push	{r4, lr}
   10d1e:	b088      	sub	sp, #32
   10d20:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10d22:	f016 fbf4 	bl	2750e <bt_conn_get_dst>
   10d26:	4669      	mov	r1, sp
   10d28:	f7ff ffa0 	bl	10c6c <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
   10d2c:	4803      	ldr	r0, [pc, #12]	; (10d3c <pairing_failed+0x20>)
   10d2e:	4622      	mov	r2, r4
   10d30:	4669      	mov	r1, sp
   10d32:	f014 fefd 	bl	25b30 <printk>
}
   10d36:	b008      	add	sp, #32
   10d38:	bd10      	pop	{r4, pc}
   10d3a:	bf00      	nop
   10d3c:	0002a5a1 	.word	0x0002a5a1

00010d40 <pairing_complete>:
{
   10d40:	b510      	push	{r4, lr}
   10d42:	b088      	sub	sp, #32
   10d44:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10d46:	f016 fbe2 	bl	2750e <bt_conn_get_dst>
   10d4a:	4669      	mov	r1, sp
   10d4c:	f7ff ff8e 	bl	10c6c <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
   10d50:	4803      	ldr	r0, [pc, #12]	; (10d60 <pairing_complete+0x20>)
   10d52:	4622      	mov	r2, r4
   10d54:	4669      	mov	r1, sp
   10d56:	f014 feeb 	bl	25b30 <printk>
}
   10d5a:	b008      	add	sp, #32
   10d5c:	bd10      	pop	{r4, pc}
   10d5e:	bf00      	nop
   10d60:	0002a5c5 	.word	0x0002a5c5

00010d64 <auth_cancel>:
{
   10d64:	b500      	push	{lr}
   10d66:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10d68:	f016 fbd1 	bl	2750e <bt_conn_get_dst>
   10d6c:	4669      	mov	r1, sp
   10d6e:	f7ff ff7d 	bl	10c6c <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing cancelled: %s\n", addr);
   10d72:	4803      	ldr	r0, [pc, #12]	; (10d80 <auth_cancel+0x1c>)
   10d74:	4669      	mov	r1, sp
   10d76:	f014 fedb 	bl	25b30 <printk>
}
   10d7a:	b009      	add	sp, #36	; 0x24
   10d7c:	f85d fb04 	ldr.w	pc, [sp], #4
   10d80:	0002a5e8 	.word	0x0002a5e8

00010d84 <auth_passkey_display>:
{
   10d84:	b510      	push	{r4, lr}
   10d86:	b088      	sub	sp, #32
   10d88:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10d8a:	f016 fbc0 	bl	2750e <bt_conn_get_dst>
   10d8e:	4669      	mov	r1, sp
   10d90:	f7ff ff6c 	bl	10c6c <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
   10d94:	4803      	ldr	r0, [pc, #12]	; (10da4 <auth_passkey_display+0x20>)
   10d96:	4622      	mov	r2, r4
   10d98:	4669      	mov	r1, sp
   10d9a:	f014 fec9 	bl	25b30 <printk>
}
   10d9e:	b008      	add	sp, #32
   10da0:	bd10      	pop	{r4, pc}
   10da2:	bf00      	nop
   10da4:	0002a5ff 	.word	0x0002a5ff

00010da8 <main>:

	return err;
}

void main(void)
{
   10da8:	b530      	push	{r4, r5, lr}
	int blink_status = 0;
	int err;

	printk("Starting Bluetooth Peripheral LBS example\n");
   10daa:	4830      	ldr	r0, [pc, #192]	; (10e6c <main+0xc4>)
{
   10dac:	b089      	sub	sp, #36	; 0x24
	printk("Starting Bluetooth Peripheral LBS example\n");
   10dae:	f014 febf 	bl	25b30 <printk>

	err = dk_leds_init();
   10db2:	f00c fd25 	bl	1d800 <dk_leds_init>
	if (err) {
   10db6:	4601      	mov	r1, r0
   10db8:	b128      	cbz	r0, 10dc6 <main+0x1e>
		printk("LEDs init failed (err %d)\n", err);
   10dba:	482d      	ldr	r0, [pc, #180]	; (10e70 <main+0xc8>)

	for (;;) {
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
   10dbc:	b009      	add	sp, #36	; 0x24
   10dbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Failed to init LBS (err:%d)\n", err);
   10dc2:	f014 beb5 	b.w	25b30 <printk>
	err = dk_buttons_init(button_changed);
   10dc6:	482b      	ldr	r0, [pc, #172]	; (10e74 <main+0xcc>)
   10dc8:	f00c fd4e 	bl	1d868 <dk_buttons_init>
	if (err) {
   10dcc:	4604      	mov	r4, r0
   10dce:	b948      	cbnz	r0, 10de4 <main+0x3c>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
   10dd0:	4829      	ldr	r0, [pc, #164]	; (10e78 <main+0xd0>)
   10dd2:	f006 f88d 	bl	16ef0 <bt_conn_auth_cb_register>
		if (err) {
   10dd6:	b160      	cbz	r0, 10df2 <main+0x4a>
			printk("Failed to register authorization callbacks.\n");
   10dd8:	4828      	ldr	r0, [pc, #160]	; (10e7c <main+0xd4>)
}
   10dda:	b009      	add	sp, #36	; 0x24
   10ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			printk("Failed to register authorization info callbacks.\n");
   10de0:	f014 bea6 	b.w	25b30 <printk>
		printk("Cannot init buttons (err: %d)\n", err);
   10de4:	4601      	mov	r1, r0
   10de6:	4826      	ldr	r0, [pc, #152]	; (10e80 <main+0xd8>)
   10de8:	f014 fea2 	bl	25b30 <printk>
		printk("Button init failed (err %d)\n", err);
   10dec:	4825      	ldr	r0, [pc, #148]	; (10e84 <main+0xdc>)
   10dee:	4621      	mov	r1, r4
   10df0:	e7e4      	b.n	10dbc <main+0x14>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
   10df2:	4825      	ldr	r0, [pc, #148]	; (10e88 <main+0xe0>)
   10df4:	f006 f896 	bl	16f24 <bt_conn_auth_info_cb_register>
		if (err) {
   10df8:	b108      	cbz	r0, 10dfe <main+0x56>
			printk("Failed to register authorization info callbacks.\n");
   10dfa:	4824      	ldr	r0, [pc, #144]	; (10e8c <main+0xe4>)
   10dfc:	e7ed      	b.n	10dda <main+0x32>
	err = bt_enable(NULL);
   10dfe:	f004 f933 	bl	15068 <bt_enable>
	if (err) {
   10e02:	4601      	mov	r1, r0
   10e04:	b108      	cbz	r0, 10e0a <main+0x62>
		printk("Bluetooth init failed (err %d)\n", err);
   10e06:	4822      	ldr	r0, [pc, #136]	; (10e90 <main+0xe8>)
   10e08:	e7d8      	b.n	10dbc <main+0x14>
	printk("Bluetooth initialized\n");
   10e0a:	4822      	ldr	r0, [pc, #136]	; (10e94 <main+0xec>)
   10e0c:	f014 fe90 	bl	25b30 <printk>
		settings_load();
   10e10:	f015 fb25 	bl	2645e <settings_load>
	err = bt_lbs_init(&lbs_callbacs);
   10e14:	4820      	ldr	r0, [pc, #128]	; (10e98 <main+0xf0>)
   10e16:	f001 ff91 	bl	12d3c <bt_lbs_init>
	if (err) {
   10e1a:	4601      	mov	r1, r0
   10e1c:	b108      	cbz	r0, 10e22 <main+0x7a>
		printk("Failed to init LBS (err:%d)\n", err);
   10e1e:	481f      	ldr	r0, [pc, #124]	; (10e9c <main+0xf4>)
   10e20:	e7cc      	b.n	10dbc <main+0x14>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
   10e22:	4d1f      	ldr	r5, [pc, #124]	; (10ea0 <main+0xf8>)
   10e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10e26:	ac03      	add	r4, sp, #12
   10e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10e2a:	682b      	ldr	r3, [r5, #0]
   10e2c:	6023      	str	r3, [r4, #0]
   10e2e:	2301      	movs	r3, #1
   10e30:	9300      	str	r3, [sp, #0]
   10e32:	491c      	ldr	r1, [pc, #112]	; (10ea4 <main+0xfc>)
   10e34:	4b1c      	ldr	r3, [pc, #112]	; (10ea8 <main+0x100>)
   10e36:	2202      	movs	r2, #2
   10e38:	a803      	add	r0, sp, #12
   10e3a:	f004 ff7f 	bl	15d3c <bt_le_adv_start>
	if (err) {
   10e3e:	4604      	mov	r4, r0
   10e40:	b128      	cbz	r0, 10e4e <main+0xa6>
		printk("Advertising failed to start (err %d)\n", err);
   10e42:	4601      	mov	r1, r0
   10e44:	4819      	ldr	r0, [pc, #100]	; (10eac <main+0x104>)
   10e46:	f014 fe73 	bl	25b30 <printk>
}
   10e4a:	b009      	add	sp, #36	; 0x24
   10e4c:	bd30      	pop	{r4, r5, pc}
	printk("Advertising successfully started\n");
   10e4e:	4818      	ldr	r0, [pc, #96]	; (10eb0 <main+0x108>)
   10e50:	f014 fe6e 	bl	25b30 <printk>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
   10e54:	3401      	adds	r4, #1
   10e56:	f004 0101 	and.w	r1, r4, #1
   10e5a:	2000      	movs	r0, #0
   10e5c:	f00c fd8c 	bl	1d978 <dk_set_led>
	return z_impl_k_sleep(timeout);
   10e60:	2100      	movs	r1, #0
   10e62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10e66:	f010 ff23 	bl	21cb0 <z_impl_k_sleep>
	for (;;) {
   10e6a:	e7f3      	b.n	10e54 <main+0xac>
   10e6c:	0002a615 	.word	0x0002a615
   10e70:	0002a640 	.word	0x0002a640
   10e74:	00010c51 	.word	0x00010c51
   10e78:	20000500 	.word	0x20000500
   10e7c:	0002a697 	.word	0x0002a697
   10e80:	0002a65b 	.word	0x0002a65b
   10e84:	0002a67a 	.word	0x0002a67a
   10e88:	200004f0 	.word	0x200004f0
   10e8c:	0002a6c4 	.word	0x0002a6c4
   10e90:	0002a6f6 	.word	0x0002a6f6
   10e94:	0002a716 	.word	0x0002a716
   10e98:	200004e8 	.word	0x200004e8
   10e9c:	0002a72d 	.word	0x0002a72d
   10ea0:	00029b50 	.word	0x00029b50
   10ea4:	00029bf0 	.word	0x00029bf0
   10ea8:	00029be8 	.word	0x00029be8
   10eac:	0002a74a 	.word	0x0002a74a
   10eb0:	0002a770 	.word	0x0002a770

00010eb4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   10eb4:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10eb6:	4c09      	ldr	r4, [pc, #36]	; (10edc <crc8_ccitt+0x28>)
   10eb8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   10eba:	4291      	cmp	r1, r2
   10ebc:	d100      	bne.n	10ec0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   10ebe:	bd10      	pop	{r4, pc}
		val ^= p[i];
   10ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
   10ec4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10ec6:	0903      	lsrs	r3, r0, #4
   10ec8:	0100      	lsls	r0, r0, #4
   10eca:	5ce3      	ldrb	r3, [r4, r3]
   10ecc:	b2c0      	uxtb	r0, r0
   10ece:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10ed0:	0918      	lsrs	r0, r3, #4
   10ed2:	011b      	lsls	r3, r3, #4
   10ed4:	5c20      	ldrb	r0, [r4, r0]
   10ed6:	b2db      	uxtb	r3, r3
   10ed8:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   10eda:	e7ee      	b.n	10eba <crc8_ccitt+0x6>
   10edc:	0002a7ae 	.word	0x0002a7ae

00010ee0 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   10ee0:	4b01      	ldr	r3, [pc, #4]	; (10ee8 <char_out+0x8>)
   10ee2:	681b      	ldr	r3, [r3, #0]
   10ee4:	4718      	bx	r3
   10ee6:	bf00      	nop
   10ee8:	20000518 	.word	0x20000518

00010eec <__printk_hook_install>:
	_char_out = fn;
   10eec:	4b01      	ldr	r3, [pc, #4]	; (10ef4 <__printk_hook_install+0x8>)
   10eee:	6018      	str	r0, [r3, #0]
}
   10ef0:	4770      	bx	lr
   10ef2:	bf00      	nop
   10ef4:	20000518 	.word	0x20000518

00010ef8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   10ef8:	b507      	push	{r0, r1, r2, lr}
   10efa:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   10efc:	2100      	movs	r1, #0
   10efe:	4602      	mov	r2, r0
   10f00:	9100      	str	r1, [sp, #0]
   10f02:	4803      	ldr	r0, [pc, #12]	; (10f10 <vprintk+0x18>)
   10f04:	f000 fba8 	bl	11658 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   10f08:	b003      	add	sp, #12
   10f0a:	f85d fb04 	ldr.w	pc, [sp], #4
   10f0e:	bf00      	nop
   10f10:	00010ee1 	.word	0x00010ee1

00010f14 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10f14:	b530      	push	{r4, r5, lr}
   10f16:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   10f18:	2500      	movs	r5, #0
   10f1a:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   10f1e:	4604      	mov	r4, r0
   10f20:	9500      	str	r5, [sp, #0]
   10f22:	a903      	add	r1, sp, #12
   10f24:	4805      	ldr	r0, [pc, #20]	; (10f3c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   10f26:	9505      	str	r5, [sp, #20]
   10f28:	f000 fb96 	bl	11658 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   10f2c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   10f30:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10f32:	bfb8      	it	lt
   10f34:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   10f36:	b007      	add	sp, #28
   10f38:	bd30      	pop	{r4, r5, pc}
   10f3a:	bf00      	nop
   10f3c:	00025b0b 	.word	0x00025b0b

00010f40 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   10f40:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
   10f42:	b351      	cbz	r1, 10f9a <sys_heap_free+0x5a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   10f44:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10f46:	1f0b      	subs	r3, r1, #4
   10f48:	1a9b      	subs	r3, r3, r2
   10f4a:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   10f4c:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   10f50:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   10f52:	885c      	ldrh	r4, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   10f54:	07e0      	lsls	r0, r4, #31
   10f56:	d408      	bmi.n	10f6a <sys_heap_free+0x2a>
   10f58:	4910      	ldr	r1, [pc, #64]	; (10f9c <sys_heap_free+0x5c>)
   10f5a:	4811      	ldr	r0, [pc, #68]	; (10fa0 <sys_heap_free+0x60>)
   10f5c:	22af      	movs	r2, #175	; 0xaf
   10f5e:	f014 ffef 	bl	25f40 <assert_print>
   10f62:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   10f64:	480d      	ldr	r0, [pc, #52]	; (10f9c <sys_heap_free+0x5c>)
   10f66:	f014 ffe4 	bl	25f32 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   10f6a:	4610      	mov	r0, r2
   10f6c:	f014 fe04 	bl	25b78 <chunk_size>
   10f70:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
   10f72:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   10f76:	1b40      	subs	r0, r0, r5
   10f78:	4281      	cmp	r1, r0
   10f7a:	d006      	beq.n	10f8a <sys_heap_free+0x4a>
   10f7c:	4907      	ldr	r1, [pc, #28]	; (10f9c <sys_heap_free+0x5c>)
   10f7e:	4808      	ldr	r0, [pc, #32]	; (10fa0 <sys_heap_free+0x60>)
   10f80:	22b7      	movs	r2, #183	; 0xb7
   10f82:	f014 ffdd 	bl	25f40 <assert_print>
   10f86:	21b7      	movs	r1, #183	; 0xb7
   10f88:	e7ec      	b.n	10f64 <sys_heap_free+0x24>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10f8a:	f024 0401 	bic.w	r4, r4, #1
   10f8e:	805c      	strh	r4, [r3, #2]
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
}
   10f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
   10f94:	4610      	mov	r0, r2
   10f96:	f014 beac 	b.w	25cf2 <free_chunk>
}
   10f9a:	bd38      	pop	{r3, r4, r5, pc}
   10f9c:	0002a7be 	.word	0x0002a7be
   10fa0:	0002a7df 	.word	0x0002a7df

00010fa4 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   10fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10fa8:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   10faa:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
   10fac:	6806      	ldr	r6, [r0, #0]
{
   10fae:	460f      	mov	r7, r1
   10fb0:	4614      	mov	r4, r2
	if (align != rew) {
   10fb2:	d011      	beq.n	10fd8 <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
   10fb4:	f1c1 0900 	rsb	r9, r1, #0
   10fb8:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   10fbc:	464a      	mov	r2, r9
   10fbe:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10fc0:	f103 31ff 	add.w	r1, r3, #4294967295
		gap = MIN(rew, chunk_header_bytes(h));
   10fc4:	bf28      	it	cs
   10fc6:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10fc8:	4219      	tst	r1, r3
   10fca:	d10c      	bne.n	10fe6 <sys_heap_aligned_alloc+0x42>
   10fcc:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   10fce:	b9c4      	cbnz	r4, 11002 <sys_heap_aligned_alloc+0x5e>
		return NULL;
   10fd0:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   10fd2:	4628      	mov	r0, r5
   10fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   10fd8:	2904      	cmp	r1, #4
   10fda:	d80f      	bhi.n	10ffc <sys_heap_aligned_alloc+0x58>
}
   10fdc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   10fe0:	4611      	mov	r1, r2
   10fe2:	f014 beb7 	b.w	25d54 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10fe6:	492a      	ldr	r1, [pc, #168]	; (11090 <sys_heap_aligned_alloc+0xec>)
   10fe8:	482a      	ldr	r0, [pc, #168]	; (11094 <sys_heap_aligned_alloc+0xf0>)
   10fea:	f44f 72a2 	mov.w	r2, #324	; 0x144
   10fee:	f014 ffa7 	bl	25f40 <assert_print>
   10ff2:	4827      	ldr	r0, [pc, #156]	; (11090 <sys_heap_aligned_alloc+0xec>)
   10ff4:	f44f 71a2 	mov.w	r1, #324	; 0x144
   10ff8:	f014 ff9b 	bl	25f32 <assert_post_action>
		rew = 0;
   10ffc:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
   10ffe:	2204      	movs	r2, #4
   11000:	e7e5      	b.n	10fce <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   11002:	68b3      	ldr	r3, [r6, #8]
   11004:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   11008:	d9e2      	bls.n	10fd0 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1100a:	f104 010b 	add.w	r1, r4, #11
   1100e:	4439      	add	r1, r7
   11010:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   11012:	08c9      	lsrs	r1, r1, #3
   11014:	4630      	mov	r0, r6
   11016:	f014 fe05 	bl	25c24 <alloc_chunk>
	if (c0 == 0) {
   1101a:	4680      	mov	r8, r0
   1101c:	2800      	cmp	r0, #0
   1101e:	d0d7      	beq.n	10fd0 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   11020:	f109 0504 	add.w	r5, r9, #4
   11024:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   11028:	1e7b      	subs	r3, r7, #1
   1102a:	4435      	add	r5, r6
   1102c:	441d      	add	r5, r3
   1102e:	427f      	negs	r7, r7
   11030:	403d      	ands	r5, r7
   11032:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11036:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11038:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1103a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1103c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1103e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   11042:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   11044:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11048:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1104c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   11050:	d208      	bcs.n	11064 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c0, c);
   11052:	4601      	mov	r1, r0
   11054:	463a      	mov	r2, r7
   11056:	4630      	mov	r0, r6
   11058:	f014 fe31 	bl	25cbe <split_chunks>
		free_list_add(h, c0);
   1105c:	4641      	mov	r1, r8
   1105e:	4630      	mov	r0, r6
   11060:	f014 fd8f 	bl	25b82 <free_list_add>
	return c + chunk_size(h, c);
   11064:	4639      	mov	r1, r7
   11066:	4630      	mov	r0, r6
   11068:	f014 fd86 	bl	25b78 <chunk_size>
   1106c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1106e:	4284      	cmp	r4, r0
   11070:	d207      	bcs.n	11082 <sys_heap_aligned_alloc+0xde>
		split_chunks(h, c, c_end);
   11072:	4630      	mov	r0, r6
   11074:	4622      	mov	r2, r4
   11076:	f014 fe22 	bl	25cbe <split_chunks>
		free_list_add(h, c_end);
   1107a:	4621      	mov	r1, r4
   1107c:	4630      	mov	r0, r6
   1107e:	f014 fd80 	bl	25b82 <free_list_add>
	void *cmem = &buf[c];
   11082:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11086:	8873      	ldrh	r3, [r6, #2]
   11088:	f043 0301 	orr.w	r3, r3, #1
   1108c:	8073      	strh	r3, [r6, #2]
   1108e:	e7a0      	b.n	10fd2 <sys_heap_aligned_alloc+0x2e>
   11090:	0002a7be 	.word	0x0002a7be
   11094:	0002a7df 	.word	0x0002a7df

00011098 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   11098:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   1109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1109e:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   110a0:	d30a      	bcc.n	110b8 <sys_heap_init+0x20>
   110a2:	4933      	ldr	r1, [pc, #204]	; (11170 <sys_heap_init+0xd8>)
   110a4:	4833      	ldr	r0, [pc, #204]	; (11174 <sys_heap_init+0xdc>)
   110a6:	f240 12eb 	movw	r2, #491	; 0x1eb
   110aa:	f014 ff49 	bl	25f40 <assert_print>
   110ae:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   110b2:	482f      	ldr	r0, [pc, #188]	; (11170 <sys_heap_init+0xd8>)
   110b4:	f014 ff3d 	bl	25f32 <assert_post_action>
   110b8:	2a04      	cmp	r2, #4
   110ba:	d808      	bhi.n	110ce <sys_heap_init+0x36>
   110bc:	492c      	ldr	r1, [pc, #176]	; (11170 <sys_heap_init+0xd8>)
   110be:	482d      	ldr	r0, [pc, #180]	; (11174 <sys_heap_init+0xdc>)
   110c0:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   110c4:	f014 ff3c 	bl	25f40 <assert_print>
   110c8:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   110cc:	e7f1      	b.n	110b2 <sys_heap_init+0x1a>
	bytes -= heap_footer_bytes(bytes);
   110ce:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   110d0:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   110d2:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   110d4:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   110d8:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   110dc:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   110de:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   110e0:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   110e4:	d808      	bhi.n	110f8 <sys_heap_init+0x60>
   110e6:	4922      	ldr	r1, [pc, #136]	; (11170 <sys_heap_init+0xd8>)
   110e8:	4822      	ldr	r0, [pc, #136]	; (11174 <sys_heap_init+0xdc>)
   110ea:	f240 12fb 	movw	r2, #507	; 0x1fb
   110ee:	f014 ff27 	bl	25f40 <assert_print>
   110f2:	f240 11fb 	movw	r1, #507	; 0x1fb
   110f6:	e7dc      	b.n	110b2 <sys_heap_init+0x1a>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   110f8:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   110fc:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11100:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   11104:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11106:	3107      	adds	r1, #7
   11108:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1110a:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
   1110c:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1110e:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
   11110:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
   11114:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
   11116:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11118:	d908      	bls.n	1112c <sys_heap_init+0x94>
   1111a:	4915      	ldr	r1, [pc, #84]	; (11170 <sys_heap_init+0xd8>)
   1111c:	4815      	ldr	r0, [pc, #84]	; (11174 <sys_heap_init+0xdc>)
   1111e:	f44f 7203 	mov.w	r2, #524	; 0x20c
   11122:	f014 ff0d 	bl	25f40 <assert_print>
   11126:	f44f 7103 	mov.w	r1, #524	; 0x20c
   1112a:	e7c2      	b.n	110b2 <sys_heap_init+0x1a>
   1112c:	f100 050c 	add.w	r5, r0, #12
   11130:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   11134:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   11138:	42b5      	cmp	r5, r6
   1113a:	d1fb      	bne.n	11134 <sys_heap_init+0x9c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1113c:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1113e:	f045 0501 	orr.w	r5, r5, #1
   11142:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   11144:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11148:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1114a:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
   1114c:	8004      	strh	r4, [r0, #0]
   1114e:	8077      	strh	r7, [r6, #2]
   11150:	1886      	adds	r6, r0, r2
   11152:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   11156:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   1115a:	8074      	strh	r4, [r6, #2]
   1115c:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1115e:	885a      	ldrh	r2, [r3, #2]
   11160:	f042 0201 	orr.w	r2, r2, #1
   11164:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   11166:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1116a:	f014 bd0a 	b.w	25b82 <free_list_add>
   1116e:	bf00      	nop
   11170:	0002a7be 	.word	0x0002a7be
   11174:	0002a7df 	.word	0x0002a7df

00011178 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1117c:	4604      	mov	r4, r0
   1117e:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11180:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11182:	0719      	lsls	r1, r3, #28
{
   11184:	4616      	mov	r6, r2
	if (processing) {
   11186:	d412      	bmi.n	111ae <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   11188:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1118a:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
   1118e:	d162      	bne.n	11256 <process_event+0xde>
			evt = process_recheck(mgr);
   11190:	4620      	mov	r0, r4
   11192:	f014 fe08 	bl	25da6 <process_recheck>
		}

		if (evt == EVT_NOP) {
   11196:	b188      	cbz	r0, 111bc <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   11198:	3801      	subs	r0, #1
   1119a:	2804      	cmp	r0, #4
   1119c:	f200 8121 	bhi.w	113e2 <process_event+0x26a>
   111a0:	e8df f010 	tbh	[pc, r0, lsl #1]
   111a4:	011f0059 	.word	0x011f0059
   111a8:	00c4007e 	.word	0x00c4007e
   111ac:	00f1      	.short	0x00f1
		if (evt == EVT_COMPLETE) {
   111ae:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   111b0:	bf0c      	ite	eq
   111b2:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   111b6:	f043 0120 	orrne.w	r1, r3, #32
   111ba:	83a1      	strh	r1, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   111bc:	f104 0014 	add.w	r0, r4, #20
   111c0:	f00e ff14 	bl	1ffec <z_spin_unlock_valid>
   111c4:	2800      	cmp	r0, #0
   111c6:	f000 80a9 	beq.w	1131c <process_event+0x1a4>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   111ca:	f386 8811 	msr	BASEPRI, r6
   111ce:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   111d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111d6:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   111da:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   111dc:	2801      	cmp	r0, #1
   111de:	d81e      	bhi.n	1121e <process_event+0xa6>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   111e0:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
   111e2:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   111e4:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   111e6:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   111ea:	d114      	bne.n	11216 <process_event+0x9e>
		*clients = mgr->clients;
   111ec:	463a      	mov	r2, r7
   111ee:	e003      	b.n	111f8 <process_event+0x80>
				mgr->refs += 1U;
   111f0:	8be0      	ldrh	r0, [r4, #30]
   111f2:	3001      	adds	r0, #1
   111f4:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   111f6:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   111f8:	2a00      	cmp	r2, #0
   111fa:	d1f9      	bne.n	111f0 <process_event+0x78>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   111fc:	f023 0307 	bic.w	r3, r3, #7
   11200:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   11204:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11206:	4620      	mov	r0, r4
   11208:	f014 fdcd 	bl	25da6 <process_recheck>
   1120c:	b390      	cbz	r0, 11274 <process_event+0xfc>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1120e:	f042 0220 	orr.w	r2, r2, #32
   11212:	83a2      	strh	r2, [r4, #28]
   11214:	e02e      	b.n	11274 <process_event+0xfc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11216:	f023 0307 	bic.w	r3, r3, #7
   1121a:	b29a      	uxth	r2, r3
}
   1121c:	e7f2      	b.n	11204 <process_event+0x8c>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1121e:	2a04      	cmp	r2, #4
   11220:	d133      	bne.n	1128a <process_event+0x112>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11222:	f023 0307 	bic.w	r3, r3, #7
   11226:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11228:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1122a:	4620      	mov	r0, r4
   1122c:	f014 fdbb 	bl	25da6 <process_recheck>
   11230:	b110      	cbz	r0, 11238 <process_event+0xc0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11232:	f042 0220 	orr.w	r2, r2, #32
   11236:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11238:	8ba3      	ldrh	r3, [r4, #28]
   1123a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1123e:	4589      	cmp	r9, r1
   11240:	f040 80d8 	bne.w	113f4 <process_event+0x27c>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11244:	8ba1      	ldrh	r1, [r4, #28]
   11246:	06ca      	lsls	r2, r1, #27
   11248:	f140 811e 	bpl.w	11488 <process_event+0x310>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1124c:	f021 0310 	bic.w	r3, r1, #16
   11250:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   11252:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
   11256:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1125a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   1125c:	f1b8 0f00 	cmp.w	r8, #0
   11260:	dab9      	bge.n	111d6 <process_event+0x5e>
	list->head = NULL;
   11262:	2200      	movs	r2, #0
		*clients = mgr->clients;
   11264:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11266:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   1126a:	e9c4 2200 	strd	r2, r2, [r4]
   1126e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11272:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11274:	8ba3      	ldrh	r3, [r4, #28]
   11276:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1127a:	4589      	cmp	r9, r1
   1127c:	f040 80bb 	bne.w	113f6 <process_event+0x27e>
		    || !sys_slist_is_empty(&clients)
   11280:	2f00      	cmp	r7, #0
   11282:	d0df      	beq.n	11244 <process_event+0xcc>
   11284:	2500      	movs	r5, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11286:	46aa      	mov	sl, r5
   11288:	e03e      	b.n	11308 <process_event+0x190>
		__ASSERT_NO_MSG(false);
   1128a:	4984      	ldr	r1, [pc, #528]	; (1149c <process_event+0x324>)
   1128c:	4884      	ldr	r0, [pc, #528]	; (114a0 <process_event+0x328>)
   1128e:	f240 121b 	movw	r2, #283	; 0x11b
   11292:	f014 fe55 	bl	25f40 <assert_print>
   11296:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1129a:	4880      	ldr	r0, [pc, #512]	; (1149c <process_event+0x324>)
   1129c:	f014 fe49 	bl	25f32 <assert_post_action>
   112a0:	b141      	cbz	r1, 112b4 <process_event+0x13c>
   112a2:	497e      	ldr	r1, [pc, #504]	; (1149c <process_event+0x324>)
   112a4:	487e      	ldr	r0, [pc, #504]	; (114a0 <process_event+0x328>)
   112a6:	f44f 72ab 	mov.w	r2, #342	; 0x156
   112aa:	f014 fe49 	bl	25f40 <assert_print>
   112ae:	f44f 71ab 	mov.w	r1, #342	; 0x156
   112b2:	e7f2      	b.n	1129a <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   112b4:	6823      	ldr	r3, [r4, #0]
   112b6:	b943      	cbnz	r3, 112ca <process_event+0x152>
   112b8:	4978      	ldr	r1, [pc, #480]	; (1149c <process_event+0x324>)
   112ba:	4879      	ldr	r0, [pc, #484]	; (114a0 <process_event+0x328>)
   112bc:	f240 1257 	movw	r2, #343	; 0x157
   112c0:	f014 fe3e 	bl	25f40 <assert_print>
   112c4:	f240 1157 	movw	r1, #343	; 0x157
   112c8:	e7e7      	b.n	1129a <process_event+0x122>
			transit = mgr->transitions->start;
   112ca:	6923      	ldr	r3, [r4, #16]
   112cc:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   112ce:	b945      	cbnz	r5, 112e2 <process_event+0x16a>
   112d0:	4972      	ldr	r1, [pc, #456]	; (1149c <process_event+0x324>)
   112d2:	4873      	ldr	r0, [pc, #460]	; (114a0 <process_event+0x328>)
   112d4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   112d8:	f014 fe32 	bl	25f40 <assert_print>
   112dc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   112e0:	e7db      	b.n	1129a <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   112e2:	8ba3      	ldrh	r3, [r4, #28]
   112e4:	f023 0307 	bic.w	r3, r3, #7
   112e8:	f043 0306 	orr.w	r3, r3, #6
   112ec:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   112ee:	83a3      	strh	r3, [r4, #28]
   112f0:	460f      	mov	r7, r1
		res = 0;
   112f2:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   112f4:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   112f8:	68a2      	ldr	r2, [r4, #8]
   112fa:	2a00      	cmp	r2, #0
   112fc:	d17d      	bne.n	113fa <process_event+0x282>
		    || !sys_slist_is_empty(&clients)
   112fe:	2f00      	cmp	r7, #0
   11300:	d17e      	bne.n	11400 <process_event+0x288>
		    || (transit != NULL)) {
   11302:	2d00      	cmp	r5, #0
   11304:	d09e      	beq.n	11244 <process_event+0xcc>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11306:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11308:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   1130c:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   11310:	83a3      	strh	r3, [r4, #28]
   11312:	4658      	mov	r0, fp
   11314:	f00e fe6a 	bl	1ffec <z_spin_unlock_valid>
   11318:	2800      	cmp	r0, #0
   1131a:	d173      	bne.n	11404 <process_event+0x28c>
   1131c:	4961      	ldr	r1, [pc, #388]	; (114a4 <process_event+0x32c>)
   1131e:	4860      	ldr	r0, [pc, #384]	; (114a0 <process_event+0x328>)
   11320:	22c2      	movs	r2, #194	; 0xc2
   11322:	f014 fe0d 	bl	25f40 <assert_print>
   11326:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11328:	485e      	ldr	r0, [pc, #376]	; (114a4 <process_event+0x32c>)
   1132a:	e7b7      	b.n	1129c <process_event+0x124>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   1132c:	2902      	cmp	r1, #2
   1132e:	d008      	beq.n	11342 <process_event+0x1ca>
   11330:	495a      	ldr	r1, [pc, #360]	; (1149c <process_event+0x324>)
   11332:	485b      	ldr	r0, [pc, #364]	; (114a0 <process_event+0x328>)
   11334:	f240 125d 	movw	r2, #349	; 0x15d
   11338:	f014 fe02 	bl	25f40 <assert_print>
   1133c:	f240 115d 	movw	r1, #349	; 0x15d
   11340:	e7ab      	b.n	1129a <process_event+0x122>
			__ASSERT_NO_MSG(mgr->refs == 0);
   11342:	8be7      	ldrh	r7, [r4, #30]
   11344:	b147      	cbz	r7, 11358 <process_event+0x1e0>
   11346:	4955      	ldr	r1, [pc, #340]	; (1149c <process_event+0x324>)
   11348:	4855      	ldr	r0, [pc, #340]	; (114a0 <process_event+0x328>)
   1134a:	f44f 72af 	mov.w	r2, #350	; 0x15e
   1134e:	f014 fdf7 	bl	25f40 <assert_print>
   11352:	f44f 71af 	mov.w	r1, #350	; 0x15e
   11356:	e7a0      	b.n	1129a <process_event+0x122>
			transit = mgr->transitions->stop;
   11358:	6923      	ldr	r3, [r4, #16]
   1135a:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1135c:	b945      	cbnz	r5, 11370 <process_event+0x1f8>
   1135e:	494f      	ldr	r1, [pc, #316]	; (1149c <process_event+0x324>)
   11360:	484f      	ldr	r0, [pc, #316]	; (114a0 <process_event+0x328>)
   11362:	f240 1261 	movw	r2, #353	; 0x161
   11366:	f014 fdeb 	bl	25f40 <assert_print>
   1136a:	f240 1161 	movw	r1, #353	; 0x161
   1136e:	e794      	b.n	1129a <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11370:	8ba3      	ldrh	r3, [r4, #28]
   11372:	f023 0307 	bic.w	r3, r3, #7
   11376:	f043 0304 	orr.w	r3, r3, #4
   1137a:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1137c:	83a3      	strh	r3, [r4, #28]
		res = 0;
   1137e:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11380:	f04f 0904 	mov.w	r9, #4
   11384:	e7b8      	b.n	112f8 <process_event+0x180>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11386:	2901      	cmp	r1, #1
   11388:	d008      	beq.n	1139c <process_event+0x224>
   1138a:	4944      	ldr	r1, [pc, #272]	; (1149c <process_event+0x324>)
   1138c:	4844      	ldr	r0, [pc, #272]	; (114a0 <process_event+0x328>)
   1138e:	f44f 72b2 	mov.w	r2, #356	; 0x164
   11392:	f014 fdd5 	bl	25f40 <assert_print>
   11396:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1139a:	e77e      	b.n	1129a <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1139c:	6823      	ldr	r3, [r4, #0]
   1139e:	b943      	cbnz	r3, 113b2 <process_event+0x23a>
   113a0:	493e      	ldr	r1, [pc, #248]	; (1149c <process_event+0x324>)
   113a2:	483f      	ldr	r0, [pc, #252]	; (114a0 <process_event+0x328>)
   113a4:	f240 1265 	movw	r2, #357	; 0x165
   113a8:	f014 fdca 	bl	25f40 <assert_print>
   113ac:	f240 1165 	movw	r1, #357	; 0x165
   113b0:	e773      	b.n	1129a <process_event+0x122>
			transit = mgr->transitions->reset;
   113b2:	6923      	ldr	r3, [r4, #16]
   113b4:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   113b6:	b945      	cbnz	r5, 113ca <process_event+0x252>
   113b8:	4938      	ldr	r1, [pc, #224]	; (1149c <process_event+0x324>)
   113ba:	4839      	ldr	r0, [pc, #228]	; (114a0 <process_event+0x328>)
   113bc:	f44f 72b4 	mov.w	r2, #360	; 0x168
   113c0:	f014 fdbe 	bl	25f40 <assert_print>
   113c4:	f44f 71b4 	mov.w	r1, #360	; 0x168
   113c8:	e767      	b.n	1129a <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113ca:	8ba3      	ldrh	r3, [r4, #28]
   113cc:	f023 0307 	bic.w	r3, r3, #7
   113d0:	f043 0305 	orr.w	r3, r3, #5
   113d4:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   113d6:	2700      	movs	r7, #0
   113d8:	83a3      	strh	r3, [r4, #28]
		res = 0;
   113da:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   113dc:	f04f 0905 	mov.w	r9, #5
   113e0:	e78a      	b.n	112f8 <process_event+0x180>
			__ASSERT_NO_MSG(false);
   113e2:	492e      	ldr	r1, [pc, #184]	; (1149c <process_event+0x324>)
   113e4:	482e      	ldr	r0, [pc, #184]	; (114a0 <process_event+0x328>)
   113e6:	f240 126b 	movw	r2, #363	; 0x16b
   113ea:	f014 fda9 	bl	25f40 <assert_print>
   113ee:	f240 116b 	movw	r1, #363	; 0x16b
   113f2:	e752      	b.n	1129a <process_event+0x122>
				   && !sys_slist_is_empty(&mgr->monitors);
   113f4:	2700      	movs	r7, #0
   113f6:	2500      	movs	r5, #0
   113f8:	e77e      	b.n	112f8 <process_event+0x180>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   113fa:	f04f 0a01 	mov.w	sl, #1
   113fe:	e783      	b.n	11308 <process_event+0x190>
   11400:	4692      	mov	sl, r2
   11402:	e781      	b.n	11308 <process_event+0x190>
   11404:	f386 8811 	msr	BASEPRI, r6
   11408:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1140c:	f1ba 0f00 	cmp.w	sl, #0
   11410:	d117      	bne.n	11442 <process_event+0x2ca>
	while (!sys_slist_is_empty(list)) {
   11412:	bb4f      	cbnz	r7, 11468 <process_event+0x2f0>
			if (transit != NULL) {
   11414:	b115      	cbz	r5, 1141c <process_event+0x2a4>
				transit(mgr, transition_complete);
   11416:	4924      	ldr	r1, [pc, #144]	; (114a8 <process_event+0x330>)
   11418:	4620      	mov	r0, r4
   1141a:	47a8      	blx	r5
	__asm__ volatile(
   1141c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11420:	f3ef 8611 	mrs	r6, BASEPRI
   11424:	f383 8812 	msr	BASEPRI_MAX, r3
   11428:	f3bf 8f6f 	isb	sy
   1142c:	4658      	mov	r0, fp
   1142e:	f00e fdcf 	bl	1ffd0 <z_spin_lock_valid>
   11432:	bb08      	cbnz	r0, 11478 <process_event+0x300>
   11434:	491b      	ldr	r1, [pc, #108]	; (114a4 <process_event+0x32c>)
   11436:	481a      	ldr	r0, [pc, #104]	; (114a0 <process_event+0x328>)
   11438:	2294      	movs	r2, #148	; 0x94
   1143a:	f014 fd81 	bl	25f40 <assert_print>
   1143e:	2194      	movs	r1, #148	; 0x94
   11440:	e772      	b.n	11328 <process_event+0x1b0>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11442:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11444:	2900      	cmp	r1, #0
   11446:	d0e4      	beq.n	11412 <process_event+0x29a>
	return node->next;
   11448:	680e      	ldr	r6, [r1, #0]
   1144a:	2900      	cmp	r1, #0
   1144c:	d0e1      	beq.n	11412 <process_event+0x29a>
		mon->callback(mgr, mon, state, res);
   1144e:	f8d1 a004 	ldr.w	sl, [r1, #4]
   11452:	4643      	mov	r3, r8
   11454:	464a      	mov	r2, r9
   11456:	4620      	mov	r0, r4
   11458:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1145a:	b11e      	cbz	r6, 11464 <process_event+0x2ec>
   1145c:	6833      	ldr	r3, [r6, #0]
   1145e:	4631      	mov	r1, r6
   11460:	461e      	mov	r6, r3
   11462:	e7f2      	b.n	1144a <process_event+0x2d2>
   11464:	4633      	mov	r3, r6
   11466:	e7fa      	b.n	1145e <process_event+0x2e6>
   11468:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
   1146a:	4643      	mov	r3, r8
   1146c:	464a      	mov	r2, r9
   1146e:	4620      	mov	r0, r4
   11470:	683f      	ldr	r7, [r7, #0]
   11472:	f014 fcc4 	bl	25dfe <notify_one>
   11476:	e7cc      	b.n	11412 <process_event+0x29a>
	z_spin_lock_set_owner(l);
   11478:	4658      	mov	r0, fp
   1147a:	f00e fdc7 	bl	2000c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1147e:	8ba3      	ldrh	r3, [r4, #28]
   11480:	f023 0308 	bic.w	r3, r3, #8
   11484:	83a3      	strh	r3, [r4, #28]
   11486:	e6dd      	b.n	11244 <process_event+0xcc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11488:	068b      	lsls	r3, r1, #26
   1148a:	f57f ae97 	bpl.w	111bc <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1148e:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11492:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   11494:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
   11498:	e67a      	b.n	11190 <process_event+0x18>
   1149a:	bf00      	nop
   1149c:	0002a7f7 	.word	0x0002a7f7
   114a0:	0002a7df 	.word	0x0002a7df
   114a4:	0002a819 	.word	0x0002a819
   114a8:	000114ad 	.word	0x000114ad

000114ac <transition_complete>:
{
   114ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   114ae:	4604      	mov	r4, r0
   114b0:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   114b2:	f100 0614 	add.w	r6, r0, #20
   114b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   114ba:	f3ef 8711 	mrs	r7, BASEPRI
   114be:	f383 8812 	msr	BASEPRI_MAX, r3
   114c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   114c6:	4630      	mov	r0, r6
   114c8:	f00e fd82 	bl	1ffd0 <z_spin_lock_valid>
   114cc:	b940      	cbnz	r0, 114e0 <transition_complete+0x34>
   114ce:	490a      	ldr	r1, [pc, #40]	; (114f8 <transition_complete+0x4c>)
   114d0:	480a      	ldr	r0, [pc, #40]	; (114fc <transition_complete+0x50>)
   114d2:	2294      	movs	r2, #148	; 0x94
   114d4:	f014 fd34 	bl	25f40 <assert_print>
   114d8:	4807      	ldr	r0, [pc, #28]	; (114f8 <transition_complete+0x4c>)
   114da:	2194      	movs	r1, #148	; 0x94
   114dc:	f014 fd29 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   114e0:	4630      	mov	r0, r6
   114e2:	f00e fd93 	bl	2000c <z_spin_lock_set_owner>
	mgr->last_res = res;
   114e6:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   114e8:	463a      	mov	r2, r7
   114ea:	4620      	mov	r0, r4
   114ec:	2101      	movs	r1, #1
}
   114ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   114f2:	f7ff be41 	b.w	11178 <process_event>
   114f6:	bf00      	nop
   114f8:	0002a819 	.word	0x0002a819
   114fc:	0002a7df 	.word	0x0002a7df

00011500 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11504:	4604      	mov	r4, r0
   11506:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11508:	f014 fc69 	bl	25dde <validate_args>

	if (rv < 0) {
   1150c:	1e05      	subs	r5, r0, #0
   1150e:	db5c      	blt.n	115ca <onoff_request+0xca>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11510:	f104 0914 	add.w	r9, r4, #20
   11514:	f04f 0340 	mov.w	r3, #64	; 0x40
   11518:	f3ef 8a11 	mrs	sl, BASEPRI
   1151c:	f383 8812 	msr	BASEPRI_MAX, r3
   11520:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11524:	4648      	mov	r0, r9
   11526:	f00e fd53 	bl	1ffd0 <z_spin_lock_valid>
   1152a:	4680      	mov	r8, r0
   1152c:	b938      	cbnz	r0, 1153e <onoff_request+0x3e>
   1152e:	4932      	ldr	r1, [pc, #200]	; (115f8 <onoff_request+0xf8>)
   11530:	4832      	ldr	r0, [pc, #200]	; (115fc <onoff_request+0xfc>)
   11532:	2294      	movs	r2, #148	; 0x94
   11534:	f014 fd04 	bl	25f40 <assert_print>
   11538:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1153a:	482f      	ldr	r0, [pc, #188]	; (115f8 <onoff_request+0xf8>)
   1153c:	e03a      	b.n	115b4 <onoff_request+0xb4>
	z_spin_lock_set_owner(l);
   1153e:	4648      	mov	r0, r9
   11540:	f00e fd64 	bl	2000c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11544:	8be3      	ldrh	r3, [r4, #30]
   11546:	8ba6      	ldrh	r6, [r4, #28]
   11548:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1154c:	4293      	cmp	r3, r2
   1154e:	f006 0607 	and.w	r6, r6, #7
   11552:	d03d      	beq.n	115d0 <onoff_request+0xd0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   11554:	2e02      	cmp	r6, #2
   11556:	d10e      	bne.n	11576 <onoff_request+0x76>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   11558:	3301      	adds	r3, #1
   1155a:	83e3      	strh	r3, [r4, #30]
	rv = state;
   1155c:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1155e:	4648      	mov	r0, r9
   11560:	f00e fd44 	bl	1ffec <z_spin_unlock_valid>
   11564:	2800      	cmp	r0, #0
   11566:	d139      	bne.n	115dc <onoff_request+0xdc>
   11568:	4923      	ldr	r1, [pc, #140]	; (115f8 <onoff_request+0xf8>)
   1156a:	4824      	ldr	r0, [pc, #144]	; (115fc <onoff_request+0xfc>)
   1156c:	22c2      	movs	r2, #194	; 0xc2
   1156e:	f014 fce7 	bl	25f40 <assert_print>
   11572:	21c2      	movs	r1, #194	; 0xc2
   11574:	e7e1      	b.n	1153a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   11576:	2e06      	cmp	r6, #6
   11578:	d813      	bhi.n	115a2 <onoff_request+0xa2>
   1157a:	e8df f006 	tbb	[pc, r6]
   1157e:	2c09      	.short	0x2c09
   11580:	04091212 	.word	0x04091212
   11584:	09          	.byte	0x09
   11585:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
   11586:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1158a:	f04f 0800 	mov.w	r8, #0
   1158e:	e7e6      	b.n	1155e <onoff_request+0x5e>
	parent->next = child;
   11590:	2300      	movs	r3, #0
   11592:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   11594:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   11596:	b97b      	cbnz	r3, 115b8 <onoff_request+0xb8>
	list->head = node;
   11598:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1159c:	b17e      	cbz	r6, 115be <onoff_request+0xbe>
	rv = state;
   1159e:	4635      	mov	r5, r6
   115a0:	e7f3      	b.n	1158a <onoff_request+0x8a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   115a2:	4917      	ldr	r1, [pc, #92]	; (11600 <onoff_request+0x100>)
   115a4:	4815      	ldr	r0, [pc, #84]	; (115fc <onoff_request+0xfc>)
   115a6:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   115aa:	f014 fcc9 	bl	25f40 <assert_print>
   115ae:	4814      	ldr	r0, [pc, #80]	; (11600 <onoff_request+0x100>)
   115b0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   115b4:	f014 fcbd 	bl	25f32 <assert_post_action>
	parent->next = child;
   115b8:	601f      	str	r7, [r3, #0]
	list->tail = node;
   115ba:	6067      	str	r7, [r4, #4]
}
   115bc:	e7ee      	b.n	1159c <onoff_request+0x9c>
		process_event(mgr, EVT_RECHECK, key);
   115be:	4652      	mov	r2, sl
   115c0:	2102      	movs	r1, #2
   115c2:	4620      	mov	r0, r4
   115c4:	f7ff fdd8 	bl	11178 <process_event>
   115c8:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   115ca:	4628      	mov	r0, r5
   115cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   115d0:	f06f 050a 	mvn.w	r5, #10
   115d4:	e7d9      	b.n	1158a <onoff_request+0x8a>
	if (state == ONOFF_STATE_ON) {
   115d6:	f06f 0504 	mvn.w	r5, #4
   115da:	e7d6      	b.n	1158a <onoff_request+0x8a>
	__asm__ volatile(
   115dc:	f38a 8811 	msr	BASEPRI, sl
   115e0:	f3bf 8f6f 	isb	sy
		if (notify) {
   115e4:	f1b8 0f00 	cmp.w	r8, #0
   115e8:	d0ef      	beq.n	115ca <onoff_request+0xca>
			notify_one(mgr, cli, state, 0);
   115ea:	2300      	movs	r3, #0
   115ec:	4632      	mov	r2, r6
   115ee:	4639      	mov	r1, r7
   115f0:	4620      	mov	r0, r4
   115f2:	f014 fc04 	bl	25dfe <notify_one>
   115f6:	e7e8      	b.n	115ca <onoff_request+0xca>
   115f8:	0002a819 	.word	0x0002a819
   115fc:	0002a7df 	.word	0x0002a7df
   11600:	0002a7f7 	.word	0x0002a7f7

00011604 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   11604:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11606:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   11608:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
   1160a:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   1160e:	2a02      	cmp	r2, #2
{
   11610:	4603      	mov	r3, r0
	switch (method) {
   11612:	d00a      	beq.n	1162a <sys_notify_finalize+0x26>
   11614:	2a03      	cmp	r2, #3
   11616:	f04f 0100 	mov.w	r1, #0
   1161a:	d003      	beq.n	11624 <sys_notify_finalize+0x20>
   1161c:	2a01      	cmp	r2, #1
   1161e:	d10a      	bne.n	11636 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11620:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   11622:	e006      	b.n	11632 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   11624:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11626:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11628:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
   1162a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1162c:	2200      	movs	r2, #0
   1162e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   11630:	b950      	cbnz	r0, 11648 <sys_notify_finalize+0x44>
	sys_notify_generic_callback rv = NULL;
   11632:	2000      	movs	r0, #0
   11634:	e7f8      	b.n	11628 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   11636:	4906      	ldr	r1, [pc, #24]	; (11650 <sys_notify_finalize+0x4c>)
   11638:	4806      	ldr	r0, [pc, #24]	; (11654 <sys_notify_finalize+0x50>)
   1163a:	2245      	movs	r2, #69	; 0x45
   1163c:	f014 fc80 	bl	25f40 <assert_print>
   11640:	4803      	ldr	r0, [pc, #12]	; (11650 <sys_notify_finalize+0x4c>)
   11642:	2145      	movs	r1, #69	; 0x45
   11644:	f014 fc75 	bl	25f32 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11648:	f011 f928 	bl	2289c <z_impl_k_poll_signal_raise>
   1164c:	e7f1      	b.n	11632 <sys_notify_finalize+0x2e>
   1164e:	bf00      	nop
   11650:	0002a846 	.word	0x0002a846
   11654:	0002a7df 	.word	0x0002a7df

00011658 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   11658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1165c:	4681      	mov	r9, r0
   1165e:	b095      	sub	sp, #84	; 0x54
   11660:	468b      	mov	fp, r1
   11662:	4617      	mov	r7, r2
   11664:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11666:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11668:	7838      	ldrb	r0, [r7, #0]
   1166a:	b908      	cbnz	r0, 11670 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1166c:	4628      	mov	r0, r5
   1166e:	e358      	b.n	11d22 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   11670:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   11672:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   11674:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   11676:	d006      	beq.n	11686 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   11678:	4659      	mov	r1, fp
   1167a:	47c8      	blx	r9
   1167c:	2800      	cmp	r0, #0
   1167e:	f2c0 8350 	blt.w	11d22 <z_cbvprintf_impl+0x6ca>
   11682:	3501      	adds	r5, #1
		if (bps == NULL) {
   11684:	e1fb      	b.n	11a7e <z_cbvprintf_impl+0x426>
		} state = {
   11686:	2218      	movs	r2, #24
   11688:	2100      	movs	r1, #0
   1168a:	a80e      	add	r0, sp, #56	; 0x38
   1168c:	f015 fb01 	bl	26c92 <memset>
	if (*sp == '%') {
   11690:	787b      	ldrb	r3, [r7, #1]
   11692:	2b25      	cmp	r3, #37	; 0x25
   11694:	d07d      	beq.n	11792 <z_cbvprintf_impl+0x13a>
   11696:	2300      	movs	r3, #0
   11698:	1c78      	adds	r0, r7, #1
   1169a:	4698      	mov	r8, r3
   1169c:	469e      	mov	lr, r3
   1169e:	469c      	mov	ip, r3
   116a0:	461e      	mov	r6, r3
   116a2:	4601      	mov	r1, r0
		switch (*sp) {
   116a4:	f810 2b01 	ldrb.w	r2, [r0], #1
   116a8:	2a2b      	cmp	r2, #43	; 0x2b
   116aa:	f000 80a1 	beq.w	117f0 <z_cbvprintf_impl+0x198>
   116ae:	f200 8098 	bhi.w	117e2 <z_cbvprintf_impl+0x18a>
   116b2:	2a20      	cmp	r2, #32
   116b4:	f000 809f 	beq.w	117f6 <z_cbvprintf_impl+0x19e>
   116b8:	2a23      	cmp	r2, #35	; 0x23
   116ba:	f000 809f 	beq.w	117fc <z_cbvprintf_impl+0x1a4>
   116be:	b12b      	cbz	r3, 116cc <z_cbvprintf_impl+0x74>
   116c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   116c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   116c8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   116cc:	f1b8 0f00 	cmp.w	r8, #0
   116d0:	d005      	beq.n	116de <z_cbvprintf_impl+0x86>
   116d2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   116d6:	f043 0320 	orr.w	r3, r3, #32
   116da:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   116de:	f1be 0f00 	cmp.w	lr, #0
   116e2:	d005      	beq.n	116f0 <z_cbvprintf_impl+0x98>
   116e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   116e8:	f043 0310 	orr.w	r3, r3, #16
   116ec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   116f0:	f1bc 0f00 	cmp.w	ip, #0
   116f4:	d005      	beq.n	11702 <z_cbvprintf_impl+0xaa>
   116f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   116fa:	f043 0308 	orr.w	r3, r3, #8
   116fe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11702:	b12e      	cbz	r6, 11710 <z_cbvprintf_impl+0xb8>
   11704:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11708:	f043 0304 	orr.w	r3, r3, #4
   1170c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   11710:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11714:	f003 0044 	and.w	r0, r3, #68	; 0x44
   11718:	2844      	cmp	r0, #68	; 0x44
   1171a:	d103      	bne.n	11724 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   1171c:	f36f 1386 	bfc	r3, #6, #1
   11720:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   11724:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   11728:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   1172a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1172e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   11732:	d17f      	bne.n	11834 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   11734:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11738:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   1173c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   1173e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   11742:	781a      	ldrb	r2, [r3, #0]
   11744:	2a2e      	cmp	r2, #46	; 0x2e
   11746:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1174a:	bf0c      	ite	eq
   1174c:	2101      	moveq	r1, #1
   1174e:	2100      	movne	r1, #0
   11750:	f361 0241 	bfi	r2, r1, #1, #1
   11754:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   11758:	d178      	bne.n	1184c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   1175a:	785a      	ldrb	r2, [r3, #1]
   1175c:	2a2a      	cmp	r2, #42	; 0x2a
   1175e:	d06e      	beq.n	1183e <z_cbvprintf_impl+0x1e6>
	++sp;
   11760:	3301      	adds	r3, #1
	size_t val = 0;
   11762:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11764:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11768:	4619      	mov	r1, r3
   1176a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1176e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11772:	2e09      	cmp	r6, #9
   11774:	f240 8095 	bls.w	118a2 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   11778:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   1177c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   1177e:	f3c1 0040 	ubfx	r0, r1, #1, #1
   11782:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   11786:	460a      	mov	r2, r1
   11788:	f360 0241 	bfi	r2, r0, #1, #1
   1178c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   11790:	e05c      	b.n	1184c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   11792:	1cba      	adds	r2, r7, #2
   11794:	9203      	str	r2, [sp, #12]
   11796:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   1179a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1179e:	07da      	lsls	r2, r3, #31
   117a0:	f140 812e 	bpl.w	11a00 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   117a4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   117a8:	f1b8 0f00 	cmp.w	r8, #0
   117ac:	da07      	bge.n	117be <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   117ae:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   117b2:	f042 0204 	orr.w	r2, r2, #4
   117b6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   117ba:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   117be:	075e      	lsls	r6, r3, #29
   117c0:	f140 8127 	bpl.w	11a12 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   117c4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   117c8:	f1ba 0f00 	cmp.w	sl, #0
   117cc:	f280 8126 	bge.w	11a1c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   117d0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   117d4:	f36f 0341 	bfc	r3, #1, #1
   117d8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   117dc:	f04f 3aff 	mov.w	sl, #4294967295
   117e0:	e11c      	b.n	11a1c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   117e2:	2a2d      	cmp	r2, #45	; 0x2d
   117e4:	d00d      	beq.n	11802 <z_cbvprintf_impl+0x1aa>
   117e6:	2a30      	cmp	r2, #48	; 0x30
   117e8:	f47f af69 	bne.w	116be <z_cbvprintf_impl+0x66>
   117ec:	2301      	movs	r3, #1
	} while (loop);
   117ee:	e758      	b.n	116a2 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   117f0:	f04f 0c01 	mov.w	ip, #1
   117f4:	e755      	b.n	116a2 <z_cbvprintf_impl+0x4a>
   117f6:	f04f 0e01 	mov.w	lr, #1
   117fa:	e752      	b.n	116a2 <z_cbvprintf_impl+0x4a>
   117fc:	f04f 0801 	mov.w	r8, #1
   11800:	e74f      	b.n	116a2 <z_cbvprintf_impl+0x4a>
   11802:	2601      	movs	r6, #1
   11804:	e74d      	b.n	116a2 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   11806:	fb0e 6202 	mla	r2, lr, r2, r6
   1180a:	3a30      	subs	r2, #48	; 0x30
   1180c:	4603      	mov	r3, r0
   1180e:	4618      	mov	r0, r3
   11810:	f810 6b01 	ldrb.w	r6, [r0], #1
   11814:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11818:	f1bc 0f09 	cmp.w	ip, #9
   1181c:	d9f3      	bls.n	11806 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   1181e:	4299      	cmp	r1, r3
   11820:	d08f      	beq.n	11742 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   11822:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   11826:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   11828:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1182a:	f362 0141 	bfi	r1, r2, #1, #1
   1182e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   11832:	e786      	b.n	11742 <z_cbvprintf_impl+0xea>
   11834:	460b      	mov	r3, r1
	size_t val = 0;
   11836:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11838:	f04f 0e0a 	mov.w	lr, #10
   1183c:	e7e7      	b.n	1180e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   1183e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11842:	f042 0204 	orr.w	r2, r2, #4
   11846:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   1184a:	3302      	adds	r3, #2
	switch (*sp) {
   1184c:	781a      	ldrb	r2, [r3, #0]
   1184e:	2a6c      	cmp	r2, #108	; 0x6c
   11850:	d047      	beq.n	118e2 <z_cbvprintf_impl+0x28a>
   11852:	d82b      	bhi.n	118ac <z_cbvprintf_impl+0x254>
   11854:	2a68      	cmp	r2, #104	; 0x68
   11856:	d031      	beq.n	118bc <z_cbvprintf_impl+0x264>
   11858:	2a6a      	cmp	r2, #106	; 0x6a
   1185a:	d04b      	beq.n	118f4 <z_cbvprintf_impl+0x29c>
   1185c:	2a4c      	cmp	r2, #76	; 0x4c
   1185e:	d051      	beq.n	11904 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   11860:	461a      	mov	r2, r3
   11862:	f812 3b01 	ldrb.w	r3, [r2], #1
   11866:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   11868:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   1186a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   1186e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   11872:	f200 80be 	bhi.w	119f2 <z_cbvprintf_impl+0x39a>
   11876:	2b6d      	cmp	r3, #109	; 0x6d
   11878:	d851      	bhi.n	1191e <z_cbvprintf_impl+0x2c6>
   1187a:	2b69      	cmp	r3, #105	; 0x69
   1187c:	f200 80b9 	bhi.w	119f2 <z_cbvprintf_impl+0x39a>
   11880:	2b57      	cmp	r3, #87	; 0x57
   11882:	d867      	bhi.n	11954 <z_cbvprintf_impl+0x2fc>
   11884:	2b41      	cmp	r3, #65	; 0x41
   11886:	d003      	beq.n	11890 <z_cbvprintf_impl+0x238>
   11888:	3b45      	subs	r3, #69	; 0x45
   1188a:	2b02      	cmp	r3, #2
   1188c:	f200 80b1 	bhi.w	119f2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   11890:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11894:	2204      	movs	r2, #4
   11896:	f362 0302 	bfi	r3, r2, #0, #3
   1189a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   1189e:	2301      	movs	r3, #1
			break;
   118a0:	e073      	b.n	1198a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   118a2:	fb0c 0202 	mla	r2, ip, r2, r0
   118a6:	3a30      	subs	r2, #48	; 0x30
   118a8:	460b      	mov	r3, r1
   118aa:	e75d      	b.n	11768 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   118ac:	2a74      	cmp	r2, #116	; 0x74
   118ae:	d025      	beq.n	118fc <z_cbvprintf_impl+0x2a4>
   118b0:	2a7a      	cmp	r2, #122	; 0x7a
   118b2:	d1d5      	bne.n	11860 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   118b4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   118b8:	2106      	movs	r1, #6
   118ba:	e00c      	b.n	118d6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   118bc:	785a      	ldrb	r2, [r3, #1]
   118be:	2a68      	cmp	r2, #104	; 0x68
   118c0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   118c4:	d106      	bne.n	118d4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   118c6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   118c8:	f361 02c6 	bfi	r2, r1, #3, #4
   118cc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   118d0:	3302      	adds	r3, #2
   118d2:	e7c5      	b.n	11860 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   118d4:	2102      	movs	r1, #2
   118d6:	f361 02c6 	bfi	r2, r1, #3, #4
   118da:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   118de:	3301      	adds	r3, #1
   118e0:	e7be      	b.n	11860 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   118e2:	785a      	ldrb	r2, [r3, #1]
   118e4:	2a6c      	cmp	r2, #108	; 0x6c
   118e6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   118ea:	d101      	bne.n	118f0 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   118ec:	2104      	movs	r1, #4
   118ee:	e7eb      	b.n	118c8 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   118f0:	2103      	movs	r1, #3
   118f2:	e7f0      	b.n	118d6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   118f4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   118f8:	2105      	movs	r1, #5
   118fa:	e7ec      	b.n	118d6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   118fc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11900:	2107      	movs	r1, #7
   11902:	e7e8      	b.n	118d6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   11904:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   11908:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1190c:	f022 0202 	bic.w	r2, r2, #2
   11910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   11914:	f042 0202 	orr.w	r2, r2, #2
   11918:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   1191c:	e7df      	b.n	118de <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   1191e:	3b6e      	subs	r3, #110	; 0x6e
   11920:	b2d9      	uxtb	r1, r3
   11922:	2301      	movs	r3, #1
   11924:	408b      	lsls	r3, r1
   11926:	f240 4182 	movw	r1, #1154	; 0x482
   1192a:	420b      	tst	r3, r1
   1192c:	d137      	bne.n	1199e <z_cbvprintf_impl+0x346>
   1192e:	f013 0f24 	tst.w	r3, #36	; 0x24
   11932:	d151      	bne.n	119d8 <z_cbvprintf_impl+0x380>
   11934:	07d8      	lsls	r0, r3, #31
   11936:	d55c      	bpl.n	119f2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   11938:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1193c:	2103      	movs	r1, #3
   1193e:	f361 0302 	bfi	r3, r1, #0, #3
   11942:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   11946:	f002 0378 	and.w	r3, r2, #120	; 0x78
   1194a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   1194e:	424b      	negs	r3, r1
   11950:	414b      	adcs	r3, r1
   11952:	e01a      	b.n	1198a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   11954:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   11958:	b2c9      	uxtb	r1, r1
   1195a:	2001      	movs	r0, #1
   1195c:	fa00 f101 	lsl.w	r1, r0, r1
   11960:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   11964:	d194      	bne.n	11890 <z_cbvprintf_impl+0x238>
   11966:	f640 0601 	movw	r6, #2049	; 0x801
   1196a:	4231      	tst	r1, r6
   1196c:	d11d      	bne.n	119aa <z_cbvprintf_impl+0x352>
   1196e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   11972:	d03e      	beq.n	119f2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   11974:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11978:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1197c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   11980:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   11982:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   11986:	d034      	beq.n	119f2 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   11988:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   1198a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1198e:	f3c2 0140 	ubfx	r1, r2, #1, #1
   11992:	430b      	orrs	r3, r1
   11994:	f363 0241 	bfi	r2, r3, #1, #1
   11998:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   1199c:	e6fd      	b.n	1179a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   1199e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   119a2:	2102      	movs	r1, #2
   119a4:	f361 0302 	bfi	r3, r1, #0, #3
   119a8:	e7e8      	b.n	1197c <z_cbvprintf_impl+0x324>
   119aa:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   119ae:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   119b0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   119b4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   119b8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   119ba:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   119be:	bf02      	ittt	eq
   119c0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   119c4:	f041 0101 	orreq.w	r1, r1, #1
   119c8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   119cc:	2b63      	cmp	r3, #99	; 0x63
   119ce:	d1db      	bne.n	11988 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   119d0:	1e13      	subs	r3, r2, #0
   119d2:	bf18      	it	ne
   119d4:	2301      	movne	r3, #1
   119d6:	e7d8      	b.n	1198a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   119d8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   119dc:	2103      	movs	r1, #3
   119de:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   119e2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   119e6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   119ea:	bf14      	ite	ne
   119ec:	2301      	movne	r3, #1
   119ee:	2300      	moveq	r3, #0
   119f0:	e7cb      	b.n	1198a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   119f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   119f6:	f043 0301 	orr.w	r3, r3, #1
   119fa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   119fe:	e7c3      	b.n	11988 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   11a00:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   11a04:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11a06:	bfb4      	ite	lt
   11a08:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   11a0c:	f04f 38ff 	movge.w	r8, #4294967295
   11a10:	e6d5      	b.n	117be <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   11a12:	0798      	lsls	r0, r3, #30
   11a14:	f57f aee2 	bpl.w	117dc <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   11a18:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   11a1c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   11a20:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11a22:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   11a26:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   11a2a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11a2e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11a30:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11a34:	d133      	bne.n	11a9e <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   11a36:	1ecb      	subs	r3, r1, #3
   11a38:	2b04      	cmp	r3, #4
   11a3a:	d804      	bhi.n	11a46 <z_cbvprintf_impl+0x3ee>
   11a3c:	e8df f003 	tbb	[pc, r3]
   11a40:	21464621 	.word	0x21464621
   11a44:	21          	.byte	0x21
   11a45:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11a46:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   11a48:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   11a4a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   11a4e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   11a52:	d11c      	bne.n	11a8e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   11a54:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   11a58:	17da      	asrs	r2, r3, #31
   11a5a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   11a5e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   11a60:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11a64:	f013 0603 	ands.w	r6, r3, #3
   11a68:	d050      	beq.n	11b0c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   11a6a:	9b03      	ldr	r3, [sp, #12]
   11a6c:	463a      	mov	r2, r7
   11a6e:	4659      	mov	r1, fp
   11a70:	4648      	mov	r0, r9
   11a72:	f014 fa47 	bl	25f04 <outs>
   11a76:	2800      	cmp	r0, #0
   11a78:	f2c0 8153 	blt.w	11d22 <z_cbvprintf_impl+0x6ca>
   11a7c:	4405      	add	r5, r0
			continue;
   11a7e:	9f03      	ldr	r7, [sp, #12]
   11a80:	e5f2      	b.n	11668 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11a82:	f854 3b04 	ldr.w	r3, [r4], #4
   11a86:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   11a88:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   11a8c:	e7e8      	b.n	11a60 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   11a8e:	2902      	cmp	r1, #2
   11a90:	d1e5      	bne.n	11a5e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   11a92:	b21a      	sxth	r2, r3
   11a94:	f343 33c0 	sbfx	r3, r3, #15, #1
   11a98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11a9c:	e7df      	b.n	11a5e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   11a9e:	2b02      	cmp	r3, #2
   11aa0:	d124      	bne.n	11aec <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   11aa2:	1ecb      	subs	r3, r1, #3
   11aa4:	2b04      	cmp	r3, #4
   11aa6:	d804      	bhi.n	11ab2 <z_cbvprintf_impl+0x45a>
   11aa8:	e8df f003 	tbb	[pc, r3]
   11aac:	18101018 	.word	0x18101018
   11ab0:	18          	.byte	0x18
   11ab1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   11ab2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   11ab4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   11ab8:	f04f 0200 	mov.w	r2, #0
   11abc:	d014      	beq.n	11ae8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   11abe:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   11ac0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   11ac4:	d1cc      	bne.n	11a60 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   11ac6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   11ac8:	930e      	str	r3, [sp, #56]	; 0x38
   11aca:	e7c9      	b.n	11a60 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   11acc:	3407      	adds	r4, #7
   11ace:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   11ad2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   11ad6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   11ada:	e7c1      	b.n	11a60 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   11adc:	f854 3b04 	ldr.w	r3, [r4], #4
   11ae0:	930e      	str	r3, [sp, #56]	; 0x38
   11ae2:	2300      	movs	r3, #0
   11ae4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   11ae6:	e7bb      	b.n	11a60 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   11ae8:	b2db      	uxtb	r3, r3
   11aea:	e7cd      	b.n	11a88 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   11aec:	2b04      	cmp	r3, #4
   11aee:	d108      	bne.n	11b02 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   11af0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   11af2:	f024 0407 	bic.w	r4, r4, #7
   11af6:	e9d4 2300 	ldrd	r2, r3, [r4]
   11afa:	3408      	adds	r4, #8
   11afc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11b00:	e7ae      	b.n	11a60 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11b02:	2b03      	cmp	r3, #3
   11b04:	d1ac      	bne.n	11a60 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   11b06:	f854 3b04 	ldr.w	r3, [r4], #4
   11b0a:	e7dd      	b.n	11ac8 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   11b0c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   11b10:	2878      	cmp	r0, #120	; 0x78
   11b12:	d8b4      	bhi.n	11a7e <z_cbvprintf_impl+0x426>
   11b14:	2862      	cmp	r0, #98	; 0x62
   11b16:	d81c      	bhi.n	11b52 <z_cbvprintf_impl+0x4fa>
   11b18:	2825      	cmp	r0, #37	; 0x25
   11b1a:	f43f adad 	beq.w	11678 <z_cbvprintf_impl+0x20>
   11b1e:	2858      	cmp	r0, #88	; 0x58
   11b20:	d1ad      	bne.n	11a7e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11b22:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11b26:	9300      	str	r3, [sp, #0]
   11b28:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   11b2c:	ab08      	add	r3, sp, #32
   11b2e:	aa10      	add	r2, sp, #64	; 0x40
   11b30:	f014 f9a2 	bl	25e78 <encode_uint>
			if (precision >= 0) {
   11b34:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   11b38:	4607      	mov	r7, r0
			if (precision >= 0) {
   11b3a:	f280 809a 	bge.w	11c72 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   11b3e:	2f00      	cmp	r7, #0
   11b40:	d09d      	beq.n	11a7e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   11b42:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11b46:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   11b48:	2e00      	cmp	r6, #0
   11b4a:	f000 80c1 	beq.w	11cd0 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   11b4e:	3001      	adds	r0, #1
   11b50:	e0be      	b.n	11cd0 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   11b52:	3863      	subs	r0, #99	; 0x63
   11b54:	2815      	cmp	r0, #21
   11b56:	d892      	bhi.n	11a7e <z_cbvprintf_impl+0x426>
   11b58:	a201      	add	r2, pc, #4	; (adr r2, 11b60 <z_cbvprintf_impl+0x508>)
   11b5a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   11b5e:	bf00      	nop
   11b60:	00011c35 	.word	0x00011c35
   11b64:	00011c47 	.word	0x00011c47
   11b68:	00011a7f 	.word	0x00011a7f
   11b6c:	00011a7f 	.word	0x00011a7f
   11b70:	00011a7f 	.word	0x00011a7f
   11b74:	00011a7f 	.word	0x00011a7f
   11b78:	00011c47 	.word	0x00011c47
   11b7c:	00011a7f 	.word	0x00011a7f
   11b80:	00011a7f 	.word	0x00011a7f
   11b84:	00011a7f 	.word	0x00011a7f
   11b88:	00011a7f 	.word	0x00011a7f
   11b8c:	00011cd5 	.word	0x00011cd5
   11b90:	00011c6d 	.word	0x00011c6d
   11b94:	00011c93 	.word	0x00011c93
   11b98:	00011a7f 	.word	0x00011a7f
   11b9c:	00011a7f 	.word	0x00011a7f
   11ba0:	00011bb9 	.word	0x00011bb9
   11ba4:	00011a7f 	.word	0x00011a7f
   11ba8:	00011c6d 	.word	0x00011c6d
   11bac:	00011a7f 	.word	0x00011a7f
   11bb0:	00011a7f 	.word	0x00011a7f
   11bb4:	00011c6d 	.word	0x00011c6d
			if (precision >= 0) {
   11bb8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   11bbc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   11bbe:	db35      	blt.n	11c2c <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   11bc0:	4651      	mov	r1, sl
   11bc2:	4638      	mov	r0, r7
   11bc4:	f015 f80a 	bl	26bdc <strnlen>
			bpe = bps + len;
   11bc8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   11bcc:	2f00      	cmp	r7, #0
   11bce:	f43f af56 	beq.w	11a7e <z_cbvprintf_impl+0x426>
		char sign = 0;
   11bd2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   11bd4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11bd8:	f013 0210 	ands.w	r2, r3, #16
   11bdc:	9205      	str	r2, [sp, #20]
   11bde:	f000 8093 	beq.w	11d08 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   11be2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   11be4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   11be6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   11be8:	bf48      	it	mi
   11bea:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   11bec:	9204      	str	r2, [sp, #16]
   11bee:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   11bf0:	bf48      	it	mi
   11bf2:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   11bf4:	f1b8 0f00 	cmp.w	r8, #0
   11bf8:	f340 80a0 	ble.w	11d3c <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   11bfc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   11c00:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   11c04:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11c08:	0750      	lsls	r0, r2, #29
   11c0a:	9306      	str	r3, [sp, #24]
   11c0c:	f100 8096 	bmi.w	11d3c <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   11c10:	0651      	lsls	r1, r2, #25
   11c12:	f140 8089 	bpl.w	11d28 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   11c16:	b13e      	cbz	r6, 11c28 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   11c18:	4659      	mov	r1, fp
   11c1a:	4630      	mov	r0, r6
   11c1c:	47c8      	blx	r9
   11c1e:	2800      	cmp	r0, #0
   11c20:	db7f      	blt.n	11d22 <z_cbvprintf_impl+0x6ca>
   11c22:	9b06      	ldr	r3, [sp, #24]
   11c24:	3501      	adds	r5, #1
   11c26:	461e      	mov	r6, r3
					pad = '0';
   11c28:	2230      	movs	r2, #48	; 0x30
   11c2a:	e07e      	b.n	11d2a <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   11c2c:	4638      	mov	r0, r7
   11c2e:	f014 ffce 	bl	26bce <strlen>
   11c32:	e7c9      	b.n	11bc8 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11c36:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   11c3a:	2600      	movs	r6, #0
			bps = buf;
   11c3c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   11c3e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   11c42:	2001      	movs	r0, #1
   11c44:	e7c6      	b.n	11bd4 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   11c46:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   11c48:	bf5c      	itt	pl
   11c4a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   11c4e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   11c50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   11c54:	bf48      	it	mi
   11c56:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   11c58:	2b00      	cmp	r3, #0
   11c5a:	f6bf af62 	bge.w	11b22 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   11c5e:	4252      	negs	r2, r2
   11c60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11c64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   11c68:	262d      	movs	r6, #45	; 0x2d
   11c6a:	e75a      	b.n	11b22 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   11c6c:	2600      	movs	r6, #0
   11c6e:	e758      	b.n	11b22 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   11c70:	2600      	movs	r6, #0
				conv->flag_zero = false;
   11c72:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   11c76:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11c7a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   11c7c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   11c80:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   11c82:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   11c86:	f67f af5a 	bls.w	11b3e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   11c8a:	ebaa 0303 	sub.w	r3, sl, r3
   11c8e:	9311      	str	r3, [sp, #68]	; 0x44
   11c90:	e755      	b.n	11b3e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   11c92:	980e      	ldr	r0, [sp, #56]	; 0x38
   11c94:	b390      	cbz	r0, 11cfc <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11c96:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11c9a:	9300      	str	r3, [sp, #0]
   11c9c:	aa10      	add	r2, sp, #64	; 0x40
   11c9e:	ab08      	add	r3, sp, #32
   11ca0:	2100      	movs	r1, #0
   11ca2:	f014 f8e9 	bl	25e78 <encode_uint>
				conv->altform_0c = true;
   11ca6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   11caa:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11cae:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11cb2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   11cb6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11cba:	4607      	mov	r7, r0
				conv->altform_0c = true;
   11cbc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   11cc0:	dad6      	bge.n	11c70 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   11cc2:	2800      	cmp	r0, #0
   11cc4:	f43f aedb 	beq.w	11a7e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   11cc8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11ccc:	1a18      	subs	r0, r3, r0
		char sign = 0;
   11cce:	2600      	movs	r6, #0
   11cd0:	469a      	mov	sl, r3
   11cd2:	e77f      	b.n	11bd4 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   11cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   11cd6:	2907      	cmp	r1, #7
   11cd8:	f63f aed1 	bhi.w	11a7e <z_cbvprintf_impl+0x426>
   11cdc:	e8df f001 	tbb	[pc, r1]
   11ce0:	0c06040c 	.word	0x0c06040c
   11ce4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   11ce8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   11cea:	e6c8      	b.n	11a7e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   11cec:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   11cee:	e6c6      	b.n	11a7e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   11cf0:	17ea      	asrs	r2, r5, #31
   11cf2:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   11cf6:	e6c2      	b.n	11a7e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11cf8:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   11cfa:	e6c0      	b.n	11a7e <z_cbvprintf_impl+0x426>
   11cfc:	4f2e      	ldr	r7, [pc, #184]	; (11db8 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   11cfe:	4606      	mov	r6, r0
			bpe = bps + 5;
   11d00:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   11d04:	2005      	movs	r0, #5
   11d06:	e765      	b.n	11bd4 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   11d08:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   11d0a:	bf48      	it	mi
   11d0c:	3001      	addmi	r0, #1
   11d0e:	e769      	b.n	11be4 <z_cbvprintf_impl+0x58c>
   11d10:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   11d12:	4610      	mov	r0, r2
   11d14:	9206      	str	r2, [sp, #24]
   11d16:	4659      	mov	r1, fp
   11d18:	47c8      	blx	r9
   11d1a:	2800      	cmp	r0, #0
   11d1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11d20:	da04      	bge.n	11d2c <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   11d22:	b015      	add	sp, #84	; 0x54
   11d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11d28:	2220      	movs	r2, #32
					pad = '0';
   11d2a:	4643      	mov	r3, r8
				while (width-- > 0) {
   11d2c:	4619      	mov	r1, r3
   11d2e:	2900      	cmp	r1, #0
   11d30:	f103 33ff 	add.w	r3, r3, #4294967295
   11d34:	dcec      	bgt.n	11d10 <z_cbvprintf_impl+0x6b8>
   11d36:	4445      	add	r5, r8
   11d38:	1a6d      	subs	r5, r5, r1
   11d3a:	4698      	mov	r8, r3
		if (sign != 0) {
   11d3c:	b12e      	cbz	r6, 11d4a <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   11d3e:	4659      	mov	r1, fp
   11d40:	4630      	mov	r0, r6
   11d42:	47c8      	blx	r9
   11d44:	2800      	cmp	r0, #0
   11d46:	dbec      	blt.n	11d22 <z_cbvprintf_impl+0x6ca>
   11d48:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   11d4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11d4e:	06da      	lsls	r2, r3, #27
   11d50:	d401      	bmi.n	11d56 <z_cbvprintf_impl+0x6fe>
   11d52:	071b      	lsls	r3, r3, #28
   11d54:	d505      	bpl.n	11d62 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   11d56:	4659      	mov	r1, fp
   11d58:	2030      	movs	r0, #48	; 0x30
   11d5a:	47c8      	blx	r9
   11d5c:	2800      	cmp	r0, #0
   11d5e:	dbe0      	blt.n	11d22 <z_cbvprintf_impl+0x6ca>
   11d60:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11d62:	9b05      	ldr	r3, [sp, #20]
   11d64:	b133      	cbz	r3, 11d74 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   11d66:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   11d6a:	4659      	mov	r1, fp
   11d6c:	47c8      	blx	r9
   11d6e:	2800      	cmp	r0, #0
   11d70:	dbd7      	blt.n	11d22 <z_cbvprintf_impl+0x6ca>
   11d72:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11d74:	9e04      	ldr	r6, [sp, #16]
   11d76:	442e      	add	r6, r5
   11d78:	e005      	b.n	11d86 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   11d7a:	4659      	mov	r1, fp
   11d7c:	2030      	movs	r0, #48	; 0x30
   11d7e:	47c8      	blx	r9
   11d80:	2800      	cmp	r0, #0
   11d82:	dbce      	blt.n	11d22 <z_cbvprintf_impl+0x6ca>
   11d84:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11d86:	1b73      	subs	r3, r6, r5
   11d88:	2b00      	cmp	r3, #0
   11d8a:	dcf6      	bgt.n	11d7a <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   11d8c:	4653      	mov	r3, sl
   11d8e:	463a      	mov	r2, r7
   11d90:	4659      	mov	r1, fp
   11d92:	4648      	mov	r0, r9
   11d94:	f014 f8b6 	bl	25f04 <outs>
   11d98:	2800      	cmp	r0, #0
   11d9a:	dbc2      	blt.n	11d22 <z_cbvprintf_impl+0x6ca>
   11d9c:	4405      	add	r5, r0
		while (width > 0) {
   11d9e:	44a8      	add	r8, r5
   11da0:	eba8 0305 	sub.w	r3, r8, r5
   11da4:	2b00      	cmp	r3, #0
   11da6:	f77f ae6a 	ble.w	11a7e <z_cbvprintf_impl+0x426>
			OUTC(' ');
   11daa:	4659      	mov	r1, fp
   11dac:	2020      	movs	r0, #32
   11dae:	47c8      	blx	r9
   11db0:	2800      	cmp	r0, #0
   11db2:	dbb6      	blt.n	11d22 <z_cbvprintf_impl+0x6ca>
   11db4:	3501      	adds	r5, #1
			--width;
   11db6:	e7f3      	b.n	11da0 <z_cbvprintf_impl+0x748>
   11db8:	0002a869 	.word	0x0002a869

00011dbc <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   11dbc:	b508      	push	{r3, lr}
	__asm__ volatile(
   11dbe:	f04f 0240 	mov.w	r2, #64	; 0x40
   11dc2:	f3ef 8311 	mrs	r3, BASEPRI
   11dc6:	f382 8812 	msr	BASEPRI_MAX, r2
   11dca:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   11dce:	f001 feb9 	bl	13b44 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   11dd2:	4803      	ldr	r0, [pc, #12]	; (11de0 <sys_reboot+0x24>)
   11dd4:	f013 feac 	bl	25b30 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11dd8:	f001 f92c 	bl	13034 <arch_cpu_idle>
   11ddc:	e7fc      	b.n	11dd8 <sys_reboot+0x1c>
   11dde:	bf00      	nop
   11de0:	0002a86f 	.word	0x0002a86f

00011de4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   11de4:	f00c bf44 	b.w	1ec70 <SystemInit>

00011de8 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   11de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dec:	f8df 9098 	ldr.w	r9, [pc, #152]	; 11e88 <z_log_minimal_hexdump_print+0xa0>
   11df0:	4680      	mov	r8, r0
   11df2:	460f      	mov	r7, r1
   11df4:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   11df6:	4614      	mov	r4, r2
   11df8:	19bd      	adds	r5, r7, r6
   11dfa:	1b2d      	subs	r5, r5, r4
   11dfc:	b90c      	cbnz	r4, 11e02 <z_log_minimal_hexdump_print+0x1a>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   11dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   11e02:	f108 33ff 	add.w	r3, r8, #4294967295
   11e06:	2b03      	cmp	r3, #3
   11e08:	bf98      	it	ls
   11e0a:	f819 1003 	ldrbls.w	r1, [r9, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   11e0e:	481f      	ldr	r0, [pc, #124]	; (11e8c <z_log_minimal_hexdump_print+0xa4>)
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   11e10:	f8df a07c 	ldr.w	sl, [pc, #124]	; 11e90 <z_log_minimal_hexdump_print+0xa8>
   11e14:	bf88      	it	hi
   11e16:	213f      	movhi	r1, #63	; 0x3f
		printk("%c: ", z_log_minimal_level_to_char(level));
   11e18:	f013 fe8a 	bl	25b30 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11e1c:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   11e20:	455c      	cmp	r4, fp
   11e22:	d928      	bls.n	11e76 <z_log_minimal_hexdump_print+0x8e>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   11e24:	f815 100b 	ldrb.w	r1, [r5, fp]
   11e28:	4650      	mov	r0, sl
   11e2a:	f013 fe81 	bl	25b30 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11e2e:	f10b 0b01 	add.w	fp, fp, #1
   11e32:	f1bb 0f08 	cmp.w	fp, #8
   11e36:	d1f3      	bne.n	11e20 <z_log_minimal_hexdump_print+0x38>
	printk("|");
   11e38:	4816      	ldr	r0, [pc, #88]	; (11e94 <z_log_minimal_hexdump_print+0xac>)
			printk("%c", isprint((int)c) != 0 ? c : '.');
   11e3a:	f8df b05c 	ldr.w	fp, [pc, #92]	; 11e98 <z_log_minimal_hexdump_print+0xb0>
	printk("|");
   11e3e:	f013 fe77 	bl	25b30 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11e42:	f04f 0a00 	mov.w	sl, #0
		if (i < length) {
   11e46:	4554      	cmp	r4, sl
   11e48:	d919      	bls.n	11e7e <z_log_minimal_hexdump_print+0x96>
			unsigned char c = data[i];
   11e4a:	f815 100a 	ldrb.w	r1, [r5, sl]
	return (int)((((unsigned)c) >= ' ') &&
   11e4e:	f1a1 0220 	sub.w	r2, r1, #32
			printk("%c", isprint((int)c) != 0 ? c : '.');
   11e52:	2a5f      	cmp	r2, #95	; 0x5f
   11e54:	bf28      	it	cs
   11e56:	212e      	movcs	r1, #46	; 0x2e
   11e58:	4658      	mov	r0, fp
   11e5a:	f013 fe69 	bl	25b30 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11e5e:	f10a 0a01 	add.w	sl, sl, #1
   11e62:	f1ba 0f08 	cmp.w	sl, #8
   11e66:	d1ee      	bne.n	11e46 <z_log_minimal_hexdump_print+0x5e>
	printk("\n");
   11e68:	480c      	ldr	r0, [pc, #48]	; (11e9c <z_log_minimal_hexdump_print+0xb4>)
   11e6a:	f013 fe61 	bl	25b30 <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   11e6e:	2c07      	cmp	r4, #7
   11e70:	d9c5      	bls.n	11dfe <z_log_minimal_hexdump_print+0x16>
		size -= HEXDUMP_BYTES_IN_LINE;
   11e72:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   11e74:	e7c0      	b.n	11df8 <z_log_minimal_hexdump_print+0x10>
			printk("   ");
   11e76:	480a      	ldr	r0, [pc, #40]	; (11ea0 <z_log_minimal_hexdump_print+0xb8>)
   11e78:	f013 fe5a 	bl	25b30 <printk>
   11e7c:	e7d7      	b.n	11e2e <z_log_minimal_hexdump_print+0x46>
			printk(" ");
   11e7e:	4809      	ldr	r0, [pc, #36]	; (11ea4 <z_log_minimal_hexdump_print+0xbc>)
   11e80:	f013 fe56 	bl	25b30 <printk>
   11e84:	e7eb      	b.n	11e5e <z_log_minimal_hexdump_print+0x76>
   11e86:	bf00      	nop
   11e88:	0002a8ac 	.word	0x0002a8ac
   11e8c:	0002a898 	.word	0x0002a898
   11e90:	0002a89d 	.word	0x0002a89d
   11e94:	0002a8a7 	.word	0x0002a8a7
   11e98:	0002a8a9 	.word	0x0002a8a9
   11e9c:	0002d5c1 	.word	0x0002d5c1
   11ea0:	0002a8a3 	.word	0x0002a8a3
   11ea4:	0002a8a5 	.word	0x0002a8a5

00011ea8 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   11ea8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11eac:	460f      	mov	r7, r1
   11eae:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11eb0:	2108      	movs	r1, #8
   11eb2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   11eb4:	f8df 9050 	ldr.w	r9, [pc, #80]	; 11f08 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11eb8:	f014 f8ea 	bl	26090 <nvs_al_size.isra.0>
	*addr -= ate_size;
   11ebc:	683c      	ldr	r4, [r7, #0]
   11ebe:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11ec0:	4680      	mov	r8, r0
	*addr -= ate_size;
   11ec2:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   11ec4:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   11ec8:	42ac      	cmp	r4, r5
   11eca:	d803      	bhi.n	11ed4 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   11ecc:	2000      	movs	r0, #0
}
   11ece:	b003      	add	sp, #12
   11ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   11ed4:	2308      	movs	r3, #8
   11ed6:	466a      	mov	r2, sp
   11ed8:	4621      	mov	r1, r4
   11eda:	4630      	mov	r0, r6
   11edc:	f014 f84b 	bl	25f76 <nvs_flash_rd>
		if (rc) {
   11ee0:	2800      	cmp	r0, #0
   11ee2:	d1f4      	bne.n	11ece <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   11ee4:	4669      	mov	r1, sp
   11ee6:	4630      	mov	r0, r6
   11ee8:	f014 f8dc 	bl	260a4 <nvs_ate_valid>
   11eec:	b140      	cbz	r0, 11f00 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   11eee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11ef2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   11ef6:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   11ef8:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   11efc:	4413      	add	r3, r2
   11efe:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   11f00:	eba4 0408 	sub.w	r4, r4, r8
   11f04:	e7e0      	b.n	11ec8 <nvs_recover_last_ate+0x20>
   11f06:	bf00      	nop
   11f08:	ffff0000 	.word	0xffff0000

00011f0c <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   11f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11f10:	4604      	mov	r4, r0
   11f12:	b088      	sub	sp, #32

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   11f14:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   11f18:	4638      	mov	r0, r7
   11f1a:	f017 f9e7 	bl	292ec <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   11f1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   11f20:	6883      	ldr	r3, [r0, #8]
   11f22:	68db      	ldr	r3, [r3, #12]
   11f24:	4798      	blx	r3
   11f26:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   11f28:	b948      	cbnz	r0, 11f3e <nvs_mount+0x32>
		LOG_ERR("Could not obtain flash parameters");
   11f2a:	48ac      	ldr	r0, [pc, #688]	; (121dc <nvs_mount+0x2d0>)
   11f2c:	2145      	movs	r1, #69	; 0x45

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
   11f2e:	f014 f815 	bl	25f5c <z_log_minimal_printk>
		return -EINVAL;
   11f32:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   11f36:	4628      	mov	r0, r5
   11f38:	b008      	add	sp, #32
   11f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   11f3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   11f40:	6883      	ldr	r3, [r0, #8]
   11f42:	68db      	ldr	r3, [r3, #12]
   11f44:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   11f46:	6803      	ldr	r3, [r0, #0]
   11f48:	3b01      	subs	r3, #1
   11f4a:	2b1f      	cmp	r3, #31
   11f4c:	d902      	bls.n	11f54 <nvs_mount+0x48>
		LOG_ERR("Unsupported write block size");
   11f4e:	48a4      	ldr	r0, [pc, #656]	; (121e0 <nvs_mount+0x2d4>)
   11f50:	2145      	movs	r1, #69	; 0x45
   11f52:	e7ec      	b.n	11f2e <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   11f54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11f56:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   11f58:	aa05      	add	r2, sp, #20
   11f5a:	f016 fea1 	bl	28ca0 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   11f5e:	b110      	cbz	r0, 11f66 <nvs_mount+0x5a>
		LOG_ERR("Unable to get page info");
   11f60:	48a0      	ldr	r0, [pc, #640]	; (121e4 <nvs_mount+0x2d8>)
   11f62:	2145      	movs	r1, #69	; 0x45
   11f64:	e7e3      	b.n	11f2e <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
   11f66:	89a5      	ldrh	r5, [r4, #12]
   11f68:	b12d      	cbz	r5, 11f76 <nvs_mount+0x6a>
   11f6a:	9b06      	ldr	r3, [sp, #24]
   11f6c:	fbb5 f2f3 	udiv	r2, r5, r3
   11f70:	fb03 5512 	mls	r5, r3, r2, r5
   11f74:	b115      	cbz	r5, 11f7c <nvs_mount+0x70>
		LOG_ERR("Invalid sector size");
   11f76:	489c      	ldr	r0, [pc, #624]	; (121e8 <nvs_mount+0x2dc>)
   11f78:	2145      	movs	r1, #69	; 0x45
   11f7a:	e7d8      	b.n	11f2e <nvs_mount+0x22>
	if (fs->sector_count < 2) {
   11f7c:	89e3      	ldrh	r3, [r4, #14]
   11f7e:	2b01      	cmp	r3, #1
   11f80:	d802      	bhi.n	11f88 <nvs_mount+0x7c>
		LOG_ERR("Configuration error - sector count");
   11f82:	489a      	ldr	r0, [pc, #616]	; (121ec <nvs_mount+0x2e0>)
   11f84:	2145      	movs	r1, #69	; 0x45
   11f86:	e7d2      	b.n	11f2e <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   11f88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   11f8a:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   11f8c:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   11f90:	f04f 33ff 	mov.w	r3, #4294967295
   11f94:	f04f 32ff 	mov.w	r2, #4294967295
   11f98:	4638      	mov	r0, r7
   11f9a:	f00e f86d 	bl	20078 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11f9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   11fa0:	2108      	movs	r1, #8
   11fa2:	f014 f875 	bl	26090 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   11fa6:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   11fa8:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   11faa:	89e3      	ldrh	r3, [r4, #14]
   11fac:	fa1f fa85 	uxth.w	sl, r5
   11fb0:	4553      	cmp	r3, sl
   11fb2:	d808      	bhi.n	11fc6 <nvs_mount+0xba>
	if (closed_sectors == fs->sector_count) {
   11fb4:	89e3      	ldrh	r3, [r4, #14]
   11fb6:	4543      	cmp	r3, r8
   11fb8:	d123      	bne.n	12002 <nvs_mount+0xf6>
	return z_impl_k_mutex_unlock(mutex);
   11fba:	4638      	mov	r0, r7
   11fbc:	f00e f912 	bl	201e4 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   11fc0:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   11fc4:	e7b7      	b.n	11f36 <nvs_mount+0x2a>
		       (uint16_t)(fs->sector_size - ate_size);
   11fc6:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   11fc8:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   11fca:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   11fcc:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11fd0:	464a      	mov	r2, r9
   11fd2:	2308      	movs	r3, #8
   11fd4:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   11fd6:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11fd8:	f014 f812 	bl	26000 <nvs_flash_cmp_const>
		if (rc) {
   11fdc:	b178      	cbz	r0, 11ffe <nvs_mount+0xf2>
			nvs_sector_advance(fs, &addr);
   11fde:	4669      	mov	r1, sp
   11fe0:	4620      	mov	r0, r4
   11fe2:	f013 ffd6 	bl	25f92 <nvs_sector_advance>
			closed_sectors++;
   11fe6:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11fea:	9900      	ldr	r1, [sp, #0]
   11fec:	2308      	movs	r3, #8
   11fee:	464a      	mov	r2, r9
   11ff0:	4620      	mov	r0, r4
			closed_sectors++;
   11ff2:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   11ff6:	f014 f803 	bl	26000 <nvs_flash_cmp_const>
			if (!rc) {
   11ffa:	2800      	cmp	r0, #0
   11ffc:	d0da      	beq.n	11fb4 <nvs_mount+0xa8>
	for (i = 0; i < fs->sector_count; i++) {
   11ffe:	3501      	adds	r5, #1
   12000:	e7d3      	b.n	11faa <nvs_mount+0x9e>
	if (i == fs->sector_count) {
   12002:	4553      	cmp	r3, sl
   12004:	d10b      	bne.n	1201e <nvs_mount+0x112>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   12006:	9900      	ldr	r1, [sp, #0]
   12008:	2308      	movs	r3, #8
   1200a:	464a      	mov	r2, r9
   1200c:	1b89      	subs	r1, r1, r6
   1200e:	4620      	mov	r0, r4
   12010:	f013 fff6 	bl	26000 <nvs_flash_cmp_const>
		if (!rc) {
   12014:	b918      	cbnz	r0, 1201e <nvs_mount+0x112>
			nvs_sector_advance(fs, &addr);
   12016:	4669      	mov	r1, sp
   12018:	4620      	mov	r0, r4
   1201a:	f013 ffba 	bl	25f92 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
   1201e:	4669      	mov	r1, sp
   12020:	4620      	mov	r0, r4
   12022:	f7ff ff41 	bl	11ea8 <nvs_recover_last_ate>
	if (rc) {
   12026:	4605      	mov	r5, r0
   12028:	b118      	cbz	r0, 12032 <nvs_mount+0x126>
   1202a:	4638      	mov	r0, r7
   1202c:	f00e f8da 	bl	201e4 <z_impl_k_mutex_unlock>
	if (rc) {
   12030:	e781      	b.n	11f36 <nvs_mount+0x2a>
	fs->ate_wra = addr;
   12032:	9b00      	ldr	r3, [sp, #0]
   12034:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   12036:	ea4f 4813 	mov.w	r8, r3, lsr #16
   1203a:	ea4f 4808 	mov.w	r8, r8, lsl #16
   1203e:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   12042:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   12046:	4299      	cmp	r1, r3
   12048:	d30f      	bcc.n	1206a <nvs_mount+0x15e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1204a:	2308      	movs	r3, #8
   1204c:	aa01      	add	r2, sp, #4
   1204e:	4620      	mov	r0, r4
   12050:	f013 ff91 	bl	25f76 <nvs_flash_rd>
		if (rc) {
   12054:	4605      	mov	r5, r0
   12056:	2800      	cmp	r0, #0
   12058:	d1e7      	bne.n	1202a <nvs_mount+0x11e>
   1205a:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   1205c:	f813 2b01 	ldrb.w	r2, [r3], #1
   12060:	4591      	cmp	r9, r2
   12062:	d13c      	bne.n	120de <nvs_mount+0x1d2>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12064:	3501      	adds	r5, #1
   12066:	2d08      	cmp	r5, #8
   12068:	d1f8      	bne.n	1205c <nvs_mount+0x150>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1206a:	6863      	ldr	r3, [r4, #4]
   1206c:	0c1b      	lsrs	r3, r3, #16
   1206e:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   12070:	4669      	mov	r1, sp
   12072:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12074:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   12076:	f013 ff8c 	bl	25f92 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   1207a:	89a3      	ldrh	r3, [r4, #12]
   1207c:	9900      	ldr	r1, [sp, #0]
   1207e:	464a      	mov	r2, r9
   12080:	4620      	mov	r0, r4
   12082:	f013 ffbd 	bl	26000 <nvs_flash_cmp_const>
	if (rc < 0) {
   12086:	1e05      	subs	r5, r0, #0
   12088:	dbcf      	blt.n	1202a <nvs_mount+0x11e>
		addr = fs->ate_wra + ate_size;
   1208a:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   1208c:	d069      	beq.n	12162 <nvs_mount+0x256>
		addr = fs->ate_wra + ate_size;
   1208e:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   12092:	f64f 79ff 	movw	r9, #65535	; 0xffff
   12096:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   12098:	f8cd 8000 	str.w	r8, [sp]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   1209c:	fa1f f288 	uxth.w	r2, r8
   120a0:	1b9b      	subs	r3, r3, r6
   120a2:	429a      	cmp	r2, r3
   120a4:	d337      	bcc.n	12116 <nvs_mount+0x20a>
		LOG_INF("No GC Done marker found: restarting gc");
   120a6:	4852      	ldr	r0, [pc, #328]	; (121f0 <nvs_mount+0x2e4>)
   120a8:	2149      	movs	r1, #73	; 0x49
   120aa:	f013 ff57 	bl	25f5c <z_log_minimal_printk>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   120ae:	6861      	ldr	r1, [r4, #4]
   120b0:	4620      	mov	r0, r4
   120b2:	f013 ffca 	bl	2604a <nvs_flash_erase_sector>
		if (rc) {
   120b6:	4605      	mov	r5, r0
   120b8:	2800      	cmp	r0, #0
   120ba:	d1b6      	bne.n	1202a <nvs_mount+0x11e>
		fs->ate_wra &= ADDR_SECT_MASK;
   120bc:	6863      	ldr	r3, [r4, #4]
   120be:	4a4d      	ldr	r2, [pc, #308]	; (121f4 <nvs_mount+0x2e8>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   120c0:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   120c2:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   120c4:	440b      	add	r3, r1
   120c6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   120ca:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   120cc:	4013      	ands	r3, r2
   120ce:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   120d0:	4620      	mov	r0, r4
   120d2:	f014 f8c9 	bl	26268 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
   120d6:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   120d8:	2d00      	cmp	r5, #0
   120da:	d05e      	beq.n	1219a <nvs_mount+0x28e>
   120dc:	e7a5      	b.n	1202a <nvs_mount+0x11e>
		if (nvs_ate_valid(fs, &last_ate)) {
   120de:	a901      	add	r1, sp, #4
   120e0:	4620      	mov	r0, r4
   120e2:	f013 ffdf 	bl	260a4 <nvs_ate_valid>
   120e6:	6862      	ldr	r2, [r4, #4]
   120e8:	b910      	cbnz	r0, 120f0 <nvs_mount+0x1e4>
		fs->ate_wra -= ate_size;
   120ea:	1b92      	subs	r2, r2, r6
   120ec:	6062      	str	r2, [r4, #4]
   120ee:	e7a8      	b.n	12042 <nvs_mount+0x136>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   120f0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   120f4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   120f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   120fa:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   120fe:	4429      	add	r1, r5
   12100:	f013 ffc6 	bl	26090 <nvs_al_size.isra.0>
   12104:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12106:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12108:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1210a:	d1ee      	bne.n	120ea <nvs_mount+0x1de>
   1210c:	2d00      	cmp	r5, #0
   1210e:	d0ec      	beq.n	120ea <nvs_mount+0x1de>
				rc = -ESPIPE;
   12110:	f06f 051c 	mvn.w	r5, #28
   12114:	e07a      	b.n	1220c <nvs_mount+0x300>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12116:	2308      	movs	r3, #8
   12118:	aa03      	add	r2, sp, #12
   1211a:	4641      	mov	r1, r8
   1211c:	4620      	mov	r0, r4
   1211e:	f013 ff2a 	bl	25f76 <nvs_flash_rd>
			if (rc) {
   12122:	4605      	mov	r5, r0
   12124:	2800      	cmp	r0, #0
   12126:	d180      	bne.n	1202a <nvs_mount+0x11e>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   12128:	a903      	add	r1, sp, #12
   1212a:	4620      	mov	r0, r4
   1212c:	f013 ffba 	bl	260a4 <nvs_ate_valid>
   12130:	b138      	cbz	r0, 12142 <nvs_mount+0x236>
   12132:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   12136:	454b      	cmp	r3, r9
   12138:	d103      	bne.n	12142 <nvs_mount+0x236>
			    (gc_done_ate.id == 0xffff) &&
   1213a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1213e:	2b00      	cmp	r3, #0
   12140:	d06a      	beq.n	12218 <nvs_mount+0x30c>
			addr += ate_size;
   12142:	44b0      	add	r8, r6
   12144:	e7a7      	b.n	12096 <nvs_mount+0x18a>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   12146:	1a5b      	subs	r3, r3, r1
   12148:	464a      	mov	r2, r9
   1214a:	4620      	mov	r0, r4
   1214c:	f013 ff58 	bl	26000 <nvs_flash_cmp_const>
		if (rc < 0) {
   12150:	1e05      	subs	r5, r0, #0
   12152:	f6ff af6a 	blt.w	1202a <nvs_mount+0x11e>
		if (!rc) {
   12156:	d008      	beq.n	1216a <nvs_mount+0x25e>
		fs->data_wra += fs->flash_parameters->write_block_size;
   12158:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1215a:	68a3      	ldr	r3, [r4, #8]
   1215c:	6812      	ldr	r2, [r2, #0]
   1215e:	4413      	add	r3, r2
   12160:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   12162:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   12166:	428b      	cmp	r3, r1
   12168:	d8ed      	bhi.n	12146 <nvs_mount+0x23a>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1216a:	6861      	ldr	r1, [r4, #4]
   1216c:	89a3      	ldrh	r3, [r4, #12]
   1216e:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   12172:	429a      	cmp	r2, r3
   12174:	d1b0      	bne.n	120d8 <nvs_mount+0x1cc>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   12176:	f8df 807c 	ldr.w	r8, [pc, #124]	; 121f4 <nvs_mount+0x2e8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1217a:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1217c:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12180:	429a      	cmp	r2, r3
   12182:	d0a9      	beq.n	120d8 <nvs_mount+0x1cc>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   12184:	4620      	mov	r0, r4
   12186:	f013 ff60 	bl	2604a <nvs_flash_erase_sector>
		if (rc) {
   1218a:	4605      	mov	r5, r0
   1218c:	2800      	cmp	r0, #0
   1218e:	f47f af4c 	bne.w	1202a <nvs_mount+0x11e>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   12192:	6863      	ldr	r3, [r4, #4]
   12194:	ea03 0308 	and.w	r3, r3, r8
   12198:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   1219a:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1219c:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   1219e:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   121a2:	429a      	cmp	r2, r3
   121a4:	d02e      	beq.n	12204 <nvs_mount+0x2f8>
   121a6:	4638      	mov	r0, r7
   121a8:	f00e f81c 	bl	201e4 <z_impl_k_mutex_unlock>
	fs->ready = true;
   121ac:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   121ae:	89e2      	ldrh	r2, [r4, #14]
   121b0:	4811      	ldr	r0, [pc, #68]	; (121f8 <nvs_mount+0x2ec>)
	fs->ready = true;
   121b2:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   121b4:	2149      	movs	r1, #73	; 0x49
   121b6:	89a3      	ldrh	r3, [r4, #12]
   121b8:	f013 fed0 	bl	25f5c <z_log_minimal_printk>
	LOG_INF("alloc wra: %d, %x",
   121bc:	6862      	ldr	r2, [r4, #4]
   121be:	480f      	ldr	r0, [pc, #60]	; (121fc <nvs_mount+0x2f0>)
   121c0:	b293      	uxth	r3, r2
   121c2:	2149      	movs	r1, #73	; 0x49
   121c4:	0c12      	lsrs	r2, r2, #16
   121c6:	f013 fec9 	bl	25f5c <z_log_minimal_printk>
	LOG_INF("data wra: %d, %x",
   121ca:	68a2      	ldr	r2, [r4, #8]
   121cc:	480c      	ldr	r0, [pc, #48]	; (12200 <nvs_mount+0x2f4>)
   121ce:	b293      	uxth	r3, r2
   121d0:	2149      	movs	r1, #73	; 0x49
   121d2:	0c12      	lsrs	r2, r2, #16
   121d4:	f013 fec2 	bl	25f5c <z_log_minimal_printk>
	return 0;
   121d8:	2500      	movs	r5, #0
   121da:	e6ac      	b.n	11f36 <nvs_mount+0x2a>
   121dc:	0002a8c9 	.word	0x0002a8c9
   121e0:	0002a8f0 	.word	0x0002a8f0
   121e4:	0002a912 	.word	0x0002a912
   121e8:	0002a92f 	.word	0x0002a92f
   121ec:	0002a948 	.word	0x0002a948
   121f0:	0002a9b9 	.word	0x0002a9b9
   121f4:	ffff0000 	.word	0xffff0000
   121f8:	0002a970 	.word	0x0002a970
   121fc:	0002a98c 	.word	0x0002a98c
   12200:	0002a9a3 	.word	0x0002a9a3
		rc = nvs_add_gc_done_ate(fs);
   12204:	4620      	mov	r0, r4
   12206:	f014 f81a 	bl	2623e <nvs_add_gc_done_ate>
   1220a:	4605      	mov	r5, r0
   1220c:	4638      	mov	r0, r7
   1220e:	f00d ffe9 	bl	201e4 <z_impl_k_mutex_unlock>
	if (rc) {
   12212:	2d00      	cmp	r5, #0
   12214:	d0ca      	beq.n	121ac <nvs_mount+0x2a0>
   12216:	e68e      	b.n	11f36 <nvs_mount+0x2a>
			LOG_INF("GC Done marker found");
   12218:	4808      	ldr	r0, [pc, #32]	; (1223c <nvs_mount+0x330>)
   1221a:	2149      	movs	r1, #73	; 0x49
   1221c:	f013 fe9e 	bl	25f5c <z_log_minimal_printk>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12220:	6863      	ldr	r3, [r4, #4]
   12222:	0c1b      	lsrs	r3, r3, #16
   12224:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   12226:	4669      	mov	r1, sp
   12228:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1222a:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   1222c:	f013 feb1 	bl	25f92 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   12230:	9900      	ldr	r1, [sp, #0]
   12232:	4620      	mov	r0, r4
   12234:	f013 ff09 	bl	2604a <nvs_flash_erase_sector>
   12238:	e74d      	b.n	120d6 <nvs_mount+0x1ca>
   1223a:	bf00      	nop
   1223c:	0002a9e5 	.word	0x0002a9e5

00012240 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   12240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12244:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   12246:	7c03      	ldrb	r3, [r0, #16]
{
   12248:	b089      	sub	sp, #36	; 0x24
   1224a:	4604      	mov	r4, r0
   1224c:	4689      	mov	r9, r1
   1224e:	4690      	mov	r8, r2
	if (!fs->ready) {
   12250:	b94b      	cbnz	r3, 12266 <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
   12252:	4863      	ldr	r0, [pc, #396]	; (123e0 <nvs_write+0x1a0>)
   12254:	2145      	movs	r1, #69	; 0x45
   12256:	f013 fe81 	bl	25f5c <z_log_minimal_printk>
		return -EACCES;
   1225a:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   1225e:	4630      	mov	r0, r6
   12260:	b009      	add	sp, #36	; 0x24
   12262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12266:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   12268:	2108      	movs	r1, #8
   1226a:	4610      	mov	r0, r2
   1226c:	f013 ff10 	bl	26090 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   12270:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12272:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   12274:	4610      	mov	r0, r2
   12276:	f013 ff0b 	bl	26090 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   1227a:	89a3      	ldrh	r3, [r4, #12]
   1227c:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   12280:	429d      	cmp	r5, r3
	data_size = nvs_al_size(fs, len);
   12282:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   12284:	f200 80a9 	bhi.w	123da <nvs_write+0x19a>
   12288:	b11d      	cbz	r5, 12292 <nvs_write+0x52>
	    ((len > 0) && (data == NULL))) {
   1228a:	f1b8 0f00 	cmp.w	r8, #0
   1228e:	f000 80a4 	beq.w	123da <nvs_write+0x19a>
	wlk_addr = fs->ate_wra;
   12292:	6863      	ldr	r3, [r4, #4]
   12294:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12296:	aa04      	add	r2, sp, #16
   12298:	a903      	add	r1, sp, #12
   1229a:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   1229c:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   122a0:	f013 ff38 	bl	26114 <nvs_prev_ate>
		if (rc) {
   122a4:	4606      	mov	r6, r0
   122a6:	2800      	cmp	r0, #0
   122a8:	d1d9      	bne.n	1225e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   122aa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   122ae:	454b      	cmp	r3, r9
   122b0:	d005      	beq.n	122be <nvs_write+0x7e>
		if (wlk_addr == fs->ate_wra) {
   122b2:	6862      	ldr	r2, [r4, #4]
   122b4:	9b03      	ldr	r3, [sp, #12]
   122b6:	429a      	cmp	r2, r3
   122b8:	d1ed      	bne.n	12296 <nvs_write+0x56>
		if (len == 0) {
   122ba:	b9e5      	cbnz	r5, 122f6 <nvs_write+0xb6>
   122bc:	e7cf      	b.n	1225e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   122be:	a904      	add	r1, sp, #16
   122c0:	4620      	mov	r0, r4
   122c2:	f013 feef 	bl	260a4 <nvs_ate_valid>
   122c6:	2800      	cmp	r0, #0
   122c8:	d0f3      	beq.n	122b2 <nvs_write+0x72>
		rd_addr += wlk_ate.offset;
   122ca:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   122ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   122d2:	b175      	cbz	r5, 122f2 <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
   122d4:	429d      	cmp	r5, r3
   122d6:	d10e      	bne.n	122f6 <nvs_write+0xb6>
		rd_addr &= ADDR_SECT_MASK;
   122d8:	ea4f 411b 	mov.w	r1, fp, lsr #16
   122dc:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   122de:	4401      	add	r1, r0
   122e0:	462b      	mov	r3, r5
   122e2:	4642      	mov	r2, r8
   122e4:	4620      	mov	r0, r4
   122e6:	f013 fe61 	bl	25fac <nvs_flash_block_cmp>
			if (rc <= 0) {
   122ea:	2800      	cmp	r0, #0
   122ec:	dc03      	bgt.n	122f6 <nvs_write+0xb6>
   122ee:	4606      	mov	r6, r0
   122f0:	e7b5      	b.n	1225e <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
   122f2:	2b00      	cmp	r3, #0
   122f4:	d0b3      	beq.n	1225e <nvs_write+0x1e>
	if (data_size) {
   122f6:	2f00      	cmp	r7, #0
   122f8:	d13e      	bne.n	12378 <nvs_write+0x138>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   122fa:	f104 0314 	add.w	r3, r4, #20
   122fe:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   12300:	f04f 32ff 	mov.w	r2, #4294967295
   12304:	f04f 33ff 	mov.w	r3, #4294967295
   12308:	f104 0014 	add.w	r0, r4, #20
   1230c:	f00d feb4 	bl	20078 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   12310:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 123e4 <nvs_write+0x1a4>
		if (gc_count == fs->sector_count) {
   12314:	89e3      	ldrh	r3, [r4, #14]
   12316:	429e      	cmp	r6, r3
   12318:	d05c      	beq.n	123d4 <nvs_write+0x194>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   1231a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1231e:	18f9      	adds	r1, r7, r3
   12320:	428a      	cmp	r2, r1
   12322:	d32c      	bcc.n	1237e <nvs_write+0x13e>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   12324:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   12328:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   1232a:	23ff      	movs	r3, #255	; 0xff
   1232c:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   12330:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   12334:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
   12338:	f013 fea1 	bl	2607e <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1233c:	68a1      	ldr	r1, [r4, #8]
   1233e:	462b      	mov	r3, r5
   12340:	4642      	mov	r2, r8
   12342:	4620      	mov	r0, r4
   12344:	f013 ff30 	bl	261a8 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   12348:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1234a:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   1234c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1234e:	f013 fe9f 	bl	26090 <nvs_al_size.isra.0>
   12352:	68a2      	ldr	r2, [r4, #8]
   12354:	4402      	add	r2, r0
   12356:	60a2      	str	r2, [r4, #8]
	if (rc) {
   12358:	f1ba 0f00 	cmp.w	sl, #0
   1235c:	d107      	bne.n	1236e <nvs_write+0x12e>
	rc = nvs_flash_ate_wrt(fs, &entry);
   1235e:	a906      	add	r1, sp, #24
   12360:	4620      	mov	r0, r4
   12362:	f013 ff5b 	bl	2621c <nvs_flash_ate_wrt>
	rc = len;
   12366:	2800      	cmp	r0, #0
   12368:	bf14      	ite	ne
   1236a:	4682      	movne	sl, r0
   1236c:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   1236e:	9801      	ldr	r0, [sp, #4]
   12370:	f00d ff38 	bl	201e4 <z_impl_k_mutex_unlock>
	return rc;
   12374:	4656      	mov	r6, sl
   12376:	e772      	b.n	1225e <nvs_write+0x1e>
		required_space = data_size + ate_size;
   12378:	4457      	add	r7, sl
   1237a:	b2bf      	uxth	r7, r7
   1237c:	e7bd      	b.n	122fa <nvs_write+0xba>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1237e:	2108      	movs	r1, #8
   12380:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12382:	f013 fe85 	bl	26090 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   12386:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1238a:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   1238e:	2300      	movs	r3, #0
   12390:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   12394:	1813      	adds	r3, r2, r0
   12396:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   1239a:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   1239c:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   123a0:	441a      	add	r2, r3
   123a2:	1a10      	subs	r0, r2, r0
   123a4:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   123a6:	a806      	add	r0, sp, #24
   123a8:	f013 fe69 	bl	2607e <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   123ac:	a906      	add	r1, sp, #24
   123ae:	4620      	mov	r0, r4
   123b0:	f013 ff34 	bl	2621c <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   123b4:	1d21      	adds	r1, r4, #4
   123b6:	4620      	mov	r0, r4
   123b8:	f013 fdeb 	bl	25f92 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   123bc:	6863      	ldr	r3, [r4, #4]
   123be:	ea03 030b 	and.w	r3, r3, fp
   123c2:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   123c4:	4620      	mov	r0, r4
   123c6:	f013 ff4f 	bl	26268 <nvs_gc>
		if (rc) {
   123ca:	4682      	mov	sl, r0
   123cc:	2800      	cmp	r0, #0
   123ce:	d1ce      	bne.n	1236e <nvs_write+0x12e>
		gc_count++;
   123d0:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   123d2:	e79f      	b.n	12314 <nvs_write+0xd4>
			rc = -ENOSPC;
   123d4:	f06f 0a1b 	mvn.w	sl, #27
   123d8:	e7c9      	b.n	1236e <nvs_write+0x12e>
		return -EINVAL;
   123da:	f06f 0615 	mvn.w	r6, #21
   123de:	e73e      	b.n	1225e <nvs_write+0x1e>
   123e0:	0002a8b0 	.word	0x0002a8b0
   123e4:	ffff0000 	.word	0xffff0000

000123e8 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   123e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   123ec:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   123ee:	7c03      	ldrb	r3, [r0, #16]
{
   123f0:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   123f4:	4604      	mov	r4, r0
   123f6:	460f      	mov	r7, r1
   123f8:	4690      	mov	r8, r2
	if (!fs->ready) {
   123fa:	b943      	cbnz	r3, 1240e <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
   123fc:	482c      	ldr	r0, [pc, #176]	; (124b0 <nvs_read_hist+0xc8>)
   123fe:	2145      	movs	r1, #69	; 0x45
   12400:	f013 fdac 	bl	25f5c <z_log_minimal_printk>
		return -EACCES;
   12404:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   12408:	b004      	add	sp, #16
   1240a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1240e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12410:	2108      	movs	r1, #8
   12412:	f013 fe3d 	bl	26090 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   12416:	89a3      	ldrh	r3, [r4, #12]
   12418:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   1241c:	429e      	cmp	r6, r3
   1241e:	d843      	bhi.n	124a8 <nvs_read_hist+0xc0>
	wlk_addr = fs->ate_wra;
   12420:	f8d4 a004 	ldr.w	sl, [r4, #4]
   12424:	f8cd a004 	str.w	sl, [sp, #4]
	cnt_his = 0U;
   12428:	2500      	movs	r5, #0
	while (cnt_his <= cnt) {
   1242a:	45a9      	cmp	r9, r5
   1242c:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   1242e:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
   12432:	d209      	bcs.n	12448 <nvs_read_hist+0x60>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   12434:	6863      	ldr	r3, [r4, #4]
   12436:	4553      	cmp	r3, sl
   12438:	d11e      	bne.n	12478 <nvs_read_hist+0x90>
   1243a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1243e:	42bb      	cmp	r3, r7
   12440:	d01a      	beq.n	12478 <nvs_read_hist+0x90>
		return -ENOENT;
   12442:	f06f 0001 	mvn.w	r0, #1
   12446:	e7df      	b.n	12408 <nvs_read_hist+0x20>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12448:	aa02      	add	r2, sp, #8
   1244a:	a901      	add	r1, sp, #4
   1244c:	4620      	mov	r0, r4
   1244e:	f013 fe61 	bl	26114 <nvs_prev_ate>
		if (rc) {
   12452:	2800      	cmp	r0, #0
   12454:	d1d8      	bne.n	12408 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   12456:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1245a:	42bb      	cmp	r3, r7
   1245c:	d106      	bne.n	1246c <nvs_read_hist+0x84>
   1245e:	a902      	add	r1, sp, #8
   12460:	4620      	mov	r0, r4
   12462:	f013 fe1f 	bl	260a4 <nvs_ate_valid>
   12466:	b108      	cbz	r0, 1246c <nvs_read_hist+0x84>
			cnt_his++;
   12468:	3501      	adds	r5, #1
   1246a:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   1246c:	6862      	ldr	r2, [r4, #4]
   1246e:	9b01      	ldr	r3, [sp, #4]
   12470:	429a      	cmp	r2, r3
   12472:	d1da      	bne.n	1242a <nvs_read_hist+0x42>
		rd_addr = wlk_addr;
   12474:	4651      	mov	r1, sl
   12476:	e7e0      	b.n	1243a <nvs_read_hist+0x52>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12478:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1247c:	2b00      	cmp	r3, #0
   1247e:	d0e0      	beq.n	12442 <nvs_read_hist+0x5a>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12480:	45a9      	cmp	r9, r5
   12482:	d8de      	bhi.n	12442 <nvs_read_hist+0x5a>
	rd_addr += wlk_ate.offset;
   12484:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   12488:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1248a:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   1248c:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   12490:	bf28      	it	cs
   12492:	4633      	movcs	r3, r6
   12494:	4401      	add	r1, r0
   12496:	4642      	mov	r2, r8
   12498:	4620      	mov	r0, r4
   1249a:	f013 fd6c 	bl	25f76 <nvs_flash_rd>
	if (rc) {
   1249e:	2800      	cmp	r0, #0
   124a0:	d1b2      	bne.n	12408 <nvs_read_hist+0x20>
	return wlk_ate.len;
   124a2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   124a6:	e7af      	b.n	12408 <nvs_read_hist+0x20>
		return -EINVAL;
   124a8:	f06f 0015 	mvn.w	r0, #21
   124ac:	e7ac      	b.n	12408 <nvs_read_hist+0x20>
   124ae:	bf00      	nop
   124b0:	0002a8b0 	.word	0x0002a8b0

000124b4 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   124b4:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   124b6:	4b11      	ldr	r3, [pc, #68]	; (124fc <flash_area_open+0x48>)
   124b8:	681c      	ldr	r4, [r3, #0]
{
   124ba:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   124bc:	b1dc      	cbz	r4, 124f6 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   124be:	4b10      	ldr	r3, [pc, #64]	; (12500 <flash_area_open+0x4c>)
   124c0:	6819      	ldr	r1, [r3, #0]
   124c2:	2300      	movs	r3, #0
   124c4:	428b      	cmp	r3, r1
   124c6:	db02      	blt.n	124ce <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   124c8:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   124cc:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   124ce:	4622      	mov	r2, r4
   124d0:	f812 6b10 	ldrb.w	r6, [r2], #16
   124d4:	4286      	cmp	r6, r0
   124d6:	d002      	beq.n	124de <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   124d8:	3301      	adds	r3, #1
   124da:	4614      	mov	r4, r2
   124dc:	e7f2      	b.n	124c4 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   124de:	68e0      	ldr	r0, [r4, #12]
   124e0:	b910      	cbnz	r0, 124e8 <flash_area_open+0x34>
		return -ENODEV;
   124e2:	f06f 0012 	mvn.w	r0, #18
   124e6:	e7f1      	b.n	124cc <flash_area_open+0x18>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   124e8:	f016 fea8 	bl	2923c <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   124ec:	2800      	cmp	r0, #0
   124ee:	d0f8      	beq.n	124e2 <flash_area_open+0x2e>
	*fap = area;
   124f0:	602c      	str	r4, [r5, #0]
	return 0;
   124f2:	2000      	movs	r0, #0
   124f4:	e7ea      	b.n	124cc <flash_area_open+0x18>
		return -EACCES;
   124f6:	f06f 000c 	mvn.w	r0, #12
   124fa:	e7e7      	b.n	124cc <flash_area_open+0x18>
   124fc:	2000051c 	.word	0x2000051c
   12500:	00029c00 	.word	0x00029c00

00012504 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   12504:	b570      	push	{r4, r5, r6, lr}
   12506:	b088      	sub	sp, #32
   12508:	4605      	mov	r5, r0
   1250a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   1250c:	b2c0      	uxtb	r0, r0
   1250e:	4669      	mov	r1, sp
{
   12510:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   12512:	f7ff ffcf 	bl	124b4 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   12516:	2800      	cmp	r0, #0
   12518:	db1b      	blt.n	12552 <flash_area_get_sectors+0x4e>
   1251a:	9800      	ldr	r0, [sp, #0]
   1251c:	b1c8      	cbz	r0, 12552 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   1251e:	6843      	ldr	r3, [r0, #4]
   12520:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   12522:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   12524:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   12526:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   12528:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   1252c:	2300      	movs	r3, #0
	cb_data->status = 0;
   1252e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   12532:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
   12534:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   12536:	f013 ff6f 	bl	26418 <flash_area_close>
	if (flash_dev == NULL) {
   1253a:	b16d      	cbz	r5, 12558 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   1253c:	4628      	mov	r0, r5
   1253e:	4908      	ldr	r1, [pc, #32]	; (12560 <flash_area_get_sectors+0x5c>)
   12540:	aa01      	add	r2, sp, #4
   12542:	f016 fbb1 	bl	28ca8 <flash_page_foreach>
	if (cb_data->status == 0) {
   12546:	9807      	ldr	r0, [sp, #28]
   12548:	b908      	cbnz	r0, 1254e <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   1254a:	9b05      	ldr	r3, [sp, #20]
   1254c:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   1254e:	b008      	add	sp, #32
   12550:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   12552:	f06f 0015 	mvn.w	r0, #21
   12556:	e7fa      	b.n	1254e <flash_area_get_sectors+0x4a>
		return -ENODEV;
   12558:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   1255c:	e7f7      	b.n	1254e <flash_area_get_sectors+0x4a>
   1255e:	bf00      	nop
   12560:	0002641b 	.word	0x0002641b

00012564 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   12564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   12568:	4b0f      	ldr	r3, [pc, #60]	; (125a8 <settings_save_one+0x44>)
   1256a:	681c      	ldr	r4, [r3, #0]
{
   1256c:	4605      	mov	r5, r0
   1256e:	460e      	mov	r6, r1
   12570:	4617      	mov	r7, r2
	if (!cs) {
   12572:	b1ac      	cbz	r4, 125a0 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   12574:	f04f 32ff 	mov.w	r2, #4294967295
   12578:	f04f 33ff 	mov.w	r3, #4294967295
   1257c:	480b      	ldr	r0, [pc, #44]	; (125ac <settings_save_one+0x48>)
   1257e:	f00d fd7b 	bl	20078 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   12582:	6863      	ldr	r3, [r4, #4]
   12584:	4632      	mov	r2, r6
   12586:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1258a:	4629      	mov	r1, r5
   1258c:	463b      	mov	r3, r7
   1258e:	4620      	mov	r0, r4
   12590:	47c0      	blx	r8
   12592:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12594:	4805      	ldr	r0, [pc, #20]	; (125ac <settings_save_one+0x48>)
   12596:	f00d fe25 	bl	201e4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   1259a:	4620      	mov	r0, r4
   1259c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   125a0:	f06f 0401 	mvn.w	r4, #1
   125a4:	e7f9      	b.n	1259a <settings_save_one+0x36>
   125a6:	bf00      	nop
   125a8:	20002010 	.word	0x20002010
   125ac:	2000091c 	.word	0x2000091c

000125b0 <settings_src_register>:
	parent->next = child;
   125b0:	2300      	movs	r3, #0
   125b2:	6003      	str	r3, [r0, #0]
	return list->tail;
   125b4:	4b04      	ldr	r3, [pc, #16]	; (125c8 <settings_src_register+0x18>)
   125b6:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   125b8:	b912      	cbnz	r2, 125c0 <settings_src_register+0x10>
	list->head = node;
   125ba:	e9c3 0000 	strd	r0, r0, [r3]
}
   125be:	4770      	bx	lr
	parent->next = child;
   125c0:	6010      	str	r0, [r2, #0]
	list->tail = node;
   125c2:	6058      	str	r0, [r3, #4]
}
   125c4:	4770      	bx	lr
   125c6:	bf00      	nop
   125c8:	20002014 	.word	0x20002014

000125cc <settings_dst_register>:
	settings_save_dst = cs;
   125cc:	4b01      	ldr	r3, [pc, #4]	; (125d4 <settings_dst_register+0x8>)
   125ce:	6018      	str	r0, [r3, #0]
}
   125d0:	4770      	bx	lr
   125d2:	bf00      	nop
   125d4:	20002010 	.word	0x20002010

000125d8 <settings_load_subtree>:
{
   125d8:	b530      	push	{r4, r5, lr}
   125da:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   125dc:	2300      	movs	r3, #0
{
   125de:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   125e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   125e4:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   125e6:	f04f 33ff 	mov.w	r3, #4294967295
   125ea:	480c      	ldr	r0, [pc, #48]	; (1261c <settings_load_subtree+0x44>)
   125ec:	f04f 32ff 	mov.w	r2, #4294967295
   125f0:	f00d fd42 	bl	20078 <z_impl_k_mutex_lock>
	return list->head;
   125f4:	4b0a      	ldr	r3, [pc, #40]	; (12620 <settings_load_subtree+0x48>)
   125f6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   125f8:	b94c      	cbnz	r4, 1260e <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   125fa:	4628      	mov	r0, r5
   125fc:	f000 f8dc 	bl	127b8 <settings_commit_subtree>
   12600:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12602:	4806      	ldr	r0, [pc, #24]	; (1261c <settings_load_subtree+0x44>)
   12604:	f00d fdee 	bl	201e4 <z_impl_k_mutex_unlock>
}
   12608:	4620      	mov	r0, r4
   1260a:	b005      	add	sp, #20
   1260c:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   1260e:	6863      	ldr	r3, [r4, #4]
   12610:	4620      	mov	r0, r4
   12612:	681b      	ldr	r3, [r3, #0]
   12614:	a901      	add	r1, sp, #4
   12616:	4798      	blx	r3
	return node->next;
   12618:	6824      	ldr	r4, [r4, #0]
   1261a:	e7ed      	b.n	125f8 <settings_load_subtree+0x20>
   1261c:	2000091c 	.word	0x2000091c
   12620:	20002014 	.word	0x20002014

00012624 <settings_load_subtree_direct>:
{
   12624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   12626:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1262a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1262c:	f04f 33ff 	mov.w	r3, #4294967295
   12630:	480a      	ldr	r0, [pc, #40]	; (1265c <settings_load_subtree_direct+0x38>)
   12632:	f04f 32ff 	mov.w	r2, #4294967295
   12636:	f00d fd1f 	bl	20078 <z_impl_k_mutex_lock>
	return list->head;
   1263a:	4b09      	ldr	r3, [pc, #36]	; (12660 <settings_load_subtree_direct+0x3c>)
   1263c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1263e:	b92c      	cbnz	r4, 1264c <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   12640:	4806      	ldr	r0, [pc, #24]	; (1265c <settings_load_subtree_direct+0x38>)
   12642:	f00d fdcf 	bl	201e4 <z_impl_k_mutex_unlock>
}
   12646:	4620      	mov	r0, r4
   12648:	b004      	add	sp, #16
   1264a:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   1264c:	6863      	ldr	r3, [r4, #4]
   1264e:	4620      	mov	r0, r4
   12650:	681b      	ldr	r3, [r3, #0]
   12652:	a901      	add	r1, sp, #4
   12654:	4798      	blx	r3
	return node->next;
   12656:	6824      	ldr	r4, [r4, #0]
   12658:	e7f1      	b.n	1263e <settings_load_subtree_direct+0x1a>
   1265a:	bf00      	nop
   1265c:	2000091c 	.word	0x2000091c
   12660:	20002014 	.word	0x20002014

00012664 <settings_store_init>:
	list->head = NULL;
   12664:	4b02      	ldr	r3, [pc, #8]	; (12670 <settings_store_init+0xc>)
   12666:	2200      	movs	r2, #0
	list->tail = NULL;
   12668:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   1266c:	4770      	bx	lr
   1266e:	bf00      	nop
   12670:	20002014 	.word	0x20002014

00012674 <settings_init>:
	list->head = NULL;
   12674:	4b02      	ldr	r3, [pc, #8]	; (12680 <settings_init+0xc>)
   12676:	2200      	movs	r2, #0
	list->tail = NULL;
   12678:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   1267c:	f7ff bff2 	b.w	12664 <settings_store_init>
   12680:	2000201c 	.word	0x2000201c

00012684 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   12684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12688:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   1268a:	460c      	mov	r4, r1
   1268c:	b109      	cbz	r1, 12692 <settings_parse_and_lookup+0xe>
		*next = NULL;
   1268e:	2300      	movs	r3, #0
   12690:	600b      	str	r3, [r1, #0]
{
   12692:	4d24      	ldr	r5, [pc, #144]	; (12724 <settings_parse_and_lookup+0xa0>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   12694:	f8df 9090 	ldr.w	r9, [pc, #144]	; 12728 <settings_parse_and_lookup+0xa4>
{
   12698:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1269a:	454d      	cmp	r5, r9
   1269c:	d920      	bls.n	126e0 <settings_parse_and_lookup+0x5c>
   1269e:	4923      	ldr	r1, [pc, #140]	; (1272c <settings_parse_and_lookup+0xa8>)
   126a0:	4823      	ldr	r0, [pc, #140]	; (12730 <settings_parse_and_lookup+0xac>)
   126a2:	2294      	movs	r2, #148	; 0x94
   126a4:	f013 fc4c 	bl	25f40 <assert_print>
   126a8:	4820      	ldr	r0, [pc, #128]	; (1272c <settings_parse_and_lookup+0xa8>)
   126aa:	2194      	movs	r1, #148	; 0x94
   126ac:	f013 fc41 	bl	25f32 <assert_post_action>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   126b0:	f8d5 8000 	ldr.w	r8, [r5]
   126b4:	aa01      	add	r2, sp, #4
   126b6:	4641      	mov	r1, r8
   126b8:	4638      	mov	r0, r7
   126ba:	f013 fed7 	bl	2646c <settings_name_steq>
   126be:	b150      	cbz	r0, 126d6 <settings_parse_and_lookup+0x52>
			continue;
		}
		if (!bestmatch) {
   126c0:	b916      	cbnz	r6, 126c8 <settings_parse_and_lookup+0x44>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
			if (next) {
   126c2:	b954      	cbnz	r4, 126da <settings_parse_and_lookup+0x56>
{
   126c4:	462e      	mov	r6, r5
   126c6:	e006      	b.n	126d6 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   126c8:	6831      	ldr	r1, [r6, #0]
   126ca:	2200      	movs	r2, #0
   126cc:	4640      	mov	r0, r8
   126ce:	f013 fecd 	bl	2646c <settings_name_steq>
   126d2:	2800      	cmp	r0, #0
   126d4:	d1f5      	bne.n	126c2 <settings_parse_and_lookup+0x3e>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   126d6:	3514      	adds	r5, #20
   126d8:	e7df      	b.n	1269a <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   126da:	9b01      	ldr	r3, [sp, #4]
   126dc:	6023      	str	r3, [r4, #0]
   126de:	e7f1      	b.n	126c4 <settings_parse_and_lookup+0x40>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   126e0:	d3e6      	bcc.n	126b0 <settings_parse_and_lookup+0x2c>
	return list->head;
   126e2:	4b14      	ldr	r3, [pc, #80]	; (12734 <settings_parse_and_lookup+0xb0>)
   126e4:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   126e6:	b1c5      	cbz	r5, 1271a <settings_parse_and_lookup+0x96>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   126e8:	f855 8c14 	ldr.w	r8, [r5, #-20]
   126ec:	aa01      	add	r2, sp, #4
   126ee:	4641      	mov	r1, r8
   126f0:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   126f2:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   126f4:	f013 feba 	bl	2646c <settings_name_steq>
   126f8:	b150      	cbz	r0, 12710 <settings_parse_and_lookup+0x8c>
			continue;
		}
		if (!bestmatch) {
   126fa:	b916      	cbnz	r6, 12702 <settings_parse_and_lookup+0x7e>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   126fc:	b954      	cbnz	r4, 12714 <settings_parse_and_lookup+0x90>
{
   126fe:	462e      	mov	r6, r5
   12700:	e006      	b.n	12710 <settings_parse_and_lookup+0x8c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   12702:	6831      	ldr	r1, [r6, #0]
   12704:	2200      	movs	r2, #0
   12706:	4640      	mov	r0, r8
   12708:	f013 feb0 	bl	2646c <settings_name_steq>
   1270c:	2800      	cmp	r0, #0
   1270e:	d1f5      	bne.n	126fc <settings_parse_and_lookup+0x78>
	return node->next;
   12710:	696d      	ldr	r5, [r5, #20]
   12712:	e7e8      	b.n	126e6 <settings_parse_and_lookup+0x62>
				*next = tmpnext;
   12714:	9b01      	ldr	r3, [sp, #4]
   12716:	6023      	str	r3, [r4, #0]
   12718:	e7f1      	b.n	126fe <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   1271a:	4630      	mov	r0, r6
   1271c:	b003      	add	sp, #12
   1271e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12722:	bf00      	nop
   12724:	00029ad8 	.word	0x00029ad8
   12728:	00029b50 	.word	0x00029b50
   1272c:	0002aa06 	.word	0x0002aa06
   12730:	0002a7df 	.word	0x0002a7df
   12734:	2000201c 	.word	0x2000201c

00012738 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   12738:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1273c:	f8dd 8020 	ldr.w	r8, [sp, #32]
	int rc;
	const char *name_key = name;
   12740:	9001      	str	r0, [sp, #4]
{
   12742:	4604      	mov	r4, r0
   12744:	460d      	mov	r5, r1
   12746:	4616      	mov	r6, r2
   12748:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   1274a:	f1b8 0f00 	cmp.w	r8, #0
   1274e:	d007      	beq.n	12760 <settings_call_set_handler+0x28>
   12750:	f8d8 1000 	ldr.w	r1, [r8]
   12754:	b9c1      	cbnz	r1, 12788 <settings_call_set_handler+0x50>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
   12756:	f8d8 e004 	ldr.w	lr, [r8, #4]
   1275a:	f1be 0f00 	cmp.w	lr, #0
   1275e:	d11c      	bne.n	1279a <settings_call_set_handler+0x62>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
   12760:	a901      	add	r1, sp, #4
   12762:	4620      	mov	r0, r4
   12764:	f7ff ff8e 	bl	12684 <settings_parse_and_lookup>
		if (!ch) {
   12768:	b198      	cbz	r0, 12792 <settings_call_set_handler+0x5a>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   1276a:	f8d0 8008 	ldr.w	r8, [r0, #8]
   1276e:	9801      	ldr	r0, [sp, #4]
   12770:	463b      	mov	r3, r7
   12772:	4632      	mov	r2, r6
   12774:	4629      	mov	r1, r5
   12776:	47c0      	blx	r8

		if (rc != 0) {
   12778:	4603      	mov	r3, r0
   1277a:	b150      	cbz	r0, 12792 <settings_call_set_handler+0x5a>
			LOG_ERR("set-value failure. key: %s error(%d)",
   1277c:	480d      	ldr	r0, [pc, #52]	; (127b4 <settings_call_set_handler+0x7c>)
   1277e:	4622      	mov	r2, r4
   12780:	2145      	movs	r1, #69	; 0x45
   12782:	f013 fbeb 	bl	25f5c <z_log_minimal_printk>
				name, rc);
			/* Ignoring the error */
			rc = 0;
   12786:	e004      	b.n	12792 <settings_call_set_handler+0x5a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   12788:	aa01      	add	r2, sp, #4
   1278a:	f013 fe6f 	bl	2646c <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   1278e:	2800      	cmp	r0, #0
   12790:	d1e1      	bne.n	12756 <settings_call_set_handler+0x1e>
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   12792:	2000      	movs	r0, #0
   12794:	b002      	add	sp, #8
   12796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   1279a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1279e:	9801      	ldr	r0, [sp, #4]
   127a0:	9308      	str	r3, [sp, #32]
   127a2:	4632      	mov	r2, r6
   127a4:	463b      	mov	r3, r7
   127a6:	4629      	mov	r1, r5
   127a8:	46f4      	mov	ip, lr
}
   127aa:	b002      	add	sp, #8
   127ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   127b0:	4760      	bx	ip
   127b2:	bf00      	nop
   127b4:	0002aa38 	.word	0x0002aa38

000127b8 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   127b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   127ba:	4c1d      	ldr	r4, [pc, #116]	; (12830 <settings_commit_subtree+0x78>)
   127bc:	4f1d      	ldr	r7, [pc, #116]	; (12834 <settings_commit_subtree+0x7c>)
{
   127be:	4606      	mov	r6, r0
	rc = 0;
   127c0:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   127c2:	42bc      	cmp	r4, r7
   127c4:	d91b      	bls.n	127fe <settings_commit_subtree+0x46>
   127c6:	491c      	ldr	r1, [pc, #112]	; (12838 <settings_commit_subtree+0x80>)
   127c8:	481c      	ldr	r0, [pc, #112]	; (1283c <settings_commit_subtree+0x84>)
   127ca:	22f4      	movs	r2, #244	; 0xf4
   127cc:	f013 fbb8 	bl	25f40 <assert_print>
   127d0:	4819      	ldr	r0, [pc, #100]	; (12838 <settings_commit_subtree+0x80>)
   127d2:	21f4      	movs	r1, #244	; 0xf4
   127d4:	f013 fbad 	bl	25f32 <assert_post_action>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   127d8:	b92e      	cbnz	r6, 127e6 <settings_commit_subtree+0x2e>
			continue;
		}
		if (ch->h_commit) {
   127da:	68e3      	ldr	r3, [r4, #12]
   127dc:	b95b      	cbnz	r3, 127f6 <settings_commit_subtree+0x3e>
{
   127de:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   127e0:	3414      	adds	r4, #20
   127e2:	4605      	mov	r5, r0
   127e4:	e7ed      	b.n	127c2 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   127e6:	6820      	ldr	r0, [r4, #0]
   127e8:	2200      	movs	r2, #0
   127ea:	4631      	mov	r1, r6
   127ec:	f013 fe3e 	bl	2646c <settings_name_steq>
   127f0:	2800      	cmp	r0, #0
   127f2:	d1f2      	bne.n	127da <settings_commit_subtree+0x22>
   127f4:	e7f3      	b.n	127de <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   127f6:	4798      	blx	r3
			if (!rc) {
   127f8:	2d00      	cmp	r5, #0
   127fa:	d1f0      	bne.n	127de <settings_commit_subtree+0x26>
   127fc:	e7f0      	b.n	127e0 <settings_commit_subtree+0x28>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   127fe:	d3eb      	bcc.n	127d8 <settings_commit_subtree+0x20>
	return list->head;
   12800:	4b0f      	ldr	r3, [pc, #60]	; (12840 <settings_commit_subtree+0x88>)
   12802:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   12804:	b194      	cbz	r4, 1282c <settings_commit_subtree+0x74>
   12806:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   12808:	b91e      	cbnz	r6, 12812 <settings_commit_subtree+0x5a>
			continue;
		}
		if (ch->h_commit) {
   1280a:	68e3      	ldr	r3, [r4, #12]
   1280c:	b94b      	cbnz	r3, 12822 <settings_commit_subtree+0x6a>
	return node->next;
   1280e:	6964      	ldr	r4, [r4, #20]
   12810:	e7f8      	b.n	12804 <settings_commit_subtree+0x4c>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   12812:	6820      	ldr	r0, [r4, #0]
   12814:	2200      	movs	r2, #0
   12816:	4631      	mov	r1, r6
   12818:	f013 fe28 	bl	2646c <settings_name_steq>
   1281c:	2800      	cmp	r0, #0
   1281e:	d1f4      	bne.n	1280a <settings_commit_subtree+0x52>
   12820:	e7f5      	b.n	1280e <settings_commit_subtree+0x56>
			rc2 = ch->h_commit();
   12822:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   12824:	2d00      	cmp	r5, #0
   12826:	bf08      	it	eq
   12828:	4605      	moveq	r5, r0
   1282a:	e7f0      	b.n	1280e <settings_commit_subtree+0x56>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   1282c:	4628      	mov	r0, r5
   1282e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12830:	00029ad8 	.word	0x00029ad8
   12834:	00029b50 	.word	0x00029b50
   12838:	0002aa06 	.word	0x0002aa06
   1283c:	0002a7df 	.word	0x0002a7df
   12840:	2000201c 	.word	0x2000201c

00012844 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   12844:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   12846:	4c07      	ldr	r4, [pc, #28]	; (12864 <settings_subsys_init+0x20>)
   12848:	7823      	ldrb	r3, [r4, #0]
   1284a:	b10b      	cbz	r3, 12850 <settings_subsys_init+0xc>
		return 0;
   1284c:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   1284e:	bd10      	pop	{r4, pc}
	settings_init();
   12850:	f7ff ff10 	bl	12674 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   12854:	f000 f866 	bl	12924 <settings_backend_init>
	if (!err) {
   12858:	2800      	cmp	r0, #0
   1285a:	d1f8      	bne.n	1284e <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   1285c:	2301      	movs	r3, #1
   1285e:	7023      	strb	r3, [r4, #0]
   12860:	e7f4      	b.n	1284c <settings_subsys_init+0x8>
   12862:	bf00      	nop
   12864:	200035a1 	.word	0x200035a1

00012868 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   12868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   1286c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   1286e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 12920 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   12872:	3401      	adds	r4, #1
{
   12874:	b098      	sub	sp, #96	; 0x60
   12876:	4680      	mov	r8, r0
   12878:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   1287a:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1287c:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   12880:	1e65      	subs	r5, r4, #1
   12882:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   12884:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   12888:	d047      	beq.n	1291a <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1288a:	234a      	movs	r3, #74	; 0x4a
   1288c:	aa05      	add	r2, sp, #20
   1288e:	4629      	mov	r1, r5
   12890:	4630      	mov	r0, r6
   12892:	f013 fdba 	bl	2640a <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   12896:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   1289a:	343f      	adds	r4, #63	; 0x3f
   1289c:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1289e:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   128a0:	4621      	mov	r1, r4
   128a2:	2301      	movs	r3, #1
   128a4:	f10d 020b 	add.w	r2, sp, #11
   128a8:	4630      	mov	r0, r6
   128aa:	f013 fdae 	bl	2640a <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   128ae:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   128b0:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   128b2:	dc03      	bgt.n	128bc <settings_nvs_load+0x54>
   128b4:	2800      	cmp	r0, #0
   128b6:	dc03      	bgt.n	128c0 <settings_nvs_load+0x58>
{
   128b8:	462c      	mov	r4, r5
   128ba:	e7e1      	b.n	12880 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   128bc:	2800      	cmp	r0, #0
   128be:	dc16      	bgt.n	128ee <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   128c0:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   128c4:	42ab      	cmp	r3, r5
   128c6:	d109      	bne.n	128dc <settings_nvs_load+0x74>
				cf->last_name_id--;
   128c8:	4642      	mov	r2, r8
   128ca:	1e6b      	subs	r3, r5, #1
   128cc:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   128d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   128d4:	2302      	movs	r3, #2
   128d6:	4630      	mov	r0, r6
   128d8:	f7ff fcb2 	bl	12240 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   128dc:	4629      	mov	r1, r5
   128de:	4630      	mov	r0, r6
   128e0:	f013 fd8f 	bl	26402 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   128e4:	4621      	mov	r1, r4
   128e6:	4630      	mov	r0, r6
   128e8:	f013 fd8b 	bl	26402 <nvs_delete>
			continue;
   128ec:	e7e4      	b.n	128b8 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   128ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
   128f2:	eb0d 0703 	add.w	r7, sp, r3
   128f6:	2300      	movs	r3, #0
   128f8:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   128fc:	4652      	mov	r2, sl
   128fe:	f8cd 9000 	str.w	r9, [sp]
   12902:	ab03      	add	r3, sp, #12
   12904:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   12906:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   12908:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   1290c:	f7ff ff14 	bl	12738 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   12910:	2800      	cmp	r0, #0
   12912:	d0d1      	beq.n	128b8 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   12914:	b018      	add	sp, #96	; 0x60
   12916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1291a:	2000      	movs	r0, #0
	return ret;
   1291c:	e7fa      	b.n	12914 <settings_nvs_load+0xac>
   1291e:	bf00      	nop
   12920:	000264dd 	.word	0x000264dd

00012924 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   12924:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   12926:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   12928:	4669      	mov	r1, sp
   1292a:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   1292c:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   1292e:	f7ff fdc1 	bl	124b4 <flash_area_open>
	if (rc) {
   12932:	4604      	mov	r4, r0
   12934:	2800      	cmp	r0, #0
   12936:	d134      	bne.n	129a2 <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   12938:	aa02      	add	r2, sp, #8
   1293a:	a901      	add	r1, sp, #4
   1293c:	2004      	movs	r0, #4
   1293e:	f7ff fde1 	bl	12504 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   12942:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   12946:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   12948:	d02b      	beq.n	129a2 <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   1294a:	b138      	cbz	r0, 1295c <settings_backend_init+0x38>
   1294c:	340c      	adds	r4, #12
   1294e:	d005      	beq.n	1295c <settings_backend_init+0x38>
		k_panic();
   12950:	4040      	eors	r0, r0
   12952:	f380 8811 	msr	BASEPRI, r0
   12956:	f04f 0004 	mov.w	r0, #4
   1295a:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   1295c:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   1295e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   12962:	d223      	bcs.n	129ac <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   12964:	9a00      	ldr	r2, [sp, #0]
   12966:	2300      	movs	r3, #0
   12968:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   1296a:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   1296c:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   1296e:	4284      	cmp	r4, r0
   12970:	d31a      	bcc.n	129a8 <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   12972:	3301      	adds	r3, #1
   12974:	2b08      	cmp	r3, #8
   12976:	d1f9      	bne.n	1296c <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   12978:	4d0e      	ldr	r5, [pc, #56]	; (129b4 <settings_backend_init+0x90>)
   1297a:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   1297c:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   1297e:	6853      	ldr	r3, [r2, #4]
   12980:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   12982:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   12984:	68d3      	ldr	r3, [r2, #12]
   12986:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   12988:	f013 fe42 	bl	26610 <settings_nvs_backend_init>
	if (rc) {
   1298c:	4604      	mov	r4, r0
   1298e:	b940      	cbnz	r0, 129a2 <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   12990:	4e09      	ldr	r6, [pc, #36]	; (129b8 <settings_backend_init+0x94>)
   12992:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   12994:	4628      	mov	r0, r5
   12996:	f7ff fe0b 	bl	125b0 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   1299a:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1299c:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   1299e:	f7ff fe15 	bl	125cc <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   129a2:	4620      	mov	r0, r4
   129a4:	b004      	add	sp, #16
   129a6:	bd70      	pop	{r4, r5, r6, pc}
   129a8:	b29b      	uxth	r3, r3
   129aa:	e7e5      	b.n	12978 <settings_backend_init+0x54>
		return -EDOM;
   129ac:	f06f 0420 	mvn.w	r4, #32
   129b0:	e7f7      	b.n	129a2 <settings_backend_init+0x7e>
   129b2:	bf00      	nop
   129b4:	20002024 	.word	0x20002024
   129b8:	20000520 	.word	0x20000520

000129bc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   129bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   129c0:	4605      	mov	r5, r0
   129c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   129c6:	f3ef 8611 	mrs	r6, BASEPRI
   129ca:	f383 8812 	msr	BASEPRI_MAX, r3
   129ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   129d2:	481b      	ldr	r0, [pc, #108]	; (12a40 <pm_state_notify+0x84>)
   129d4:	f00d fafc 	bl	1ffd0 <z_spin_lock_valid>
   129d8:	b940      	cbnz	r0, 129ec <pm_state_notify+0x30>
   129da:	491a      	ldr	r1, [pc, #104]	; (12a44 <pm_state_notify+0x88>)
   129dc:	481a      	ldr	r0, [pc, #104]	; (12a48 <pm_state_notify+0x8c>)
   129de:	2294      	movs	r2, #148	; 0x94
   129e0:	f013 faae 	bl	25f40 <assert_print>
   129e4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   129e6:	4817      	ldr	r0, [pc, #92]	; (12a44 <pm_state_notify+0x88>)
   129e8:	f013 faa3 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   129ec:	4814      	ldr	r0, [pc, #80]	; (12a40 <pm_state_notify+0x84>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   129ee:	4f17      	ldr	r7, [pc, #92]	; (12a4c <pm_state_notify+0x90>)
   129f0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 12a50 <pm_state_notify+0x94>
   129f4:	f00d fb0a 	bl	2000c <z_spin_lock_set_owner>
	return list->head;
   129f8:	4b16      	ldr	r3, [pc, #88]	; (12a54 <pm_state_notify+0x98>)
   129fa:	681c      	ldr	r4, [r3, #0]
   129fc:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12a00:	b954      	cbnz	r4, 12a18 <pm_state_notify+0x5c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12a02:	480f      	ldr	r0, [pc, #60]	; (12a40 <pm_state_notify+0x84>)
   12a04:	f00d faf2 	bl	1ffec <z_spin_unlock_valid>
   12a08:	b9a0      	cbnz	r0, 12a34 <pm_state_notify+0x78>
   12a0a:	490e      	ldr	r1, [pc, #56]	; (12a44 <pm_state_notify+0x88>)
   12a0c:	480e      	ldr	r0, [pc, #56]	; (12a48 <pm_state_notify+0x8c>)
   12a0e:	22c2      	movs	r2, #194	; 0xc2
   12a10:	f013 fa96 	bl	25f40 <assert_print>
   12a14:	21c2      	movs	r1, #194	; 0xc2
   12a16:	e7e6      	b.n	129e6 <pm_state_notify+0x2a>
			callback = notifier->state_exit;
   12a18:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   12a1c:	2d00      	cmp	r5, #0
   12a1e:	bf18      	it	ne
   12a20:	4613      	movne	r3, r2
		if (callback) {
   12a22:	b12b      	cbz	r3, 12a30 <pm_state_notify+0x74>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   12a24:	f898 2014 	ldrb.w	r2, [r8, #20]
   12a28:	fb09 f202 	mul.w	r2, r9, r2
   12a2c:	5cb8      	ldrb	r0, [r7, r2]
   12a2e:	4798      	blx	r3
	return node->next;
   12a30:	6824      	ldr	r4, [r4, #0]
   12a32:	e7e5      	b.n	12a00 <pm_state_notify+0x44>
	__asm__ volatile(
   12a34:	f386 8811 	msr	BASEPRI, r6
   12a38:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12a40:	20002064 	.word	0x20002064
   12a44:	0002a819 	.word	0x0002a819
   12a48:	0002a7df 	.word	0x0002a7df
   12a4c:	20002078 	.word	0x20002078
   12a50:	20002a64 	.word	0x20002a64
   12a54:	20002084 	.word	0x20002084

00012a58 <pm_system_resume>:

void pm_system_resume(void)
{
   12a58:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   12a5a:	4b19      	ldr	r3, [pc, #100]	; (12ac0 <pm_system_resume+0x68>)
   12a5c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12a5e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   12a62:	f004 031f 	and.w	r3, r4, #31
   12a66:	2201      	movs	r2, #1
   12a68:	409a      	lsls	r2, r3
   12a6a:	4b16      	ldr	r3, [pc, #88]	; (12ac4 <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12a6c:	0961      	lsrs	r1, r4, #5
   12a6e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12a72:	43d0      	mvns	r0, r2
   12a74:	e853 1f00 	ldrex	r1, [r3]
   12a78:	ea01 0500 	and.w	r5, r1, r0
   12a7c:	e843 5600 	strex	r6, r5, [r3]
   12a80:	2e00      	cmp	r6, #0
   12a82:	d1f7      	bne.n	12a74 <pm_system_resume+0x1c>
   12a84:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12a88:	420a      	tst	r2, r1
   12a8a:	d013      	beq.n	12ab4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   12a8c:	4b0e      	ldr	r3, [pc, #56]	; (12ac8 <pm_system_resume+0x70>)
   12a8e:	4d0f      	ldr	r5, [pc, #60]	; (12acc <pm_system_resume+0x74>)
   12a90:	b18b      	cbz	r3, 12ab6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   12a92:	230c      	movs	r3, #12
   12a94:	4363      	muls	r3, r4
   12a96:	18ea      	adds	r2, r5, r3
   12a98:	5ce8      	ldrb	r0, [r5, r3]
   12a9a:	7851      	ldrb	r1, [r2, #1]
   12a9c:	f014 f911 	bl	26cc2 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   12aa0:	2000      	movs	r0, #0
   12aa2:	f7ff ff8b 	bl	129bc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   12aa6:	230c      	movs	r3, #12
   12aa8:	435c      	muls	r4, r3
   12aaa:	192a      	adds	r2, r5, r4
   12aac:	2300      	movs	r3, #0
   12aae:	512b      	str	r3, [r5, r4]
   12ab0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   12ab4:	bd70      	pop	{r4, r5, r6, pc}
   12ab6:	f383 8811 	msr	BASEPRI, r3
   12aba:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12abe:	e7ef      	b.n	12aa0 <pm_system_resume+0x48>
   12ac0:	20002a64 	.word	0x20002a64
   12ac4:	2000208c 	.word	0x2000208c
   12ac8:	00026cc3 	.word	0x00026cc3
   12acc:	20002078 	.word	0x20002078

00012ad0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   12ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   12ad4:	4b42      	ldr	r3, [pc, #264]	; (12be0 <pm_system_suspend+0x110>)
{
   12ad6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   12ad8:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   12ada:	f04f 0340 	mov.w	r3, #64	; 0x40
   12ade:	f3ef 8811 	mrs	r8, BASEPRI
   12ae2:	f383 8812 	msr	BASEPRI_MAX, r3
   12ae6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12aea:	483e      	ldr	r0, [pc, #248]	; (12be4 <pm_system_suspend+0x114>)
   12aec:	f00d fa70 	bl	1ffd0 <z_spin_lock_valid>
   12af0:	b940      	cbnz	r0, 12b04 <pm_system_suspend+0x34>
   12af2:	493d      	ldr	r1, [pc, #244]	; (12be8 <pm_system_suspend+0x118>)
   12af4:	483d      	ldr	r0, [pc, #244]	; (12bec <pm_system_suspend+0x11c>)
   12af6:	2294      	movs	r2, #148	; 0x94
   12af8:	f013 fa22 	bl	25f40 <assert_print>
   12afc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12afe:	483a      	ldr	r0, [pc, #232]	; (12be8 <pm_system_suspend+0x118>)
   12b00:	f013 fa17 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   12b04:	4837      	ldr	r0, [pc, #220]	; (12be4 <pm_system_suspend+0x114>)
   12b06:	4e3a      	ldr	r6, [pc, #232]	; (12bf0 <pm_system_suspend+0x120>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   12b08:	240c      	movs	r4, #12
   12b0a:	f00d fa7f 	bl	2000c <z_spin_lock_set_owner>
   12b0e:	436c      	muls	r4, r5
   12b10:	4b38      	ldr	r3, [pc, #224]	; (12bf4 <pm_system_suspend+0x124>)
   12b12:	5d19      	ldrb	r1, [r3, r4]
   12b14:	191a      	adds	r2, r3, r4
   12b16:	b191      	cbz	r1, 12b3e <pm_system_suspend+0x6e>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   12b18:	ca07      	ldmia	r2, {r0, r1, r2}
   12b1a:	eb06 0c04 	add.w	ip, r6, r4
   12b1e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   12b22:	2200      	movs	r2, #0
   12b24:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12b26:	482f      	ldr	r0, [pc, #188]	; (12be4 <pm_system_suspend+0x114>)
   12b28:	f00d fa60 	bl	1ffec <z_spin_unlock_valid>
   12b2c:	4604      	mov	r4, r0
   12b2e:	b988      	cbnz	r0, 12b54 <pm_system_suspend+0x84>
   12b30:	492d      	ldr	r1, [pc, #180]	; (12be8 <pm_system_suspend+0x118>)
   12b32:	482e      	ldr	r0, [pc, #184]	; (12bec <pm_system_suspend+0x11c>)
   12b34:	22c2      	movs	r2, #194	; 0xc2
   12b36:	f013 fa03 	bl	25f40 <assert_print>
   12b3a:	21c2      	movs	r1, #194	; 0xc2
   12b3c:	e7df      	b.n	12afe <pm_system_suspend+0x2e>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   12b3e:	4639      	mov	r1, r7
   12b40:	4628      	mov	r0, r5
   12b42:	f000 f861 	bl	12c08 <pm_policy_next_state>
		if (info != NULL) {
   12b46:	2800      	cmp	r0, #0
   12b48:	d0ed      	beq.n	12b26 <pm_system_suspend+0x56>
			z_cpus_pm_state[id] = *info;
   12b4a:	c807      	ldmia	r0, {r0, r1, r2}
   12b4c:	4434      	add	r4, r6
   12b4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   12b52:	e7e8      	b.n	12b26 <pm_system_suspend+0x56>
	__asm__ volatile(
   12b54:	f388 8811 	msr	BASEPRI, r8
   12b58:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   12b5c:	230c      	movs	r3, #12
   12b5e:	436b      	muls	r3, r5
   12b60:	18f2      	adds	r2, r6, r3
   12b62:	5cf3      	ldrb	r3, [r6, r3]
   12b64:	2b00      	cmp	r3, #0
   12b66:	d039      	beq.n	12bdc <pm_system_suspend+0x10c>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   12b68:	1c7b      	adds	r3, r7, #1
   12b6a:	d00f      	beq.n	12b8c <pm_system_suspend+0xbc>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12b6c:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12b70:	4821      	ldr	r0, [pc, #132]	; (12bf8 <pm_system_suspend+0x128>)
   12b72:	4a22      	ldr	r2, [pc, #136]	; (12bfc <pm_system_suspend+0x12c>)
   12b74:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   12b78:	2100      	movs	r1, #0
   12b7a:	2300      	movs	r3, #0
   12b7c:	fbee 010c 	umlal	r0, r1, lr, ip
   12b80:	f7ed fabe 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   12b84:	2101      	movs	r1, #1
   12b86:	1a38      	subs	r0, r7, r0
   12b88:	f00f fb46 	bl	22218 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12b8c:	f00e fba0 	bl	212d0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   12b90:	2001      	movs	r0, #1
   12b92:	f7ff ff13 	bl	129bc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12b96:	f3bf 8f5b 	dmb	ish
   12b9a:	4b19      	ldr	r3, [pc, #100]	; (12c00 <pm_system_suspend+0x130>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12b9c:	096a      	lsrs	r2, r5, #5
   12b9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   12ba2:	f005 011f 	and.w	r1, r5, #31
   12ba6:	2201      	movs	r2, #1
   12ba8:	408a      	lsls	r2, r1
   12baa:	e853 0f00 	ldrex	r0, [r3]
   12bae:	4310      	orrs	r0, r2
   12bb0:	e843 0100 	strex	r1, r0, [r3]
   12bb4:	2900      	cmp	r1, #0
   12bb6:	d1f8      	bne.n	12baa <pm_system_suspend+0xda>
   12bb8:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   12bbc:	4b11      	ldr	r3, [pc, #68]	; (12c04 <pm_system_suspend+0x134>)
   12bbe:	b133      	cbz	r3, 12bce <pm_system_suspend+0xfe>
		pm_state_set(info->state, info->substate_id);
   12bc0:	230c      	movs	r3, #12
   12bc2:	436b      	muls	r3, r5
   12bc4:	18f2      	adds	r2, r6, r3
   12bc6:	5cf0      	ldrb	r0, [r6, r3]
   12bc8:	7851      	ldrb	r1, [r2, #1]
   12bca:	f014 f86e 	bl	26caa <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   12bce:	f7ff ff43 	bl	12a58 <pm_system_resume>
	k_sched_unlock();
   12bd2:	f00e fbc9 	bl	21368 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   12bd6:	4620      	mov	r0, r4
   12bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   12bdc:	461c      	mov	r4, r3
   12bde:	e7fa      	b.n	12bd6 <pm_system_suspend+0x106>
   12be0:	20002a64 	.word	0x20002a64
   12be4:	20002068 	.word	0x20002068
   12be8:	0002a819 	.word	0x0002a819
   12bec:	0002a7df 	.word	0x0002a7df
   12bf0:	20002078 	.word	0x20002078
   12bf4:	2000206c 	.word	0x2000206c
   12bf8:	000f423f 	.word	0x000f423f
   12bfc:	000f4240 	.word	0x000f4240
   12c00:	2000208c 	.word	0x2000208c
   12c04:	00026cab 	.word	0x00026cab

00012c08 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   12c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c0c:	b085      	sub	sp, #20
   12c0e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12c10:	a903      	add	r1, sp, #12
   12c12:	f000 f843 	bl	12c9c <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12c16:	4b1e      	ldr	r3, [pc, #120]	; (12c90 <pm_policy_next_state+0x88>)
   12c18:	9d03      	ldr	r5, [sp, #12]
   12c1a:	f8d3 a000 	ldr.w	sl, [r3]
   12c1e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 12c94 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12c22:	1e43      	subs	r3, r0, #1
   12c24:	b21b      	sxth	r3, r3
   12c26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12c2a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12c2c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12c30:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   12c34:	f04f 0b00 	mov.w	fp, #0
   12c38:	b924      	cbnz	r4, 12c44 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   12c3a:	46a1      	mov	r9, r4
}
   12c3c:	4648      	mov	r0, r9
   12c3e:	b005      	add	sp, #20
   12c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c44:	6868      	ldr	r0, [r5, #4]
   12c46:	4a14      	ldr	r2, [pc, #80]	; (12c98 <pm_policy_next_state+0x90>)
   12c48:	46c4      	mov	ip, r8
   12c4a:	4659      	mov	r1, fp
   12c4c:	fbe0 c107 	umlal	ip, r1, r0, r7
   12c50:	2300      	movs	r3, #0
   12c52:	4660      	mov	r0, ip
   12c54:	f7ed fa54 	bl	100 <__aeabi_uldivmod>
   12c58:	9001      	str	r0, [sp, #4]
   12c5a:	68a8      	ldr	r0, [r5, #8]
   12c5c:	4a0e      	ldr	r2, [pc, #56]	; (12c98 <pm_policy_next_state+0x90>)
   12c5e:	46c4      	mov	ip, r8
   12c60:	4659      	mov	r1, fp
   12c62:	fbe0 c107 	umlal	ip, r1, r0, r7
   12c66:	2300      	movs	r3, #0
   12c68:	4660      	mov	r0, ip
   12c6a:	f7ed fa49 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12c6e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   12c72:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12c74:	d001      	beq.n	12c7a <pm_policy_next_state+0x72>
   12c76:	4582      	cmp	sl, r0
   12c78:	d905      	bls.n	12c86 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   12c7a:	1c73      	adds	r3, r6, #1
   12c7c:	d0de      	beq.n	12c3c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   12c7e:	9b01      	ldr	r3, [sp, #4]
   12c80:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   12c82:	42b0      	cmp	r0, r6
   12c84:	d9da      	bls.n	12c3c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12c86:	3c01      	subs	r4, #1
   12c88:	b2a4      	uxth	r4, r4
   12c8a:	3d0c      	subs	r5, #12
   12c8c:	e7d4      	b.n	12c38 <pm_policy_next_state+0x30>
   12c8e:	bf00      	nop
   12c90:	20000534 	.word	0x20000534
   12c94:	000f423f 	.word	0x000f423f
   12c98:	000f4240 	.word	0x000f4240

00012c9c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   12c9c:	b908      	cbnz	r0, 12ca2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   12c9e:	4b02      	ldr	r3, [pc, #8]	; (12ca8 <pm_state_cpu_get_all+0xc>)
   12ca0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   12ca2:	2000      	movs	r0, #0
   12ca4:	4770      	bx	lr
   12ca6:	bf00      	nop
   12ca8:	00029c54 	.word	0x00029c54

00012cac <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   12cac:	1e4b      	subs	r3, r1, #1
   12cae:	4259      	negs	r1, r3
   12cb0:	4159      	adcs	r1, r3
   12cb2:	4b01      	ldr	r3, [pc, #4]	; (12cb8 <lbslc_ccc_cfg_changed+0xc>)
   12cb4:	7019      	strb	r1, [r3, #0]
}
   12cb6:	4770      	bx	lr
   12cb8:	200035a3 	.word	0x200035a3

00012cbc <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   12cbc:	b508      	push	{r3, lr}
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (len != 1U) {
   12cbe:	2b01      	cmp	r3, #1
{
   12cc0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
	if (len != 1U) {
   12cc4:	d10c      	bne.n	12ce0 <write_led+0x24>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
   12cc6:	b971      	cbnz	r1, 12ce6 <write_led+0x2a>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (lbs_cb.led_cb) {
   12cc8:	4b0a      	ldr	r3, [pc, #40]	; (12cf4 <write_led+0x38>)
   12cca:	681b      	ldr	r3, [r3, #0]
   12ccc:	b90b      	cbnz	r3, 12cd2 <write_led+0x16>
			LOG_DBG("Write led: Incorrect value");
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
		}
	}

	return len;
   12cce:	2001      	movs	r0, #1
}
   12cd0:	bd08      	pop	{r3, pc}
		uint8_t val = *((uint8_t *)buf);
   12cd2:	7810      	ldrb	r0, [r2, #0]
		if (val == 0x00 || val == 0x01) {
   12cd4:	2801      	cmp	r0, #1
   12cd6:	d809      	bhi.n	12cec <write_led+0x30>
			lbs_cb.led_cb(val ? true : false);
   12cd8:	f000 0001 	and.w	r0, r0, #1
   12cdc:	4798      	blx	r3
   12cde:	e7f6      	b.n	12cce <write_led+0x12>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12ce0:	f06f 000c 	mvn.w	r0, #12
   12ce4:	e7f4      	b.n	12cd0 <write_led+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12ce6:	f06f 0006 	mvn.w	r0, #6
   12cea:	e7f1      	b.n	12cd0 <write_led+0x14>
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   12cec:	f06f 0012 	mvn.w	r0, #18
   12cf0:	e7ee      	b.n	12cd0 <write_led+0x14>
   12cf2:	bf00      	nop
   12cf4:	20002090 	.word	0x20002090

00012cf8 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
   12cf8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12cfc:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (lbs_cb.button_cb) {
   12cfe:	4b0d      	ldr	r3, [pc, #52]	; (12d34 <read_button+0x3c>)
{
   12d00:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
   12d02:	6858      	ldr	r0, [r3, #4]
{
   12d04:	460c      	mov	r4, r1
   12d06:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
   12d08:	b180      	cbz	r0, 12d2c <read_button+0x34>
	const char *value = attr->user_data;
   12d0a:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
   12d0e:	4780      	blx	r0
   12d10:	4b09      	ldr	r3, [pc, #36]	; (12d38 <read_button+0x40>)
   12d12:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   12d14:	2301      	movs	r3, #1
   12d16:	e9cd 8301 	strd	r8, r3, [sp, #4]
   12d1a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12d1e:	9300      	str	r3, [sp, #0]
   12d20:	4632      	mov	r2, r6
   12d22:	463b      	mov	r3, r7
   12d24:	4621      	mov	r1, r4
   12d26:	4628      	mov	r0, r5
   12d28:	f015 fa7c 	bl	28224 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
   12d2c:	b004      	add	sp, #16
   12d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d32:	bf00      	nop
   12d34:	20002090 	.word	0x20002090
   12d38:	200035a2 	.word	0x200035a2

00012d3c <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
   12d3c:	b120      	cbz	r0, 12d48 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
   12d3e:	4b03      	ldr	r3, [pc, #12]	; (12d4c <bt_lbs_init+0x10>)
   12d40:	6802      	ldr	r2, [r0, #0]
   12d42:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
   12d44:	6842      	ldr	r2, [r0, #4]
   12d46:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
   12d48:	2000      	movs	r0, #0
   12d4a:	4770      	bx	lr
   12d4c:	20002090 	.word	0x20002090

00012d50 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
   12d50:	b500      	push	{lr}
	if (!notify_enabled) {
   12d52:	4b0e      	ldr	r3, [pc, #56]	; (12d8c <bt_lbs_send_button_state+0x3c>)
{
   12d54:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
   12d56:	781b      	ldrb	r3, [r3, #0]
{
   12d58:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
   12d5c:	b19b      	cbz	r3, 12d86 <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   12d5e:	2100      	movs	r1, #0
   12d60:	2218      	movs	r2, #24
   12d62:	a802      	add	r0, sp, #8
   12d64:	f013 ff95 	bl	26c92 <memset>

	params.attr = attr;
   12d68:	4b09      	ldr	r3, [pc, #36]	; (12d90 <bt_lbs_send_button_state+0x40>)
   12d6a:	9303      	str	r3, [sp, #12]
	params.data = data;
   12d6c:	f10d 0307 	add.w	r3, sp, #7
   12d70:	9304      	str	r3, [sp, #16]
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   12d72:	a902      	add	r1, sp, #8
	params.len = len;
   12d74:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   12d76:	2000      	movs	r0, #0
	params.len = len;
   12d78:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   12d7c:	f006 fc32 	bl	195e4 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
   12d80:	b009      	add	sp, #36	; 0x24
   12d82:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   12d86:	f06f 000c 	mvn.w	r0, #12
   12d8a:	e7f9      	b.n	12d80 <bt_lbs_send_button_state+0x30>
   12d8c:	200035a3 	.word	0x200035a3
   12d90:	00029c7c 	.word	0x00029c7c

00012d94 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   12d94:	4904      	ldr	r1, [pc, #16]	; (12da8 <sub_bytes+0x14>)
   12d96:	1e43      	subs	r3, r0, #1
   12d98:	300f      	adds	r0, #15
   12d9a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   12d9e:	5c8a      	ldrb	r2, [r1, r2]
   12da0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   12da2:	4283      	cmp	r3, r0
   12da4:	d1f9      	bne.n	12d9a <sub_bytes+0x6>
	}
}
   12da6:	4770      	bx	lr
   12da8:	0002aa6c 	.word	0x0002aa6c

00012dac <tc_aes128_set_encrypt_key>:
{
   12dac:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   12dae:	4e26      	ldr	r6, [pc, #152]	; (12e48 <tc_aes128_set_encrypt_key+0x9c>)
{
   12db0:	4607      	mov	r7, r0
   12db2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   12db4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   12db6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12db8:	ad01      	add	r5, sp, #4
   12dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12dbc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12dc0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12dc4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   12dc8:	4638      	mov	r0, r7
   12dca:	2f00      	cmp	r7, #0
   12dcc:	d038      	beq.n	12e40 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   12dce:	2c00      	cmp	r4, #0
   12dd0:	d038      	beq.n	12e44 <tc_aes128_set_encrypt_key+0x98>
   12dd2:	1f38      	subs	r0, r7, #4
   12dd4:	4621      	mov	r1, r4
   12dd6:	4602      	mov	r2, r0
   12dd8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12dda:	784b      	ldrb	r3, [r1, #1]
   12ddc:	780d      	ldrb	r5, [r1, #0]
   12dde:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12de0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   12de4:	78cd      	ldrb	r5, [r1, #3]
   12de6:	432b      	orrs	r3, r5
   12de8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   12dea:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12dec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   12df0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12df2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   12df6:	d1f0      	bne.n	12dda <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12df8:	4c14      	ldr	r4, [pc, #80]	; (12e4c <tc_aes128_set_encrypt_key+0xa0>)
   12dfa:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   12dfc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   12dfe:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   12e00:	d116      	bne.n	12e30 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12e02:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12e06:	5ca5      	ldrb	r5, [r4, r2]
   12e08:	0e1a      	lsrs	r2, r3, #24
   12e0a:	5ca2      	ldrb	r2, [r4, r2]
   12e0c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   12e10:	f3c3 2507 	ubfx	r5, r3, #8, #8
   12e14:	b2db      	uxtb	r3, r3
   12e16:	5d65      	ldrb	r5, [r4, r5]
   12e18:	5ce3      	ldrb	r3, [r4, r3]
   12e1a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   12e1e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   12e22:	f021 0303 	bic.w	r3, r1, #3
   12e26:	3330      	adds	r3, #48	; 0x30
   12e28:	446b      	add	r3, sp
   12e2a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   12e2e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   12e30:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   12e34:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   12e36:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   12e38:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   12e3a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12e3c:	d1de      	bne.n	12dfc <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   12e3e:	2001      	movs	r0, #1
}
   12e40:	b00d      	add	sp, #52	; 0x34
   12e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   12e44:	4620      	mov	r0, r4
   12e46:	e7fb      	b.n	12e40 <tc_aes128_set_encrypt_key+0x94>
   12e48:	00029b64 	.word	0x00029b64
   12e4c:	0002aa6c 	.word	0x0002aa6c

00012e50 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   12e50:	4801      	ldr	r0, [pc, #4]	; (12e58 <nrf_cc3xx_platform_abort_init+0x8>)
   12e52:	f010 b955 	b.w	23100 <nrf_cc3xx_platform_set_abort>
   12e56:	bf00      	nop
   12e58:	00029ccc 	.word	0x00029ccc

00012e5c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12e5c:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   12e5e:	4604      	mov	r4, r0
   12e60:	b918      	cbnz	r0, 12e6a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   12e62:	4b0f      	ldr	r3, [pc, #60]	; (12ea0 <mutex_free_platform+0x44>)
   12e64:	480f      	ldr	r0, [pc, #60]	; (12ea4 <mutex_free_platform+0x48>)
   12e66:	685b      	ldr	r3, [r3, #4]
   12e68:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12e6a:	6861      	ldr	r1, [r4, #4]
   12e6c:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   12e70:	d00f      	beq.n	12e92 <mutex_free_platform+0x36>
   12e72:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   12e76:	d00c      	beq.n	12e92 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12e78:	4d0b      	ldr	r5, [pc, #44]	; (12ea8 <mutex_free_platform+0x4c>)
   12e7a:	42a9      	cmp	r1, r5
   12e7c:	d009      	beq.n	12e92 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   12e7e:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   12e82:	d007      	beq.n	12e94 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   12e84:	4809      	ldr	r0, [pc, #36]	; (12eac <mutex_free_platform+0x50>)
   12e86:	4621      	mov	r1, r4
   12e88:	f00c ff50 	bl	1fd2c <k_mem_slab_free>
        mutex->mutex = NULL;
   12e8c:	2300      	movs	r3, #0
   12e8e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   12e90:	6065      	str	r5, [r4, #4]
}
   12e92:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12e94:	6820      	ldr	r0, [r4, #0]
   12e96:	2214      	movs	r2, #20
   12e98:	f013 fefb 	bl	26c92 <memset>
   12e9c:	e7f8      	b.n	12e90 <mutex_free_platform+0x34>
   12e9e:	bf00      	nop
   12ea0:	20000718 	.word	0x20000718
   12ea4:	0002ab6c 	.word	0x0002ab6c
   12ea8:	a95c5f2c 	.word	0xa95c5f2c
   12eac:	20002598 	.word	0x20002598

00012eb0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12eb0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   12eb2:	b320      	cbz	r0, 12efe <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   12eb4:	6843      	ldr	r3, [r0, #4]
   12eb6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   12eba:	d110      	bne.n	12ede <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12ebc:	2201      	movs	r2, #1
   12ebe:	6803      	ldr	r3, [r0, #0]
   12ec0:	f3bf 8f5b 	dmb	ish
   12ec4:	e853 1f00 	ldrex	r1, [r3]
   12ec8:	2900      	cmp	r1, #0
   12eca:	d103      	bne.n	12ed4 <mutex_lock_platform+0x24>
   12ecc:	e843 2000 	strex	r0, r2, [r3]
   12ed0:	2800      	cmp	r0, #0
   12ed2:	d1f7      	bne.n	12ec4 <mutex_lock_platform+0x14>
   12ed4:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12ed8:	d10d      	bne.n	12ef6 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   12eda:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   12edc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12ede:	4a09      	ldr	r2, [pc, #36]	; (12f04 <mutex_lock_platform+0x54>)
   12ee0:	4293      	cmp	r3, r2
   12ee2:	d00a      	beq.n	12efa <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12ee4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   12ee6:	f04f 32ff 	mov.w	r2, #4294967295
   12eea:	f04f 33ff 	mov.w	r3, #4294967295
   12eee:	f00d f8c3 	bl	20078 <z_impl_k_mutex_lock>
        if (ret == 0) {
   12ef2:	2800      	cmp	r0, #0
   12ef4:	d0f1      	beq.n	12eda <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12ef6:	4804      	ldr	r0, [pc, #16]	; (12f08 <mutex_lock_platform+0x58>)
   12ef8:	e7f0      	b.n	12edc <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12efa:	4804      	ldr	r0, [pc, #16]	; (12f0c <mutex_lock_platform+0x5c>)
   12efc:	e7ee      	b.n	12edc <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12efe:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12f02:	e7eb      	b.n	12edc <mutex_lock_platform+0x2c>
   12f04:	a95c5f2c 	.word	0xa95c5f2c
   12f08:	ffff8fe9 	.word	0xffff8fe9
   12f0c:	ffff8fea 	.word	0xffff8fea

00012f10 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12f10:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   12f12:	b1d8      	cbz	r0, 12f4c <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   12f14:	6843      	ldr	r3, [r0, #4]
   12f16:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   12f1a:	d110      	bne.n	12f3e <mutex_unlock_platform+0x2e>
   12f1c:	2200      	movs	r2, #0
   12f1e:	6803      	ldr	r3, [r0, #0]
   12f20:	f3bf 8f5b 	dmb	ish
   12f24:	e853 1f00 	ldrex	r1, [r3]
   12f28:	2901      	cmp	r1, #1
   12f2a:	d103      	bne.n	12f34 <mutex_unlock_platform+0x24>
   12f2c:	e843 2000 	strex	r0, r2, [r3]
   12f30:	2800      	cmp	r0, #0
   12f32:	d1f7      	bne.n	12f24 <mutex_unlock_platform+0x14>
   12f34:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12f38:	d10b      	bne.n	12f52 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   12f3a:	2000      	movs	r0, #0
    }
}
   12f3c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12f3e:	4a07      	ldr	r2, [pc, #28]	; (12f5c <mutex_unlock_platform+0x4c>)
   12f40:	4293      	cmp	r3, r2
   12f42:	d008      	beq.n	12f56 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12f44:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   12f46:	f00d f94d 	bl	201e4 <z_impl_k_mutex_unlock>
   12f4a:	e7f6      	b.n	12f3a <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12f4c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12f50:	e7f4      	b.n	12f3c <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12f52:	4803      	ldr	r0, [pc, #12]	; (12f60 <mutex_unlock_platform+0x50>)
   12f54:	e7f2      	b.n	12f3c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12f56:	4803      	ldr	r0, [pc, #12]	; (12f64 <mutex_unlock_platform+0x54>)
   12f58:	e7f0      	b.n	12f3c <mutex_unlock_platform+0x2c>
   12f5a:	bf00      	nop
   12f5c:	a95c5f2c 	.word	0xa95c5f2c
   12f60:	ffff8fe9 	.word	0xffff8fe9
   12f64:	ffff8fea 	.word	0xffff8fea

00012f68 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12f68:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12f6a:	4604      	mov	r4, r0
   12f6c:	b918      	cbnz	r0, 12f76 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   12f6e:	4b1d      	ldr	r3, [pc, #116]	; (12fe4 <mutex_init_platform+0x7c>)
   12f70:	481d      	ldr	r0, [pc, #116]	; (12fe8 <mutex_init_platform+0x80>)
   12f72:	685b      	ldr	r3, [r3, #4]
   12f74:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12f76:	6863      	ldr	r3, [r4, #4]
   12f78:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   12f7c:	d02f      	beq.n	12fde <mutex_init_platform+0x76>
   12f7e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   12f82:	d02c      	beq.n	12fde <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   12f84:	4a19      	ldr	r2, [pc, #100]	; (12fec <mutex_init_platform+0x84>)
   12f86:	4293      	cmp	r3, r2
   12f88:	d119      	bne.n	12fbe <mutex_init_platform+0x56>
   12f8a:	6823      	ldr	r3, [r4, #0]
   12f8c:	bb03      	cbnz	r3, 12fd0 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   12f8e:	4818      	ldr	r0, [pc, #96]	; (12ff0 <mutex_init_platform+0x88>)
   12f90:	f04f 32ff 	mov.w	r2, #4294967295
   12f94:	f04f 33ff 	mov.w	r3, #4294967295
   12f98:	4621      	mov	r1, r4
   12f9a:	f00c fe6f 	bl	1fc7c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   12f9e:	b908      	cbnz	r0, 12fa4 <mutex_init_platform+0x3c>
   12fa0:	6823      	ldr	r3, [r4, #0]
   12fa2:	b91b      	cbnz	r3, 12fac <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   12fa4:	4b0f      	ldr	r3, [pc, #60]	; (12fe4 <mutex_init_platform+0x7c>)
   12fa6:	4813      	ldr	r0, [pc, #76]	; (12ff4 <mutex_init_platform+0x8c>)
   12fa8:	685b      	ldr	r3, [r3, #4]
   12faa:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12fac:	6820      	ldr	r0, [r4, #0]
   12fae:	2214      	movs	r2, #20
   12fb0:	2100      	movs	r1, #0
   12fb2:	f013 fe6e 	bl	26c92 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   12fb6:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   12fba:	6063      	str	r3, [r4, #4]
   12fbc:	e008      	b.n	12fd0 <mutex_init_platform+0x68>
    switch(flags){
   12fbe:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   12fc2:	d80d      	bhi.n	12fe0 <mutex_init_platform+0x78>
   12fc4:	2b3a      	cmp	r3, #58	; 0x3a
   12fc6:	d003      	beq.n	12fd0 <mutex_init_platform+0x68>
   12fc8:	f640 62ba 	movw	r2, #3770	; 0xeba
   12fcc:	4293      	cmp	r3, r2
   12fce:	d1de      	bne.n	12f8e <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   12fd0:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   12fd2:	f016 f98b 	bl	292ec <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   12fd6:	6863      	ldr	r3, [r4, #4]
   12fd8:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   12fdc:	6063      	str	r3, [r4, #4]
}
   12fde:	bd10      	pop	{r4, pc}
    switch(flags){
   12fe0:	4a05      	ldr	r2, [pc, #20]	; (12ff8 <mutex_init_platform+0x90>)
   12fe2:	e7f3      	b.n	12fcc <mutex_init_platform+0x64>
   12fe4:	20000718 	.word	0x20000718
   12fe8:	0002ab6c 	.word	0x0002ab6c
   12fec:	a95c5f2c 	.word	0xa95c5f2c
   12ff0:	20002598 	.word	0x20002598
   12ff4:	0002ab92 	.word	0x0002ab92
   12ff8:	3a00003a 	.word	0x3a00003a

00012ffc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   12ffc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   12ffe:	4906      	ldr	r1, [pc, #24]	; (13018 <nrf_cc3xx_platform_mutex_init+0x1c>)
   13000:	4806      	ldr	r0, [pc, #24]	; (1301c <nrf_cc3xx_platform_mutex_init+0x20>)
   13002:	2340      	movs	r3, #64	; 0x40
   13004:	2214      	movs	r2, #20
   13006:	f016 f946 	bl	29296 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1300a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1300e:	4904      	ldr	r1, [pc, #16]	; (13020 <nrf_cc3xx_platform_mutex_init+0x24>)
   13010:	4804      	ldr	r0, [pc, #16]	; (13024 <nrf_cc3xx_platform_mutex_init+0x28>)
   13012:	f010 b93b 	b.w	2328c <nrf_cc3xx_platform_set_mutexes>
   13016:	bf00      	nop
   13018:	20002098 	.word	0x20002098
   1301c:	20002598 	.word	0x20002598
   13020:	00029cd4 	.word	0x00029cd4
   13024:	00029ce8 	.word	0x00029ce8

00013028 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13028:	4901      	ldr	r1, [pc, #4]	; (13030 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1302a:	2210      	movs	r2, #16
	str	r2, [r1]
   1302c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1302e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13030:	e000ed10 	.word	0xe000ed10

00013034 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13034:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13036:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13038:	f380 8811 	msr	BASEPRI, r0
	isb
   1303c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13040:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13044:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13046:	b662      	cpsie	i
	isb
   13048:	f3bf 8f6f 	isb	sy

	bx	lr
   1304c:	4770      	bx	lr
   1304e:	bf00      	nop

00013050 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13050:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13052:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13054:	f381 8811 	msr	BASEPRI, r1

	wfe
   13058:	bf20      	wfe

	msr	BASEPRI, r0
   1305a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1305e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13060:	4770      	bx	lr
   13062:	bf00      	nop

00013064 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13064:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13066:	4605      	mov	r5, r0

	if (esf != NULL) {
   13068:	460c      	mov	r4, r1
   1306a:	b1c9      	cbz	r1, 130a0 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1306c:	688b      	ldr	r3, [r1, #8]
   1306e:	9300      	str	r3, [sp, #0]
   13070:	e9d1 2300 	ldrd	r2, r3, [r1]
   13074:	480e      	ldr	r0, [pc, #56]	; (130b0 <z_arm_fatal_error+0x4c>)
   13076:	2145      	movs	r1, #69	; 0x45
   13078:	f012 ff70 	bl	25f5c <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1307c:	6963      	ldr	r3, [r4, #20]
   1307e:	9300      	str	r3, [sp, #0]
   13080:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   13084:	480b      	ldr	r0, [pc, #44]	; (130b4 <z_arm_fatal_error+0x50>)
   13086:	2145      	movs	r1, #69	; 0x45
   13088:	f012 ff68 	bl	25f5c <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1308c:	69e2      	ldr	r2, [r4, #28]
   1308e:	480a      	ldr	r0, [pc, #40]	; (130b8 <z_arm_fatal_error+0x54>)
   13090:	2145      	movs	r1, #69	; 0x45
   13092:	f012 ff63 	bl	25f5c <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13096:	69a2      	ldr	r2, [r4, #24]
   13098:	4808      	ldr	r0, [pc, #32]	; (130bc <z_arm_fatal_error+0x58>)
   1309a:	2145      	movs	r1, #69	; 0x45
   1309c:	f012 ff5e 	bl	25f5c <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   130a0:	4621      	mov	r1, r4
   130a2:	4628      	mov	r0, r5
}
   130a4:	b003      	add	sp, #12
   130a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   130aa:	f00c bb97 	b.w	1f7dc <z_fatal_error>
   130ae:	bf00      	nop
   130b0:	0002abbf 	.word	0x0002abbf
   130b4:	0002abf3 	.word	0x0002abf3
   130b8:	0002ac27 	.word	0x0002ac27
   130bc:	0002ac3b 	.word	0x0002ac3b

000130c0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   130c0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   130c2:	2800      	cmp	r0, #0
   130c4:	db07      	blt.n	130d6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   130c6:	4a04      	ldr	r2, [pc, #16]	; (130d8 <arch_irq_enable+0x18>)
   130c8:	0941      	lsrs	r1, r0, #5
   130ca:	2301      	movs	r3, #1
   130cc:	f000 001f 	and.w	r0, r0, #31
   130d0:	4083      	lsls	r3, r0
   130d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   130d6:	4770      	bx	lr
   130d8:	e000e100 	.word	0xe000e100

000130dc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   130dc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   130de:	2800      	cmp	r0, #0
   130e0:	db0c      	blt.n	130fc <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   130e2:	0943      	lsrs	r3, r0, #5
   130e4:	4906      	ldr	r1, [pc, #24]	; (13100 <arch_irq_disable+0x24>)
   130e6:	f000 001f 	and.w	r0, r0, #31
   130ea:	3320      	adds	r3, #32
   130ec:	2201      	movs	r2, #1
   130ee:	4082      	lsls	r2, r0
   130f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   130f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   130f8:	f3bf 8f6f 	isb	sy
}
   130fc:	4770      	bx	lr
   130fe:	bf00      	nop
   13100:	e000e100 	.word	0xe000e100

00013104 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13104:	4b05      	ldr	r3, [pc, #20]	; (1311c <arch_irq_is_enabled+0x18>)
   13106:	0942      	lsrs	r2, r0, #5
   13108:	f000 001f 	and.w	r0, r0, #31
   1310c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13110:	2301      	movs	r3, #1
   13112:	fa03 f000 	lsl.w	r0, r3, r0
}
   13116:	4010      	ands	r0, r2
   13118:	4770      	bx	lr
   1311a:	bf00      	nop
   1311c:	e000e100 	.word	0xe000e100

00013120 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   13120:	b508      	push	{r3, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13122:	07d3      	lsls	r3, r2, #31
   13124:	d40b      	bmi.n	1313e <z_arm_irq_priority_set+0x1e>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   13126:	3102      	adds	r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   13128:	2907      	cmp	r1, #7
   1312a:	d909      	bls.n	13140 <z_arm_irq_priority_set+0x20>
   1312c:	490e      	ldr	r1, [pc, #56]	; (13168 <z_arm_irq_priority_set+0x48>)
   1312e:	480f      	ldr	r0, [pc, #60]	; (1316c <z_arm_irq_priority_set+0x4c>)
   13130:	225b      	movs	r2, #91	; 0x5b
   13132:	f012 ff05 	bl	25f40 <assert_print>
   13136:	480c      	ldr	r0, [pc, #48]	; (13168 <z_arm_irq_priority_set+0x48>)
   13138:	215b      	movs	r1, #91	; 0x5b
   1313a:	f012 fefa 	bl	25f32 <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1313e:	2100      	movs	r1, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13140:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13142:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13144:	bfac      	ite	ge
   13146:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1314a:	4b09      	ldrlt	r3, [pc, #36]	; (13170 <z_arm_irq_priority_set+0x50>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1314c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13150:	bfb8      	it	lt
   13152:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13156:	b2c9      	uxtb	r1, r1
   13158:	bfaa      	itet	ge
   1315a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1315e:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13160:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   13164:	bd08      	pop	{r3, pc}
   13166:	bf00      	nop
   13168:	0002ac6e 	.word	0x0002ac6e
   1316c:	0002a7df 	.word	0x0002a7df
   13170:	e000ed14 	.word	0xe000ed14

00013174 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13174:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13176:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13178:	4b04      	ldr	r3, [pc, #16]	; (1318c <_arch_isr_direct_pm+0x18>)
   1317a:	699a      	ldr	r2, [r3, #24]
   1317c:	b11a      	cbz	r2, 13186 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1317e:	2200      	movs	r2, #0
   13180:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   13182:	f016 f8a4 	bl	292ce <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13186:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13188:	bd08      	pop	{r3, pc}
   1318a:	bf00      	nop
   1318c:	20002a64 	.word	0x20002a64

00013190 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13190:	bf30      	wfi
    b z_SysNmiOnReset
   13192:	f7ff bffd 	b.w	13190 <z_SysNmiOnReset>
   13196:	bf00      	nop

00013198 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13198:	4a0b      	ldr	r2, [pc, #44]	; (131c8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1319a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1319c:	4b0b      	ldr	r3, [pc, #44]	; (131cc <z_arm_prep_c+0x34>)
   1319e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   131a2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   131a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   131a8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   131ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   131b0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   131b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   131b8:	f00c fba8 	bl	1f90c <z_bss_zero>
	z_data_copy();
   131bc:	f00e feaa 	bl	21f14 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   131c0:	f000 fb00 	bl	137c4 <z_arm_interrupt_init>
	z_cstart();
   131c4:	f00c fbe6 	bl	1f994 <z_cstart>
   131c8:	00000000 	.word	0x00000000
   131cc:	e000ed00 	.word	0xe000ed00

000131d0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   131d0:	4a09      	ldr	r2, [pc, #36]	; (131f8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   131d2:	490a      	ldr	r1, [pc, #40]	; (131fc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   131d4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   131d6:	6809      	ldr	r1, [r1, #0]
   131d8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   131da:	4909      	ldr	r1, [pc, #36]	; (13200 <arch_swap+0x30>)
	_current->arch.basepri = key;
   131dc:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   131de:	684b      	ldr	r3, [r1, #4]
   131e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   131e4:	604b      	str	r3, [r1, #4]
   131e6:	2300      	movs	r3, #0
   131e8:	f383 8811 	msr	BASEPRI, r3
   131ec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   131f0:	6893      	ldr	r3, [r2, #8]
}
   131f2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   131f4:	4770      	bx	lr
   131f6:	bf00      	nop
   131f8:	20002a64 	.word	0x20002a64
   131fc:	0002a218 	.word	0x0002a218
   13200:	e000ed00 	.word	0xe000ed00

00013204 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13204:	4912      	ldr	r1, [pc, #72]	; (13250 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13206:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13208:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1320c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1320e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13212:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13216:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   13218:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1321c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13220:	4f0c      	ldr	r7, [pc, #48]	; (13254 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13222:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13226:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13228:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1322a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1322c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1322e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13230:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13232:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13236:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13238:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1323a:	f000 fb5f 	bl	138fc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1323e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13242:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13246:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1324a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1324e:	4770      	bx	lr
    ldr r1, =_kernel
   13250:	20002a64 	.word	0x20002a64
    ldr v4, =_SCS_ICSR
   13254:	e000ed04 	.word	0xe000ed04

00013258 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13258:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1325c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1325e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13262:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13266:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13268:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1326c:	2902      	cmp	r1, #2
    beq _oops
   1326e:	d0ff      	beq.n	13270 <_oops>

00013270 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13270:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   13272:	f013 fc1c 	bl	26aae <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   13276:	bd01      	pop	{r0, pc}

00013278 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13278:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1327c:	9b00      	ldr	r3, [sp, #0]
   1327e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   13282:	490a      	ldr	r1, [pc, #40]	; (132ac <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   13284:	9b01      	ldr	r3, [sp, #4]
   13286:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1328a:	9b02      	ldr	r3, [sp, #8]
   1328c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13290:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13298:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   1329c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   132a0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   132a2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   132a4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   132a6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   132a8:	4770      	bx	lr
   132aa:	bf00      	nop
   132ac:	00025b65 	.word	0x00025b65

000132b0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   132b0:	4a09      	ldr	r2, [pc, #36]	; (132d8 <z_check_thread_stack_fail+0x28>)
{
   132b2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   132b4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   132b6:	b170      	cbz	r0, 132d6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   132b8:	f113 0f16 	cmn.w	r3, #22
   132bc:	6e80      	ldr	r0, [r0, #104]	; 0x68
   132be:	d005      	beq.n	132cc <z_check_thread_stack_fail+0x1c>
   132c0:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   132c4:	429a      	cmp	r2, r3
   132c6:	d805      	bhi.n	132d4 <z_check_thread_stack_fail+0x24>
   132c8:	4283      	cmp	r3, r0
   132ca:	d203      	bcs.n	132d4 <z_check_thread_stack_fail+0x24>
		return 0;
   132cc:	4281      	cmp	r1, r0
   132ce:	bf28      	it	cs
   132d0:	2000      	movcs	r0, #0
   132d2:	4770      	bx	lr
   132d4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   132d6:	4770      	bx	lr
   132d8:	20002a64 	.word	0x20002a64

000132dc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   132dc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   132de:	4b09      	ldr	r3, [pc, #36]	; (13304 <arch_switch_to_main_thread+0x28>)
   132e0:	6098      	str	r0, [r3, #8]
{
   132e2:	460d      	mov	r5, r1
   132e4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   132e6:	f000 fb09 	bl	138fc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   132ea:	4620      	mov	r0, r4
   132ec:	f385 8809 	msr	PSP, r5
   132f0:	2100      	movs	r1, #0
   132f2:	b663      	cpsie	if
   132f4:	f381 8811 	msr	BASEPRI, r1
   132f8:	f3bf 8f6f 	isb	sy
   132fc:	2200      	movs	r2, #0
   132fe:	2300      	movs	r3, #0
   13300:	f012 fc30 	bl	25b64 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13304:	20002a64 	.word	0x20002a64

00013308 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13308:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1330a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1330c:	4a0b      	ldr	r2, [pc, #44]	; (1333c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1330e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13310:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13312:	bf1e      	ittt	ne
	movne	r1, #0
   13314:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13316:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13318:	f015 ffd9 	blne	292ce <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1331c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1331e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13322:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13326:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1332a:	4905      	ldr	r1, [pc, #20]	; (13340 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1332c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1332e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13330:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13336:	4903      	ldr	r1, [pc, #12]	; (13344 <_isr_wrapper+0x3c>)
	bx r1
   13338:	4708      	bx	r1
   1333a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1333c:	20002a64 	.word	0x20002a64
	ldr r1, =_sw_isr_table
   13340:	000297c8 	.word	0x000297c8
	ldr r1, =z_arm_int_exit
   13344:	00013349 	.word	0x00013349

00013348 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13348:	4b04      	ldr	r3, [pc, #16]	; (1335c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1334a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1334c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1334e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13350:	d003      	beq.n	1335a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13352:	4903      	ldr	r1, [pc, #12]	; (13360 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13358:	600a      	str	r2, [r1, #0]

0001335a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1335a:	4770      	bx	lr
	ldr r3, =_kernel
   1335c:	20002a64 	.word	0x20002a64
	ldr r1, =_SCS_ICSR
   13360:	e000ed04 	.word	0xe000ed04

00013364 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   13364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13368:	4c38      	ldr	r4, [pc, #224]	; (1344c <mem_manage_fault+0xe8>)
{
   1336a:	4607      	mov	r7, r0
   1336c:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1336e:	4838      	ldr	r0, [pc, #224]	; (13450 <mem_manage_fault+0xec>)
   13370:	2145      	movs	r1, #69	; 0x45
{
   13372:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   13374:	f012 fdf2 	bl	25f5c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13378:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1337a:	06d8      	lsls	r0, r3, #27
   1337c:	d503      	bpl.n	13386 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1337e:	4835      	ldr	r0, [pc, #212]	; (13454 <mem_manage_fault+0xf0>)
   13380:	2145      	movs	r1, #69	; 0x45
   13382:	f012 fdeb 	bl	25f5c <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13388:	0719      	lsls	r1, r3, #28
   1338a:	d503      	bpl.n	13394 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   1338c:	4832      	ldr	r0, [pc, #200]	; (13458 <mem_manage_fault+0xf4>)
   1338e:	2145      	movs	r1, #69	; 0x45
   13390:	f012 fde4 	bl	25f5c <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13394:	4c2d      	ldr	r4, [pc, #180]	; (1344c <mem_manage_fault+0xe8>)
   13396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13398:	079a      	lsls	r2, r3, #30
   1339a:	d432      	bmi.n	13402 <mem_manage_fault+0x9e>
	uint32_t mmfar = -EINVAL;
   1339c:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   133a0:	4c2a      	ldr	r4, [pc, #168]	; (1344c <mem_manage_fault+0xe8>)
   133a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   133a4:	07d8      	lsls	r0, r3, #31
   133a6:	d503      	bpl.n	133b0 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
   133a8:	482c      	ldr	r0, [pc, #176]	; (1345c <mem_manage_fault+0xf8>)
   133aa:	2145      	movs	r1, #69	; 0x45
   133ac:	f012 fdd6 	bl	25f5c <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   133b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   133b2:	0699      	lsls	r1, r3, #26
   133b4:	d503      	bpl.n	133be <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
   133b6:	482a      	ldr	r0, [pc, #168]	; (13460 <mem_manage_fault+0xfc>)
   133b8:	2145      	movs	r1, #69	; 0x45
   133ba:	f012 fdcf 	bl	25f5c <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   133be:	4c23      	ldr	r4, [pc, #140]	; (1344c <mem_manage_fault+0xe8>)
   133c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   133c2:	06da      	lsls	r2, r3, #27
   133c4:	d402      	bmi.n	133cc <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   133c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   133c8:	079b      	lsls	r3, r3, #30
   133ca:	d53d      	bpl.n	13448 <mem_manage_fault+0xe4>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   133cc:	6863      	ldr	r3, [r4, #4]
   133ce:	0518      	lsls	r0, r3, #20
   133d0:	d53a      	bpl.n	13448 <mem_manage_fault+0xe4>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   133d2:	4639      	mov	r1, r7
   133d4:	4630      	mov	r0, r6
   133d6:	f7ff ff6b 	bl	132b0 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
   133da:	b338      	cbz	r0, 1342c <mem_manage_fault+0xc8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   133dc:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
   133e0:	2002      	movs	r0, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   133e2:	4b1a      	ldr	r3, [pc, #104]	; (1344c <mem_manage_fault+0xe8>)
   133e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   133e6:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   133e8:	bf42      	ittt	mi
   133ea:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   133ec:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   133f0:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   133f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   133f4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   133f8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   133fa:	2300      	movs	r3, #0
   133fc:	702b      	strb	r3, [r5, #0]

	return reason;
}
   133fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   13402:	4818      	ldr	r0, [pc, #96]	; (13464 <mem_manage_fault+0x100>)
   13404:	2145      	movs	r1, #69	; 0x45
   13406:	f012 fda9 	bl	25f5c <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   1340a:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1340c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1340e:	061b      	lsls	r3, r3, #24
   13410:	d5c4      	bpl.n	1339c <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   13412:	4815      	ldr	r0, [pc, #84]	; (13468 <mem_manage_fault+0x104>)
   13414:	4632      	mov	r2, r6
   13416:	2145      	movs	r1, #69	; 0x45
   13418:	f012 fda0 	bl	25f5c <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   1341c:	f1b8 0f00 	cmp.w	r8, #0
   13420:	d0be      	beq.n	133a0 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13422:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13428:	62a3      	str	r3, [r4, #40]	; 0x28
   1342a:	e7b9      	b.n	133a0 <mem_manage_fault+0x3c>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   1342c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1342e:	06d9      	lsls	r1, r3, #27
   13430:	d50a      	bpl.n	13448 <mem_manage_fault+0xe4>
   13432:	490e      	ldr	r1, [pc, #56]	; (1346c <mem_manage_fault+0x108>)
   13434:	480e      	ldr	r0, [pc, #56]	; (13470 <mem_manage_fault+0x10c>)
   13436:	f44f 72ab 	mov.w	r2, #342	; 0x156
   1343a:	f012 fd81 	bl	25f40 <assert_print>
   1343e:	480b      	ldr	r0, [pc, #44]	; (1346c <mem_manage_fault+0x108>)
   13440:	f44f 71ab 	mov.w	r1, #342	; 0x156
   13444:	f012 fd75 	bl	25f32 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13448:	2000      	movs	r0, #0
   1344a:	e7ca      	b.n	133e2 <mem_manage_fault+0x7e>
   1344c:	e000ed00 	.word	0xe000ed00
   13450:	0002aca4 	.word	0x0002aca4
   13454:	0002acbf 	.word	0x0002acbf
   13458:	0002acf7 	.word	0x0002acf7
   1345c:	0002ad47 	.word	0x0002ad47
   13460:	0002ad6b 	.word	0x0002ad6b
   13464:	0002ad0f 	.word	0x0002ad0f
   13468:	0002ad2c 	.word	0x0002ad2c
   1346c:	0002ad9f 	.word	0x0002ad9f
   13470:	0002a7df 	.word	0x0002a7df

00013474 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   13474:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13476:	4c1d      	ldr	r4, [pc, #116]	; (134ec <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   13478:	481d      	ldr	r0, [pc, #116]	; (134f0 <usage_fault.constprop.0+0x7c>)
   1347a:	2145      	movs	r1, #69	; 0x45
   1347c:	f012 fd6e 	bl	25f5c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13480:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13482:	019b      	lsls	r3, r3, #6
   13484:	d503      	bpl.n	1348e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   13486:	481b      	ldr	r0, [pc, #108]	; (134f4 <usage_fault.constprop.0+0x80>)
   13488:	2145      	movs	r1, #69	; 0x45
   1348a:	f012 fd67 	bl	25f5c <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1348e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13490:	01dc      	lsls	r4, r3, #7
   13492:	d503      	bpl.n	1349c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   13494:	4818      	ldr	r0, [pc, #96]	; (134f8 <usage_fault.constprop.0+0x84>)
   13496:	2145      	movs	r1, #69	; 0x45
   13498:	f012 fd60 	bl	25f5c <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1349c:	4c13      	ldr	r4, [pc, #76]	; (134ec <usage_fault.constprop.0+0x78>)
   1349e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   134a0:	0318      	lsls	r0, r3, #12
   134a2:	d503      	bpl.n	134ac <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   134a4:	4815      	ldr	r0, [pc, #84]	; (134fc <usage_fault.constprop.0+0x88>)
   134a6:	2145      	movs	r1, #69	; 0x45
   134a8:	f012 fd58 	bl	25f5c <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   134ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   134ae:	0359      	lsls	r1, r3, #13
   134b0:	d503      	bpl.n	134ba <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   134b2:	4813      	ldr	r0, [pc, #76]	; (13500 <usage_fault.constprop.0+0x8c>)
   134b4:	2145      	movs	r1, #69	; 0x45
   134b6:	f012 fd51 	bl	25f5c <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   134ba:	4c0c      	ldr	r4, [pc, #48]	; (134ec <usage_fault.constprop.0+0x78>)
   134bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   134be:	039a      	lsls	r2, r3, #14
   134c0:	d503      	bpl.n	134ca <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   134c2:	4810      	ldr	r0, [pc, #64]	; (13504 <usage_fault.constprop.0+0x90>)
   134c4:	2145      	movs	r1, #69	; 0x45
   134c6:	f012 fd49 	bl	25f5c <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   134ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   134cc:	03db      	lsls	r3, r3, #15
   134ce:	d503      	bpl.n	134d8 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   134d0:	480d      	ldr	r0, [pc, #52]	; (13508 <usage_fault.constprop.0+0x94>)
   134d2:	2145      	movs	r1, #69	; 0x45
   134d4:	f012 fd42 	bl	25f5c <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   134d8:	4a04      	ldr	r2, [pc, #16]	; (134ec <usage_fault.constprop.0+0x78>)
   134da:	6a93      	ldr	r3, [r2, #40]	; 0x28
   134dc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   134e0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   134e4:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   134e6:	2000      	movs	r0, #0
   134e8:	bd10      	pop	{r4, pc}
   134ea:	bf00      	nop
   134ec:	e000ed00 	.word	0xe000ed00
   134f0:	0002add9 	.word	0x0002add9
   134f4:	0002adf6 	.word	0x0002adf6
   134f8:	0002ae0e 	.word	0x0002ae0e
   134fc:	0002ae2d 	.word	0x0002ae2d
   13500:	0002ae50 	.word	0x0002ae50
   13504:	0002ae7a 	.word	0x0002ae7a
   13508:	0002ae99 	.word	0x0002ae99

0001350c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1350c:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1350e:	4c23      	ldr	r4, [pc, #140]	; (1359c <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13510:	4606      	mov	r6, r0
   13512:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   13514:	4822      	ldr	r0, [pc, #136]	; (135a0 <bus_fault.constprop.0+0x94>)
   13516:	2145      	movs	r1, #69	; 0x45
   13518:	f012 fd20 	bl	25f5c <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1351c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1351e:	04d9      	lsls	r1, r3, #19
   13520:	d503      	bpl.n	1352a <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   13522:	4820      	ldr	r0, [pc, #128]	; (135a4 <bus_fault.constprop.0+0x98>)
   13524:	2145      	movs	r1, #69	; 0x45
   13526:	f012 fd19 	bl	25f5c <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1352a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1352c:	051a      	lsls	r2, r3, #20
   1352e:	d503      	bpl.n	13538 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   13530:	481d      	ldr	r0, [pc, #116]	; (135a8 <bus_fault.constprop.0+0x9c>)
   13532:	2145      	movs	r1, #69	; 0x45
   13534:	f012 fd12 	bl	25f5c <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13538:	4c18      	ldr	r4, [pc, #96]	; (1359c <bus_fault.constprop.0+0x90>)
   1353a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1353c:	059b      	lsls	r3, r3, #22
   1353e:	d510      	bpl.n	13562 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   13540:	481a      	ldr	r0, [pc, #104]	; (135ac <bus_fault.constprop.0+0xa0>)
   13542:	2145      	movs	r1, #69	; 0x45
   13544:	f012 fd0a 	bl	25f5c <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   13548:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1354a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1354c:	0418      	lsls	r0, r3, #16
   1354e:	d508      	bpl.n	13562 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13550:	4817      	ldr	r0, [pc, #92]	; (135b0 <bus_fault.constprop.0+0xa4>)
   13552:	2145      	movs	r1, #69	; 0x45
   13554:	f012 fd02 	bl	25f5c <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   13558:	b11e      	cbz	r6, 13562 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1355a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1355c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13560:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13562:	4c0e      	ldr	r4, [pc, #56]	; (1359c <bus_fault.constprop.0+0x90>)
   13564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13566:	0559      	lsls	r1, r3, #21
   13568:	d503      	bpl.n	13572 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   1356a:	4812      	ldr	r0, [pc, #72]	; (135b4 <bus_fault.constprop.0+0xa8>)
   1356c:	2145      	movs	r1, #69	; 0x45
   1356e:	f012 fcf5 	bl	25f5c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13574:	05da      	lsls	r2, r3, #23
   13576:	d50b      	bpl.n	13590 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   13578:	480f      	ldr	r0, [pc, #60]	; (135b8 <bus_fault.constprop.0+0xac>)
   1357a:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1357c:	f012 fcee 	bl	25f5c <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13580:	4a06      	ldr	r2, [pc, #24]	; (1359c <bus_fault.constprop.0+0x90>)
   13582:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13584:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13586:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1358a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1358c:	7028      	strb	r0, [r5, #0]
}
   1358e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13590:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13592:	049b      	lsls	r3, r3, #18
   13594:	d5f4      	bpl.n	13580 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13596:	4809      	ldr	r0, [pc, #36]	; (135bc <bus_fault.constprop.0+0xb0>)
   13598:	2145      	movs	r1, #69	; 0x45
   1359a:	e7ef      	b.n	1357c <bus_fault.constprop.0+0x70>
   1359c:	e000ed00 	.word	0xe000ed00
   135a0:	0002aec9 	.word	0x0002aec9
   135a4:	0002aee4 	.word	0x0002aee4
   135a8:	0002acf7 	.word	0x0002acf7
   135ac:	0002aefa 	.word	0x0002aefa
   135b0:	0002af18 	.word	0x0002af18
   135b4:	0002af32 	.word	0x0002af32
   135b8:	0002af52 	.word	0x0002af52
   135bc:	0002ad6b 	.word	0x0002ad6b

000135c0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   135c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   135c2:	4b6a      	ldr	r3, [pc, #424]	; (1376c <z_arm_fault+0x1ac>)
{
   135c4:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   135c6:	6858      	ldr	r0, [r3, #4]
{
   135c8:	b08a      	sub	sp, #40	; 0x28
   135ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
   135ce:	2600      	movs	r6, #0
   135d0:	f386 8811 	msr	BASEPRI, r6
   135d4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   135d8:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   135dc:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   135e0:	d107      	bne.n	135f2 <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   135e2:	f002 040c 	and.w	r4, r2, #12
   135e6:	2c08      	cmp	r4, #8
   135e8:	d10e      	bne.n	13608 <z_arm_fault+0x48>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   135ea:	4861      	ldr	r0, [pc, #388]	; (13770 <z_arm_fault+0x1b0>)
   135ec:	2145      	movs	r1, #69	; 0x45
   135ee:	f012 fcb5 	bl	25f5c <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   135f2:	4960      	ldr	r1, [pc, #384]	; (13774 <z_arm_fault+0x1b4>)
   135f4:	4860      	ldr	r0, [pc, #384]	; (13778 <z_arm_fault+0x1b8>)
   135f6:	f44f 6284 	mov.w	r2, #1056	; 0x420
   135fa:	f012 fca1 	bl	25f40 <assert_print>
   135fe:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   13602:	485c      	ldr	r0, [pc, #368]	; (13774 <z_arm_fault+0x1b4>)
   13604:	f012 fc95 	bl	25f32 <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13608:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   1360a:	bf4c      	ite	mi
   1360c:	460d      	movmi	r5, r1
			*nested_exc = true;
   1360e:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   13610:	2d00      	cmp	r5, #0
   13612:	d0ee      	beq.n	135f2 <z_arm_fault+0x32>
	*recoverable = false;
   13614:	2400      	movs	r4, #0
	switch (fault) {
   13616:	1eda      	subs	r2, r3, #3
	*recoverable = false;
   13618:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   1361c:	2a09      	cmp	r2, #9
   1361e:	f200 8093 	bhi.w	13748 <z_arm_fault+0x188>
   13622:	e8df f002 	tbb	[pc, r2]
   13626:	8605      	.short	0x8605
   13628:	9191718a 	.word	0x9191718a
   1362c:	8e919191 	.word	0x8e919191
	PR_FAULT_INFO("***** HARD FAULT *****");
   13630:	4852      	ldr	r0, [pc, #328]	; (1377c <z_arm_fault+0x1bc>)
   13632:	2145      	movs	r1, #69	; 0x45
   13634:	f012 fc92 	bl	25f5c <z_log_minimal_printk>
	*recoverable = false;
   13638:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1363c:	4c4b      	ldr	r4, [pc, #300]	; (1376c <z_arm_fault+0x1ac>)
   1363e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13640:	079a      	lsls	r2, r3, #30
   13642:	d505      	bpl.n	13650 <z_arm_fault+0x90>
		PR_EXC("  Bus fault on vector table read");
   13644:	484e      	ldr	r0, [pc, #312]	; (13780 <z_arm_fault+0x1c0>)
   13646:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   13648:	f012 fc88 	bl	25f5c <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1364c:	2400      	movs	r4, #0
   1364e:	e029      	b.n	136a4 <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13650:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13652:	2b00      	cmp	r3, #0
   13654:	da02      	bge.n	1365c <z_arm_fault+0x9c>
		PR_EXC("  Debug event");
   13656:	484b      	ldr	r0, [pc, #300]	; (13784 <z_arm_fault+0x1c4>)
   13658:	2145      	movs	r1, #69	; 0x45
   1365a:	e7f5      	b.n	13648 <z_arm_fault+0x88>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1365c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1365e:	005b      	lsls	r3, r3, #1
   13660:	d55e      	bpl.n	13720 <z_arm_fault+0x160>
		PR_EXC("  Fault escalation (see below)");
   13662:	4849      	ldr	r0, [pc, #292]	; (13788 <z_arm_fault+0x1c8>)
   13664:	2145      	movs	r1, #69	; 0x45
   13666:	f012 fc79 	bl	25f5c <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1366a:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1366c:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1366e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13672:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   13674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13678:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1367c:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1367e:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   13682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   13686:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   13688:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1368c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13690:	f64d 7302 	movw	r3, #57090	; 0xdf02
   13694:	429a      	cmp	r2, r3
   13696:	d11e      	bne.n	136d6 <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   13698:	682a      	ldr	r2, [r5, #0]
   1369a:	483c      	ldr	r0, [pc, #240]	; (1378c <z_arm_fault+0x1cc>)
   1369c:	2145      	movs	r1, #69	; 0x45
   1369e:	f012 fc5d 	bl	25f5c <z_log_minimal_printk>
			reason = esf->basic.r0;
   136a2:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   136a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   136a8:	b99b      	cbnz	r3, 136d2 <z_arm_fault+0x112>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   136aa:	2220      	movs	r2, #32
   136ac:	4629      	mov	r1, r5
   136ae:	a802      	add	r0, sp, #8
   136b0:	f013 fae4 	bl	26c7c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   136b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   136b6:	2e00      	cmp	r6, #0
   136b8:	d052      	beq.n	13760 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   136ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
   136be:	b922      	cbnz	r2, 136ca <z_arm_fault+0x10a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   136c0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   136c4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   136c8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   136ca:	a902      	add	r1, sp, #8
   136cc:	4620      	mov	r0, r4
   136ce:	f7ff fcc9 	bl	13064 <z_arm_fatal_error>
}
   136d2:	b00a      	add	sp, #40	; 0x28
   136d4:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   136d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   136d8:	b2db      	uxtb	r3, r3
   136da:	b13b      	cbz	r3, 136ec <z_arm_fault+0x12c>
			reason = mem_manage_fault(esf, 1, recoverable);
   136dc:	f10d 0207 	add.w	r2, sp, #7
   136e0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   136e2:	4628      	mov	r0, r5
   136e4:	f7ff fe3e 	bl	13364 <mem_manage_fault>
   136e8:	4604      	mov	r4, r0
		break;
   136ea:	e7db      	b.n	136a4 <z_arm_fault+0xe4>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   136ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   136ee:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   136f2:	d005      	beq.n	13700 <z_arm_fault+0x140>
			reason = bus_fault(esf, 1, recoverable);
   136f4:	f10d 0107 	add.w	r1, sp, #7
   136f8:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   136fa:	f7ff ff07 	bl	1350c <bus_fault.constprop.0>
   136fe:	e7f3      	b.n	136e8 <z_arm_fault+0x128>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   13700:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   13706:	d302      	bcc.n	1370e <z_arm_fault+0x14e>
		reason = usage_fault(esf);
   13708:	f7ff feb4 	bl	13474 <usage_fault.constprop.0>
   1370c:	e7ec      	b.n	136e8 <z_arm_fault+0x128>
			__ASSERT(0,
   1370e:	4919      	ldr	r1, [pc, #100]	; (13774 <z_arm_fault+0x1b4>)
   13710:	4819      	ldr	r0, [pc, #100]	; (13778 <z_arm_fault+0x1b8>)
   13712:	f240 22f2 	movw	r2, #754	; 0x2f2
   13716:	f012 fc13 	bl	25f40 <assert_print>
   1371a:	f240 21f2 	movw	r1, #754	; 0x2f2
   1371e:	e770      	b.n	13602 <z_arm_fault+0x42>
		__ASSERT(0,
   13720:	4914      	ldr	r1, [pc, #80]	; (13774 <z_arm_fault+0x1b4>)
   13722:	4815      	ldr	r0, [pc, #84]	; (13778 <z_arm_fault+0x1b8>)
   13724:	f240 22f6 	movw	r2, #758	; 0x2f6
   13728:	f012 fc0a 	bl	25f40 <assert_print>
   1372c:	f240 21f6 	movw	r1, #758	; 0x2f6
   13730:	e767      	b.n	13602 <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
   13732:	f10d 0207 	add.w	r2, sp, #7
   13736:	2100      	movs	r1, #0
   13738:	e7d3      	b.n	136e2 <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
   1373a:	f10d 0107 	add.w	r1, sp, #7
   1373e:	2000      	movs	r0, #0
   13740:	e7db      	b.n	136fa <z_arm_fault+0x13a>
	PR_FAULT_INFO(
   13742:	4813      	ldr	r0, [pc, #76]	; (13790 <z_arm_fault+0x1d0>)
   13744:	2145      	movs	r1, #69	; 0x45
   13746:	e77f      	b.n	13648 <z_arm_fault+0x88>
	PR_FAULT_INFO("***** %s %d) *****",
   13748:	4912      	ldr	r1, [pc, #72]	; (13794 <z_arm_fault+0x1d4>)
   1374a:	4a13      	ldr	r2, [pc, #76]	; (13798 <z_arm_fault+0x1d8>)
   1374c:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
   13750:	bf08      	it	eq
   13752:	460a      	moveq	r2, r1
   13754:	4811      	ldr	r0, [pc, #68]	; (1379c <z_arm_fault+0x1dc>)
   13756:	3b10      	subs	r3, #16
   13758:	2145      	movs	r1, #69	; 0x45
   1375a:	f012 fbff 	bl	25f5c <z_log_minimal_printk>
}
   1375e:	e775      	b.n	1364c <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13760:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13764:	f023 0301 	bic.w	r3, r3, #1
   13768:	e7ae      	b.n	136c8 <z_arm_fault+0x108>
   1376a:	bf00      	nop
   1376c:	e000ed00 	.word	0xe000ed00
   13770:	0002af9d 	.word	0x0002af9d
   13774:	0002ad9f 	.word	0x0002ad9f
   13778:	0002a7df 	.word	0x0002a7df
   1377c:	0002afcd 	.word	0x0002afcd
   13780:	0002afe9 	.word	0x0002afe9
   13784:	0002b00f 	.word	0x0002b00f
   13788:	0002b022 	.word	0x0002b022
   1378c:	0002b046 	.word	0x0002b046
   13790:	0002b067 	.word	0x0002b067
   13794:	0002af6f 	.word	0x0002af6f
   13798:	0002af84 	.word	0x0002af84
   1379c:	0002b090 	.word	0x0002b090

000137a0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   137a0:	4a02      	ldr	r2, [pc, #8]	; (137ac <z_arm_fault_init+0xc>)
   137a2:	6953      	ldr	r3, [r2, #20]
   137a4:	f043 0310 	orr.w	r3, r3, #16
   137a8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   137aa:	4770      	bx	lr
   137ac:	e000ed00 	.word	0xe000ed00

000137b0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   137b0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   137b4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   137b8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   137ba:	4672      	mov	r2, lr
	bl z_arm_fault
   137bc:	f7ff ff00 	bl	135c0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   137c0:	bd01      	pop	{r0, pc}
   137c2:	bf00      	nop

000137c4 <z_arm_interrupt_init>:
   137c4:	4804      	ldr	r0, [pc, #16]	; (137d8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   137c6:	2300      	movs	r3, #0
   137c8:	2140      	movs	r1, #64	; 0x40
   137ca:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   137cc:	3301      	adds	r3, #1
   137ce:	2b30      	cmp	r3, #48	; 0x30
   137d0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   137d4:	d1f9      	bne.n	137ca <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   137d6:	4770      	bx	lr
   137d8:	e000e100 	.word	0xe000e100

000137dc <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   137dc:	2000      	movs	r0, #0
    msr CONTROL, r0
   137de:	f380 8814 	msr	CONTROL, r0
    isb
   137e2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   137e6:	f7fe fafd 	bl	11de4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   137ea:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   137ec:	490d      	ldr	r1, [pc, #52]	; (13824 <__start+0x48>)
    str r0, [r1]
   137ee:	6008      	str	r0, [r1, #0]
    dsb
   137f0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   137f4:	480c      	ldr	r0, [pc, #48]	; (13828 <__start+0x4c>)
    msr msp, r0
   137f6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   137fa:	f000 f82b 	bl	13854 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   137fe:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13800:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13804:	4809      	ldr	r0, [pc, #36]	; (1382c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13806:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   1380a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1380c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13810:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13814:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13816:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13818:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1381c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13820:	f7ff fcba 	bl	13198 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   13824:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13828:	200071c0 	.word	0x200071c0
    ldr r0, =z_interrupt_stacks
   1382c:	20006000 	.word	0x20006000

00013830 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13830:	4907      	ldr	r1, [pc, #28]	; (13850 <z_arm_clear_arm_mpu_config+0x20>)
   13832:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   13836:	2300      	movs	r3, #0
	int num_regions =
   13838:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   1383c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   1383e:	4293      	cmp	r3, r2
   13840:	db00      	blt.n	13844 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   13842:	4770      	bx	lr
  MPU->RNR = rnr;
   13844:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   13848:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   1384c:	3301      	adds	r3, #1
   1384e:	e7f6      	b.n	1383e <z_arm_clear_arm_mpu_config+0xe>
   13850:	e000ed00 	.word	0xe000ed00

00013854 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13854:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13856:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13858:	2300      	movs	r3, #0
   1385a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1385e:	f7ff ffe7 	bl	13830 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   13862:	4b14      	ldr	r3, [pc, #80]	; (138b4 <z_arm_init_arch_hw_at_boot+0x60>)
   13864:	f04f 32ff 	mov.w	r2, #4294967295
   13868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   1386c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   13870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   13874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   13878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   1387c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   13880:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   13884:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13888:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1388c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   13890:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   13894:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   13898:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   1389c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   138a0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   138a4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   138a8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   138aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   138ae:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   138b2:	bd08      	pop	{r3, pc}
   138b4:	e000e100 	.word	0xe000e100

000138b8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   138b8:	4b08      	ldr	r3, [pc, #32]	; (138dc <z_impl_k_thread_abort+0x24>)
   138ba:	689b      	ldr	r3, [r3, #8]
   138bc:	4283      	cmp	r3, r0
   138be:	d10b      	bne.n	138d8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   138c0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   138c4:	b143      	cbz	r3, 138d8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   138c6:	4b06      	ldr	r3, [pc, #24]	; (138e0 <z_impl_k_thread_abort+0x28>)
   138c8:	685a      	ldr	r2, [r3, #4]
   138ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   138ce:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   138d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   138d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   138d6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   138d8:	f00e ba1c 	b.w	21d14 <z_thread_abort>
   138dc:	20002a64 	.word	0x20002a64
   138e0:	e000ed00 	.word	0xe000ed00

000138e4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   138e4:	4b02      	ldr	r3, [pc, #8]	; (138f0 <z_arm_configure_static_mpu_regions+0xc>)
   138e6:	4a03      	ldr	r2, [pc, #12]	; (138f4 <z_arm_configure_static_mpu_regions+0x10>)
   138e8:	4803      	ldr	r0, [pc, #12]	; (138f8 <z_arm_configure_static_mpu_regions+0x14>)
   138ea:	2101      	movs	r1, #1
   138ec:	f000 b87c 	b.w	139e8 <arm_core_mpu_configure_static_mpu_regions>
   138f0:	20040000 	.word	0x20040000
   138f4:	20000000 	.word	0x20000000
   138f8:	00029cf8 	.word	0x00029cf8

000138fc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   138fc:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   138fe:	4b05      	ldr	r3, [pc, #20]	; (13914 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   13900:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   13902:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13904:	4a04      	ldr	r2, [pc, #16]	; (13918 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   13906:	2140      	movs	r1, #64	; 0x40
   13908:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   1390c:	4618      	mov	r0, r3
   1390e:	2101      	movs	r1, #1
   13910:	f000 b886 	b.w	13a20 <arm_core_mpu_configure_dynamic_mpu_regions>
   13914:	200025b8 	.word	0x200025b8
   13918:	150b0000 	.word	0x150b0000

0001391c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   1391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1391e:	4e24      	ldr	r6, [pc, #144]	; (139b0 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13920:	2500      	movs	r5, #0
   13922:	428d      	cmp	r5, r1
   13924:	da0f      	bge.n	13946 <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
   13926:	6844      	ldr	r4, [r0, #4]
   13928:	2c00      	cmp	r4, #0
   1392a:	d03e      	beq.n	139aa <mpu_configure_regions+0x8e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   1392c:	b19b      	cbz	r3, 13956 <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   1392e:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   13932:	ea14 0f0c 	tst.w	r4, ip
   13936:	d008      	beq.n	1394a <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   13938:	481e      	ldr	r0, [pc, #120]	; (139b4 <mpu_configure_regions+0x98>)
   1393a:	462a      	mov	r2, r5
   1393c:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1393e:	f012 fb0d 	bl	25f5c <z_log_minimal_printk>
			return -EINVAL;
   13942:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   13946:	4610      	mov	r0, r2
   13948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   1394a:	2c1f      	cmp	r4, #31
   1394c:	d9f4      	bls.n	13938 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
   1394e:	6807      	ldr	r7, [r0, #0]
		&&
   13950:	ea1c 0f07 	tst.w	ip, r7
   13954:	d1f0      	bne.n	13938 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   13956:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   13958:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1395a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1395e:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   13962:	d910      	bls.n	13986 <mpu_configure_regions+0x6a>
	if (size > (1UL << 31)) {
   13964:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   13968:	d80f      	bhi.n	1398a <mpu_configure_regions+0x6e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   1396a:	3c01      	subs	r4, #1
   1396c:	fab4 f484 	clz	r4, r4
   13970:	f1c4 041f 	rsb	r4, r4, #31
   13974:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   13976:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1397a:	ea4c 0c04 	orr.w	ip, ip, r4
   1397e:	d906      	bls.n	1398e <mpu_configure_regions+0x72>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13980:	480d      	ldr	r0, [pc, #52]	; (139b8 <mpu_configure_regions+0x9c>)
   13982:	2145      	movs	r1, #69	; 0x45
   13984:	e7db      	b.n	1393e <mpu_configure_regions+0x22>
		return REGION_32B;
   13986:	2408      	movs	r4, #8
   13988:	e7f5      	b.n	13976 <mpu_configure_regions+0x5a>
		return REGION_4G;
   1398a:	243e      	movs	r4, #62	; 0x3e
   1398c:	e7f3      	b.n	13976 <mpu_configure_regions+0x5a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1398e:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   13992:	4314      	orrs	r4, r2
   13994:	f044 0410 	orr.w	r4, r4, #16
   13998:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1399c:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   139a0:	f04c 0401 	orr.w	r4, ip, #1
   139a4:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   139a8:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   139aa:	3501      	adds	r5, #1
   139ac:	300c      	adds	r0, #12
   139ae:	e7b8      	b.n	13922 <mpu_configure_regions+0x6>
   139b0:	e000ed00 	.word	0xe000ed00
   139b4:	0002b0ac 	.word	0x0002b0ac
   139b8:	0002b0d4 	.word	0x0002b0d4

000139bc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   139bc:	4b04      	ldr	r3, [pc, #16]	; (139d0 <arm_core_mpu_enable+0x14>)
   139be:	2205      	movs	r2, #5
   139c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   139c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   139c8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   139cc:	4770      	bx	lr
   139ce:	bf00      	nop
   139d0:	e000ed00 	.word	0xe000ed00

000139d4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   139d4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   139d8:	4b02      	ldr	r3, [pc, #8]	; (139e4 <arm_core_mpu_disable+0x10>)
   139da:	2200      	movs	r2, #0
   139dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   139e0:	4770      	bx	lr
   139e2:	bf00      	nop
   139e4:	e000ed00 	.word	0xe000ed00

000139e8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   139e8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   139ea:	4c0a      	ldr	r4, [pc, #40]	; (13a14 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   139ec:	2301      	movs	r3, #1
   139ee:	7822      	ldrb	r2, [r4, #0]
   139f0:	f7ff ff94 	bl	1391c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   139f4:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   139f6:	3016      	adds	r0, #22
   139f8:	d10a      	bne.n	13a10 <arm_core_mpu_configure_static_mpu_regions+0x28>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   139fa:	4907      	ldr	r1, [pc, #28]	; (13a18 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   139fc:	4807      	ldr	r0, [pc, #28]	; (13a1c <arm_core_mpu_configure_static_mpu_regions+0x34>)
   139fe:	f44f 728b 	mov.w	r2, #278	; 0x116
   13a02:	f012 fa9d 	bl	25f40 <assert_print>
   13a06:	4804      	ldr	r0, [pc, #16]	; (13a18 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   13a08:	f44f 718b 	mov.w	r1, #278	; 0x116
   13a0c:	f012 fa91 	bl	25f32 <assert_post_action>
			regions_num);
	}
}
   13a10:	bd10      	pop	{r4, pc}
   13a12:	bf00      	nop
   13a14:	200035a4 	.word	0x200035a4
   13a18:	0002b0ff 	.word	0x0002b0ff
   13a1c:	0002a7df 	.word	0x0002a7df

00013a20 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   13a20:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13a22:	4a0f      	ldr	r2, [pc, #60]	; (13a60 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
   13a24:	2300      	movs	r3, #0
   13a26:	7812      	ldrb	r2, [r2, #0]
   13a28:	f7ff ff78 	bl	1391c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13a2c:	f110 0f16 	cmn.w	r0, #22
   13a30:	d004      	beq.n	13a3c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
  MPU->RNR = rnr;
   13a32:	4b0c      	ldr	r3, [pc, #48]	; (13a64 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
   13a34:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13a36:	2807      	cmp	r0, #7
   13a38:	dd0b      	ble.n	13a52 <arm_core_mpu_configure_dynamic_mpu_regions+0x32>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   13a3a:	bd08      	pop	{r3, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   13a3c:	490a      	ldr	r1, [pc, #40]	; (13a68 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   13a3e:	480b      	ldr	r0, [pc, #44]	; (13a6c <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   13a40:	f240 1235 	movw	r2, #309	; 0x135
   13a44:	f012 fa7c 	bl	25f40 <assert_print>
   13a48:	4807      	ldr	r0, [pc, #28]	; (13a68 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   13a4a:	f240 1135 	movw	r1, #309	; 0x135
   13a4e:	f012 fa70 	bl	25f32 <assert_post_action>
  MPU->RNR = rnr;
   13a52:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   13a56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   13a5a:	3001      	adds	r0, #1
   13a5c:	e7eb      	b.n	13a36 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   13a5e:	bf00      	nop
   13a60:	200035a4 	.word	0x200035a4
   13a64:	e000ed00 	.word	0xe000ed00
   13a68:	0002b0ff 	.word	0x0002b0ff
   13a6c:	0002a7df 	.word	0x0002a7df

00013a70 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13a70:	4920      	ldr	r1, [pc, #128]	; (13af4 <z_arm_mpu_init+0x84>)
{
   13a72:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   13a74:	680c      	ldr	r4, [r1, #0]
   13a76:	2c08      	cmp	r4, #8
   13a78:	d90a      	bls.n	13a90 <z_arm_mpu_init+0x20>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   13a7a:	491f      	ldr	r1, [pc, #124]	; (13af8 <z_arm_mpu_init+0x88>)
   13a7c:	481f      	ldr	r0, [pc, #124]	; (13afc <z_arm_mpu_init+0x8c>)
   13a7e:	f240 124d 	movw	r2, #333	; 0x14d
   13a82:	f012 fa5d 	bl	25f40 <assert_print>
   13a86:	f240 114d 	movw	r1, #333	; 0x14d

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   13a8a:	481b      	ldr	r0, [pc, #108]	; (13af8 <z_arm_mpu_init+0x88>)
   13a8c:	f012 fa51 	bl	25f32 <assert_post_action>
	arm_core_mpu_disable();
   13a90:	f7ff ffa0 	bl	139d4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13a94:	6848      	ldr	r0, [r1, #4]
   13a96:	491a      	ldr	r1, [pc, #104]	; (13b00 <z_arm_mpu_init+0x90>)
   13a98:	2200      	movs	r2, #0
   13a9a:	4294      	cmp	r4, r2
   13a9c:	f100 000c 	add.w	r0, r0, #12
   13aa0:	d112      	bne.n	13ac8 <z_arm_mpu_init+0x58>
	static_regions_num = mpu_config.num_regions;
   13aa2:	4b18      	ldr	r3, [pc, #96]	; (13b04 <z_arm_mpu_init+0x94>)
   13aa4:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   13aa6:	f7ff ff89 	bl	139bc <arm_core_mpu_enable>
	__ASSERT(
   13aaa:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   13aae:	f3c3 2307 	ubfx	r3, r3, #8, #8
   13ab2:	2b08      	cmp	r3, #8
   13ab4:	d01b      	beq.n	13aee <z_arm_mpu_init+0x7e>
   13ab6:	4910      	ldr	r1, [pc, #64]	; (13af8 <z_arm_mpu_init+0x88>)
   13ab8:	4810      	ldr	r0, [pc, #64]	; (13afc <z_arm_mpu_init+0x8c>)
   13aba:	f240 12ad 	movw	r2, #429	; 0x1ad
   13abe:	f012 fa3f 	bl	25f40 <assert_print>
   13ac2:	f240 11ad 	movw	r1, #429	; 0x1ad
   13ac6:	e7e0      	b.n	13a8a <z_arm_mpu_init+0x1a>
   13ac8:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13acc:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   13ad0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13ad4:	4313      	orrs	r3, r2
   13ad6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13ada:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13ade:	f850 3c04 	ldr.w	r3, [r0, #-4]
   13ae2:	f043 0301 	orr.w	r3, r3, #1
   13ae6:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13aea:	3201      	adds	r2, #1
   13aec:	e7d5      	b.n	13a9a <z_arm_mpu_init+0x2a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   13aee:	2000      	movs	r0, #0
   13af0:	bd10      	pop	{r4, pc}
   13af2:	bf00      	nop
   13af4:	00029d04 	.word	0x00029d04
   13af8:	0002b0ff 	.word	0x0002b0ff
   13afc:	0002a7df 	.word	0x0002a7df
   13b00:	e000ed00 	.word	0xe000ed00
   13b04:	200035a4 	.word	0x200035a4

00013b08 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   13b08:	4b01      	ldr	r3, [pc, #4]	; (13b10 <__stdout_hook_install+0x8>)
   13b0a:	6018      	str	r0, [r3, #0]
}
   13b0c:	4770      	bx	lr
   13b0e:	bf00      	nop
   13b10:	20000580 	.word	0x20000580

00013b14 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   13b14:	f04f 0340 	mov.w	r3, #64	; 0x40
   13b18:	f3ef 8211 	mrs	r2, BASEPRI
   13b1c:	f383 8812 	msr	BASEPRI_MAX, r3
   13b20:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13b24:	4906      	ldr	r1, [pc, #24]	; (13b40 <nordicsemi_nrf52_init+0x2c>)
   13b26:	2301      	movs	r3, #1
   13b28:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   13b2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   13b30:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   13b34:	f382 8811 	msr	BASEPRI, r2
   13b38:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13b3c:	2000      	movs	r0, #0
   13b3e:	4770      	bx	lr
   13b40:	4001e000 	.word	0x4001e000

00013b44 <sys_arch_reboot>:
    *p_gpregret = val;
   13b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13b48:	b2c0      	uxtb	r0, r0
   13b4a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13b4e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13b52:	4905      	ldr	r1, [pc, #20]	; (13b68 <sys_arch_reboot+0x24>)
   13b54:	4b05      	ldr	r3, [pc, #20]	; (13b6c <sys_arch_reboot+0x28>)
   13b56:	68ca      	ldr	r2, [r1, #12]
   13b58:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13b5c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13b5e:	60cb      	str	r3, [r1, #12]
   13b60:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13b64:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13b66:	e7fd      	b.n	13b64 <sys_arch_reboot+0x20>
   13b68:	e000ed00 	.word	0xe000ed00
   13b6c:	05fa0004 	.word	0x05fa0004

00013b70 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13b70:	b120      	cbz	r0, 13b7c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13b72:	4b03      	ldr	r3, [pc, #12]	; (13b80 <arch_busy_wait+0x10>)
   13b74:	0180      	lsls	r0, r0, #6
   13b76:	f043 0301 	orr.w	r3, r3, #1
   13b7a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13b7c:	4770      	bx	lr
   13b7e:	bf00      	nop
   13b80:	00029be0 	.word	0x00029be0

00013b84 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   13b84:	4b0e      	ldr	r3, [pc, #56]	; (13bc0 <bt_hex+0x3c>)
   13b86:	2940      	cmp	r1, #64	; 0x40
{
   13b88:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   13b8a:	bf28      	it	cs
   13b8c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   13b8e:	4c0d      	ldr	r4, [pc, #52]	; (13bc4 <bt_hex+0x40>)
   13b90:	1846      	adds	r6, r0, r1
   13b92:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   13b94:	42b0      	cmp	r0, r6
   13b96:	f103 0302 	add.w	r3, r3, #2
   13b9a:	d104      	bne.n	13ba6 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   13b9c:	2300      	movs	r3, #0
   13b9e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   13ba2:	4807      	ldr	r0, [pc, #28]	; (13bc0 <bt_hex+0x3c>)
   13ba4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   13ba6:	7802      	ldrb	r2, [r0, #0]
   13ba8:	0912      	lsrs	r2, r2, #4
   13baa:	5ca2      	ldrb	r2, [r4, r2]
   13bac:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   13bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
   13bb4:	f002 020f 	and.w	r2, r2, #15
   13bb8:	5ca2      	ldrb	r2, [r4, r2]
   13bba:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   13bbe:	e7e9      	b.n	13b94 <bt_hex+0x10>
   13bc0:	200035c3 	.word	0x200035c3
   13bc4:	0002b163 	.word	0x0002b163

00013bc8 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   13bc8:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   13bca:	7803      	ldrb	r3, [r0, #0]
   13bcc:	b08b      	sub	sp, #44	; 0x2c
   13bce:	4604      	mov	r4, r0
   13bd0:	ad07      	add	r5, sp, #28
   13bd2:	2b03      	cmp	r3, #3
   13bd4:	d821      	bhi.n	13c1a <bt_addr_le_str+0x52>
   13bd6:	e8df f003 	tbb	[pc, r3]
   13bda:	1a02      	.short	0x1a02
   13bdc:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   13bde:	4912      	ldr	r1, [pc, #72]	; (13c28 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   13be0:	4628      	mov	r0, r5
   13be2:	f012 ffea 	bl	26bba <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   13be6:	9505      	str	r5, [sp, #20]
   13be8:	7863      	ldrb	r3, [r4, #1]
   13bea:	9304      	str	r3, [sp, #16]
   13bec:	78a3      	ldrb	r3, [r4, #2]
   13bee:	9303      	str	r3, [sp, #12]
   13bf0:	78e3      	ldrb	r3, [r4, #3]
   13bf2:	9302      	str	r3, [sp, #8]
   13bf4:	7923      	ldrb	r3, [r4, #4]
   13bf6:	9301      	str	r3, [sp, #4]
   13bf8:	7963      	ldrb	r3, [r4, #5]
   13bfa:	9300      	str	r3, [sp, #0]
   13bfc:	79a3      	ldrb	r3, [r4, #6]
   13bfe:	4a0b      	ldr	r2, [pc, #44]	; (13c2c <bt_addr_le_str+0x64>)
   13c00:	480b      	ldr	r0, [pc, #44]	; (13c30 <bt_addr_le_str+0x68>)
   13c02:	211e      	movs	r1, #30
   13c04:	f011 ffa1 	bl	25b4a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   13c08:	4809      	ldr	r0, [pc, #36]	; (13c30 <bt_addr_le_str+0x68>)
   13c0a:	b00b      	add	sp, #44	; 0x2c
   13c0c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   13c0e:	4909      	ldr	r1, [pc, #36]	; (13c34 <bt_addr_le_str+0x6c>)
   13c10:	e7e6      	b.n	13be0 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   13c12:	4909      	ldr	r1, [pc, #36]	; (13c38 <bt_addr_le_str+0x70>)
   13c14:	e7e4      	b.n	13be0 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   13c16:	4909      	ldr	r1, [pc, #36]	; (13c3c <bt_addr_le_str+0x74>)
   13c18:	e7e2      	b.n	13be0 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   13c1a:	4a09      	ldr	r2, [pc, #36]	; (13c40 <bt_addr_le_str+0x78>)
   13c1c:	210a      	movs	r1, #10
   13c1e:	4628      	mov	r0, r5
   13c20:	f011 ff93 	bl	25b4a <snprintk>
		break;
   13c24:	e7df      	b.n	13be6 <bt_addr_le_str+0x1e>
   13c26:	bf00      	nop
   13c28:	0002a511 	.word	0x0002a511
   13c2c:	0002a53a 	.word	0x0002a53a
   13c30:	200035a5 	.word	0x200035a5
   13c34:	0002a518 	.word	0x0002a518
   13c38:	0002a51f 	.word	0x0002a51f
   13c3c:	0002a529 	.word	0x0002a529
   13c40:	0002a533 	.word	0x0002a533

00013c44 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   13c44:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
   13c46:	480a      	ldr	r0, [pc, #40]	; (13c70 <save_id+0x2c>)
   13c48:	2149      	movs	r1, #73	; 0x49
   13c4a:	f012 f987 	bl	25f5c <z_log_minimal_printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   13c4e:	4909      	ldr	r1, [pc, #36]	; (13c74 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   13c50:	4809      	ldr	r0, [pc, #36]	; (13c78 <save_id+0x34>)
   13c52:	79ca      	ldrb	r2, [r1, #7]
   13c54:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   13c58:	f7fe fc84 	bl	12564 <settings_save_one>
	if (err) {
   13c5c:	4602      	mov	r2, r0
   13c5e:	b128      	cbz	r0, 13c6c <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   13c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   13c64:	4805      	ldr	r0, [pc, #20]	; (13c7c <save_id+0x38>)
   13c66:	2145      	movs	r1, #69	; 0x45
   13c68:	f012 b978 	b.w	25f5c <z_log_minimal_printk>
}
   13c6c:	bd08      	pop	{r3, pc}
   13c6e:	bf00      	nop
   13c70:	0002b17b 	.word	0x0002b17b
   13c74:	20000380 	.word	0x20000380
   13c78:	0002b18a 	.word	0x0002b18a
   13c7c:	0002b190 	.word	0x0002b190

00013c80 <set>:
{
   13c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13c82:	4c22      	ldr	r4, [pc, #136]	; (13d0c <set+0x8c>)
   13c84:	f3bf 8f5b 	dmb	ish
   13c88:	461f      	mov	r7, r3
   13c8a:	6823      	ldr	r3, [r4, #0]
   13c8c:	f3bf 8f5b 	dmb	ish
   13c90:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13c92:	07da      	lsls	r2, r3, #31
{
   13c94:	4605      	mov	r5, r0
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13c96:	d51e      	bpl.n	13cd6 <set+0x56>
	if (!name) {
   13c98:	b930      	cbnz	r0, 13ca8 <set+0x28>
		BT_ERR("Insufficient number of arguments");
   13c9a:	481d      	ldr	r0, [pc, #116]	; (13d10 <set+0x90>)
   13c9c:	2145      	movs	r1, #69	; 0x45
   13c9e:	f012 f95d 	bl	25f5c <z_log_minimal_printk>
		return -ENOENT;
   13ca2:	f06f 0001 	mvn.w	r0, #1
   13ca6:	e017      	b.n	13cd8 <set+0x58>
	len = settings_name_next(name, &next);
   13ca8:	a901      	add	r1, sp, #4
   13caa:	f012 fc03 	bl	264b4 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   13cae:	4919      	ldr	r1, [pc, #100]	; (13d14 <set+0x94>)
	len = settings_name_next(name, &next);
   13cb0:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   13cb2:	4628      	mov	r0, r5
   13cb4:	f012 ffa7 	bl	26c06 <strncmp>
   13cb8:	2800      	cmp	r0, #0
   13cba:	d1f2      	bne.n	13ca2 <set+0x22>
   13cbc:	f3bf 8f5b 	dmb	ish
   13cc0:	6823      	ldr	r3, [r4, #0]
   13cc2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   13cc6:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   13cca:	071b      	lsls	r3, r3, #28
   13ccc:	d506      	bpl.n	13cdc <set+0x5c>
			BT_WARN("Ignoring identities stored in flash");
   13cce:	4812      	ldr	r0, [pc, #72]	; (13d18 <set+0x98>)
   13cd0:	2157      	movs	r1, #87	; 0x57
   13cd2:	f012 f943 	bl	25f5c <z_log_minimal_printk>
		return 0;
   13cd6:	2000      	movs	r0, #0
}
   13cd8:	b003      	add	sp, #12
   13cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   13cdc:	3ccc      	subs	r4, #204	; 0xcc
   13cde:	2207      	movs	r2, #7
   13ce0:	4621      	mov	r1, r4
   13ce2:	4638      	mov	r0, r7
   13ce4:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   13ce6:	2806      	cmp	r0, #6
   13ce8:	d80a      	bhi.n	13d00 <set+0x80>
				BT_ERR("Invalid length ID address in storage");
   13cea:	480c      	ldr	r0, [pc, #48]	; (13d1c <set+0x9c>)
   13cec:	2145      	movs	r1, #69	; 0x45
   13cee:	f012 f935 	bl	25f5c <z_log_minimal_printk>
			(void)memset(bt_dev.id_addr, 0,
   13cf2:	2207      	movs	r2, #7
   13cf4:	4629      	mov	r1, r5
   13cf6:	4620      	mov	r0, r4
   13cf8:	f012 ffcb 	bl	26c92 <memset>
			bt_dev.id_count = 0U;
   13cfc:	71e5      	strb	r5, [r4, #7]
   13cfe:	e7ea      	b.n	13cd6 <set+0x56>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   13d00:	2307      	movs	r3, #7
   13d02:	fbb0 f0f3 	udiv	r0, r0, r3
   13d06:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   13d08:	e7e5      	b.n	13cd6 <set+0x56>
   13d0a:	bf00      	nop
   13d0c:	2000044c 	.word	0x2000044c
   13d10:	0002b1b0 	.word	0x0002b1b0
   13d14:	0002a526 	.word	0x0002a526
   13d18:	0002b1d6 	.word	0x0002b1d6
   13d1c:	0002b1ff 	.word	0x0002b1ff

00013d20 <bt_settings_encode_key>:
{
   13d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d24:	b088      	sub	sp, #32
		snprintk(path, path_size,
   13d26:	799c      	ldrb	r4, [r3, #6]
{
   13d28:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   13d2c:	795d      	ldrb	r5, [r3, #5]
   13d2e:	791e      	ldrb	r6, [r3, #4]
   13d30:	78df      	ldrb	r7, [r3, #3]
   13d32:	f893 c002 	ldrb.w	ip, [r3, #2]
   13d36:	f893 e001 	ldrb.w	lr, [r3, #1]
   13d3a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   13d3c:	f1b8 0f00 	cmp.w	r8, #0
   13d40:	d00e      	beq.n	13d60 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   13d42:	e9cd 3806 	strd	r3, r8, [sp, #24]
   13d46:	e9cd ce04 	strd	ip, lr, [sp, #16]
   13d4a:	4613      	mov	r3, r2
   13d4c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   13d50:	e9cd 4500 	strd	r4, r5, [sp]
   13d54:	4a08      	ldr	r2, [pc, #32]	; (13d78 <bt_settings_encode_key+0x58>)
   13d56:	f011 fef8 	bl	25b4a <snprintk>
}
   13d5a:	b008      	add	sp, #32
   13d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   13d60:	e9cd e305 	strd	lr, r3, [sp, #20]
   13d64:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   13d68:	4613      	mov	r3, r2
   13d6a:	e9cd 5601 	strd	r5, r6, [sp, #4]
   13d6e:	4a03      	ldr	r2, [pc, #12]	; (13d7c <bt_settings_encode_key+0x5c>)
   13d70:	9400      	str	r4, [sp, #0]
   13d72:	f011 feea 	bl	25b4a <snprintk>
}
   13d76:	e7f0      	b.n	13d5a <bt_settings_encode_key+0x3a>
   13d78:	0002b229 	.word	0x0002b229
   13d7c:	0002b24d 	.word	0x0002b24d

00013d80 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   13d80:	4801      	ldr	r0, [pc, #4]	; (13d88 <bt_settings_save_id+0x8>)
   13d82:	f00c befd 	b.w	20b80 <k_work_submit>
   13d86:	bf00      	nop
   13d88:	20000584 	.word	0x20000584

00013d8c <commit>:
}

static int commit(void)
{
   13d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d8e:	4d1d      	ldr	r5, [pc, #116]	; (13e04 <commit+0x78>)
   13d90:	f3bf 8f5b 	dmb	ish
   13d94:	682b      	ldr	r3, [r5, #0]
   13d96:	f3bf 8f5b 	dmb	ish
	int err;

	BT_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13d9a:	f013 0f01 	tst.w	r3, #1
   13d9e:	462e      	mov	r6, r5
   13da0:	d02e      	beq.n	13e00 <commit+0x74>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   13da2:	f815 3cc5 	ldrb.w	r3, [r5, #-197]
   13da6:	f1a5 07cc 	sub.w	r7, r5, #204	; 0xcc
   13daa:	b983      	cbnz	r3, 13dce <commit+0x42>
		err = bt_setup_public_id_addr();
   13dac:	f001 fcce 	bl	1574c <bt_setup_public_id_addr>
		if (err) {
   13db0:	4604      	mov	r4, r0
   13db2:	b128      	cbz	r0, 13dc0 <commit+0x34>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
   13db4:	4814      	ldr	r0, [pc, #80]	; (13e08 <commit+0x7c>)
   13db6:	2145      	movs	r1, #69	; 0x45
   13db8:	f012 f8d0 	bl	25f5c <z_log_minimal_printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   13dbc:	4620      	mov	r0, r4
   13dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_dev.id_count) {
   13dc0:	79fb      	ldrb	r3, [r7, #7]
   13dc2:	b923      	cbnz	r3, 13dce <commit+0x42>
		err = bt_setup_random_id_addr();
   13dc4:	f001 fd16 	bl	157f4 <bt_setup_random_id_addr>
		if (err) {
   13dc8:	4604      	mov	r4, r0
   13dca:	2800      	cmp	r0, #0
   13dcc:	d1f2      	bne.n	13db4 <commit+0x28>
   13dce:	f3bf 8f5b 	dmb	ish
   13dd2:	682b      	ldr	r3, [r5, #0]
   13dd4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13dd8:	075a      	lsls	r2, r3, #29
   13dda:	d401      	bmi.n	13de0 <commit+0x54>
		bt_finalize_init();
   13ddc:	f001 f932 	bl	15044 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13de0:	f3bf 8f5b 	dmb	ish
   13de4:	e856 3f00 	ldrex	r3, [r6]
   13de8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   13dec:	e846 2100 	strex	r1, r2, [r6]
   13df0:	2900      	cmp	r1, #0
   13df2:	d1f7      	bne.n	13de4 <commit+0x58>
   13df4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   13df8:	03db      	lsls	r3, r3, #15
   13dfa:	d501      	bpl.n	13e00 <commit+0x74>
		bt_settings_save_id();
   13dfc:	f7ff ffc0 	bl	13d80 <bt_settings_save_id>
		return 0;
   13e00:	2400      	movs	r4, #0
   13e02:	e7db      	b.n	13dbc <commit+0x30>
   13e04:	2000044c 	.word	0x2000044c
   13e08:	0002b26e 	.word	0x0002b26e

00013e0c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   13e0c:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   13e0e:	f7fe fd19 	bl	12844 <settings_subsys_init>
	if (err) {
   13e12:	4604      	mov	r4, r0
   13e14:	b120      	cbz	r0, 13e20 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
   13e16:	4602      	mov	r2, r0
   13e18:	2145      	movs	r1, #69	; 0x45
   13e1a:	4802      	ldr	r0, [pc, #8]	; (13e24 <bt_settings_init+0x18>)
   13e1c:	f012 f89e 	bl	25f5c <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   13e20:	4620      	mov	r0, r4
   13e22:	bd10      	pop	{r4, pc}
   13e24:	0002b297 	.word	0x0002b297

00013e28 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   13e28:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   13e2a:	4d0a      	ldr	r5, [pc, #40]	; (13e54 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13e2c:	4b0a      	ldr	r3, [pc, #40]	; (13e58 <long_wq_init+0x30>)
{
   13e2e:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13e30:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   13e32:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13e34:	9302      	str	r3, [sp, #8]
   13e36:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   13e38:	f00c fea8 	bl	20b8c <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   13e3c:	ab02      	add	r3, sp, #8
   13e3e:	9300      	str	r3, [sp, #0]
   13e40:	4628      	mov	r0, r5
   13e42:	4906      	ldr	r1, [pc, #24]	; (13e5c <long_wq_init+0x34>)
   13e44:	230a      	movs	r3, #10
   13e46:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   13e4a:	f00c feb5 	bl	20bb8 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   13e4e:	4620      	mov	r0, r4
   13e50:	b005      	add	sp, #20
   13e52:	bd30      	pop	{r4, r5, pc}
   13e54:	200017b0 	.word	0x200017b0
   13e58:	0002b2d0 	.word	0x0002b2d0
   13e5c:	20004300 	.word	0x20004300

00013e60 <bt_long_wq_schedule>:
{
   13e60:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   13e62:	4801      	ldr	r0, [pc, #4]	; (13e68 <bt_long_wq_schedule+0x8>)
   13e64:	f00c bf2e 	b.w	20cc4 <k_work_schedule_for_queue>
   13e68:	200017b0 	.word	0x200017b0

00013e6c <bt_long_wq_reschedule>:
{
   13e6c:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   13e6e:	4801      	ldr	r0, [pc, #4]	; (13e74 <bt_long_wq_reschedule+0x8>)
   13e70:	f00c bf8e 	b.w	20d90 <k_work_reschedule_for_queue>
   13e74:	200017b0 	.word	0x200017b0

00013e78 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   13e78:	b430      	push	{r4, r5}
   13e7a:	4603      	mov	r3, r0
   13e7c:	4608      	mov	r0, r1
	switch (src->type) {
   13e7e:	781a      	ldrb	r2, [r3, #0]
   13e80:	2a01      	cmp	r2, #1
   13e82:	d013      	beq.n	13eac <uuid_to_uuid128+0x34>
   13e84:	2a02      	cmp	r2, #2
   13e86:	d026      	beq.n	13ed6 <uuid_to_uuid128+0x5e>
   13e88:	b972      	cbnz	r2, 13ea8 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   13e8a:	4a15      	ldr	r2, [pc, #84]	; (13ee0 <uuid_to_uuid128+0x68>)
   13e8c:	f102 0410 	add.w	r4, r2, #16
   13e90:	f852 5b04 	ldr.w	r5, [r2], #4
   13e94:	f841 5b04 	str.w	r5, [r1], #4
   13e98:	42a2      	cmp	r2, r4
   13e9a:	d1f9      	bne.n	13e90 <uuid_to_uuid128+0x18>
   13e9c:	7812      	ldrb	r2, [r2, #0]
   13e9e:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   13ea0:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   13ea2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   13ea4:	0a1b      	lsrs	r3, r3, #8
   13ea6:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   13ea8:	bc30      	pop	{r4, r5}
   13eaa:	4770      	bx	lr
		*dst = uuid128_base;
   13eac:	4a0c      	ldr	r2, [pc, #48]	; (13ee0 <uuid_to_uuid128+0x68>)
   13eae:	f102 0410 	add.w	r4, r2, #16
   13eb2:	f852 5b04 	ldr.w	r5, [r2], #4
   13eb6:	f841 5b04 	str.w	r5, [r1], #4
   13eba:	42a2      	cmp	r2, r4
   13ebc:	d1f9      	bne.n	13eb2 <uuid_to_uuid128+0x3a>
   13ebe:	7812      	ldrb	r2, [r2, #0]
   13ec0:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   13ec2:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   13ec4:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   13ec6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   13eca:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   13ecc:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   13ece:	0a1b      	lsrs	r3, r3, #8
   13ed0:	7382      	strb	r2, [r0, #14]
   13ed2:	7403      	strb	r3, [r0, #16]
}
   13ed4:	e7e8      	b.n	13ea8 <uuid_to_uuid128+0x30>
}
   13ed6:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   13ed8:	2211      	movs	r2, #17
   13eda:	4619      	mov	r1, r3
   13edc:	f012 bece 	b.w	26c7c <memcpy>
   13ee0:	0002b2d9 	.word	0x0002b2d9

00013ee4 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   13ee4:	2805      	cmp	r0, #5
{
   13ee6:	b538      	push	{r3, r4, r5, lr}
   13ee8:	4605      	mov	r5, r0
   13eea:	d803      	bhi.n	13ef4 <bt_buf_get_rx+0x10>
   13eec:	212a      	movs	r1, #42	; 0x2a
   13eee:	40c1      	lsrs	r1, r0
   13ef0:	07c9      	lsls	r1, r1, #31
   13ef2:	d408      	bmi.n	13f06 <bt_buf_get_rx+0x22>
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   13ef4:	490a      	ldr	r1, [pc, #40]	; (13f20 <bt_buf_get_rx+0x3c>)
   13ef6:	480b      	ldr	r0, [pc, #44]	; (13f24 <bt_buf_get_rx+0x40>)
   13ef8:	223f      	movs	r2, #63	; 0x3f
   13efa:	f012 f821 	bl	25f40 <assert_print>
   13efe:	4808      	ldr	r0, [pc, #32]	; (13f20 <bt_buf_get_rx+0x3c>)
   13f00:	213f      	movs	r1, #63	; 0x3f
   13f02:	f012 f816 	bl	25f32 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   13f06:	4808      	ldr	r0, [pc, #32]	; (13f28 <bt_buf_get_rx+0x44>)
   13f08:	f014 fdd6 	bl	28ab8 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   13f0c:	4604      	mov	r4, r0
   13f0e:	b120      	cbz	r0, 13f1a <bt_buf_get_rx+0x36>
	net_buf_simple_reserve(&buf->b, reserve);
   13f10:	2100      	movs	r1, #0
   13f12:	3008      	adds	r0, #8
   13f14:	f007 fcf0 	bl	1b8f8 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13f18:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13f1a:	4620      	mov	r0, r4
   13f1c:	bd38      	pop	{r3, r4, r5, pc}
   13f1e:	bf00      	nop
   13f20:	0002b2ea 	.word	0x0002b2ea
   13f24:	0002a7df 	.word	0x0002a7df
   13f28:	20000a64 	.word	0x20000a64

00013f2c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13f2c:	b510      	push	{r4, lr}
   13f2e:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   13f30:	490a      	ldr	r1, [pc, #40]	; (13f5c <bt_buf_get_cmd_complete+0x30>)
{
   13f32:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   13f34:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   13f38:	b920      	cbnz	r0, 13f44 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   13f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13f3e:	2001      	movs	r0, #1
   13f40:	f7ff bfd0 	b.w	13ee4 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   13f44:	f007 fe22 	bl	1bb8c <net_buf_ref>
   13f48:	2301      	movs	r3, #1
		buf->len = 0U;
   13f4a:	2100      	movs	r1, #0
   13f4c:	7503      	strb	r3, [r0, #20]
   13f4e:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   13f50:	4604      	mov	r4, r0
   13f52:	3008      	adds	r0, #8
   13f54:	f007 fcd0 	bl	1b8f8 <net_buf_simple_reserve>
}
   13f58:	4620      	mov	r0, r4
   13f5a:	bd10      	pop	{r4, pc}
   13f5c:	20000380 	.word	0x20000380

00013f60 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   13f60:	b570      	push	{r4, r5, r6, lr}
   13f62:	4604      	mov	r4, r0
	switch (evt) {
   13f64:	2c0f      	cmp	r4, #15
{
   13f66:	460d      	mov	r5, r1
   13f68:	4610      	mov	r0, r2
   13f6a:	4619      	mov	r1, r3
	switch (evt) {
   13f6c:	d805      	bhi.n	13f7a <bt_buf_get_evt+0x1a>
   13f6e:	2c0d      	cmp	r4, #13
   13f70:	d90d      	bls.n	13f8e <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   13f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   13f76:	f7ff bfd9 	b.w	13f2c <bt_buf_get_cmd_complete>
	switch (evt) {
   13f7a:	2c13      	cmp	r4, #19
   13f7c:	d107      	bne.n	13f8e <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   13f7e:	480c      	ldr	r0, [pc, #48]	; (13fb0 <bt_buf_get_evt+0x50>)
   13f80:	f014 fd9a 	bl	28ab8 <net_buf_alloc_fixed>
			if (buf) {
   13f84:	4604      	mov	r4, r0
   13f86:	b938      	cbnz	r0, 13f98 <bt_buf_get_evt+0x38>
{
   13f88:	2400      	movs	r4, #0
}
   13f8a:	4620      	mov	r0, r4
   13f8c:	bd70      	pop	{r4, r5, r6, pc}
   13f8e:	4602      	mov	r2, r0
   13f90:	460b      	mov	r3, r1
		if (discardable) {
   13f92:	b145      	cbz	r5, 13fa6 <bt_buf_get_evt+0x46>
   13f94:	4807      	ldr	r0, [pc, #28]	; (13fb4 <bt_buf_get_evt+0x54>)
   13f96:	e7f3      	b.n	13f80 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   13f98:	2100      	movs	r1, #0
   13f9a:	3008      	adds	r0, #8
   13f9c:	f007 fcac 	bl	1b8f8 <net_buf_simple_reserve>
   13fa0:	2301      	movs	r3, #1
   13fa2:	7523      	strb	r3, [r4, #20]
}
   13fa4:	e7f1      	b.n	13f8a <bt_buf_get_evt+0x2a>
}
   13fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13faa:	2001      	movs	r0, #1
   13fac:	f7ff bf9a 	b.w	13ee4 <bt_buf_get_rx>
   13fb0:	20000a98 	.word	0x20000a98
   13fb4:	200009c8 	.word	0x200009c8

00013fb8 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   13fb8:	6883      	ldr	r3, [r0, #8]
   13fba:	4802      	ldr	r0, [pc, #8]	; (13fc4 <hci_data_buf_overflow+0xc>)
   13fbc:	781a      	ldrb	r2, [r3, #0]
   13fbe:	2157      	movs	r1, #87	; 0x57
   13fc0:	f011 bfcc 	b.w	25f5c <z_log_minimal_printk>
   13fc4:	0002b320 	.word	0x0002b320

00013fc8 <hci_disconn_complete_prio>:
{
   13fc8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13fca:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13fcc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   13fd0:	781b      	ldrb	r3, [r3, #0]
   13fd2:	b963      	cbnz	r3, 13fee <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   13fd4:	4620      	mov	r0, r4
   13fd6:	f002 fb93 	bl	16700 <bt_conn_lookup_handle>
	if (!conn) {
   13fda:	4605      	mov	r5, r0
   13fdc:	b940      	cbnz	r0, 13ff0 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   13fde:	4b08      	ldr	r3, [pc, #32]	; (14000 <hci_disconn_complete_prio+0x38>)
   13fe0:	881a      	ldrh	r2, [r3, #0]
   13fe2:	b922      	cbnz	r2, 13fee <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13fe4:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   13fe8:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   13fec:	8018      	strh	r0, [r3, #0]
}
   13fee:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13ff0:	2101      	movs	r1, #1
   13ff2:	f002 fb8d 	bl	16710 <bt_conn_set_state>
	bt_conn_unref(conn);
   13ff6:	4628      	mov	r0, r5
}
   13ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13ffc:	f002 bb50 	b.w	166a0 <bt_conn_unref>
   14000:	20003584 	.word	0x20003584

00014004 <hci_disconn_complete>:
{
   14004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   14006:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   14008:	782e      	ldrb	r6, [r5, #0]
   1400a:	b9be      	cbnz	r6, 1403c <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1400c:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   14010:	4638      	mov	r0, r7
   14012:	f002 fb75 	bl	16700 <bt_conn_lookup_handle>
	if (!conn) {
   14016:	4604      	mov	r4, r0
   14018:	b930      	cbnz	r0, 14028 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
   1401a:	463a      	mov	r2, r7
   1401c:	4808      	ldr	r0, [pc, #32]	; (14040 <hci_disconn_complete+0x3c>)
}
   1401e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   14022:	2145      	movs	r1, #69	; 0x45
   14024:	f011 bf9a 	b.w	25f5c <z_log_minimal_printk>
	conn->err = evt->reason;
   14028:	78eb      	ldrb	r3, [r5, #3]
   1402a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1402c:	4631      	mov	r1, r6
   1402e:	f002 fb6f 	bl	16710 <bt_conn_set_state>
		bt_conn_unref(conn);
   14032:	4620      	mov	r0, r4
}
   14034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   14038:	f002 bb32 	b.w	166a0 <bt_conn_unref>
}
   1403c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1403e:	bf00      	nop
   14040:	0002b34d 	.word	0x0002b34d

00014044 <le_phy_update_complete>:
{
   14044:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14046:	6883      	ldr	r3, [r0, #8]
   14048:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   1404c:	4620      	mov	r0, r4
   1404e:	f002 fb57 	bl	16700 <bt_conn_lookup_handle>
	if (!conn) {
   14052:	b930      	cbnz	r0, 14062 <le_phy_update_complete+0x1e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14054:	4622      	mov	r2, r4
   14056:	4805      	ldr	r0, [pc, #20]	; (1406c <le_phy_update_complete+0x28>)
}
   14058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1405c:	2145      	movs	r1, #69	; 0x45
   1405e:	f011 bf7d 	b.w	25f5c <z_log_minimal_printk>
}
   14062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   14066:	f002 bb1b 	b.w	166a0 <bt_conn_unref>
   1406a:	bf00      	nop
   1406c:	0002b378 	.word	0x0002b378

00014070 <le_data_len_change>:
{
   14070:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14072:	6883      	ldr	r3, [r0, #8]
   14074:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   14076:	4620      	mov	r0, r4
   14078:	f002 fb42 	bl	16700 <bt_conn_lookup_handle>
	if (!conn) {
   1407c:	b930      	cbnz	r0, 1408c <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1407e:	4622      	mov	r2, r4
   14080:	4804      	ldr	r0, [pc, #16]	; (14094 <le_data_len_change+0x24>)
}
   14082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14086:	2145      	movs	r1, #69	; 0x45
   14088:	f011 bf68 	b.w	25f5c <z_log_minimal_printk>
}
   1408c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   14090:	f002 bb06 	b.w	166a0 <bt_conn_unref>
   14094:	0002b378 	.word	0x0002b378

00014098 <hci_hardware_error>:
{
   14098:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1409a:	2101      	movs	r1, #1
   1409c:	3008      	adds	r0, #8
   1409e:	f007 fe1f 	bl	1bce0 <net_buf_simple_pull_mem>
}
   140a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   140a6:	7802      	ldrb	r2, [r0, #0]
   140a8:	4801      	ldr	r0, [pc, #4]	; (140b0 <hci_hardware_error+0x18>)
   140aa:	2145      	movs	r1, #69	; 0x45
   140ac:	f011 bf56 	b.w	25f5c <z_log_minimal_printk>
   140b0:	0002b3a1 	.word	0x0002b3a1

000140b4 <rx_queue_put>:
{
   140b4:	4601      	mov	r1, r0
   140b6:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   140b8:	4807      	ldr	r0, [pc, #28]	; (140d8 <rx_queue_put+0x24>)
   140ba:	f007 fc3d 	bl	1b938 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   140be:	4907      	ldr	r1, [pc, #28]	; (140dc <rx_queue_put+0x28>)
   140c0:	4807      	ldr	r0, [pc, #28]	; (140e0 <rx_queue_put+0x2c>)
   140c2:	f015 f9ab 	bl	2941c <k_work_submit_to_queue>
	if (err < 0) {
   140c6:	1e02      	subs	r2, r0, #0
   140c8:	da05      	bge.n	140d6 <rx_queue_put+0x22>
}
   140ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Could not submit rx_work: %d", err);
   140ce:	4805      	ldr	r0, [pc, #20]	; (140e4 <rx_queue_put+0x30>)
   140d0:	2145      	movs	r1, #69	; 0x45
   140d2:	f011 bf43 	b.w	25f5c <z_log_minimal_printk>
}
   140d6:	bd08      	pop	{r3, pc}
   140d8:	200004bc 	.word	0x200004bc
   140dc:	200005d0 	.word	0x200005d0
   140e0:	200018d0 	.word	0x200018d0
   140e4:	0002b3c8 	.word	0x0002b3c8

000140e8 <le_conn_update_complete>:
{
   140e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   140ea:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   140ec:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   140f0:	4630      	mov	r0, r6
   140f2:	f002 fb05 	bl	16700 <bt_conn_lookup_handle>
	if (!conn) {
   140f6:	4604      	mov	r4, r0
   140f8:	b938      	cbnz	r0, 1410a <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   140fa:	481a      	ldr	r0, [pc, #104]	; (14164 <le_conn_update_complete+0x7c>)
   140fc:	4632      	mov	r2, r6
   140fe:	2145      	movs	r1, #69	; 0x45
}
   14100:	b002      	add	sp, #8
   14102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14106:	f011 bf29 	b.w	25f5c <z_log_minimal_printk>
	if (!evt->status) {
   1410a:	782b      	ldrb	r3, [r5, #0]
   1410c:	b99b      	cbnz	r3, 14136 <le_conn_update_complete+0x4e>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1410e:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   14112:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   14116:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1411a:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1411e:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   14122:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   14126:	f002 fc1d 	bl	16964 <notify_le_param_updated>
	bt_conn_unref(conn);
   1412a:	4620      	mov	r0, r4
}
   1412c:	b002      	add	sp, #8
   1412e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   14132:	f002 bab5 	b.w	166a0 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14136:	2b1a      	cmp	r3, #26
   14138:	d1f7      	bne.n	1412a <le_conn_update_complete+0x42>
   1413a:	78c3      	ldrb	r3, [r0, #3]
   1413c:	2b01      	cmp	r3, #1
   1413e:	d1f4      	bne.n	1412a <le_conn_update_complete+0x42>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14140:	f44f 7100 	mov.w	r1, #512	; 0x200
   14144:	3004      	adds	r0, #4
   14146:	f012 fe91 	bl	26e6c <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1414a:	0583      	lsls	r3, r0, #22
   1414c:	d4ed      	bmi.n	1412a <le_conn_update_complete+0x42>
		param.interval_min = conn->le.interval_min;
   1414e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   14152:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   14154:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   14156:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   1415a:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1415c:	4620      	mov	r0, r4
   1415e:	f003 f829 	bl	171b4 <bt_l2cap_update_conn_param>
   14162:	e7e2      	b.n	1412a <le_conn_update_complete+0x42>
   14164:	0002b378 	.word	0x0002b378

00014168 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   14168:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1416a:	4c08      	ldr	r4, [pc, #32]	; (1418c <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1416c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1416e:	2205      	movs	r2, #5
   14170:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   14174:	f002 fd5a 	bl	16c2c <bt_conn_lookup_state_le>
		if (!conn) {
   14178:	b938      	cbnz	r0, 1418a <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1417a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1417e:	4904      	ldr	r1, [pc, #16]	; (14190 <find_pending_connect.part.0+0x28>)
}
   14180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14184:	2204      	movs	r2, #4
   14186:	f002 bd51 	b.w	16c2c <bt_conn_lookup_state_le>
}
   1418a:	bd10      	pop	{r4, pc}
   1418c:	20000380 	.word	0x20000380
   14190:	0002b149 	.word	0x0002b149

00014194 <handle_event>:
{
   14194:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14196:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1419a:	4605      	mov	r5, r0
   1419c:	4614      	mov	r4, r2
   1419e:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   141a0:	429c      	cmp	r4, r3
   141a2:	d10d      	bne.n	141c0 <handle_event+0x2c>
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   141a4:	8984      	ldrh	r4, [r0, #12]
   141a6:	6880      	ldr	r0, [r0, #8]
   141a8:	4621      	mov	r1, r4
   141aa:	f7ff fceb 	bl	13b84 <bt_hex>
   141ae:	4623      	mov	r3, r4
   141b0:	9000      	str	r0, [sp, #0]
   141b2:	462a      	mov	r2, r5
   141b4:	480e      	ldr	r0, [pc, #56]	; (141f0 <handle_event+0x5c>)
   141b6:	2157      	movs	r1, #87	; 0x57
   141b8:	f011 fed0 	bl	25f5c <z_log_minimal_printk>
}
   141bc:	b003      	add	sp, #12
   141be:	bd30      	pop	{r4, r5, pc}
		if (handler->event != event) {
   141c0:	4622      	mov	r2, r4
   141c2:	f812 1b08 	ldrb.w	r1, [r2], #8
   141c6:	42a9      	cmp	r1, r5
   141c8:	d110      	bne.n	141ec <handle_event+0x58>
		if (buf->len < handler->min_len) {
   141ca:	8982      	ldrh	r2, [r0, #12]
   141cc:	7863      	ldrb	r3, [r4, #1]
   141ce:	4293      	cmp	r3, r2
   141d0:	d907      	bls.n	141e2 <handle_event+0x4e>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   141d2:	4808      	ldr	r0, [pc, #32]	; (141f4 <handle_event+0x60>)
   141d4:	462b      	mov	r3, r5
   141d6:	2145      	movs	r1, #69	; 0x45
}
   141d8:	b003      	add	sp, #12
   141da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   141de:	f011 bebd 	b.w	25f5c <z_log_minimal_printk>
		handler->handler(buf);
   141e2:	6863      	ldr	r3, [r4, #4]
}
   141e4:	b003      	add	sp, #12
   141e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   141ea:	4718      	bx	r3
   141ec:	4614      	mov	r4, r2
   141ee:	e7d7      	b.n	141a0 <handle_event+0xc>
   141f0:	0002b411 	.word	0x0002b411
   141f4:	0002b3ea 	.word	0x0002b3ea

000141f8 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   141f8:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   141fa:	4844      	ldr	r0, [pc, #272]	; (1430c <rx_work_handler+0x114>)
   141fc:	f007 fbf4 	bl	1b9e8 <net_buf_slist_get>
	if (!buf) {
   14200:	4604      	mov	r4, r0
   14202:	2800      	cmp	r0, #0
   14204:	f000 8081 	beq.w	1430a <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14208:	7d02      	ldrb	r2, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   1420a:	2a01      	cmp	r2, #1
   1420c:	d04d      	beq.n	142aa <rx_work_handler+0xb2>
   1420e:	2a03      	cmp	r2, #3
   14210:	d178      	bne.n	14304 <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14212:	8983      	ldrh	r3, [r0, #12]
   14214:	2b03      	cmp	r3, #3
   14216:	d80b      	bhi.n	14230 <rx_work_handler+0x38>
   14218:	493d      	ldr	r1, [pc, #244]	; (14310 <rx_work_handler+0x118>)
   1421a:	483e      	ldr	r0, [pc, #248]	; (14314 <rx_work_handler+0x11c>)
   1421c:	f240 12ed 	movw	r2, #493	; 0x1ed
   14220:	f011 fe8e 	bl	25f40 <assert_print>
   14224:	4040      	eors	r0, r0
   14226:	f380 8811 	msr	BASEPRI, r0
   1422a:	f04f 0003 	mov.w	r0, #3
   1422e:	df02      	svc	2
   14230:	2104      	movs	r1, #4
   14232:	f104 0008 	add.w	r0, r4, #8
   14236:	f007 fd53 	bl	1bce0 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1423a:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   1423c:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1423e:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14240:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   14242:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   14244:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   14248:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   1424a:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   1424c:	d007      	beq.n	1425e <rx_work_handler+0x66>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1424e:	4832      	ldr	r0, [pc, #200]	; (14318 <rx_work_handler+0x120>)
   14250:	2145      	movs	r1, #69	; 0x45
   14252:	f011 fe83 	bl	25f5c <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   14256:	4620      	mov	r0, r4
   14258:	f007 fc56 	bl	1bb08 <net_buf_unref>
		break;
   1425c:	e014      	b.n	14288 <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1425e:	f002 fa4f 	bl	16700 <bt_conn_lookup_handle>
	if (!conn) {
   14262:	4605      	mov	r5, r0
   14264:	b928      	cbnz	r0, 14272 <rx_work_handler+0x7a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   14266:	8ae2      	ldrh	r2, [r4, #22]
   14268:	482c      	ldr	r0, [pc, #176]	; (1431c <rx_work_handler+0x124>)
   1426a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1426c:	f011 fe76 	bl	25f5c <z_log_minimal_printk>
   14270:	e7f1      	b.n	14256 <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
   14272:	f002 fb27 	bl	168c4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   14276:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   14278:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1427a:	4621      	mov	r1, r4
   1427c:	4628      	mov	r0, r5
   1427e:	f002 f8e7 	bl	16450 <bt_conn_recv>
	bt_conn_unref(conn);
   14282:	4628      	mov	r0, r5
   14284:	f002 fa0c 	bl	166a0 <bt_conn_unref>
	return list->head;
   14288:	4b25      	ldr	r3, [pc, #148]	; (14320 <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1428a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1428e:	2b00      	cmp	r3, #0
   14290:	d03b      	beq.n	1430a <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   14292:	4924      	ldr	r1, [pc, #144]	; (14324 <rx_work_handler+0x12c>)
   14294:	4824      	ldr	r0, [pc, #144]	; (14328 <rx_work_handler+0x130>)
   14296:	f015 f8c1 	bl	2941c <k_work_submit_to_queue>
#endif
		if (err < 0) {
   1429a:	1e02      	subs	r2, r0, #0
   1429c:	da35      	bge.n	1430a <rx_work_handler+0x112>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   1429e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Could not submit rx_work: %d", err);
   142a2:	4822      	ldr	r0, [pc, #136]	; (1432c <rx_work_handler+0x134>)
   142a4:	2145      	movs	r1, #69	; 0x45
   142a6:	f011 be59 	b.w	25f5c <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   142aa:	8983      	ldrh	r3, [r0, #12]
   142ac:	2b01      	cmp	r3, #1
   142ae:	d80b      	bhi.n	142c8 <rx_work_handler+0xd0>
   142b0:	4917      	ldr	r1, [pc, #92]	; (14310 <rx_work_handler+0x118>)
   142b2:	4818      	ldr	r0, [pc, #96]	; (14314 <rx_work_handler+0x11c>)
   142b4:	f44f 6216 	mov.w	r2, #2400	; 0x960
   142b8:	f011 fe42 	bl	25f40 <assert_print>
   142bc:	4040      	eors	r0, r0
   142be:	f380 8811 	msr	BASEPRI, r0
   142c2:	f04f 0003 	mov.w	r0, #3
   142c6:	df02      	svc	2
   142c8:	2102      	movs	r1, #2
   142ca:	f104 0008 	add.w	r0, r4, #8
   142ce:	f007 fd07 	bl	1bce0 <net_buf_simple_pull_mem>
   142d2:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   142d4:	7800      	ldrb	r0, [r0, #0]
   142d6:	f012 fd9b 	bl	26e10 <bt_hci_evt_get_flags>
   142da:	0783      	lsls	r3, r0, #30
   142dc:	d40b      	bmi.n	142f6 <rx_work_handler+0xfe>
   142de:	490c      	ldr	r1, [pc, #48]	; (14310 <rx_work_handler+0x118>)
   142e0:	480c      	ldr	r0, [pc, #48]	; (14314 <rx_work_handler+0x11c>)
   142e2:	f640 1264 	movw	r2, #2404	; 0x964
   142e6:	f011 fe2b 	bl	25f40 <assert_print>
   142ea:	4040      	eors	r0, r0
   142ec:	f380 8811 	msr	BASEPRI, r0
   142f0:	f04f 0003 	mov.w	r0, #3
   142f4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   142f6:	4a0e      	ldr	r2, [pc, #56]	; (14330 <rx_work_handler+0x138>)
   142f8:	7828      	ldrb	r0, [r5, #0]
   142fa:	2306      	movs	r3, #6
   142fc:	4621      	mov	r1, r4
   142fe:	f7ff ff49 	bl	14194 <handle_event>
	net_buf_unref(buf);
   14302:	e7a8      	b.n	14256 <rx_work_handler+0x5e>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14304:	480b      	ldr	r0, [pc, #44]	; (14334 <rx_work_handler+0x13c>)
   14306:	2145      	movs	r1, #69	; 0x45
   14308:	e7b0      	b.n	1426c <rx_work_handler+0x74>
}
   1430a:	bd70      	pop	{r4, r5, r6, pc}
   1430c:	200004bc 	.word	0x200004bc
   14310:	0002b438 	.word	0x0002b438
   14314:	0002a7df 	.word	0x0002a7df
   14318:	0002b46c 	.word	0x0002b46c
   1431c:	0002b495 	.word	0x0002b495
   14320:	20000380 	.word	0x20000380
   14324:	200005d0 	.word	0x200005d0
   14328:	200018d0 	.word	0x200018d0
   1432c:	0002b3c8 	.word	0x0002b3c8
   14330:	00029d7c 	.word	0x00029d7c
   14334:	0002b4bc 	.word	0x0002b4bc

00014338 <hci_le_meta_event>:
{
   14338:	b510      	push	{r4, lr}
   1433a:	2101      	movs	r1, #1
   1433c:	4604      	mov	r4, r0
   1433e:	3008      	adds	r0, #8
   14340:	f007 fcce 	bl	1bce0 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14344:	4621      	mov	r1, r4
   14346:	4a03      	ldr	r2, [pc, #12]	; (14354 <hci_le_meta_event+0x1c>)
   14348:	7800      	ldrb	r0, [r0, #0]
}
   1434a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1434e:	230a      	movs	r3, #10
   14350:	f7ff bf20 	b.w	14194 <handle_event>
   14354:	00029dac 	.word	0x00029dac

00014358 <le_remote_feat_complete>:
{
   14358:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1435a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1435c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   14360:	4630      	mov	r0, r6
   14362:	f002 f9cd 	bl	16700 <bt_conn_lookup_handle>
	if (!conn) {
   14366:	4604      	mov	r4, r0
   14368:	b930      	cbnz	r0, 14378 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1436a:	4632      	mov	r2, r6
   1436c:	480b      	ldr	r0, [pc, #44]	; (1439c <le_remote_feat_complete+0x44>)
}
   1436e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14372:	2145      	movs	r1, #69	; 0x45
   14374:	f011 bdf2 	b.w	25f5c <z_log_minimal_printk>
	if (!evt->status) {
   14378:	782b      	ldrb	r3, [r5, #0]
   1437a:	b923      	cbnz	r3, 14386 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
   1437c:	2208      	movs	r2, #8
   1437e:	1ce9      	adds	r1, r5, #3
   14380:	30b4      	adds	r0, #180	; 0xb4
   14382:	f012 fc7b 	bl	26c7c <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14386:	1d20      	adds	r0, r4, #4
   14388:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1438c:	f012 fd6e 	bl	26e6c <atomic_or>
	bt_conn_unref(conn);
   14390:	4620      	mov	r0, r4
}
   14392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   14396:	f002 b983 	b.w	166a0 <bt_conn_unref>
   1439a:	bf00      	nop
   1439c:	0002b378 	.word	0x0002b378

000143a0 <hci_cmd_done>:
{
   143a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   143a4:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   143a6:	7990      	ldrb	r0, [r2, #6]
   143a8:	4d39      	ldr	r5, [pc, #228]	; (14490 <hci_cmd_done+0xf0>)
{
   143aa:	460f      	mov	r7, r1
   143ac:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   143ae:	f007 f96f 	bl	1b690 <net_buf_pool_get>
   143b2:	4285      	cmp	r5, r0
   143b4:	d00e      	beq.n	143d4 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   143b6:	79a4      	ldrb	r4, [r4, #6]
   143b8:	4620      	mov	r0, r4
   143ba:	f007 f969 	bl	1b690 <net_buf_pool_get>
   143be:	4623      	mov	r3, r4
   143c0:	e9cd 0500 	strd	r0, r5, [sp]
   143c4:	4632      	mov	r2, r6
   143c6:	4833      	ldr	r0, [pc, #204]	; (14494 <hci_cmd_done+0xf4>)
   143c8:	2157      	movs	r1, #87	; 0x57
   143ca:	f011 fdc7 	bl	25f5c <z_log_minimal_printk>
}
   143ce:	b002      	add	sp, #8
   143d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   143d4:	4620      	mov	r0, r4
   143d6:	f007 f963 	bl	1b6a0 <net_buf_id>
   143da:	4d2f      	ldr	r5, [pc, #188]	; (14498 <hci_cmd_done+0xf8>)
   143dc:	f04f 080c 	mov.w	r8, #12
   143e0:	fb08 5000 	mla	r0, r8, r0, r5
   143e4:	8843      	ldrh	r3, [r0, #2]
   143e6:	42b3      	cmp	r3, r6
   143e8:	d00d      	beq.n	14406 <hci_cmd_done+0x66>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   143ea:	4620      	mov	r0, r4
   143ec:	f007 f958 	bl	1b6a0 <net_buf_id>
   143f0:	fb08 5000 	mla	r0, r8, r0, r5
   143f4:	4632      	mov	r2, r6
   143f6:	8843      	ldrh	r3, [r0, #2]
   143f8:	4828      	ldr	r0, [pc, #160]	; (1449c <hci_cmd_done+0xfc>)
   143fa:	2157      	movs	r1, #87	; 0x57
}
   143fc:	b002      	add	sp, #8
   143fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   14402:	f011 bdab 	b.w	25f5c <z_log_minimal_printk>
	if (bt_dev.sent_cmd) {
   14406:	4e26      	ldr	r6, [pc, #152]	; (144a0 <hci_cmd_done+0x100>)
   14408:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   1440c:	b120      	cbz	r0, 14418 <hci_cmd_done+0x78>
		net_buf_unref(bt_dev.sent_cmd);
   1440e:	f007 fb7b 	bl	1bb08 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14412:	2300      	movs	r3, #0
   14414:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   14418:	4620      	mov	r0, r4
   1441a:	f007 f941 	bl	1b6a0 <net_buf_id>
   1441e:	260c      	movs	r6, #12
   14420:	fb06 5000 	mla	r0, r6, r0, r5
   14424:	6843      	ldr	r3, [r0, #4]
   14426:	b19b      	cbz	r3, 14450 <hci_cmd_done+0xb0>
   14428:	b997      	cbnz	r7, 14450 <hci_cmd_done+0xb0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1442a:	4620      	mov	r0, r4
   1442c:	f007 f938 	bl	1b6a0 <net_buf_id>
   14430:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14434:	2101      	movs	r1, #1
   14436:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   14438:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   1443c:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1443e:	f003 061f 	and.w	r6, r3, #31
   14442:	40b1      	lsls	r1, r6
	if (val) {
   14444:	095b      	lsrs	r3, r3, #5
   14446:	b1e2      	cbz	r2, 14482 <hci_cmd_done+0xe2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14448:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1444c:	f012 fd0e 	bl	26e6c <atomic_or>
	if (cmd(buf)->sync) {
   14450:	4620      	mov	r0, r4
   14452:	f007 f925 	bl	1b6a0 <net_buf_id>
   14456:	260c      	movs	r6, #12
   14458:	fb06 5000 	mla	r0, r6, r0, r5
   1445c:	6883      	ldr	r3, [r0, #8]
   1445e:	2b00      	cmp	r3, #0
   14460:	d0b5      	beq.n	143ce <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
   14462:	4620      	mov	r0, r4
   14464:	f007 f91c 	bl	1b6a0 <net_buf_id>
   14468:	4370      	muls	r0, r6
   1446a:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1446c:	4620      	mov	r0, r4
   1446e:	f007 f917 	bl	1b6a0 <net_buf_id>
   14472:	fb06 5500 	mla	r5, r6, r0, r5
   14476:	68a8      	ldr	r0, [r5, #8]
}
   14478:	b002      	add	sp, #8
   1447a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   1447e:	f00c b855 	b.w	2052c <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14482:	43c9      	mvns	r1, r1
   14484:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14488:	f012 fcff 	bl	26e8a <atomic_and.isra.0>
   1448c:	e7e0      	b.n	14450 <hci_cmd_done+0xb0>
   1448e:	bf00      	nop
   14490:	20000a30 	.word	0x20000a30
   14494:	0002b4d5 	.word	0x0002b4d5
   14498:	200025c4 	.word	0x200025c4
   1449c:	0002b50f 	.word	0x0002b50f
   144a0:	20000380 	.word	0x20000380

000144a4 <hci_cmd_status>:
{
   144a4:	b538      	push	{r3, r4, r5, lr}
   144a6:	2104      	movs	r1, #4
   144a8:	4604      	mov	r4, r0
   144aa:	3008      	adds	r0, #8
   144ac:	f007 fc18 	bl	1bce0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   144b0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   144b2:	7801      	ldrb	r1, [r0, #0]
   144b4:	8840      	ldrh	r0, [r0, #2]
   144b6:	4622      	mov	r2, r4
   144b8:	f7ff ff72 	bl	143a0 <hci_cmd_done>
	if (ncmd) {
   144bc:	b125      	cbz	r5, 144c8 <hci_cmd_status+0x24>
   144be:	4803      	ldr	r0, [pc, #12]	; (144cc <hci_cmd_status+0x28>)
}
   144c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   144c4:	f00c b832 	b.w	2052c <z_impl_k_sem_give>
   144c8:	bd38      	pop	{r3, r4, r5, pc}
   144ca:	bf00      	nop
   144cc:	200004a0 	.word	0x200004a0

000144d0 <hci_cmd_complete>:
{
   144d0:	b538      	push	{r3, r4, r5, lr}
   144d2:	2103      	movs	r1, #3
   144d4:	4604      	mov	r4, r0
   144d6:	3008      	adds	r0, #8
   144d8:	f007 fc02 	bl	1bce0 <net_buf_simple_pull_mem>
	status = buf->data[0];
   144dc:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   144de:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   144e0:	7819      	ldrb	r1, [r3, #0]
   144e2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   144e6:	4622      	mov	r2, r4
   144e8:	f7ff ff5a 	bl	143a0 <hci_cmd_done>
	if (ncmd) {
   144ec:	b125      	cbz	r5, 144f8 <hci_cmd_complete+0x28>
   144ee:	4803      	ldr	r0, [pc, #12]	; (144fc <hci_cmd_complete+0x2c>)
}
   144f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   144f4:	f00c b81a 	b.w	2052c <z_impl_k_sem_give>
   144f8:	bd38      	pop	{r3, r4, r5, pc}
   144fa:	bf00      	nop
   144fc:	200004a0 	.word	0x200004a0

00014500 <hci_num_completed_packets>:
{
   14500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   14504:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   14506:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
   14508:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 145dc <hci_num_completed_packets+0xdc>
			tx->pending_no_cb = 0U;
   1450c:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1450e:	783b      	ldrb	r3, [r7, #0]
   14510:	429d      	cmp	r5, r3
   14512:	db01      	blt.n	14518 <hci_num_completed_packets+0x18>
}
   14514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   14518:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   1451c:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   14520:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   14524:	4650      	mov	r0, sl
   14526:	f002 f8eb 	bl	16700 <bt_conn_lookup_handle>
		if (!conn) {
   1452a:	4604      	mov	r4, r0
   1452c:	b1d0      	cbz	r0, 14564 <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
   1452e:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   14532:	b346      	cbz	r6, 14586 <hci_num_completed_packets+0x86>
	__asm__ volatile(
   14534:	f04f 0340 	mov.w	r3, #64	; 0x40
   14538:	f3ef 8211 	mrs	r2, BASEPRI
   1453c:	f383 8812 	msr	BASEPRI_MAX, r3
   14540:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   14544:	69e3      	ldr	r3, [r4, #28]
   14546:	b1a3      	cbz	r3, 14572 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
   14548:	3b01      	subs	r3, #1
   1454a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1454c:	f382 8811 	msr	BASEPRI, r2
   14550:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   14554:	4620      	mov	r0, r4
   14556:	f001 ff05 	bl	16364 <bt_conn_get_pkts>
   1455a:	3e01      	subs	r6, #1
   1455c:	f00b ffe6 	bl	2052c <z_impl_k_sem_give>
   14560:	b2b6      	uxth	r6, r6
   14562:	e7e6      	b.n	14532 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
   14564:	481e      	ldr	r0, [pc, #120]	; (145e0 <hci_num_completed_packets+0xe0>)
   14566:	4652      	mov	r2, sl
   14568:	2145      	movs	r1, #69	; 0x45
   1456a:	f011 fcf7 	bl	25f5c <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
   1456e:	3501      	adds	r5, #1
   14570:	e7cd      	b.n	1450e <hci_num_completed_packets+0xe>
   14572:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14574:	b95b      	cbnz	r3, 1458e <hci_num_completed_packets+0x8e>
   14576:	f382 8811 	msr	BASEPRI, r2
   1457a:	f3bf 8f6f 	isb	sy
				BT_ERR("packets count mismatch");
   1457e:	2145      	movs	r1, #69	; 0x45
   14580:	4648      	mov	r0, r9
   14582:	f011 fceb 	bl	25f5c <z_log_minimal_printk>
		bt_conn_unref(conn);
   14586:	4620      	mov	r0, r4
   14588:	f002 f88a 	bl	166a0 <bt_conn_unref>
   1458c:	e7ef      	b.n	1456e <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1458e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   14590:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   14592:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14594:	428b      	cmp	r3, r1
	list->tail = node;
   14596:	bf08      	it	eq
   14598:	61a0      	streq	r0, [r4, #24]
   1459a:	f382 8811 	msr	BASEPRI, r2
   1459e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   145a2:	f04f 0240 	mov.w	r2, #64	; 0x40
   145a6:	f3ef 8111 	mrs	r1, BASEPRI
   145aa:	f382 8812 	msr	BASEPRI_MAX, r2
   145ae:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   145b2:	68da      	ldr	r2, [r3, #12]
   145b4:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   145b6:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   145ba:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   145be:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   145c0:	b94a      	cbnz	r2, 145d6 <hci_num_completed_packets+0xd6>
	list->head = node;
   145c2:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   145c6:	f381 8811 	msr	BASEPRI, r1
   145ca:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   145ce:	4650      	mov	r0, sl
   145d0:	f00c fad6 	bl	20b80 <k_work_submit>
   145d4:	e7be      	b.n	14554 <hci_num_completed_packets+0x54>
	parent->next = child;
   145d6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   145d8:	6263      	str	r3, [r4, #36]	; 0x24
}
   145da:	e7f4      	b.n	145c6 <hci_num_completed_packets+0xc6>
   145dc:	0002b568 	.word	0x0002b568
   145e0:	0002b547 	.word	0x0002b547

000145e4 <bt_hci_cmd_state_set_init>:
{
   145e4:	b510      	push	{r4, lr}
	state->bit = bit;
   145e6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   145ea:	f89d 3008 	ldrb.w	r3, [sp, #8]
   145ee:	720b      	strb	r3, [r1, #8]
{
   145f0:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   145f2:	f007 f855 	bl	1b6a0 <net_buf_id>
   145f6:	4b03      	ldr	r3, [pc, #12]	; (14604 <bt_hci_cmd_state_set_init+0x20>)
   145f8:	220c      	movs	r2, #12
   145fa:	fb02 3300 	mla	r3, r2, r0, r3
   145fe:	605c      	str	r4, [r3, #4]
}
   14600:	bd10      	pop	{r4, pc}
   14602:	bf00      	nop
   14604:	200025c4 	.word	0x200025c4

00014608 <bt_hci_cmd_create>:
{
   14608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   1460c:	f04f 32ff 	mov.w	r2, #4294967295
   14610:	4606      	mov	r6, r0
   14612:	f04f 33ff 	mov.w	r3, #4294967295
   14616:	481d      	ldr	r0, [pc, #116]	; (1468c <bt_hci_cmd_create+0x84>)
   14618:	460f      	mov	r7, r1
   1461a:	f014 fa4d 	bl	28ab8 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   1461e:	4604      	mov	r4, r0
   14620:	b950      	cbnz	r0, 14638 <bt_hci_cmd_create+0x30>
   14622:	491b      	ldr	r1, [pc, #108]	; (14690 <bt_hci_cmd_create+0x88>)
   14624:	481b      	ldr	r0, [pc, #108]	; (14694 <bt_hci_cmd_create+0x8c>)
   14626:	f240 1201 	movw	r2, #257	; 0x101
   1462a:	f011 fc89 	bl	25f40 <assert_print>
   1462e:	4818      	ldr	r0, [pc, #96]	; (14690 <bt_hci_cmd_create+0x88>)
   14630:	f240 1101 	movw	r1, #257	; 0x101
   14634:	f011 fc7d 	bl	25f32 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   14638:	f100 0a08 	add.w	sl, r0, #8
   1463c:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1463e:	f04f 0800 	mov.w	r8, #0
   14642:	4650      	mov	r0, sl
   14644:	f007 f958 	bl	1b8f8 <net_buf_simple_reserve>
   14648:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   1464c:	4620      	mov	r0, r4
   1464e:	f007 f827 	bl	1b6a0 <net_buf_id>
   14652:	4d11      	ldr	r5, [pc, #68]	; (14698 <bt_hci_cmd_create+0x90>)
   14654:	f04f 090c 	mov.w	r9, #12
   14658:	fb09 5000 	mla	r0, r9, r0, r5
   1465c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1465e:	4620      	mov	r0, r4
   14660:	f007 f81e 	bl	1b6a0 <net_buf_id>
   14664:	fb09 5000 	mla	r0, r9, r0, r5
   14668:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1466c:	4620      	mov	r0, r4
   1466e:	f007 f817 	bl	1b6a0 <net_buf_id>
   14672:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   14676:	2103      	movs	r1, #3
   14678:	f8c5 8004 	str.w	r8, [r5, #4]
   1467c:	4650      	mov	r0, sl
   1467e:	f007 fb49 	bl	1bd14 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   14682:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   14684:	7087      	strb	r7, [r0, #2]
}
   14686:	4620      	mov	r0, r4
   14688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1468c:	20000a30 	.word	0x20000a30
   14690:	0002b438 	.word	0x0002b438
   14694:	0002a7df 	.word	0x0002a7df
   14698:	200025c4 	.word	0x200025c4

0001469c <bt_hci_cmd_send_sync>:
{
   1469c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1469e:	4607      	mov	r7, r0
   146a0:	b087      	sub	sp, #28
   146a2:	4615      	mov	r5, r2
	if (!buf) {
   146a4:	460c      	mov	r4, r1
   146a6:	b921      	cbnz	r1, 146b2 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
   146a8:	f7ff ffae 	bl	14608 <bt_hci_cmd_create>
		if (!buf) {
   146ac:	4604      	mov	r4, r0
   146ae:	2800      	cmp	r0, #0
   146b0:	d047      	beq.n	14742 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   146b2:	2201      	movs	r2, #1
   146b4:	2100      	movs	r1, #0
   146b6:	4668      	mov	r0, sp
   146b8:	f014 fe4d 	bl	29356 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   146bc:	4620      	mov	r0, r4
   146be:	f006 ffef 	bl	1b6a0 <net_buf_id>
   146c2:	4e21      	ldr	r6, [pc, #132]	; (14748 <bt_hci_cmd_send_sync+0xac>)
   146c4:	230c      	movs	r3, #12
   146c6:	fb03 6000 	mla	r0, r3, r0, r6
   146ca:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   146ce:	4620      	mov	r0, r4
   146d0:	f007 fa5c 	bl	1bb8c <net_buf_ref>
   146d4:	4601      	mov	r1, r0
   146d6:	481d      	ldr	r0, [pc, #116]	; (1474c <bt_hci_cmd_send_sync+0xb0>)
   146d8:	f007 f9ec 	bl	1bab4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   146dc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   146e0:	2300      	movs	r3, #0
   146e2:	4668      	mov	r0, sp
   146e4:	f00b ff5c 	bl	205a0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   146e8:	b158      	cbz	r0, 14702 <bt_hci_cmd_send_sync+0x66>
   146ea:	4919      	ldr	r1, [pc, #100]	; (14750 <bt_hci_cmd_send_sync+0xb4>)
   146ec:	4819      	ldr	r0, [pc, #100]	; (14754 <bt_hci_cmd_send_sync+0xb8>)
   146ee:	f240 1249 	movw	r2, #329	; 0x149
   146f2:	f011 fc25 	bl	25f40 <assert_print>
   146f6:	4040      	eors	r0, r0
   146f8:	f380 8811 	msr	BASEPRI, r0
   146fc:	f04f 0003 	mov.w	r0, #3
   14700:	df02      	svc	2
	status = cmd(buf)->status;
   14702:	4620      	mov	r0, r4
   14704:	f006 ffcc 	bl	1b6a0 <net_buf_id>
   14708:	230c      	movs	r3, #12
   1470a:	4358      	muls	r0, r3
   1470c:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   1470e:	b186      	cbz	r6, 14732 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   14710:	4811      	ldr	r0, [pc, #68]	; (14758 <bt_hci_cmd_send_sync+0xbc>)
   14712:	4633      	mov	r3, r6
   14714:	463a      	mov	r2, r7
   14716:	2157      	movs	r1, #87	; 0x57
   14718:	f011 fc20 	bl	25f5c <z_log_minimal_printk>
		net_buf_unref(buf);
   1471c:	4620      	mov	r0, r4
   1471e:	f007 f9f3 	bl	1bb08 <net_buf_unref>
			return -ECONNREFUSED;
   14722:	2e09      	cmp	r6, #9
   14724:	bf14      	ite	ne
   14726:	f06f 0004 	mvnne.w	r0, #4
   1472a:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   1472e:	b007      	add	sp, #28
   14730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   14732:	b115      	cbz	r5, 1473a <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
   14734:	602c      	str	r4, [r5, #0]
	return 0;
   14736:	2000      	movs	r0, #0
   14738:	e7f9      	b.n	1472e <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
   1473a:	4620      	mov	r0, r4
   1473c:	f007 f9e4 	bl	1bb08 <net_buf_unref>
   14740:	e7f9      	b.n	14736 <bt_hci_cmd_send_sync+0x9a>
			return -ENOBUFS;
   14742:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14746:	e7f2      	b.n	1472e <bt_hci_cmd_send_sync+0x92>
   14748:	200025c4 	.word	0x200025c4
   1474c:	200004c4 	.word	0x200004c4
   14750:	0002b438 	.word	0x0002b438
   14754:	0002a7df 	.word	0x0002a7df
   14758:	0002b584 	.word	0x0002b584

0001475c <hci_le_read_max_data_len>:
{
   1475c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1475e:	4606      	mov	r6, r0
   14760:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   14762:	aa01      	add	r2, sp, #4
   14764:	2100      	movs	r1, #0
   14766:	f242 002f 	movw	r0, #8239	; 0x202f
   1476a:	f7ff ff97 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   1476e:	4604      	mov	r4, r0
   14770:	b130      	cbz	r0, 14780 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
   14772:	4809      	ldr	r0, [pc, #36]	; (14798 <hci_le_read_max_data_len+0x3c>)
   14774:	2145      	movs	r1, #69	; 0x45
   14776:	f011 fbf1 	bl	25f5c <z_log_minimal_printk>
}
   1477a:	4620      	mov	r0, r4
   1477c:	b002      	add	sp, #8
   1477e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   14780:	9801      	ldr	r0, [sp, #4]
   14782:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   14784:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14788:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1478a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1478e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   14790:	f007 f9ba 	bl	1bb08 <net_buf_unref>
	return 0;
   14794:	e7f1      	b.n	1477a <hci_le_read_max_data_len+0x1e>
   14796:	bf00      	nop
   14798:	0002b5a5 	.word	0x0002b5a5

0001479c <bt_hci_le_rand>:
{
   1479c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1479e:	4b14      	ldr	r3, [pc, #80]	; (147f0 <bt_hci_le_rand+0x54>)
   147a0:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   147a4:	2b00      	cmp	r3, #0
{
   147a6:	4605      	mov	r5, r0
   147a8:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   147aa:	da1d      	bge.n	147e8 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   147ac:	b914      	cbnz	r4, 147b4 <bt_hci_le_rand+0x18>
	return 0;
   147ae:	4620      	mov	r0, r4
}
   147b0:	b003      	add	sp, #12
   147b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   147b4:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   147b6:	aa01      	add	r2, sp, #4
   147b8:	f04f 0100 	mov.w	r1, #0
   147bc:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   147c0:	4626      	mov	r6, r4
   147c2:	bf28      	it	cs
   147c4:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   147c6:	f7ff ff69 	bl	1469c <bt_hci_cmd_send_sync>
		if (err) {
   147ca:	2800      	cmp	r0, #0
   147cc:	d1f0      	bne.n	147b0 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   147ce:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   147d0:	68b9      	ldr	r1, [r7, #8]
   147d2:	4632      	mov	r2, r6
   147d4:	3101      	adds	r1, #1
   147d6:	4628      	mov	r0, r5
   147d8:	f012 fa50 	bl	26c7c <memcpy>
		net_buf_unref(rsp);
   147dc:	4638      	mov	r0, r7
   147de:	f007 f993 	bl	1bb08 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   147e2:	4435      	add	r5, r6
		len -= count;
   147e4:	1ba4      	subs	r4, r4, r6
   147e6:	e7e1      	b.n	147ac <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   147e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   147ec:	e7e0      	b.n	147b0 <bt_hci_le_rand+0x14>
   147ee:	bf00      	nop
   147f0:	20000380 	.word	0x20000380

000147f4 <bt_hci_le_enh_conn_complete>:
{
   147f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   147f8:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   147fc:	4a94      	ldr	r2, [pc, #592]	; (14a50 <bt_hci_le_enh_conn_complete+0x25c>)
	handle |= ~BT_ACL_HANDLE_MASK;
   147fe:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   14802:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   14804:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   14808:	b29b      	uxth	r3, r3
   1480a:	4299      	cmp	r1, r3
{
   1480c:	4605      	mov	r5, r0
   1480e:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   14812:	bf08      	it	eq
   14814:	8016      	strheq	r6, [r2, #0]
{
   14816:	b088      	sub	sp, #32
			return true;
   14818:	bf08      	it	eq
   1481a:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   1481c:	f000 fd90 	bl	15340 <bt_id_pending_keys_update>
	if (evt->status) {
   14820:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14822:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   14826:	b334      	cbz	r4, 14876 <bt_hci_le_enh_conn_complete+0x82>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14828:	2c3c      	cmp	r4, #60	; 0x3c
   1482a:	d11c      	bne.n	14866 <bt_hci_le_enh_conn_complete+0x72>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1482c:	f001 f94e 	bl	15acc <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14830:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14834:	3010      	adds	r0, #16
   14836:	f012 fb28 	bl	26e8a <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1483a:	2000      	movs	r0, #0
   1483c:	f7ff fc94 	bl	14168 <find_pending_connect.part.0>
		if (!conn) {
   14840:	4605      	mov	r5, r0
   14842:	b930      	cbnz	r0, 14852 <bt_hci_le_enh_conn_complete+0x5e>
			BT_ERR("No pending peripheral connection");
   14844:	4883      	ldr	r0, [pc, #524]	; (14a54 <bt_hci_le_enh_conn_complete+0x260>)
   14846:	2145      	movs	r1, #69	; 0x45
}
   14848:	b008      	add	sp, #32
   1484a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			BT_ERR("No pending peripheral connection");
   1484e:	f011 bb85 	b.w	25f5c <z_log_minimal_printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   14852:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14854:	2100      	movs	r1, #0
   14856:	f001 ff5b 	bl	16710 <bt_conn_set_state>
		bt_conn_unref(conn);
   1485a:	4628      	mov	r0, r5
}
   1485c:	b008      	add	sp, #32
   1485e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   14862:	f001 bf1d 	b.w	166a0 <bt_conn_unref>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   14866:	487c      	ldr	r0, [pc, #496]	; (14a58 <bt_hci_le_enh_conn_complete+0x264>)
   14868:	4622      	mov	r2, r4
   1486a:	2157      	movs	r1, #87	; 0x57
}
   1486c:	b008      	add	sp, #32
   1486e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   14872:	f011 bb73 	b.w	25f5c <z_log_minimal_printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14876:	792b      	ldrb	r3, [r5, #4]
   14878:	3b02      	subs	r3, #2
   1487a:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   1487c:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14880:	d824      	bhi.n	148cc <bt_hci_le_enh_conn_complete+0xd8>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14882:	4649      	mov	r1, r9
   14884:	a806      	add	r0, sp, #24
   14886:	f012 faee 	bl	26e66 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1488a:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
   1488e:	2206      	movs	r2, #6
   14890:	3b02      	subs	r3, #2
   14892:	f105 0111 	add.w	r1, r5, #17
   14896:	f10d 0011 	add.w	r0, sp, #17
   1489a:	f88d 3018 	strb.w	r3, [sp, #24]
   1489e:	f012 f9ed 	bl	26c7c <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   148a2:	2301      	movs	r3, #1
   148a4:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   148a8:	78eb      	ldrb	r3, [r5, #3]
   148aa:	2b01      	cmp	r3, #1
   148ac:	d021      	beq.n	148f2 <bt_hci_le_enh_conn_complete+0xfe>
		BT_ERR("No pending conn for peer %s",
   148ae:	4648      	mov	r0, r9
   148b0:	f7ff f98a 	bl	13bc8 <bt_addr_le_str>
   148b4:	2145      	movs	r1, #69	; 0x45
   148b6:	4602      	mov	r2, r0
   148b8:	4868      	ldr	r0, [pc, #416]	; (14a5c <bt_hci_le_enh_conn_complete+0x268>)
   148ba:	f011 fb4f 	bl	25f5c <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   148be:	211f      	movs	r1, #31
   148c0:	4640      	mov	r0, r8
   148c2:	f012 fafe 	bl	26ec2 <bt_hci_disconnect>
}
   148c6:	b008      	add	sp, #32
   148c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   148cc:	78eb      	ldrb	r3, [r5, #3]
   148ce:	2b01      	cmp	r3, #1
   148d0:	bf04      	itt	eq
   148d2:	4b63      	ldreq	r3, [pc, #396]	; (14a60 <bt_hci_le_enh_conn_complete+0x26c>)
   148d4:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   148d8:	4649      	mov	r1, r9
   148da:	4620      	mov	r0, r4
   148dc:	f012 fc17 	bl	2710e <bt_lookup_id_addr>
   148e0:	4601      	mov	r1, r0
   148e2:	a806      	add	r0, sp, #24
   148e4:	f012 fabf 	bl	26e66 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   148e8:	4649      	mov	r1, r9
   148ea:	a804      	add	r0, sp, #16
   148ec:	f012 fabb 	bl	26e66 <bt_addr_le_copy>
   148f0:	e7da      	b.n	148a8 <bt_hci_le_enh_conn_complete+0xb4>
   148f2:	a806      	add	r0, sp, #24
   148f4:	f7ff fc38 	bl	14168 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   148f8:	78eb      	ldrb	r3, [r5, #3]
   148fa:	2b01      	cmp	r3, #1
   148fc:	4604      	mov	r4, r0
   148fe:	d10a      	bne.n	14916 <bt_hci_le_enh_conn_complete+0x122>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14900:	f001 f8e4 	bl	15acc <bt_le_adv_lookup_legacy>
   14904:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14908:	4682      	mov	sl, r0
   1490a:	3010      	adds	r0, #16
   1490c:	f012 fabd 	bl	26e8a <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   14910:	4650      	mov	r0, sl
   14912:	f012 fd26 	bl	27362 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   14916:	2c00      	cmp	r4, #0
   14918:	d0c9      	beq.n	148ae <bt_hci_le_enh_conn_complete+0xba>
	conn->handle = handle;
   1491a:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1491c:	a906      	add	r1, sp, #24
	conn->handle = handle;
   1491e:	f820 7b90 	strh.w	r7, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   14922:	f012 faa0 	bl	26e66 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   14926:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   1492a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1492e:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   14932:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14936:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   1493a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   1493e:	78eb      	ldrb	r3, [r5, #3]
   14940:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   14942:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14944:	2b01      	cmp	r3, #1
	conn->err = 0U;
   14946:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14948:	d115      	bne.n	14976 <bt_hci_le_enh_conn_complete+0x182>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   1494a:	a904      	add	r1, sp, #16
   1494c:	f104 0097 	add.w	r0, r4, #151	; 0x97
   14950:	f012 fa89 	bl	26e66 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14954:	f001 f8ba 	bl	15acc <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   14958:	7a21      	ldrb	r1, [r4, #8]
   1495a:	4d41      	ldr	r5, [pc, #260]	; (14a60 <bt_hci_le_enh_conn_complete+0x26c>)
   1495c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   14960:	4429      	add	r1, r5
   14962:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   14966:	f012 fa7e 	bl	26e66 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1496a:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   1496e:	065d      	lsls	r5, r3, #25
   14970:	d501      	bpl.n	14976 <bt_hci_le_enh_conn_complete+0x182>
			bt_le_adv_resume();
   14972:	f001 fa63 	bl	15e3c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14976:	2107      	movs	r1, #7
   14978:	4620      	mov	r0, r4
   1497a:	f001 fec9 	bl	16710 <bt_conn_set_state>
	if (is_disconnected) {
   1497e:	b11e      	cbz	r6, 14988 <bt_hci_le_enh_conn_complete+0x194>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14980:	2101      	movs	r1, #1
   14982:	4620      	mov	r0, r4
   14984:	f001 fec4 	bl	16710 <bt_conn_set_state>
	bt_conn_connected(conn);
   14988:	4620      	mov	r0, r4
   1498a:	f012 fd45 	bl	27418 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1498e:	7b63      	ldrb	r3, [r4, #13]
   14990:	2b07      	cmp	r3, #7
   14992:	d155      	bne.n	14a40 <bt_hci_le_enh_conn_complete+0x24c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14994:	f3bf 8f5b 	dmb	ish
   14998:	6863      	ldr	r3, [r4, #4]
   1499a:	4e31      	ldr	r6, [pc, #196]	; (14a60 <bt_hci_le_enh_conn_complete+0x26c>)
   1499c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   149a0:	f413 6f00 	tst.w	r3, #2048	; 0x800
   149a4:	d11f      	bne.n	149e6 <bt_hci_le_enh_conn_complete+0x1f2>
   149a6:	78e3      	ldrb	r3, [r4, #3]
   149a8:	b11b      	cbz	r3, 149b2 <bt_hci_le_enh_conn_complete+0x1be>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   149aa:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   149ae:	0718      	lsls	r0, r3, #28
   149b0:	d519      	bpl.n	149e6 <bt_hci_le_enh_conn_complete+0x1f2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   149b2:	2102      	movs	r1, #2
   149b4:	f242 0016 	movw	r0, #8214	; 0x2016
   149b8:	f7ff fe26 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   149bc:	4605      	mov	r5, r0
   149be:	2800      	cmp	r0, #0
   149c0:	d042      	beq.n	14a48 <bt_hci_le_enh_conn_complete+0x254>
   149c2:	2102      	movs	r1, #2
   149c4:	3008      	adds	r0, #8
   149c6:	f007 f9a5 	bl	1bd14 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   149ca:	8823      	ldrh	r3, [r4, #0]
   149cc:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   149ce:	2200      	movs	r2, #0
   149d0:	4629      	mov	r1, r5
   149d2:	f242 0016 	movw	r0, #8214	; 0x2016
   149d6:	f7ff fe61 	bl	1469c <bt_hci_cmd_send_sync>
		if (err) {
   149da:	4602      	mov	r2, r0
   149dc:	b118      	cbz	r0, 149e6 <bt_hci_le_enh_conn_complete+0x1f2>
			BT_ERR("Failed read remote features (%d)", err);
   149de:	4821      	ldr	r0, [pc, #132]	; (14a64 <bt_hci_le_enh_conn_complete+0x270>)
   149e0:	2145      	movs	r1, #69	; 0x45
   149e2:	f011 fabb 	bl	25f5c <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   149e6:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   149ea:	07d9      	lsls	r1, r3, #31
   149ec:	d50c      	bpl.n	14a08 <bt_hci_le_enh_conn_complete+0x214>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   149ee:	2100      	movs	r1, #0
   149f0:	2302      	movs	r3, #2
   149f2:	461a      	mov	r2, r3
   149f4:	9100      	str	r1, [sp, #0]
   149f6:	4620      	mov	r0, r4
   149f8:	f012 fa9c 	bl	26f34 <bt_le_set_phy>
		if (err) {
   149fc:	4602      	mov	r2, r0
   149fe:	b118      	cbz	r0, 14a08 <bt_hci_le_enh_conn_complete+0x214>
			BT_ERR("Failed LE Set PHY (%d)", err);
   14a00:	4819      	ldr	r0, [pc, #100]	; (14a68 <bt_hci_le_enh_conn_complete+0x274>)
   14a02:	2145      	movs	r1, #69	; 0x45
   14a04:	f011 faaa 	bl	25f5c <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   14a08:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   14a0c:	069a      	lsls	r2, r3, #26
   14a0e:	d517      	bpl.n	14a40 <bt_hci_le_enh_conn_complete+0x24c>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   14a10:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   14a14:	689b      	ldr	r3, [r3, #8]
   14a16:	079b      	lsls	r3, r3, #30
   14a18:	d512      	bpl.n	14a40 <bt_hci_le_enh_conn_complete+0x24c>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14a1a:	f10d 010e 	add.w	r1, sp, #14
   14a1e:	a803      	add	r0, sp, #12
   14a20:	f7ff fe9c 	bl	1475c <hci_le_read_max_data_len>
			if (!err) {
   14a24:	b960      	cbnz	r0, 14a40 <bt_hci_le_enh_conn_complete+0x24c>
				err = bt_le_set_data_len(conn,
   14a26:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   14a2a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   14a2e:	4620      	mov	r0, r4
   14a30:	f012 fa62 	bl	26ef8 <bt_le_set_data_len>
				if (err) {
   14a34:	4602      	mov	r2, r0
   14a36:	b118      	cbz	r0, 14a40 <bt_hci_le_enh_conn_complete+0x24c>
					BT_ERR("Failed to set data len (%d)", err);
   14a38:	480c      	ldr	r0, [pc, #48]	; (14a6c <bt_hci_le_enh_conn_complete+0x278>)
   14a3a:	2145      	movs	r1, #69	; 0x45
   14a3c:	f011 fa8e 	bl	25f5c <z_log_minimal_printk>
	bt_conn_unref(conn);
   14a40:	4620      	mov	r0, r4
   14a42:	f001 fe2d 	bl	166a0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14a46:	e73e      	b.n	148c6 <bt_hci_le_enh_conn_complete+0xd2>
		return -ENOBUFS;
   14a48:	f06f 0268 	mvn.w	r2, #104	; 0x68
   14a4c:	e7c7      	b.n	149de <bt_hci_le_enh_conn_complete+0x1ea>
   14a4e:	bf00      	nop
   14a50:	20003584 	.word	0x20003584
   14a54:	0002b5ca 	.word	0x0002b5ca
   14a58:	0002b5f0 	.word	0x0002b5f0
   14a5c:	0002b60e 	.word	0x0002b60e
   14a60:	20000380 	.word	0x20000380
   14a64:	0002b62f 	.word	0x0002b62f
   14a68:	0002b655 	.word	0x0002b655
   14a6c:	0002b671 	.word	0x0002b671

00014a70 <le_legacy_conn_complete>:
{
   14a70:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   14a72:	6881      	ldr	r1, [r0, #8]
   14a74:	4c17      	ldr	r4, [pc, #92]	; (14ad4 <le_legacy_conn_complete+0x64>)
	enh.status         = evt->status;
   14a76:	780b      	ldrb	r3, [r1, #0]
{
   14a78:	b088      	sub	sp, #32
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   14a7a:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   14a7c:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   14a80:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   14a84:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   14a88:	78cb      	ldrb	r3, [r1, #3]
   14a8a:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   14a8e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   14a92:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   14a96:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   14a9a:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   14a9e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   14aa2:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   14aa6:	7c4b      	ldrb	r3, [r1, #17]
   14aa8:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   14aac:	3104      	adds	r1, #4
   14aae:	f012 f9da 	bl	26e66 <bt_addr_le_copy>
   14ab2:	4621      	mov	r1, r4
   14ab4:	2206      	movs	r2, #6
   14ab6:	f10d 000b 	add.w	r0, sp, #11
   14aba:	f012 f8df 	bl	26c7c <memcpy>
   14abe:	2206      	movs	r2, #6
   14ac0:	4621      	mov	r1, r4
   14ac2:	f10d 0011 	add.w	r0, sp, #17
   14ac6:	f012 f8d9 	bl	26c7c <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   14aca:	4668      	mov	r0, sp
   14acc:	f7ff fe92 	bl	147f4 <bt_hci_le_enh_conn_complete>
}
   14ad0:	b008      	add	sp, #32
   14ad2:	bd10      	pop	{r4, pc}
   14ad4:	0002b15d 	.word	0x0002b15d

00014ad8 <bt_security_err_get>:
	switch (hci_err) {
   14ad8:	2829      	cmp	r0, #41	; 0x29
   14ada:	bf9a      	itte	ls
   14adc:	4b01      	ldrls	r3, [pc, #4]	; (14ae4 <bt_security_err_get+0xc>)
   14ade:	5c18      	ldrbls	r0, [r3, r0]
{
   14ae0:	2009      	movhi	r0, #9
}
   14ae2:	4770      	bx	lr
   14ae4:	0002b8d1 	.word	0x0002b8d1

00014ae8 <hci_encrypt_key_refresh_complete>:
{
   14ae8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   14aea:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14aec:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   14af0:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   14af2:	4630      	mov	r0, r6
   14af4:	f001 fe04 	bl	16700 <bt_conn_lookup_handle>
	if (!conn) {
   14af8:	4604      	mov	r4, r0
   14afa:	b930      	cbnz	r0, 14b0a <hci_encrypt_key_refresh_complete+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   14afc:	4632      	mov	r2, r6
   14afe:	4817      	ldr	r0, [pc, #92]	; (14b5c <hci_encrypt_key_refresh_complete+0x74>)
}
   14b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   14b04:	2145      	movs	r1, #69	; 0x45
   14b06:	f011 ba29 	b.w	25f5c <z_log_minimal_printk>
	if (status) {
   14b0a:	b165      	cbz	r5, 14b26 <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14b0c:	4628      	mov	r0, r5
   14b0e:	f7ff ffe3 	bl	14ad8 <bt_security_err_get>
   14b12:	4629      	mov	r1, r5
   14b14:	4602      	mov	r2, r0
   14b16:	4620      	mov	r0, r4
   14b18:	f002 f800 	bl	16b1c <bt_conn_security_changed>
	bt_conn_unref(conn);
   14b1c:	4620      	mov	r0, r4
}
   14b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   14b22:	f001 bdbd 	b.w	166a0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   14b26:	7883      	ldrb	r3, [r0, #2]
   14b28:	2b01      	cmp	r3, #1
   14b2a:	d1ef      	bne.n	14b0c <hci_encrypt_key_refresh_complete+0x24>
		bt_smp_update_keys(conn);
   14b2c:	f006 fad2 	bl	1b0d4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   14b30:	4620      	mov	r0, r4
   14b32:	f012 f97f 	bl	26e34 <update_sec_level>
   14b36:	2800      	cmp	r0, #0
   14b38:	d1e8      	bne.n	14b0c <hci_encrypt_key_refresh_complete+0x24>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14b3a:	2005      	movs	r0, #5
   14b3c:	f7ff ffcc 	bl	14ad8 <bt_security_err_get>
   14b40:	2105      	movs	r1, #5
   14b42:	4602      	mov	r2, r0
   14b44:	4620      	mov	r0, r4
   14b46:	f001 ffe9 	bl	16b1c <bt_conn_security_changed>
		BT_ERR("Failed to set required security level");
   14b4a:	4805      	ldr	r0, [pc, #20]	; (14b60 <hci_encrypt_key_refresh_complete+0x78>)
   14b4c:	2145      	movs	r1, #69	; 0x45
   14b4e:	f011 fa05 	bl	25f5c <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   14b52:	2105      	movs	r1, #5
   14b54:	4620      	mov	r0, r4
   14b56:	f012 fc68 	bl	2742a <bt_conn_disconnect>
   14b5a:	e7df      	b.n	14b1c <hci_encrypt_key_refresh_complete+0x34>
   14b5c:	0002b34d 	.word	0x0002b34d
   14b60:	0002b692 	.word	0x0002b692

00014b64 <hci_encrypt_change>:
{
   14b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   14b66:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14b68:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   14b6c:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   14b6e:	4638      	mov	r0, r7
   14b70:	f001 fdc6 	bl	16700 <bt_conn_lookup_handle>
	if (!conn) {
   14b74:	4604      	mov	r4, r0
   14b76:	b930      	cbnz	r0, 14b86 <hci_encrypt_change+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   14b78:	463a      	mov	r2, r7
   14b7a:	481c      	ldr	r0, [pc, #112]	; (14bec <hci_encrypt_change+0x88>)
}
   14b7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   14b80:	2145      	movs	r1, #69	; 0x45
   14b82:	f011 b9eb 	b.w	25f5c <z_log_minimal_printk>
	if (status) {
   14b86:	b165      	cbz	r5, 14ba2 <hci_encrypt_change+0x3e>
		bt_conn_security_changed(conn, status,
   14b88:	4628      	mov	r0, r5
   14b8a:	f7ff ffa5 	bl	14ad8 <bt_security_err_get>
   14b8e:	4629      	mov	r1, r5
   14b90:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14b92:	4620      	mov	r0, r4
   14b94:	f001 ffc2 	bl	16b1c <bt_conn_security_changed>
	bt_conn_unref(conn);
   14b98:	4620      	mov	r0, r4
}
   14b9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   14b9e:	f001 bd7f 	b.w	166a0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   14ba2:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   14ba4:	78f3      	ldrb	r3, [r6, #3]
   14ba6:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   14ba8:	2a01      	cmp	r2, #1
   14baa:	d005      	beq.n	14bb8 <hci_encrypt_change+0x54>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14bac:	2000      	movs	r0, #0
   14bae:	f7ff ff93 	bl	14ad8 <bt_security_err_get>
   14bb2:	2100      	movs	r1, #0
   14bb4:	4602      	mov	r2, r0
   14bb6:	e7ec      	b.n	14b92 <hci_encrypt_change+0x2e>
		if (conn->encrypt) {
   14bb8:	b10b      	cbz	r3, 14bbe <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
   14bba:	f006 fa8b 	bl	1b0d4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   14bbe:	4620      	mov	r0, r4
   14bc0:	f012 f938 	bl	26e34 <update_sec_level>
   14bc4:	2800      	cmp	r0, #0
   14bc6:	d1f1      	bne.n	14bac <hci_encrypt_change+0x48>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14bc8:	2005      	movs	r0, #5
   14bca:	f7ff ff85 	bl	14ad8 <bt_security_err_get>
   14bce:	2105      	movs	r1, #5
   14bd0:	4602      	mov	r2, r0
   14bd2:	4620      	mov	r0, r4
   14bd4:	f001 ffa2 	bl	16b1c <bt_conn_security_changed>
		BT_ERR("Failed to set required security level");
   14bd8:	4805      	ldr	r0, [pc, #20]	; (14bf0 <hci_encrypt_change+0x8c>)
   14bda:	2145      	movs	r1, #69	; 0x45
   14bdc:	f011 f9be 	bl	25f5c <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   14be0:	2105      	movs	r1, #5
   14be2:	4620      	mov	r0, r4
   14be4:	f012 fc21 	bl	2742a <bt_conn_disconnect>
   14be8:	e7d6      	b.n	14b98 <hci_encrypt_change+0x34>
   14bea:	bf00      	nop
   14bec:	0002b34d 	.word	0x0002b34d
   14bf0:	0002b692 	.word	0x0002b692

00014bf4 <bt_send>:
	return bt_dev.drv->send(buf);
   14bf4:	4b02      	ldr	r3, [pc, #8]	; (14c00 <bt_send+0xc>)
   14bf6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   14bfa:	695b      	ldr	r3, [r3, #20]
   14bfc:	4718      	bx	r3
   14bfe:	bf00      	nop
   14c00:	20000380 	.word	0x20000380

00014c04 <bt_hci_cmd_send>:
{
   14c04:	b538      	push	{r3, r4, r5, lr}
   14c06:	4605      	mov	r5, r0
	if (!buf) {
   14c08:	460c      	mov	r4, r1
   14c0a:	b919      	cbnz	r1, 14c14 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   14c0c:	f7ff fcfc 	bl	14608 <bt_hci_cmd_create>
		if (!buf) {
   14c10:	4604      	mov	r4, r0
   14c12:	b1c0      	cbz	r0, 14c46 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   14c14:	f640 4335 	movw	r3, #3125	; 0xc35
   14c18:	429d      	cmp	r5, r3
   14c1a:	d10e      	bne.n	14c3a <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
   14c1c:	4620      	mov	r0, r4
   14c1e:	f7ff ffe9 	bl	14bf4 <bt_send>
		if (err) {
   14c22:	4605      	mov	r5, r0
   14c24:	b168      	cbz	r0, 14c42 <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
   14c26:	4602      	mov	r2, r0
   14c28:	2145      	movs	r1, #69	; 0x45
   14c2a:	4808      	ldr	r0, [pc, #32]	; (14c4c <bt_hci_cmd_send+0x48>)
   14c2c:	f011 f996 	bl	25f5c <z_log_minimal_printk>
			net_buf_unref(buf);
   14c30:	4620      	mov	r0, r4
   14c32:	f006 ff69 	bl	1bb08 <net_buf_unref>
}
   14c36:	4628      	mov	r0, r5
   14c38:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14c3a:	4805      	ldr	r0, [pc, #20]	; (14c50 <bt_hci_cmd_send+0x4c>)
   14c3c:	4621      	mov	r1, r4
   14c3e:	f006 ff39 	bl	1bab4 <net_buf_put>
	return 0;
   14c42:	2500      	movs	r5, #0
   14c44:	e7f7      	b.n	14c36 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   14c46:	f06f 0568 	mvn.w	r5, #104	; 0x68
   14c4a:	e7f4      	b.n	14c36 <bt_hci_cmd_send+0x32>
   14c4c:	0002b6bd 	.word	0x0002b6bd
   14c50:	200004c4 	.word	0x200004c4

00014c54 <le_ltk_request>:
{
   14c54:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   14c56:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14c58:	8826      	ldrh	r6, [r4, #0]
   14c5a:	b2b7      	uxth	r7, r6
{
   14c5c:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   14c5e:	4638      	mov	r0, r7
   14c60:	f001 fd4e 	bl	16700 <bt_conn_lookup_handle>
	if (!conn) {
   14c64:	4605      	mov	r5, r0
   14c66:	b938      	cbnz	r0, 14c78 <le_ltk_request+0x24>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14c68:	4821      	ldr	r0, [pc, #132]	; (14cf0 <le_ltk_request+0x9c>)
   14c6a:	463a      	mov	r2, r7
   14c6c:	2145      	movs	r1, #69	; 0x45
}
   14c6e:	b007      	add	sp, #28
   14c70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14c74:	f011 b972 	b.w	25f5c <z_log_minimal_printk>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   14c78:	af02      	add	r7, sp, #8
   14c7a:	f8d4 2002 	ldr.w	r2, [r4, #2]
   14c7e:	f8d4 3006 	ldr.w	r3, [r4, #6]
   14c82:	9701      	str	r7, [sp, #4]
   14c84:	8961      	ldrh	r1, [r4, #10]
   14c86:	9100      	str	r1, [sp, #0]
   14c88:	f013 fe15 	bl	288b6 <bt_smp_request_ltk>
   14c8c:	b1f8      	cbz	r0, 14cce <le_ltk_request+0x7a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   14c8e:	2112      	movs	r1, #18
   14c90:	f242 001a 	movw	r0, #8218	; 0x201a
   14c94:	f7ff fcb8 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   14c98:	4604      	mov	r4, r0
   14c9a:	b940      	cbnz	r0, 14cae <le_ltk_request+0x5a>
		BT_ERR("Out of command buffers");
   14c9c:	4815      	ldr	r0, [pc, #84]	; (14cf4 <le_ltk_request+0xa0>)
   14c9e:	2145      	movs	r1, #69	; 0x45
   14ca0:	f011 f95c 	bl	25f5c <z_log_minimal_printk>
	bt_conn_unref(conn);
   14ca4:	4628      	mov	r0, r5
   14ca6:	f001 fcfb 	bl	166a0 <bt_conn_unref>
}
   14caa:	b007      	add	sp, #28
   14cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cae:	2112      	movs	r1, #18
   14cb0:	3008      	adds	r0, #8
   14cb2:	f007 f82f 	bl	1bd14 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   14cb6:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   14cb8:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   14cbc:	2210      	movs	r2, #16
   14cbe:	f011 ffdd 	bl	26c7c <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   14cc2:	4621      	mov	r1, r4
   14cc4:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   14cc8:	f7ff ff9c 	bl	14c04 <bt_hci_cmd_send>
   14ccc:	e7ea      	b.n	14ca4 <le_ltk_request+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   14cce:	2102      	movs	r1, #2
   14cd0:	f242 001b 	movw	r0, #8219	; 0x201b
   14cd4:	f7ff fc98 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   14cd8:	4604      	mov	r4, r0
   14cda:	2800      	cmp	r0, #0
   14cdc:	d0de      	beq.n	14c9c <le_ltk_request+0x48>
   14cde:	2102      	movs	r1, #2
   14ce0:	3008      	adds	r0, #8
   14ce2:	f007 f817 	bl	1bd14 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   14ce6:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   14ce8:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   14cea:	f242 001b 	movw	r0, #8219	; 0x201b
   14cee:	e7eb      	b.n	14cc8 <le_ltk_request+0x74>
   14cf0:	0002b378 	.word	0x0002b378
   14cf4:	0002b6e4 	.word	0x0002b6e4

00014cf8 <le_conn_param_neg_reply>:
{
   14cf8:	b570      	push	{r4, r5, r6, lr}
   14cfa:	4606      	mov	r6, r0
   14cfc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   14cfe:	f242 0021 	movw	r0, #8225	; 0x2021
   14d02:	2103      	movs	r1, #3
   14d04:	f7ff fc80 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   14d08:	4604      	mov	r4, r0
   14d0a:	b928      	cbnz	r0, 14d18 <le_conn_param_neg_reply+0x20>
}
   14d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   14d10:	4808      	ldr	r0, [pc, #32]	; (14d34 <le_conn_param_neg_reply+0x3c>)
   14d12:	2145      	movs	r1, #69	; 0x45
   14d14:	f011 b922 	b.w	25f5c <z_log_minimal_printk>
   14d18:	2103      	movs	r1, #3
   14d1a:	3008      	adds	r0, #8
   14d1c:	f006 fffa 	bl	1bd14 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   14d20:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   14d22:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   14d24:	4621      	mov	r1, r4
   14d26:	f242 0021 	movw	r0, #8225	; 0x2021
}
   14d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   14d2e:	f7ff bf69 	b.w	14c04 <bt_hci_cmd_send>
   14d32:	bf00      	nop
   14d34:	0002b700 	.word	0x0002b700

00014d38 <le_conn_param_req>:
{
   14d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   14d3a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14d3c:	78d9      	ldrb	r1, [r3, #3]
   14d3e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   14d40:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14d42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14d46:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   14d4a:	7959      	ldrb	r1, [r3, #5]
   14d4c:	791a      	ldrb	r2, [r3, #4]
   14d4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14d52:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   14d56:	799a      	ldrb	r2, [r3, #6]
   14d58:	79d9      	ldrb	r1, [r3, #7]
   14d5a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14d5e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14d62:	7a1a      	ldrb	r2, [r3, #8]
   14d64:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   14d66:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14d68:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   14d6c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14d6e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   14d72:	f001 fcc5 	bl	16700 <bt_conn_lookup_handle>
	if (!conn) {
   14d76:	4606      	mov	r6, r0
   14d78:	b950      	cbnz	r0, 14d90 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14d7a:	481d      	ldr	r0, [pc, #116]	; (14df0 <le_conn_param_req+0xb8>)
   14d7c:	2145      	movs	r1, #69	; 0x45
   14d7e:	4622      	mov	r2, r4
   14d80:	f011 f8ec 	bl	25f5c <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   14d84:	2102      	movs	r1, #2
   14d86:	4620      	mov	r0, r4
   14d88:	f7ff ffb6 	bl	14cf8 <le_conn_param_neg_reply>
}
   14d8c:	b003      	add	sp, #12
   14d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   14d90:	4669      	mov	r1, sp
   14d92:	f001 fe3b 	bl	16a0c <le_param_req>
   14d96:	b938      	cbnz	r0, 14da8 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   14d98:	211e      	movs	r1, #30
   14d9a:	4620      	mov	r0, r4
   14d9c:	f7ff ffac 	bl	14cf8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   14da0:	4630      	mov	r0, r6
   14da2:	f001 fc7d 	bl	166a0 <bt_conn_unref>
   14da6:	e7f1      	b.n	14d8c <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   14da8:	210e      	movs	r1, #14
   14daa:	f242 0020 	movw	r0, #8224	; 0x2020
   14dae:	f7ff fc2b 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   14db2:	4605      	mov	r5, r0
   14db4:	2800      	cmp	r0, #0
   14db6:	d0f3      	beq.n	14da0 <le_conn_param_req+0x68>
   14db8:	210e      	movs	r1, #14
   14dba:	3008      	adds	r0, #8
   14dbc:	f006 ffaa 	bl	1bd14 <net_buf_simple_add>
   14dc0:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   14dc2:	220e      	movs	r2, #14
   14dc4:	2100      	movs	r1, #0
   14dc6:	f011 ff64 	bl	26c92 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   14dca:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   14dcc:	f8bd 3000 	ldrh.w	r3, [sp]
   14dd0:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   14dd2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   14dd6:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   14dd8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14ddc:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   14dde:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14de2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   14de4:	4629      	mov	r1, r5
   14de6:	f242 0020 	movw	r0, #8224	; 0x2020
   14dea:	f7ff ff0b 	bl	14c04 <bt_hci_cmd_send>
   14dee:	e7d7      	b.n	14da0 <le_conn_param_req+0x68>
   14df0:	0002b378 	.word	0x0002b378

00014df4 <hci_tx_thread>:
{
   14df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   14df8:	4f45      	ldr	r7, [pc, #276]	; (14f10 <hci_tx_thread+0x11c>)
		BT_ASSERT(err == 0);
   14dfa:	f8df 8118 	ldr.w	r8, [pc, #280]	; 14f14 <hci_tx_thread+0x120>
			ev_count += bt_conn_prepare_events(&events[1]);
   14dfe:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   14e02:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14e04:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
   14e06:	f36f 3394 	bfc	r3, #14, #7
   14e0a:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14e0c:	f001 fbe2 	bl	165d4 <bt_conn_prepare_events>
   14e10:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   14e12:	483f      	ldr	r0, [pc, #252]	; (14f10 <hci_tx_thread+0x11c>)
   14e14:	f04f 32ff 	mov.w	r2, #4294967295
   14e18:	f04f 33ff 	mov.w	r3, #4294967295
   14e1c:	4629      	mov	r1, r5
   14e1e:	f00d fc8b 	bl	22738 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   14e22:	b158      	cbz	r0, 14e3c <hci_tx_thread+0x48>
   14e24:	483c      	ldr	r0, [pc, #240]	; (14f18 <hci_tx_thread+0x124>)
   14e26:	f640 12da 	movw	r2, #2522	; 0x9da
   14e2a:	4641      	mov	r1, r8
   14e2c:	f011 f888 	bl	25f40 <assert_print>
   14e30:	4040      	eors	r0, r0
   14e32:	f380 8811 	msr	BASEPRI, r0
   14e36:	f04f 0003 	mov.w	r0, #3
   14e3a:	df02      	svc	2
{
   14e3c:	4e34      	ldr	r6, [pc, #208]	; (14f10 <hci_tx_thread+0x11c>)
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   14e3e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 14f1c <hci_tx_thread+0x128>
	for (; count; ev++, count--) {
   14e42:	b915      	cbnz	r5, 14e4a <hci_tx_thread+0x56>
	z_impl_k_yield();
   14e44:	f00c fe36 	bl	21ab4 <z_impl_k_yield>
	while (1) {
   14e48:	e7db      	b.n	14e02 <hci_tx_thread+0xe>
		switch (ev->state) {
   14e4a:	68f2      	ldr	r2, [r6, #12]
   14e4c:	f3c2 3286 	ubfx	r2, r2, #14, #7
   14e50:	2a01      	cmp	r2, #1
   14e52:	d94e      	bls.n	14ef2 <hci_tx_thread+0xfe>
   14e54:	2a04      	cmp	r2, #4
   14e56:	d156      	bne.n	14f06 <hci_tx_thread+0x112>
			if (ev->tag == BT_EVENT_CMD_TX) {
   14e58:	7b33      	ldrb	r3, [r6, #12]
   14e5a:	2b00      	cmp	r3, #0
   14e5c:	d14c      	bne.n	14ef8 <hci_tx_thread+0x104>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14e5e:	4830      	ldr	r0, [pc, #192]	; (14f20 <hci_tx_thread+0x12c>)
   14e60:	2200      	movs	r2, #0
   14e62:	2300      	movs	r3, #0
   14e64:	f006 fd1e 	bl	1b8a4 <net_buf_get>
	BT_ASSERT(buf);
   14e68:	4604      	mov	r4, r0
   14e6a:	b958      	cbnz	r0, 14e84 <hci_tx_thread+0x90>
   14e6c:	482a      	ldr	r0, [pc, #168]	; (14f18 <hci_tx_thread+0x124>)
   14e6e:	f640 1273 	movw	r2, #2419	; 0x973
   14e72:	4641      	mov	r1, r8
   14e74:	f011 f864 	bl	25f40 <assert_print>
   14e78:	4040      	eors	r0, r0
   14e7a:	f380 8811 	msr	BASEPRI, r0
   14e7e:	f04f 0003 	mov.w	r0, #3
   14e82:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   14e84:	f8df b09c 	ldr.w	fp, [pc, #156]	; 14f24 <hci_tx_thread+0x130>
	return z_impl_k_sem_take(sem, timeout);
   14e88:	4827      	ldr	r0, [pc, #156]	; (14f28 <hci_tx_thread+0x134>)
   14e8a:	f04f 33ff 	mov.w	r3, #4294967295
   14e8e:	f04f 32ff 	mov.w	r2, #4294967295
   14e92:	f00b fb85 	bl	205a0 <z_impl_k_sem_take>
   14e96:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   14e9a:	b153      	cbz	r3, 14eb2 <hci_tx_thread+0xbe>
		BT_ERR("Uncleared pending sent_cmd");
   14e9c:	4823      	ldr	r0, [pc, #140]	; (14f2c <hci_tx_thread+0x138>)
   14e9e:	2145      	movs	r1, #69	; 0x45
   14ea0:	f011 f85c 	bl	25f5c <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   14ea4:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   14ea8:	f006 fe2e 	bl	1bb08 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14eac:	2300      	movs	r3, #0
   14eae:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   14eb2:	4620      	mov	r0, r4
   14eb4:	f006 fe6a 	bl	1bb8c <net_buf_ref>
   14eb8:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   14ebc:	4620      	mov	r0, r4
   14ebe:	f7ff fe99 	bl	14bf4 <bt_send>
	if (err) {
   14ec2:	4602      	mov	r2, r0
   14ec4:	b1a8      	cbz	r0, 14ef2 <hci_tx_thread+0xfe>
		BT_ERR("Unable to send to driver (err %d)", err);
   14ec6:	481a      	ldr	r0, [pc, #104]	; (14f30 <hci_tx_thread+0x13c>)
   14ec8:	2145      	movs	r1, #69	; 0x45
   14eca:	f011 f847 	bl	25f5c <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   14ece:	4816      	ldr	r0, [pc, #88]	; (14f28 <hci_tx_thread+0x134>)
   14ed0:	f00b fb2c 	bl	2052c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   14ed4:	4620      	mov	r0, r4
   14ed6:	f006 fbe3 	bl	1b6a0 <net_buf_id>
   14eda:	4b16      	ldr	r3, [pc, #88]	; (14f34 <hci_tx_thread+0x140>)
   14edc:	220c      	movs	r2, #12
   14ede:	fb02 3000 	mla	r0, r2, r0, r3
   14ee2:	211f      	movs	r1, #31
   14ee4:	8840      	ldrh	r0, [r0, #2]
   14ee6:	4622      	mov	r2, r4
   14ee8:	f7ff fa5a 	bl	143a0 <hci_cmd_done>
		net_buf_unref(buf);
   14eec:	4620      	mov	r0, r4
   14eee:	f006 fe0b 	bl	1bb08 <net_buf_unref>
	for (; count; ev++, count--) {
   14ef2:	3614      	adds	r6, #20
   14ef4:	3d01      	subs	r5, #1
   14ef6:	e7a4      	b.n	14e42 <hci_tx_thread+0x4e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   14ef8:	2b01      	cmp	r3, #1
   14efa:	d1fa      	bne.n	14ef2 <hci_tx_thread+0xfe>
					conn = CONTAINER_OF(ev->fifo,
   14efc:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   14efe:	3838      	subs	r0, #56	; 0x38
   14f00:	f001 ff90 	bl	16e24 <bt_conn_process_tx>
   14f04:	e7f5      	b.n	14ef2 <hci_tx_thread+0xfe>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   14f06:	2157      	movs	r1, #87	; 0x57
   14f08:	4650      	mov	r0, sl
   14f0a:	f011 f827 	bl	25f5c <z_log_minimal_printk>
   14f0e:	e7f0      	b.n	14ef2 <hci_tx_thread+0xfe>
   14f10:	20000594 	.word	0x20000594
   14f14:	0002b438 	.word	0x0002b438
   14f18:	0002a7df 	.word	0x0002a7df
   14f1c:	0002b73f 	.word	0x0002b73f
   14f20:	200004c4 	.word	0x200004c4
   14f24:	20000380 	.word	0x20000380
   14f28:	200004a0 	.word	0x200004a0
   14f2c:	0002b71f 	.word	0x0002b71f
   14f30:	0002b6bd 	.word	0x0002b6bd
   14f34:	200025c4 	.word	0x200025c4

00014f38 <hci_event_prio>:
{
   14f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f3c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   14f3e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   14f42:	4630      	mov	r0, r6
   14f44:	f013 fdc5 	bl	28ad2 <net_buf_simple_headroom>
	state->len = buf->len;
   14f48:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14f4c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   14f50:	4605      	mov	r5, r0
   14f52:	d80b      	bhi.n	14f6c <hci_event_prio+0x34>
   14f54:	491b      	ldr	r1, [pc, #108]	; (14fc4 <hci_event_prio+0x8c>)
   14f56:	481c      	ldr	r0, [pc, #112]	; (14fc8 <hci_event_prio+0x90>)
   14f58:	f640 5277 	movw	r2, #3447	; 0xd77
   14f5c:	f010 fff0 	bl	25f40 <assert_print>
   14f60:	4040      	eors	r0, r0
   14f62:	f380 8811 	msr	BASEPRI, r0
   14f66:	f04f 0003 	mov.w	r0, #3
   14f6a:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   14f6c:	4630      	mov	r0, r6
   14f6e:	2102      	movs	r1, #2
   14f70:	f006 feb6 	bl	1bce0 <net_buf_simple_pull_mem>
   14f74:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14f76:	7800      	ldrb	r0, [r0, #0]
   14f78:	f011 ff4a 	bl	26e10 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14f7c:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14f7e:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14f80:	d40b      	bmi.n	14f9a <hci_event_prio+0x62>
   14f82:	4910      	ldr	r1, [pc, #64]	; (14fc4 <hci_event_prio+0x8c>)
   14f84:	4810      	ldr	r0, [pc, #64]	; (14fc8 <hci_event_prio+0x90>)
   14f86:	f640 527b 	movw	r2, #3451	; 0xd7b
   14f8a:	f010 ffd9 	bl	25f40 <assert_print>
   14f8e:	4040      	eors	r0, r0
   14f90:	f380 8811 	msr	BASEPRI, r0
   14f94:	f04f 0003 	mov.w	r0, #3
   14f98:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   14f9a:	2305      	movs	r3, #5
   14f9c:	4a0b      	ldr	r2, [pc, #44]	; (14fcc <hci_event_prio+0x94>)
   14f9e:	7838      	ldrb	r0, [r7, #0]
   14fa0:	4621      	mov	r1, r4
   14fa2:	f7ff f8f7 	bl	14194 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14fa6:	07b3      	lsls	r3, r6, #30
   14fa8:	d507      	bpl.n	14fba <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   14faa:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   14fac:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   14fb0:	fa13 f585 	uxtah	r5, r3, r5
   14fb4:	60a5      	str	r5, [r4, #8]
}
   14fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   14fba:	4620      	mov	r0, r4
}
   14fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   14fc0:	f006 bda2 	b.w	1bb08 <net_buf_unref>
   14fc4:	0002b438 	.word	0x0002b438
   14fc8:	0002a7df 	.word	0x0002a7df
   14fcc:	00029d54 	.word	0x00029d54

00014fd0 <bt_recv>:
{
   14fd0:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14fd2:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   14fd4:	2a01      	cmp	r2, #1
{
   14fd6:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   14fd8:	d005      	beq.n	14fe6 <bt_recv+0x16>
   14fda:	2a03      	cmp	r2, #3
   14fdc:	d111      	bne.n	15002 <bt_recv+0x32>
			rx_queue_put(buf);
   14fde:	f7ff f869 	bl	140b4 <rx_queue_put>
		return 0;
   14fe2:	2000      	movs	r0, #0
}
   14fe4:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14fe6:	6883      	ldr	r3, [r0, #8]
   14fe8:	7818      	ldrb	r0, [r3, #0]
   14fea:	f011 ff11 	bl	26e10 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   14fee:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14ff0:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   14ff2:	d502      	bpl.n	14ffa <bt_recv+0x2a>
			hci_event_prio(buf);
   14ff4:	4620      	mov	r0, r4
   14ff6:	f7ff ff9f 	bl	14f38 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14ffa:	07ab      	lsls	r3, r5, #30
   14ffc:	d5f1      	bpl.n	14fe2 <bt_recv+0x12>
			rx_queue_put(buf);
   14ffe:	4620      	mov	r0, r4
   15000:	e7ed      	b.n	14fde <bt_recv+0xe>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   15002:	4805      	ldr	r0, [pc, #20]	; (15018 <bt_recv+0x48>)
   15004:	2145      	movs	r1, #69	; 0x45
   15006:	f010 ffa9 	bl	25f5c <z_log_minimal_printk>
		net_buf_unref(buf);
   1500a:	4620      	mov	r0, r4
   1500c:	f006 fd7c 	bl	1bb08 <net_buf_unref>
		return -EINVAL;
   15010:	f06f 0015 	mvn.w	r0, #21
   15014:	e7e6      	b.n	14fe4 <bt_recv+0x14>
   15016:	bf00      	nop
   15018:	0002b765 	.word	0x0002b765

0001501c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1501c:	4a08      	ldr	r2, [pc, #32]	; (15040 <bt_hci_driver_register+0x24>)
{
   1501e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   15020:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   15024:	b930      	cbnz	r0, 15034 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   15026:	68d9      	ldr	r1, [r3, #12]
   15028:	b139      	cbz	r1, 1503a <bt_hci_driver_register+0x1e>
   1502a:	6959      	ldr	r1, [r3, #20]
   1502c:	b129      	cbz	r1, 1503a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1502e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   15032:	4770      	bx	lr
		return -EALREADY;
   15034:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15038:	4770      	bx	lr
		return -EINVAL;
   1503a:	f06f 0015 	mvn.w	r0, #21
}
   1503e:	4770      	bx	lr
   15040:	20000380 	.word	0x20000380

00015044 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15044:	4801      	ldr	r0, [pc, #4]	; (1504c <bt_finalize_init+0x8>)
   15046:	2104      	movs	r1, #4
   15048:	f011 bf10 	b.w	26e6c <atomic_or>
   1504c:	2000044c 	.word	0x2000044c

00015050 <init_work>:
{
   15050:	b510      	push	{r4, lr}
	err = bt_init();
   15052:	f7fb fbb5 	bl	107c0 <bt_init>
	if (ready_cb) {
   15056:	4b03      	ldr	r3, [pc, #12]	; (15064 <init_work+0x14>)
   15058:	681b      	ldr	r3, [r3, #0]
   1505a:	b113      	cbz	r3, 15062 <init_work+0x12>
}
   1505c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   15060:	4718      	bx	r3
}
   15062:	bd10      	pop	{r4, pc}
   15064:	200025dc 	.word	0x200025dc

00015068 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   15068:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   1506a:	4d35      	ldr	r5, [pc, #212]	; (15140 <bt_enable+0xd8>)
   1506c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   15070:	b088      	sub	sp, #32
   15072:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   15074:	b943      	cbnz	r3, 15088 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
   15076:	4833      	ldr	r0, [pc, #204]	; (15144 <bt_enable+0xdc>)
   15078:	2145      	movs	r1, #69	; 0x45
   1507a:	f010 ff6f 	bl	25f5c <z_log_minimal_printk>
		return -ENODEV;
   1507e:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   15082:	4620      	mov	r0, r4
   15084:	b008      	add	sp, #32
   15086:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15088:	f06f 0102 	mvn.w	r1, #2
   1508c:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   15090:	f011 fefb 	bl	26e8a <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15094:	2101      	movs	r1, #1
   15096:	f011 fee9 	bl	26e6c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1509a:	07c3      	lsls	r3, r0, #31
   1509c:	d44d      	bmi.n	1513a <bt_enable+0xd2>
		err = bt_settings_init();
   1509e:	f7fe feb5 	bl	13e0c <bt_settings_init>
		if (err) {
   150a2:	4604      	mov	r4, r0
   150a4:	2800      	cmp	r0, #0
   150a6:	d1ec      	bne.n	15082 <bt_enable+0x1a>
	ready_cb = cb;
   150a8:	4b27      	ldr	r3, [pc, #156]	; (15148 <bt_enable+0xe0>)
   150aa:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   150ac:	2201      	movs	r2, #1
   150ae:	4611      	mov	r1, r2
   150b0:	f505 7090 	add.w	r0, r5, #288	; 0x120
   150b4:	f014 f94f 	bl	29356 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   150b8:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   150bc:	f014 f929 	bl	29312 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   150c0:	2200      	movs	r2, #0
   150c2:	2300      	movs	r3, #0
   150c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   150c8:	f06f 0308 	mvn.w	r3, #8
   150cc:	e9cd 4302 	strd	r4, r3, [sp, #8]
   150d0:	e9cd 4400 	strd	r4, r4, [sp]
   150d4:	4b1d      	ldr	r3, [pc, #116]	; (1514c <bt_enable+0xe4>)
   150d6:	491e      	ldr	r1, [pc, #120]	; (15150 <bt_enable+0xe8>)
   150d8:	9404      	str	r4, [sp, #16]
   150da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   150de:	481d      	ldr	r0, [pc, #116]	; (15154 <bt_enable+0xec>)
   150e0:	f00a fec0 	bl	1fe64 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   150e4:	491c      	ldr	r1, [pc, #112]	; (15158 <bt_enable+0xf0>)
   150e6:	481b      	ldr	r0, [pc, #108]	; (15154 <bt_enable+0xec>)
   150e8:	f014 f8ea 	bl	292c0 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   150ec:	481b      	ldr	r0, [pc, #108]	; (1515c <bt_enable+0xf4>)
   150ee:	f00b fd4d 	bl	20b8c <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   150f2:	491b      	ldr	r1, [pc, #108]	; (15160 <bt_enable+0xf8>)
   150f4:	4819      	ldr	r0, [pc, #100]	; (1515c <bt_enable+0xf4>)
   150f6:	9400      	str	r4, [sp, #0]
   150f8:	f06f 0307 	mvn.w	r3, #7
   150fc:	f640 0298 	movw	r2, #2200	; 0x898
   15100:	f00b fd5a 	bl	20bb8 <k_work_queue_start>
   15104:	4917      	ldr	r1, [pc, #92]	; (15164 <bt_enable+0xfc>)
   15106:	4815      	ldr	r0, [pc, #84]	; (1515c <bt_enable+0xf4>)
   15108:	f014 f8da 	bl	292c0 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1510c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   15110:	68db      	ldr	r3, [r3, #12]
   15112:	4798      	blx	r3
	if (err) {
   15114:	4604      	mov	r4, r0
   15116:	b128      	cbz	r0, 15124 <bt_enable+0xbc>
		BT_ERR("HCI driver open failed (%d)", err);
   15118:	4602      	mov	r2, r0
   1511a:	2145      	movs	r1, #69	; 0x45
   1511c:	4812      	ldr	r0, [pc, #72]	; (15168 <bt_enable+0x100>)
   1511e:	f010 ff1d 	bl	25f5c <z_log_minimal_printk>
		return err;
   15122:	e7ae      	b.n	15082 <bt_enable+0x1a>
	if (!cb) {
   15124:	b926      	cbnz	r6, 15130 <bt_enable+0xc8>
}
   15126:	b008      	add	sp, #32
   15128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   1512c:	f7fb bb48 	b.w	107c0 <bt_init>
	k_work_submit(&bt_dev.init);
   15130:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   15134:	f00b fd24 	bl	20b80 <k_work_submit>
	return 0;
   15138:	e7a3      	b.n	15082 <bt_enable+0x1a>
		return -EALREADY;
   1513a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1513e:	e7a0      	b.n	15082 <bt_enable+0x1a>
   15140:	20000380 	.word	0x20000380
   15144:	0002b886 	.word	0x0002b886
   15148:	200025dc 	.word	0x200025dc
   1514c:	00014df5 	.word	0x00014df5
   15150:	20004880 	.word	0x20004880
   15154:	20001850 	.word	0x20001850
   15158:	0002b8a4 	.word	0x0002b8a4
   1515c:	200018d0 	.word	0x200018d0
   15160:	20004ec0 	.word	0x20004ec0
   15164:	0002b8aa 	.word	0x0002b8aa
   15168:	0002b8b0 	.word	0x0002b8b0

0001516c <bt_is_ready>:
   1516c:	4b04      	ldr	r3, [pc, #16]	; (15180 <bt_is_ready+0x14>)
   1516e:	f3bf 8f5b 	dmb	ish
   15172:	6818      	ldr	r0, [r3, #0]
   15174:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   15178:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1517c:	4770      	bx	lr
   1517e:	bf00      	nop
   15180:	2000044c 	.word	0x2000044c

00015184 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   15184:	4800      	ldr	r0, [pc, #0]	; (15188 <bt_get_name+0x4>)
   15186:	4770      	bx	lr
   15188:	0002a792 	.word	0x0002a792

0001518c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1518e:	4f0a      	ldr	r7, [pc, #40]	; (151b8 <id_find+0x2c>)
{
   15190:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   15192:	2500      	movs	r5, #0
   15194:	79fb      	ldrb	r3, [r7, #7]
   15196:	b2ec      	uxtb	r4, r5
   15198:	42a3      	cmp	r3, r4
   1519a:	d802      	bhi.n	151a2 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1519c:	f06f 0001 	mvn.w	r0, #1
   151a0:	e009      	b.n	151b6 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   151a2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   151a6:	4439      	add	r1, r7
   151a8:	4630      	mov	r0, r6
   151aa:	f011 ff1a 	bl	26fe2 <bt_addr_le_eq>
   151ae:	3501      	adds	r5, #1
   151b0:	2800      	cmp	r0, #0
   151b2:	d0ef      	beq.n	15194 <id_find+0x8>
   151b4:	4620      	mov	r0, r4
}
   151b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   151b8:	20000380 	.word	0x20000380

000151bc <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   151bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   151be:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   151c0:	460d      	mov	r5, r1
   151c2:	b1a9      	cbz	r1, 151f0 <id_create.constprop.0+0x34>
   151c4:	4916      	ldr	r1, [pc, #88]	; (15220 <id_create.constprop.0+0x64>)
   151c6:	4628      	mov	r0, r5
   151c8:	f011 ff0b 	bl	26fe2 <bt_addr_le_eq>
   151cc:	b980      	cbnz	r0, 151f0 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   151ce:	4815      	ldr	r0, [pc, #84]	; (15224 <id_create.constprop.0+0x68>)
   151d0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   151d4:	4629      	mov	r1, r5
   151d6:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   151d8:	f011 ff0b 	bl	26ff2 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   151dc:	4812      	ldr	r0, [pc, #72]	; (15228 <id_create.constprop.0+0x6c>)
   151de:	f011 ff0b 	bl	26ff8 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   151e2:	0743      	lsls	r3, r0, #29
   151e4:	d501      	bpl.n	151ea <id_create.constprop.0+0x2e>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   151e6:	f7fe fdcb 	bl	13d80 <bt_settings_save_id>
	}

	return 0;
   151ea:	2000      	movs	r0, #0
}
   151ec:	b003      	add	sp, #12
   151ee:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   151f0:	4668      	mov	r0, sp
   151f2:	f011 fdff 	bl	26df4 <bt_addr_le_create_static>
			if (err) {
   151f6:	2800      	cmp	r0, #0
   151f8:	d1f8      	bne.n	151ec <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
   151fa:	4668      	mov	r0, sp
   151fc:	f7ff ffc6 	bl	1518c <id_find>
   15200:	2800      	cmp	r0, #0
   15202:	daf5      	bge.n	151f0 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   15204:	4b07      	ldr	r3, [pc, #28]	; (15224 <id_create.constprop.0+0x68>)
   15206:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1520a:	441c      	add	r4, r3
   1520c:	4669      	mov	r1, sp
   1520e:	4620      	mov	r0, r4
   15210:	f011 feef 	bl	26ff2 <bt_addr_le_copy>
		if (addr) {
   15214:	2d00      	cmp	r5, #0
   15216:	d0e1      	beq.n	151dc <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   15218:	4621      	mov	r1, r4
   1521a:	4628      	mov	r0, r5
   1521c:	e7dc      	b.n	151d8 <id_create.constprop.0+0x1c>
   1521e:	bf00      	nop
   15220:	0002b150 	.word	0x0002b150
   15224:	20000380 	.word	0x20000380
   15228:	2000044c 	.word	0x2000044c

0001522c <set_random_address>:
{
   1522c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1522e:	4913      	ldr	r1, [pc, #76]	; (1527c <set_random_address+0x50>)
   15230:	2206      	movs	r2, #6
   15232:	4605      	mov	r5, r0
   15234:	f011 fcfb 	bl	26c2e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   15238:	b1d8      	cbz	r0, 15272 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1523a:	2106      	movs	r1, #6
   1523c:	f242 0005 	movw	r0, #8197	; 0x2005
   15240:	f7ff f9e2 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   15244:	4604      	mov	r4, r0
   15246:	b1b0      	cbz	r0, 15276 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15248:	2206      	movs	r2, #6
   1524a:	4629      	mov	r1, r5
   1524c:	3008      	adds	r0, #8
   1524e:	f013 fc4c 	bl	28aea <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   15252:	2200      	movs	r2, #0
   15254:	4621      	mov	r1, r4
   15256:	f242 0005 	movw	r0, #8197	; 0x2005
   1525a:	f7ff fa1f 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   1525e:	b948      	cbnz	r0, 15274 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   15260:	2206      	movs	r2, #6
   15262:	4806      	ldr	r0, [pc, #24]	; (1527c <set_random_address+0x50>)
   15264:	4629      	mov	r1, r5
   15266:	f011 fd09 	bl	26c7c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1526a:	4b05      	ldr	r3, [pc, #20]	; (15280 <set_random_address+0x54>)
   1526c:	2201      	movs	r2, #1
   1526e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   15272:	2000      	movs	r0, #0
}
   15274:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   15276:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1527a:	e7fb      	b.n	15274 <set_random_address+0x48>
   1527c:	200003e1 	.word	0x200003e1
   15280:	20000380 	.word	0x20000380

00015284 <find_rl_conflict>:
{
   15284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15288:	4605      	mov	r5, r0
   1528a:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   1528c:	460c      	mov	r4, r1
   1528e:	b951      	cbnz	r1, 152a6 <find_rl_conflict+0x22>
   15290:	4929      	ldr	r1, [pc, #164]	; (15338 <find_rl_conflict+0xb4>)
   15292:	482a      	ldr	r0, [pc, #168]	; (1533c <find_rl_conflict+0xb8>)
   15294:	f240 325b 	movw	r2, #859	; 0x35b
   15298:	f010 fe52 	bl	25f40 <assert_print>
   1529c:	f240 315b 	movw	r1, #859	; 0x35b
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   152a0:	4825      	ldr	r0, [pc, #148]	; (15338 <find_rl_conflict+0xb4>)
   152a2:	f010 fe46 	bl	25f32 <assert_post_action>
   152a6:	6808      	ldr	r0, [r1, #0]
   152a8:	b940      	cbnz	r0, 152bc <find_rl_conflict+0x38>
   152aa:	4923      	ldr	r1, [pc, #140]	; (15338 <find_rl_conflict+0xb4>)
   152ac:	4823      	ldr	r0, [pc, #140]	; (1533c <find_rl_conflict+0xb8>)
   152ae:	f44f 7257 	mov.w	r2, #860	; 0x35c
   152b2:	f010 fe45 	bl	25f40 <assert_print>
   152b6:	f44f 7157 	mov.w	r1, #860	; 0x35c
   152ba:	e7f1      	b.n	152a0 <find_rl_conflict+0x1c>
	__ASSERT_NO_MSG(resident != NULL);
   152bc:	b945      	cbnz	r5, 152d0 <find_rl_conflict+0x4c>
   152be:	491e      	ldr	r1, [pc, #120]	; (15338 <find_rl_conflict+0xb4>)
   152c0:	481e      	ldr	r0, [pc, #120]	; (1533c <find_rl_conflict+0xb8>)
   152c2:	f240 325d 	movw	r2, #861	; 0x35d
   152c6:	f010 fe3b 	bl	25f40 <assert_print>
   152ca:	f240 315d 	movw	r1, #861	; 0x35d
   152ce:	e7e7      	b.n	152a0 <find_rl_conflict+0x1c>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   152d0:	7a03      	ldrb	r3, [r0, #8]
   152d2:	075a      	lsls	r2, r3, #29
   152d4:	d508      	bpl.n	152e8 <find_rl_conflict+0x64>
   152d6:	4918      	ldr	r1, [pc, #96]	; (15338 <find_rl_conflict+0xb4>)
   152d8:	4818      	ldr	r0, [pc, #96]	; (1533c <find_rl_conflict+0xb8>)
   152da:	f240 325f 	movw	r2, #863	; 0x35f
   152de:	f010 fe2f 	bl	25f40 <assert_print>
   152e2:	f240 315f 	movw	r1, #863	; 0x35f
   152e6:	e7db      	b.n	152a0 <find_rl_conflict+0x1c>
	if (conflict->found) {
   152e8:	684f      	ldr	r7, [r1, #4]
   152ea:	b9f7      	cbnz	r7, 1532a <find_rl_conflict+0xa6>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   152ec:	7a2b      	ldrb	r3, [r5, #8]
   152ee:	075b      	lsls	r3, r3, #29
   152f0:	d51b      	bpl.n	1532a <find_rl_conflict+0xa6>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   152f2:	1c69      	adds	r1, r5, #1
   152f4:	3001      	adds	r0, #1
   152f6:	f011 fe74 	bl	26fe2 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   152fa:	f8d4 8000 	ldr.w	r8, [r4]
   152fe:	2216      	movs	r2, #22
   15300:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   15302:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   15304:	4668      	mov	r0, sp
   15306:	f011 fcc4 	bl	26c92 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   1530a:	2210      	movs	r2, #16
   1530c:	4669      	mov	r1, sp
   1530e:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   15312:	f011 fc8c 	bl	26c2e <memcmp>
   15316:	b158      	cbz	r0, 15330 <find_rl_conflict+0xac>
   15318:	6820      	ldr	r0, [r4, #0]
   1531a:	2210      	movs	r2, #16
   1531c:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   15320:	302a      	adds	r0, #42	; 0x2a
   15322:	f011 fc84 	bl	26c2e <memcmp>
   15326:	b918      	cbnz	r0, 15330 <find_rl_conflict+0xac>
		conflict->found = resident;
   15328:	6065      	str	r5, [r4, #4]
}
   1532a:	b006      	add	sp, #24
   1532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   15330:	2e00      	cmp	r6, #0
   15332:	d1f9      	bne.n	15328 <find_rl_conflict+0xa4>
   15334:	e7f9      	b.n	1532a <find_rl_conflict+0xa6>
   15336:	bf00      	nop
   15338:	0002b907 	.word	0x0002b907
   1533c:	0002a7df 	.word	0x0002a7df

00015340 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15340:	4b0a      	ldr	r3, [pc, #40]	; (1536c <bt_id_pending_keys_update+0x2c>)
   15342:	f3bf 8f5b 	dmb	ish
   15346:	e853 2f00 	ldrex	r2, [r3]
   1534a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1534e:	e843 1000 	strex	r0, r1, [r3]
   15352:	2800      	cmp	r0, #0
   15354:	d1f7      	bne.n	15346 <bt_id_pending_keys_update+0x6>
   15356:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1535a:	0413      	lsls	r3, r2, #16
   1535c:	d504      	bpl.n	15368 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   1535e:	4904      	ldr	r1, [pc, #16]	; (15370 <bt_id_pending_keys_update+0x30>)
   15360:	2200      	movs	r2, #0
   15362:	2002      	movs	r0, #2
   15364:	f005 bfac 	b.w	1b2c0 <bt_keys_foreach_type>
}
   15368:	4770      	bx	lr
   1536a:	bf00      	nop
   1536c:	2000044c 	.word	0x2000044c
   15370:	0002716d 	.word	0x0002716d

00015374 <bt_id_find_conflict>:
{
   15374:	b507      	push	{r0, r1, r2, lr}
	struct bt_id_conflict conflict = {
   15376:	2300      	movs	r3, #0
   15378:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   1537c:	4904      	ldr	r1, [pc, #16]	; (15390 <bt_id_find_conflict+0x1c>)
   1537e:	466a      	mov	r2, sp
   15380:	2002      	movs	r0, #2
   15382:	f005 ff9d 	bl	1b2c0 <bt_keys_foreach_type>
}
   15386:	9801      	ldr	r0, [sp, #4]
   15388:	b003      	add	sp, #12
   1538a:	f85d fb04 	ldr.w	pc, [sp], #4
   1538e:	bf00      	nop
   15390:	00015285 	.word	0x00015285

00015394 <bt_id_add>:
{
   15394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	CHECKIF(keys == NULL) {
   15396:	4605      	mov	r5, r0
   15398:	b170      	cbz	r0, 153b8 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1539a:	4c4f      	ldr	r4, [pc, #316]	; (154d8 <bt_id_add+0x144>)
   1539c:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   153a0:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   153a4:	b10a      	cbz	r2, 153aa <bt_id_add+0x16>
   153a6:	429a      	cmp	r2, r3
   153a8:	d208      	bcs.n	153bc <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   153aa:	3301      	adds	r3, #1
   153ac:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   153b0:	7a2b      	ldrb	r3, [r5, #8]
   153b2:	f043 0304 	orr.w	r3, r3, #4
   153b6:	722b      	strb	r3, [r5, #8]
}
   153b8:	b003      	add	sp, #12
   153ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   153bc:	2100      	movs	r1, #0
   153be:	2206      	movs	r2, #6
   153c0:	4608      	mov	r0, r1
   153c2:	f001 fc33 	bl	16c2c <bt_conn_lookup_state_le>
	if (conn) {
   153c6:	4606      	mov	r6, r0
   153c8:	b1a8      	cbz	r0, 153f6 <bt_id_add+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   153ca:	f3bf 8f5b 	dmb	ish
   153ce:	34cc      	adds	r4, #204	; 0xcc
   153d0:	e854 3f00 	ldrex	r3, [r4]
   153d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   153d8:	e844 3200 	strex	r2, r3, [r4]
   153dc:	2a00      	cmp	r2, #0
   153de:	d1f7      	bne.n	153d0 <bt_id_add+0x3c>
   153e0:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   153e4:	7a2b      	ldrb	r3, [r5, #8]
   153e6:	f043 0301 	orr.w	r3, r3, #1
   153ea:	722b      	strb	r3, [r5, #8]
}
   153ec:	b003      	add	sp, #12
   153ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   153f2:	f001 b955 	b.w	166a0 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   153f6:	4601      	mov	r1, r0
   153f8:	4838      	ldr	r0, [pc, #224]	; (154dc <bt_id_add+0x148>)
   153fa:	f000 fb61 	bl	15ac0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   153fe:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   15402:	b143      	cbz	r3, 15416 <bt_id_add+0x82>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   15404:	4630      	mov	r0, r6
   15406:	f011 fe37 	bl	27078 <addr_res_enable>
		if (err) {
   1540a:	b120      	cbz	r0, 15416 <bt_id_add+0x82>
			BT_WARN("Failed to disable address resolution");
   1540c:	4834      	ldr	r0, [pc, #208]	; (154e0 <bt_id_add+0x14c>)
   1540e:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Failed to set privacy mode");
   15410:	f010 fda4 	bl	25f5c <z_log_minimal_printk>
		goto done;
   15414:	e01c      	b.n	15450 <bt_id_add+0xbc>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   15416:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   1541a:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1541e:	429a      	cmp	r2, r3
   15420:	d120      	bne.n	15464 <bt_id_add+0xd0>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   15422:	4830      	ldr	r0, [pc, #192]	; (154e4 <bt_id_add+0x150>)
   15424:	2157      	movs	r1, #87	; 0x57
   15426:	f010 fd99 	bl	25f5c <z_log_minimal_printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1542a:	2200      	movs	r2, #0
   1542c:	4611      	mov	r1, r2
   1542e:	f242 0029 	movw	r0, #8233	; 0x2029
   15432:	f7ff f933 	bl	1469c <bt_hci_cmd_send_sync>
		if (err) {
   15436:	b110      	cbz	r0, 1543e <bt_id_add+0xaa>
			BT_ERR("Failed to clear resolution list");
   15438:	482b      	ldr	r0, [pc, #172]	; (154e8 <bt_id_add+0x154>)
   1543a:	2145      	movs	r1, #69	; 0x45
   1543c:	e7e8      	b.n	15410 <bt_id_add+0x7c>
		bt_dev.le.rl_entries++;
   1543e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   15442:	3301      	adds	r3, #1
   15444:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   15448:	7a2b      	ldrb	r3, [r5, #8]
   1544a:	f043 0304 	orr.w	r3, r3, #4
   1544e:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   15450:	2001      	movs	r0, #1
   15452:	f011 fe11 	bl	27078 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   15456:	4825      	ldr	r0, [pc, #148]	; (154ec <bt_id_add+0x158>)
   15458:	2100      	movs	r1, #0
}
   1545a:	b003      	add	sp, #12
   1545c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   15460:	f000 bb2e 	b.w	15ac0 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   15464:	462a      	mov	r2, r5
   15466:	1c6f      	adds	r7, r5, #1
   15468:	f812 0b2a 	ldrb.w	r0, [r2], #42
   1546c:	4639      	mov	r1, r7
   1546e:	f011 fdc9 	bl	27004 <hci_id_add>
	if (err) {
   15472:	4606      	mov	r6, r0
   15474:	b110      	cbz	r0, 1547c <bt_id_add+0xe8>
		BT_ERR("Failed to add IRK to controller");
   15476:	481e      	ldr	r0, [pc, #120]	; (154f0 <bt_id_add+0x15c>)
   15478:	2145      	movs	r1, #69	; 0x45
   1547a:	e7c9      	b.n	15410 <bt_id_add+0x7c>
	bt_dev.le.rl_entries++;
   1547c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   15480:	3301      	adds	r3, #1
   15482:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   15486:	7a2b      	ldrb	r3, [r5, #8]
   15488:	f043 0304 	orr.w	r3, r3, #4
   1548c:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   1548e:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   15492:	075b      	lsls	r3, r3, #29
   15494:	d402      	bmi.n	1549c <bt_id_add+0x108>
		BT_WARN("Set privacy mode command is not supported");
   15496:	4817      	ldr	r0, [pc, #92]	; (154f4 <bt_id_add+0x160>)
   15498:	2157      	movs	r1, #87	; 0x57
   1549a:	e7b9      	b.n	15410 <bt_id_add+0x7c>
	bt_addr_le_copy(&cp.id_addr, addr);
   1549c:	4639      	mov	r1, r7
   1549e:	4668      	mov	r0, sp
   154a0:	f011 fda7 	bl	26ff2 <bt_addr_le_copy>
	cp.mode = mode;
   154a4:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   154a6:	2108      	movs	r1, #8
   154a8:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   154ac:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   154b0:	f7ff f8aa 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   154b4:	4604      	mov	r4, r0
   154b6:	b160      	cbz	r0, 154d2 <bt_id_add+0x13e>
   154b8:	2208      	movs	r2, #8
   154ba:	4669      	mov	r1, sp
   154bc:	4410      	add	r0, r2
   154be:	f013 fb14 	bl	28aea <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   154c2:	4632      	mov	r2, r6
   154c4:	4621      	mov	r1, r4
   154c6:	f242 004e 	movw	r0, #8270	; 0x204e
   154ca:	f7ff f8e7 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   154ce:	2800      	cmp	r0, #0
   154d0:	d0be      	beq.n	15450 <bt_id_add+0xbc>
		BT_ERR("Failed to set privacy mode");
   154d2:	4809      	ldr	r0, [pc, #36]	; (154f8 <bt_id_add+0x164>)
   154d4:	2145      	movs	r1, #69	; 0x45
   154d6:	e79b      	b.n	15410 <bt_id_add+0x7c>
   154d8:	20000380 	.word	0x20000380
   154dc:	000270d7 	.word	0x000270d7
   154e0:	0002b935 	.word	0x0002b935
   154e4:	0002b95f 	.word	0x0002b95f
   154e8:	0002b995 	.word	0x0002b995
   154ec:	000270a9 	.word	0x000270a9
   154f0:	0002b9ba 	.word	0x0002b9ba
   154f4:	0002b9df 	.word	0x0002b9df
   154f8:	0002ba0e 	.word	0x0002ba0e

000154fc <bt_id_del>:
{
   154fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   15500:	4605      	mov	r5, r0
   15502:	b3b8      	cbz	r0, 15574 <bt_id_del+0x78>
	if (!bt_dev.le.rl_size ||
   15504:	4c46      	ldr	r4, [pc, #280]	; (15620 <bt_id_del+0x124>)
   15506:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1550a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   1550e:	b1f2      	cbz	r2, 1554e <bt_id_del+0x52>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   15510:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   15512:	4293      	cmp	r3, r2
   15514:	dc27      	bgt.n	15566 <bt_id_del+0x6a>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   15516:	2100      	movs	r1, #0
   15518:	2206      	movs	r2, #6
   1551a:	4608      	mov	r0, r1
   1551c:	f001 fb86 	bl	16c2c <bt_conn_lookup_state_le>
	if (conn) {
   15520:	4606      	mov	r6, r0
   15522:	b348      	cbz	r0, 15578 <bt_id_del+0x7c>
   15524:	f3bf 8f5b 	dmb	ish
   15528:	34cc      	adds	r4, #204	; 0xcc
   1552a:	e854 3f00 	ldrex	r3, [r4]
   1552e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   15532:	e844 3200 	strex	r2, r3, [r4]
   15536:	2a00      	cmp	r2, #0
   15538:	d1f7      	bne.n	1552a <bt_id_del+0x2e>
   1553a:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   1553e:	7a2b      	ldrb	r3, [r5, #8]
   15540:	f043 0302 	orr.w	r3, r3, #2
   15544:	722b      	strb	r3, [r5, #8]
}
   15546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   1554a:	f001 b8a9 	b.w	166a0 <bt_conn_unref>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   1554e:	b953      	cbnz	r3, 15566 <bt_id_del+0x6a>
   15550:	4934      	ldr	r1, [pc, #208]	; (15624 <bt_id_del+0x128>)
   15552:	4835      	ldr	r0, [pc, #212]	; (15628 <bt_id_del+0x12c>)
   15554:	f240 4222 	movw	r2, #1058	; 0x422
   15558:	f010 fcf2 	bl	25f40 <assert_print>
   1555c:	4831      	ldr	r0, [pc, #196]	; (15624 <bt_id_del+0x128>)
   1555e:	f240 4122 	movw	r1, #1058	; 0x422
   15562:	f010 fce6 	bl	25f32 <assert_post_action>
			bt_dev.le.rl_entries--;
   15566:	3b01      	subs	r3, #1
   15568:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1556c:	7a2b      	ldrb	r3, [r5, #8]
   1556e:	f023 0304 	bic.w	r3, r3, #4
   15572:	722b      	strb	r3, [r5, #8]
}
   15574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   15578:	4601      	mov	r1, r0
   1557a:	482c      	ldr	r0, [pc, #176]	; (1562c <bt_id_del+0x130>)
   1557c:	f000 faa0 	bl	15ac0 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   15580:	4630      	mov	r0, r6
   15582:	f011 fd79 	bl	27078 <addr_res_enable>
	if (err) {
   15586:	4606      	mov	r6, r0
   15588:	b180      	cbz	r0, 155ac <bt_id_del+0xb0>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   1558a:	4602      	mov	r2, r0
   1558c:	2145      	movs	r1, #69	; 0x45
   1558e:	4828      	ldr	r0, [pc, #160]	; (15630 <bt_id_del+0x134>)
   15590:	f010 fce4 	bl	25f5c <z_log_minimal_printk>
	if (bt_dev.le.rl_entries) {
   15594:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   15598:	b113      	cbz	r3, 155a0 <bt_id_del+0xa4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1559a:	2001      	movs	r0, #1
   1559c:	f011 fd6c 	bl	27078 <addr_res_enable>
}
   155a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   155a4:	4823      	ldr	r0, [pc, #140]	; (15634 <bt_id_del+0x138>)
   155a6:	2100      	movs	r1, #0
   155a8:	f000 ba8a 	b.w	15ac0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   155ac:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   155b0:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   155b4:	429a      	cmp	r2, r3
   155b6:	d20c      	bcs.n	155d2 <bt_id_del+0xd6>
		bt_dev.le.rl_entries--;
   155b8:	3b01      	subs	r3, #1
   155ba:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   155be:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   155c0:	491d      	ldr	r1, [pc, #116]	; (15638 <bt_id_del+0x13c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   155c2:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   155c6:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   155c8:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   155ca:	2002      	movs	r0, #2
   155cc:	f005 fe78 	bl	1b2c0 <bt_keys_foreach_type>
		goto done;
   155d0:	e7e0      	b.n	15594 <bt_id_del+0x98>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   155d2:	2107      	movs	r1, #7
   155d4:	f242 0028 	movw	r0, #8232	; 0x2028
   155d8:	f7ff f816 	bl	14608 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   155dc:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   155e0:	4607      	mov	r7, r0
   155e2:	b920      	cbnz	r0, 155ee <bt_id_del+0xf2>
		BT_ERR("Failed to remove IRK from controller");
   155e4:	4815      	ldr	r0, [pc, #84]	; (1563c <bt_id_del+0x140>)
   155e6:	2145      	movs	r1, #69	; 0x45
   155e8:	f010 fcb8 	bl	25f5c <z_log_minimal_printk>
		goto done;
   155ec:	e7d2      	b.n	15594 <bt_id_del+0x98>
	return net_buf_simple_add(&buf->b, len);
   155ee:	2107      	movs	r1, #7
   155f0:	3008      	adds	r0, #8
   155f2:	f006 fb8f 	bl	1bd14 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   155f6:	4641      	mov	r1, r8
   155f8:	f011 fcfb 	bl	26ff2 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   155fc:	4632      	mov	r2, r6
   155fe:	4639      	mov	r1, r7
   15600:	f242 0028 	movw	r0, #8232	; 0x2028
   15604:	f7ff f84a 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   15608:	2800      	cmp	r0, #0
   1560a:	d1eb      	bne.n	155e4 <bt_id_del+0xe8>
	bt_dev.le.rl_entries--;
   1560c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   15610:	3b01      	subs	r3, #1
   15612:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   15616:	7a2b      	ldrb	r3, [r5, #8]
   15618:	f023 0304 	bic.w	r3, r3, #4
   1561c:	722b      	strb	r3, [r5, #8]
   1561e:	e7b9      	b.n	15594 <bt_id_del+0x98>
   15620:	20000380 	.word	0x20000380
   15624:	0002b907 	.word	0x0002b907
   15628:	0002a7df 	.word	0x0002a7df
   1562c:	000270d7 	.word	0x000270d7
   15630:	0002ba2e 	.word	0x0002ba2e
   15634:	000270a9 	.word	0x000270a9
   15638:	00027063 	.word	0x00027063
   1563c:	0002ba60 	.word	0x0002ba60

00015640 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   15640:	b570      	push	{r4, r5, r6, lr}
   15642:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   15644:	4604      	mov	r4, r0
   15646:	b918      	cbnz	r0, 15650 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   15648:	b1e5      	cbz	r5, 15684 <bt_id_create+0x44>
			return -EINVAL;
   1564a:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   1564e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   15650:	491d      	ldr	r1, [pc, #116]	; (156c8 <bt_id_create+0x88>)
   15652:	f011 fcc6 	bl	26fe2 <bt_addr_le_eq>
   15656:	2800      	cmp	r0, #0
   15658:	d1f6      	bne.n	15648 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1565a:	7823      	ldrb	r3, [r4, #0]
   1565c:	2b01      	cmp	r3, #1
   1565e:	d104      	bne.n	1566a <bt_id_create+0x2a>
   15660:	79a3      	ldrb	r3, [r4, #6]
   15662:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15666:	2bc0      	cmp	r3, #192	; 0xc0
   15668:	d004      	beq.n	15674 <bt_id_create+0x34>
			BT_ERR("Only static random identity address supported");
   1566a:	4818      	ldr	r0, [pc, #96]	; (156cc <bt_id_create+0x8c>)
   1566c:	2145      	movs	r1, #69	; 0x45
   1566e:	f010 fc75 	bl	25f5c <z_log_minimal_printk>
			return -EINVAL;
   15672:	e7ea      	b.n	1564a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   15674:	4620      	mov	r0, r4
   15676:	f7ff fd89 	bl	1518c <id_find>
   1567a:	2800      	cmp	r0, #0
   1567c:	dbe4      	blt.n	15648 <bt_id_create+0x8>
			return -EALREADY;
   1567e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15682:	e7e4      	b.n	1564e <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   15684:	4d12      	ldr	r5, [pc, #72]	; (156d0 <bt_id_create+0x90>)
   15686:	79eb      	ldrb	r3, [r5, #7]
   15688:	2b01      	cmp	r3, #1
   1568a:	d01a      	beq.n	156c2 <bt_id_create+0x82>
   1568c:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   15690:	f011 fcb2 	bl	26ff8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15694:	07c3      	lsls	r3, r0, #31
   15696:	d50b      	bpl.n	156b0 <bt_id_create+0x70>
	new_id = bt_dev.id_count;
   15698:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   1569a:	4621      	mov	r1, r4
   1569c:	4630      	mov	r0, r6
   1569e:	f7ff fd8d 	bl	151bc <id_create.constprop.0>
	if (err) {
   156a2:	2800      	cmp	r0, #0
   156a4:	d1d3      	bne.n	1564e <bt_id_create+0xe>
		bt_dev.id_count++;
   156a6:	79eb      	ldrb	r3, [r5, #7]
   156a8:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   156aa:	4630      	mov	r0, r6
		bt_dev.id_count++;
   156ac:	71eb      	strb	r3, [r5, #7]
	return new_id;
   156ae:	e7ce      	b.n	1564e <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   156b0:	2c00      	cmp	r4, #0
   156b2:	d0ca      	beq.n	1564a <bt_id_create+0xa>
   156b4:	4904      	ldr	r1, [pc, #16]	; (156c8 <bt_id_create+0x88>)
   156b6:	4620      	mov	r0, r4
   156b8:	f011 fc93 	bl	26fe2 <bt_addr_le_eq>
   156bc:	2800      	cmp	r0, #0
   156be:	d0eb      	beq.n	15698 <bt_id_create+0x58>
   156c0:	e7c3      	b.n	1564a <bt_id_create+0xa>
		return -ENOMEM;
   156c2:	f06f 000b 	mvn.w	r0, #11
   156c6:	e7c2      	b.n	1564e <bt_id_create+0xe>
   156c8:	0002b150 	.word	0x0002b150
   156cc:	0002ba8a 	.word	0x0002ba8a
   156d0:	20000380 	.word	0x20000380

000156d4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   156d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   156d6:	4604      	mov	r4, r0
   156d8:	b930      	cbnz	r0, 156e8 <bt_id_read_public_addr+0x14>
		BT_WARN("Invalid input parameters");
   156da:	4818      	ldr	r0, [pc, #96]	; (1573c <bt_id_read_public_addr+0x68>)
   156dc:	2157      	movs	r1, #87	; 0x57
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read public address");
   156de:	f010 fc3d 	bl	25f5c <z_log_minimal_printk>
		return 0U;
   156e2:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   156e4:	b002      	add	sp, #8
   156e6:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   156e8:	aa01      	add	r2, sp, #4
   156ea:	2100      	movs	r1, #0
   156ec:	f241 0009 	movw	r0, #4105	; 0x1009
   156f0:	f7fe ffd4 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   156f4:	4606      	mov	r6, r0
   156f6:	b110      	cbz	r0, 156fe <bt_id_read_public_addr+0x2a>
		BT_WARN("Failed to read public address");
   156f8:	4811      	ldr	r0, [pc, #68]	; (15740 <bt_id_read_public_addr+0x6c>)
   156fa:	2157      	movs	r1, #87	; 0x57
   156fc:	e7ef      	b.n	156de <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   156fe:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   15700:	4910      	ldr	r1, [pc, #64]	; (15744 <bt_id_read_public_addr+0x70>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15702:	689d      	ldr	r5, [r3, #8]
   15704:	3501      	adds	r5, #1
   15706:	2206      	movs	r2, #6
   15708:	4628      	mov	r0, r5
   1570a:	f011 fa90 	bl	26c2e <memcmp>
   1570e:	b918      	cbnz	r0, 15718 <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
   15710:	9801      	ldr	r0, [sp, #4]
   15712:	f006 f9f9 	bl	1bb08 <net_buf_unref>
		return 0U;
   15716:	e7e4      	b.n	156e2 <bt_id_read_public_addr+0xe>
   15718:	490b      	ldr	r1, [pc, #44]	; (15748 <bt_id_read_public_addr+0x74>)
   1571a:	2206      	movs	r2, #6
   1571c:	4628      	mov	r0, r5
   1571e:	f011 fa86 	bl	26c2e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15722:	2800      	cmp	r0, #0
   15724:	d0f4      	beq.n	15710 <bt_id_read_public_addr+0x3c>
	memcpy(dst, src, sizeof(*dst));
   15726:	2206      	movs	r2, #6
   15728:	4629      	mov	r1, r5
   1572a:	1c60      	adds	r0, r4, #1
   1572c:	f011 faa6 	bl	26c7c <memcpy>
	net_buf_unref(rsp);
   15730:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   15732:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   15734:	f006 f9e8 	bl	1bb08 <net_buf_unref>
	return 1U;
   15738:	2001      	movs	r0, #1
   1573a:	e7d3      	b.n	156e4 <bt_id_read_public_addr+0x10>
   1573c:	0002babd 	.word	0x0002babd
   15740:	0002badb 	.word	0x0002badb
   15744:	0002b15d 	.word	0x0002b15d
   15748:	0002b157 	.word	0x0002b157

0001574c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1574c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1574e:	4668      	mov	r0, sp
   15750:	f7ff ffc0 	bl	156d4 <bt_id_read_public_addr>
   15754:	4b04      	ldr	r3, [pc, #16]	; (15768 <bt_setup_public_id_addr+0x1c>)
   15756:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   15758:	b118      	cbz	r0, 15762 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1575a:	4669      	mov	r1, sp
   1575c:	2000      	movs	r0, #0
   1575e:	f7ff fd2d 	bl	151bc <id_create.constprop.0>
}
   15762:	b003      	add	sp, #12
   15764:	f85d fb04 	ldr.w	pc, [sp], #4
   15768:	20000380 	.word	0x20000380

0001576c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1576c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   15770:	4b1c      	ldr	r3, [pc, #112]	; (157e4 <bt_read_static_addr+0x78>)
   15772:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   15776:	07db      	lsls	r3, r3, #31
{
   15778:	4607      	mov	r7, r0
   1577a:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1577c:	d408      	bmi.n	15790 <bt_read_static_addr+0x24>
		BT_WARN("Read Static Addresses command not available");
   1577e:	481a      	ldr	r0, [pc, #104]	; (157e8 <bt_read_static_addr+0x7c>)
   15780:	2157      	movs	r1, #87	; 0x57
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read static addresses");
   15782:	f010 fbeb 	bl	25f5c <z_log_minimal_printk>
		return 0;
   15786:	2500      	movs	r5, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   15788:	4628      	mov	r0, r5
   1578a:	b002      	add	sp, #8
   1578c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   15790:	aa01      	add	r2, sp, #4
   15792:	2100      	movs	r1, #0
   15794:	f64f 4009 	movw	r0, #64521	; 0xfc09
   15798:	f7fe ff80 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   1579c:	4604      	mov	r4, r0
   1579e:	b110      	cbz	r0, 157a6 <bt_read_static_addr+0x3a>
		BT_WARN("Failed to read static addresses");
   157a0:	4812      	ldr	r0, [pc, #72]	; (157ec <bt_read_static_addr+0x80>)
   157a2:	2157      	movs	r1, #87	; 0x57
   157a4:	e7ed      	b.n	15782 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   157a6:	9b01      	ldr	r3, [sp, #4]
   157a8:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   157aa:	7875      	ldrb	r5, [r6, #1]
   157ac:	4545      	cmp	r5, r8
   157ae:	bf28      	it	cs
   157b0:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   157b2:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   157b4:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   157b8:	42a5      	cmp	r5, r4
   157ba:	dc09      	bgt.n	157d0 <bt_read_static_addr+0x64>
	net_buf_unref(rsp);
   157bc:	9801      	ldr	r0, [sp, #4]
   157be:	f006 f9a3 	bl	1bb08 <net_buf_unref>
	if (!cnt) {
   157c2:	2d00      	cmp	r5, #0
   157c4:	d1e0      	bne.n	15788 <bt_read_static_addr+0x1c>
		BT_WARN("No static addresses stored in controller");
   157c6:	480a      	ldr	r0, [pc, #40]	; (157f0 <bt_read_static_addr+0x84>)
   157c8:	2157      	movs	r1, #87	; 0x57
   157ca:	f010 fbc7 	bl	25f5c <z_log_minimal_printk>
   157ce:	e7db      	b.n	15788 <bt_read_static_addr+0x1c>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   157d0:	4631      	mov	r1, r6
   157d2:	fb08 7004 	mla	r0, r8, r4, r7
   157d6:	2216      	movs	r2, #22
   157d8:	f011 fa50 	bl	26c7c <memcpy>
	for (i = 0; i < cnt; i++) {
   157dc:	3401      	adds	r4, #1
   157de:	3616      	adds	r6, #22
   157e0:	e7ea      	b.n	157b8 <bt_read_static_addr+0x4c>
   157e2:	bf00      	nop
   157e4:	20000380 	.word	0x20000380
   157e8:	0002bafe 	.word	0x0002bafe
   157ec:	0002bb2f 	.word	0x0002bb2f
   157f0:	0002bb54 	.word	0x0002bb54

000157f4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   157f4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   157f6:	4e15      	ldr	r6, [pc, #84]	; (1584c <bt_setup_random_id_addr+0x58>)
   157f8:	79f4      	ldrb	r4, [r6, #7]
{
   157fa:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   157fc:	b92c      	cbnz	r4, 1580a <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   157fe:	2101      	movs	r1, #1
   15800:	a802      	add	r0, sp, #8
   15802:	f7ff ffb3 	bl	1576c <bt_read_static_addr>
   15806:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   15808:	b9c8      	cbnz	r0, 1583e <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1580a:	2100      	movs	r1, #0
   1580c:	4608      	mov	r0, r1
}
   1580e:	b009      	add	sp, #36	; 0x24
   15810:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   15814:	f7ff bf14 	b.w	15640 <bt_id_create>
   15818:	ab02      	add	r3, sp, #8
   1581a:	fb07 3105 	mla	r1, r7, r5, r3
   1581e:	2206      	movs	r2, #6
   15820:	f10d 0001 	add.w	r0, sp, #1
   15824:	f011 fa2a 	bl	26c7c <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   15828:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1582a:	4669      	mov	r1, sp
   1582c:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   1582e:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   15832:	f7ff fcc3 	bl	151bc <id_create.constprop.0>
				if (err) {
   15836:	3401      	adds	r4, #1
   15838:	b110      	cbz	r0, 15840 <bt_setup_random_id_addr+0x4c>
}
   1583a:	b009      	add	sp, #36	; 0x24
   1583c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1583e:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15840:	79f3      	ldrb	r3, [r6, #7]
   15842:	b2e5      	uxtb	r5, r4
   15844:	42ab      	cmp	r3, r5
   15846:	d8e7      	bhi.n	15818 <bt_setup_random_id_addr+0x24>
			return 0;
   15848:	2000      	movs	r0, #0
   1584a:	e7f6      	b.n	1583a <bt_setup_random_id_addr+0x46>
   1584c:	20000380 	.word	0x20000380

00015850 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   15850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15854:	4690      	mov	r8, r2
   15856:	460e      	mov	r6, r1
   15858:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1585a:	4602      	mov	r2, r0
   1585c:	2800      	cmp	r0, #0
   1585e:	d04b      	beq.n	158f8 <bt_id_set_adv_own_addr+0xa8>
   15860:	2b00      	cmp	r3, #0
   15862:	d049      	beq.n	158f8 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   15864:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   15866:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   15868:	d531      	bpl.n	158ce <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1586a:	4f25      	ldr	r7, [pc, #148]	; (15900 <bt_id_set_adv_own_addr+0xb0>)
   1586c:	f1b8 0f00 	cmp.w	r8, #0
   15870:	d013      	beq.n	1589a <bt_id_set_adv_own_addr+0x4a>
   15872:	0688      	lsls	r0, r1, #26
   15874:	d40a      	bmi.n	1588c <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   15876:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1587a:	5cfb      	ldrb	r3, [r7, r3]
   1587c:	2b01      	cmp	r3, #1
   1587e:	d015      	beq.n	158ac <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   15880:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   15882:	06b2      	lsls	r2, r6, #26
   15884:	d50f      	bpl.n	158a6 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   15886:	f043 0302 	orr.w	r3, r3, #2
   1588a:	e00b      	b.n	158a4 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1588c:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   15890:	0659      	lsls	r1, r3, #25
   15892:	d4f0      	bmi.n	15876 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   15894:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15898:	e006      	b.n	158a8 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1589a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1589e:	5cfb      	ldrb	r3, [r7, r3]
   158a0:	2b01      	cmp	r3, #1
   158a2:	d003      	beq.n	158ac <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   158a4:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   158a6:	2000      	movs	r0, #0
}
   158a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   158ac:	2107      	movs	r1, #7
   158ae:	fb01 7104 	mla	r1, r1, r4, r7
   158b2:	3101      	adds	r1, #1
   158b4:	4610      	mov	r0, r2
   158b6:	f011 fc36 	bl	27126 <bt_id_set_adv_random_addr>
				if (err) {
   158ba:	2800      	cmp	r0, #0
   158bc:	d1f4      	bne.n	158a8 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   158be:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   158c2:	5d3b      	ldrb	r3, [r7, r4]
   158c4:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   158c6:	f1b8 0f00 	cmp.w	r8, #0
   158ca:	d0ec      	beq.n	158a6 <bt_id_set_adv_own_addr+0x56>
   158cc:	e7d9      	b.n	15882 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   158ce:	074b      	lsls	r3, r1, #29
   158d0:	d50e      	bpl.n	158f0 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   158d2:	4e0b      	ldr	r6, [pc, #44]	; (15900 <bt_id_set_adv_own_addr+0xb0>)
   158d4:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   158d8:	5df3      	ldrb	r3, [r6, r7]
   158da:	2b01      	cmp	r3, #1
   158dc:	d1e2      	bne.n	158a4 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   158de:	2107      	movs	r1, #7
   158e0:	fb11 3104 	smlabb	r1, r1, r4, r3
   158e4:	4431      	add	r1, r6
   158e6:	f011 fc1e 	bl	27126 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   158ea:	5df3      	ldrb	r3, [r6, r7]
   158ec:	702b      	strb	r3, [r5, #0]
		if (err) {
   158ee:	e7db      	b.n	158a8 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   158f0:	f011 fc21 	bl	27136 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   158f4:	2301      	movs	r3, #1
   158f6:	e7f9      	b.n	158ec <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   158f8:	f06f 0015 	mvn.w	r0, #21
   158fc:	e7d4      	b.n	158a8 <bt_id_set_adv_own_addr+0x58>
   158fe:	bf00      	nop
   15900:	20000380 	.word	0x20000380

00015904 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   15904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15908:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1590a:	2120      	movs	r1, #32
{
   1590c:	9000      	str	r0, [sp, #0]
   1590e:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   15910:	f7fe fe7a 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   15914:	4605      	mov	r5, r0
   15916:	2800      	cmp	r0, #0
   15918:	d054      	beq.n	159c4 <hci_set_ad+0xc0>
   1591a:	2120      	movs	r1, #32
   1591c:	3008      	adds	r0, #8
   1591e:	f006 f9f9 	bl	1bd14 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   15922:	2220      	movs	r2, #32
   15924:	2100      	movs	r1, #0
   15926:	4681      	mov	r9, r0
   15928:	f011 f9b3 	bl	26c92 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1592c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   15930:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   15934:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   15936:	f8d4 8000 	ldr.w	r8, [r4]
   1593a:	2300      	movs	r3, #0
   1593c:	6862      	ldr	r2, [r4, #4]
   1593e:	4293      	cmp	r3, r2
   15940:	d30c      	bcc.n	1595c <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   15942:	3408      	adds	r4, #8
   15944:	45a2      	cmp	sl, r4
   15946:	d1f6      	bne.n	15936 <hci_set_ad+0x32>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   15948:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   1594a:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1594e:	2200      	movs	r2, #0
   15950:	4629      	mov	r1, r5
}
   15952:	b003      	add	sp, #12
   15954:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   15958:	f7fe bea0 	b.w	1469c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1595c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   15960:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   15964:	1cb0      	adds	r0, r6, #2
   15966:	1811      	adds	r1, r2, r0
   15968:	291f      	cmp	r1, #31
   1596a:	d914      	bls.n	15996 <hci_set_ad+0x92>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1596c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   15970:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   15974:	d101      	bne.n	1597a <hci_set_ad+0x76>
   15976:	2a00      	cmp	r2, #0
   15978:	dc0b      	bgt.n	15992 <hci_set_ad+0x8e>
					BT_ERR("Too big advertising data");
   1597a:	4814      	ldr	r0, [pc, #80]	; (159cc <hci_set_ad+0xc8>)
   1597c:	2145      	movs	r1, #69	; 0x45
   1597e:	f010 faed 	bl	25f5c <z_log_minimal_printk>
		net_buf_unref(buf);
   15982:	4628      	mov	r0, r5
   15984:	f006 f8c0 	bl	1bb08 <net_buf_unref>
					return -EINVAL;
   15988:	f06f 0015 	mvn.w	r0, #21
}
   1598c:	b003      	add	sp, #12
   1598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   15992:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   15996:	b2d7      	uxtb	r7, r2
   15998:	1c79      	adds	r1, r7, #1
   1599a:	f80b 1006 	strb.w	r1, [fp, r6]
   1599e:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   159a0:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   159a2:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   159a6:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   159aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
   159ae:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   159b0:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   159b2:	f011 f963 	bl	26c7c <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   159b6:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   159b8:	4437      	add	r7, r6
   159ba:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   159bc:	3301      	adds	r3, #1
   159be:	f108 0808 	add.w	r8, r8, #8
   159c2:	e7bb      	b.n	1593c <hci_set_ad+0x38>
		return -ENOBUFS;
   159c4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   159c8:	e7e0      	b.n	1598c <hci_set_ad+0x88>
   159ca:	bf00      	nop
   159cc:	0002bb88 	.word	0x0002bb88

000159d0 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   159d0:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   159d2:	4605      	mov	r5, r0
   159d4:	4b16      	ldr	r3, [pc, #88]	; (15a30 <le_adv_start_add_conn+0x60>)
   159d6:	f815 2b09 	ldrb.w	r2, [r5], #9
   159da:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   159de:	4604      	mov	r4, r0
   159e0:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   159e2:	2207      	movs	r2, #7
   159e4:	4913      	ldr	r1, [pc, #76]	; (15a34 <le_adv_start_add_conn+0x64>)
   159e6:	4628      	mov	r0, r5
   159e8:	f011 f921 	bl	26c2e <memcmp>
   159ec:	4603      	mov	r3, r0
   159ee:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   159f0:	b96b      	cbnz	r3, 15a0e <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   159f2:	4911      	ldr	r1, [pc, #68]	; (15a38 <le_adv_start_add_conn+0x68>)
   159f4:	f001 f8c8 	bl	16b88 <bt_conn_add_le>
		if (!conn) {
   159f8:	4604      	mov	r4, r0
   159fa:	b910      	cbnz	r0, 15a02 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   159fc:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   15a00:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   15a02:	2104      	movs	r1, #4
   15a04:	f000 fe84 	bl	16710 <bt_conn_set_state>
		*out_conn = conn;
   15a08:	6034      	str	r4, [r6, #0]
		return 0;
   15a0a:	2000      	movs	r0, #0
   15a0c:	e7f8      	b.n	15a00 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   15a0e:	4629      	mov	r1, r5
   15a10:	f001 f8f0 	bl	16bf4 <bt_conn_exists_le>
   15a14:	b940      	cbnz	r0, 15a28 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   15a16:	7820      	ldrb	r0, [r4, #0]
   15a18:	4629      	mov	r1, r5
   15a1a:	f001 f8b5 	bl	16b88 <bt_conn_add_le>
	if (!conn) {
   15a1e:	4604      	mov	r4, r0
   15a20:	2800      	cmp	r0, #0
   15a22:	d0eb      	beq.n	159fc <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   15a24:	2105      	movs	r1, #5
   15a26:	e7ed      	b.n	15a04 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   15a28:	f06f 0015 	mvn.w	r0, #21
   15a2c:	e7e8      	b.n	15a00 <le_adv_start_add_conn+0x30>
   15a2e:	bf00      	nop
   15a30:	20000380 	.word	0x20000380
   15a34:	0002b150 	.word	0x0002b150
   15a38:	0002b149 	.word	0x0002b149

00015a3c <valid_adv_param>:
{
   15a3c:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   15a3e:	6843      	ldr	r3, [r0, #4]
{
   15a40:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   15a42:	0558      	lsls	r0, r3, #21
   15a44:	d501      	bpl.n	15a4a <valid_adv_param+0xe>
		return false;
   15a46:	2000      	movs	r0, #0
}
   15a48:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15a4a:	6922      	ldr	r2, [r4, #16]
   15a4c:	b10a      	cbz	r2, 15a52 <valid_adv_param+0x16>
   15a4e:	07d9      	lsls	r1, r3, #31
   15a50:	d5f9      	bpl.n	15a46 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   15a52:	4d19      	ldr	r5, [pc, #100]	; (15ab8 <valid_adv_param+0x7c>)
   15a54:	7820      	ldrb	r0, [r4, #0]
   15a56:	79eb      	ldrb	r3, [r5, #7]
   15a58:	4283      	cmp	r3, r0
   15a5a:	d9f4      	bls.n	15a46 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   15a5c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15a60:	4916      	ldr	r1, [pc, #88]	; (15abc <valid_adv_param+0x80>)
   15a62:	2207      	movs	r2, #7
   15a64:	4428      	add	r0, r5
   15a66:	f011 f8e2 	bl	26c2e <memcmp>
	if (param->id >= bt_dev.id_count ||
   15a6a:	2800      	cmp	r0, #0
   15a6c:	d0eb      	beq.n	15a46 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15a6e:	6860      	ldr	r0, [r4, #4]
   15a70:	07c2      	lsls	r2, r0, #31
   15a72:	d406      	bmi.n	15a82 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   15a74:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   15a78:	2b08      	cmp	r3, #8
   15a7a:	d802      	bhi.n	15a82 <valid_adv_param+0x46>
   15a7c:	68a3      	ldr	r3, [r4, #8]
   15a7e:	2b9f      	cmp	r3, #159	; 0x9f
   15a80:	d9e1      	bls.n	15a46 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   15a82:	f010 0f30 	tst.w	r0, #48	; 0x30
   15a86:	d002      	beq.n	15a8e <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   15a88:	6923      	ldr	r3, [r4, #16]
   15a8a:	2b00      	cmp	r3, #0
   15a8c:	d0db      	beq.n	15a46 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   15a8e:	06c3      	lsls	r3, r0, #27
   15a90:	d401      	bmi.n	15a96 <valid_adv_param+0x5a>
   15a92:	6923      	ldr	r3, [r4, #16]
   15a94:	b943      	cbnz	r3, 15aa8 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   15a96:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   15a9a:	429a      	cmp	r2, r3
   15a9c:	d8d3      	bhi.n	15a46 <valid_adv_param+0xa>
   15a9e:	2a1f      	cmp	r2, #31
   15aa0:	d9d1      	bls.n	15a46 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   15aa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   15aa6:	d8ce      	bhi.n	15a46 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   15aa8:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   15aac:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   15ab0:	bf18      	it	ne
   15ab2:	2001      	movne	r0, #1
   15ab4:	e7c8      	b.n	15a48 <valid_adv_param+0xc>
   15ab6:	bf00      	nop
   15ab8:	20000380 	.word	0x20000380
   15abc:	0002b150 	.word	0x0002b150

00015ac0 <bt_le_ext_adv_foreach>:
{
   15ac0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   15ac2:	4801      	ldr	r0, [pc, #4]	; (15ac8 <bt_le_ext_adv_foreach+0x8>)
   15ac4:	4718      	bx	r3
   15ac6:	bf00      	nop
   15ac8:	20000398 	.word	0x20000398

00015acc <bt_le_adv_lookup_legacy>:
}
   15acc:	4800      	ldr	r0, [pc, #0]	; (15ad0 <bt_le_adv_lookup_legacy+0x4>)
   15ace:	4770      	bx	lr
   15ad0:	20000398 	.word	0x20000398

00015ad4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   15ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   15ad8:	f8d1 9010 	ldr.w	r9, [r1, #16]
{
   15adc:	b08d      	sub	sp, #52	; 0x34
   15ade:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   15ae0:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   15ae2:	ebb9 0603 	subs.w	r6, r9, r3
{
   15ae6:	4605      	mov	r5, r0
   15ae8:	4890      	ldr	r0, [pc, #576]	; (15d2c <bt_le_adv_start_legacy+0x258>)
   15aea:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   15aec:	bf18      	it	ne
   15aee:	2601      	movne	r6, #1
	struct bt_conn *conn = NULL;
   15af0:	9307      	str	r3, [sp, #28]
   15af2:	f011 fb5c 	bl	271ae <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15af6:	0742      	lsls	r2, r0, #29
{
   15af8:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15afa:	f140 810b 	bpl.w	15d14 <bt_le_adv_start_legacy+0x240>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   15afe:	4608      	mov	r0, r1
   15b00:	f7ff ff9c 	bl	15a3c <valid_adv_param>
   15b04:	b928      	cbnz	r0, 15b12 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   15b06:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   15b0a:	4658      	mov	r0, fp
   15b0c:	b00d      	add	sp, #52	; 0x34
   15b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   15b12:	4620      	mov	r0, r4
   15b14:	f011 fb26 	bl	27164 <bt_id_adv_random_addr_check>
   15b18:	4680      	mov	r8, r0
   15b1a:	2800      	cmp	r0, #0
   15b1c:	d0f3      	beq.n	15b06 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15b1e:	f105 0710 	add.w	r7, r5, #16
   15b22:	4638      	mov	r0, r7
   15b24:	f011 fb43 	bl	271ae <atomic_get>
   15b28:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15b2a:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
   15b2e:	f100 80f4 	bmi.w	15d1a <bt_le_adv_start_legacy+0x246>
	(void)memset(&set_param, 0, sizeof(set_param));
   15b32:	220f      	movs	r2, #15
   15b34:	4659      	mov	r1, fp
   15b36:	a808      	add	r0, sp, #32
   15b38:	f011 f8ab 	bl	26c92 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   15b3c:	68a3      	ldr	r3, [r4, #8]
   15b3e:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   15b42:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   15b44:	68e3      	ldr	r3, [r4, #12]
   15b46:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   15b4a:	f011 fb21 	bl	27190 <get_adv_channel_map>
	if (adv->id != param->id) {
   15b4e:	782a      	ldrb	r2, [r5, #0]
   15b50:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   15b52:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   15b56:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   15b58:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   15b5c:	d004      	beq.n	15b68 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15b5e:	4873      	ldr	r0, [pc, #460]	; (15d2c <bt_le_adv_start_legacy+0x258>)
   15b60:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   15b64:	f011 fb29 	bl	271ba <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   15b68:	4a71      	ldr	r2, [pc, #452]	; (15d30 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   15b6a:	7823      	ldrb	r3, [r4, #0]
   15b6c:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   15b6e:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   15b72:	6861      	ldr	r1, [r4, #4]
   15b74:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   15b78:	4632      	mov	r2, r6
   15b7a:	4628      	mov	r0, r5
   15b7c:	f7ff fe68 	bl	15850 <bt_id_set_adv_own_addr>
	if (err) {
   15b80:	4683      	mov	fp, r0
   15b82:	2800      	cmp	r0, #0
   15b84:	d1c1      	bne.n	15b0a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   15b86:	f105 0009 	add.w	r0, r5, #9
	memcpy(dst, src, sizeof(*dst));
   15b8a:	2207      	movs	r2, #7
	if (dir_adv) {
   15b8c:	f1b9 0f00 	cmp.w	r9, #0
   15b90:	d013      	beq.n	15bba <bt_le_adv_start_legacy+0xe6>
   15b92:	6921      	ldr	r1, [r4, #16]
   15b94:	f011 f872 	bl	26c7c <memcpy>
	name_type = get_adv_name_type_param(param);
   15b98:	4620      	mov	r0, r4
   15b9a:	f011 fbab 	bl	272f4 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   15b9e:	6862      	ldr	r2, [r4, #4]
	name_type = get_adv_name_type_param(param);
   15ba0:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   15ba2:	07d0      	lsls	r0, r2, #31
   15ba4:	d416      	bmi.n	15bd4 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   15ba6:	0592      	lsls	r2, r2, #22
   15ba8:	d403      	bmi.n	15bb2 <bt_le_adv_start_legacy+0xde>
   15baa:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15bac:	b90b      	cbnz	r3, 15bb2 <bt_le_adv_start_legacy+0xde>
   15bae:	2e02      	cmp	r6, #2
   15bb0:	d152      	bne.n	15c58 <bt_le_adv_start_legacy+0x184>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   15bb2:	2302      	movs	r3, #2
   15bb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   15bb8:	e01a      	b.n	15bf0 <bt_le_adv_start_legacy+0x11c>
   15bba:	495e      	ldr	r1, [pc, #376]	; (15d34 <bt_le_adv_start_legacy+0x260>)
   15bbc:	f011 f85e 	bl	26c7c <memcpy>
	name_type = get_adv_name_type_param(param);
   15bc0:	4620      	mov	r0, r4
   15bc2:	f011 fb97 	bl	272f4 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   15bc6:	6862      	ldr	r2, [r4, #4]
   15bc8:	07d1      	lsls	r1, r2, #31
	name_type = get_adv_name_type_param(param);
   15bca:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   15bcc:	d5eb      	bpl.n	15ba6 <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   15bce:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
   15bd2:	e00d      	b.n	15bf0 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   15bd4:	f012 0f10 	tst.w	r2, #16
   15bd8:	bf0c      	ite	eq
   15bda:	2201      	moveq	r2, #1
   15bdc:	2204      	movne	r2, #4
   15bde:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   15be2:	6921      	ldr	r1, [r4, #16]
   15be4:	2207      	movs	r2, #7
   15be6:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   15bea:	f011 f847 	bl	26c7c <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   15bee:	46d8      	mov	r8, fp
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   15bf0:	210f      	movs	r1, #15
   15bf2:	f242 0006 	movw	r0, #8198	; 0x2006
   15bf6:	f7fe fd07 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   15bfa:	4683      	mov	fp, r0
   15bfc:	2800      	cmp	r0, #0
   15bfe:	f000 808f 	beq.w	15d20 <bt_le_adv_start_legacy+0x24c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15c02:	220f      	movs	r2, #15
   15c04:	a908      	add	r1, sp, #32
   15c06:	3008      	adds	r0, #8
   15c08:	f012 ff6f 	bl	28aea <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   15c0c:	2200      	movs	r2, #0
   15c0e:	4659      	mov	r1, fp
   15c10:	f242 0006 	movw	r0, #8198	; 0x2006
   15c14:	f7fe fd42 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   15c18:	2800      	cmp	r0, #0
   15c1a:	f040 8084 	bne.w	15d26 <bt_le_adv_start_legacy+0x252>
	if (!dir_adv) {
   15c1e:	f1b9 0f00 	cmp.w	r9, #0
   15c22:	d01f      	beq.n	15c64 <bt_le_adv_start_legacy+0x190>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15c24:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15c26:	07db      	lsls	r3, r3, #31
   15c28:	d42a      	bmi.n	15c80 <bt_le_adv_start_legacy+0x1ac>
	return bt_le_adv_set_enable_legacy(adv, enable);
   15c2a:	4628      	mov	r0, r5
   15c2c:	2101      	movs	r1, #1
   15c2e:	f011 fb71 	bl	27314 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15c32:	9d07      	ldr	r5, [sp, #28]
	if (err) {
   15c34:	4683      	mov	fp, r0
   15c36:	2800      	cmp	r0, #0
   15c38:	d064      	beq.n	15d04 <bt_le_adv_start_legacy+0x230>
		BT_ERR("Failed to start advertiser");
   15c3a:	483f      	ldr	r0, [pc, #252]	; (15d38 <bt_le_adv_start_legacy+0x264>)
   15c3c:	2145      	movs	r1, #69	; 0x45
   15c3e:	f010 f98d 	bl	25f5c <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15c42:	2d00      	cmp	r5, #0
   15c44:	f43f af61 	beq.w	15b0a <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15c48:	4628      	mov	r0, r5
   15c4a:	2100      	movs	r1, #0
   15c4c:	f000 fd60 	bl	16710 <bt_conn_set_state>
			bt_conn_unref(conn);
   15c50:	4628      	mov	r0, r5
   15c52:	f000 fd25 	bl	166a0 <bt_conn_unref>
   15c56:	e758      	b.n	15b0a <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   15c58:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   15c5a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   15c5e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   15c62:	e7c5      	b.n	15bf0 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   15c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15c66:	9300      	str	r3, [sp, #0]
   15c68:	e9cd 8601 	strd	r8, r6, [sp, #4]
   15c6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15c6e:	9905      	ldr	r1, [sp, #20]
   15c70:	4652      	mov	r2, sl
   15c72:	4628      	mov	r0, r5
   15c74:	f011 fac7 	bl	27206 <le_adv_update.constprop.0>
		if (err) {
   15c78:	4683      	mov	fp, r0
   15c7a:	2800      	cmp	r0, #0
   15c7c:	d0d2      	beq.n	15c24 <bt_le_adv_start_legacy+0x150>
   15c7e:	e744      	b.n	15b0a <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   15c80:	a907      	add	r1, sp, #28
   15c82:	4628      	mov	r0, r5
   15c84:	f7ff fea4 	bl	159d0 <le_adv_start_add_conn>
		if (err) {
   15c88:	4683      	mov	fp, r0
   15c8a:	2800      	cmp	r0, #0
   15c8c:	d0cd      	beq.n	15c2a <bt_le_adv_start_legacy+0x156>
			if (err == -ENOMEM && !dir_adv &&
   15c8e:	f110 0f0c 	cmn.w	r0, #12
   15c92:	f47f af3a 	bne.w	15b0a <bt_le_adv_start_legacy+0x36>
   15c96:	f1b9 0f00 	cmp.w	r9, #0
   15c9a:	f47f af36 	bne.w	15b0a <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   15c9e:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   15ca0:	0790      	lsls	r0, r2, #30
   15ca2:	f53f af32 	bmi.w	15b0a <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15ca6:	6863      	ldr	r3, [r4, #4]
   15ca8:	f083 0302 	eor.w	r3, r3, #2
   15cac:	f3c3 0b40 	ubfx	fp, r3, #1, #1
   15cb0:	f00b 0201 	and.w	r2, fp, #1
   15cb4:	210e      	movs	r1, #14
   15cb6:	4638      	mov	r0, r7
   15cb8:	f011 fa8e 	bl	271d8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   15cbc:	1e73      	subs	r3, r6, #1
   15cbe:	425a      	negs	r2, r3
   15cc0:	415a      	adcs	r2, r3
   15cc2:	2108      	movs	r1, #8
   15cc4:	4638      	mov	r0, r7
   15cc6:	f011 fa87 	bl	271d8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   15cca:	1eb1      	subs	r1, r6, #2
   15ccc:	424a      	negs	r2, r1
   15cce:	414a      	adcs	r2, r1
   15cd0:	4638      	mov	r0, r7
   15cd2:	2109      	movs	r1, #9
   15cd4:	f011 fa80 	bl	271d8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   15cd8:	6862      	ldr	r2, [r4, #4]
   15cda:	210a      	movs	r1, #10
   15cdc:	f002 0201 	and.w	r2, r2, #1
   15ce0:	4638      	mov	r0, r7
   15ce2:	f011 fa79 	bl	271d8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   15ce6:	4642      	mov	r2, r8
   15ce8:	210b      	movs	r1, #11
   15cea:	4638      	mov	r0, r7
   15cec:	f011 fa74 	bl	271d8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   15cf0:	6862      	ldr	r2, [r4, #4]
   15cf2:	210d      	movs	r1, #13
   15cf4:	f3c2 0280 	ubfx	r2, r2, #2, #1
   15cf8:	4638      	mov	r0, r7
   15cfa:	f011 fa6d 	bl	271d8 <atomic_set_bit_to>
	return 0;
   15cfe:	f04f 0b00 	mov.w	fp, #0
   15d02:	e702      	b.n	15b0a <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15d04:	b115      	cbz	r5, 15d0c <bt_le_adv_start_legacy+0x238>
		bt_conn_unref(conn);
   15d06:	4628      	mov	r0, r5
   15d08:	f000 fcca 	bl	166a0 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15d0c:	f1b9 0f00 	cmp.w	r9, #0
   15d10:	d1ce      	bne.n	15cb0 <bt_le_adv_start_legacy+0x1dc>
   15d12:	e7c8      	b.n	15ca6 <bt_le_adv_start_legacy+0x1d2>
		return -EAGAIN;
   15d14:	f06f 0b0a 	mvn.w	fp, #10
   15d18:	e6f7      	b.n	15b0a <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   15d1a:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   15d1e:	e6f4      	b.n	15b0a <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   15d20:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   15d24:	e6f1      	b.n	15b0a <bt_le_adv_start_legacy+0x36>
   15d26:	4683      	mov	fp, r0
   15d28:	e6ef      	b.n	15b0a <bt_le_adv_start_legacy+0x36>
   15d2a:	bf00      	nop
   15d2c:	2000044c 	.word	0x2000044c
   15d30:	20000380 	.word	0x20000380
   15d34:	0002b150 	.word	0x0002b150
   15d38:	0002bba6 	.word	0x0002bba6

00015d3c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   15d3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15d3e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15d40:	9a06      	ldr	r2, [sp, #24]
{
   15d42:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15d44:	e9cd 3200 	strd	r3, r2, [sp]
   15d48:	462b      	mov	r3, r5
   15d4a:	460a      	mov	r2, r1
   15d4c:	4601      	mov	r1, r0
   15d4e:	4811      	ldr	r0, [pc, #68]	; (15d94 <bt_le_adv_start+0x58>)
   15d50:	f7ff fec0 	bl	15ad4 <bt_le_adv_start_legacy>
   15d54:	4621      	mov	r1, r4
   15d56:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   15d58:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   15d5a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   15d5e:	429d      	cmp	r5, r3
   15d60:	d102      	bne.n	15d68 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   15d62:	4630      	mov	r0, r6
   15d64:	b002      	add	sp, #8
   15d66:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   15d68:	880a      	ldrh	r2, [r1, #0]
   15d6a:	4282      	cmp	r2, r0
   15d6c:	d104      	bne.n	15d78 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   15d6e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   15d70:	b112      	cbz	r2, 15d78 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   15d72:	7812      	ldrb	r2, [r2, #0]
   15d74:	07d2      	lsls	r2, r2, #31
   15d76:	d402      	bmi.n	15d7e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   15d78:	3301      	adds	r3, #1
   15d7a:	3108      	adds	r1, #8
   15d7c:	e7ef      	b.n	15d5e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   15d7e:	4906      	ldr	r1, [pc, #24]	; (15d98 <bt_le_adv_start+0x5c>)
   15d80:	4806      	ldr	r0, [pc, #24]	; (15d9c <bt_le_adv_start+0x60>)
   15d82:	f00a ff79 	bl	20c78 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   15d86:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   15d8a:	2300      	movs	r3, #0
   15d8c:	4803      	ldr	r0, [pc, #12]	; (15d9c <bt_le_adv_start+0x60>)
   15d8e:	f00b f85d 	bl	20e4c <k_work_reschedule>
   15d92:	e7e6      	b.n	15d62 <bt_le_adv_start+0x26>
   15d94:	20000398 	.word	0x20000398
   15d98:	00015e25 	.word	0x00015e25
   15d9c:	200003b0 	.word	0x200003b0

00015da0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   15da0:	b510      	push	{r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   15da2:	481a      	ldr	r0, [pc, #104]	; (15e0c <bt_le_adv_stop+0x6c>)
   15da4:	f011 fadd 	bl	27362 <bt_le_lim_adv_cancel_timeout>
   15da8:	4819      	ldr	r0, [pc, #100]	; (15e10 <bt_le_adv_stop+0x70>)
   15daa:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   15dae:	f011 fa04 	bl	271ba <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15db2:	4817      	ldr	r0, [pc, #92]	; (15e10 <bt_le_adv_stop+0x70>)
   15db4:	f011 f9fb 	bl	271ae <atomic_get>
   15db8:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15dba:	061a      	lsls	r2, r3, #24
   15dbc:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   15dc0:	d523      	bpl.n	15e0a <bt_le_adv_stop+0x6a>
   15dc2:	4813      	ldr	r0, [pc, #76]	; (15e10 <bt_le_adv_stop+0x70>)
   15dc4:	f011 f9f3 	bl	271ae <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15dc8:	0543      	lsls	r3, r0, #21
   15dca:	d514      	bpl.n	15df6 <bt_le_adv_stop+0x56>
	return memcmp(a, b, sizeof(*a));
   15dcc:	4911      	ldr	r1, [pc, #68]	; (15e14 <bt_le_adv_stop+0x74>)
   15dce:	4812      	ldr	r0, [pc, #72]	; (15e18 <bt_le_adv_stop+0x78>)
   15dd0:	2207      	movs	r2, #7
   15dd2:	f010 ff2c 	bl	26c2e <memcmp>
   15dd6:	4b11      	ldr	r3, [pc, #68]	; (15e1c <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15dd8:	b998      	cbnz	r0, 15e02 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   15dda:	4911      	ldr	r1, [pc, #68]	; (15e20 <bt_le_adv_stop+0x80>)
   15ddc:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   15dde:	7e18      	ldrb	r0, [r3, #24]
   15de0:	f000 ff24 	bl	16c2c <bt_conn_lookup_state_le>
   15de4:	4604      	mov	r4, r0
	if (conn) {
   15de6:	b130      	cbz	r0, 15df6 <bt_le_adv_stop+0x56>
		conn->err = status;
   15de8:	2100      	movs	r1, #0
   15dea:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15dec:	f000 fc90 	bl	16710 <bt_conn_set_state>
		bt_conn_unref(conn);
   15df0:	4620      	mov	r0, r4
   15df2:	f000 fc55 	bl	166a0 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   15df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   15dfa:	4804      	ldr	r0, [pc, #16]	; (15e0c <bt_le_adv_stop+0x6c>)
   15dfc:	2100      	movs	r1, #0
   15dfe:	f011 ba89 	b.w	27314 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   15e02:	2205      	movs	r2, #5
   15e04:	f103 0121 	add.w	r1, r3, #33	; 0x21
   15e08:	e7e9      	b.n	15dde <bt_le_adv_stop+0x3e>
}
   15e0a:	bd10      	pop	{r4, pc}
   15e0c:	20000398 	.word	0x20000398
   15e10:	200003a8 	.word	0x200003a8
   15e14:	0002b150 	.word	0x0002b150
   15e18:	200003a1 	.word	0x200003a1
   15e1c:	20000380 	.word	0x20000380
   15e20:	0002b149 	.word	0x0002b149

00015e24 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   15e24:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   15e26:	f7ff ffbb 	bl	15da0 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
}
   15e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = bt_le_adv_stop();
   15e2e:	4602      	mov	r2, r0
	BT_WARN("Failed to stop advertising: %d", err);
   15e30:	2157      	movs	r1, #87	; 0x57
   15e32:	4801      	ldr	r0, [pc, #4]	; (15e38 <adv_timeout+0x14>)
   15e34:	f010 b892 	b.w	25f5c <z_log_minimal_printk>
   15e38:	0002bbc6 	.word	0x0002bbc6

00015e3c <bt_le_adv_resume>:
{
   15e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15e3e:	4c20      	ldr	r4, [pc, #128]	; (15ec0 <bt_le_adv_resume+0x84>)
   15e40:	4620      	mov	r0, r4
   15e42:	f011 f9b4 	bl	271ae <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   15e46:	0440      	lsls	r0, r0, #17
   15e48:	d538      	bpl.n	15ebc <bt_le_adv_resume+0x80>
   15e4a:	4620      	mov	r0, r4
   15e4c:	f011 f9af 	bl	271ae <atomic_get>
   15e50:	0601      	lsls	r1, r0, #24
   15e52:	d433      	bmi.n	15ebc <bt_le_adv_resume+0x80>
   15e54:	4620      	mov	r0, r4
   15e56:	f011 f9aa 	bl	271ae <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   15e5a:	0542      	lsls	r2, r0, #21
   15e5c:	d52e      	bpl.n	15ebc <bt_le_adv_resume+0x80>
	err = le_adv_start_add_conn(adv, &conn);
   15e5e:	a901      	add	r1, sp, #4
   15e60:	f1a4 0010 	sub.w	r0, r4, #16
   15e64:	f7ff fdb4 	bl	159d0 <le_adv_start_add_conn>
	if (err) {
   15e68:	4605      	mov	r5, r0
   15e6a:	bb38      	cbnz	r0, 15ebc <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   15e6c:	2101      	movs	r1, #1
   15e6e:	f1a4 0010 	sub.w	r0, r4, #16
   15e72:	f011 fa4f 	bl	27314 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   15e76:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   15e78:	b928      	cbnz	r0, 15e86 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   15e7a:	4630      	mov	r0, r6
}
   15e7c:	b002      	add	sp, #8
   15e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15e82:	f000 bc0d 	b.w	166a0 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15e86:	4629      	mov	r1, r5
   15e88:	4630      	mov	r0, r6
   15e8a:	f000 fc41 	bl	16710 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15e8e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   15e92:	4620      	mov	r0, r4
   15e94:	f011 f991 	bl	271ba <atomic_and>
   15e98:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   15e9a:	4630      	mov	r0, r6
   15e9c:	f000 fc00 	bl	166a0 <bt_conn_unref>
	if (persist_paused) {
   15ea0:	046b      	lsls	r3, r5, #17
   15ea2:	d50b      	bpl.n	15ebc <bt_le_adv_resume+0x80>
   15ea4:	f3bf 8f5b 	dmb	ish
   15ea8:	e854 3f00 	ldrex	r3, [r4]
   15eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   15eb0:	e844 3200 	strex	r2, r3, [r4]
   15eb4:	2a00      	cmp	r2, #0
   15eb6:	d1f7      	bne.n	15ea8 <bt_le_adv_resume+0x6c>
   15eb8:	f3bf 8f5b 	dmb	ish
}
   15ebc:	b002      	add	sp, #8
   15ebe:	bd70      	pop	{r4, r5, r6, pc}
   15ec0:	200003a8 	.word	0x200003a8

00015ec4 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   15ec4:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   15ec6:	4904      	ldr	r1, [pc, #16]	; (15ed8 <bt_pub_key_is_debug+0x14>)
   15ec8:	2240      	movs	r2, #64	; 0x40
   15eca:	f010 feb0 	bl	26c2e <memcmp>
}
   15ece:	fab0 f080 	clz	r0, r0
   15ed2:	0940      	lsrs	r0, r0, #5
   15ed4:	bd08      	pop	{r3, pc}
   15ed6:	bf00      	nop
   15ed8:	0002bc8c 	.word	0x0002bc8c

00015edc <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   15edc:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   15ede:	4b37      	ldr	r3, [pc, #220]	; (15fbc <bt_pub_key_gen+0xe0>)
   15ee0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   15ee4:	f003 0306 	and.w	r3, r3, #6
   15ee8:	2b06      	cmp	r3, #6
   15eea:	d007      	beq.n	15efc <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   15eec:	4834      	ldr	r0, [pc, #208]	; (15fc0 <bt_pub_key_gen+0xe4>)
   15eee:	2157      	movs	r1, #87	; 0x57
   15ef0:	f010 f834 	bl	25f5c <z_log_minimal_printk>
		return -ENOTSUP;
   15ef4:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   15ef8:	4628      	mov	r0, r5
   15efa:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   15efc:	2800      	cmp	r0, #0
   15efe:	d05a      	beq.n	15fb6 <bt_pub_key_gen+0xda>
	return list->head;
   15f00:	4e30      	ldr	r6, [pc, #192]	; (15fc4 <bt_pub_key_gen+0xe8>)
   15f02:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15f04:	b16a      	cbz	r2, 15f22 <bt_pub_key_gen+0x46>
   15f06:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   15f08:	4283      	cmp	r3, r0
   15f0a:	d106      	bne.n	15f1a <bt_pub_key_gen+0x3e>
			BT_WARN("Callback already registered");
   15f0c:	482e      	ldr	r0, [pc, #184]	; (15fc8 <bt_pub_key_gen+0xec>)
   15f0e:	2157      	movs	r1, #87	; 0x57
   15f10:	f010 f824 	bl	25f5c <z_log_minimal_printk>
			return -EALREADY;
   15f14:	f06f 0577 	mvn.w	r5, #119	; 0x77
   15f18:	e7ee      	b.n	15ef8 <bt_pub_key_gen+0x1c>
	return node->next;
   15f1a:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15f1c:	b10b      	cbz	r3, 15f22 <bt_pub_key_gen+0x46>
   15f1e:	3b04      	subs	r3, #4
   15f20:	e7f2      	b.n	15f08 <bt_pub_key_gen+0x2c>
	parent->next = child;
   15f22:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   15f24:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   15f26:	1d03      	adds	r3, r0, #4
	list->head = node;
   15f28:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   15f2a:	b902      	cbnz	r2, 15f2e <bt_pub_key_gen+0x52>
	list->tail = node;
   15f2c:	6073      	str	r3, [r6, #4]
   15f2e:	4c27      	ldr	r4, [pc, #156]	; (15fcc <bt_pub_key_gen+0xf0>)
   15f30:	f3bf 8f5b 	dmb	ish
   15f34:	e854 2f00 	ldrex	r2, [r4]
   15f38:	f042 0320 	orr.w	r3, r2, #32
   15f3c:	e844 3100 	strex	r1, r3, [r4]
   15f40:	2900      	cmp	r1, #0
   15f42:	d1f7      	bne.n	15f34 <bt_pub_key_gen+0x58>
   15f44:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   15f48:	f012 0220 	ands.w	r2, r2, #32
   15f4c:	d001      	beq.n	15f52 <bt_pub_key_gen+0x76>
	return 0;
   15f4e:	2500      	movs	r5, #0
   15f50:	e7d2      	b.n	15ef8 <bt_pub_key_gen+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15f52:	f3bf 8f5b 	dmb	ish
   15f56:	e854 3f00 	ldrex	r3, [r4]
   15f5a:	f023 0310 	bic.w	r3, r3, #16
   15f5e:	e844 3100 	strex	r1, r3, [r4]
   15f62:	2900      	cmp	r1, #0
   15f64:	d1f7      	bne.n	15f56 <bt_pub_key_gen+0x7a>
   15f66:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   15f6a:	4611      	mov	r1, r2
   15f6c:	f242 0025 	movw	r0, #8229	; 0x2025
   15f70:	f7fe fb94 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   15f74:	4605      	mov	r5, r0
   15f76:	2800      	cmp	r0, #0
   15f78:	d0e9      	beq.n	15f4e <bt_pub_key_gen+0x72>
		BT_ERR("Sending LE P256 Public Key command failed");
   15f7a:	4815      	ldr	r0, [pc, #84]	; (15fd0 <bt_pub_key_gen+0xf4>)
   15f7c:	2145      	movs	r1, #69	; 0x45
   15f7e:	f00f ffed 	bl	25f5c <z_log_minimal_printk>
   15f82:	f3bf 8f5b 	dmb	ish
   15f86:	e854 3f00 	ldrex	r3, [r4]
   15f8a:	f023 0320 	bic.w	r3, r3, #32
   15f8e:	e844 3200 	strex	r2, r3, [r4]
   15f92:	2a00      	cmp	r2, #0
   15f94:	d1f7      	bne.n	15f86 <bt_pub_key_gen+0xaa>
   15f96:	f3bf 8f5b 	dmb	ish
	return list->head;
   15f9a:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15f9c:	b13c      	cbz	r4, 15fae <bt_pub_key_gen+0xd2>
			if (cb->func) {
   15f9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15fa2:	3c04      	subs	r4, #4
			if (cb->func) {
   15fa4:	b10b      	cbz	r3, 15faa <bt_pub_key_gen+0xce>
				cb->func(NULL);
   15fa6:	2000      	movs	r0, #0
   15fa8:	4798      	blx	r3
	return node->next;
   15faa:	6864      	ldr	r4, [r4, #4]
   15fac:	e7f6      	b.n	15f9c <bt_pub_key_gen+0xc0>
	list->head = NULL;
   15fae:	2300      	movs	r3, #0
	list->tail = NULL;
   15fb0:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   15fb4:	e7a0      	b.n	15ef8 <bt_pub_key_gen+0x1c>
		return -EINVAL;
   15fb6:	f06f 0515 	mvn.w	r5, #21
   15fba:	e79d      	b.n	15ef8 <bt_pub_key_gen+0x1c>
   15fbc:	20000380 	.word	0x20000380
   15fc0:	0002bbf1 	.word	0x0002bbf1
   15fc4:	200025e4 	.word	0x200025e4
   15fc8:	0002bc15 	.word	0x0002bc15
   15fcc:	2000044c 	.word	0x2000044c
   15fd0:	0002bc36 	.word	0x0002bc36

00015fd4 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15fd4:	4b05      	ldr	r3, [pc, #20]	; (15fec <bt_pub_key_get+0x18>)
   15fd6:	f3bf 8f5b 	dmb	ish
   15fda:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   15fdc:	4804      	ldr	r0, [pc, #16]	; (15ff0 <bt_pub_key_get+0x1c>)
   15fde:	f3bf 8f5b 	dmb	ish
	return NULL;
   15fe2:	f013 0f10 	tst.w	r3, #16
}
   15fe6:	bf08      	it	eq
   15fe8:	2000      	moveq	r0, #0
   15fea:	4770      	bx	lr
   15fec:	2000044c 	.word	0x2000044c
   15ff0:	20003644 	.word	0x20003644

00015ff4 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   15ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   15ff6:	4d22      	ldr	r5, [pc, #136]	; (16080 <bt_dh_key_gen+0x8c>)
   15ff8:	682b      	ldr	r3, [r5, #0]
   15ffa:	428b      	cmp	r3, r1
{
   15ffc:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   15ffe:	d039      	beq.n	16074 <bt_dh_key_gen+0x80>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16000:	b11b      	cbz	r3, 1600a <bt_dh_key_gen+0x16>
		return -EBUSY;
   16002:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   16006:	4620      	mov	r0, r4
   16008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1600a:	4b1e      	ldr	r3, [pc, #120]	; (16084 <bt_dh_key_gen+0x90>)
   1600c:	f3bf 8f5b 	dmb	ish
   16010:	681a      	ldr	r2, [r3, #0]
   16012:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16016:	f3c2 1740 	ubfx	r7, r2, #5, #1
   1601a:	0692      	lsls	r2, r2, #26
   1601c:	d4f1      	bmi.n	16002 <bt_dh_key_gen+0xe>
   1601e:	f3bf 8f5b 	dmb	ish
   16022:	681b      	ldr	r3, [r3, #0]
   16024:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   16028:	06db      	lsls	r3, r3, #27
   1602a:	d526      	bpl.n	1607a <bt_dh_key_gen+0x86>
	dh_key_cb = cb;
   1602c:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   1602e:	f242 0026 	movw	r0, #8230	; 0x2026
   16032:	2140      	movs	r1, #64	; 0x40
   16034:	f7fe fae8 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   16038:	4604      	mov	r4, r0
   1603a:	b1c0      	cbz	r0, 1606e <bt_dh_key_gen+0x7a>
	return net_buf_simple_add(&buf->b, len);
   1603c:	2140      	movs	r1, #64	; 0x40
   1603e:	3008      	adds	r0, #8
   16040:	f005 fe68 	bl	1bd14 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   16044:	2240      	movs	r2, #64	; 0x40
   16046:	4631      	mov	r1, r6
   16048:	f010 fe18 	bl	26c7c <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   1604c:	4621      	mov	r1, r4
   1604e:	463a      	mov	r2, r7
   16050:	f242 0026 	movw	r0, #8230	; 0x2026
   16054:	f7fe fb22 	bl	1469c <bt_hci_cmd_send_sync>
	if (err) {
   16058:	4604      	mov	r4, r0
   1605a:	2800      	cmp	r0, #0
   1605c:	d0d3      	beq.n	16006 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   1605e:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
   16060:	4809      	ldr	r0, [pc, #36]	; (16088 <bt_dh_key_gen+0x94>)
		dh_key_cb = NULL;
   16062:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   16064:	4622      	mov	r2, r4
   16066:	2157      	movs	r1, #87	; 0x57
   16068:	f00f ff78 	bl	25f5c <z_log_minimal_printk>
		return err;
   1606c:	e7cb      	b.n	16006 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   1606e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16072:	e7f4      	b.n	1605e <bt_dh_key_gen+0x6a>
		return -EALREADY;
   16074:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16078:	e7c5      	b.n	16006 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   1607a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1607e:	e7c2      	b.n	16006 <bt_dh_key_gen+0x12>
   16080:	200025e0 	.word	0x200025e0
   16084:	2000044c 	.word	0x2000044c
   16088:	0002bc65 	.word	0x0002bc65

0001608c <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   1608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1608e:	4c1b      	ldr	r4, [pc, #108]	; (160fc <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   16090:	6886      	ldr	r6, [r0, #8]
   16092:	f3bf 8f5b 	dmb	ish
   16096:	e854 3f00 	ldrex	r3, [r4]
   1609a:	f023 0320 	bic.w	r3, r3, #32
   1609e:	e844 3200 	strex	r2, r3, [r4]
   160a2:	2a00      	cmp	r2, #0
   160a4:	d1f7      	bne.n	16096 <bt_hci_evt_le_pkey_complete+0xa>
   160a6:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   160aa:	7833      	ldrb	r3, [r6, #0]
   160ac:	b983      	cbnz	r3, 160d0 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   160ae:	4814      	ldr	r0, [pc, #80]	; (16100 <bt_hci_evt_le_pkey_complete+0x74>)
   160b0:	2240      	movs	r2, #64	; 0x40
   160b2:	1c71      	adds	r1, r6, #1
   160b4:	f010 fde2 	bl	26c7c <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   160b8:	f3bf 8f5b 	dmb	ish
   160bc:	e854 3f00 	ldrex	r3, [r4]
   160c0:	f043 0310 	orr.w	r3, r3, #16
   160c4:	e844 3200 	strex	r2, r3, [r4]
   160c8:	2a00      	cmp	r2, #0
   160ca:	d1f7      	bne.n	160bc <bt_hci_evt_le_pkey_complete+0x30>
   160cc:	f3bf 8f5b 	dmb	ish
	return list->head;
   160d0:	4d0c      	ldr	r5, [pc, #48]	; (16104 <bt_hci_evt_le_pkey_complete+0x78>)
   160d2:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   160d4:	b16c      	cbz	r4, 160f2 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   160d6:	4f0a      	ldr	r7, [pc, #40]	; (16100 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   160d8:	3c04      	subs	r4, #4
		if (cb->func) {
   160da:	6823      	ldr	r3, [r4, #0]
   160dc:	b12b      	cbz	r3, 160ea <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   160de:	7832      	ldrb	r2, [r6, #0]
   160e0:	2a00      	cmp	r2, #0
   160e2:	bf0c      	ite	eq
   160e4:	4638      	moveq	r0, r7
   160e6:	2000      	movne	r0, #0
   160e8:	4798      	blx	r3
	return node->next;
   160ea:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   160ec:	b10c      	cbz	r4, 160f2 <bt_hci_evt_le_pkey_complete+0x66>
   160ee:	3c04      	subs	r4, #4
   160f0:	e7f3      	b.n	160da <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   160f2:	2300      	movs	r3, #0
	list->tail = NULL;
   160f4:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   160f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160fa:	bf00      	nop
   160fc:	2000044c 	.word	0x2000044c
   16100:	20003644 	.word	0x20003644
   16104:	200025e4 	.word	0x200025e4

00016108 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   16108:	4905      	ldr	r1, [pc, #20]	; (16120 <bt_hci_evt_le_dhkey_complete+0x18>)
   1610a:	680b      	ldr	r3, [r1, #0]
   1610c:	b133      	cbz	r3, 1611c <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1610e:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   16110:	2000      	movs	r0, #0
   16112:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   16114:	7811      	ldrb	r1, [r2, #0]
   16116:	b901      	cbnz	r1, 1611a <bt_hci_evt_le_dhkey_complete+0x12>
   16118:	1c50      	adds	r0, r2, #1
   1611a:	4718      	bx	r3
	}
}
   1611c:	4770      	bx	lr
   1611e:	bf00      	nop
   16120:	200025e0 	.word	0x200025e0

00016124 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   16124:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   16126:	4b11      	ldr	r3, [pc, #68]	; (1616c <notify_connected+0x48>)
   16128:	681d      	ldr	r5, [r3, #0]
{
   1612a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1612c:	b975      	cbnz	r5, 1614c <notify_connected+0x28>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1612e:	4d10      	ldr	r5, [pc, #64]	; (16170 <notify_connected+0x4c>)
   16130:	4e10      	ldr	r6, [pc, #64]	; (16174 <notify_connected+0x50>)
   16132:	42b5      	cmp	r5, r6
   16134:	d918      	bls.n	16168 <notify_connected+0x44>
   16136:	4910      	ldr	r1, [pc, #64]	; (16178 <notify_connected+0x54>)
   16138:	4810      	ldr	r0, [pc, #64]	; (1617c <notify_connected+0x58>)
   1613a:	f44f 62ab 	mov.w	r2, #1368	; 0x558
   1613e:	f00f feff 	bl	25f40 <assert_print>
   16142:	480d      	ldr	r0, [pc, #52]	; (16178 <notify_connected+0x54>)
   16144:	f44f 61ab 	mov.w	r1, #1368	; 0x558
   16148:	f00f fef3 	bl	25f32 <assert_post_action>
		if (cb->connected) {
   1614c:	682b      	ldr	r3, [r5, #0]
   1614e:	b113      	cbz	r3, 16156 <notify_connected+0x32>
			cb->connected(conn, conn->err);
   16150:	7b21      	ldrb	r1, [r4, #12]
   16152:	4620      	mov	r0, r4
   16154:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16156:	69ad      	ldr	r5, [r5, #24]
   16158:	e7e8      	b.n	1612c <notify_connected+0x8>
		if (cb->connected) {
   1615a:	682b      	ldr	r3, [r5, #0]
   1615c:	b113      	cbz	r3, 16164 <notify_connected+0x40>
			cb->connected(conn, conn->err);
   1615e:	7b21      	ldrb	r1, [r4, #12]
   16160:	4620      	mov	r0, r4
   16162:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16164:	351c      	adds	r5, #28
   16166:	e7e4      	b.n	16132 <notify_connected+0xe>
   16168:	d3f7      	bcc.n	1615a <notify_connected+0x36>
		}
	}
}
   1616a:	bd70      	pop	{r4, r5, r6, pc}
   1616c:	2000261c 	.word	0x2000261c
   16170:	0002999c 	.word	0x0002999c
   16174:	000299b8 	.word	0x000299b8
   16178:	0002bcd3 	.word	0x0002bcd3
   1617c:	0002a7df 	.word	0x0002a7df

00016180 <tx_notify>:
{
   16180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   16184:	4f15      	ldr	r7, [pc, #84]	; (161dc <tx_notify+0x5c>)
{
   16186:	4604      	mov	r4, r0
	tx->cb = NULL;
   16188:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   1618c:	f04f 0240 	mov.w	r2, #64	; 0x40
   16190:	f3ef 8311 	mrs	r3, BASEPRI
   16194:	f382 8812 	msr	BASEPRI_MAX, r2
   16198:	f3bf 8f6f 	isb	sy
	return list->head;
   1619c:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1619e:	b929      	cbnz	r1, 161ac <tx_notify+0x2c>
	__asm__ volatile(
   161a0:	f383 8811 	msr	BASEPRI, r3
   161a4:	f3bf 8f6f 	isb	sy
}
   161a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   161ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   161ae:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   161b0:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   161b2:	4281      	cmp	r1, r0
	list->tail = node;
   161b4:	bf08      	it	eq
   161b6:	6262      	streq	r2, [r4, #36]	; 0x24
   161b8:	f383 8811 	msr	BASEPRI, r3
   161bc:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   161c0:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   161c4:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   161c8:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   161cc:	4638      	mov	r0, r7
   161ce:	f013 f8ad 	bl	2932c <k_queue_append>
		cb(conn, user_data, 0);
   161d2:	2200      	movs	r2, #0
   161d4:	4631      	mov	r1, r6
   161d6:	4620      	mov	r0, r4
   161d8:	47a8      	blx	r5
	while (1) {
   161da:	e7d7      	b.n	1618c <tx_notify+0xc>
   161dc:	20000978 	.word	0x20000978

000161e0 <conn_tx_destroy>:
{
   161e0:	b570      	push	{r4, r5, r6, lr}
   161e2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   161e4:	b941      	cbnz	r1, 161f8 <conn_tx_destroy+0x18>
   161e6:	490d      	ldr	r1, [pc, #52]	; (1621c <conn_tx_destroy+0x3c>)
   161e8:	480d      	ldr	r0, [pc, #52]	; (16220 <conn_tx_destroy+0x40>)
   161ea:	2238      	movs	r2, #56	; 0x38
   161ec:	f00f fea8 	bl	25f40 <assert_print>
   161f0:	480a      	ldr	r0, [pc, #40]	; (1621c <conn_tx_destroy+0x3c>)
   161f2:	2138      	movs	r1, #56	; 0x38
   161f4:	f00f fe9d 	bl	25f32 <assert_post_action>
	void *user_data = tx->user_data;
   161f8:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   161fc:	2200      	movs	r2, #0
	tx->user_data = NULL;
   161fe:	e9c1 2201 	strd	r2, r2, [r1, #4]
	tx->pending_no_cb = 0U;
   16202:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   16204:	4807      	ldr	r0, [pc, #28]	; (16224 <conn_tx_destroy+0x44>)
   16206:	f013 f891 	bl	2932c <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   1620a:	4631      	mov	r1, r6
   1620c:	4620      	mov	r0, r4
   1620e:	462b      	mov	r3, r5
   16210:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   16214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   16218:	4718      	bx	r3
   1621a:	bf00      	nop
   1621c:	0002bcd3 	.word	0x0002bcd3
   16220:	0002a7df 	.word	0x0002a7df
   16224:	20000978 	.word	0x20000978

00016228 <send_frag>:
{
   16228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1622c:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1622e:	694d      	ldr	r5, [r1, #20]
{
   16230:	460e      	mov	r6, r1
   16232:	4617      	mov	r7, r2
   16234:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   16236:	f04f 33ff 	mov.w	r3, #4294967295
   1623a:	4846      	ldr	r0, [pc, #280]	; (16354 <send_frag+0x12c>)
   1623c:	f04f 32ff 	mov.w	r2, #4294967295
   16240:	f00a f9ae 	bl	205a0 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   16244:	7b63      	ldrb	r3, [r4, #13]
   16246:	2b07      	cmp	r3, #7
   16248:	d178      	bne.n	1633c <send_frag+0x114>
	__asm__ volatile(
   1624a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1624e:	f3ef 8211 	mrs	r2, BASEPRI
   16252:	f383 8812 	msr	BASEPRI_MAX, r3
   16256:	f3bf 8f6f 	isb	sy
	if (tx) {
   1625a:	2d00      	cmp	r5, #0
   1625c:	d043      	beq.n	162e6 <send_frag+0xbe>
	parent->next = child;
   1625e:	2300      	movs	r3, #0
   16260:	602b      	str	r3, [r5, #0]
	return list->tail;
   16262:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   16264:	2b00      	cmp	r3, #0
   16266:	d13b      	bne.n	162e0 <send_frag+0xb8>
	list->head = node;
   16268:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1626c:	f382 8811 	msr	BASEPRI, r2
   16270:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   16274:	2104      	movs	r1, #4
   16276:	f106 0008 	add.w	r0, r6, #8
   1627a:	f005 fcfb 	bl	1bc74 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1627e:	8823      	ldrh	r3, [r4, #0]
   16280:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   16284:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   16288:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1628a:	89b3      	ldrh	r3, [r6, #12]
   1628c:	3b04      	subs	r3, #4
   1628e:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16290:	2302      	movs	r3, #2
   16292:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   16294:	4630      	mov	r0, r6
   16296:	f7fe fcad 	bl	14bf4 <bt_send>
	if (err) {
   1629a:	4602      	mov	r2, r0
   1629c:	2800      	cmp	r0, #0
   1629e:	d057      	beq.n	16350 <send_frag+0x128>
		BT_ERR("Unable to send to driver (err %d)", err);
   162a0:	482d      	ldr	r0, [pc, #180]	; (16358 <send_frag+0x130>)
   162a2:	2145      	movs	r1, #69	; 0x45
   162a4:	f00f fe5a 	bl	25f5c <z_log_minimal_printk>
	__asm__ volatile(
   162a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   162ac:	f3ef 8711 	mrs	r7, BASEPRI
   162b0:	f383 8812 	msr	BASEPRI_MAX, r3
   162b4:	f3bf 8f6f 	isb	sy
		if (tx) {
   162b8:	b315      	cbz	r5, 16300 <send_frag+0xd8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   162ba:	4629      	mov	r1, r5
   162bc:	f104 0014 	add.w	r0, r4, #20
   162c0:	f011 f852 	bl	27368 <sys_slist_find_and_remove>
	__asm__ volatile(
   162c4:	f387 8811 	msr	BASEPRI, r7
   162c8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   162cc:	4821      	ldr	r0, [pc, #132]	; (16354 <send_frag+0x12c>)
   162ce:	f00a f92d 	bl	2052c <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   162d2:	2300      	movs	r3, #0
   162d4:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   162d6:	4629      	mov	r1, r5
   162d8:	4620      	mov	r0, r4
   162da:	f7ff ff81 	bl	161e0 <conn_tx_destroy>
   162de:	e027      	b.n	16330 <send_frag+0x108>
	parent->next = child;
   162e0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   162e2:	61a5      	str	r5, [r4, #24]
}
   162e4:	e7c2      	b.n	1626c <send_frag+0x44>
	return list->tail;
   162e6:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   162e8:	b133      	cbz	r3, 162f8 <send_frag+0xd0>
			pending_no_cb = &tail_tx->pending_no_cb;
   162ea:	f103 080c 	add.w	r8, r3, #12
   162ee:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   162f0:	3301      	adds	r3, #1
   162f2:	f8c8 3000 	str.w	r3, [r8]
   162f6:	e7b9      	b.n	1626c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   162f8:	69e3      	ldr	r3, [r4, #28]
   162fa:	f104 081c 	add.w	r8, r4, #28
   162fe:	e7f7      	b.n	162f0 <send_frag+0xc8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   16300:	f8d8 2000 	ldr.w	r2, [r8]
   16304:	b952      	cbnz	r2, 1631c <send_frag+0xf4>
   16306:	4915      	ldr	r1, [pc, #84]	; (1635c <send_frag+0x134>)
   16308:	4815      	ldr	r0, [pc, #84]	; (16360 <send_frag+0x138>)
   1630a:	f240 2229 	movw	r2, #553	; 0x229
   1630e:	f00f fe17 	bl	25f40 <assert_print>
   16312:	4812      	ldr	r0, [pc, #72]	; (1635c <send_frag+0x134>)
   16314:	f240 2129 	movw	r1, #553	; 0x229
   16318:	f00f fe0b 	bl	25f32 <assert_post_action>
			(*pending_no_cb)--;
   1631c:	3a01      	subs	r2, #1
   1631e:	f8c8 2000 	str.w	r2, [r8]
   16322:	f387 8811 	msr	BASEPRI, r7
   16326:	f3bf 8f6f 	isb	sy
   1632a:	480a      	ldr	r0, [pc, #40]	; (16354 <send_frag+0x12c>)
   1632c:	f00a f8fe 	bl	2052c <z_impl_k_sem_give>
	if (always_consume) {
   16330:	f1b9 0f00 	cmp.w	r9, #0
   16334:	d108      	bne.n	16348 <send_frag+0x120>
	return false;
   16336:	2000      	movs	r0, #0
}
   16338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1633c:	4805      	ldr	r0, [pc, #20]	; (16354 <send_frag+0x12c>)
   1633e:	f00a f8f5 	bl	2052c <z_impl_k_sem_give>
	if (tx) {
   16342:	2d00      	cmp	r5, #0
   16344:	d1c5      	bne.n	162d2 <send_frag+0xaa>
   16346:	e7f3      	b.n	16330 <send_frag+0x108>
		net_buf_unref(buf);
   16348:	4630      	mov	r0, r6
   1634a:	f005 fbdd 	bl	1bb08 <net_buf_unref>
   1634e:	e7f2      	b.n	16336 <send_frag+0x10e>
	return true;
   16350:	2001      	movs	r0, #1
   16352:	e7f1      	b.n	16338 <send_frag+0x110>
   16354:	20000480 	.word	0x20000480
   16358:	0002b6bd 	.word	0x0002b6bd
   1635c:	0002bcd3 	.word	0x0002bcd3
   16360:	0002a7df 	.word	0x0002a7df

00016364 <bt_conn_get_pkts>:
}
   16364:	4800      	ldr	r0, [pc, #0]	; (16368 <bt_conn_get_pkts+0x4>)
   16366:	4770      	bx	lr
   16368:	20000480 	.word	0x20000480

0001636c <bt_conn_new>:
{
   1636c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1636e:	2200      	movs	r2, #0
   16370:	4604      	mov	r4, r0
   16372:	428a      	cmp	r2, r1
   16374:	d102      	bne.n	1637c <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   16376:	2400      	movs	r4, #0
}
   16378:	4620      	mov	r0, r4
   1637a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1637c:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   16380:	2001      	movs	r0, #1
   16382:	f3bf 8f5b 	dmb	ish
   16386:	e853 5f00 	ldrex	r5, [r3]
   1638a:	2d00      	cmp	r5, #0
   1638c:	d104      	bne.n	16398 <bt_conn_new+0x2c>
   1638e:	e843 0c00 	strex	ip, r0, [r3]
   16392:	f1bc 0f00 	cmp.w	ip, #0
   16396:	d1f6      	bne.n	16386 <bt_conn_new+0x1a>
   16398:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1639c:	d002      	beq.n	163a4 <bt_conn_new+0x38>
   1639e:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   163a0:	4402      	add	r2, r0
   163a2:	e7e6      	b.n	16372 <bt_conn_new+0x6>
	if (!conn) {
   163a4:	2c00      	cmp	r4, #0
   163a6:	d0e6      	beq.n	16376 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   163a8:	22c0      	movs	r2, #192	; 0xc0
   163aa:	2100      	movs	r1, #0
   163ac:	4620      	mov	r0, r4
   163ae:	f010 fc70 	bl	26c92 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   163b2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   163b6:	4904      	ldr	r1, [pc, #16]	; (163c8 <bt_conn_new+0x5c>)
   163b8:	f00a fc5e 	bl	20c78 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   163bc:	4903      	ldr	r1, [pc, #12]	; (163cc <bt_conn_new+0x60>)
   163be:	f104 0028 	add.w	r0, r4, #40	; 0x28
   163c2:	f00a fb43 	bl	20a4c <k_work_init>
	return conn;
   163c6:	e7d7      	b.n	16378 <bt_conn_new+0xc>
   163c8:	00016cdd 	.word	0x00016cdd
   163cc:	000273bd 	.word	0x000273bd

000163d0 <conn_cleanup>:
{
   163d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   163d4:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   163d6:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   163d8:	f104 0638 	add.w	r6, r4, #56	; 0x38
   163dc:	2300      	movs	r3, #0
   163de:	2200      	movs	r2, #0
   163e0:	4630      	mov	r0, r6
   163e2:	f005 fa5f 	bl	1b8a4 <net_buf_get>
   163e6:	4603      	mov	r3, r0
   163e8:	b960      	cbnz	r0, 16404 <conn_cleanup+0x34>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   163ea:	6963      	ldr	r3, [r4, #20]
   163ec:	b1ab      	cbz	r3, 1641a <conn_cleanup+0x4a>
   163ee:	4916      	ldr	r1, [pc, #88]	; (16448 <conn_cleanup+0x78>)
   163f0:	4816      	ldr	r0, [pc, #88]	; (1644c <conn_cleanup+0x7c>)
   163f2:	f240 22b6 	movw	r2, #694	; 0x2b6
   163f6:	f00f fda3 	bl	25f40 <assert_print>
   163fa:	f240 21b6 	movw	r1, #694	; 0x2b6
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   163fe:	4812      	ldr	r0, [pc, #72]	; (16448 <conn_cleanup+0x78>)
   16400:	f00f fd97 	bl	25f32 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   16404:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   16406:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   16408:	f005 fb7e 	bl	1bb08 <net_buf_unref>
		if (tx) {
   1640c:	2d00      	cmp	r5, #0
   1640e:	d0e5      	beq.n	163dc <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   16410:	4629      	mov	r1, r5
   16412:	4620      	mov	r0, r4
   16414:	f7ff fee4 	bl	161e0 <conn_tx_destroy>
   16418:	e7de      	b.n	163d8 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1641a:	69e3      	ldr	r3, [r4, #28]
   1641c:	b143      	cbz	r3, 16430 <conn_cleanup+0x60>
   1641e:	490a      	ldr	r1, [pc, #40]	; (16448 <conn_cleanup+0x78>)
   16420:	480a      	ldr	r0, [pc, #40]	; (1644c <conn_cleanup+0x7c>)
   16422:	f240 22b7 	movw	r2, #695	; 0x2b7
   16426:	f00f fd8b 	bl	25f40 <assert_print>
   1642a:	f240 21b7 	movw	r1, #695	; 0x2b7
   1642e:	e7e6      	b.n	163fe <conn_cleanup+0x2e>
	bt_conn_reset_rx_state(conn);
   16430:	4620      	mov	r0, r4
   16432:	f010 ffc6 	bl	273c2 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   16436:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1643a:	2200      	movs	r2, #0
}
   1643c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   16440:	2300      	movs	r3, #0
   16442:	f00a bd03 	b.w	20e4c <k_work_reschedule>
   16446:	bf00      	nop
   16448:	0002bcd3 	.word	0x0002bcd3
   1644c:	0002a7df 	.word	0x0002a7df

00016450 <bt_conn_recv>:
{
   16450:	b570      	push	{r4, r5, r6, lr}
   16452:	4616      	mov	r6, r2
   16454:	4604      	mov	r4, r0
   16456:	460d      	mov	r5, r1
	tx_notify(conn);
   16458:	f7ff fe92 	bl	16180 <tx_notify>
	switch (flags) {
   1645c:	2e01      	cmp	r6, #1
   1645e:	d01f      	beq.n	164a0 <bt_conn_recv+0x50>
   16460:	2e02      	cmp	r6, #2
   16462:	d149      	bne.n	164f8 <bt_conn_recv+0xa8>
		if (conn->rx) {
   16464:	6923      	ldr	r3, [r4, #16]
   16466:	b133      	cbz	r3, 16476 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   16468:	482b      	ldr	r0, [pc, #172]	; (16518 <bt_conn_recv+0xc8>)
   1646a:	2145      	movs	r1, #69	; 0x45
   1646c:	f00f fd76 	bl	25f5c <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   16470:	4620      	mov	r0, r4
   16472:	f010 ffa6 	bl	273c2 <bt_conn_reset_rx_state>
		conn->rx = buf;
   16476:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   16478:	6921      	ldr	r1, [r4, #16]
   1647a:	898a      	ldrh	r2, [r1, #12]
   1647c:	2a01      	cmp	r2, #1
   1647e:	d949      	bls.n	16514 <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   16480:	688b      	ldr	r3, [r1, #8]
   16482:	881b      	ldrh	r3, [r3, #0]
   16484:	3304      	adds	r3, #4
   16486:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   16488:	429a      	cmp	r2, r3
   1648a:	d343      	bcc.n	16514 <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
   1648c:	d93a      	bls.n	16504 <bt_conn_recv+0xb4>
		BT_ERR("ACL len mismatch (%u > %u)",
   1648e:	4823      	ldr	r0, [pc, #140]	; (1651c <bt_conn_recv+0xcc>)
   16490:	2145      	movs	r1, #69	; 0x45
   16492:	f00f fd63 	bl	25f5c <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   16496:	4620      	mov	r0, r4
}
   16498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1649c:	f010 bf91 	b.w	273c2 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   164a0:	6920      	ldr	r0, [r4, #16]
   164a2:	b938      	cbnz	r0, 164b4 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   164a4:	481e      	ldr	r0, [pc, #120]	; (16520 <bt_conn_recv+0xd0>)
   164a6:	2145      	movs	r1, #69	; 0x45
   164a8:	f00f fd58 	bl	25f5c <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   164ac:	4620      	mov	r0, r4
   164ae:	f010 ff88 	bl	273c2 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   164b2:	e001      	b.n	164b8 <bt_conn_recv+0x68>
		if (!buf->len) {
   164b4:	89ae      	ldrh	r6, [r5, #12]
   164b6:	b926      	cbnz	r6, 164c2 <bt_conn_recv+0x72>
			net_buf_unref(buf);
   164b8:	4628      	mov	r0, r5
}
   164ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   164be:	f005 bb23 	b.w	1bb08 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   164c2:	3008      	adds	r0, #8
   164c4:	f012 fb09 	bl	28ada <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   164c8:	4286      	cmp	r6, r0
   164ca:	d90b      	bls.n	164e4 <bt_conn_recv+0x94>
			BT_ERR("Not enough buffer space for L2CAP data");
   164cc:	4815      	ldr	r0, [pc, #84]	; (16524 <bt_conn_recv+0xd4>)
   164ce:	2145      	movs	r1, #69	; 0x45
   164d0:	f00f fd44 	bl	25f5c <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   164d4:	6921      	ldr	r1, [r4, #16]
   164d6:	2200      	movs	r2, #0
   164d8:	4620      	mov	r0, r4
   164da:	f000 fe43 	bl	17164 <bt_l2cap_recv>
			conn->rx = NULL;
   164de:	2300      	movs	r3, #0
   164e0:	6123      	str	r3, [r4, #16]
   164e2:	e7e9      	b.n	164b8 <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   164e4:	6920      	ldr	r0, [r4, #16]
   164e6:	89aa      	ldrh	r2, [r5, #12]
   164e8:	68a9      	ldr	r1, [r5, #8]
   164ea:	3008      	adds	r0, #8
   164ec:	f012 fafd 	bl	28aea <net_buf_simple_add_mem>
		net_buf_unref(buf);
   164f0:	4628      	mov	r0, r5
   164f2:	f005 fb09 	bl	1bb08 <net_buf_unref>
		break;
   164f6:	e7bf      	b.n	16478 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   164f8:	480b      	ldr	r0, [pc, #44]	; (16528 <bt_conn_recv+0xd8>)
   164fa:	4632      	mov	r2, r6
   164fc:	2145      	movs	r1, #69	; 0x45
   164fe:	f00f fd2d 	bl	25f5c <z_log_minimal_printk>
   16502:	e7d3      	b.n	164ac <bt_conn_recv+0x5c>
	conn->rx = NULL;
   16504:	2300      	movs	r3, #0
   16506:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   16508:	4620      	mov	r0, r4
   1650a:	2201      	movs	r2, #1
}
   1650c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   16510:	f000 be28 	b.w	17164 <bt_l2cap_recv>
}
   16514:	bd70      	pop	{r4, r5, r6, pc}
   16516:	bf00      	nop
   16518:	0002bd03 	.word	0x0002bd03
   1651c:	0002bd97 	.word	0x0002bd97
   16520:	0002bd25 	.word	0x0002bd25
   16524:	0002bd48 	.word	0x0002bd48
   16528:	0002bd74 	.word	0x0002bd74

0001652c <bt_conn_send_cb>:
{
   1652c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16530:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   16532:	7b43      	ldrb	r3, [r0, #13]
   16534:	2b07      	cmp	r3, #7
{
   16536:	4605      	mov	r5, r0
   16538:	460f      	mov	r7, r1
   1653a:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1653c:	d006      	beq.n	1654c <bt_conn_send_cb+0x20>
		BT_ERR("not connected!");
   1653e:	4820      	ldr	r0, [pc, #128]	; (165c0 <bt_conn_send_cb+0x94>)
   16540:	2145      	movs	r1, #69	; 0x45
   16542:	f00f fd0b 	bl	25f5c <z_log_minimal_printk>
		return -ENOTCONN;
   16546:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1654a:	e017      	b.n	1657c <bt_conn_send_cb+0x50>
	if (cb) {
   1654c:	2a00      	cmp	r2, #0
   1654e:	d035      	beq.n	165bc <bt_conn_send_cb+0x90>
	return z_impl_z_current_get();
   16550:	f00b fbda 	bl	21d08 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   16554:	4b1b      	ldr	r3, [pc, #108]	; (165c4 <bt_conn_send_cb+0x98>)
   16556:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   16558:	481b      	ldr	r0, [pc, #108]	; (165c8 <bt_conn_send_cb+0x9c>)
   1655a:	bf07      	ittee	eq
   1655c:	2200      	moveq	r2, #0
   1655e:	2300      	moveq	r3, #0
   16560:	f04f 32ff 	movne.w	r2, #4294967295
   16564:	f04f 33ff 	movne.w	r3, #4294967295
   16568:	f009 ff88 	bl	2047c <z_impl_k_queue_get>
   1656c:	4604      	mov	r4, r0
		if (!tx) {
   1656e:	b938      	cbnz	r0, 16580 <bt_conn_send_cb+0x54>
			BT_ERR("Unable to allocate TX context");
   16570:	4816      	ldr	r0, [pc, #88]	; (165cc <bt_conn_send_cb+0xa0>)
   16572:	2145      	movs	r1, #69	; 0x45
   16574:	f00f fcf2 	bl	25f5c <z_log_minimal_printk>
			return -ENOBUFS;
   16578:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1657c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   16580:	7b6b      	ldrb	r3, [r5, #13]
   16582:	2b07      	cmp	r3, #7
   16584:	f04f 0800 	mov.w	r8, #0
   16588:	d00c      	beq.n	165a4 <bt_conn_send_cb+0x78>
			BT_WARN("Disconnected while allocating context");
   1658a:	4811      	ldr	r0, [pc, #68]	; (165d0 <bt_conn_send_cb+0xa4>)
   1658c:	2157      	movs	r1, #87	; 0x57
   1658e:	f00f fce5 	bl	25f5c <z_log_minimal_printk>
	tx->user_data = NULL;
   16592:	e9c4 8801 	strd	r8, r8, [r4, #4]
	k_fifo_put(&free_tx, tx);
   16596:	480c      	ldr	r0, [pc, #48]	; (165c8 <bt_conn_send_cb+0x9c>)
	tx->pending_no_cb = 0U;
   16598:	f8c4 800c 	str.w	r8, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1659c:	4621      	mov	r1, r4
   1659e:	f012 fec5 	bl	2932c <k_queue_append>
}
   165a2:	e7d0      	b.n	16546 <bt_conn_send_cb+0x1a>
		tx->user_data = user_data;
   165a4:	e9c0 6901 	strd	r6, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   165a8:	f8c0 800c 	str.w	r8, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   165ac:	f105 0038 	add.w	r0, r5, #56	; 0x38
		tx_data(buf)->tx = tx;
   165b0:	617c      	str	r4, [r7, #20]
	net_buf_put(&conn->tx_queue, buf);
   165b2:	4639      	mov	r1, r7
   165b4:	f005 fa7e 	bl	1bab4 <net_buf_put>
	return 0;
   165b8:	2000      	movs	r0, #0
   165ba:	e7df      	b.n	1657c <bt_conn_send_cb+0x50>
   165bc:	4614      	mov	r4, r2
   165be:	e7f5      	b.n	165ac <bt_conn_send_cb+0x80>
   165c0:	0002bdb7 	.word	0x0002bdb7
   165c4:	20001f68 	.word	0x20001f68
   165c8:	20000978 	.word	0x20000978
   165cc:	0002bdcb 	.word	0x0002bdcb
   165d0:	0002bdee 	.word	0x0002bdee

000165d4 <bt_conn_prepare_events>:
{
   165d4:	b570      	push	{r4, r5, r6, lr}
   165d6:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   165d8:	4818      	ldr	r0, [pc, #96]	; (1663c <bt_conn_prepare_events+0x68>)
   165da:	f013 f824 	bl	29626 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   165de:	4b17      	ldr	r3, [pc, #92]	; (1663c <bt_conn_prepare_events+0x68>)
   165e0:	2200      	movs	r2, #0
   165e2:	2101      	movs	r1, #1
   165e4:	4620      	mov	r0, r4
   165e6:	f00c f87d 	bl	226e4 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   165ea:	f3bf 8f5b 	dmb	ish
   165ee:	4b14      	ldr	r3, [pc, #80]	; (16640 <bt_conn_prepare_events+0x6c>)
   165f0:	681a      	ldr	r2, [r3, #0]
   165f2:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   165f6:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   165fa:	b90a      	cbnz	r2, 16600 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   165fc:	2001      	movs	r0, #1
}
   165fe:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   16600:	f1a3 05c0 	sub.w	r5, r3, #192	; 0xc0
   16604:	f813 3cb3 	ldrb.w	r3, [r3, #-179]
   16608:	b953      	cbnz	r3, 16620 <bt_conn_prepare_events+0x4c>
   1660a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1660e:	1d28      	adds	r0, r5, #4
   16610:	f010 fec5 	bl	2739e <atomic_and>
   16614:	0643      	lsls	r3, r0, #25
   16616:	d503      	bpl.n	16620 <bt_conn_prepare_events+0x4c>
		conn_cleanup(conn);
   16618:	4628      	mov	r0, r5
   1661a:	f7ff fed9 	bl	163d0 <conn_cleanup>
		return -ENOTCONN;
   1661e:	e7ed      	b.n	165fc <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   16620:	7b6b      	ldrb	r3, [r5, #13]
   16622:	2b07      	cmp	r3, #7
   16624:	d1ea      	bne.n	165fc <bt_conn_prepare_events+0x28>
	k_poll_event_init(&events[0],
   16626:	4b07      	ldr	r3, [pc, #28]	; (16644 <bt_conn_prepare_events+0x70>)
   16628:	4630      	mov	r0, r6
   1662a:	2200      	movs	r2, #0
   1662c:	2104      	movs	r1, #4
   1662e:	f00c f859 	bl	226e4 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   16632:	2301      	movs	r3, #1
   16634:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   16638:	2002      	movs	r0, #2
	return ev_count;
   1663a:	e7e0      	b.n	165fe <bt_conn_prepare_events+0x2a>
   1663c:	200005e0 	.word	0x200005e0
   16640:	20001a30 	.word	0x20001a30
   16644:	200019a8 	.word	0x200019a8

00016648 <bt_conn_ref>:
{
   16648:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   1664a:	b950      	cbnz	r0, 16662 <bt_conn_ref+0x1a>
   1664c:	4912      	ldr	r1, [pc, #72]	; (16698 <bt_conn_ref+0x50>)
   1664e:	4813      	ldr	r0, [pc, #76]	; (1669c <bt_conn_ref+0x54>)
   16650:	f44f 628f 	mov.w	r2, #1144	; 0x478
   16654:	f00f fc74 	bl	25f40 <assert_print>
   16658:	480f      	ldr	r0, [pc, #60]	; (16698 <bt_conn_ref+0x50>)
   1665a:	f44f 618f 	mov.w	r1, #1144	; 0x478
   1665e:	f00f fc68 	bl	25f32 <assert_post_action>
   16662:	f3bf 8f5b 	dmb	ish
   16666:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   1666a:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   1666e:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
		if (!old) {
   16672:	b17b      	cbz	r3, 16694 <bt_conn_ref+0x4c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16674:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   16678:	1c59      	adds	r1, r3, #1
   1667a:	e852 4f00 	ldrex	r4, [r2]
   1667e:	429c      	cmp	r4, r3
   16680:	d104      	bne.n	1668c <bt_conn_ref+0x44>
   16682:	e842 1c00 	strex	ip, r1, [r2]
   16686:	f1bc 0f00 	cmp.w	ip, #0
   1668a:	d1f6      	bne.n	1667a <bt_conn_ref+0x32>
   1668c:	f3bf 8f5b 	dmb	ish
   16690:	d1e7      	bne.n	16662 <bt_conn_ref+0x1a>
}
   16692:	bd10      	pop	{r4, pc}
			return NULL;
   16694:	4618      	mov	r0, r3
   16696:	e7fc      	b.n	16692 <bt_conn_ref+0x4a>
   16698:	0002bcd3 	.word	0x0002bcd3
   1669c:	0002a7df 	.word	0x0002a7df

000166a0 <bt_conn_unref>:
{
   166a0:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   166a2:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   166a6:	f3bf 8f5b 	dmb	ish
   166aa:	e853 2f00 	ldrex	r2, [r3]
   166ae:	1e51      	subs	r1, r2, #1
   166b0:	e843 1400 	strex	r4, r1, [r3]
   166b4:	2c00      	cmp	r4, #0
   166b6:	d1f8      	bne.n	166aa <bt_conn_unref+0xa>
   166b8:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   166bc:	2a00      	cmp	r2, #0
   166be:	dc0a      	bgt.n	166d6 <bt_conn_unref+0x36>
   166c0:	490d      	ldr	r1, [pc, #52]	; (166f8 <bt_conn_unref+0x58>)
   166c2:	480e      	ldr	r0, [pc, #56]	; (166fc <bt_conn_unref+0x5c>)
   166c4:	f240 4295 	movw	r2, #1173	; 0x495
   166c8:	f00f fc3a 	bl	25f40 <assert_print>
   166cc:	480a      	ldr	r0, [pc, #40]	; (166f8 <bt_conn_unref+0x58>)
   166ce:	f240 4195 	movw	r1, #1173	; 0x495
   166d2:	f00f fc2e 	bl	25f32 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   166d6:	8842      	ldrh	r2, [r0, #2]
   166d8:	f240 1301 	movw	r3, #257	; 0x101
   166dc:	429a      	cmp	r2, r3
   166de:	d10a      	bne.n	166f6 <bt_conn_unref+0x56>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   166e0:	f3bf 8f5b 	dmb	ish
   166e4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   166e8:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   166ec:	b91b      	cbnz	r3, 166f6 <bt_conn_unref+0x56>
}
   166ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   166f2:	f7ff bba3 	b.w	15e3c <bt_le_adv_resume>
}
   166f6:	bd10      	pop	{r4, pc}
   166f8:	0002bcd3 	.word	0x0002bcd3
   166fc:	0002a7df 	.word	0x0002a7df

00016700 <bt_conn_lookup_handle>:
{
   16700:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   16702:	2101      	movs	r1, #1
   16704:	4801      	ldr	r0, [pc, #4]	; (1670c <bt_conn_lookup_handle+0xc>)
   16706:	f010 be65 	b.w	273d4 <conn_lookup_handle>
   1670a:	bf00      	nop
   1670c:	20001970 	.word	0x20001970

00016710 <bt_conn_set_state>:
{
   16710:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   16712:	7b46      	ldrb	r6, [r0, #13]
   16714:	428e      	cmp	r6, r1
{
   16716:	4604      	mov	r4, r0
   16718:	460d      	mov	r5, r1
	if (conn->state == state) {
   1671a:	d10b      	bne.n	16734 <bt_conn_set_state+0x24>
	switch (state) {
   1671c:	2e08      	cmp	r6, #8
   1671e:	bf96      	itet	ls
   16720:	4b61      	ldrls	r3, [pc, #388]	; (168a8 <bt_conn_set_state+0x198>)
	if (conn->state == state) {
   16722:	4a62      	ldrhi	r2, [pc, #392]	; (168ac <bt_conn_set_state+0x19c>)
   16724:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   16728:	4861      	ldr	r0, [pc, #388]	; (168b0 <bt_conn_set_state+0x1a0>)
   1672a:	2157      	movs	r1, #87	; 0x57
}
   1672c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   16730:	f00f bc14 	b.w	25f5c <z_log_minimal_printk>
	conn->state = state;
   16734:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   16736:	b926      	cbnz	r6, 16742 <bt_conn_set_state+0x32>
		if (conn->type != BT_CONN_TYPE_ISO) {
   16738:	7883      	ldrb	r3, [r0, #2]
   1673a:	2b08      	cmp	r3, #8
   1673c:	d001      	beq.n	16742 <bt_conn_set_state+0x32>
			bt_conn_ref(conn);
   1673e:	f7ff ff83 	bl	16648 <bt_conn_ref>
	switch (conn->state) {
   16742:	7b63      	ldrb	r3, [r4, #13]
   16744:	2b08      	cmp	r3, #8
   16746:	f200 80aa 	bhi.w	1689e <bt_conn_set_state+0x18e>
   1674a:	e8df f003 	tbb	[pc, r3]
   1674e:	0536      	.short	0x0536
   16750:	8a8a8a8a 	.word	0x8a8a8a8a
   16754:	1c8a      	.short	0x1c8a
   16756:	8a          	.byte	0x8a
   16757:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   16758:	4d56      	ldr	r5, [pc, #344]	; (168b4 <bt_conn_set_state+0x1a4>)
		tx->pending_no_cb = 0U;
   1675a:	2600      	movs	r6, #0
	__asm__ volatile(
   1675c:	f04f 0240 	mov.w	r2, #64	; 0x40
   16760:	f3ef 8311 	mrs	r3, BASEPRI
   16764:	f382 8812 	msr	BASEPRI_MAX, r2
   16768:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1676c:	69e2      	ldr	r2, [r4, #28]
   1676e:	2a00      	cmp	r2, #0
   16770:	d071      	beq.n	16856 <bt_conn_set_state+0x146>
			conn->pending_no_cb--;
   16772:	3a01      	subs	r2, #1
   16774:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   16776:	f383 8811 	msr	BASEPRI, r3
   1677a:	f3bf 8f6f 	isb	sy
   1677e:	4628      	mov	r0, r5
   16780:	f009 fed4 	bl	2052c <z_impl_k_sem_give>
}
   16784:	e7ea      	b.n	1675c <bt_conn_set_state+0x4c>
		if (conn->type == BT_CONN_TYPE_SCO) {
   16786:	78a3      	ldrb	r3, [r4, #2]
   16788:	2b04      	cmp	r3, #4
   1678a:	d06a      	beq.n	16862 <bt_conn_set_state+0x152>
	z_impl_k_queue_init(queue);
   1678c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16790:	f012 fdbf 	bl	29312 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   16794:	4848      	ldr	r0, [pc, #288]	; (168b8 <bt_conn_set_state+0x1a8>)
   16796:	2100      	movs	r1, #0
   16798:	f00c f880 	bl	2289c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1679c:	2300      	movs	r3, #0
	list->tail = NULL;
   1679e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   167a2:	78e3      	ldrb	r3, [r4, #3]
   167a4:	2b01      	cmp	r3, #1
   167a6:	d15c      	bne.n	16862 <bt_conn_set_state+0x152>
			k_work_schedule(&conn->deferred_work,
   167a8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   167ac:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   167b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   167b4:	2300      	movs	r3, #0
   167b6:	f00a bae5 	b.w	20d84 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   167ba:	78a3      	ldrb	r3, [r4, #2]
   167bc:	2b04      	cmp	r3, #4
   167be:	d104      	bne.n	167ca <bt_conn_set_state+0xba>
			bt_conn_unref(conn);
   167c0:	4620      	mov	r0, r4
}
   167c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   167c6:	f7ff bf6b 	b.w	166a0 <bt_conn_unref>
		switch (old_state) {
   167ca:	2e08      	cmp	r6, #8
   167cc:	d849      	bhi.n	16862 <bt_conn_set_state+0x152>
   167ce:	a301      	add	r3, pc, #4	; (adr r3, 167d4 <bt_conn_set_state+0xc4>)
   167d0:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   167d4:	0001684f 	.word	0x0001684f
   167d8:	000167f9 	.word	0x000167f9
   167dc:	00016841 	.word	0x00016841
   167e0:	000167c1 	.word	0x000167c1
   167e4:	000167c1 	.word	0x000167c1
   167e8:	00016841 	.word	0x00016841
   167ec:	00016841 	.word	0x00016841
   167f0:	00016863 	.word	0x00016863
   167f4:	0001684f 	.word	0x0001684f
			tx_notify(conn);
   167f8:	4620      	mov	r0, r4
   167fa:	f7ff fcc1 	bl	16180 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   167fe:	78a3      	ldrb	r3, [r4, #2]
   16800:	2b01      	cmp	r3, #1
   16802:	d10a      	bne.n	1681a <bt_conn_set_state+0x10a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   16804:	f104 0560 	add.w	r5, r4, #96	; 0x60
   16808:	4628      	mov	r0, r5
   1680a:	f012 fe18 	bl	2943e <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1680e:	f010 0f0c 	tst.w	r0, #12
   16812:	d002      	beq.n	1681a <bt_conn_set_state+0x10a>
				k_work_cancel_delayable(&conn->deferred_work);
   16814:	4628      	mov	r0, r5
   16816:	f00a fb1f 	bl	20e58 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1681a:	f3bf 8f5b 	dmb	ish
   1681e:	3404      	adds	r4, #4
   16820:	e854 3f00 	ldrex	r3, [r4]
   16824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16828:	e844 3200 	strex	r2, r3, [r4]
   1682c:	2a00      	cmp	r2, #0
   1682e:	d1f7      	bne.n	16820 <bt_conn_set_state+0x110>
   16830:	f3bf 8f5b 	dmb	ish
   16834:	4820      	ldr	r0, [pc, #128]	; (168b8 <bt_conn_set_state+0x1a8>)
}
   16836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1683a:	2100      	movs	r1, #0
   1683c:	f00c b82e 	b.w	2289c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   16840:	7b23      	ldrb	r3, [r4, #12]
   16842:	2b00      	cmp	r3, #0
   16844:	d0bc      	beq.n	167c0 <bt_conn_set_state+0xb0>
				notify_connected(conn);
   16846:	4620      	mov	r0, r4
   16848:	f7ff fc6c 	bl	16124 <notify_connected>
   1684c:	e7b8      	b.n	167c0 <bt_conn_set_state+0xb0>
			BT_WARN("Invalid (%u) old state", state);
   1684e:	481b      	ldr	r0, [pc, #108]	; (168bc <bt_conn_set_state+0x1ac>)
   16850:	462a      	mov	r2, r5
   16852:	2157      	movs	r1, #87	; 0x57
   16854:	e76a      	b.n	1672c <bt_conn_set_state+0x1c>
	return list->head;
   16856:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   16858:	b921      	cbnz	r1, 16864 <bt_conn_set_state+0x154>
   1685a:	f383 8811 	msr	BASEPRI, r3
   1685e:	f3bf 8f6f 	isb	sy
}
   16862:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16864:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   16866:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   16868:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1686a:	4281      	cmp	r1, r0
	list->tail = node;
   1686c:	bf08      	it	eq
   1686e:	61a2      	streq	r2, [r4, #24]
   16870:	f383 8811 	msr	BASEPRI, r3
   16874:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16878:	f04f 0240 	mov.w	r2, #64	; 0x40
   1687c:	f3ef 8311 	mrs	r3, BASEPRI
   16880:	f382 8812 	msr	BASEPRI_MAX, r2
   16884:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   16888:	68ca      	ldr	r2, [r1, #12]
   1688a:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1688c:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   1688e:	f383 8811 	msr	BASEPRI, r3
   16892:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   16896:	4620      	mov	r0, r4
   16898:	f7ff fca2 	bl	161e0 <conn_tx_destroy>
   1689c:	e76f      	b.n	1677e <bt_conn_set_state+0x6e>
		BT_WARN("no valid (%u) state was set", state);
   1689e:	4808      	ldr	r0, [pc, #32]	; (168c0 <bt_conn_set_state+0x1b0>)
   168a0:	462a      	mov	r2, r5
   168a2:	2157      	movs	r1, #87	; 0x57
   168a4:	e742      	b.n	1672c <bt_conn_set_state+0x1c>
   168a6:	bf00      	nop
   168a8:	00029e0c 	.word	0x00029e0c
   168ac:	0002be19 	.word	0x0002be19
   168b0:	0002be23 	.word	0x0002be23
   168b4:	20000480 	.word	0x20000480
   168b8:	200005e0 	.word	0x200005e0
   168bc:	0002be39 	.word	0x0002be39
   168c0:	0002be55 	.word	0x0002be55

000168c4 <bt_conn_index>:
		index = conn - acl_conns;
   168c4:	4a0a      	ldr	r2, [pc, #40]	; (168f0 <bt_conn_index+0x2c>)
   168c6:	490b      	ldr	r1, [pc, #44]	; (168f4 <bt_conn_index+0x30>)
{
   168c8:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   168ca:	1a83      	subs	r3, r0, r2
   168cc:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   168ce:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   168d0:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   168d4:	d00a      	beq.n	168ec <bt_conn_index+0x28>
   168d6:	4908      	ldr	r1, [pc, #32]	; (168f8 <bt_conn_index+0x34>)
   168d8:	4808      	ldr	r0, [pc, #32]	; (168fc <bt_conn_index+0x38>)
   168da:	f240 42b3 	movw	r2, #1203	; 0x4b3
   168de:	f00f fb2f 	bl	25f40 <assert_print>
   168e2:	4805      	ldr	r0, [pc, #20]	; (168f8 <bt_conn_index+0x34>)
   168e4:	f240 41b3 	movw	r1, #1203	; 0x4b3
   168e8:	f00f fb23 	bl	25f32 <assert_post_action>
}
   168ec:	b2d8      	uxtb	r0, r3
   168ee:	bd08      	pop	{r3, pc}
   168f0:	20001970 	.word	0x20001970
   168f4:	c28f5c29 	.word	0xc28f5c29
   168f8:	0002bcd3 	.word	0x0002bcd3
   168fc:	0002a7df 	.word	0x0002a7df

00016900 <bt_conn_create_pdu_timeout>:
{
   16900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16902:	4604      	mov	r4, r0
   16904:	460d      	mov	r5, r1
   16906:	4617      	mov	r7, r2
   16908:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   1690a:	f012 fcd3 	bl	292b4 <k_is_in_isr>
   1690e:	b150      	cbz	r0, 16926 <bt_conn_create_pdu_timeout+0x26>
   16910:	4910      	ldr	r1, [pc, #64]	; (16954 <bt_conn_create_pdu_timeout+0x54>)
   16912:	4811      	ldr	r0, [pc, #68]	; (16958 <bt_conn_create_pdu_timeout+0x58>)
   16914:	f240 42cf 	movw	r2, #1231	; 0x4cf
   16918:	f00f fb12 	bl	25f40 <assert_print>
   1691c:	480d      	ldr	r0, [pc, #52]	; (16954 <bt_conn_create_pdu_timeout+0x54>)
   1691e:	f240 41cf 	movw	r1, #1231	; 0x4cf
   16922:	f00f fb06 	bl	25f32 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   16926:	490d      	ldr	r1, [pc, #52]	; (1695c <bt_conn_create_pdu_timeout+0x5c>)
   16928:	463a      	mov	r2, r7
   1692a:	2c00      	cmp	r4, #0
   1692c:	bf14      	ite	ne
   1692e:	4620      	movne	r0, r4
   16930:	4608      	moveq	r0, r1
   16932:	4633      	mov	r3, r6
   16934:	f012 f8c0 	bl	28ab8 <net_buf_alloc_fixed>
	if (!buf) {
   16938:	4604      	mov	r4, r0
   1693a:	b928      	cbnz	r0, 16948 <bt_conn_create_pdu_timeout+0x48>
		BT_WARN("Unable to allocate buffer within timeout");
   1693c:	4808      	ldr	r0, [pc, #32]	; (16960 <bt_conn_create_pdu_timeout+0x60>)
   1693e:	2157      	movs	r1, #87	; 0x57
   16940:	f00f fb0c 	bl	25f5c <z_log_minimal_printk>
}
   16944:	4620      	mov	r0, r4
   16946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   16948:	1d29      	adds	r1, r5, #4
   1694a:	3008      	adds	r0, #8
   1694c:	f004 ffd4 	bl	1b8f8 <net_buf_simple_reserve>
	return buf;
   16950:	e7f8      	b.n	16944 <bt_conn_create_pdu_timeout+0x44>
   16952:	bf00      	nop
   16954:	0002bcd3 	.word	0x0002bcd3
   16958:	0002a7df 	.word	0x0002a7df
   1695c:	20000994 	.word	0x20000994
   16960:	0002be76 	.word	0x0002be76

00016964 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   16964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16966:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16968:	f3bf 8f5b 	dmb	ish
   1696c:	6863      	ldr	r3, [r4, #4]
   1696e:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   16972:	05db      	lsls	r3, r3, #23
   16974:	f100 0004 	add.w	r0, r0, #4
   16978:	d511      	bpl.n	1699e <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   1697a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1697e:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   16982:	429a      	cmp	r2, r3
   16984:	d80b      	bhi.n	1699e <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   16986:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   1698a:	429a      	cmp	r2, r3
   1698c:	d307      	bcc.n	1699e <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1698e:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   16992:	429a      	cmp	r2, r3
   16994:	d103      	bne.n	1699e <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16996:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1699a:	f010 fd00 	bl	2739e <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1699e:	4b16      	ldr	r3, [pc, #88]	; (169f8 <notify_le_param_updated+0x94>)
   169a0:	681d      	ldr	r5, [r3, #0]
   169a2:	b975      	cbnz	r5, 169c2 <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   169a4:	4d15      	ldr	r5, [pc, #84]	; (169fc <notify_le_param_updated+0x98>)
   169a6:	4f16      	ldr	r7, [pc, #88]	; (16a00 <notify_le_param_updated+0x9c>)
   169a8:	42bd      	cmp	r5, r7
   169aa:	d922      	bls.n	169f2 <notify_le_param_updated+0x8e>
   169ac:	4915      	ldr	r1, [pc, #84]	; (16a04 <notify_le_param_updated+0xa0>)
   169ae:	4816      	ldr	r0, [pc, #88]	; (16a08 <notify_le_param_updated+0xa4>)
   169b0:	f240 52a2 	movw	r2, #1442	; 0x5a2
   169b4:	f00f fac4 	bl	25f40 <assert_print>
   169b8:	4812      	ldr	r0, [pc, #72]	; (16a04 <notify_le_param_updated+0xa0>)
   169ba:	f240 51a2 	movw	r1, #1442	; 0x5a2
   169be:	f00f fab8 	bl	25f32 <assert_post_action>
		if (cb->le_param_updated) {
   169c2:	68ee      	ldr	r6, [r5, #12]
   169c4:	b13e      	cbz	r6, 169d6 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   169c6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   169ca:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   169ce:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   169d2:	4620      	mov	r0, r4
   169d4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   169d6:	69ad      	ldr	r5, [r5, #24]
   169d8:	e7e3      	b.n	169a2 <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   169da:	68ee      	ldr	r6, [r5, #12]
   169dc:	b13e      	cbz	r6, 169ee <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   169de:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   169e2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   169e6:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   169ea:	4620      	mov	r0, r4
   169ec:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   169ee:	351c      	adds	r5, #28
   169f0:	e7da      	b.n	169a8 <notify_le_param_updated+0x44>
   169f2:	d3f2      	bcc.n	169da <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   169f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   169f6:	bf00      	nop
   169f8:	2000261c 	.word	0x2000261c
   169fc:	0002999c 	.word	0x0002999c
   16a00:	000299b8 	.word	0x000299b8
   16a04:	0002bcd3 	.word	0x0002bcd3
   16a08:	0002a7df 	.word	0x0002a7df

00016a0c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   16a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a10:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   16a12:	4608      	mov	r0, r1
{
   16a14:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   16a16:	f010 fab8 	bl	26f8a <bt_le_conn_params_valid>
   16a1a:	4605      	mov	r5, r0
   16a1c:	b918      	cbnz	r0, 16a26 <le_param_req+0x1a>
		return false;
   16a1e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   16a20:	4628      	mov	r0, r5
   16a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   16a26:	4b19      	ldr	r3, [pc, #100]	; (16a8c <le_param_req+0x80>)
   16a28:	681e      	ldr	r6, [r3, #0]
   16a2a:	b97e      	cbnz	r6, 16a4c <le_param_req+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16a2c:	4e18      	ldr	r6, [pc, #96]	; (16a90 <le_param_req+0x84>)
   16a2e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 16a94 <le_param_req+0x88>
   16a32:	4546      	cmp	r6, r8
   16a34:	d923      	bls.n	16a7e <le_param_req+0x72>
   16a36:	4918      	ldr	r1, [pc, #96]	; (16a98 <le_param_req+0x8c>)
   16a38:	4818      	ldr	r0, [pc, #96]	; (16a9c <le_param_req+0x90>)
   16a3a:	f240 52ea 	movw	r2, #1514	; 0x5ea
   16a3e:	f00f fa7f 	bl	25f40 <assert_print>
   16a42:	4815      	ldr	r0, [pc, #84]	; (16a98 <le_param_req+0x8c>)
   16a44:	f240 51ea 	movw	r1, #1514	; 0x5ea
   16a48:	f00f fa73 	bl	25f32 <assert_post_action>
		if (!cb->le_param_req) {
   16a4c:	68b3      	ldr	r3, [r6, #8]
   16a4e:	b90b      	cbnz	r3, 16a54 <le_param_req+0x48>
	for (cb = callback_list; cb; cb = cb->_next) {
   16a50:	69b6      	ldr	r6, [r6, #24]
   16a52:	e7ea      	b.n	16a2a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   16a54:	4621      	mov	r1, r4
   16a56:	4638      	mov	r0, r7
   16a58:	4798      	blx	r3
   16a5a:	2800      	cmp	r0, #0
   16a5c:	d0df      	beq.n	16a1e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   16a5e:	4620      	mov	r0, r4
   16a60:	f010 fa93 	bl	26f8a <bt_le_conn_params_valid>
   16a64:	2800      	cmp	r0, #0
   16a66:	d1f3      	bne.n	16a50 <le_param_req+0x44>
   16a68:	e7d9      	b.n	16a1e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   16a6a:	4621      	mov	r1, r4
   16a6c:	4638      	mov	r0, r7
   16a6e:	4798      	blx	r3
   16a70:	2800      	cmp	r0, #0
   16a72:	d0d4      	beq.n	16a1e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   16a74:	4620      	mov	r0, r4
   16a76:	f010 fa88 	bl	26f8a <bt_le_conn_params_valid>
   16a7a:	b920      	cbnz	r0, 16a86 <le_param_req+0x7a>
   16a7c:	e7cf      	b.n	16a1e <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16a7e:	d2cf      	bcs.n	16a20 <le_param_req+0x14>
		if (!cb->le_param_req) {
   16a80:	68b3      	ldr	r3, [r6, #8]
   16a82:	2b00      	cmp	r3, #0
   16a84:	d1f1      	bne.n	16a6a <le_param_req+0x5e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16a86:	361c      	adds	r6, #28
   16a88:	e7d3      	b.n	16a32 <le_param_req+0x26>
   16a8a:	bf00      	nop
   16a8c:	2000261c 	.word	0x2000261c
   16a90:	0002999c 	.word	0x0002999c
   16a94:	000299b8 	.word	0x000299b8
   16a98:	0002bcd3 	.word	0x0002bcd3
   16a9c:	0002a7df 	.word	0x0002a7df

00016aa0 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   16aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   16aa4:	78c3      	ldrb	r3, [r0, #3]
{
   16aa6:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   16aa8:	b9bb      	cbnz	r3, 16ada <bt_conn_identity_resolved+0x3a>
		rpa = &conn->le.resp_addr;
   16aaa:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   16aae:	4b16      	ldr	r3, [pc, #88]	; (16b08 <bt_conn_identity_resolved+0x68>)
   16ab0:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   16ab2:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   16ab6:	b99d      	cbnz	r5, 16ae0 <bt_conn_identity_resolved+0x40>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16ab8:	4d14      	ldr	r5, [pc, #80]	; (16b0c <bt_conn_identity_resolved+0x6c>)
   16aba:	4f15      	ldr	r7, [pc, #84]	; (16b10 <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   16abc:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16ac0:	42bd      	cmp	r5, r7
   16ac2:	d91d      	bls.n	16b00 <bt_conn_identity_resolved+0x60>
   16ac4:	4913      	ldr	r1, [pc, #76]	; (16b14 <bt_conn_identity_resolved+0x74>)
   16ac6:	4814      	ldr	r0, [pc, #80]	; (16b18 <bt_conn_identity_resolved+0x78>)
   16ac8:	f240 72a7 	movw	r2, #1959	; 0x7a7
   16acc:	f00f fa38 	bl	25f40 <assert_print>
   16ad0:	4810      	ldr	r0, [pc, #64]	; (16b14 <bt_conn_identity_resolved+0x74>)
   16ad2:	f240 71a7 	movw	r1, #1959	; 0x7a7
   16ad6:	f00f fa2c 	bl	25f32 <assert_post_action>
		rpa = &conn->le.init_addr;
   16ada:	f100 0697 	add.w	r6, r0, #151	; 0x97
   16ade:	e7e6      	b.n	16aae <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   16ae0:	692b      	ldr	r3, [r5, #16]
   16ae2:	b11b      	cbz	r3, 16aec <bt_conn_identity_resolved+0x4c>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   16ae4:	463a      	mov	r2, r7
   16ae6:	4631      	mov	r1, r6
   16ae8:	4620      	mov	r0, r4
   16aea:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16aec:	69ad      	ldr	r5, [r5, #24]
   16aee:	e7e2      	b.n	16ab6 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   16af0:	692b      	ldr	r3, [r5, #16]
   16af2:	b11b      	cbz	r3, 16afc <bt_conn_identity_resolved+0x5c>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   16af4:	4642      	mov	r2, r8
   16af6:	4631      	mov	r1, r6
   16af8:	4620      	mov	r0, r4
   16afa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16afc:	351c      	adds	r5, #28
   16afe:	e7df      	b.n	16ac0 <bt_conn_identity_resolved+0x20>
   16b00:	d3f6      	bcc.n	16af0 <bt_conn_identity_resolved+0x50>
		}
	}
}
   16b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16b06:	bf00      	nop
   16b08:	2000261c 	.word	0x2000261c
   16b0c:	0002999c 	.word	0x0002999c
   16b10:	000299b8 	.word	0x000299b8
   16b14:	0002bcd3 	.word	0x0002bcd3
   16b18:	0002a7df 	.word	0x0002a7df

00016b1c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   16b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   16b1e:	7a43      	ldrb	r3, [r0, #9]
   16b20:	7283      	strb	r3, [r0, #10]
{
   16b22:	4604      	mov	r4, r0
   16b24:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   16b26:	f010 fd4b 	bl	275c0 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   16b2a:	4b12      	ldr	r3, [pc, #72]	; (16b74 <bt_conn_security_changed+0x58>)
   16b2c:	681d      	ldr	r5, [r3, #0]
   16b2e:	b975      	cbnz	r5, 16b4e <bt_conn_security_changed+0x32>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16b30:	4d11      	ldr	r5, [pc, #68]	; (16b78 <bt_conn_security_changed+0x5c>)
   16b32:	4f12      	ldr	r7, [pc, #72]	; (16b7c <bt_conn_security_changed+0x60>)
   16b34:	42bd      	cmp	r5, r7
   16b36:	d91a      	bls.n	16b6e <bt_conn_security_changed+0x52>
   16b38:	4911      	ldr	r1, [pc, #68]	; (16b80 <bt_conn_security_changed+0x64>)
   16b3a:	4812      	ldr	r0, [pc, #72]	; (16b84 <bt_conn_security_changed+0x68>)
   16b3c:	f640 0213 	movw	r2, #2067	; 0x813
   16b40:	f00f f9fe 	bl	25f40 <assert_print>
   16b44:	480e      	ldr	r0, [pc, #56]	; (16b80 <bt_conn_security_changed+0x64>)
   16b46:	f640 0113 	movw	r1, #2067	; 0x813
   16b4a:	f00f f9f2 	bl	25f32 <assert_post_action>
		if (cb->security_changed) {
   16b4e:	696b      	ldr	r3, [r5, #20]
   16b50:	b11b      	cbz	r3, 16b5a <bt_conn_security_changed+0x3e>
			cb->security_changed(conn, conn->sec_level, err);
   16b52:	7a61      	ldrb	r1, [r4, #9]
   16b54:	4632      	mov	r2, r6
   16b56:	4620      	mov	r0, r4
   16b58:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16b5a:	69ad      	ldr	r5, [r5, #24]
   16b5c:	e7e7      	b.n	16b2e <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   16b5e:	696b      	ldr	r3, [r5, #20]
   16b60:	b11b      	cbz	r3, 16b6a <bt_conn_security_changed+0x4e>
			cb->security_changed(conn, conn->sec_level, err);
   16b62:	7a61      	ldrb	r1, [r4, #9]
   16b64:	4632      	mov	r2, r6
   16b66:	4620      	mov	r0, r4
   16b68:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16b6a:	351c      	adds	r5, #28
   16b6c:	e7e2      	b.n	16b34 <bt_conn_security_changed+0x18>
   16b6e:	d3f6      	bcc.n	16b5e <bt_conn_security_changed+0x42>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   16b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b72:	bf00      	nop
   16b74:	2000261c 	.word	0x2000261c
   16b78:	0002999c 	.word	0x0002999c
   16b7c:	000299b8 	.word	0x000299b8
   16b80:	0002bcd3 	.word	0x0002bcd3
   16b84:	0002a7df 	.word	0x0002a7df

00016b88 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   16b88:	b570      	push	{r4, r5, r6, lr}
   16b8a:	4606      	mov	r6, r0
   16b8c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   16b8e:	480a      	ldr	r0, [pc, #40]	; (16bb8 <bt_conn_add_le+0x30>)
   16b90:	2101      	movs	r1, #1
   16b92:	f7ff fbeb 	bl	1636c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   16b96:	4604      	mov	r4, r0
   16b98:	b160      	cbz	r0, 16bb4 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   16b9a:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   16b9c:	2207      	movs	r2, #7
   16b9e:	4629      	mov	r1, r5
   16ba0:	3090      	adds	r0, #144	; 0x90
   16ba2:	f010 f86b 	bl	26c7c <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   16ba6:	2301      	movs	r3, #1
   16ba8:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   16baa:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   16bac:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   16bae:	4b03      	ldr	r3, [pc, #12]	; (16bbc <bt_conn_add_le+0x34>)
   16bb0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   16bb4:	4620      	mov	r0, r4
   16bb6:	bd70      	pop	{r4, r5, r6, pc}
   16bb8:	20001970 	.word	0x20001970
   16bbc:	00280018 	.word	0x00280018

00016bc0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   16bc0:	b570      	push	{r4, r5, r6, lr}
   16bc2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16bc4:	480a      	ldr	r0, [pc, #40]	; (16bf0 <bt_conn_lookup_addr_le+0x30>)
{
   16bc6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16bc8:	f7ff fd3e 	bl	16648 <bt_conn_ref>
   16bcc:	4604      	mov	r4, r0

		if (!conn) {
   16bce:	b120      	cbz	r0, 16bda <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   16bd0:	7883      	ldrb	r3, [r0, #2]
   16bd2:	2b01      	cmp	r3, #1
   16bd4:	d004      	beq.n	16be0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   16bd6:	f7ff fd63 	bl	166a0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   16bda:	2400      	movs	r4, #0
}
   16bdc:	4620      	mov	r0, r4
   16bde:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   16be0:	4632      	mov	r2, r6
   16be2:	4629      	mov	r1, r5
   16be4:	f010 fc73 	bl	274ce <bt_conn_is_peer_addr_le>
   16be8:	2800      	cmp	r0, #0
   16bea:	d1f7      	bne.n	16bdc <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   16bec:	4620      	mov	r0, r4
   16bee:	e7f2      	b.n	16bd6 <bt_conn_lookup_addr_le+0x16>
   16bf0:	20001970 	.word	0x20001970

00016bf4 <bt_conn_exists_le>:
{
   16bf4:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   16bf6:	f7ff ffe3 	bl	16bc0 <bt_conn_lookup_addr_le>
	if (conn) {
   16bfa:	4604      	mov	r4, r0
   16bfc:	b170      	cbz	r0, 16c1c <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   16bfe:	7b43      	ldrb	r3, [r0, #13]
   16c00:	4807      	ldr	r0, [pc, #28]	; (16c20 <bt_conn_exists_le+0x2c>)
   16c02:	2b08      	cmp	r3, #8
   16c04:	bf96      	itet	ls
   16c06:	4a07      	ldrls	r2, [pc, #28]	; (16c24 <bt_conn_exists_le+0x30>)
   16c08:	4a07      	ldrhi	r2, [pc, #28]	; (16c28 <bt_conn_exists_le+0x34>)
   16c0a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   16c0e:	2157      	movs	r1, #87	; 0x57
   16c10:	f00f f9a4 	bl	25f5c <z_log_minimal_printk>
		bt_conn_unref(conn);
   16c14:	4620      	mov	r0, r4
   16c16:	f7ff fd43 	bl	166a0 <bt_conn_unref>
		return true;
   16c1a:	2001      	movs	r0, #1
}
   16c1c:	bd10      	pop	{r4, pc}
   16c1e:	bf00      	nop
   16c20:	0002bea4 	.word	0x0002bea4
   16c24:	00029e0c 	.word	0x00029e0c
   16c28:	0002be19 	.word	0x0002be19

00016c2c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   16c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c2e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16c30:	480e      	ldr	r0, [pc, #56]	; (16c6c <bt_conn_lookup_state_le+0x40>)
{
   16c32:	460e      	mov	r6, r1
   16c34:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16c36:	f7ff fd07 	bl	16648 <bt_conn_ref>

		if (!conn) {
   16c3a:	4604      	mov	r4, r0
   16c3c:	b120      	cbz	r0, 16c48 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   16c3e:	7883      	ldrb	r3, [r0, #2]
   16c40:	2b01      	cmp	r3, #1
   16c42:	d003      	beq.n	16c4c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   16c44:	f7ff fd2c 	bl	166a0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   16c48:	2400      	movs	r4, #0
   16c4a:	e00d      	b.n	16c68 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   16c4c:	b136      	cbz	r6, 16c5c <bt_conn_lookup_state_le+0x30>
   16c4e:	4632      	mov	r2, r6
   16c50:	4629      	mov	r1, r5
   16c52:	f010 fc3c 	bl	274ce <bt_conn_is_peer_addr_le>
   16c56:	b908      	cbnz	r0, 16c5c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   16c58:	4620      	mov	r0, r4
   16c5a:	e7f3      	b.n	16c44 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   16c5c:	7b63      	ldrb	r3, [r4, #13]
   16c5e:	42bb      	cmp	r3, r7
   16c60:	d1fa      	bne.n	16c58 <bt_conn_lookup_state_le+0x2c>
   16c62:	7a23      	ldrb	r3, [r4, #8]
   16c64:	42ab      	cmp	r3, r5
   16c66:	d1f7      	bne.n	16c58 <bt_conn_lookup_state_le+0x2c>
}
   16c68:	4620      	mov	r0, r4
   16c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c6c:	20001970 	.word	0x20001970

00016c70 <send_conn_le_param_update>:
{
   16c70:	b538      	push	{r3, r4, r5, lr}
   16c72:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   16c74:	4608      	mov	r0, r1
{
   16c76:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   16c78:	f010 f987 	bl	26f8a <bt_le_conn_params_valid>
   16c7c:	b348      	cbz	r0, 16cd2 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16c7e:	4b16      	ldr	r3, [pc, #88]	; (16cd8 <send_conn_le_param_update+0x68>)
   16c80:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   16c84:	0799      	lsls	r1, r3, #30
   16c86:	d407      	bmi.n	16c98 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   16c88:	78e3      	ldrb	r3, [r4, #3]
   16c8a:	b183      	cbz	r3, 16cae <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   16c8c:	4629      	mov	r1, r5
   16c8e:	4620      	mov	r0, r4
}
   16c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   16c94:	f000 ba8e 	b.w	171b4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16c98:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   16c9c:	079a      	lsls	r2, r3, #30
   16c9e:	d5f3      	bpl.n	16c88 <send_conn_le_param_update+0x18>
   16ca0:	f3bf 8f5b 	dmb	ish
   16ca4:	6863      	ldr	r3, [r4, #4]
   16ca6:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   16caa:	059b      	lsls	r3, r3, #22
   16cac:	d4ec      	bmi.n	16c88 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   16cae:	4629      	mov	r1, r5
   16cb0:	4620      	mov	r0, r4
   16cb2:	f010 fc2e 	bl	27512 <bt_conn_le_conn_update>
		if (rc == 0) {
   16cb6:	b958      	cbnz	r0, 16cd0 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   16cb8:	882b      	ldrh	r3, [r5, #0]
   16cba:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   16cbe:	886b      	ldrh	r3, [r5, #2]
   16cc0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   16cc4:	88ab      	ldrh	r3, [r5, #4]
   16cc6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   16cca:	88eb      	ldrh	r3, [r5, #6]
   16ccc:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   16cd0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   16cd2:	f06f 0015 	mvn.w	r0, #21
   16cd6:	e7fb      	b.n	16cd0 <send_conn_le_param_update+0x60>
   16cd8:	20000380 	.word	0x20000380

00016cdc <deferred_work>:
{
   16cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   16cde:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   16ce2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   16ce4:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   16ce8:	bb5b      	cbnz	r3, 16d42 <deferred_work+0x66>
		bt_l2cap_disconnected(conn);
   16cea:	4628      	mov	r0, r5
   16cec:	f010 fc50 	bl	27590 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   16cf0:	4b28      	ldr	r3, [pc, #160]	; (16d94 <deferred_work+0xb8>)
   16cf2:	681e      	ldr	r6, [r3, #0]
   16cf4:	b976      	cbnz	r6, 16d14 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16cf6:	4e28      	ldr	r6, [pc, #160]	; (16d98 <deferred_work+0xbc>)
   16cf8:	4f28      	ldr	r7, [pc, #160]	; (16d9c <deferred_work+0xc0>)
   16cfa:	42be      	cmp	r6, r7
   16cfc:	d91a      	bls.n	16d34 <deferred_work+0x58>
   16cfe:	4928      	ldr	r1, [pc, #160]	; (16da0 <deferred_work+0xc4>)
   16d00:	4828      	ldr	r0, [pc, #160]	; (16da4 <deferred_work+0xc8>)
   16d02:	f240 5269 	movw	r2, #1385	; 0x569
   16d06:	f00f f91b 	bl	25f40 <assert_print>
   16d0a:	4825      	ldr	r0, [pc, #148]	; (16da0 <deferred_work+0xc4>)
   16d0c:	f240 5169 	movw	r1, #1385	; 0x569
   16d10:	f00f f90f 	bl	25f32 <assert_post_action>
		if (cb->disconnected) {
   16d14:	6873      	ldr	r3, [r6, #4]
   16d16:	b11b      	cbz	r3, 16d20 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   16d18:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   16d1c:	4628      	mov	r0, r5
   16d1e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16d20:	69b6      	ldr	r6, [r6, #24]
   16d22:	e7e7      	b.n	16cf4 <deferred_work+0x18>
		if (cb->disconnected) {
   16d24:	6873      	ldr	r3, [r6, #4]
   16d26:	b11b      	cbz	r3, 16d30 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   16d28:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   16d2c:	4628      	mov	r0, r5
   16d2e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16d30:	361c      	adds	r6, #28
   16d32:	e7e2      	b.n	16cfa <deferred_work+0x1e>
   16d34:	d3f6      	bcc.n	16d24 <deferred_work+0x48>
		bt_conn_unref(conn);
   16d36:	4628      	mov	r0, r5
}
   16d38:	b003      	add	sp, #12
   16d3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   16d3e:	f7ff bcaf 	b.w	166a0 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   16d42:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   16d46:	2b01      	cmp	r3, #1
   16d48:	d11c      	bne.n	16d84 <deferred_work+0xa8>
	if (atomic_test_and_clear_bit(conn->flags,
   16d4a:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16d4e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   16d52:	4630      	mov	r0, r6
   16d54:	f010 fb23 	bl	2739e <atomic_and>
   16d58:	05c3      	lsls	r3, r0, #23
   16d5a:	d515      	bpl.n	16d88 <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   16d5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16d5e:	9300      	str	r3, [sp, #0]
   16d60:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16d62:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   16d64:	4669      	mov	r1, sp
   16d66:	4628      	mov	r0, r5
   16d68:	f7ff ff82 	bl	16c70 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16d6c:	f3bf 8f5b 	dmb	ish
   16d70:	e856 3f00 	ldrex	r3, [r6]
   16d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16d78:	e846 3200 	strex	r2, r3, [r6]
   16d7c:	2a00      	cmp	r2, #0
   16d7e:	d1f7      	bne.n	16d70 <deferred_work+0x94>
   16d80:	f3bf 8f5b 	dmb	ish
}
   16d84:	b003      	add	sp, #12
   16d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   16d88:	4a07      	ldr	r2, [pc, #28]	; (16da8 <deferred_work+0xcc>)
   16d8a:	6810      	ldr	r0, [r2, #0]
   16d8c:	6851      	ldr	r1, [r2, #4]
   16d8e:	466b      	mov	r3, sp
   16d90:	c303      	stmia	r3!, {r0, r1}
   16d92:	e7e7      	b.n	16d64 <deferred_work+0x88>
   16d94:	2000261c 	.word	0x2000261c
   16d98:	0002999c 	.word	0x0002999c
   16d9c:	000299b8 	.word	0x000299b8
   16da0:	0002bcd3 	.word	0x0002bcd3
   16da4:	0002a7df 	.word	0x0002a7df
   16da8:	00029b9c 	.word	0x00029b9c

00016dac <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   16dac:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   16dae:	4801      	ldr	r0, [pc, #4]	; (16db4 <bt_conn_create_frag_timeout+0x8>)
   16db0:	f7ff bda6 	b.w	16900 <bt_conn_create_pdu_timeout>
   16db4:	200009fc 	.word	0x200009fc

00016db8 <create_frag>:
{
   16db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16dbc:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   16dbe:	f04f 33ff 	mov.w	r3, #4294967295
   16dc2:	f04f 32ff 	mov.w	r2, #4294967295
   16dc6:	2000      	movs	r0, #0
{
   16dc8:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   16dca:	f7ff ffef 	bl	16dac <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   16dce:	7b73      	ldrb	r3, [r6, #13]
   16dd0:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   16dd2:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   16dd4:	f04f 0600 	mov.w	r6, #0
   16dd8:	d005      	beq.n	16de6 <create_frag+0x2e>
		net_buf_unref(frag);
   16dda:	f004 fe95 	bl	1bb08 <net_buf_unref>
		return NULL;
   16dde:	4635      	mov	r5, r6
}
   16de0:	4628      	mov	r0, r5
   16de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   16de6:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   16de8:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   16dec:	4e0c      	ldr	r6, [pc, #48]	; (16e20 <create_frag+0x68>)
   16dee:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16df0:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   16df4:	f011 fe71 	bl	28ada <net_buf_simple_tailroom>
   16df8:	4580      	cmp	r8, r0
   16dfa:	d20c      	bcs.n	16e16 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   16dfc:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16e00:	f854 1f08 	ldr.w	r1, [r4, #8]!
   16e04:	4632      	mov	r2, r6
   16e06:	4638      	mov	r0, r7
   16e08:	f011 fe6f 	bl	28aea <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   16e0c:	4631      	mov	r1, r6
   16e0e:	4620      	mov	r0, r4
   16e10:	f004 ff4c 	bl	1bcac <net_buf_simple_pull>
   16e14:	e7e4      	b.n	16de0 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   16e16:	4638      	mov	r0, r7
   16e18:	f011 fe5f 	bl	28ada <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16e1c:	b286      	uxth	r6, r0
   16e1e:	e7ef      	b.n	16e00 <create_frag+0x48>
   16e20:	20000380 	.word	0x20000380

00016e24 <bt_conn_process_tx>:
{
   16e24:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   16e26:	7b43      	ldrb	r3, [r0, #13]
{
   16e28:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   16e2a:	b95b      	cbnz	r3, 16e44 <bt_conn_process_tx+0x20>
   16e2c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   16e30:	3004      	adds	r0, #4
   16e32:	f010 fab4 	bl	2739e <atomic_and>
   16e36:	0643      	lsls	r3, r0, #25
   16e38:	d504      	bpl.n	16e44 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   16e3a:	4620      	mov	r0, r4
}
   16e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   16e40:	f7ff bac6 	b.w	163d0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   16e44:	2200      	movs	r2, #0
   16e46:	2300      	movs	r3, #0
   16e48:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16e4c:	f004 fd2a 	bl	1b8a4 <net_buf_get>
	BT_ASSERT(buf);
   16e50:	4605      	mov	r5, r0
   16e52:	b958      	cbnz	r0, 16e6c <bt_conn_process_tx+0x48>
   16e54:	4923      	ldr	r1, [pc, #140]	; (16ee4 <bt_conn_process_tx+0xc0>)
   16e56:	4824      	ldr	r0, [pc, #144]	; (16ee8 <bt_conn_process_tx+0xc4>)
   16e58:	f44f 7247 	mov.w	r2, #796	; 0x31c
   16e5c:	f00f f870 	bl	25f40 <assert_print>
   16e60:	4040      	eors	r0, r0
   16e62:	f380 8811 	msr	BASEPRI, r0
   16e66:	f04f 0003 	mov.w	r0, #3
   16e6a:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   16e6c:	4e1f      	ldr	r6, [pc, #124]	; (16eec <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   16e6e:	89aa      	ldrh	r2, [r5, #12]
   16e70:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   16e74:	429a      	cmp	r2, r3
   16e76:	d807      	bhi.n	16e88 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   16e78:	2300      	movs	r3, #0
   16e7a:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   16e7c:	4629      	mov	r1, r5
   16e7e:	4620      	mov	r0, r4
   16e80:	f7ff f9d2 	bl	16228 <send_frag>
	if (!send_buf(conn, buf)) {
   16e84:	b968      	cbnz	r0, 16ea2 <bt_conn_process_tx+0x7e>
   16e86:	e005      	b.n	16e94 <bt_conn_process_tx+0x70>
	frag = create_frag(conn, buf);
   16e88:	4629      	mov	r1, r5
   16e8a:	4620      	mov	r0, r4
   16e8c:	f7ff ff94 	bl	16db8 <create_frag>
	if (!frag) {
   16e90:	4601      	mov	r1, r0
   16e92:	b938      	cbnz	r0, 16ea4 <bt_conn_process_tx+0x80>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   16e94:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   16e96:	2300      	movs	r3, #0
   16e98:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   16e9a:	4628      	mov	r0, r5
   16e9c:	f004 fe34 	bl	1bb08 <net_buf_unref>
		if (tx) {
   16ea0:	b9ce      	cbnz	r6, 16ed6 <bt_conn_process_tx+0xb2>
}
   16ea2:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   16ea4:	2301      	movs	r3, #1
   16ea6:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   16ea8:	4620      	mov	r0, r4
   16eaa:	f7ff f9bd 	bl	16228 <send_frag>
   16eae:	2800      	cmp	r0, #0
   16eb0:	d0f0      	beq.n	16e94 <bt_conn_process_tx+0x70>
	while (buf->len > conn_mtu(conn)) {
   16eb2:	89aa      	ldrh	r2, [r5, #12]
   16eb4:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   16eb8:	429a      	cmp	r2, r3
   16eba:	d802      	bhi.n	16ec2 <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   16ebc:	2300      	movs	r3, #0
   16ebe:	2203      	movs	r2, #3
   16ec0:	e7dc      	b.n	16e7c <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
   16ec2:	4629      	mov	r1, r5
   16ec4:	4620      	mov	r0, r4
   16ec6:	f7ff ff77 	bl	16db8 <create_frag>
		if (!frag) {
   16eca:	4601      	mov	r1, r0
   16ecc:	2800      	cmp	r0, #0
   16ece:	d0e1      	beq.n	16e94 <bt_conn_process_tx+0x70>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   16ed0:	2301      	movs	r3, #1
   16ed2:	461a      	mov	r2, r3
   16ed4:	e7e8      	b.n	16ea8 <bt_conn_process_tx+0x84>
			conn_tx_destroy(conn, tx);
   16ed6:	4631      	mov	r1, r6
   16ed8:	4620      	mov	r0, r4
}
   16eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   16ede:	f7ff b97f 	b.w	161e0 <conn_tx_destroy>
   16ee2:	bf00      	nop
   16ee4:	0002bcd3 	.word	0x0002bcd3
   16ee8:	0002a7df 	.word	0x0002a7df
   16eec:	20000380 	.word	0x20000380

00016ef0 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   16ef0:	4b0b      	ldr	r3, [pc, #44]	; (16f20 <bt_conn_auth_cb_register+0x30>)
   16ef2:	b158      	cbz	r0, 16f0c <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   16ef4:	681a      	ldr	r2, [r3, #0]
   16ef6:	b962      	cbnz	r2, 16f12 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   16ef8:	6902      	ldr	r2, [r0, #16]
   16efa:	b93a      	cbnz	r2, 16f0c <bt_conn_auth_cb_register+0x1c>
   16efc:	6802      	ldr	r2, [r0, #0]
   16efe:	b95a      	cbnz	r2, 16f18 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   16f00:	6842      	ldr	r2, [r0, #4]
   16f02:	b94a      	cbnz	r2, 16f18 <bt_conn_auth_cb_register+0x28>
   16f04:	6882      	ldr	r2, [r0, #8]
   16f06:	b93a      	cbnz	r2, 16f18 <bt_conn_auth_cb_register+0x28>
   16f08:	6942      	ldr	r2, [r0, #20]
   16f0a:	b92a      	cbnz	r2, 16f18 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   16f0c:	6018      	str	r0, [r3, #0]
		return 0;
   16f0e:	2000      	movs	r0, #0
   16f10:	4770      	bx	lr
		return -EALREADY;
   16f12:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16f16:	4770      	bx	lr
		return -EINVAL;
   16f18:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   16f1c:	4770      	bx	lr
   16f1e:	bf00      	nop
   16f20:	20002628 	.word	0x20002628

00016f24 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   16f24:	b168      	cbz	r0, 16f42 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   16f26:	2300      	movs	r3, #0
   16f28:	60c3      	str	r3, [r0, #12]
	return list->tail;
   16f2a:	4b07      	ldr	r3, [pc, #28]	; (16f48 <bt_conn_auth_info_cb_register+0x24>)
   16f2c:	6859      	ldr	r1, [r3, #4]
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   16f2e:	f100 020c 	add.w	r2, r0, #12
Z_GENLIST_APPEND(slist, snode)
   16f32:	b919      	cbnz	r1, 16f3c <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   16f34:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   16f38:	2000      	movs	r0, #0
   16f3a:	4770      	bx	lr
	parent->next = child;
   16f3c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   16f3e:	605a      	str	r2, [r3, #4]
}
   16f40:	e7fa      	b.n	16f38 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   16f42:	f06f 0015 	mvn.w	r0, #21
}
   16f46:	4770      	bx	lr
   16f48:	20002620 	.word	0x20002620

00016f4c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   16f4c:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   16f4e:	480c      	ldr	r0, [pc, #48]	; (16f80 <bt_conn_init+0x34>)
   16f50:	f012 f9df 	bl	29312 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   16f54:	490b      	ldr	r1, [pc, #44]	; (16f84 <bt_conn_init+0x38>)
   16f56:	480a      	ldr	r0, [pc, #40]	; (16f80 <bt_conn_init+0x34>)
   16f58:	f012 f9e8 	bl	2932c <k_queue_append>
   16f5c:	490a      	ldr	r1, [pc, #40]	; (16f88 <bt_conn_init+0x3c>)
   16f5e:	4808      	ldr	r0, [pc, #32]	; (16f80 <bt_conn_init+0x34>)
   16f60:	f012 f9e4 	bl	2932c <k_queue_append>
   16f64:	4909      	ldr	r1, [pc, #36]	; (16f8c <bt_conn_init+0x40>)
   16f66:	4806      	ldr	r0, [pc, #24]	; (16f80 <bt_conn_init+0x34>)
   16f68:	f012 f9e0 	bl	2932c <k_queue_append>
	}

	bt_att_init();
   16f6c:	f001 f826 	bl	17fbc <bt_att_init>

	err = bt_smp_init();
   16f70:	f004 f940 	bl	1b1f4 <bt_smp_init>
	if (err) {
   16f74:	4604      	mov	r4, r0
   16f76:	b908      	cbnz	r0, 16f7c <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   16f78:	f010 fb6f 	bl	2765a <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   16f7c:	4620      	mov	r0, r4
   16f7e:	bd10      	pop	{r4, pc}
   16f80:	20000978 	.word	0x20000978
   16f84:	200025ec 	.word	0x200025ec
   16f88:	200025fc 	.word	0x200025fc
   16f8c:	2000260c 	.word	0x2000260c

00016f90 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   16f90:	b508      	push	{r3, lr}
   16f92:	4602      	mov	r2, r0
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   16f94:	4807      	ldr	r0, [pc, #28]	; (16fb4 <l2cap_accept+0x24>)
   16f96:	6803      	ldr	r3, [r0, #0]
   16f98:	b923      	cbnz	r3, 16fa4 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   16f9a:	4a07      	ldr	r2, [pc, #28]	; (16fb8 <l2cap_accept+0x28>)
   16f9c:	6042      	str	r2, [r0, #4]
		*chan = &l2cap->chan.chan;
   16f9e:	6008      	str	r0, [r1, #0]

		return 0;
   16fa0:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   16fa2:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   16fa4:	4805      	ldr	r0, [pc, #20]	; (16fbc <l2cap_accept+0x2c>)
   16fa6:	2145      	movs	r1, #69	; 0x45
   16fa8:	f00e ffd8 	bl	25f5c <z_log_minimal_printk>
   16fac:	f06f 000b 	mvn.w	r0, #11
   16fb0:	e7f7      	b.n	16fa2 <l2cap_accept+0x12>
   16fb2:	bf00      	nop
   16fb4:	2000262c 	.word	0x2000262c
   16fb8:	00029e50 	.word	0x00029e50
   16fbc:	0002bf45 	.word	0x0002bf45

00016fc0 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   16fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16fc2:	4605      	mov	r5, r0
   16fc4:	460f      	mov	r7, r1
   16fc6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   16fc8:	2300      	movs	r3, #0
   16fca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16fce:	2104      	movs	r1, #4
   16fd0:	2000      	movs	r0, #0
   16fd2:	f7ff fc95 	bl	16900 <bt_conn_create_pdu_timeout>
	if (!buf) {
   16fd6:	4604      	mov	r4, r0
   16fd8:	b930      	cbnz	r0, 16fe8 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   16fda:	4807      	ldr	r0, [pc, #28]	; (16ff8 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   16fdc:	462a      	mov	r2, r5
   16fde:	2145      	movs	r1, #69	; 0x45
   16fe0:	f00e ffbc 	bl	25f5c <z_log_minimal_printk>
}
   16fe4:	4620      	mov	r0, r4
   16fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   16fe8:	2104      	movs	r1, #4
   16fea:	3008      	adds	r0, #8
   16fec:	f004 fe92 	bl	1bd14 <net_buf_simple_add>
	hdr->code = code;
   16ff0:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   16ff2:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   16ff4:	8046      	strh	r6, [r0, #2]
	return buf;
   16ff6:	e7f5      	b.n	16fe4 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   16ff8:	0002bf71 	.word	0x0002bf71

00016ffc <bt_l2cap_connected>:
{
   16ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16ffe:	4d2a      	ldr	r5, [pc, #168]	; (170a8 <bt_l2cap_connected+0xac>)
   17000:	4f2a      	ldr	r7, [pc, #168]	; (170ac <bt_l2cap_connected+0xb0>)
{
   17002:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17004:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17006:	42bd      	cmp	r5, r7
   17008:	d94a      	bls.n	170a0 <bt_l2cap_connected+0xa4>
   1700a:	4929      	ldr	r1, [pc, #164]	; (170b0 <bt_l2cap_connected+0xb4>)
   1700c:	4829      	ldr	r0, [pc, #164]	; (170b4 <bt_l2cap_connected+0xb8>)
   1700e:	f240 1281 	movw	r2, #385	; 0x181
   17012:	f00e ff95 	bl	25f40 <assert_print>
   17016:	4826      	ldr	r0, [pc, #152]	; (170b0 <bt_l2cap_connected+0xb4>)
   17018:	f240 1181 	movw	r1, #385	; 0x181
   1701c:	f00e ff89 	bl	25f32 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   17020:	686b      	ldr	r3, [r5, #4]
   17022:	a901      	add	r1, sp, #4
   17024:	4620      	mov	r0, r4
   17026:	4798      	blx	r3
   17028:	2800      	cmp	r0, #0
   1702a:	db34      	blt.n	17096 <bt_l2cap_connected+0x9a>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1702c:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1702e:	882a      	ldrh	r2, [r5, #0]
   17030:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   17032:	849a      	strh	r2, [r3, #36]	; 0x24
   17034:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   17038:	68a8      	ldr	r0, [r5, #8]
   1703a:	f3bf 8f5b 	dmb	ish
   1703e:	e852 1f00 	ldrex	r1, [r2]
   17042:	e842 6c00 	strex	ip, r6, [r2]
   17046:	f1bc 0f00 	cmp.w	ip, #0
   1704a:	d1f8      	bne.n	1703e <bt_l2cap_connected+0x42>
   1704c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   17050:	609e      	str	r6, [r3, #8]
	return list->tail;
   17052:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   17054:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   17058:	b9f9      	cbnz	r1, 1709a <bt_l2cap_connected+0x9e>
	list->head = node;
   1705a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   1705e:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   17060:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   17062:	9801      	ldr	r0, [sp, #4]
   17064:	6843      	ldr	r3, [r0, #4]
   17066:	681b      	ldr	r3, [r3, #0]
   17068:	b103      	cbz	r3, 1706c <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   1706a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1706c:	9b01      	ldr	r3, [sp, #4]
   1706e:	f3bf 8f5b 	dmb	ish
   17072:	3310      	adds	r3, #16
   17074:	e853 1f00 	ldrex	r1, [r3]
   17078:	f041 0101 	orr.w	r1, r1, #1
   1707c:	e843 1200 	strex	r2, r1, [r3]
   17080:	2a00      	cmp	r2, #0
   17082:	d1f7      	bne.n	17074 <bt_l2cap_connected+0x78>
   17084:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   17088:	9801      	ldr	r0, [sp, #4]
   1708a:	6843      	ldr	r3, [r0, #4]
   1708c:	69db      	ldr	r3, [r3, #28]
   1708e:	b113      	cbz	r3, 17096 <bt_l2cap_connected+0x9a>
			chan->ops->status(chan, chan->status);
   17090:	f100 0110 	add.w	r1, r0, #16
   17094:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17096:	350c      	adds	r5, #12
   17098:	e7b5      	b.n	17006 <bt_l2cap_connected+0xa>
	parent->next = child;
   1709a:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1709c:	65a2      	str	r2, [r4, #88]	; 0x58
}
   1709e:	e7de      	b.n	1705e <bt_l2cap_connected+0x62>
   170a0:	d3be      	bcc.n	17020 <bt_l2cap_connected+0x24>
}
   170a2:	b003      	add	sp, #12
   170a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   170a6:	bf00      	nop
   170a8:	00029978 	.word	0x00029978
   170ac:	0002999c 	.word	0x0002999c
   170b0:	0002bf9e 	.word	0x0002bf9e
   170b4:	0002a7df 	.word	0x0002a7df

000170b8 <l2cap_recv>:
{
   170b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   170ba:	898b      	ldrh	r3, [r1, #12]
   170bc:	2b03      	cmp	r3, #3
{
   170be:	4606      	mov	r6, r0
   170c0:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   170c2:	d804      	bhi.n	170ce <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
   170c4:	4822      	ldr	r0, [pc, #136]	; (17150 <l2cap_recv+0x98>)
   170c6:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
   170c8:	f00e ff48 	bl	25f5c <z_log_minimal_printk>
		return 0;
   170cc:	e00d      	b.n	170ea <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   170ce:	2104      	movs	r1, #4
   170d0:	f105 0008 	add.w	r0, r5, #8
   170d4:	f004 fe04 	bl	1bce0 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   170d8:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   170da:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   170dc:	4293      	cmp	r3, r2
   170de:	4604      	mov	r4, r0
   170e0:	d006      	beq.n	170f0 <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   170e2:	481c      	ldr	r0, [pc, #112]	; (17154 <l2cap_recv+0x9c>)
   170e4:	2145      	movs	r1, #69	; 0x45
   170e6:	f00e ff39 	bl	25f5c <z_log_minimal_printk>
}
   170ea:	2000      	movs	r0, #0
   170ec:	b002      	add	sp, #8
   170ee:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   170f0:	7842      	ldrb	r2, [r0, #1]
   170f2:	b912      	cbnz	r2, 170fa <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
   170f4:	4818      	ldr	r0, [pc, #96]	; (17158 <l2cap_recv+0xa0>)
   170f6:	2145      	movs	r1, #69	; 0x45
   170f8:	e7e6      	b.n	170c8 <l2cap_recv+0x10>
	switch (hdr->code) {
   170fa:	7802      	ldrb	r2, [r0, #0]
   170fc:	2a01      	cmp	r2, #1
   170fe:	d0f4      	beq.n	170ea <l2cap_recv+0x32>
   17100:	2a13      	cmp	r2, #19
   17102:	d104      	bne.n	1710e <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
   17104:	2b01      	cmp	r3, #1
   17106:	d8f0      	bhi.n	170ea <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
   17108:	4814      	ldr	r0, [pc, #80]	; (1715c <l2cap_recv+0xa4>)
   1710a:	2145      	movs	r1, #69	; 0x45
   1710c:	e7dc      	b.n	170c8 <l2cap_recv+0x10>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1710e:	4814      	ldr	r0, [pc, #80]	; (17160 <l2cap_recv+0xa8>)
   17110:	2157      	movs	r1, #87	; 0x57
   17112:	f00e ff23 	bl	25f5c <z_log_minimal_printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   17116:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   17118:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1711a:	2202      	movs	r2, #2
   1711c:	2001      	movs	r0, #1
   1711e:	f7ff ff4f 	bl	16fc0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   17122:	4604      	mov	r4, r0
   17124:	2800      	cmp	r0, #0
   17126:	d0e0      	beq.n	170ea <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
   17128:	2102      	movs	r1, #2
   1712a:	3008      	adds	r0, #8
   1712c:	f004 fdf2 	bl	1bd14 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   17130:	2300      	movs	r3, #0
   17132:	7003      	strb	r3, [r0, #0]
   17134:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   17136:	4622      	mov	r2, r4
   17138:	9300      	str	r3, [sp, #0]
   1713a:	2105      	movs	r1, #5
   1713c:	4628      	mov	r0, r5
   1713e:	f010 fa5f 	bl	27600 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   17142:	2800      	cmp	r0, #0
   17144:	d0d1      	beq.n	170ea <l2cap_recv+0x32>
		net_buf_unref(buf);
   17146:	4620      	mov	r0, r4
   17148:	f004 fcde 	bl	1bb08 <net_buf_unref>
   1714c:	e7cd      	b.n	170ea <l2cap_recv+0x32>
   1714e:	bf00      	nop
   17150:	0002bfcf 	.word	0x0002bfcf
   17154:	0002bff2 	.word	0x0002bff2
   17158:	0002c018 	.word	0x0002c018
   1715c:	0002c03e 	.word	0x0002c03e
   17160:	0002c05f 	.word	0x0002c05f

00017164 <bt_l2cap_recv>:
{
   17164:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   17166:	898b      	ldrh	r3, [r1, #12]
   17168:	2b03      	cmp	r3, #3
{
   1716a:	4605      	mov	r5, r0
   1716c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1716e:	d808      	bhi.n	17182 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   17170:	480e      	ldr	r0, [pc, #56]	; (171ac <bt_l2cap_recv+0x48>)
   17172:	2145      	movs	r1, #69	; 0x45
   17174:	f00e fef2 	bl	25f5c <z_log_minimal_printk>
	net_buf_unref(buf);
   17178:	4620      	mov	r0, r4
}
   1717a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1717e:	f004 bcc3 	b.w	1bb08 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   17182:	2104      	movs	r1, #4
   17184:	f104 0008 	add.w	r0, r4, #8
   17188:	f004 fdaa 	bl	1bce0 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1718c:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1718e:	4628      	mov	r0, r5
   17190:	4611      	mov	r1, r2
   17192:	f010 fa58 	bl	27646 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17196:	b920      	cbnz	r0, 171a2 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   17198:	4805      	ldr	r0, [pc, #20]	; (171b0 <bt_l2cap_recv+0x4c>)
   1719a:	2157      	movs	r1, #87	; 0x57
   1719c:	f00e fede 	bl	25f5c <z_log_minimal_printk>
		net_buf_unref(buf);
   171a0:	e7ea      	b.n	17178 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   171a2:	6843      	ldr	r3, [r0, #4]
   171a4:	4621      	mov	r1, r4
   171a6:	695b      	ldr	r3, [r3, #20]
   171a8:	4798      	blx	r3
   171aa:	e7e5      	b.n	17178 <bt_l2cap_recv+0x14>
   171ac:	0002c08c 	.word	0x0002c08c
   171b0:	0002c0ae 	.word	0x0002c0ae

000171b4 <bt_l2cap_update_conn_param>:
{
   171b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   171b6:	4b17      	ldr	r3, [pc, #92]	; (17214 <bt_l2cap_update_conn_param+0x60>)
{
   171b8:	460e      	mov	r6, r1
	ident++;
   171ba:	7819      	ldrb	r1, [r3, #0]
   171bc:	3101      	adds	r1, #1
   171be:	b2c9      	uxtb	r1, r1
   171c0:	2901      	cmp	r1, #1
   171c2:	bf38      	it	cc
   171c4:	2101      	movcc	r1, #1
{
   171c6:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   171c8:	2208      	movs	r2, #8
   171ca:	2012      	movs	r0, #18
	ident++;
   171cc:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   171ce:	f7ff fef7 	bl	16fc0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   171d2:	4604      	mov	r4, r0
   171d4:	b1d0      	cbz	r0, 1720c <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   171d6:	2108      	movs	r1, #8
   171d8:	4408      	add	r0, r1
   171da:	f004 fd9b 	bl	1bd14 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   171de:	8833      	ldrh	r3, [r6, #0]
   171e0:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   171e2:	8873      	ldrh	r3, [r6, #2]
   171e4:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   171e6:	88b3      	ldrh	r3, [r6, #4]
   171e8:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   171ea:	88f3      	ldrh	r3, [r6, #6]
   171ec:	80c3      	strh	r3, [r0, #6]
   171ee:	2300      	movs	r3, #0
   171f0:	4628      	mov	r0, r5
   171f2:	9300      	str	r3, [sp, #0]
   171f4:	4622      	mov	r2, r4
   171f6:	2105      	movs	r1, #5
   171f8:	f010 fa02 	bl	27600 <bt_l2cap_send_cb>
	if (err) {
   171fc:	4605      	mov	r5, r0
   171fe:	b110      	cbz	r0, 17206 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   17200:	4620      	mov	r0, r4
   17202:	f004 fc81 	bl	1bb08 <net_buf_unref>
}
   17206:	4628      	mov	r0, r5
   17208:	b002      	add	sp, #8
   1720a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1720c:	f06f 050b 	mvn.w	r5, #11
   17210:	e7f9      	b.n	17206 <bt_l2cap_update_conn_param+0x52>
   17212:	bf00      	nop
   17214:	20003684 	.word	0x20003684

00017218 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   17218:	2823      	cmp	r0, #35	; 0x23
   1721a:	d81f      	bhi.n	1725c <att_op_get_type+0x44>
   1721c:	281a      	cmp	r0, #26
   1721e:	d804      	bhi.n	1722a <att_op_get_type+0x12>
   17220:	1e43      	subs	r3, r0, #1
   17222:	2b18      	cmp	r3, #24
   17224:	d90e      	bls.n	17244 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   17226:	2006      	movs	r0, #6
   17228:	4770      	bx	lr
	switch (op) {
   1722a:	f1a0 031b 	sub.w	r3, r0, #27
   1722e:	2b08      	cmp	r3, #8
   17230:	d81e      	bhi.n	17270 <att_op_get_type+0x58>
   17232:	e8df f003 	tbb	[pc, r3]
   17236:	1d05      	.short	0x1d05
   17238:	191d231b 	.word	0x191d231b
   1723c:	1d25      	.short	0x1d25
   1723e:	05          	.byte	0x05
   1723f:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   17240:	2003      	movs	r0, #3
   17242:	4770      	bx	lr
	switch (op) {
   17244:	4a0f      	ldr	r2, [pc, #60]	; (17284 <att_op_get_type+0x6c>)
   17246:	2301      	movs	r3, #1
   17248:	4083      	lsls	r3, r0
   1724a:	401a      	ands	r2, r3
   1724c:	b9c2      	cbnz	r2, 17280 <att_op_get_type+0x68>
   1724e:	4a0e      	ldr	r2, [pc, #56]	; (17288 <att_op_get_type+0x70>)
   17250:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   17252:	2a00      	cmp	r2, #0
   17254:	bf14      	ite	ne
   17256:	2001      	movne	r0, #1
   17258:	2006      	moveq	r0, #6
   1725a:	4770      	bx	lr
	switch (op) {
   1725c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   17260:	2b52      	cmp	r3, #82	; 0x52
   17262:	d105      	bne.n	17270 <att_op_get_type+0x58>
		return ATT_COMMAND;
   17264:	2000      	movs	r0, #0
}
   17266:	4770      	bx	lr
		return ATT_REQUEST;
   17268:	2001      	movs	r0, #1
   1726a:	4770      	bx	lr
		return ATT_INDICATION;
   1726c:	2005      	movs	r0, #5
   1726e:	4770      	bx	lr
		return ATT_COMMAND;
   17270:	f010 0f40 	tst.w	r0, #64	; 0x40
   17274:	bf0c      	ite	eq
   17276:	2006      	moveq	r0, #6
   17278:	2000      	movne	r0, #0
   1727a:	4770      	bx	lr
	switch (op) {
   1727c:	2004      	movs	r0, #4
   1727e:	4770      	bx	lr
		return ATT_RESPONSE;
   17280:	2002      	movs	r0, #2
   17282:	4770      	bx	lr
   17284:	028aaaaa 	.word	0x028aaaaa
   17288:	01455554 	.word	0x01455554

0001728c <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1728c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1728e:	7b43      	ldrb	r3, [r0, #13]
   17290:	2b07      	cmp	r3, #7
   17292:	d005      	beq.n	172a0 <att_get+0x14>
		BT_WARN("Not connected");
   17294:	4810      	ldr	r0, [pc, #64]	; (172d8 <att_get+0x4c>)
   17296:	2157      	movs	r1, #87	; 0x57
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
	if (!chan) {
		BT_ERR("Unable to find ATT channel");
   17298:	f00e fe60 	bl	25f5c <z_log_minimal_printk>
		return NULL;
   1729c:	2000      	movs	r0, #0
	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
}
   1729e:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   172a0:	2104      	movs	r1, #4
   172a2:	f010 f9d0 	bl	27646 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   172a6:	4603      	mov	r3, r0
   172a8:	b910      	cbnz	r0, 172b0 <att_get+0x24>
		BT_ERR("Unable to find ATT channel");
   172aa:	480c      	ldr	r0, [pc, #48]	; (172dc <att_get+0x50>)
   172ac:	2145      	movs	r1, #69	; 0x45
   172ae:	e7f3      	b.n	17298 <att_get+0xc>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   172b0:	2102      	movs	r1, #2
   172b2:	3094      	adds	r0, #148	; 0x94
   172b4:	f010 f9f6 	bl	276a4 <atomic_test_bit>
   172b8:	b950      	cbnz	r0, 172d0 <att_get+0x44>
   172ba:	4909      	ldr	r1, [pc, #36]	; (172e0 <att_get+0x54>)
   172bc:	4809      	ldr	r0, [pc, #36]	; (172e4 <att_get+0x58>)
   172be:	f640 322e 	movw	r2, #2862	; 0xb2e
   172c2:	f00e fe3d 	bl	25f40 <assert_print>
   172c6:	4806      	ldr	r0, [pc, #24]	; (172e0 <att_get+0x54>)
   172c8:	f640 312e 	movw	r1, #2862	; 0xb2e
   172cc:	f00e fe31 	bl	25f32 <assert_post_action>
	return att_chan->att;
   172d0:	f853 0c04 	ldr.w	r0, [r3, #-4]
   172d4:	e7e3      	b.n	1729e <att_get+0x12>
   172d6:	bf00      	nop
   172d8:	0002c0ef 	.word	0x0002c0ef
   172dc:	0002c102 	.word	0x0002c102
   172e0:	0002c122 	.word	0x0002c122
   172e4:	0002a7df 	.word	0x0002a7df

000172e8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   172e8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   172ea:	3804      	subs	r0, #4
   172ec:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   172ee:	a901      	add	r1, sp, #4
   172f0:	4802      	ldr	r0, [pc, #8]	; (172fc <bt_att_released+0x14>)
   172f2:	f008 fd1b 	bl	1fd2c <k_mem_slab_free>
}
   172f6:	b003      	add	sp, #12
   172f8:	f85d fb04 	ldr.w	pc, [sp], #4
   172fc:	2000088c 	.word	0x2000088c

00017300 <find_type_cb>:
{
   17300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17304:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   17306:	f8d2 9000 	ldr.w	r9, [r2]
{
   1730a:	4607      	mov	r7, r0
   1730c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1730e:	2500      	movs	r5, #0
   17310:	f642 0301 	movw	r3, #10241	; 0x2801
   17314:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   17316:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1731a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1731e:	a90b      	add	r1, sp, #44	; 0x2c
{
   17320:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17322:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   17326:	f00f fd1c 	bl	26d62 <bt_uuid_cmp>
   1732a:	2800      	cmp	r0, #0
   1732c:	d060      	beq.n	173f0 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1732e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17332:	6838      	ldr	r0, [r7, #0]
   17334:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   17338:	a90b      	add	r1, sp, #44	; 0x2c
   1733a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1733e:	f00f fd10 	bl	26d62 <bt_uuid_cmp>
   17342:	b138      	cbz	r0, 17354 <find_type_cb+0x54>
		if (data->group &&
   17344:	68a3      	ldr	r3, [r4, #8]
   17346:	b11b      	cbz	r3, 17350 <find_type_cb+0x50>
   17348:	885a      	ldrh	r2, [r3, #2]
   1734a:	42b2      	cmp	r2, r6
   1734c:	d200      	bcs.n	17350 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1734e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   17350:	2001      	movs	r0, #1
   17352:	e009      	b.n	17368 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   17354:	6861      	ldr	r1, [r4, #4]
   17356:	4608      	mov	r0, r1
   17358:	f010 f98a 	bl	27670 <net_buf_frags_len>
   1735c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   17360:	1a1b      	subs	r3, r3, r0
   17362:	2b03      	cmp	r3, #3
   17364:	d803      	bhi.n	1736e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   17366:	2000      	movs	r0, #0
}
   17368:	b011      	add	sp, #68	; 0x44
   1736a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1736e:	4608      	mov	r0, r1
   17370:	f004 fc22 	bl	1bbb8 <net_buf_frag_last>
   17374:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   17376:	6860      	ldr	r0, [r4, #4]
   17378:	f010 f97a 	bl	27670 <net_buf_frags_len>
   1737c:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   17380:	f105 0b08 	add.w	fp, r5, #8
   17384:	ebaa 0a00 	sub.w	sl, sl, r0
   17388:	4658      	mov	r0, fp
   1738a:	f011 fba6 	bl	28ada <net_buf_simple_tailroom>
   1738e:	4582      	cmp	sl, r0
   17390:	d231      	bcs.n	173f6 <find_type_cb+0xf6>
   17392:	6860      	ldr	r0, [r4, #4]
   17394:	f010 f96c 	bl	27670 <net_buf_frags_len>
   17398:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1739c:	1a18      	subs	r0, r3, r0
	if (!len) {
   1739e:	b970      	cbnz	r0, 173be <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   173a0:	6863      	ldr	r3, [r4, #4]
   173a2:	7998      	ldrb	r0, [r3, #6]
   173a4:	f004 f974 	bl	1b690 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   173a8:	2200      	movs	r2, #0
   173aa:	2300      	movs	r3, #0
   173ac:	f011 fb84 	bl	28ab8 <net_buf_alloc_fixed>
		if (!frag) {
   173b0:	4605      	mov	r5, r0
   173b2:	2800      	cmp	r0, #0
   173b4:	d0d7      	beq.n	17366 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   173b6:	4601      	mov	r1, r0
   173b8:	6860      	ldr	r0, [r4, #4]
   173ba:	f004 fc3b 	bl	1bc34 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   173be:	2300      	movs	r3, #0
   173c0:	9300      	str	r3, [sp, #0]
   173c2:	f8d7 9004 	ldr.w	r9, [r7, #4]
   173c6:	4639      	mov	r1, r7
   173c8:	2310      	movs	r3, #16
   173ca:	aa02      	add	r2, sp, #8
   173cc:	4640      	mov	r0, r8
   173ce:	47c8      	blx	r9
	if (read < 0) {
   173d0:	1e07      	subs	r7, r0, #0
   173d2:	db0d      	blt.n	173f0 <find_type_cb+0xf0>
	if (read != data->value_len) {
   173d4:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   173d6:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   173d8:	42ba      	cmp	r2, r7
   173da:	d02b      	beq.n	17434 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   173dc:	4601      	mov	r1, r0
   173de:	a80b      	add	r0, sp, #44	; 0x2c
   173e0:	f00f fced 	bl	26dbe <bt_uuid_create>
   173e4:	b958      	cbnz	r0, 173fe <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   173e6:	7c22      	ldrb	r2, [r4, #16]
   173e8:	4814      	ldr	r0, [pc, #80]	; (1743c <find_type_cb+0x13c>)
   173ea:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
   173ec:	f00e fdb6 	bl	25f5c <z_log_minimal_printk>
	data->group = NULL;
   173f0:	2300      	movs	r3, #0
   173f2:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   173f4:	e7ac      	b.n	17350 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   173f6:	4658      	mov	r0, fp
   173f8:	f011 fb6f 	bl	28ada <net_buf_simple_tailroom>
   173fc:	e7cf      	b.n	1739e <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   173fe:	b2fa      	uxtb	r2, r7
   17400:	a902      	add	r1, sp, #8
   17402:	a806      	add	r0, sp, #24
   17404:	f00f fcdb 	bl	26dbe <bt_uuid_create>
   17408:	b918      	cbnz	r0, 17412 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   1740a:	480d      	ldr	r0, [pc, #52]	; (17440 <find_type_cb+0x140>)
   1740c:	463a      	mov	r2, r7
   1740e:	2157      	movs	r1, #87	; 0x57
   17410:	e7ec      	b.n	173ec <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   17412:	a906      	add	r1, sp, #24
   17414:	a80b      	add	r0, sp, #44	; 0x2c
   17416:	f00f fca4 	bl	26d62 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1741a:	2800      	cmp	r0, #0
   1741c:	d1e8      	bne.n	173f0 <find_type_cb+0xf0>
	data->err = 0x00;
   1741e:	2300      	movs	r3, #0
   17420:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   17422:	2104      	movs	r1, #4
   17424:	f105 0008 	add.w	r0, r5, #8
   17428:	f004 fc74 	bl	1bd14 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1742c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1742e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   17430:	68a3      	ldr	r3, [r4, #8]
   17432:	e78c      	b.n	1734e <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   17434:	a902      	add	r1, sp, #8
   17436:	f00f fbfa 	bl	26c2e <memcmp>
   1743a:	e7ee      	b.n	1741a <find_type_cb+0x11a>
   1743c:	0002c151 	.word	0x0002c151
   17440:	0002c175 	.word	0x0002c175

00017444 <tx_meta_data_free>:
{
   17444:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   17446:	4604      	mov	r4, r0
   17448:	b940      	cbnz	r0, 1745c <tx_meta_data_free+0x18>
   1744a:	4909      	ldr	r1, [pc, #36]	; (17470 <tx_meta_data_free+0x2c>)
   1744c:	4809      	ldr	r0, [pc, #36]	; (17474 <tx_meta_data_free+0x30>)
   1744e:	22a5      	movs	r2, #165	; 0xa5
   17450:	f00e fd76 	bl	25f40 <assert_print>
   17454:	4806      	ldr	r0, [pc, #24]	; (17470 <tx_meta_data_free+0x2c>)
   17456:	21a5      	movs	r1, #165	; 0xa5
   17458:	f00e fd6b 	bl	25f32 <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   1745c:	2100      	movs	r1, #0
   1745e:	2214      	movs	r2, #20
   17460:	f00f fc17 	bl	26c92 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   17464:	4621      	mov	r1, r4
   17466:	4804      	ldr	r0, [pc, #16]	; (17478 <tx_meta_data_free+0x34>)
}
   17468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1746c:	f011 bf5e 	b.w	2932c <k_queue_append>
   17470:	0002c122 	.word	0x0002c122
   17474:	0002a7df 	.word	0x0002a7df
   17478:	2000095c 	.word	0x2000095c

0001747c <chan_send>:
{
   1747c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17480:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   17482:	f8d1 8014 	ldr.w	r8, [r1, #20]
	hdr = (void *)buf->data;
   17486:	688b      	ldr	r3, [r1, #8]
{
   17488:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1748a:	3098      	adds	r0, #152	; 0x98
   1748c:	2102      	movs	r1, #2
   1748e:	f010 f909 	bl	276a4 <atomic_test_bit>
   17492:	2800      	cmp	r0, #0
   17494:	d047      	beq.n	17526 <chan_send+0xaa>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   17496:	781b      	ldrb	r3, [r3, #0]
   17498:	2bd2      	cmp	r3, #210	; 0xd2
   1749a:	d114      	bne.n	174c6 <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
   1749c:	6833      	ldr	r3, [r6, #0]
   1749e:	4621      	mov	r1, r4
   174a0:	6818      	ldr	r0, [r3, #0]
   174a2:	f011 fa92 	bl	289ca <bt_smp_sign>
		if (err) {
   174a6:	4605      	mov	r5, r0
   174a8:	b168      	cbz	r0, 174c6 <chan_send+0x4a>
			BT_ERR("Error signing data");
   174aa:	4820      	ldr	r0, [pc, #128]	; (1752c <chan_send+0xb0>)
   174ac:	2145      	movs	r1, #69	; 0x45
   174ae:	f00e fd55 	bl	25f5c <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   174b2:	6960      	ldr	r0, [r4, #20]
   174b4:	f7ff ffc6 	bl	17444 <tx_meta_data_free>
			net_buf_unref(buf);
   174b8:	4620      	mov	r0, r4
   174ba:	f004 fb25 	bl	1bb08 <net_buf_unref>
}
   174be:	4628      	mov	r0, r5
   174c0:	b003      	add	sp, #12
   174c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   174c6:	f104 0008 	add.w	r0, r4, #8
   174ca:	f011 fb02 	bl	28ad2 <net_buf_simple_headroom>
	state->len = buf->len;
   174ce:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	data->att_chan = chan;
   174d2:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   174d6:	6833      	ldr	r3, [r6, #0]
   174d8:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   174da:	68a3      	ldr	r3, [r4, #8]
	state->offset = net_buf_simple_headroom(buf);
   174dc:	4607      	mov	r7, r0
   174de:	7818      	ldrb	r0, [r3, #0]
   174e0:	f7ff fe9a 	bl	17218 <att_op_get_type>
	switch (op_type) {
   174e4:	2805      	cmp	r0, #5
   174e6:	d813      	bhi.n	17510 <chan_send+0x94>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   174e8:	4b11      	ldr	r3, [pc, #68]	; (17530 <chan_send+0xb4>)
   174ea:	f8cd 8000 	str.w	r8, [sp]
   174ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   174f2:	4622      	mov	r2, r4
   174f4:	4628      	mov	r0, r5
   174f6:	2104      	movs	r1, #4
   174f8:	f010 f882 	bl	27600 <bt_l2cap_send_cb>
	if (err) {
   174fc:	4605      	mov	r5, r0
   174fe:	2800      	cmp	r0, #0
   17500:	d0dd      	beq.n	174be <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
   17502:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   17504:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   17508:	fa13 f787 	uxtah	r7, r3, r7
   1750c:	60a7      	str	r7, [r4, #8]
}
   1750e:	e7d6      	b.n	174be <chan_send+0x42>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   17510:	4908      	ldr	r1, [pc, #32]	; (17534 <chan_send+0xb8>)
   17512:	4809      	ldr	r0, [pc, #36]	; (17538 <chan_send+0xbc>)
   17514:	f240 2257 	movw	r2, #599	; 0x257
   17518:	f00e fd12 	bl	25f40 <assert_print>
   1751c:	4805      	ldr	r0, [pc, #20]	; (17534 <chan_send+0xb8>)
   1751e:	f240 2157 	movw	r1, #599	; 0x257
   17522:	f00e fd06 	bl	25f32 <assert_post_action>
		return -EINVAL;
   17526:	f06f 0515 	mvn.w	r5, #21
   1752a:	e7c8      	b.n	174be <chan_send+0x42>
   1752c:	0002c199 	.word	0x0002c199
   17530:	00029e78 	.word	0x00029e78
   17534:	0002c122 	.word	0x0002c122
   17538:	0002a7df 	.word	0x0002a7df

0001753c <bt_att_chan_req_send>:
{
   1753c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   1753e:	b950      	cbnz	r0, 17556 <bt_att_chan_req_send+0x1a>
   17540:	4917      	ldr	r1, [pc, #92]	; (175a0 <bt_att_chan_req_send+0x64>)
   17542:	4818      	ldr	r0, [pc, #96]	; (175a4 <bt_att_chan_req_send+0x68>)
   17544:	f44f 7246 	mov.w	r2, #792	; 0x318
   17548:	f00e fcfa 	bl	25f40 <assert_print>
   1754c:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   17550:	4813      	ldr	r0, [pc, #76]	; (175a0 <bt_att_chan_req_send+0x64>)
   17552:	f00e fcee 	bl	25f32 <assert_post_action>
   17556:	b941      	cbnz	r1, 1756a <bt_att_chan_req_send+0x2e>
   17558:	4911      	ldr	r1, [pc, #68]	; (175a0 <bt_att_chan_req_send+0x64>)
   1755a:	4812      	ldr	r0, [pc, #72]	; (175a4 <bt_att_chan_req_send+0x68>)
   1755c:	f240 3219 	movw	r2, #793	; 0x319
   17560:	f00e fcee 	bl	25f40 <assert_print>
   17564:	f240 3119 	movw	r1, #793	; 0x319
   17568:	e7f2      	b.n	17550 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(req->func);
   1756a:	684a      	ldr	r2, [r1, #4]
   1756c:	b942      	cbnz	r2, 17580 <bt_att_chan_req_send+0x44>
   1756e:	490c      	ldr	r1, [pc, #48]	; (175a0 <bt_att_chan_req_send+0x64>)
   17570:	480c      	ldr	r0, [pc, #48]	; (175a4 <bt_att_chan_req_send+0x68>)
   17572:	f240 321a 	movw	r2, #794	; 0x31a
   17576:	f00e fce3 	bl	25f40 <assert_print>
   1757a:	f240 311a 	movw	r1, #794	; 0x31a
   1757e:	e7e7      	b.n	17550 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(!chan->req);
   17580:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   17584:	b143      	cbz	r3, 17598 <bt_att_chan_req_send+0x5c>
   17586:	4906      	ldr	r1, [pc, #24]	; (175a0 <bt_att_chan_req_send+0x64>)
   17588:	4806      	ldr	r0, [pc, #24]	; (175a4 <bt_att_chan_req_send+0x68>)
   1758a:	f240 321b 	movw	r2, #795	; 0x31b
   1758e:	f00e fcd7 	bl	25f40 <assert_print>
   17592:	f240 311b 	movw	r1, #795	; 0x31b
   17596:	e7db      	b.n	17550 <bt_att_chan_req_send+0x14>
}
   17598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   1759c:	f010 b956 	b.w	2784c <chan_req_send>
   175a0:	0002c122 	.word	0x0002c122
   175a4:	0002a7df 	.word	0x0002a7df

000175a8 <bt_att_connected>:
{
   175a8:	b510      	push	{r4, lr}
   175aa:	f100 0394 	add.w	r3, r0, #148	; 0x94
   175ae:	4604      	mov	r4, r0
   175b0:	f3bf 8f5b 	dmb	ish
   175b4:	e853 1f00 	ldrex	r1, [r3]
   175b8:	f041 0104 	orr.w	r1, r1, #4
   175bc:	e843 1200 	strex	r2, r1, [r3]
   175c0:	2a00      	cmp	r2, #0
   175c2:	d1f7      	bne.n	175b4 <bt_att_connected+0xc>
   175c4:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   175c8:	2317      	movs	r3, #23
   175ca:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   175cc:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   175ce:	1f20      	subs	r0, r4, #4
   175d0:	f010 f8f9 	bl	277c6 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   175d4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   175d8:	4903      	ldr	r1, [pc, #12]	; (175e8 <bt_att_connected+0x40>)
   175da:	f009 fb4d 	bl	20c78 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   175de:	6820      	ldr	r0, [r4, #0]
}
   175e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   175e4:	f002 b91a 	b.w	1981c <bt_gatt_connected>
   175e8:	000181ad 	.word	0x000181ad

000175ec <read_group_cb>:
{
   175ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   175f0:	4605      	mov	r5, r0
   175f2:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   175f4:	f04f 0800 	mov.w	r8, #0
   175f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   175fc:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   175fe:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17600:	f88d 8008 	strb.w	r8, [sp, #8]
   17604:	a902      	add	r1, sp, #8
{
   17606:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17608:	f8ad 300a 	strh.w	r3, [sp, #10]
   1760c:	f00f fba9 	bl	26d62 <bt_uuid_cmp>
   17610:	b1a0      	cbz	r0, 1763c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17612:	f642 0301 	movw	r3, #10241	; 0x2801
   17616:	6828      	ldr	r0, [r5, #0]
   17618:	f88d 800c 	strb.w	r8, [sp, #12]
   1761c:	a903      	add	r1, sp, #12
   1761e:	f8ad 300e 	strh.w	r3, [sp, #14]
   17622:	f00f fb9e 	bl	26d62 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17626:	b148      	cbz	r0, 1763c <read_group_cb+0x50>
		if (data->group &&
   17628:	6923      	ldr	r3, [r4, #16]
   1762a:	b11b      	cbz	r3, 17634 <read_group_cb+0x48>
   1762c:	885a      	ldrh	r2, [r3, #2]
   1762e:	42b2      	cmp	r2, r6
   17630:	d200      	bcs.n	17634 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   17632:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   17634:	2001      	movs	r0, #1
}
   17636:	b004      	add	sp, #16
   17638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1763c:	6861      	ldr	r1, [r4, #4]
   1763e:	6828      	ldr	r0, [r5, #0]
   17640:	f00f fb8f 	bl	26d62 <bt_uuid_cmp>
   17644:	b110      	cbz	r0, 1764c <read_group_cb+0x60>
		data->group = NULL;
   17646:	2300      	movs	r3, #0
   17648:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1764a:	e7f3      	b.n	17634 <read_group_cb+0x48>
	if (data->rsp->len &&
   1764c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1764e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   17650:	781a      	ldrb	r2, [r3, #0]
   17652:	b132      	cbz	r2, 17662 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   17654:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   17656:	8981      	ldrh	r1, [r0, #12]
   17658:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1765a:	4293      	cmp	r3, r2
   1765c:	da01      	bge.n	17662 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1765e:	2000      	movs	r0, #0
   17660:	e7e9      	b.n	17636 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   17662:	2104      	movs	r1, #4
   17664:	3008      	adds	r0, #8
   17666:	f004 fb55 	bl	1bd14 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1766a:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1766c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1766e:	6923      	ldr	r3, [r4, #16]
   17670:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   17672:	4b08      	ldr	r3, [pc, #32]	; (17694 <read_group_cb+0xa8>)
   17674:	9300      	str	r3, [sp, #0]
   17676:	9401      	str	r4, [sp, #4]
   17678:	68a2      	ldr	r2, [r4, #8]
   1767a:	2300      	movs	r3, #0
   1767c:	4629      	mov	r1, r5
   1767e:	4638      	mov	r0, r7
   17680:	f010 f925 	bl	278ce <att_chan_read>
	if (read < 0) {
   17684:	2800      	cmp	r0, #0
   17686:	dbea      	blt.n	1765e <read_group_cb+0x72>
	if (!data->group) {
   17688:	6920      	ldr	r0, [r4, #16]
   1768a:	3800      	subs	r0, #0
   1768c:	bf18      	it	ne
   1768e:	2001      	movne	r0, #1
   17690:	e7d1      	b.n	17636 <read_group_cb+0x4a>
   17692:	bf00      	nop
   17694:	0002782d 	.word	0x0002782d

00017698 <read_type_cb>:
{
   17698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1769c:	6817      	ldr	r7, [r2, #0]
{
   1769e:	4605      	mov	r5, r0
   176a0:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   176a2:	6800      	ldr	r0, [r0, #0]
   176a4:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   176a6:	687e      	ldr	r6, [r7, #4]
{
   176a8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   176aa:	f00f fb5a 	bl	26d62 <bt_uuid_cmp>
   176ae:	4681      	mov	r9, r0
   176b0:	2800      	cmp	r0, #0
   176b2:	d13c      	bne.n	1772e <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   176b4:	4630      	mov	r0, r6
   176b6:	2295      	movs	r2, #149	; 0x95
   176b8:	4629      	mov	r1, r5
   176ba:	f010 fe23 	bl	28304 <bt_gatt_check_perm>
   176be:	4606      	mov	r6, r0
   176c0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   176c2:	b140      	cbz	r0, 176d6 <read_type_cb+0x3e>
		if (data->rsp->len) {
   176c4:	68e3      	ldr	r3, [r4, #12]
   176c6:	781b      	ldrb	r3, [r3, #0]
   176c8:	b10b      	cbz	r3, 176ce <read_type_cb+0x36>
			data->err = 0x00;
   176ca:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   176ce:	2000      	movs	r0, #0
}
   176d0:	b003      	add	sp, #12
   176d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   176d6:	68a0      	ldr	r0, [r4, #8]
   176d8:	f004 fa6e 	bl	1bbb8 <net_buf_frag_last>
   176dc:	2102      	movs	r1, #2
   176de:	3008      	adds	r0, #8
   176e0:	f004 fb18 	bl	1bd14 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   176e4:	4b13      	ldr	r3, [pc, #76]	; (17734 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   176e6:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   176e8:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   176ec:	9300      	str	r3, [sp, #0]
   176ee:	9401      	str	r4, [sp, #4]
   176f0:	68a2      	ldr	r2, [r4, #8]
   176f2:	4633      	mov	r3, r6
   176f4:	4629      	mov	r1, r5
   176f6:	4638      	mov	r0, r7
   176f8:	f010 f8e9 	bl	278ce <att_chan_read>
	if (read < 0) {
   176fc:	2800      	cmp	r0, #0
   176fe:	da07      	bge.n	17710 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   17700:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   17704:	bf26      	itte	cs
   17706:	4240      	negcs	r0, r0
   17708:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1770a:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1770c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1770e:	e7de      	b.n	176ce <read_type_cb+0x36>
	if (!data->item) {
   17710:	6923      	ldr	r3, [r4, #16]
   17712:	2b00      	cmp	r3, #0
   17714:	d0db      	beq.n	176ce <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   17716:	68a0      	ldr	r0, [r4, #8]
   17718:	f00f ffaa 	bl	27670 <net_buf_frags_len>
   1771c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1771e:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   17720:	68e3      	ldr	r3, [r4, #12]
   17722:	781b      	ldrb	r3, [r3, #0]
   17724:	4298      	cmp	r0, r3
   17726:	bf94      	ite	ls
   17728:	2000      	movls	r0, #0
   1772a:	2001      	movhi	r0, #1
   1772c:	e7d0      	b.n	176d0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1772e:	2001      	movs	r0, #1
   17730:	e7ce      	b.n	176d0 <read_type_cb+0x38>
   17732:	bf00      	nop
   17734:	00027681 	.word	0x00027681

00017738 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   17738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1773a:	2300      	movs	r3, #0
{
   1773c:	4604      	mov	r4, r0
   1773e:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   17740:	482e      	ldr	r0, [pc, #184]	; (177fc <bt_att_accept+0xc4>)
   17742:	2200      	movs	r2, #0
   17744:	4669      	mov	r1, sp
   17746:	f008 fa99 	bl	1fc7c <k_mem_slab_alloc>
   1774a:	4605      	mov	r5, r0
   1774c:	b148      	cbz	r0, 17762 <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   1774e:	482c      	ldr	r0, [pc, #176]	; (17800 <bt_att_accept+0xc8>)
   17750:	4622      	mov	r2, r4
   17752:	2145      	movs	r1, #69	; 0x45
		BT_WARN("No available ATT channel for conn %p", att->conn);
   17754:	f00e fc02 	bl	25f5c <z_log_minimal_printk>
		return -ENOMEM;
   17758:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1775c:	4628      	mov	r0, r5
   1775e:	b003      	add	sp, #12
   17760:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   17762:	f00a fad1 	bl	21d08 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   17766:	4b27      	ldr	r3, [pc, #156]	; (17804 <bt_att_accept+0xcc>)
	(void)memset(att, 0, sizeof(*att));
   17768:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   1776a:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   1776c:	2230      	movs	r2, #48	; 0x30
   1776e:	9800      	ldr	r0, [sp, #0]
   17770:	f00f fa8f 	bl	26c92 <memset>
	att->conn = conn;
   17774:	9b00      	ldr	r3, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   17776:	4824      	ldr	r0, [pc, #144]	; (17808 <bt_att_accept+0xd0>)
	att->conn = conn;
   17778:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   1777a:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1777c:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
   1777e:	e9c4 5501 	strd	r5, r5, [r4, #4]
   17782:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   17786:	2200      	movs	r2, #0
   17788:	2300      	movs	r3, #0
   1778a:	a901      	add	r1, sp, #4
   1778c:	f008 fa76 	bl	1fc7c <k_mem_slab_alloc>
   17790:	4605      	mov	r5, r0
   17792:	b118      	cbz	r0, 1779c <bt_att_accept+0x64>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   17794:	6822      	ldr	r2, [r4, #0]
   17796:	481d      	ldr	r0, [pc, #116]	; (1780c <bt_att_accept+0xd4>)
   17798:	2157      	movs	r1, #87	; 0x57
   1779a:	e7db      	b.n	17754 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   1779c:	4601      	mov	r1, r0
   1779e:	22f8      	movs	r2, #248	; 0xf8
   177a0:	9801      	ldr	r0, [sp, #4]
   177a2:	f00f fa76 	bl	26c92 <memset>
	chan->chan.chan.ops = &ops;
   177a6:	9801      	ldr	r0, [sp, #4]
   177a8:	4b19      	ldr	r3, [pc, #100]	; (17810 <bt_att_accept+0xd8>)
   177aa:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   177ac:	30a0      	adds	r0, #160	; 0xa0
   177ae:	f011 fdb0 	bl	29312 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   177b2:	9b01      	ldr	r3, [sp, #4]
   177b4:	f3bf 8f5b 	dmb	ish
   177b8:	3398      	adds	r3, #152	; 0x98
   177ba:	e853 2f00 	ldrex	r2, [r3]
   177be:	e843 5100 	strex	r1, r5, [r3]
   177c2:	2900      	cmp	r1, #0
   177c4:	d1f9      	bne.n	177ba <bt_att_accept+0x82>
   177c6:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   177ca:	9b01      	ldr	r3, [sp, #4]
   177cc:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   177ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   177d0:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   177d2:	b91b      	cbnz	r3, 177dc <bt_att_accept+0xa4>
   177d4:	f104 000c 	add.w	r0, r4, #12
   177d8:	f011 fd9b 	bl	29312 <z_impl_k_queue_init>
	return list->head;
   177dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   177de:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   177e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   177e4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	list->head = node;
   177e8:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   177ea:	b902      	cbnz	r2, 177ee <bt_att_accept+0xb6>
	list->tail = node;
   177ec:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   177ee:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   177f0:	2b00      	cmp	r3, #0
   177f2:	d0b1      	beq.n	17758 <bt_att_accept+0x20>
	*ch = &chan->chan.chan;
   177f4:	3304      	adds	r3, #4
   177f6:	6033      	str	r3, [r6, #0]
	return 0;
   177f8:	e7b0      	b.n	1775c <bt_att_accept+0x24>
   177fa:	bf00      	nop
   177fc:	2000086c 	.word	0x2000086c
   17800:	0002c1b1 	.word	0x0002c1b1
   17804:	200026fc 	.word	0x200026fc
   17808:	2000088c 	.word	0x2000088c
   1780c:	0002c1db 	.word	0x0002c1db
   17810:	200005f0 	.word	0x200005f0

00017814 <bt_att_chan_create_pdu>:
{
   17814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   17816:	1c53      	adds	r3, r2, #1
   17818:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   1781a:	4293      	cmp	r3, r2
{
   1781c:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1781e:	d906      	bls.n	1782e <bt_att_chan_create_pdu+0x1a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   17820:	481c      	ldr	r0, [pc, #112]	; (17894 <bt_att_chan_create_pdu+0x80>)
   17822:	2157      	movs	r1, #87	; 0x57
   17824:	f00e fb9a 	bl	25f5c <z_log_minimal_printk>
		return NULL;
   17828:	2400      	movs	r4, #0
}
   1782a:	4620      	mov	r0, r4
   1782c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   1782e:	4608      	mov	r0, r1
   17830:	f7ff fcf2 	bl	17218 <att_op_get_type>
   17834:	2802      	cmp	r0, #2
   17836:	d013      	beq.n	17860 <bt_att_chan_create_pdu+0x4c>
   17838:	2804      	cmp	r0, #4
   1783a:	d011      	beq.n	17860 <bt_att_chan_create_pdu+0x4c>
		timeout = K_FOREVER;
   1783c:	f04f 36ff 	mov.w	r6, #4294967295
   17840:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   17844:	2100      	movs	r1, #0
   17846:	4632      	mov	r2, r6
   17848:	463b      	mov	r3, r7
   1784a:	4608      	mov	r0, r1
   1784c:	f00f fed5 	bl	275fa <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   17850:	4604      	mov	r4, r0
   17852:	b948      	cbnz	r0, 17868 <bt_att_chan_create_pdu+0x54>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   17854:	4810      	ldr	r0, [pc, #64]	; (17898 <bt_att_chan_create_pdu+0x84>)
   17856:	462a      	mov	r2, r5
   17858:	2145      	movs	r1, #69	; 0x45
   1785a:	f00e fb7f 	bl	25f5c <z_log_minimal_printk>
		return NULL;
   1785e:	e7e3      	b.n	17828 <bt_att_chan_create_pdu+0x14>
	switch (att_op_get_type(op)) {
   17860:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   17864:	2700      	movs	r7, #0
   17866:	e7ed      	b.n	17844 <bt_att_chan_create_pdu+0x30>
	return z_impl_k_queue_get(queue, timeout);
   17868:	480c      	ldr	r0, [pc, #48]	; (1789c <bt_att_chan_create_pdu+0x88>)
   1786a:	4632      	mov	r2, r6
   1786c:	463b      	mov	r3, r7
   1786e:	f008 fe05 	bl	2047c <z_impl_k_queue_get>
	if (!data) {
   17872:	b938      	cbnz	r0, 17884 <bt_att_chan_create_pdu+0x70>
		BT_WARN("Unable to allocate ATT TX meta");
   17874:	480a      	ldr	r0, [pc, #40]	; (178a0 <bt_att_chan_create_pdu+0x8c>)
   17876:	2157      	movs	r1, #87	; 0x57
   17878:	f00e fb70 	bl	25f5c <z_log_minimal_printk>
		net_buf_unref(buf);
   1787c:	4620      	mov	r0, r4
   1787e:	f004 f943 	bl	1bb08 <net_buf_unref>
		return NULL;
   17882:	e7d1      	b.n	17828 <bt_att_chan_create_pdu+0x14>
	bt_att_tx_meta_data(buf) = data;
   17884:	6160      	str	r0, [r4, #20]
   17886:	2101      	movs	r1, #1
   17888:	f104 0008 	add.w	r0, r4, #8
   1788c:	f004 fa42 	bl	1bd14 <net_buf_simple_add>
	hdr->code = op;
   17890:	7005      	strb	r5, [r0, #0]
	return buf;
   17892:	e7ca      	b.n	1782a <bt_att_chan_create_pdu+0x16>
   17894:	0002c205 	.word	0x0002c205
   17898:	0002bf71 	.word	0x0002bf71
   1789c:	2000095c 	.word	0x2000095c
   178a0:	0002c22f 	.word	0x0002c22f

000178a4 <bt_att_recv>:
{
   178a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   178a8:	898b      	ldrh	r3, [r1, #12]
{
   178aa:	4607      	mov	r7, r0
   178ac:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   178ae:	b933      	cbnz	r3, 178be <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   178b0:	4835      	ldr	r0, [pc, #212]	; (17988 <bt_att_recv+0xe4>)
   178b2:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected request");
   178b4:	f00e fb52 	bl	25f5c <z_log_minimal_printk>
}
   178b8:	2000      	movs	r0, #0
   178ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   178be:	2101      	movs	r1, #1
   178c0:	f105 0008 	add.w	r0, r5, #8
   178c4:	f004 fa0c 	bl	1bce0 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   178c8:	f857 3c04 	ldr.w	r3, [r7, #-4]
   178cc:	4604      	mov	r4, r0
   178ce:	2b00      	cmp	r3, #0
   178d0:	d0f2      	beq.n	178b8 <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
   178d2:	7802      	ldrb	r2, [r0, #0]
   178d4:	4e2d      	ldr	r6, [pc, #180]	; (1798c <bt_att_recv+0xe8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   178d6:	f1a7 0804 	sub.w	r8, r7, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   178da:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   178dc:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   178e0:	4290      	cmp	r0, r2
   178e2:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   178e6:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   178ea:	d10d      	bne.n	17908 <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   178ec:	f891 9002 	ldrb.w	r9, [r1, #2]
   178f0:	f1b9 0f01 	cmp.w	r9, #1
   178f4:	d11f      	bne.n	17936 <bt_att_recv+0x92>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   178f6:	2100      	movs	r1, #0
   178f8:	f107 0094 	add.w	r0, r7, #148	; 0x94
   178fc:	f010 f88d 	bl	27a1a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   17900:	b328      	cbz	r0, 1794e <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected request");
   17902:	4823      	ldr	r0, [pc, #140]	; (17990 <bt_att_recv+0xec>)
   17904:	2157      	movs	r1, #87	; 0x57
   17906:	e7d5      	b.n	178b4 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17908:	3301      	adds	r3, #1
   1790a:	2b0e      	cmp	r3, #14
   1790c:	d1e6      	bne.n	178dc <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1790e:	4821      	ldr	r0, [pc, #132]	; (17994 <bt_att_recv+0xf0>)
   17910:	2157      	movs	r1, #87	; 0x57
   17912:	f00e fb23 	bl	25f5c <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   17916:	7821      	ldrb	r1, [r4, #0]
   17918:	4608      	mov	r0, r1
   1791a:	f7ff fc7d 	bl	17218 <att_op_get_type>
   1791e:	2800      	cmp	r0, #0
   17920:	d0ca      	beq.n	178b8 <bt_att_recv+0x14>
   17922:	2805      	cmp	r0, #5
   17924:	d0c8      	beq.n	178b8 <bt_att_recv+0x14>
	if (!req) {
   17926:	2900      	cmp	r1, #0
   17928:	d0c6      	beq.n	178b8 <bt_att_recv+0x14>
   1792a:	2306      	movs	r3, #6
   1792c:	2200      	movs	r2, #0
   1792e:	4640      	mov	r0, r8
   17930:	f010 f9e7 	bl	27d02 <send_err_rsp.part.0>
   17934:	e7c0      	b.n	178b8 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   17936:	f1b9 0f05 	cmp.w	r9, #5
   1793a:	d108      	bne.n	1794e <bt_att_recv+0xaa>
			   atomic_test_and_set_bit(att_chan->flags,
   1793c:	2101      	movs	r1, #1
   1793e:	f107 0094 	add.w	r0, r7, #148	; 0x94
   17942:	f010 f86a 	bl	27a1a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   17946:	b110      	cbz	r0, 1794e <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected indication");
   17948:	4813      	ldr	r0, [pc, #76]	; (17998 <bt_att_recv+0xf4>)
   1794a:	2157      	movs	r1, #87	; 0x57
   1794c:	e7b2      	b.n	178b4 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   1794e:	4456      	add	r6, sl
   17950:	89aa      	ldrh	r2, [r5, #12]
   17952:	7873      	ldrb	r3, [r6, #1]
   17954:	4293      	cmp	r3, r2
   17956:	d909      	bls.n	1796c <bt_att_recv+0xc8>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   17958:	7823      	ldrb	r3, [r4, #0]
   1795a:	4810      	ldr	r0, [pc, #64]	; (1799c <bt_att_recv+0xf8>)
   1795c:	2145      	movs	r1, #69	; 0x45
   1795e:	f00e fafd 	bl	25f5c <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
   17962:	f1b9 0f01 	cmp.w	r9, #1
   17966:	d1a7      	bne.n	178b8 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   17968:	2304      	movs	r3, #4
   1796a:	e009      	b.n	17980 <bt_att_recv+0xdc>
		err = handler->func(att_chan, buf);
   1796c:	6873      	ldr	r3, [r6, #4]
   1796e:	4629      	mov	r1, r5
   17970:	4640      	mov	r0, r8
   17972:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   17974:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   17978:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1797a:	d19d      	bne.n	178b8 <bt_att_recv+0x14>
   1797c:	2800      	cmp	r0, #0
   1797e:	d09b      	beq.n	178b8 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   17980:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   17982:	2900      	cmp	r1, #0
   17984:	d098      	beq.n	178b8 <bt_att_recv+0x14>
   17986:	e7d1      	b.n	1792c <bt_att_recv+0x88>
   17988:	0002c253 	.word	0x0002c253
   1798c:	00029e90 	.word	0x00029e90
   17990:	0002c292 	.word	0x0002c292
   17994:	0002c273 	.word	0x0002c273
   17998:	0002c2b3 	.word	0x0002c2b3
   1799c:	0002c2d7 	.word	0x0002c2d7

000179a0 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   179a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   179a2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   179a4:	6803      	ldr	r3, [r0, #0]
   179a6:	460d      	mov	r5, r1
   179a8:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   179aa:	b087      	sub	sp, #28
   179ac:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   179ae:	bf18      	it	ne
   179b0:	2101      	movne	r1, #1
   179b2:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   179b4:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   179b6:	f010 fcd9 	bl	2836c <bt_gatt_change_aware>
   179ba:	b948      	cbnz	r0, 179d0 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   179bc:	2105      	movs	r1, #5
   179be:	f104 0098 	add.w	r0, r4, #152	; 0x98
   179c2:	f010 f82a 	bl	27a1a <atomic_test_and_set_bit>
   179c6:	2800      	cmp	r0, #0
   179c8:	d048      	beq.n	17a5c <att_write_rsp.constprop.0+0xbc>
			return 0;
   179ca:	2000      	movs	r0, #0
}
   179cc:	b007      	add	sp, #28
   179ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   179d0:	2e00      	cmp	r6, #0
   179d2:	d045      	beq.n	17a60 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   179d4:	2218      	movs	r2, #24
   179d6:	2100      	movs	r1, #0
   179d8:	4668      	mov	r0, sp
   179da:	f00f f95a 	bl	26c92 <memset>
	if (rsp) {
   179de:	bb67      	cbnz	r7, 17a3a <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   179e0:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   179e2:	4a20      	ldr	r2, [pc, #128]	; (17a64 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   179e4:	681b      	ldr	r3, [r3, #0]
   179e6:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   179e8:	2300      	movs	r3, #0
   179ea:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   179ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   179f0:	9303      	str	r3, [sp, #12]
	data.len = len;
   179f2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   179f6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   179fa:	2301      	movs	r3, #1
   179fc:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17a00:	4631      	mov	r1, r6
   17a02:	466b      	mov	r3, sp
   17a04:	4630      	mov	r0, r6
	data.req = req;
   17a06:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17a0a:	f00f fe85 	bl	27718 <bt_gatt_foreach_attr>
	if (data.err) {
   17a0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   17a12:	b1e3      	cbz	r3, 17a4e <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   17a14:	2f00      	cmp	r7, #0
   17a16:	d0d8      	beq.n	179ca <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17a18:	9b01      	ldr	r3, [sp, #4]
   17a1a:	6958      	ldr	r0, [r3, #20]
   17a1c:	f7ff fd12 	bl	17444 <tx_meta_data_free>
			net_buf_unref(data.buf);
   17a20:	9801      	ldr	r0, [sp, #4]
   17a22:	f004 f871 	bl	1bb08 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   17a26:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   17a2a:	2d00      	cmp	r5, #0
   17a2c:	d0cd      	beq.n	179ca <att_write_rsp.constprop.0+0x2a>
   17a2e:	4632      	mov	r2, r6
   17a30:	4629      	mov	r1, r5
   17a32:	4620      	mov	r0, r4
   17a34:	f010 f965 	bl	27d02 <send_err_rsp.part.0>
   17a38:	e7c7      	b.n	179ca <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   17a3a:	2200      	movs	r2, #0
   17a3c:	4639      	mov	r1, r7
   17a3e:	4620      	mov	r0, r4
   17a40:	f7ff fee8 	bl	17814 <bt_att_chan_create_pdu>
   17a44:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   17a46:	2800      	cmp	r0, #0
   17a48:	d1ca      	bne.n	179e0 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   17a4a:	200e      	movs	r0, #14
   17a4c:	e7be      	b.n	179cc <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   17a4e:	9901      	ldr	r1, [sp, #4]
   17a50:	2900      	cmp	r1, #0
   17a52:	d0ba      	beq.n	179ca <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   17a54:	4620      	mov	r0, r4
   17a56:	f00f ff13 	bl	27880 <bt_att_chan_send_rsp>
   17a5a:	e7b6      	b.n	179ca <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17a5c:	2012      	movs	r0, #18
   17a5e:	e7b5      	b.n	179cc <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   17a60:	2001      	movs	r0, #1
   17a62:	e7b3      	b.n	179cc <att_write_rsp.constprop.0+0x2c>
   17a64:	000276b7 	.word	0x000276b7

00017a68 <bt_att_create_pdu>:
{
   17a68:	b570      	push	{r4, r5, r6, lr}
   17a6a:	460e      	mov	r6, r1
   17a6c:	4615      	mov	r5, r2
	att = att_get(conn);
   17a6e:	f7ff fc0d 	bl	1728c <att_get>
	if (!att) {
   17a72:	b190      	cbz	r0, 17a9a <bt_att_create_pdu+0x32>
	return list->head;
   17a74:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17a76:	4618      	mov	r0, r3
   17a78:	b11b      	cbz	r3, 17a82 <bt_att_create_pdu+0x1a>
	return node->next;
   17a7a:	f850 39f0 	ldr.w	r3, [r0], #-240
   17a7e:	b103      	cbz	r3, 17a82 <bt_att_create_pdu+0x1a>
   17a80:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17a82:	1c6c      	adds	r4, r5, #1
   17a84:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17a86:	b118      	cbz	r0, 17a90 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17a88:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   17a8a:	42a1      	cmp	r1, r4
   17a8c:	d210      	bcs.n	17ab0 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17a8e:	b933      	cbnz	r3, 17a9e <bt_att_create_pdu+0x36>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   17a90:	480b      	ldr	r0, [pc, #44]	; (17ac0 <bt_att_create_pdu+0x58>)
   17a92:	4622      	mov	r2, r4
   17a94:	2157      	movs	r1, #87	; 0x57
   17a96:	f00e fa61 	bl	25f5c <z_log_minimal_printk>
}
   17a9a:	2000      	movs	r0, #0
   17a9c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17a9e:	4618      	mov	r0, r3
   17aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   17aa4:	b153      	cbz	r3, 17abc <bt_att_create_pdu+0x54>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17aa6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   17aa8:	4291      	cmp	r1, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17aaa:	f1a3 03f0 	sub.w	r3, r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17aae:	d3f6      	bcc.n	17a9e <bt_att_create_pdu+0x36>
		return bt_att_chan_create_pdu(chan, op, len);
   17ab0:	462a      	mov	r2, r5
   17ab2:	4631      	mov	r1, r6
}
   17ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   17ab8:	f7ff beac 	b.w	17814 <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17abc:	4614      	mov	r4, r2
   17abe:	e7e3      	b.n	17a88 <bt_att_create_pdu+0x20>
   17ac0:	0002c2fb 	.word	0x0002c2fb

00017ac4 <att_read_group_req>:
{
   17ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17ac8:	898e      	ldrh	r6, [r1, #12]
   17aca:	3e04      	subs	r6, #4
   17acc:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   17ace:	2e02      	cmp	r6, #2
{
   17ad0:	4604      	mov	r4, r0
   17ad2:	b08c      	sub	sp, #48	; 0x30
   17ad4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   17ad6:	d001      	beq.n	17adc <att_read_group_req+0x18>
   17ad8:	2e10      	cmp	r6, #16
   17ada:	d16a      	bne.n	17bb2 <att_read_group_req+0xee>
   17adc:	2104      	movs	r1, #4
   17ade:	3008      	adds	r0, #8
   17ae0:	f004 f8fe 	bl	1bce0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17ae4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   17ae8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17aea:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17aec:	1d01      	adds	r1, r0, #4
   17aee:	4632      	mov	r2, r6
   17af0:	4640      	mov	r0, r8
   17af2:	f00f f964 	bl	26dbe <bt_uuid_create>
   17af6:	2800      	cmp	r0, #0
   17af8:	d05d      	beq.n	17bb6 <att_read_group_req+0xf2>
	if (!start || !end) {
   17afa:	2d00      	cmp	r5, #0
   17afc:	d03a      	beq.n	17b74 <att_read_group_req+0xb0>
   17afe:	2600      	movs	r6, #0
   17b00:	2f00      	cmp	r7, #0
   17b02:	d036      	beq.n	17b72 <att_read_group_req+0xae>
	if (start > end) {
   17b04:	42bd      	cmp	r5, r7
   17b06:	d835      	bhi.n	17b74 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   17b08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17b0c:	a901      	add	r1, sp, #4
   17b0e:	4640      	mov	r0, r8
   17b10:	f88d 6004 	strb.w	r6, [sp, #4]
   17b14:	f8ad 3006 	strh.w	r3, [sp, #6]
   17b18:	f00f f923 	bl	26d62 <bt_uuid_cmp>
   17b1c:	bb70      	cbnz	r0, 17b7c <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   17b1e:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   17b20:	2214      	movs	r2, #20
   17b22:	2100      	movs	r1, #0
   17b24:	a807      	add	r0, sp, #28
   17b26:	f00f f8b4 	bl	26c92 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   17b2a:	2201      	movs	r2, #1
   17b2c:	2111      	movs	r1, #17
   17b2e:	4630      	mov	r0, r6
   17b30:	f7ff ff9a 	bl	17a68 <bt_att_create_pdu>
   17b34:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   17b36:	2800      	cmp	r0, #0
   17b38:	d03d      	beq.n	17bb6 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   17b3a:	2101      	movs	r1, #1
   17b3c:	3008      	adds	r0, #8
	data.uuid = uuid;
   17b3e:	e9cd 4807 	strd	r4, r8, [sp, #28]
   17b42:	f004 f8e7 	bl	1bd14 <net_buf_simple_add>
	data.rsp->len = 0U;
   17b46:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17b48:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17b4a:	4a1c      	ldr	r2, [pc, #112]	; (17bbc <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   17b4c:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17b4e:	4639      	mov	r1, r7
	data.group = NULL;
   17b50:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17b52:	4628      	mov	r0, r5
   17b54:	ab07      	add	r3, sp, #28
   17b56:	f00f fddf 	bl	27718 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   17b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17b5c:	781b      	ldrb	r3, [r3, #0]
   17b5e:	bb1b      	cbnz	r3, 17ba8 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17b62:	6958      	ldr	r0, [r3, #20]
   17b64:	f7ff fc6e 	bl	17444 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17b68:	9809      	ldr	r0, [sp, #36]	; 0x24
   17b6a:	f003 ffcd 	bl	1bb08 <net_buf_unref>
	if (!req) {
   17b6e:	230a      	movs	r3, #10
   17b70:	e001      	b.n	17b76 <att_read_group_req+0xb2>
			*err = 0U;
   17b72:	463d      	mov	r5, r7
	if (!req) {
   17b74:	2301      	movs	r3, #1
   17b76:	462a      	mov	r2, r5
   17b78:	2110      	movs	r1, #16
   17b7a:	e00e      	b.n	17b9a <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   17b7c:	f642 0301 	movw	r3, #10241	; 0x2801
   17b80:	a907      	add	r1, sp, #28
   17b82:	4640      	mov	r0, r8
   17b84:	f88d 601c 	strb.w	r6, [sp, #28]
   17b88:	f8ad 301e 	strh.w	r3, [sp, #30]
   17b8c:	f00f f8e9 	bl	26d62 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   17b90:	2800      	cmp	r0, #0
   17b92:	d0c4      	beq.n	17b1e <att_read_group_req+0x5a>
	if (!req) {
   17b94:	2310      	movs	r3, #16
   17b96:	462a      	mov	r2, r5
   17b98:	4619      	mov	r1, r3
   17b9a:	4620      	mov	r0, r4
   17b9c:	f010 f8b1 	bl	27d02 <send_err_rsp.part.0>
		return 0;
   17ba0:	2000      	movs	r0, #0
}
   17ba2:	b00c      	add	sp, #48	; 0x30
   17ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   17ba8:	9909      	ldr	r1, [sp, #36]	; 0x24
   17baa:	4620      	mov	r0, r4
   17bac:	f00f fe68 	bl	27880 <bt_att_chan_send_rsp>
	return 0;
   17bb0:	e7f6      	b.n	17ba0 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   17bb2:	2004      	movs	r0, #4
   17bb4:	e7f5      	b.n	17ba2 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   17bb6:	200e      	movs	r0, #14
   17bb8:	e7f3      	b.n	17ba2 <att_read_group_req+0xde>
   17bba:	bf00      	nop
   17bbc:	000175ed 	.word	0x000175ed

00017bc0 <att_read_mult_vl_req>:
{
   17bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17bc4:	6846      	ldr	r6, [r0, #4]
{
   17bc6:	b085      	sub	sp, #20
   17bc8:	4604      	mov	r4, r0
   17bca:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17bcc:	4630      	mov	r0, r6
   17bce:	2101      	movs	r1, #1
   17bd0:	f010 fbcc 	bl	2836c <bt_gatt_change_aware>
   17bd4:	b950      	cbnz	r0, 17bec <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17bd6:	2105      	movs	r1, #5
   17bd8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   17bdc:	f00f ff1d 	bl	27a1a <atomic_test_and_set_bit>
   17be0:	2800      	cmp	r0, #0
   17be2:	d13b      	bne.n	17c5c <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17be4:	2012      	movs	r0, #18
}
   17be6:	b005      	add	sp, #20
   17be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   17bec:	2210      	movs	r2, #16
   17bee:	2100      	movs	r1, #0
   17bf0:	4668      	mov	r0, sp
   17bf2:	f00f f84e 	bl	26c92 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   17bf6:	2200      	movs	r2, #0
   17bf8:	2121      	movs	r1, #33	; 0x21
   17bfa:	4630      	mov	r0, r6
   17bfc:	f7ff ff34 	bl	17a68 <bt_att_create_pdu>
   17c00:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17c02:	b368      	cbz	r0, 17c60 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   17c04:	f8df 905c 	ldr.w	r9, [pc, #92]	; 17c64 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   17c08:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   17c0a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17c0e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   17c12:	89ab      	ldrh	r3, [r5, #12]
   17c14:	2b01      	cmp	r3, #1
   17c16:	d804      	bhi.n	17c22 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   17c18:	9902      	ldr	r1, [sp, #8]
   17c1a:	4620      	mov	r0, r4
   17c1c:	f00f fe30 	bl	27880 <bt_att_chan_send_rsp>
	return 0;
   17c20:	e01c      	b.n	17c5c <att_read_mult_vl_req+0x9c>
   17c22:	4638      	mov	r0, r7
   17c24:	f010 ff4d 	bl	28ac2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   17c28:	466b      	mov	r3, sp
   17c2a:	464a      	mov	r2, r9
   17c2c:	4601      	mov	r1, r0
   17c2e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17c30:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   17c34:	f00f fd70 	bl	27718 <bt_gatt_foreach_attr>
		if (data.err) {
   17c38:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17c3c:	2b00      	cmp	r3, #0
   17c3e:	d0e8      	beq.n	17c12 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17c40:	9b02      	ldr	r3, [sp, #8]
   17c42:	6958      	ldr	r0, [r3, #20]
   17c44:	f7ff fbfe 	bl	17444 <tx_meta_data_free>
			net_buf_unref(data.buf);
   17c48:	9802      	ldr	r0, [sp, #8]
   17c4a:	f003 ff5d 	bl	1bb08 <net_buf_unref>
	if (!req) {
   17c4e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17c52:	4632      	mov	r2, r6
   17c54:	2120      	movs	r1, #32
   17c56:	4620      	mov	r0, r4
   17c58:	f010 f853 	bl	27d02 <send_err_rsp.part.0>
			return 0;
   17c5c:	2000      	movs	r0, #0
   17c5e:	e7c2      	b.n	17be6 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   17c60:	200e      	movs	r0, #14
   17c62:	e7c0      	b.n	17be6 <att_read_mult_vl_req+0x26>
   17c64:	00027a8b 	.word	0x00027a8b

00017c68 <att_read_mult_req>:
{
   17c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17c6c:	6846      	ldr	r6, [r0, #4]
{
   17c6e:	b085      	sub	sp, #20
   17c70:	4604      	mov	r4, r0
   17c72:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17c74:	4630      	mov	r0, r6
   17c76:	2101      	movs	r1, #1
   17c78:	f010 fb78 	bl	2836c <bt_gatt_change_aware>
   17c7c:	b950      	cbnz	r0, 17c94 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17c7e:	2105      	movs	r1, #5
   17c80:	f104 0098 	add.w	r0, r4, #152	; 0x98
   17c84:	f00f fec9 	bl	27a1a <atomic_test_and_set_bit>
   17c88:	2800      	cmp	r0, #0
   17c8a:	d13b      	bne.n	17d04 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17c8c:	2012      	movs	r0, #18
}
   17c8e:	b005      	add	sp, #20
   17c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   17c94:	2210      	movs	r2, #16
   17c96:	2100      	movs	r1, #0
   17c98:	4668      	mov	r0, sp
   17c9a:	f00e fffa 	bl	26c92 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   17c9e:	2200      	movs	r2, #0
   17ca0:	210f      	movs	r1, #15
   17ca2:	4630      	mov	r0, r6
   17ca4:	f7ff fee0 	bl	17a68 <bt_att_create_pdu>
   17ca8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17caa:	b368      	cbz	r0, 17d08 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17cac:	f8df 905c 	ldr.w	r9, [pc, #92]	; 17d0c <att_read_mult_req+0xa4>
	data.chan = chan;
   17cb0:	9400      	str	r4, [sp, #0]
   17cb2:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17cb6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   17cba:	89ab      	ldrh	r3, [r5, #12]
   17cbc:	2b01      	cmp	r3, #1
   17cbe:	d804      	bhi.n	17cca <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   17cc0:	9902      	ldr	r1, [sp, #8]
   17cc2:	4620      	mov	r0, r4
   17cc4:	f00f fddc 	bl	27880 <bt_att_chan_send_rsp>
	return 0;
   17cc8:	e01c      	b.n	17d04 <att_read_mult_req+0x9c>
   17cca:	4638      	mov	r0, r7
   17ccc:	f010 fef9 	bl	28ac2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17cd0:	466b      	mov	r3, sp
   17cd2:	464a      	mov	r2, r9
   17cd4:	4601      	mov	r1, r0
   17cd6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17cd8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17cdc:	f00f fd1c 	bl	27718 <bt_gatt_foreach_attr>
		if (data.err) {
   17ce0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17ce4:	2b00      	cmp	r3, #0
   17ce6:	d0e8      	beq.n	17cba <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17ce8:	9b02      	ldr	r3, [sp, #8]
   17cea:	6958      	ldr	r0, [r3, #20]
   17cec:	f7ff fbaa 	bl	17444 <tx_meta_data_free>
			net_buf_unref(data.buf);
   17cf0:	9802      	ldr	r0, [sp, #8]
   17cf2:	f003 ff09 	bl	1bb08 <net_buf_unref>
	if (!req) {
   17cf6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17cfa:	4632      	mov	r2, r6
   17cfc:	210e      	movs	r1, #14
   17cfe:	4620      	mov	r0, r4
   17d00:	f00f ffff 	bl	27d02 <send_err_rsp.part.0>
			return 0;
   17d04:	2000      	movs	r0, #0
   17d06:	e7c2      	b.n	17c8e <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   17d08:	200e      	movs	r0, #14
   17d0a:	e7c0      	b.n	17c8e <att_read_mult_req+0x26>
   17d0c:	00027a45 	.word	0x00027a45

00017d10 <att_read_rsp>:
{
   17d10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17d14:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   17d18:	4604      	mov	r4, r0
   17d1a:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17d1c:	4640      	mov	r0, r8
   17d1e:	2101      	movs	r1, #1
{
   17d20:	4617      	mov	r7, r2
   17d22:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   17d24:	f010 fb22 	bl	2836c <bt_gatt_change_aware>
   17d28:	b948      	cbnz	r0, 17d3e <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17d2a:	2105      	movs	r1, #5
   17d2c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   17d30:	f00f fe73 	bl	27a1a <atomic_test_and_set_bit>
   17d34:	bb78      	cbnz	r0, 17d96 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17d36:	2012      	movs	r0, #18
}
   17d38:	b004      	add	sp, #16
   17d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   17d3e:	b38d      	cbz	r5, 17da4 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   17d40:	2210      	movs	r2, #16
   17d42:	2100      	movs	r1, #0
   17d44:	4668      	mov	r0, sp
   17d46:	f00e ffa4 	bl	26c92 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   17d4a:	2200      	movs	r2, #0
   17d4c:	4639      	mov	r1, r7
   17d4e:	4640      	mov	r0, r8
   17d50:	f7ff fe8a 	bl	17a68 <bt_att_create_pdu>
   17d54:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17d56:	b338      	cbz	r0, 17da8 <att_read_rsp+0x98>
	data.offset = offset;
   17d58:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   17d5c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17d60:	2301      	movs	r3, #1
   17d62:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17d66:	4a11      	ldr	r2, [pc, #68]	; (17dac <att_read_rsp+0x9c>)
	data.chan = chan;
   17d68:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17d6a:	466b      	mov	r3, sp
   17d6c:	4629      	mov	r1, r5
   17d6e:	4628      	mov	r0, r5
   17d70:	f00f fcd2 	bl	27718 <bt_gatt_foreach_attr>
	if (data.err) {
   17d74:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17d78:	b17b      	cbz	r3, 17d9a <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17d7a:	9b02      	ldr	r3, [sp, #8]
   17d7c:	6958      	ldr	r0, [r3, #20]
   17d7e:	f7ff fb61 	bl	17444 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17d82:	9802      	ldr	r0, [sp, #8]
   17d84:	f003 fec0 	bl	1bb08 <net_buf_unref>
	if (!req) {
   17d88:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17d8c:	462a      	mov	r2, r5
   17d8e:	4631      	mov	r1, r6
   17d90:	4620      	mov	r0, r4
   17d92:	f00f ffb6 	bl	27d02 <send_err_rsp.part.0>
			return 0;
   17d96:	2000      	movs	r0, #0
   17d98:	e7ce      	b.n	17d38 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   17d9a:	9902      	ldr	r1, [sp, #8]
   17d9c:	4620      	mov	r0, r4
   17d9e:	f00f fd6f 	bl	27880 <bt_att_chan_send_rsp>
	return 0;
   17da2:	e7f8      	b.n	17d96 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   17da4:	2001      	movs	r0, #1
   17da6:	e7c7      	b.n	17d38 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   17da8:	200e      	movs	r0, #14
   17daa:	e7c5      	b.n	17d38 <att_read_rsp+0x28>
   17dac:	00027a45 	.word	0x00027a45

00017db0 <att_read_type_req>:
{
   17db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17db4:	898d      	ldrh	r5, [r1, #12]
   17db6:	3d04      	subs	r5, #4
   17db8:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   17dba:	2d02      	cmp	r5, #2
{
   17dbc:	4604      	mov	r4, r0
   17dbe:	b08c      	sub	sp, #48	; 0x30
   17dc0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   17dc2:	d001      	beq.n	17dc8 <att_read_type_req+0x18>
   17dc4:	2d10      	cmp	r5, #16
   17dc6:	d150      	bne.n	17e6a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   17dc8:	2104      	movs	r1, #4
   17dca:	3008      	adds	r0, #8
   17dcc:	f003 ff88 	bl	1bce0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17dd0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   17dd4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17dd6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17dd8:	1d01      	adds	r1, r0, #4
   17dda:	462a      	mov	r2, r5
   17ddc:	4640      	mov	r0, r8
   17dde:	f00e ffee 	bl	26dbe <bt_uuid_create>
   17de2:	b188      	cbz	r0, 17e08 <att_read_type_req+0x58>
	if (!start || !end) {
   17de4:	b19e      	cbz	r6, 17e0e <att_read_type_req+0x5e>
   17de6:	b18f      	cbz	r7, 17e0c <att_read_type_req+0x5c>
	if (start > end) {
   17de8:	42b7      	cmp	r7, r6
   17dea:	d310      	bcc.n	17e0e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   17dec:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   17dee:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   17df0:	2100      	movs	r1, #0
   17df2:	eb0d 0002 	add.w	r0, sp, r2
   17df6:	f00e ff4c 	bl	26c92 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   17dfa:	2201      	movs	r2, #1
   17dfc:	2109      	movs	r1, #9
   17dfe:	4628      	mov	r0, r5
   17e00:	f7ff fe32 	bl	17a68 <bt_att_create_pdu>
   17e04:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   17e06:	b960      	cbnz	r0, 17e22 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   17e08:	200e      	movs	r0, #14
   17e0a:	e007      	b.n	17e1c <att_read_type_req+0x6c>
			*err = 0U;
   17e0c:	463e      	mov	r6, r7
	if (!req) {
   17e0e:	2301      	movs	r3, #1
   17e10:	4632      	mov	r2, r6
   17e12:	2108      	movs	r1, #8
   17e14:	4620      	mov	r0, r4
   17e16:	f00f ff74 	bl	27d02 <send_err_rsp.part.0>
		return 0;
   17e1a:	2000      	movs	r0, #0
}
   17e1c:	b00c      	add	sp, #48	; 0x30
   17e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   17e22:	2101      	movs	r1, #1
   17e24:	3008      	adds	r0, #8
	data.uuid = uuid;
   17e26:	e9cd 4806 	strd	r4, r8, [sp, #24]
   17e2a:	f003 ff73 	bl	1bd14 <net_buf_simple_add>
	data.rsp->len = 0U;
   17e2e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17e30:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   17e32:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17e34:	230a      	movs	r3, #10
   17e36:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   17e3a:	4a0d      	ldr	r2, [pc, #52]	; (17e70 <att_read_type_req+0xc0>)
   17e3c:	ab06      	add	r3, sp, #24
   17e3e:	4639      	mov	r1, r7
   17e40:	4630      	mov	r0, r6
   17e42:	f00f fc69 	bl	27718 <bt_gatt_foreach_attr>
	if (data.err) {
   17e46:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   17e4a:	b14b      	cbz	r3, 17e60 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17e4c:	9b08      	ldr	r3, [sp, #32]
   17e4e:	6958      	ldr	r0, [r3, #20]
   17e50:	f7ff faf8 	bl	17444 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17e54:	9808      	ldr	r0, [sp, #32]
   17e56:	f003 fe57 	bl	1bb08 <net_buf_unref>
	if (!req) {
   17e5a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   17e5e:	e7d7      	b.n	17e10 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   17e60:	9908      	ldr	r1, [sp, #32]
   17e62:	4620      	mov	r0, r4
   17e64:	f00f fd0c 	bl	27880 <bt_att_chan_send_rsp>
	return 0;
   17e68:	e7d7      	b.n	17e1a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   17e6a:	2004      	movs	r0, #4
   17e6c:	e7d6      	b.n	17e1c <att_read_type_req+0x6c>
   17e6e:	bf00      	nop
   17e70:	00017699 	.word	0x00017699

00017e74 <att_find_type_req>:
{
   17e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17e78:	460f      	mov	r7, r1
   17e7a:	b086      	sub	sp, #24
   17e7c:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   17e7e:	2106      	movs	r1, #6
   17e80:	f107 0008 	add.w	r0, r7, #8
   17e84:	f003 ff2c 	bl	1bce0 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   17e88:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17e8a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   17e8e:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   17e90:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   17e94:	b1c5      	cbz	r5, 17ec8 <att_find_type_req+0x54>
   17e96:	2300      	movs	r3, #0
   17e98:	f1b8 0f00 	cmp.w	r8, #0
   17e9c:	d013      	beq.n	17ec6 <att_find_type_req+0x52>
	if (start > end) {
   17e9e:	4545      	cmp	r5, r8
   17ea0:	d812      	bhi.n	17ec8 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   17ea2:	f88d 3000 	strb.w	r3, [sp]
   17ea6:	f88d 3004 	strb.w	r3, [sp, #4]
   17eaa:	a901      	add	r1, sp, #4
   17eac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17eb0:	4668      	mov	r0, sp
   17eb2:	f8ad 2002 	strh.w	r2, [sp, #2]
   17eb6:	f8ad 3006 	strh.w	r3, [sp, #6]
   17eba:	f00e ff52 	bl	26d62 <bt_uuid_cmp>
   17ebe:	4606      	mov	r6, r0
   17ec0:	b160      	cbz	r0, 17edc <att_find_type_req+0x68>
	if (!req) {
   17ec2:	230a      	movs	r3, #10
   17ec4:	e001      	b.n	17eca <att_find_type_req+0x56>
			*err = 0U;
   17ec6:	4645      	mov	r5, r8
	if (!req) {
   17ec8:	2301      	movs	r3, #1
   17eca:	462a      	mov	r2, r5
   17ecc:	2106      	movs	r1, #6
   17ece:	4620      	mov	r0, r4
   17ed0:	f00f ff17 	bl	27d02 <send_err_rsp.part.0>
		return 0;
   17ed4:	2000      	movs	r0, #0
}
   17ed6:	b006      	add	sp, #24
   17ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   17edc:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   17ee0:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   17ee2:	4601      	mov	r1, r0
   17ee4:	2214      	movs	r2, #20
   17ee6:	a801      	add	r0, sp, #4
   17ee8:	f00e fed3 	bl	26c92 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   17eec:	4632      	mov	r2, r6
   17eee:	2107      	movs	r1, #7
   17ef0:	4650      	mov	r0, sl
   17ef2:	f7ff fdb9 	bl	17a68 <bt_att_create_pdu>
   17ef6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17ef8:	b1f8      	cbz	r0, 17f3a <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17efa:	230a      	movs	r3, #10
   17efc:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17f00:	4a0f      	ldr	r2, [pc, #60]	; (17f40 <att_find_type_req+0xcc>)
	data.chan = chan;
   17f02:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17f04:	ab01      	add	r3, sp, #4
   17f06:	4641      	mov	r1, r8
   17f08:	4628      	mov	r0, r5
	data.value = value;
   17f0a:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   17f0e:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17f12:	f00f fc01 	bl	27718 <bt_gatt_foreach_attr>
	if (data.err) {
   17f16:	f89d 3015 	ldrb.w	r3, [sp, #21]
   17f1a:	b14b      	cbz	r3, 17f30 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17f1c:	9b02      	ldr	r3, [sp, #8]
   17f1e:	6958      	ldr	r0, [r3, #20]
   17f20:	f7ff fa90 	bl	17444 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17f24:	9802      	ldr	r0, [sp, #8]
   17f26:	f003 fdef 	bl	1bb08 <net_buf_unref>
	if (!req) {
   17f2a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   17f2e:	e7cc      	b.n	17eca <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   17f30:	9902      	ldr	r1, [sp, #8]
   17f32:	4620      	mov	r0, r4
   17f34:	f00f fca4 	bl	27880 <bt_att_chan_send_rsp>
	return 0;
   17f38:	e7cc      	b.n	17ed4 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   17f3a:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   17f3c:	e7cb      	b.n	17ed6 <att_find_type_req+0x62>
   17f3e:	bf00      	nop
   17f40:	00017301 	.word	0x00017301

00017f44 <att_find_info_req>:
{
   17f44:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   17f46:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   17f48:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17f4a:	885e      	ldrh	r6, [r3, #2]
{
   17f4c:	b085      	sub	sp, #20
   17f4e:	4604      	mov	r4, r0
	if (!start || !end) {
   17f50:	b195      	cbz	r5, 17f78 <att_find_info_req+0x34>
   17f52:	b186      	cbz	r6, 17f76 <att_find_info_req+0x32>
	if (start > end) {
   17f54:	42b5      	cmp	r5, r6
   17f56:	d80f      	bhi.n	17f78 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   17f58:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   17f5a:	2210      	movs	r2, #16
   17f5c:	2100      	movs	r1, #0
   17f5e:	4668      	mov	r0, sp
   17f60:	f00e fe97 	bl	26c92 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   17f64:	2200      	movs	r2, #0
   17f66:	2105      	movs	r1, #5
   17f68:	4638      	mov	r0, r7
   17f6a:	f7ff fd7d 	bl	17a68 <bt_att_create_pdu>
   17f6e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   17f70:	b958      	cbnz	r0, 17f8a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   17f72:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   17f74:	e007      	b.n	17f86 <att_find_info_req+0x42>
			*err = 0U;
   17f76:	4635      	mov	r5, r6
	if (!req) {
   17f78:	2301      	movs	r3, #1
   17f7a:	462a      	mov	r2, r5
   17f7c:	2104      	movs	r1, #4
   17f7e:	4620      	mov	r0, r4
   17f80:	f00f febf 	bl	27d02 <send_err_rsp.part.0>
		return 0;
   17f84:	2000      	movs	r0, #0
}
   17f86:	b005      	add	sp, #20
   17f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   17f8a:	466b      	mov	r3, sp
   17f8c:	4a0a      	ldr	r2, [pc, #40]	; (17fb8 <att_find_info_req+0x74>)
	data.chan = chan;
   17f8e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   17f90:	4631      	mov	r1, r6
   17f92:	4628      	mov	r0, r5
   17f94:	f00f fbc0 	bl	27718 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   17f98:	9b02      	ldr	r3, [sp, #8]
   17f9a:	b943      	cbnz	r3, 17fae <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17f9c:	9b01      	ldr	r3, [sp, #4]
   17f9e:	6958      	ldr	r0, [r3, #20]
   17fa0:	f7ff fa50 	bl	17444 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17fa4:	9801      	ldr	r0, [sp, #4]
   17fa6:	f003 fdaf 	bl	1bb08 <net_buf_unref>
	if (!req) {
   17faa:	230a      	movs	r3, #10
   17fac:	e7e5      	b.n	17f7a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   17fae:	9901      	ldr	r1, [sp, #4]
   17fb0:	4620      	mov	r0, r4
   17fb2:	f00f fc65 	bl	27880 <bt_att_chan_send_rsp>
	return 0;
   17fb6:	e7e5      	b.n	17f84 <att_find_info_req+0x40>
   17fb8:	0002772f 	.word	0x0002772f

00017fbc <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   17fbc:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   17fbe:	4c0b      	ldr	r4, [pc, #44]	; (17fec <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   17fc0:	4d0b      	ldr	r5, [pc, #44]	; (17ff0 <bt_att_init+0x34>)
   17fc2:	4620      	mov	r0, r4
   17fc4:	f011 f9a5 	bl	29312 <z_impl_k_queue_init>
   17fc8:	4629      	mov	r1, r5
   17fca:	4620      	mov	r0, r4
   17fcc:	f011 f9ae 	bl	2932c <k_queue_append>
   17fd0:	f105 0114 	add.w	r1, r5, #20
   17fd4:	4620      	mov	r0, r4
   17fd6:	f011 f9a9 	bl	2932c <k_queue_append>
   17fda:	f105 0128 	add.w	r1, r5, #40	; 0x28
   17fde:	4620      	mov	r0, r4
   17fe0:	f011 f9a4 	bl	2932c <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   17fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   17fe8:	f000 bdc4 	b.w	18b74 <bt_gatt_init>
   17fec:	2000095c 	.word	0x2000095c
   17ff0:	200026c0 	.word	0x200026c0

00017ff4 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   17ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   17ff6:	2300      	movs	r3, #0
{
   17ff8:	4605      	mov	r5, r0
   17ffa:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   17ffc:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   17ffe:	f009 fe83 	bl	21d08 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   18002:	4b0b      	ldr	r3, [pc, #44]	; (18030 <bt_att_req_alloc+0x3c>)
   18004:	681b      	ldr	r3, [r3, #0]
   18006:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   18008:	bf04      	itt	eq
   1800a:	2500      	moveq	r5, #0
   1800c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1800e:	a901      	add	r1, sp, #4
   18010:	4808      	ldr	r0, [pc, #32]	; (18034 <bt_att_req_alloc+0x40>)
   18012:	462a      	mov	r2, r5
   18014:	4623      	mov	r3, r4
   18016:	f007 fe31 	bl	1fc7c <k_mem_slab_alloc>
   1801a:	4601      	mov	r1, r0
   1801c:	b930      	cbnz	r0, 1802c <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1801e:	9801      	ldr	r0, [sp, #4]
   18020:	221c      	movs	r2, #28
   18022:	f00e fe36 	bl	26c92 <memset>

	return req;
   18026:	9801      	ldr	r0, [sp, #4]
}
   18028:	b003      	add	sp, #12
   1802a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1802c:	2000      	movs	r0, #0
   1802e:	e7fb      	b.n	18028 <bt_att_req_alloc+0x34>
   18030:	200026fc 	.word	0x200026fc
   18034:	200008ac 	.word	0x200008ac

00018038 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   18038:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   1803a:	6883      	ldr	r3, [r0, #8]
{
   1803c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1803e:	b14b      	cbz	r3, 18054 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   18040:	6958      	ldr	r0, [r3, #20]
   18042:	f7ff f9ff 	bl	17444 <tx_meta_data_free>
		net_buf_unref(req->buf);
   18046:	9b01      	ldr	r3, [sp, #4]
   18048:	6898      	ldr	r0, [r3, #8]
   1804a:	f003 fd5d 	bl	1bb08 <net_buf_unref>
		req->buf = NULL;
   1804e:	9b01      	ldr	r3, [sp, #4]
   18050:	2200      	movs	r2, #0
   18052:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   18054:	4803      	ldr	r0, [pc, #12]	; (18064 <bt_att_req_free+0x2c>)
   18056:	a901      	add	r1, sp, #4
   18058:	f007 fe68 	bl	1fd2c <k_mem_slab_free>
}
   1805c:	b003      	add	sp, #12
   1805e:	f85d fb04 	ldr.w	pc, [sp], #4
   18062:	bf00      	nop
   18064:	200008ac 	.word	0x200008ac

00018068 <att_handle_rsp>:
{
   18068:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1806c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1806e:	30c0      	adds	r0, #192	; 0xc0
{
   18070:	460e      	mov	r6, r1
   18072:	4617      	mov	r7, r2
   18074:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   18076:	f008 feef 	bl	20e58 <k_work_cancel_delayable>
	if (!chan->req) {
   1807a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1807e:	b950      	cbnz	r0, 18096 <att_handle_rsp+0x2e>
		BT_WARN("No pending ATT request");
   18080:	4816      	ldr	r0, [pc, #88]	; (180dc <att_handle_rsp+0x74>)
   18082:	2157      	movs	r1, #87	; 0x57
   18084:	f00d ff6a 	bl	25f5c <z_log_minimal_printk>
	att_req_send_process(chan->att);
   18088:	6820      	ldr	r0, [r4, #0]
   1808a:	f00f fd6a 	bl	27b62 <att_req_send_process>
}
   1808e:	2000      	movs	r0, #0
   18090:	b002      	add	sp, #8
   18092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   18096:	4b12      	ldr	r3, [pc, #72]	; (180e0 <att_handle_rsp+0x78>)
   18098:	4298      	cmp	r0, r3
   1809a:	f04f 0800 	mov.w	r8, #0
   1809e:	d102      	bne.n	180a6 <att_handle_rsp+0x3e>
		chan->req = NULL;
   180a0:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   180a4:	e7f0      	b.n	18088 <att_handle_rsp+0x20>
	func = chan->req->func;
   180a6:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   180aa:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   180ae:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   180b2:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   180b6:	f7ff ffbf 	bl	18038 <bt_att_req_free>
	att_req_send_process(chan->att);
   180ba:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   180bc:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   180c0:	f00f fd4f 	bl	27b62 <att_req_send_process>
	if (func) {
   180c4:	f1b9 0f00 	cmp.w	r9, #0
   180c8:	d0e1      	beq.n	1808e <att_handle_rsp+0x26>
		func(chan->att->conn, err, pdu, len, params);
   180ca:	6820      	ldr	r0, [r4, #0]
   180cc:	f8cd a000 	str.w	sl, [sp]
   180d0:	6800      	ldr	r0, [r0, #0]
   180d2:	463b      	mov	r3, r7
   180d4:	4632      	mov	r2, r6
   180d6:	4629      	mov	r1, r5
   180d8:	47c8      	blx	r9
   180da:	e7d8      	b.n	1808e <att_handle_rsp+0x26>
   180dc:	0002c31b 	.word	0x0002c31b
   180e0:	20002700 	.word	0x20002700

000180e4 <bt_att_disconnected>:
{
   180e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   180e8:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   180ec:	4604      	mov	r4, r0
	if (!att_chan->att) {
   180ee:	2e00      	cmp	r6, #0
   180f0:	d056      	beq.n	181a0 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   180f2:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   180f6:	f106 0028 	add.w	r0, r6, #40	; 0x28
   180fa:	f00f fc73 	bl	279e4 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   180fe:	1f27      	subs	r7, r4, #4
   18100:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   18104:	2200      	movs	r2, #0
   18106:	2300      	movs	r3, #0
   18108:	4640      	mov	r0, r8
   1810a:	f003 fbcb 	bl	1b8a4 <net_buf_get>
   1810e:	4605      	mov	r5, r0
   18110:	bb28      	cbnz	r0, 1815e <bt_att_disconnected+0x7a>
	if (chan->req) {
   18112:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   18116:	b12b      	cbz	r3, 18124 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   18118:	4602      	mov	r2, r0
   1811a:	4601      	mov	r1, r0
   1811c:	230e      	movs	r3, #14
   1811e:	4638      	mov	r0, r7
   18120:	f7ff ffa2 	bl	18068 <att_handle_rsp>
	chan->att = NULL;
   18124:	2300      	movs	r3, #0
   18126:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1812a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1812c:	2b00      	cmp	r3, #0
   1812e:	d137      	bne.n	181a0 <bt_att_disconnected+0xbc>
	att_reset(att);
   18130:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   18132:	9803      	ldr	r0, [sp, #12]
   18134:	2200      	movs	r2, #0
   18136:	2300      	movs	r3, #0
   18138:	300c      	adds	r0, #12
   1813a:	f003 fbb3 	bl	1b8a4 <net_buf_get>
   1813e:	4605      	mov	r5, r0
   18140:	b9a0      	cbnz	r0, 1816c <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   18142:	9803      	ldr	r0, [sp, #12]
	return list->head;
   18144:	6845      	ldr	r5, [r0, #4]
   18146:	b9c5      	cbnz	r5, 1817a <bt_att_disconnected+0x96>
	att->conn = NULL;
   18148:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1814a:	a903      	add	r1, sp, #12
   1814c:	4816      	ldr	r0, [pc, #88]	; (181a8 <bt_att_disconnected+0xc4>)
   1814e:	f007 fded 	bl	1fd2c <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   18152:	6820      	ldr	r0, [r4, #0]
}
   18154:	b004      	add	sp, #16
   18156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1815a:	f001 bc01 	b.w	19960 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1815e:	6968      	ldr	r0, [r5, #20]
   18160:	f7ff f970 	bl	17444 <tx_meta_data_free>
		net_buf_unref(buf);
   18164:	4628      	mov	r0, r5
   18166:	f003 fccf 	bl	1bb08 <net_buf_unref>
   1816a:	e7cb      	b.n	18104 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1816c:	6968      	ldr	r0, [r5, #20]
   1816e:	f7ff f969 	bl	17444 <tx_meta_data_free>
		net_buf_unref(buf);
   18172:	4628      	mov	r0, r5
   18174:	f003 fcc8 	bl	1bb08 <net_buf_unref>
   18178:	e7db      	b.n	18132 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1817a:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1817c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1817e:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18180:	4295      	cmp	r5, r2
	list->tail = node;
   18182:	bf08      	it	eq
   18184:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   18186:	686e      	ldr	r6, [r5, #4]
   18188:	b136      	cbz	r6, 18198 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1818a:	69ab      	ldr	r3, [r5, #24]
   1818c:	9300      	str	r3, [sp, #0]
   1818e:	2300      	movs	r3, #0
   18190:	6800      	ldr	r0, [r0, #0]
   18192:	461a      	mov	r2, r3
   18194:	210e      	movs	r1, #14
   18196:	47b0      	blx	r6
		bt_att_req_free(req);
   18198:	4628      	mov	r0, r5
   1819a:	f7ff ff4d 	bl	18038 <bt_att_req_free>
   1819e:	e7d0      	b.n	18142 <bt_att_disconnected+0x5e>
}
   181a0:	b004      	add	sp, #16
   181a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   181a6:	bf00      	nop
   181a8:	2000086c 	.word	0x2000086c

000181ac <att_timeout>:
{
   181ac:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
   181ae:	2145      	movs	r1, #69	; 0x45
{
   181b0:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   181b2:	4804      	ldr	r0, [pc, #16]	; (181c4 <att_timeout+0x18>)
   181b4:	f00d fed2 	bl	25f5c <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   181b8:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   181bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   181c0:	f7ff bf90 	b.w	180e4 <bt_att_disconnected>
   181c4:	0002c337 	.word	0x0002c337

000181c8 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   181c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   181ca:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   181cc:	b950      	cbnz	r0, 181e4 <bt_att_send+0x1c>
   181ce:	4928      	ldr	r1, [pc, #160]	; (18270 <bt_att_send+0xa8>)
   181d0:	4828      	ldr	r0, [pc, #160]	; (18274 <bt_att_send+0xac>)
   181d2:	f640 62a8 	movw	r2, #3752	; 0xea8
   181d6:	f00d feb3 	bl	25f40 <assert_print>
   181da:	f640 61a8 	movw	r1, #3752	; 0xea8
	__ASSERT_NO_MSG(buf);
   181de:	4824      	ldr	r0, [pc, #144]	; (18270 <bt_att_send+0xa8>)
   181e0:	f00d fea7 	bl	25f32 <assert_post_action>
   181e4:	b941      	cbnz	r1, 181f8 <bt_att_send+0x30>
   181e6:	4922      	ldr	r1, [pc, #136]	; (18270 <bt_att_send+0xa8>)
   181e8:	4822      	ldr	r0, [pc, #136]	; (18274 <bt_att_send+0xac>)
   181ea:	f640 62a9 	movw	r2, #3753	; 0xea9
   181ee:	f00d fea7 	bl	25f40 <assert_print>
   181f2:	f640 61a9 	movw	r1, #3753	; 0xea9
   181f6:	e7f2      	b.n	181de <bt_att_send+0x16>

	att = att_get(conn);
   181f8:	f7ff f848 	bl	1728c <att_get>
	if (!att) {
   181fc:	4605      	mov	r5, r0
   181fe:	b940      	cbnz	r0, 18212 <bt_att_send+0x4a>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   18200:	6960      	ldr	r0, [r4, #20]
   18202:	f7ff f91f 	bl	17444 <tx_meta_data_free>
		net_buf_unref(buf);
   18206:	4620      	mov	r0, r4
   18208:	f003 fc7e 	bl	1bb08 <net_buf_unref>
		return -ENOTCONN;
   1820c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   18210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   18212:	f100 060c 	add.w	r6, r0, #12
   18216:	4621      	mov	r1, r4
   18218:	4630      	mov	r0, r6
   1821a:	f003 fc4b 	bl	1bab4 <net_buf_put>
	return list->head;
   1821e:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18220:	b14d      	cbz	r5, 18236 <bt_att_send+0x6e>
	return node->next;
   18222:	f855 49f0 	ldr.w	r4, [r5], #-240
   18226:	b104      	cbz	r4, 1822a <bt_att_send+0x62>
   18228:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   1822a:	4631      	mov	r1, r6
   1822c:	4628      	mov	r0, r5
   1822e:	f00f fb35 	bl	2789c <process_queue>
		if (!err) {
   18232:	4603      	mov	r3, r0
   18234:	b980      	cbnz	r0, 18258 <bt_att_send+0x90>
	return 0;
   18236:	2000      	movs	r0, #0
   18238:	e7ea      	b.n	18210 <bt_att_send+0x48>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1823a:	2103      	movs	r1, #3
   1823c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18240:	f00f fa30 	bl	276a4 <atomic_test_bit>
   18244:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   18246:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1824a:	f00f fa2b 	bl	276a4 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1824e:	4287      	cmp	r7, r0
   18250:	f06f 0301 	mvn.w	r3, #1
   18254:	d107      	bne.n	18266 <bt_att_send+0x9e>
   18256:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18258:	2c00      	cmp	r4, #0
   1825a:	d0ec      	beq.n	18236 <bt_att_send+0x6e>
   1825c:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   18260:	b922      	cbnz	r2, 1826c <bt_att_send+0xa4>
		if (err == -ENOENT && prev &&
   18262:	3302      	adds	r3, #2
   18264:	d0e9      	beq.n	1823a <bt_att_send+0x72>
{
   18266:	4625      	mov	r5, r4
   18268:	4614      	mov	r4, r2
   1826a:	e7de      	b.n	1822a <bt_att_send+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1826c:	3af0      	subs	r2, #240	; 0xf0
   1826e:	e7f8      	b.n	18262 <bt_att_send+0x9a>
   18270:	0002c122 	.word	0x0002c122
   18274:	0002a7df 	.word	0x0002a7df

00018278 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   18278:	b510      	push	{r4, lr}
   1827a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1827c:	b950      	cbnz	r0, 18294 <bt_att_req_send+0x1c>
   1827e:	4914      	ldr	r1, [pc, #80]	; (182d0 <bt_att_req_send+0x58>)
   18280:	4814      	ldr	r0, [pc, #80]	; (182d4 <bt_att_req_send+0x5c>)
   18282:	f640 62be 	movw	r2, #3774	; 0xebe
   18286:	f00d fe5b 	bl	25f40 <assert_print>
   1828a:	f640 61be 	movw	r1, #3774	; 0xebe
	__ASSERT_NO_MSG(req);
   1828e:	4810      	ldr	r0, [pc, #64]	; (182d0 <bt_att_req_send+0x58>)
   18290:	f00d fe4f 	bl	25f32 <assert_post_action>
   18294:	b941      	cbnz	r1, 182a8 <bt_att_req_send+0x30>
   18296:	490e      	ldr	r1, [pc, #56]	; (182d0 <bt_att_req_send+0x58>)
   18298:	480e      	ldr	r0, [pc, #56]	; (182d4 <bt_att_req_send+0x5c>)
   1829a:	f640 62bf 	movw	r2, #3775	; 0xebf
   1829e:	f00d fe4f 	bl	25f40 <assert_print>
   182a2:	f640 61bf 	movw	r1, #3775	; 0xebf
   182a6:	e7f2      	b.n	1828e <bt_att_req_send+0x16>

	att = att_get(conn);
   182a8:	f7fe fff0 	bl	1728c <att_get>
	if (!att) {
   182ac:	b160      	cbz	r0, 182c8 <bt_att_req_send+0x50>
	parent->next = child;
   182ae:	2300      	movs	r3, #0
   182b0:	6023      	str	r3, [r4, #0]
	return list->tail;
   182b2:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   182b4:	b92b      	cbnz	r3, 182c2 <bt_att_req_send+0x4a>
	list->head = node;
   182b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   182ba:	f00f fc52 	bl	27b62 <att_req_send_process>

	return 0;
   182be:	2000      	movs	r0, #0
}
   182c0:	bd10      	pop	{r4, pc}
	parent->next = child;
   182c2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   182c4:	6084      	str	r4, [r0, #8]
}
   182c6:	e7f8      	b.n	182ba <bt_att_req_send+0x42>
		return -ENOTCONN;
   182c8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   182cc:	e7f8      	b.n	182c0 <bt_att_req_send+0x48>
   182ce:	bf00      	nop
   182d0:	0002c122 	.word	0x0002c122
   182d4:	0002a7df 	.word	0x0002a7df

000182d8 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   182d8:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   182da:	4908      	ldr	r1, [pc, #32]	; (182fc <db_hash_set+0x24>)
{
   182dc:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   182de:	4618      	mov	r0, r3
   182e0:	2210      	movs	r2, #16
   182e2:	47a0      	blx	r4
	if (len < 0) {
   182e4:	1e04      	subs	r4, r0, #0
   182e6:	da06      	bge.n	182f6 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   182e8:	4805      	ldr	r0, [pc, #20]	; (18300 <db_hash_set+0x28>)
   182ea:	4622      	mov	r2, r4
   182ec:	2145      	movs	r1, #69	; 0x45
   182ee:	f00d fe35 	bl	25f5c <z_log_minimal_printk>
	}

	LOG_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash), "Stored Hash: ");

	return 0;
}
   182f2:	4620      	mov	r0, r4
   182f4:	bd10      	pop	{r4, pc}
	return 0;
   182f6:	2400      	movs	r4, #0
   182f8:	e7fb      	b.n	182f2 <db_hash_set+0x1a>
   182fa:	bf00      	nop
   182fc:	20001a80 	.word	0x20001a80
   18300:	0002c34f 	.word	0x0002c34f

00018304 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   18304:	2210      	movs	r2, #16
{
   18306:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   18308:	4906      	ldr	r1, [pc, #24]	; (18324 <db_hash_store+0x20>)
   1830a:	4807      	ldr	r0, [pc, #28]	; (18328 <db_hash_store+0x24>)
   1830c:	f7fa f92a 	bl	12564 <settings_save_one>
	if (err) {
   18310:	4602      	mov	r2, r0
   18312:	b128      	cbz	r0, 18320 <db_hash_store+0x1c>
}
   18314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   18318:	4804      	ldr	r0, [pc, #16]	; (1832c <db_hash_store+0x28>)
   1831a:	2145      	movs	r1, #69	; 0x45
   1831c:	f00d be1e 	b.w	25f5c <z_log_minimal_printk>
}
   18320:	bd08      	pop	{r3, pc}
   18322:	bf00      	nop
   18324:	20001a70 	.word	0x20001a70
   18328:	0002c375 	.word	0x0002c375
   1832c:	0002c37d 	.word	0x0002c37d

00018330 <find_cf_cfg>:
{
   18330:	b570      	push	{r4, r5, r6, lr}
   18332:	4d14      	ldr	r5, [pc, #80]	; (18384 <find_cf_cfg+0x54>)
		if (!conn) {
   18334:	4606      	mov	r6, r0
   18336:	b140      	cbz	r0, 1834a <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18338:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1833c:	462a      	mov	r2, r5
   1833e:	1e6c      	subs	r4, r5, #1
   18340:	f00f f8c5 	bl	274ce <bt_conn_is_peer_addr_le>
   18344:	b198      	cbz	r0, 1836e <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   18346:	4620      	mov	r0, r4
   18348:	e00c      	b.n	18364 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1834a:	490f      	ldr	r1, [pc, #60]	; (18388 <find_cf_cfg+0x58>)
   1834c:	4628      	mov	r0, r5
   1834e:	f00f fe52 	bl	27ff6 <bt_addr_le_eq>
   18352:	b940      	cbnz	r0, 18366 <find_cf_cfg+0x36>
   18354:	490c      	ldr	r1, [pc, #48]	; (18388 <find_cf_cfg+0x58>)
   18356:	f105 0010 	add.w	r0, r5, #16
   1835a:	f00f fe4c 	bl	27ff6 <bt_addr_le_eq>
   1835e:	b120      	cbz	r0, 1836a <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   18360:	f105 000f 	add.w	r0, r5, #15
}
   18364:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   18366:	1e68      	subs	r0, r5, #1
   18368:	e7fc      	b.n	18364 <find_cf_cfg+0x34>
	return NULL;
   1836a:	2000      	movs	r0, #0
   1836c:	e7fa      	b.n	18364 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1836e:	7c21      	ldrb	r1, [r4, #16]
   18370:	f104 0211 	add.w	r2, r4, #17
   18374:	4630      	mov	r0, r6
   18376:	f00f f8aa 	bl	274ce <bt_conn_is_peer_addr_le>
   1837a:	2800      	cmp	r0, #0
   1837c:	d0f5      	beq.n	1836a <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1837e:	f104 0010 	add.w	r0, r4, #16
   18382:	e7ef      	b.n	18364 <find_cf_cfg+0x34>
   18384:	20002735 	.word	0x20002735
   18388:	0002b150 	.word	0x0002b150

0001838c <find_sc_cfg>:
{
   1838c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1838e:	4c0e      	ldr	r4, [pc, #56]	; (183c8 <find_sc_cfg+0x3c>)
   18390:	7823      	ldrb	r3, [r4, #0]
   18392:	4283      	cmp	r3, r0
{
   18394:	4605      	mov	r5, r0
   18396:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   18398:	d00c      	beq.n	183b4 <find_sc_cfg+0x28>
   1839a:	7b23      	ldrb	r3, [r4, #12]
   1839c:	42ab      	cmp	r3, r5
   1839e:	d110      	bne.n	183c2 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   183a0:	480a      	ldr	r0, [pc, #40]	; (183cc <find_sc_cfg+0x40>)
   183a2:	4631      	mov	r1, r6
   183a4:	f00f fe27 	bl	27ff6 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   183a8:	b158      	cbz	r0, 183c2 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   183aa:	2301      	movs	r3, #1
			return &sc_cfg[i];
   183ac:	220c      	movs	r2, #12
   183ae:	fb02 4003 	mla	r0, r2, r3, r4
   183b2:	e007      	b.n	183c4 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   183b4:	1c60      	adds	r0, r4, #1
   183b6:	f00f fe1e 	bl	27ff6 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   183ba:	2800      	cmp	r0, #0
   183bc:	d0ed      	beq.n	1839a <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   183be:	2300      	movs	r3, #0
   183c0:	e7f4      	b.n	183ac <find_sc_cfg+0x20>
	return NULL;
   183c2:	2000      	movs	r0, #0
}
   183c4:	bd70      	pop	{r4, r5, r6, pc}
   183c6:	bf00      	nop
   183c8:	20003586 	.word	0x20003586
   183cc:	20003593 	.word	0x20003593

000183d0 <find_ccc_cfg>:
{
   183d0:	b510      	push	{r4, lr}
						    &cfg->peer)) {
   183d2:	1c4a      	adds	r2, r1, #1
{
   183d4:	460c      	mov	r4, r1
		if (conn) {
   183d6:	b138      	cbz	r0, 183e8 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   183d8:	7809      	ldrb	r1, [r1, #0]
   183da:	f00f f878 	bl	274ce <bt_conn_is_peer_addr_le>
   183de:	b108      	cbz	r0, 183e4 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   183e0:	4620      	mov	r0, r4
}
   183e2:	bd10      	pop	{r4, pc}
	return NULL;
   183e4:	2000      	movs	r0, #0
   183e6:	e7fc      	b.n	183e2 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   183e8:	4902      	ldr	r1, [pc, #8]	; (183f4 <find_ccc_cfg+0x24>)
   183ea:	4610      	mov	r0, r2
   183ec:	f00f fe03 	bl	27ff6 <bt_addr_le_eq>
   183f0:	e7f5      	b.n	183de <find_ccc_cfg+0xe>
   183f2:	bf00      	nop
   183f4:	0002b150 	.word	0x0002b150

000183f8 <find_cf_cfg_by_addr>:
{
   183f8:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   183fa:	4c0e      	ldr	r4, [pc, #56]	; (18434 <find_cf_cfg_by_addr+0x3c>)
   183fc:	7823      	ldrb	r3, [r4, #0]
   183fe:	4283      	cmp	r3, r0
{
   18400:	4606      	mov	r6, r0
   18402:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   18404:	d00b      	beq.n	1841e <find_cf_cfg_by_addr+0x26>
   18406:	7c23      	ldrb	r3, [r4, #16]
   18408:	42b3      	cmp	r3, r6
   1840a:	d110      	bne.n	1842e <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1840c:	490a      	ldr	r1, [pc, #40]	; (18438 <find_cf_cfg_by_addr+0x40>)
   1840e:	4628      	mov	r0, r5
   18410:	f00f fdf1 	bl	27ff6 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   18414:	b158      	cbz	r0, 1842e <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   18416:	2301      	movs	r3, #1
				return &cf_cfg[i];
   18418:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   1841c:	e008      	b.n	18430 <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1841e:	1c61      	adds	r1, r4, #1
   18420:	4628      	mov	r0, r5
   18422:	f00f fde8 	bl	27ff6 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   18426:	2800      	cmp	r0, #0
   18428:	d0ed      	beq.n	18406 <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1842a:	2300      	movs	r3, #0
   1842c:	e7f4      	b.n	18418 <find_cf_cfg_by_addr+0x20>
	return NULL;
   1842e:	2000      	movs	r0, #0
}
   18430:	bd70      	pop	{r4, r5, r6, pc}
   18432:	bf00      	nop
   18434:	20002734 	.word	0x20002734
   18438:	20002745 	.word	0x20002745

0001843c <cf_write>:
{
   1843c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18440:	461f      	mov	r7, r3
   18442:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   18446:	2b01      	cmp	r3, #1
{
   18448:	4606      	mov	r6, r0
   1844a:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1844c:	d835      	bhi.n	184ba <cf_write+0x7e>
	if (offset + len > sizeof(cfg->data)) {
   1844e:	443b      	add	r3, r7
   18450:	2b01      	cmp	r3, #1
   18452:	463d      	mov	r5, r7
   18454:	dc34      	bgt.n	184c0 <cf_write+0x84>
	cfg = find_cf_cfg(conn);
   18456:	f7ff ff6b 	bl	18330 <find_cf_cfg>
	if (!cfg) {
   1845a:	4604      	mov	r4, r0
   1845c:	b960      	cbnz	r0, 18478 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
   1845e:	f7ff ff67 	bl	18330 <find_cf_cfg>
	if (!cfg) {
   18462:	4604      	mov	r4, r0
   18464:	b940      	cbnz	r0, 18478 <cf_write+0x3c>
		BT_WARN("No space to store Client Supported Features");
   18466:	4819      	ldr	r0, [pc, #100]	; (184cc <cf_write+0x90>)
   18468:	2157      	movs	r1, #87	; 0x57
   1846a:	f00d fd77 	bl	25f5c <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1846e:	f06f 0510 	mvn.w	r5, #16
}
   18472:	4628      	mov	r0, r5
   18474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   18478:	b197      	cbz	r7, 184a0 <cf_write+0x64>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1847a:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1847c:	f898 2000 	ldrb.w	r2, [r8]
   18480:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   18482:	fa21 f003 	lsr.w	r0, r1, r3
   18486:	07c7      	lsls	r7, r0, #31
   18488:	d503      	bpl.n	18492 <cf_write+0x56>
		    !(value[i / 8] & BIT(i % 8))) {
   1848a:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1848e:	07c0      	lsls	r0, r0, #31
   18490:	d519      	bpl.n	184c6 <cf_write+0x8a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   18492:	3301      	adds	r3, #1
   18494:	2b03      	cmp	r3, #3
   18496:	d1f4      	bne.n	18482 <cf_write+0x46>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   18498:	f002 0207 	and.w	r2, r2, #7
   1849c:	4311      	orrs	r1, r2
   1849e:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   184a0:	f106 0190 	add.w	r1, r6, #144	; 0x90
   184a4:	1c60      	adds	r0, r4, #1
   184a6:	f00f fdd0 	bl	2804a <bt_addr_le_copy>
	cfg->id = conn->id;
   184aa:	4620      	mov	r0, r4
   184ac:	7a33      	ldrb	r3, [r6, #8]
   184ae:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   184b2:	2101      	movs	r1, #1
   184b4:	f00f fdba 	bl	2802c <atomic_or>
}
   184b8:	e7db      	b.n	18472 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   184ba:	f06f 0506 	mvn.w	r5, #6
   184be:	e7d8      	b.n	18472 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   184c0:	f06f 050c 	mvn.w	r5, #12
   184c4:	e7d5      	b.n	18472 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   184c6:	f06f 0512 	mvn.w	r5, #18
   184ca:	e7d2      	b.n	18472 <cf_write+0x36>
   184cc:	0002c3a8 	.word	0x0002c3a8

000184d0 <ccc_load>:
{
   184d0:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   184d2:	4b20      	ldr	r3, [pc, #128]	; (18554 <ccc_load+0x84>)
{
   184d4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   184d6:	6882      	ldr	r2, [r0, #8]
   184d8:	429a      	cmp	r2, r3
   184da:	d10f      	bne.n	184fc <ccc_load+0x2c>
	if (!load->entry) {
   184dc:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   184de:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   184e0:	b975      	cbnz	r5, 18500 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   184e2:	7922      	ldrb	r2, [r4, #4]
   184e4:	6821      	ldr	r1, [r4, #0]
   184e6:	4630      	mov	r0, r6
   184e8:	f00f fd8d 	bl	28006 <ccc_find_cfg>
	if (!cfg) {
   184ec:	4604      	mov	r4, r0
   184ee:	b128      	cbz	r0, 184fc <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   184f0:	4919      	ldr	r1, [pc, #100]	; (18558 <ccc_load+0x88>)
   184f2:	3001      	adds	r0, #1
   184f4:	f00f fda9 	bl	2804a <bt_addr_le_copy>
	cfg->id = 0U;
   184f8:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   184fa:	8125      	strh	r5, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   184fc:	2001      	movs	r0, #1
}
   184fe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   18500:	68e0      	ldr	r0, [r4, #12]
   18502:	2800      	cmp	r0, #0
   18504:	d0fb      	beq.n	184fe <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   18506:	882b      	ldrh	r3, [r5, #0]
   18508:	428b      	cmp	r3, r1
   1850a:	d00a      	beq.n	18522 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   1850c:	d2f6      	bcs.n	184fc <ccc_load+0x2c>
	load->count--;
   1850e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   18510:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   18512:	3801      	subs	r0, #1
	load->entry++;
   18514:	3304      	adds	r3, #4
	load->count--;
   18516:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18518:	3800      	subs	r0, #0
	load->entry++;
   1851a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1851c:	bf18      	it	ne
   1851e:	2001      	movne	r0, #1
   18520:	e7ed      	b.n	184fe <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   18522:	7922      	ldrb	r2, [r4, #4]
   18524:	6821      	ldr	r1, [r4, #0]
   18526:	4630      	mov	r0, r6
   18528:	f00f fd6d 	bl	28006 <ccc_find_cfg>
	if (!cfg) {
   1852c:	4605      	mov	r5, r0
   1852e:	b968      	cbnz	r0, 1854c <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   18530:	4602      	mov	r2, r0
   18532:	4909      	ldr	r1, [pc, #36]	; (18558 <ccc_load+0x88>)
   18534:	4630      	mov	r0, r6
   18536:	f00f fd66 	bl	28006 <ccc_find_cfg>
		if (!cfg) {
   1853a:	4605      	mov	r5, r0
   1853c:	2800      	cmp	r0, #0
   1853e:	d0e6      	beq.n	1850e <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   18540:	6821      	ldr	r1, [r4, #0]
   18542:	3001      	adds	r0, #1
   18544:	f00f fd81 	bl	2804a <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   18548:	7923      	ldrb	r3, [r4, #4]
   1854a:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1854c:	68a3      	ldr	r3, [r4, #8]
   1854e:	885b      	ldrh	r3, [r3, #2]
   18550:	812b      	strh	r3, [r5, #8]
   18552:	e7dc      	b.n	1850e <ccc_load+0x3e>
   18554:	000189f9 	.word	0x000189f9
   18558:	0002b150 	.word	0x0002b150

0001855c <sc_store>:
{
   1855c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1855e:	4605      	mov	r5, r0
{
   18560:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   18562:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   18566:	4604      	mov	r4, r0
	if (cfg->id) {
   18568:	b1ca      	cbz	r2, 1859e <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1856a:	ae02      	add	r6, sp, #8
   1856c:	2104      	movs	r1, #4
   1856e:	4630      	mov	r0, r6
   18570:	f00d fa50 	bl	25a14 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   18574:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   18576:	4a0b      	ldr	r2, [pc, #44]	; (185a4 <sc_store+0x48>)
   18578:	462b      	mov	r3, r5
   1857a:	2124      	movs	r1, #36	; 0x24
   1857c:	a803      	add	r0, sp, #12
   1857e:	f7fb fbcf 	bl	13d20 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   18582:	2204      	movs	r2, #4
   18584:	f104 0108 	add.w	r1, r4, #8
   18588:	a803      	add	r0, sp, #12
   1858a:	f7f9 ffeb 	bl	12564 <settings_save_one>
	if (err) {
   1858e:	4602      	mov	r2, r0
   18590:	b118      	cbz	r0, 1859a <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   18592:	4805      	ldr	r0, [pc, #20]	; (185a8 <sc_store+0x4c>)
   18594:	2145      	movs	r1, #69	; 0x45
   18596:	f00d fce1 	bl	25f5c <z_log_minimal_printk>
}
   1859a:	b00c      	add	sp, #48	; 0x30
   1859c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1859e:	9200      	str	r2, [sp, #0]
   185a0:	e7e9      	b.n	18576 <sc_store+0x1a>
   185a2:	bf00      	nop
   185a4:	0002c731 	.word	0x0002c731
   185a8:	0002c3d9 	.word	0x0002c3d9

000185ac <sc_save>:
{
   185ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185b0:	4680      	mov	r8, r0
   185b2:	460f      	mov	r7, r1
   185b4:	4616      	mov	r6, r2
   185b6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   185b8:	f7ff fee8 	bl	1838c <find_sc_cfg>
	if (!cfg) {
   185bc:	4604      	mov	r4, r0
   185be:	b978      	cbnz	r0, 185e0 <sc_save+0x34>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   185c0:	4915      	ldr	r1, [pc, #84]	; (18618 <sc_save+0x6c>)
   185c2:	f7ff fee3 	bl	1838c <find_sc_cfg>
		if (!cfg) {
   185c6:	4604      	mov	r4, r0
   185c8:	b928      	cbnz	r0, 185d6 <sc_save+0x2a>
}
   185ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("unable to save SC: no cfg left");
   185ce:	4813      	ldr	r0, [pc, #76]	; (1861c <sc_save+0x70>)
   185d0:	2145      	movs	r1, #69	; 0x45
   185d2:	f00d bcc3 	b.w	25f5c <z_log_minimal_printk>
		cfg->id = id;
   185d6:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   185da:	4639      	mov	r1, r7
   185dc:	f00f fd35 	bl	2804a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   185e0:	8922      	ldrh	r2, [r4, #8]
   185e2:	8963      	ldrh	r3, [r4, #10]
   185e4:	b96a      	cbnz	r2, 18602 <sc_save+0x56>
   185e6:	b973      	cbnz	r3, 18606 <sc_save+0x5a>
		cfg->data.start = start;
   185e8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   185ea:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   185ec:	4621      	mov	r1, r4
   185ee:	f811 0b01 	ldrb.w	r0, [r1], #1
   185f2:	f00e fced 	bl	26fd0 <bt_addr_le_is_bonded>
   185f6:	b140      	cbz	r0, 1860a <sc_save+0x5e>
		sc_store(cfg);
   185f8:	4620      	mov	r0, r4
}
   185fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   185fe:	f7ff bfad 	b.w	1855c <sc_store>
	if (new_start >= *start && new_end <= *end) {
   18602:	4296      	cmp	r6, r2
   18604:	d303      	bcc.n	1860e <sc_save+0x62>
   18606:	42ab      	cmp	r3, r5
   18608:	d3ef      	bcc.n	185ea <sc_save+0x3e>
}
   1860a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   1860e:	42ab      	cmp	r3, r5
		*start = new_start;
   18610:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   18612:	d2eb      	bcs.n	185ec <sc_save+0x40>
   18614:	e7e9      	b.n	185ea <sc_save+0x3e>
   18616:	bf00      	nop
   18618:	0002b150 	.word	0x0002b150
   1861c:	0002c3fa 	.word	0x0002c3fa

00018620 <sc_set>:
{
   18620:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18624:	460e      	mov	r6, r1
   18626:	4617      	mov	r7, r2
   18628:	4698      	mov	r8, r3
	if (!name) {
   1862a:	4604      	mov	r4, r0
   1862c:	b948      	cbnz	r0, 18642 <sc_set+0x22>
		BT_ERR("Insufficient number of arguments");
   1862e:	4829      	ldr	r0, [pc, #164]	; (186d4 <sc_set+0xb4>)
   18630:	2145      	movs	r1, #69	; 0x45
   18632:	f00d fc93 	bl	25f5c <z_log_minimal_printk>
		return -EINVAL;
   18636:	f06f 0515 	mvn.w	r5, #21
}
   1863a:	4628      	mov	r0, r5
   1863c:	b004      	add	sp, #16
   1863e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   18642:	a902      	add	r1, sp, #8
   18644:	f00e fb69 	bl	26d1a <bt_settings_decode_key>
	if (err) {
   18648:	4605      	mov	r5, r0
   1864a:	b128      	cbz	r0, 18658 <sc_set+0x38>
		BT_ERR("Unable to decode address %s", name);
   1864c:	4822      	ldr	r0, [pc, #136]	; (186d8 <sc_set+0xb8>)
   1864e:	4622      	mov	r2, r4
   18650:	2145      	movs	r1, #69	; 0x45
   18652:	f00d fc83 	bl	25f5c <z_log_minimal_printk>
		return -EINVAL;
   18656:	e7ee      	b.n	18636 <sc_set+0x16>
	settings_name_next(name, &next);
   18658:	a901      	add	r1, sp, #4
   1865a:	4620      	mov	r0, r4
   1865c:	f00d ff2a 	bl	264b4 <settings_name_next>
	if (!next) {
   18660:	9801      	ldr	r0, [sp, #4]
   18662:	b140      	cbz	r0, 18676 <sc_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   18664:	220a      	movs	r2, #10
   18666:	4629      	mov	r1, r5
   18668:	f00e fa30 	bl	26acc <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1866c:	4602      	mov	r2, r0
   1866e:	b110      	cbz	r0, 18676 <sc_set+0x56>
			BT_ERR("Invalid local identity %lu", next_id);
   18670:	481a      	ldr	r0, [pc, #104]	; (186dc <sc_set+0xbc>)
   18672:	2145      	movs	r1, #69	; 0x45
   18674:	e7ed      	b.n	18652 <sc_set+0x32>
	cfg = find_sc_cfg(id, &addr);
   18676:	a902      	add	r1, sp, #8
   18678:	2000      	movs	r0, #0
   1867a:	f7ff fe87 	bl	1838c <find_sc_cfg>
	if (!cfg && len_rd) {
   1867e:	4604      	mov	r4, r0
   18680:	bb08      	cbnz	r0, 186c6 <sc_set+0xa6>
   18682:	2e00      	cmp	r6, #0
   18684:	d0d9      	beq.n	1863a <sc_set+0x1a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   18686:	4916      	ldr	r1, [pc, #88]	; (186e0 <sc_set+0xc0>)
   18688:	f7ff fe80 	bl	1838c <find_sc_cfg>
		if (!cfg) {
   1868c:	4604      	mov	r4, r0
   1868e:	b930      	cbnz	r0, 1869e <sc_set+0x7e>
			BT_ERR("Unable to restore SC: no cfg left");
   18690:	4814      	ldr	r0, [pc, #80]	; (186e4 <sc_set+0xc4>)
   18692:	2145      	movs	r1, #69	; 0x45
   18694:	f00d fc62 	bl	25f5c <z_log_minimal_printk>
			return -ENOMEM;
   18698:	f06f 050b 	mvn.w	r5, #11
   1869c:	e7cd      	b.n	1863a <sc_set+0x1a>
		cfg->id = id;
   1869e:	2300      	movs	r3, #0
   186a0:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   186a4:	a902      	add	r1, sp, #8
   186a6:	f00f fcd0 	bl	2804a <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   186aa:	f104 0108 	add.w	r1, r4, #8
   186ae:	2204      	movs	r2, #4
   186b0:	4640      	mov	r0, r8
   186b2:	47b8      	blx	r7
		if (len < 0) {
   186b4:	1e04      	subs	r4, r0, #0
   186b6:	dac0      	bge.n	1863a <sc_set+0x1a>
			BT_ERR("Failed to decode value (err %zd)", len);
   186b8:	480b      	ldr	r0, [pc, #44]	; (186e8 <sc_set+0xc8>)
   186ba:	4622      	mov	r2, r4
   186bc:	2145      	movs	r1, #69	; 0x45
   186be:	f00d fc4d 	bl	25f5c <z_log_minimal_printk>
			return len;
   186c2:	4625      	mov	r5, r4
   186c4:	e7b9      	b.n	1863a <sc_set+0x1a>
	if (len_rd) {
   186c6:	2e00      	cmp	r6, #0
   186c8:	d1ef      	bne.n	186aa <sc_set+0x8a>
		memset(cfg, 0, sizeof(*cfg));
   186ca:	220c      	movs	r2, #12
   186cc:	4631      	mov	r1, r6
   186ce:	f00e fae0 	bl	26c92 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   186d2:	e7b2      	b.n	1863a <sc_set+0x1a>
   186d4:	0002b1b0 	.word	0x0002b1b0
   186d8:	0002c41e 	.word	0x0002c41e
   186dc:	0002c43f 	.word	0x0002c43f
   186e0:	0002b150 	.word	0x0002b150
   186e4:	0002c45f 	.word	0x0002c45f
   186e8:	0002c34f 	.word	0x0002c34f

000186ec <db_hash_commit>:

static int db_hash_commit(void)
{
   186ec:	b510      	push	{r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   186ee:	2108      	movs	r1, #8
   186f0:	4809      	ldr	r0, [pc, #36]	; (18718 <db_hash_commit+0x2c>)
   186f2:	f00f fc9b 	bl	2802c <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   186f6:	4809      	ldr	r0, [pc, #36]	; (1871c <db_hash_commit+0x30>)
   186f8:	2200      	movs	r2, #0
   186fa:	2300      	movs	r3, #0
   186fc:	f7fb fbb6 	bl	13e6c <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   18700:	1e04      	subs	r4, r0, #0
   18702:	da06      	bge.n	18712 <db_hash_commit+0x26>
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
   18704:	4806      	ldr	r0, [pc, #24]	; (18720 <db_hash_commit+0x34>)
   18706:	4622      	mov	r2, r4
   18708:	2145      	movs	r1, #69	; 0x45
   1870a:	f00d fc27 	bl	25f5c <z_log_minimal_printk>
	}

	return err;
}
   1870e:	4620      	mov	r0, r4
   18710:	bd10      	pop	{r4, pc}
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   18712:	2400      	movs	r4, #0
	return err;
   18714:	e7fb      	b.n	1870e <db_hash_commit+0x22>
   18716:	bf00      	nop
   18718:	20001b38 	.word	0x20001b38
   1871c:	20001a90 	.word	0x20001a90
   18720:	0002c486 	.word	0x0002c486

00018724 <clear_cf_cfg>:
{
   18724:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   18726:	490c      	ldr	r1, [pc, #48]	; (18758 <clear_cf_cfg+0x34>)
{
   18728:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1872a:	3001      	adds	r0, #1
   1872c:	f00f fc8d 	bl	2804a <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   18730:	f104 0008 	add.w	r0, r4, #8
   18734:	2201      	movs	r2, #1
   18736:	2100      	movs	r1, #0
   18738:	f00e faab 	bl	26c92 <memset>
   1873c:	f3bf 8f5b 	dmb	ish
   18740:	340c      	adds	r4, #12
   18742:	2300      	movs	r3, #0
   18744:	e854 2f00 	ldrex	r2, [r4]
   18748:	e844 3100 	strex	r1, r3, [r4]
   1874c:	2900      	cmp	r1, #0
   1874e:	d1f9      	bne.n	18744 <clear_cf_cfg+0x20>
   18750:	f3bf 8f5b 	dmb	ish
}
   18754:	bd10      	pop	{r4, pc}
   18756:	bf00      	nop
   18758:	0002b150 	.word	0x0002b150

0001875c <cf_set>:
{
   1875c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18760:	4688      	mov	r8, r1
   18762:	4616      	mov	r6, r2
   18764:	461f      	mov	r7, r3
	if (!name) {
   18766:	4604      	mov	r4, r0
   18768:	b948      	cbnz	r0, 1877e <cf_set+0x22>
		BT_ERR("Insufficient number of arguments");
   1876a:	4828      	ldr	r0, [pc, #160]	; (1880c <cf_set+0xb0>)
   1876c:	2145      	movs	r1, #69	; 0x45
   1876e:	f00d fbf5 	bl	25f5c <z_log_minimal_printk>
		return -EINVAL;
   18772:	f06f 0515 	mvn.w	r5, #21
}
   18776:	4628      	mov	r0, r5
   18778:	b004      	add	sp, #16
   1877a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1877e:	a902      	add	r1, sp, #8
   18780:	f00e facb 	bl	26d1a <bt_settings_decode_key>
	if (err) {
   18784:	4605      	mov	r5, r0
   18786:	b128      	cbz	r0, 18794 <cf_set+0x38>
		BT_ERR("Unable to decode address %s", name);
   18788:	4821      	ldr	r0, [pc, #132]	; (18810 <cf_set+0xb4>)
   1878a:	4622      	mov	r2, r4
   1878c:	2145      	movs	r1, #69	; 0x45
   1878e:	f00d fbe5 	bl	25f5c <z_log_minimal_printk>
		return -EINVAL;
   18792:	e7ee      	b.n	18772 <cf_set+0x16>
	settings_name_next(name, &next);
   18794:	a901      	add	r1, sp, #4
   18796:	4620      	mov	r0, r4
   18798:	f00d fe8c 	bl	264b4 <settings_name_next>
	if (!next) {
   1879c:	9801      	ldr	r0, [sp, #4]
   1879e:	b140      	cbz	r0, 187b2 <cf_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   187a0:	220a      	movs	r2, #10
   187a2:	4629      	mov	r1, r5
   187a4:	f00e f992 	bl	26acc <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   187a8:	4602      	mov	r2, r0
   187aa:	b110      	cbz	r0, 187b2 <cf_set+0x56>
			BT_ERR("Invalid local identity %lu", next_id);
   187ac:	4819      	ldr	r0, [pc, #100]	; (18814 <cf_set+0xb8>)
   187ae:	2145      	movs	r1, #69	; 0x45
   187b0:	e7ed      	b.n	1878e <cf_set+0x32>
	cfg = find_cf_cfg_by_addr(id, &addr);
   187b2:	a902      	add	r1, sp, #8
   187b4:	2000      	movs	r0, #0
   187b6:	f7ff fe1f 	bl	183f8 <find_cf_cfg_by_addr>
	if (!cfg) {
   187ba:	4604      	mov	r4, r0
   187bc:	b980      	cbnz	r0, 187e0 <cf_set+0x84>
		cfg = find_cf_cfg(NULL);
   187be:	f7ff fdb7 	bl	18330 <find_cf_cfg>
		if (!cfg) {
   187c2:	4604      	mov	r4, r0
   187c4:	b930      	cbnz	r0, 187d4 <cf_set+0x78>
			BT_ERR("Unable to restore CF: no cfg left");
   187c6:	4814      	ldr	r0, [pc, #80]	; (18818 <cf_set+0xbc>)
   187c8:	2145      	movs	r1, #69	; 0x45
   187ca:	f00d fbc7 	bl	25f5c <z_log_minimal_printk>
			return -ENOMEM;
   187ce:	f06f 050b 	mvn.w	r5, #11
   187d2:	e7d0      	b.n	18776 <cf_set+0x1a>
		cfg->id = id;
   187d4:	2300      	movs	r3, #0
   187d6:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   187da:	a902      	add	r1, sp, #8
   187dc:	f00f fc35 	bl	2804a <bt_addr_le_copy>
	if (len_rd) {
   187e0:	f1b8 0f00 	cmp.w	r8, #0
   187e4:	d00d      	beq.n	18802 <cf_set+0xa6>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   187e6:	f104 0108 	add.w	r1, r4, #8
   187ea:	2201      	movs	r2, #1
   187ec:	4638      	mov	r0, r7
   187ee:	47b0      	blx	r6
		if (len < 0) {
   187f0:	1e04      	subs	r4, r0, #0
   187f2:	dac0      	bge.n	18776 <cf_set+0x1a>
			BT_ERR("Failed to decode value (err %zd)", len);
   187f4:	4809      	ldr	r0, [pc, #36]	; (1881c <cf_set+0xc0>)
   187f6:	4622      	mov	r2, r4
   187f8:	2145      	movs	r1, #69	; 0x45
   187fa:	f00d fbaf 	bl	25f5c <z_log_minimal_printk>
			return len;
   187fe:	4625      	mov	r5, r4
   18800:	e7b9      	b.n	18776 <cf_set+0x1a>
		clear_cf_cfg(cfg);
   18802:	4620      	mov	r0, r4
   18804:	f7ff ff8e 	bl	18724 <clear_cf_cfg>
   18808:	e7b5      	b.n	18776 <cf_set+0x1a>
   1880a:	bf00      	nop
   1880c:	0002b1b0 	.word	0x0002b1b0
   18810:	0002c41e 	.word	0x0002c41e
   18814:	0002c43f 	.word	0x0002c43f
   18818:	0002c4bf 	.word	0x0002c4bf
   1881c:	0002c34f 	.word	0x0002c34f

00018820 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   18820:	b508      	push	{r3, lr}
   18822:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   18824:	6881      	ldr	r1, [r0, #8]
   18826:	4a07      	ldr	r2, [pc, #28]	; (18844 <remove_peer_from_attr+0x24>)
   18828:	4291      	cmp	r1, r2
   1882a:	d109      	bne.n	18840 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1882c:	791a      	ldrb	r2, [r3, #4]
   1882e:	6819      	ldr	r1, [r3, #0]
   18830:	68c0      	ldr	r0, [r0, #12]
   18832:	f00f fbe8 	bl	28006 <ccc_find_cfg>
	if (cfg) {
   18836:	b118      	cbz	r0, 18840 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   18838:	220a      	movs	r2, #10
   1883a:	2100      	movs	r1, #0
   1883c:	f00e fa29 	bl	26c92 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   18840:	2001      	movs	r0, #1
   18842:	bd08      	pop	{r3, pc}
   18844:	000189f9 	.word	0x000189f9

00018848 <ccc_save>:
{
   18848:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1884a:	4b0c      	ldr	r3, [pc, #48]	; (1887c <ccc_save+0x34>)
{
   1884c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1884e:	6882      	ldr	r2, [r0, #8]
   18850:	429a      	cmp	r2, r3
{
   18852:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   18854:	d10f      	bne.n	18876 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   18856:	7922      	ldrb	r2, [r4, #4]
   18858:	6821      	ldr	r1, [r4, #0]
   1885a:	68c0      	ldr	r0, [r0, #12]
   1885c:	f00f fbd3 	bl	28006 <ccc_find_cfg>
	if (!cfg) {
   18860:	b148      	cbz	r0, 18876 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   18862:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   18866:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1886a:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1886c:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1886e:	8901      	ldrh	r1, [r0, #8]
   18870:	8151      	strh	r1, [r2, #10]
	save->count++;
   18872:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   18876:	2001      	movs	r0, #1
   18878:	bd38      	pop	{r3, r4, r5, pc}
   1887a:	bf00      	nop
   1887c:	000189f9 	.word	0x000189f9

00018880 <bt_gatt_clear_sc>:
{
   18880:	b570      	push	{r4, r5, r6, lr}
   18882:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   18884:	f7ff fd82 	bl	1838c <find_sc_cfg>
	if (!cfg) {
   18888:	4604      	mov	r4, r0
   1888a:	b1e8      	cbz	r0, 188c8 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   1888c:	4605      	mov	r5, r0
   1888e:	f815 2b01 	ldrb.w	r2, [r5], #1
   18892:	b1e2      	cbz	r2, 188ce <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   18894:	ae02      	add	r6, sp, #8
   18896:	2104      	movs	r1, #4
   18898:	4630      	mov	r0, r6
   1889a:	f00d f8bb 	bl	25a14 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1889e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   188a0:	4a0c      	ldr	r2, [pc, #48]	; (188d4 <bt_gatt_clear_sc+0x54>)
   188a2:	462b      	mov	r3, r5
   188a4:	2124      	movs	r1, #36	; 0x24
   188a6:	a803      	add	r0, sp, #12
   188a8:	f7fb fa3a 	bl	13d20 <bt_settings_encode_key>
		err = settings_delete(key);
   188ac:	a803      	add	r0, sp, #12
   188ae:	f00d fdd9 	bl	26464 <settings_delete>
		if (err) {
   188b2:	4602      	mov	r2, r0
   188b4:	b118      	cbz	r0, 188be <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   188b6:	4808      	ldr	r0, [pc, #32]	; (188d8 <bt_gatt_clear_sc+0x58>)
   188b8:	2145      	movs	r1, #69	; 0x45
   188ba:	f00d fb4f 	bl	25f5c <z_log_minimal_printk>
	memset(cfg, 0, sizeof(*cfg));
   188be:	220c      	movs	r2, #12
   188c0:	2100      	movs	r1, #0
   188c2:	4620      	mov	r0, r4
   188c4:	f00e f9e5 	bl	26c92 <memset>
}
   188c8:	2000      	movs	r0, #0
   188ca:	b00c      	add	sp, #48	; 0x30
   188cc:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   188ce:	9200      	str	r2, [sp, #0]
   188d0:	e7e6      	b.n	188a0 <bt_gatt_clear_sc+0x20>
   188d2:	bf00      	nop
   188d4:	0002c731 	.word	0x0002c731
   188d8:	0002c4e6 	.word	0x0002c4e6

000188dc <sc_clear>:
{
   188dc:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   188de:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   188e2:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   188e4:	4631      	mov	r1, r6
   188e6:	7a00      	ldrb	r0, [r0, #8]
   188e8:	f00e fb72 	bl	26fd0 <bt_addr_le_is_bonded>
   188ec:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   188ee:	4631      	mov	r1, r6
   188f0:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   188f2:	b14d      	cbz	r5, 18908 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   188f4:	f7ff ffc4 	bl	18880 <bt_gatt_clear_sc>
		if (err) {
   188f8:	4602      	mov	r2, r0
   188fa:	b170      	cbz	r0, 1891a <sc_clear+0x3e>
}
   188fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   18900:	4806      	ldr	r0, [pc, #24]	; (1891c <sc_clear+0x40>)
   18902:	2145      	movs	r1, #69	; 0x45
   18904:	f00d bb2a 	b.w	25f5c <z_log_minimal_printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18908:	f7ff fd40 	bl	1838c <find_sc_cfg>
		if (cfg) {
   1890c:	b128      	cbz	r0, 1891a <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   1890e:	4629      	mov	r1, r5
   18910:	220c      	movs	r2, #12
}
   18912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   18916:	f00e b9bc 	b.w	26c92 <memset>
}
   1891a:	bd70      	pop	{r4, r5, r6, pc}
   1891c:	0002c508 	.word	0x0002c508

00018920 <read_ppcp>:
{
   18920:	b513      	push	{r0, r1, r4, lr}
   18922:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   18926:	4c0b      	ldr	r4, [pc, #44]	; (18954 <read_ppcp+0x34>)
{
   18928:	4610      	mov	r0, r2
	if (offset > value_len) {
   1892a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1892c:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   18930:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   18934:	d80b      	bhi.n	1894e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   18936:	f1c1 0408 	rsb	r4, r1, #8
   1893a:	429c      	cmp	r4, r3
   1893c:	bfa8      	it	ge
   1893e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   18940:	4622      	mov	r2, r4
   18942:	4469      	add	r1, sp
   18944:	f00e f99a 	bl	26c7c <memcpy>
}
   18948:	4620      	mov	r0, r4
   1894a:	b002      	add	sp, #8
   1894c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1894e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   18952:	e7f9      	b.n	18948 <read_ppcp+0x28>
   18954:	00280018 	.word	0x00280018

00018958 <disconnected_cb>:
{
   18958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1895c:	4b23      	ldr	r3, [pc, #140]	; (189ec <disconnected_cb+0x94>)
{
   1895e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18960:	6882      	ldr	r2, [r0, #8]
   18962:	429a      	cmp	r2, r3
{
   18964:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18966:	d102      	bne.n	1896e <disconnected_cb+0x16>
	ccc = attr->user_data;
   18968:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1896a:	8963      	ldrh	r3, [r4, #10]
   1896c:	bb33      	cbnz	r3, 189bc <disconnected_cb+0x64>
}
   1896e:	2001      	movs	r0, #1
   18970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   18974:	f7fd fe94 	bl	166a0 <bt_conn_unref>
		if (ccc->cfg_changed) {
   18978:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1897a:	2100      	movs	r1, #0
   1897c:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1897e:	2b00      	cmp	r3, #0
   18980:	d0f5      	beq.n	1896e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   18982:	4638      	mov	r0, r7
   18984:	4798      	blx	r3
   18986:	e7f2      	b.n	1896e <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18988:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1898c:	7a28      	ldrb	r0, [r5, #8]
   1898e:	4641      	mov	r1, r8
   18990:	f00e fb1e 	bl	26fd0 <bt_addr_le_is_bonded>
   18994:	b968      	cbnz	r0, 189b2 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   18996:	4b16      	ldr	r3, [pc, #88]	; (189f0 <disconnected_cb+0x98>)
   18998:	429c      	cmp	r4, r3
   1899a:	d102      	bne.n	189a2 <disconnected_cb+0x4a>
					sc_clear(conn);
   1899c:	4628      	mov	r0, r5
   1899e:	f7ff ff9d 	bl	188dc <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   189a2:	4914      	ldr	r1, [pc, #80]	; (189f4 <disconnected_cb+0x9c>)
   189a4:	4630      	mov	r0, r6
   189a6:	f00f fb50 	bl	2804a <bt_addr_le_copy>
	cfg->id = 0U;
   189aa:	2300      	movs	r3, #0
   189ac:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   189ae:	8123      	strh	r3, [r4, #8]
}
   189b0:	e7e2      	b.n	18978 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   189b2:	4641      	mov	r1, r8
   189b4:	4630      	mov	r0, r6
   189b6:	f00f fb48 	bl	2804a <bt_addr_le_copy>
   189ba:	e7dd      	b.n	18978 <disconnected_cb+0x20>
		if (!cfg->value) {
   189bc:	8923      	ldrh	r3, [r4, #8]
   189be:	2b00      	cmp	r3, #0
   189c0:	d0da      	beq.n	18978 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   189c2:	4626      	mov	r6, r4
   189c4:	4628      	mov	r0, r5
   189c6:	f816 1b01 	ldrb.w	r1, [r6], #1
   189ca:	4632      	mov	r2, r6
   189cc:	f00e fd7f 	bl	274ce <bt_conn_is_peer_addr_le>
   189d0:	2800      	cmp	r0, #0
   189d2:	d1d9      	bne.n	18988 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   189d4:	7820      	ldrb	r0, [r4, #0]
   189d6:	4631      	mov	r1, r6
   189d8:	f7fe f8f2 	bl	16bc0 <bt_conn_lookup_addr_le>
			if (tmp) {
   189dc:	2800      	cmp	r0, #0
   189de:	d0cb      	beq.n	18978 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   189e0:	7b43      	ldrb	r3, [r0, #13]
   189e2:	2b07      	cmp	r3, #7
   189e4:	d1c6      	bne.n	18974 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   189e6:	f7fd fe5b 	bl	166a0 <bt_conn_unref>
	if (!value_used) {
   189ea:	e7c0      	b.n	1896e <disconnected_cb+0x16>
   189ec:	000189f9 	.word	0x000189f9
   189f0:	20000630 	.word	0x20000630
   189f4:	0002b150 	.word	0x0002b150

000189f8 <bt_gatt_attr_write_ccc>:
{
   189f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   189fc:	461f      	mov	r7, r3
   189fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   18a02:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   18a06:	4605      	mov	r5, r0
   18a08:	4688      	mov	r8, r1
	if (offset) {
   18a0a:	2b00      	cmp	r3, #0
   18a0c:	d166      	bne.n	18adc <bt_gatt_attr_write_ccc+0xe4>
	if (!len || len > sizeof(uint16_t)) {
   18a0e:	1e7b      	subs	r3, r7, #1
   18a10:	2b01      	cmp	r3, #1
   18a12:	d866      	bhi.n	18ae2 <bt_gatt_attr_write_ccc+0xea>
	if (len < sizeof(uint16_t)) {
   18a14:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   18a16:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   18a18:	7816      	ldrb	r6, [r2, #0]
   18a1a:	bf18      	it	ne
   18a1c:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   18a1e:	f7ff fcd7 	bl	183d0 <find_ccc_cfg>
	if (!cfg) {
   18a22:	4604      	mov	r4, r0
   18a24:	b9b0      	cbnz	r0, 18a54 <bt_gatt_attr_write_ccc+0x5c>
		if (!value) {
   18a26:	b916      	cbnz	r6, 18a2e <bt_gatt_attr_write_ccc+0x36>
			return len;
   18a28:	4638      	mov	r0, r7
}
   18a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   18a2e:	4649      	mov	r1, r9
   18a30:	f7ff fcce 	bl	183d0 <find_ccc_cfg>
		if (!cfg) {
   18a34:	4604      	mov	r4, r0
   18a36:	b930      	cbnz	r0, 18a46 <bt_gatt_attr_write_ccc+0x4e>
			BT_WARN("No space to store CCC cfg");
   18a38:	482b      	ldr	r0, [pc, #172]	; (18ae8 <bt_gatt_attr_write_ccc+0xf0>)
   18a3a:	2157      	movs	r1, #87	; 0x57
   18a3c:	f00d fa8e 	bl	25f5c <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   18a40:	f06f 0010 	mvn.w	r0, #16
   18a44:	e7f1      	b.n	18a2a <bt_gatt_attr_write_ccc+0x32>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18a46:	f105 0190 	add.w	r1, r5, #144	; 0x90
   18a4a:	3001      	adds	r0, #1
   18a4c:	f00f fafd 	bl	2804a <bt_addr_le_copy>
		cfg->id = conn->id;
   18a50:	7a2b      	ldrb	r3, [r5, #8]
   18a52:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   18a54:	f8d9 3010 	ldr.w	r3, [r9, #16]
   18a58:	bba3      	cbnz	r3, 18ac4 <bt_gatt_attr_write_ccc+0xcc>
	value_changed = cfg->value != value;
   18a5a:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   18a5e:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   18a60:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   18a64:	42b3      	cmp	r3, r6
   18a66:	d003      	beq.n	18a70 <bt_gatt_attr_write_ccc+0x78>
		gatt_ccc_changed(attr, ccc);
   18a68:	4649      	mov	r1, r9
   18a6a:	4640      	mov	r0, r8
   18a6c:	f00f fa4d 	bl	27f0a <gatt_ccc_changed>
	if (value_changed) {
   18a70:	45b2      	cmp	sl, r6
   18a72:	d01e      	beq.n	18ab2 <bt_gatt_attr_write_ccc+0xba>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   18a74:	4628      	mov	r0, r5
   18a76:	f7fd ff25 	bl	168c4 <bt_conn_index>
   18a7a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 18aec <bt_gatt_attr_write_ccc+0xf4>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   18a7e:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   18a82:	429d      	cmp	r5, r3
   18a84:	d015      	beq.n	18ab2 <bt_gatt_attr_write_ccc+0xba>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18a86:	7a28      	ldrb	r0, [r5, #8]
   18a88:	f105 0190 	add.w	r1, r5, #144	; 0x90
   18a8c:	f00e faa0 	bl	26fd0 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   18a90:	b178      	cbz	r0, 18ab2 <bt_gatt_attr_write_ccc+0xba>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   18a92:	4628      	mov	r0, r5
   18a94:	f7fd ff16 	bl	168c4 <bt_conn_index>
   18a98:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   18a9a:	4628      	mov	r0, r5
   18a9c:	f7fd fdd4 	bl	16648 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   18aa0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   18aa4:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   18aa8:	2300      	movs	r3, #0
   18aaa:	f108 0008 	add.w	r0, r8, #8
   18aae:	f008 f9cd 	bl	20e4c <k_work_reschedule>
	if (!value) {
   18ab2:	2e00      	cmp	r6, #0
   18ab4:	d1b8      	bne.n	18a28 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   18ab6:	490e      	ldr	r1, [pc, #56]	; (18af0 <bt_gatt_attr_write_ccc+0xf8>)
   18ab8:	1c60      	adds	r0, r4, #1
   18aba:	f00f fac6 	bl	2804a <bt_addr_le_copy>
	cfg->id = 0U;
   18abe:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
   18ac0:	8126      	strh	r6, [r4, #8]
}
   18ac2:	e7b1      	b.n	18a28 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   18ac4:	4632      	mov	r2, r6
   18ac6:	4641      	mov	r1, r8
   18ac8:	4628      	mov	r0, r5
   18aca:	4798      	blx	r3
		if (write < 0) {
   18acc:	2800      	cmp	r0, #0
   18ace:	dbac      	blt.n	18a2a <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   18ad0:	3801      	subs	r0, #1
   18ad2:	2801      	cmp	r0, #1
   18ad4:	d9c1      	bls.n	18a5a <bt_gatt_attr_write_ccc+0x62>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   18ad6:	f06f 000d 	mvn.w	r0, #13
   18ada:	e7a6      	b.n	18a2a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18adc:	f06f 0006 	mvn.w	r0, #6
   18ae0:	e7a3      	b.n	18a2a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18ae2:	f06f 000c 	mvn.w	r0, #12
   18ae6:	e7a0      	b.n	18a2a <bt_gatt_attr_write_ccc+0x32>
   18ae8:	0002c523 	.word	0x0002c523
   18aec:	20001a38 	.word	0x20001a38
   18af0:	0002b150 	.word	0x0002b150

00018af4 <sc_commit>:
{
   18af4:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18af6:	4809      	ldr	r0, [pc, #36]	; (18b1c <sc_commit+0x28>)
   18af8:	f06f 0102 	mvn.w	r1, #2
   18afc:	f00f faa8 	bl	28050 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18b00:	4806      	ldr	r0, [pc, #24]	; (18b1c <sc_commit+0x28>)
   18b02:	f00f fa8d 	bl	28020 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   18b06:	07c3      	lsls	r3, r0, #31
   18b08:	d505      	bpl.n	18b16 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   18b0a:	4805      	ldr	r0, [pc, #20]	; (18b20 <sc_commit+0x2c>)
   18b0c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18b10:	2300      	movs	r3, #0
   18b12:	f008 f99b 	bl	20e4c <k_work_reschedule>
}
   18b16:	2000      	movs	r0, #0
   18b18:	bd08      	pop	{r3, pc}
   18b1a:	bf00      	nop
   18b1c:	20001b38 	.word	0x20001b38
   18b20:	20001b08 	.word	0x20001b08

00018b24 <sc_indicate_rsp>:
{
   18b24:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18b26:	f06f 0102 	mvn.w	r1, #2
   18b2a:	4604      	mov	r4, r0
   18b2c:	480f      	ldr	r0, [pc, #60]	; (18b6c <sc_indicate_rsp+0x48>)
   18b2e:	f00f fa8f 	bl	28050 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18b32:	480e      	ldr	r0, [pc, #56]	; (18b6c <sc_indicate_rsp+0x48>)
   18b34:	f00f fa74 	bl	28020 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   18b38:	07c2      	lsls	r2, r0, #31
   18b3a:	d504      	bpl.n	18b46 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   18b3c:	480c      	ldr	r0, [pc, #48]	; (18b70 <sc_indicate_rsp+0x4c>)
   18b3e:	2200      	movs	r2, #0
   18b40:	2300      	movs	r3, #0
   18b42:	f008 f983 	bl	20e4c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   18b46:	4620      	mov	r0, r4
   18b48:	f00f f9ae 	bl	27ea8 <bt_att_fixed_chan_only>
   18b4c:	b160      	cbz	r0, 18b68 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   18b4e:	4620      	mov	r0, r4
   18b50:	f7ff fbee 	bl	18330 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   18b54:	b140      	cbz	r0, 18b68 <sc_indicate_rsp+0x44>
   18b56:	7a03      	ldrb	r3, [r0, #8]
   18b58:	07db      	lsls	r3, r3, #31
   18b5a:	d505      	bpl.n	18b68 <sc_indicate_rsp+0x44>
}
   18b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18b60:	2101      	movs	r1, #1
   18b62:	300c      	adds	r0, #12
   18b64:	f00f ba62 	b.w	2802c <atomic_or>
   18b68:	bd10      	pop	{r4, pc}
   18b6a:	bf00      	nop
   18b6c:	20001b38 	.word	0x20001b38
   18b70:	20001b08 	.word	0x20001b08

00018b74 <bt_gatt_init>:
{
   18b74:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18b76:	4b2b      	ldr	r3, [pc, #172]	; (18c24 <bt_gatt_init+0xb0>)
   18b78:	f3bf 8f5b 	dmb	ish
   18b7c:	2201      	movs	r2, #1
   18b7e:	e853 1f00 	ldrex	r1, [r3]
   18b82:	2900      	cmp	r1, #0
   18b84:	d103      	bne.n	18b8e <bt_gatt_init+0x1a>
   18b86:	e843 2000 	strex	r0, r2, [r3]
   18b8a:	2800      	cmp	r0, #0
   18b8c:	d1f7      	bne.n	18b7e <bt_gatt_init+0xa>
   18b8e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   18b92:	d146      	bne.n	18c22 <bt_gatt_init+0xae>
   18b94:	f3bf 8f5b 	dmb	ish
   18b98:	4b23      	ldr	r3, [pc, #140]	; (18c28 <bt_gatt_init+0xb4>)
   18b9a:	e853 1f00 	ldrex	r1, [r3]
   18b9e:	2900      	cmp	r1, #0
   18ba0:	d103      	bne.n	18baa <bt_gatt_init+0x36>
   18ba2:	e843 2000 	strex	r0, r2, [r3]
   18ba6:	2800      	cmp	r0, #0
   18ba8:	d1f7      	bne.n	18b9a <bt_gatt_init+0x26>
   18baa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   18bae:	d11c      	bne.n	18bea <bt_gatt_init+0x76>
   18bb0:	491e      	ldr	r1, [pc, #120]	; (18c2c <bt_gatt_init+0xb8>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   18bb2:	4a1f      	ldr	r2, [pc, #124]	; (18c30 <bt_gatt_init+0xbc>)
   18bb4:	880b      	ldrh	r3, [r1, #0]
   18bb6:	4c1f      	ldr	r4, [pc, #124]	; (18c34 <bt_gatt_init+0xc0>)
	if (!atomic_cas(&service_init, 0, 1)) {
   18bb8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   18bba:	42a2      	cmp	r2, r4
   18bbc:	d912      	bls.n	18be4 <bt_gatt_init+0x70>
   18bbe:	b100      	cbz	r0, 18bc2 <bt_gatt_init+0x4e>
   18bc0:	800b      	strh	r3, [r1, #0]
   18bc2:	491d      	ldr	r1, [pc, #116]	; (18c38 <bt_gatt_init+0xc4>)
   18bc4:	481d      	ldr	r0, [pc, #116]	; (18c3c <bt_gatt_init+0xc8>)
   18bc6:	f240 520e 	movw	r2, #1294	; 0x50e
   18bca:	f00d f9b9 	bl	25f40 <assert_print>
   18bce:	481a      	ldr	r0, [pc, #104]	; (18c38 <bt_gatt_init+0xc4>)
   18bd0:	f240 510e 	movw	r1, #1294	; 0x50e
   18bd4:	f00d f9ad 	bl	25f32 <assert_post_action>
		last_static_handle += svc->attr_count;
   18bd8:	6850      	ldr	r0, [r2, #4]
   18bda:	4403      	add	r3, r0
   18bdc:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   18bde:	3208      	adds	r2, #8
   18be0:	2001      	movs	r0, #1
   18be2:	e7ea      	b.n	18bba <bt_gatt_init+0x46>
   18be4:	d3f8      	bcc.n	18bd8 <bt_gatt_init+0x64>
   18be6:	b100      	cbz	r0, 18bea <bt_gatt_init+0x76>
   18be8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   18bea:	4b15      	ldr	r3, [pc, #84]	; (18c40 <bt_gatt_init+0xcc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   18bec:	4915      	ldr	r1, [pc, #84]	; (18c44 <bt_gatt_init+0xd0>)
   18bee:	4816      	ldr	r0, [pc, #88]	; (18c48 <bt_gatt_init+0xd4>)
   18bf0:	2200      	movs	r2, #0
	list->tail = NULL;
   18bf2:	e9c3 2200 	strd	r2, r2, [r3]
   18bf6:	f008 f83f 	bl	20c78 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   18bfa:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18bfe:	2300      	movs	r3, #0
   18c00:	4811      	ldr	r0, [pc, #68]	; (18c48 <bt_gatt_init+0xd4>)
   18c02:	f7fb f92d 	bl	13e60 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   18c06:	4911      	ldr	r1, [pc, #68]	; (18c4c <bt_gatt_init+0xd8>)
   18c08:	4811      	ldr	r0, [pc, #68]	; (18c50 <bt_gatt_init+0xdc>)
   18c0a:	f008 f835 	bl	20c78 <k_work_init_delayable>
   18c0e:	2102      	movs	r1, #2
   18c10:	4810      	ldr	r0, [pc, #64]	; (18c54 <bt_gatt_init+0xe0>)
   18c12:	f00f fa0b 	bl	2802c <atomic_or>
}
   18c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   18c1a:	490f      	ldr	r1, [pc, #60]	; (18c58 <bt_gatt_init+0xe4>)
   18c1c:	480f      	ldr	r0, [pc, #60]	; (18c5c <bt_gatt_init+0xe8>)
   18c1e:	f008 b82b 	b.w	20c78 <k_work_init_delayable>
}
   18c22:	bd10      	pop	{r4, pc}
   18c24:	20002758 	.word	0x20002758
   18c28:	20002754 	.word	0x20002754
   18c2c:	2000359e 	.word	0x2000359e
   18c30:	000299b8 	.word	0x000299b8
   18c34:	000299d0 	.word	0x000299d0
   18c38:	0002c542 	.word	0x0002c542
   18c3c:	0002a7df 	.word	0x0002a7df
   18c40:	2000275c 	.word	0x2000275c
   18c44:	00018eb1 	.word	0x00018eb1
   18c48:	20001a90 	.word	0x20001a90
   18c4c:	000193c9 	.word	0x000193c9
   18c50:	20001b08 	.word	0x20001b08
   18c54:	20001b38 	.word	0x20001b38
   18c58:	000283d5 	.word	0x000283d5
   18c5c:	20001a40 	.word	0x20001a40

00018c60 <bt_gatt_attr_get_handle>:
{
   18c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   18c64:	4603      	mov	r3, r0
   18c66:	b378      	cbz	r0, 18cc8 <bt_gatt_attr_get_handle+0x68>
	if (attr->handle) {
   18c68:	8a00      	ldrh	r0, [r0, #16]
   18c6a:	bb68      	cbnz	r0, 18cc8 <bt_gatt_attr_get_handle+0x68>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18c6c:	4918      	ldr	r1, [pc, #96]	; (18cd0 <bt_gatt_attr_get_handle+0x70>)
   18c6e:	f8df e064 	ldr.w	lr, [pc, #100]	; 18cd4 <bt_gatt_attr_get_handle+0x74>
	uint16_t handle = 1;
   18c72:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   18c74:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18c78:	4571      	cmp	r1, lr
   18c7a:	d924      	bls.n	18cc6 <bt_gatt_attr_get_handle+0x66>
   18c7c:	4916      	ldr	r1, [pc, #88]	; (18cd8 <bt_gatt_attr_get_handle+0x78>)
   18c7e:	4817      	ldr	r0, [pc, #92]	; (18cdc <bt_gatt_attr_get_handle+0x7c>)
   18c80:	f240 6265 	movw	r2, #1637	; 0x665
   18c84:	f00d f95c 	bl	25f40 <assert_print>
   18c88:	4813      	ldr	r0, [pc, #76]	; (18cd8 <bt_gatt_attr_get_handle+0x78>)
   18c8a:	f240 6165 	movw	r1, #1637	; 0x665
   18c8e:	f00d f950 	bl	25f32 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   18c92:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   18c96:	42bb      	cmp	r3, r7
   18c98:	d304      	bcc.n	18ca4 <bt_gatt_attr_get_handle+0x44>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   18c9a:	fb0c 7206 	mla	r2, ip, r6, r7
   18c9e:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   18ca0:	4293      	cmp	r3, r2
   18ca2:	d90e      	bls.n	18cc2 <bt_gatt_attr_get_handle+0x62>
			handle += static_svc->attr_count;
   18ca4:	4434      	add	r4, r6
   18ca6:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18ca8:	3108      	adds	r1, #8
   18caa:	4614      	mov	r4, r2
   18cac:	e7e4      	b.n	18c78 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   18cae:	fb0c 7805 	mla	r8, ip, r5, r7
   18cb2:	4543      	cmp	r3, r8
   18cb4:	d00a      	beq.n	18ccc <bt_gatt_attr_get_handle+0x6c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   18cb6:	3501      	adds	r5, #1
   18cb8:	1962      	adds	r2, r4, r5
   18cba:	42b5      	cmp	r5, r6
   18cbc:	b292      	uxth	r2, r2
   18cbe:	d1f6      	bne.n	18cae <bt_gatt_attr_get_handle+0x4e>
   18cc0:	e7f2      	b.n	18ca8 <bt_gatt_attr_get_handle+0x48>
   18cc2:	2500      	movs	r5, #0
   18cc4:	e7f8      	b.n	18cb8 <bt_gatt_attr_get_handle+0x58>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18cc6:	d3e4      	bcc.n	18c92 <bt_gatt_attr_get_handle+0x32>
}
   18cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ccc:	4610      	mov	r0, r2
   18cce:	e7fb      	b.n	18cc8 <bt_gatt_attr_get_handle+0x68>
   18cd0:	000299b8 	.word	0x000299b8
   18cd4:	000299d0 	.word	0x000299d0
   18cd8:	0002c542 	.word	0x0002c542
   18cdc:	0002a7df 	.word	0x0002a7df

00018ce0 <bt_gatt_foreach_attr_type>:
{
   18ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ce4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   18ce8:	9100      	str	r1, [sp, #0]
   18cea:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   18cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18cf0:	2d00      	cmp	r5, #0
   18cf2:	bf08      	it	eq
   18cf4:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   18cf6:	4b29      	ldr	r3, [pc, #164]	; (18d9c <bt_gatt_foreach_attr_type+0xbc>)
   18cf8:	881b      	ldrh	r3, [r3, #0]
   18cfa:	4283      	cmp	r3, r0
{
   18cfc:	4607      	mov	r7, r0
   18cfe:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   18d00:	d232      	bcs.n	18d68 <bt_gatt_foreach_attr_type+0x88>
}
   18d02:	b003      	add	sp, #12
   18d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   18d08:	5889      	ldr	r1, [r1, r2]
   18d0a:	9301      	str	r3, [sp, #4]
   18d0c:	4640      	mov	r0, r8
   18d0e:	f00e f828 	bl	26d62 <bt_uuid_cmp>
   18d12:	9b01      	ldr	r3, [sp, #4]
   18d14:	b190      	cbz	r0, 18d3c <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   18d16:	3401      	adds	r4, #1
   18d18:	f10a 0a01 	add.w	sl, sl, #1
   18d1c:	b2a4      	uxth	r4, r4
   18d1e:	6873      	ldr	r3, [r6, #4]
   18d20:	4553      	cmp	r3, sl
   18d22:	d92c      	bls.n	18d7e <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   18d24:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18d26:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   18d28:	429c      	cmp	r4, r3
   18d2a:	d8ea      	bhi.n	18d02 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   18d2c:	42bc      	cmp	r4, r7
   18d2e:	d3f2      	bcc.n	18d16 <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18d30:	fb0b f20a 	mul.w	r2, fp, sl
   18d34:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   18d36:	f1b8 0f00 	cmp.w	r8, #0
   18d3a:	d1e5      	bne.n	18d08 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   18d3c:	f1b9 0f00 	cmp.w	r9, #0
   18d40:	d10b      	bne.n	18d5a <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   18d42:	3d01      	subs	r5, #1
   18d44:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   18d46:	4618      	mov	r0, r3
   18d48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18d4c:	4621      	mov	r1, r4
   18d4e:	4798      	blx	r3
	if (!*num_matches) {
   18d50:	2d00      	cmp	r5, #0
   18d52:	d0d6      	beq.n	18d02 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18d54:	2800      	cmp	r0, #0
   18d56:	d1de      	bne.n	18d16 <bt_gatt_foreach_attr_type+0x36>
   18d58:	e7d3      	b.n	18d02 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   18d5a:	68da      	ldr	r2, [r3, #12]
   18d5c:	4591      	cmp	r9, r2
   18d5e:	d1da      	bne.n	18d16 <bt_gatt_foreach_attr_type+0x36>
   18d60:	e7ef      	b.n	18d42 <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   18d62:	f04f 0a00 	mov.w	sl, #0
   18d66:	e7da      	b.n	18d1e <bt_gatt_foreach_attr_type+0x3e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18d68:	4e0d      	ldr	r6, [pc, #52]	; (18da0 <bt_gatt_foreach_attr_type+0xc0>)
		uint16_t handle = 1;
   18d6a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18d6c:	f04f 0b14 	mov.w	fp, #20
   18d70:	e006      	b.n	18d80 <bt_gatt_foreach_attr_type+0xa0>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18d72:	d2c6      	bcs.n	18d02 <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   18d74:	6873      	ldr	r3, [r6, #4]
   18d76:	4423      	add	r3, r4
   18d78:	42bb      	cmp	r3, r7
   18d7a:	d2f2      	bcs.n	18d62 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   18d7c:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18d7e:	3608      	adds	r6, #8
   18d80:	4b08      	ldr	r3, [pc, #32]	; (18da4 <bt_gatt_foreach_attr_type+0xc4>)
   18d82:	429e      	cmp	r6, r3
   18d84:	d9f5      	bls.n	18d72 <bt_gatt_foreach_attr_type+0x92>
   18d86:	4908      	ldr	r1, [pc, #32]	; (18da8 <bt_gatt_foreach_attr_type+0xc8>)
   18d88:	4808      	ldr	r0, [pc, #32]	; (18dac <bt_gatt_foreach_attr_type+0xcc>)
   18d8a:	f240 7229 	movw	r2, #1833	; 0x729
   18d8e:	f00d f8d7 	bl	25f40 <assert_print>
   18d92:	4805      	ldr	r0, [pc, #20]	; (18da8 <bt_gatt_foreach_attr_type+0xc8>)
   18d94:	f240 7129 	movw	r1, #1833	; 0x729
   18d98:	f00d f8cb 	bl	25f32 <assert_post_action>
   18d9c:	2000359e 	.word	0x2000359e
   18da0:	000299b8 	.word	0x000299b8
   18da4:	000299d0 	.word	0x000299d0
   18da8:	0002c542 	.word	0x0002c542
   18dac:	0002a7df 	.word	0x0002a7df

00018db0 <db_hash_gen>:
{
   18db0:	b530      	push	{r4, r5, lr}
   18db2:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   18db4:	2300      	movs	r3, #0
{
   18db6:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   18db8:	aa1c      	add	r2, sp, #112	; 0x70
   18dba:	4669      	mov	r1, sp
   18dbc:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   18dbe:	e9cd 3300 	strd	r3, r3, [sp]
   18dc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   18dc6:	f00d fda4 	bl	26912 <tc_cmac_setup>
   18dca:	b928      	cbnz	r0, 18dd8 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   18dcc:	4814      	ldr	r0, [pc, #80]	; (18e20 <db_hash_gen+0x70>)
   18dce:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
   18dd0:	f00d f8c4 	bl	25f5c <z_log_minimal_printk>
}
   18dd4:	b049      	add	sp, #292	; 0x124
   18dd6:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   18dd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18ddc:	2001      	movs	r0, #1
   18dde:	4a11      	ldr	r2, [pc, #68]	; (18e24 <db_hash_gen+0x74>)
   18de0:	ab04      	add	r3, sp, #16
   18de2:	f00f fa84 	bl	282ee <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   18de6:	4810      	ldr	r0, [pc, #64]	; (18e28 <db_hash_gen+0x78>)
   18de8:	a904      	add	r1, sp, #16
   18dea:	f00d fe27 	bl	26a3c <tc_cmac_final>
   18dee:	b910      	cbnz	r0, 18df6 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   18df0:	480e      	ldr	r0, [pc, #56]	; (18e2c <db_hash_gen+0x7c>)
   18df2:	2145      	movs	r1, #69	; 0x45
   18df4:	e7ec      	b.n	18dd0 <db_hash_gen+0x20>
   18df6:	4b0c      	ldr	r3, [pc, #48]	; (18e28 <db_hash_gen+0x78>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   18df8:	2208      	movs	r2, #8
   18dfa:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   18dfe:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   18e00:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
   18e04:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   18e08:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   18e0a:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   18e0c:	d1f7      	bne.n	18dfe <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   18e0e:	b10c      	cbz	r4, 18e14 <db_hash_gen+0x64>
		db_hash_store();
   18e10:	f7ff fa78 	bl	18304 <db_hash_store>
   18e14:	2104      	movs	r1, #4
   18e16:	4806      	ldr	r0, [pc, #24]	; (18e30 <db_hash_gen+0x80>)
   18e18:	f00f f908 	bl	2802c <atomic_or>
   18e1c:	e7da      	b.n	18dd4 <db_hash_gen+0x24>
   18e1e:	bf00      	nop
   18e20:	0002c572 	.word	0x0002c572
   18e24:	00027f51 	.word	0x00027f51
   18e28:	20001a70 	.word	0x20001a70
   18e2c:	0002c590 	.word	0x0002c590
   18e30:	20001b38 	.word	0x20001b38

00018e34 <db_hash_read>:
{
   18e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18e36:	491b      	ldr	r1, [pc, #108]	; (18ea4 <db_hash_read+0x70>)
{
   18e38:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   18e3c:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18e3e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   18e42:	4615      	mov	r5, r2
   18e44:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18e46:	f008 f84d 	bl	20ee4 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18e4a:	4817      	ldr	r0, [pc, #92]	; (18ea8 <db_hash_read+0x74>)
   18e4c:	f00f f8e8 	bl	28020 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   18e50:	0741      	lsls	r1, r0, #29
   18e52:	d402      	bmi.n	18e5a <db_hash_read+0x26>
		db_hash_gen(true);
   18e54:	2001      	movs	r0, #1
   18e56:	f7ff ffab 	bl	18db0 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   18e5a:	4620      	mov	r0, r4
   18e5c:	f7ff fa68 	bl	18330 <find_cf_cfg>
	if (cfg &&
   18e60:	b168      	cbz	r0, 18e7e <db_hash_read+0x4a>
   18e62:	7a03      	ldrb	r3, [r0, #8]
   18e64:	07da      	lsls	r2, r3, #31
   18e66:	d50a      	bpl.n	18e7e <db_hash_read+0x4a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   18e68:	f100 040c 	add.w	r4, r0, #12
   18e6c:	4620      	mov	r0, r4
   18e6e:	f00f f8d7 	bl	28020 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   18e72:	07c3      	lsls	r3, r0, #31
   18e74:	d403      	bmi.n	18e7e <db_hash_read+0x4a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18e76:	2102      	movs	r1, #2
   18e78:	4620      	mov	r0, r4
   18e7a:	f00f f8d7 	bl	2802c <atomic_or>
	if (offset > value_len) {
   18e7e:	2e10      	cmp	r6, #16
   18e80:	d80c      	bhi.n	18e9c <db_hash_read+0x68>
	len = MIN(buf_len, value_len - offset);
   18e82:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   18e86:	4909      	ldr	r1, [pc, #36]	; (18eac <db_hash_read+0x78>)
	len = MIN(buf_len, value_len - offset);
   18e88:	42bc      	cmp	r4, r7
   18e8a:	bfa8      	it	ge
   18e8c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18e8e:	4622      	mov	r2, r4
   18e90:	4431      	add	r1, r6
   18e92:	4628      	mov	r0, r5
   18e94:	f00d fef2 	bl	26c7c <memcpy>
}
   18e98:	4620      	mov	r0, r4
   18e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18e9c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   18ea0:	e7fa      	b.n	18e98 <db_hash_read+0x64>
   18ea2:	bf00      	nop
   18ea4:	20001ac0 	.word	0x20001ac0
   18ea8:	20001b38 	.word	0x20001b38
   18eac:	20001a70 	.word	0x20001a70

00018eb0 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18eb0:	f06f 0108 	mvn.w	r1, #8
{
   18eb4:	b508      	push	{r3, lr}
   18eb6:	4826      	ldr	r0, [pc, #152]	; (18f50 <db_hash_process+0xa0>)
   18eb8:	f00f f8ca 	bl	28050 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   18ebc:	0701      	lsls	r1, r0, #28
   18ebe:	d542      	bpl.n	18f46 <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18ec0:	4823      	ldr	r0, [pc, #140]	; (18f50 <db_hash_process+0xa0>)
   18ec2:	f00f f8ad 	bl	28020 <atomic_get>
   18ec6:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   18ec8:	075a      	lsls	r2, r3, #29
   18eca:	f3c0 0080 	ubfx	r0, r0, #2, #1
   18ece:	d401      	bmi.n	18ed4 <db_hash_process+0x24>
			db_hash_gen(false);
   18ed0:	f7ff ff6e 	bl	18db0 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   18ed4:	491f      	ldr	r1, [pc, #124]	; (18f54 <db_hash_process+0xa4>)
   18ed6:	2210      	movs	r2, #16
   18ed8:	1888      	adds	r0, r1, r2
   18eda:	f00d fea8 	bl	26c2e <memcmp>
   18ede:	b948      	cbnz	r0, 18ef4 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   18ee0:	481d      	ldr	r0, [pc, #116]	; (18f58 <db_hash_process+0xa8>)
   18ee2:	f007 ffb9 	bl	20e58 <k_work_cancel_delayable>
}
   18ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18eea:	4819      	ldr	r0, [pc, #100]	; (18f50 <db_hash_process+0xa0>)
   18eec:	f06f 0101 	mvn.w	r1, #1
   18ef0:	f00f b8ae 	b.w	28050 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   18ef4:	4816      	ldr	r0, [pc, #88]	; (18f50 <db_hash_process+0xa0>)
   18ef6:	2101      	movs	r1, #1
   18ef8:	f00f f898 	bl	2802c <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   18efc:	f010 0f01 	tst.w	r0, #1
   18f00:	4b16      	ldr	r3, [pc, #88]	; (18f5c <db_hash_process+0xac>)
   18f02:	d110      	bne.n	18f26 <db_hash_process+0x76>
		gatt_sc.start = start;
   18f04:	4a16      	ldr	r2, [pc, #88]	; (18f60 <db_hash_process+0xb0>)
   18f06:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18f08:	4811      	ldr	r0, [pc, #68]	; (18f50 <db_hash_process+0xa0>)
   18f0a:	f00f f889 	bl	28020 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   18f0e:	0783      	lsls	r3, r0, #30
   18f10:	d405      	bmi.n	18f1e <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   18f12:	4811      	ldr	r0, [pc, #68]	; (18f58 <db_hash_process+0xa8>)
   18f14:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18f18:	2300      	movs	r3, #0
   18f1a:	f007 ff97 	bl	20e4c <k_work_reschedule>
}
   18f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   18f22:	f7ff b9ef 	b.w	18304 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   18f26:	8b1a      	ldrh	r2, [r3, #24]
   18f28:	8b58      	ldrh	r0, [r3, #26]
   18f2a:	2a01      	cmp	r2, #1
   18f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18f30:	d805      	bhi.n	18f3e <db_hash_process+0x8e>
   18f32:	4290      	cmp	r0, r2
   18f34:	d0f3      	beq.n	18f1e <db_hash_process+0x6e>
		*end = new_end;
   18f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18f3a:	835a      	strh	r2, [r3, #26]
   18f3c:	e7e4      	b.n	18f08 <db_hash_process+0x58>
	if (*end < new_end) {
   18f3e:	4290      	cmp	r0, r2
		*start = new_start;
   18f40:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   18f42:	d0e1      	beq.n	18f08 <db_hash_process+0x58>
   18f44:	e7f7      	b.n	18f36 <db_hash_process+0x86>
}
   18f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   18f4a:	2001      	movs	r0, #1
   18f4c:	f7ff bf30 	b.w	18db0 <db_hash_gen>
   18f50:	20001b38 	.word	0x20001b38
   18f54:	20001a70 	.word	0x20001a70
   18f58:	20001b08 	.word	0x20001b08
   18f5c:	20001ae8 	.word	0x20001ae8
   18f60:	ffff0001 	.word	0xffff0001

00018f64 <ccc_set_direct>:
{
   18f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18f68:	b0b9      	sub	sp, #228	; 0xe4
   18f6a:	460c      	mov	r4, r1
   18f6c:	4617      	mov	r7, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   18f6e:	492c      	ldr	r1, [pc, #176]	; (19020 <ccc_set_direct+0xbc>)
   18f70:	9840      	ldr	r0, [sp, #256]	; 0x100
   18f72:	466a      	mov	r2, sp
{
   18f74:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   18f76:	f00d fa79 	bl	2646c <settings_name_steq>
   18f7a:	b948      	cbnz	r0, 18f90 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   18f7c:	4829      	ldr	r0, [pc, #164]	; (19024 <ccc_set_direct+0xc0>)
   18f7e:	2145      	movs	r1, #69	; 0x45
   18f80:	f00c ffec 	bl	25f5c <z_log_minimal_printk>
   18f84:	f06f 0515 	mvn.w	r5, #21
}
   18f88:	4628      	mov	r0, r5
   18f8a:	b039      	add	sp, #228	; 0xe4
   18f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   18f90:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   18f92:	a901      	add	r1, sp, #4
   18f94:	4630      	mov	r0, r6
   18f96:	f00d fa8d 	bl	264b4 <settings_name_next>
		if (!name) {
   18f9a:	b936      	cbnz	r6, 18faa <ccc_set_direct+0x46>
			BT_ERR("Insufficient number of arguments");
   18f9c:	4822      	ldr	r0, [pc, #136]	; (19028 <ccc_set_direct+0xc4>)
   18f9e:	2145      	movs	r1, #69	; 0x45
   18fa0:	f00c ffdc 	bl	25f5c <z_log_minimal_printk>
			return -EINVAL;
   18fa4:	f06f 0415 	mvn.w	r4, #21
   18fa8:	e02a      	b.n	19000 <ccc_set_direct+0x9c>
		} else if (!next) {
   18faa:	9801      	ldr	r0, [sp, #4]
   18fac:	b970      	cbnz	r0, 18fcc <ccc_set_direct+0x68>
		err = bt_settings_decode_key(name, &addr);
   18fae:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   18fb2:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   18fb4:	4649      	mov	r1, r9
   18fb6:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   18fb8:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   18fbc:	f00d fead 	bl	26d1a <bt_settings_decode_key>
		if (err) {
   18fc0:	4605      	mov	r5, r0
   18fc2:	b178      	cbz	r0, 18fe4 <ccc_set_direct+0x80>
			BT_ERR("Unable to decode address %s", name);
   18fc4:	4819      	ldr	r0, [pc, #100]	; (1902c <ccc_set_direct+0xc8>)
   18fc6:	4632      	mov	r2, r6
   18fc8:	2145      	movs	r1, #69	; 0x45
   18fca:	e008      	b.n	18fde <ccc_set_direct+0x7a>
			unsigned long next_id = strtoul(next, NULL, 10);
   18fcc:	220a      	movs	r2, #10
   18fce:	2100      	movs	r1, #0
   18fd0:	f00d fd7c 	bl	26acc <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   18fd4:	4602      	mov	r2, r0
   18fd6:	2800      	cmp	r0, #0
   18fd8:	d0e9      	beq.n	18fae <ccc_set_direct+0x4a>
				BT_ERR("Invalid local identity %lu", next_id);
   18fda:	4815      	ldr	r0, [pc, #84]	; (19030 <ccc_set_direct+0xcc>)
   18fdc:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to decode address %s", name);
   18fde:	f00c ffbd 	bl	25f5c <z_log_minimal_printk>
			return -EINVAL;
   18fe2:	e7df      	b.n	18fa4 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   18fe4:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   18fe8:	b1c4      	cbz	r4, 1901c <ccc_set_direct+0xb8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   18fea:	22c0      	movs	r2, #192	; 0xc0
   18fec:	a908      	add	r1, sp, #32
   18fee:	4640      	mov	r0, r8
   18ff0:	47b8      	blx	r7
			if (len < 0) {
   18ff2:	1e04      	subs	r4, r0, #0
   18ff4:	da06      	bge.n	19004 <ccc_set_direct+0xa0>
				BT_ERR("Failed to decode value (err %zd)", len);
   18ff6:	480f      	ldr	r0, [pc, #60]	; (19034 <ccc_set_direct+0xd0>)
   18ff8:	4622      	mov	r2, r4
   18ffa:	2145      	movs	r1, #69	; 0x45
   18ffc:	f00c ffae 	bl	25f5c <z_log_minimal_printk>
			return -EINVAL;
   19000:	4625      	mov	r5, r4
   19002:	e7c1      	b.n	18f88 <ccc_set_direct+0x24>
			load.count = len / sizeof(*ccc_store);
   19004:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   19006:	ab08      	add	r3, sp, #32
			load.count = len / sizeof(*ccc_store);
   19008:	e9cd 3406 	strd	r3, r4, [sp, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1900c:	4a0a      	ldr	r2, [pc, #40]	; (19038 <ccc_set_direct+0xd4>)
   1900e:	ab04      	add	r3, sp, #16
   19010:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19014:	2001      	movs	r0, #1
   19016:	f00f f96a 	bl	282ee <bt_gatt_foreach_attr>
	return 0;
   1901a:	e7b5      	b.n	18f88 <ccc_set_direct+0x24>
   1901c:	4623      	mov	r3, r4
   1901e:	e7f3      	b.n	19008 <ccc_set_direct+0xa4>
   19020:	0002c5ae 	.word	0x0002c5ae
   19024:	0002c5b5 	.word	0x0002c5b5
   19028:	0002b1b0 	.word	0x0002b1b0
   1902c:	0002c41e 	.word	0x0002c41e
   19030:	0002c43f 	.word	0x0002c43f
   19034:	0002c34f 	.word	0x0002c34f
   19038:	000184d1 	.word	0x000184d1

0001903c <bt_gatt_attr_next>:
{
   1903c:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1903e:	2300      	movs	r3, #0
   19040:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   19042:	f7ff fe0d 	bl	18c60 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   19046:	1c41      	adds	r1, r0, #1
   19048:	b289      	uxth	r1, r1
   1904a:	4608      	mov	r0, r1
   1904c:	4a03      	ldr	r2, [pc, #12]	; (1905c <bt_gatt_attr_next+0x20>)
   1904e:	ab01      	add	r3, sp, #4
   19050:	f00f f94d 	bl	282ee <bt_gatt_foreach_attr>
}
   19054:	9801      	ldr	r0, [sp, #4]
   19056:	b003      	add	sp, #12
   19058:	f85d fb04 	ldr.w	pc, [sp], #4
   1905c:	00027f05 	.word	0x00027f05

00019060 <bt_gatt_is_subscribed>:
{
   19060:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19064:	460c      	mov	r4, r1
   19066:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   19068:	4605      	mov	r5, r0
   1906a:	b950      	cbnz	r0, 19082 <bt_gatt_is_subscribed+0x22>
   1906c:	4953      	ldr	r1, [pc, #332]	; (191bc <bt_gatt_is_subscribed+0x15c>)
   1906e:	4854      	ldr	r0, [pc, #336]	; (191c0 <bt_gatt_is_subscribed+0x160>)
   19070:	f640 424b 	movw	r2, #3147	; 0xc4b
   19074:	f00c ff64 	bl	25f40 <assert_print>
   19078:	f640 414b 	movw	r1, #3147	; 0xc4b
	__ASSERT(attr, "invalid parameter\n");
   1907c:	484f      	ldr	r0, [pc, #316]	; (191bc <bt_gatt_is_subscribed+0x15c>)
   1907e:	f00c ff58 	bl	25f32 <assert_post_action>
   19082:	b941      	cbnz	r1, 19096 <bt_gatt_is_subscribed+0x36>
   19084:	494d      	ldr	r1, [pc, #308]	; (191bc <bt_gatt_is_subscribed+0x15c>)
   19086:	484e      	ldr	r0, [pc, #312]	; (191c0 <bt_gatt_is_subscribed+0x160>)
   19088:	f640 424c 	movw	r2, #3148	; 0xc4c
   1908c:	f00c ff58 	bl	25f40 <assert_print>
   19090:	f640 414c 	movw	r1, #3148	; 0xc4c
   19094:	e7f2      	b.n	1907c <bt_gatt_is_subscribed+0x1c>
	if (conn->state != BT_CONN_CONNECTED) {
   19096:	7b43      	ldrb	r3, [r0, #13]
   19098:	2b07      	cmp	r3, #7
   1909a:	d110      	bne.n	190be <bt_gatt_is_subscribed+0x5e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1909c:	2300      	movs	r3, #0
   1909e:	f88d 300c 	strb.w	r3, [sp, #12]
   190a2:	6820      	ldr	r0, [r4, #0]
   190a4:	f642 0303 	movw	r3, #10243	; 0x2803
   190a8:	a903      	add	r1, sp, #12
   190aa:	f8ad 300e 	strh.w	r3, [sp, #14]
   190ae:	f00d fe58 	bl	26d62 <bt_uuid_cmp>
   190b2:	b9b0      	cbnz	r0, 190e2 <bt_gatt_is_subscribed+0x82>
		if (!(chrc->properties &
   190b4:	68e3      	ldr	r3, [r4, #12]
   190b6:	799b      	ldrb	r3, [r3, #6]
   190b8:	f013 0f30 	tst.w	r3, #48	; 0x30
   190bc:	d103      	bne.n	190c6 <bt_gatt_is_subscribed+0x66>
		return false;
   190be:	2000      	movs	r0, #0
}
   190c0:	b004      	add	sp, #16
   190c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   190c6:	4620      	mov	r0, r4
   190c8:	f7ff ffb8 	bl	1903c <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   190cc:	4604      	mov	r4, r0
   190ce:	b940      	cbnz	r0, 190e2 <bt_gatt_is_subscribed+0x82>
   190d0:	493a      	ldr	r1, [pc, #232]	; (191bc <bt_gatt_is_subscribed+0x15c>)
   190d2:	483b      	ldr	r0, [pc, #236]	; (191c0 <bt_gatt_is_subscribed+0x160>)
   190d4:	f640 425d 	movw	r2, #3165	; 0xc5d
   190d8:	f00c ff32 	bl	25f40 <assert_print>
   190dc:	f640 415d 	movw	r1, #3165	; 0xc5d
   190e0:	e7cc      	b.n	1907c <bt_gatt_is_subscribed+0x1c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   190e2:	2300      	movs	r3, #0
   190e4:	6820      	ldr	r0, [r4, #0]
   190e6:	f88d 300c 	strb.w	r3, [sp, #12]
   190ea:	a903      	add	r1, sp, #12
   190ec:	f642 1302 	movw	r3, #10498	; 0x2902
   190f0:	f8ad 300e 	strh.w	r3, [sp, #14]
   190f4:	f00d fe35 	bl	26d62 <bt_uuid_cmp>
   190f8:	b168      	cbz	r0, 19116 <bt_gatt_is_subscribed+0xb6>
		attr = bt_gatt_attr_next(attr);
   190fa:	4620      	mov	r0, r4
   190fc:	f7ff ff9e 	bl	1903c <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   19100:	4604      	mov	r4, r0
   19102:	b940      	cbnz	r0, 19116 <bt_gatt_is_subscribed+0xb6>
   19104:	492d      	ldr	r1, [pc, #180]	; (191bc <bt_gatt_is_subscribed+0x15c>)
   19106:	482e      	ldr	r0, [pc, #184]	; (191c0 <bt_gatt_is_subscribed+0x160>)
   19108:	f640 4263 	movw	r2, #3171	; 0xc63
   1910c:	f00c ff18 	bl	25f40 <assert_print>
   19110:	f640 4163 	movw	r1, #3171	; 0xc63
   19114:	e7b2      	b.n	1907c <bt_gatt_is_subscribed+0x1c>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   19116:	2600      	movs	r6, #0
   19118:	f642 1802 	movw	r8, #10498	; 0x2902
   1911c:	6820      	ldr	r0, [r4, #0]
   1911e:	f88d 6000 	strb.w	r6, [sp]
   19122:	4669      	mov	r1, sp
   19124:	f8ad 8002 	strh.w	r8, [sp, #2]
   19128:	f00d fe1b 	bl	26d62 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1912c:	b9d8      	cbnz	r0, 19166 <bt_gatt_is_subscribed+0x106>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1912e:	2300      	movs	r3, #0
   19130:	6820      	ldr	r0, [r4, #0]
   19132:	f88d 300c 	strb.w	r3, [sp, #12]
   19136:	a903      	add	r1, sp, #12
   19138:	f642 1302 	movw	r3, #10498	; 0x2902
   1913c:	f8ad 300e 	strh.w	r3, [sp, #14]
   19140:	f00d fe0f 	bl	26d62 <bt_uuid_cmp>
   19144:	2800      	cmp	r0, #0
   19146:	d1ba      	bne.n	190be <bt_gatt_is_subscribed+0x5e>
	ccc = attr->user_data;
   19148:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1914a:	4622      	mov	r2, r4
   1914c:	4628      	mov	r0, r5
   1914e:	f812 1b01 	ldrb.w	r1, [r2], #1
   19152:	f00e f9bc 	bl	274ce <bt_conn_is_peer_addr_le>
   19156:	2800      	cmp	r0, #0
   19158:	d0b1      	beq.n	190be <bt_gatt_is_subscribed+0x5e>
   1915a:	8923      	ldrh	r3, [r4, #8]
   1915c:	421f      	tst	r7, r3
   1915e:	bf14      	ite	ne
   19160:	2001      	movne	r0, #1
   19162:	2000      	moveq	r0, #0
   19164:	e7ac      	b.n	190c0 <bt_gatt_is_subscribed+0x60>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   19166:	6820      	ldr	r0, [r4, #0]
   19168:	f88d 6004 	strb.w	r6, [sp, #4]
   1916c:	f642 0303 	movw	r3, #10243	; 0x2803
   19170:	a901      	add	r1, sp, #4
   19172:	f8ad 3006 	strh.w	r3, [sp, #6]
   19176:	f00d fdf4 	bl	26d62 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1917a:	2800      	cmp	r0, #0
   1917c:	d0d7      	beq.n	1912e <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1917e:	6820      	ldr	r0, [r4, #0]
   19180:	f88d 6008 	strb.w	r6, [sp, #8]
   19184:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19188:	a902      	add	r1, sp, #8
   1918a:	f8ad 300a 	strh.w	r3, [sp, #10]
   1918e:	f00d fde8 	bl	26d62 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   19192:	2800      	cmp	r0, #0
   19194:	d0cb      	beq.n	1912e <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19196:	6820      	ldr	r0, [r4, #0]
   19198:	f88d 600c 	strb.w	r6, [sp, #12]
   1919c:	f642 0301 	movw	r3, #10241	; 0x2801
   191a0:	a903      	add	r1, sp, #12
   191a2:	f8ad 300e 	strh.w	r3, [sp, #14]
   191a6:	f00d fddc 	bl	26d62 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   191aa:	2800      	cmp	r0, #0
   191ac:	d0bf      	beq.n	1912e <bt_gatt_is_subscribed+0xce>
		attr = bt_gatt_attr_next(attr);
   191ae:	4620      	mov	r0, r4
   191b0:	f7ff ff44 	bl	1903c <bt_gatt_attr_next>
		if (!attr) {
   191b4:	4604      	mov	r4, r0
   191b6:	2800      	cmp	r0, #0
   191b8:	d1b0      	bne.n	1911c <bt_gatt_is_subscribed+0xbc>
   191ba:	e780      	b.n	190be <bt_gatt_is_subscribed+0x5e>
   191bc:	0002c542 	.word	0x0002c542
   191c0:	0002a7df 	.word	0x0002a7df

000191c4 <gatt_indicate>:
{
   191c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   191c8:	4615      	mov	r5, r2
   191ca:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   191cc:	2294      	movs	r2, #148	; 0x94
   191ce:	6869      	ldr	r1, [r5, #4]
{
   191d0:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   191d2:	f00f f897 	bl	28304 <bt_gatt_check_perm>
   191d6:	4680      	mov	r8, r0
   191d8:	b140      	cbz	r0, 191ec <gatt_indicate+0x28>
		BT_WARN("Link is not encrypted");
   191da:	482d      	ldr	r0, [pc, #180]	; (19290 <gatt_indicate+0xcc>)
   191dc:	2157      	movs	r1, #87	; 0x57
   191de:	f00c febd 	bl	25f5c <z_log_minimal_printk>
		return -EPERM;
   191e2:	f04f 35ff 	mov.w	r5, #4294967295
}
   191e6:	4628      	mov	r0, r5
   191e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   191ec:	6869      	ldr	r1, [r5, #4]
   191ee:	2202      	movs	r2, #2
   191f0:	4630      	mov	r0, r6
   191f2:	f7ff ff35 	bl	19060 <bt_gatt_is_subscribed>
   191f6:	b930      	cbnz	r0, 19206 <gatt_indicate+0x42>
			BT_WARN("Device is not subscribed to characteristic");
   191f8:	4826      	ldr	r0, [pc, #152]	; (19294 <gatt_indicate+0xd0>)
   191fa:	2157      	movs	r1, #87	; 0x57
   191fc:	f00c feae 	bl	25f5c <z_log_minimal_printk>
			return -EINVAL;
   19200:	f06f 0515 	mvn.w	r5, #21
   19204:	e7ef      	b.n	191e6 <gatt_indicate+0x22>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   19206:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1920a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1920c:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1920e:	f7fe fef1 	bl	17ff4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   19212:	3702      	adds	r7, #2
	if (!req) {
   19214:	4604      	mov	r4, r0
   19216:	b1a0      	cbz	r0, 19242 <gatt_indicate+0x7e>
	req->func = func;
   19218:	4b1f      	ldr	r3, [pc, #124]	; (19298 <gatt_indicate+0xd4>)
	req->len = len;
   1921a:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1921c:	211d      	movs	r1, #29
   1921e:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   19220:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   19224:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   19226:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   19228:	463a      	mov	r2, r7
   1922a:	4630      	mov	r0, r6
   1922c:	f7fe fc1c 	bl	17a68 <bt_att_create_pdu>
	if (!buf) {
   19230:	4607      	mov	r7, r0
   19232:	b948      	cbnz	r0, 19248 <gatt_indicate+0x84>
		BT_WARN("No buffer available to send indication");
   19234:	4819      	ldr	r0, [pc, #100]	; (1929c <gatt_indicate+0xd8>)
   19236:	2157      	movs	r1, #87	; 0x57
   19238:	f00c fe90 	bl	25f5c <z_log_minimal_printk>
		bt_att_req_free(req);
   1923c:	4620      	mov	r0, r4
   1923e:	f7fe fefb 	bl	18038 <bt_att_req_free>
		return -ENOMEM;
   19242:	f06f 050b 	mvn.w	r5, #11
   19246:	e7ce      	b.n	191e6 <gatt_indicate+0x22>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   19248:	2301      	movs	r3, #1
   1924a:	4642      	mov	r2, r8
   1924c:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1924e:	f107 0a08 	add.w	sl, r7, #8
   19252:	f00e fe50 	bl	27ef6 <bt_att_set_tx_meta_data>
   19256:	2102      	movs	r1, #2
   19258:	4650      	mov	r0, sl
   1925a:	f002 fd5b 	bl	1bd14 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1925e:	4680      	mov	r8, r0
   19260:	4650      	mov	r0, sl
   19262:	f828 9b02 	strh.w	r9, [r8], #2
   19266:	8aa9      	ldrh	r1, [r5, #20]
   19268:	f002 fd54 	bl	1bd14 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1926c:	8aaa      	ldrh	r2, [r5, #20]
   1926e:	6929      	ldr	r1, [r5, #16]
   19270:	4640      	mov	r0, r8
   19272:	f00d fd03 	bl	26c7c <memcpy>
	req->buf = buf;
   19276:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   19278:	4621      	mov	r1, r4
   1927a:	4630      	mov	r0, r6
   1927c:	f7fe fffc 	bl	18278 <bt_att_req_send>
	if (err) {
   19280:	4605      	mov	r5, r0
   19282:	2800      	cmp	r0, #0
   19284:	d0af      	beq.n	191e6 <gatt_indicate+0x22>
		bt_att_req_free(req);
   19286:	4620      	mov	r0, r4
   19288:	f7fe fed6 	bl	18038 <bt_att_req_free>
   1928c:	e7ab      	b.n	191e6 <gatt_indicate+0x22>
   1928e:	bf00      	nop
   19290:	0002c5c6 	.word	0x0002c5c6
   19294:	0002c5e1 	.word	0x0002c5e1
   19298:	00027f1f 	.word	0x00027f1f
   1929c:	0002c611 	.word	0x0002c611

000192a0 <bt_gatt_indicate>:
{
   192a0:	b530      	push	{r4, r5, lr}
   192a2:	4605      	mov	r5, r0
   192a4:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   192a6:	460c      	mov	r4, r1
   192a8:	b951      	cbnz	r1, 192c0 <bt_gatt_indicate+0x20>
   192aa:	4942      	ldr	r1, [pc, #264]	; (193b4 <bt_gatt_indicate+0x114>)
   192ac:	4842      	ldr	r0, [pc, #264]	; (193b8 <bt_gatt_indicate+0x118>)
   192ae:	f640 320b 	movw	r2, #2827	; 0xb0b
   192b2:	f00c fe45 	bl	25f40 <assert_print>
   192b6:	f640 310b 	movw	r1, #2827	; 0xb0b
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   192ba:	483e      	ldr	r0, [pc, #248]	; (193b4 <bt_gatt_indicate+0x114>)
   192bc:	f00c fe39 	bl	25f32 <assert_post_action>
   192c0:	684b      	ldr	r3, [r1, #4]
   192c2:	b953      	cbnz	r3, 192da <bt_gatt_indicate+0x3a>
   192c4:	680b      	ldr	r3, [r1, #0]
   192c6:	b943      	cbnz	r3, 192da <bt_gatt_indicate+0x3a>
   192c8:	493a      	ldr	r1, [pc, #232]	; (193b4 <bt_gatt_indicate+0x114>)
   192ca:	483b      	ldr	r0, [pc, #236]	; (193b8 <bt_gatt_indicate+0x118>)
   192cc:	f640 320c 	movw	r2, #2828	; 0xb0c
   192d0:	f00c fe36 	bl	25f40 <assert_print>
   192d4:	f640 310c 	movw	r1, #2828	; 0xb0c
   192d8:	e7ef      	b.n	192ba <bt_gatt_indicate+0x1a>
   192da:	4838      	ldr	r0, [pc, #224]	; (193bc <bt_gatt_indicate+0x11c>)
   192dc:	f00e fea0 	bl	28020 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   192e0:	0742      	lsls	r2, r0, #29
   192e2:	d561      	bpl.n	193a8 <bt_gatt_indicate+0x108>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   192e4:	b115      	cbz	r5, 192ec <bt_gatt_indicate+0x4c>
   192e6:	7b6b      	ldrb	r3, [r5, #13]
   192e8:	2b07      	cmp	r3, #7
   192ea:	d160      	bne.n	193ae <bt_gatt_indicate+0x10e>
	data.attr = params->attr;
   192ec:	6860      	ldr	r0, [r4, #4]
   192ee:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   192f0:	f7ff fcb6 	bl	18c60 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   192f4:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   192f6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   192fa:	b33a      	cbz	r2, 1934c <bt_gatt_indicate+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   192fc:	a905      	add	r1, sp, #20
   192fe:	9102      	str	r1, [sp, #8]
   19300:	492f      	ldr	r1, [pc, #188]	; (193c0 <bt_gatt_indicate+0x120>)
   19302:	9101      	str	r1, [sp, #4]
   19304:	2101      	movs	r1, #1
	found->attr = NULL;
   19306:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19308:	9100      	str	r1, [sp, #0]
   1930a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1930e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19310:	f7ff fce6 	bl	18ce0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   19314:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   19316:	b91b      	cbnz	r3, 19320 <bt_gatt_indicate+0x80>
			return -ENOENT;
   19318:	f06f 0001 	mvn.w	r0, #1
}
   1931c:	b00b      	add	sp, #44	; 0x2c
   1931e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   19320:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   19322:	9b05      	ldr	r3, [sp, #20]
   19324:	6818      	ldr	r0, [r3, #0]
   19326:	2300      	movs	r3, #0
   19328:	f88d 3010 	strb.w	r3, [sp, #16]
   1932c:	a904      	add	r1, sp, #16
   1932e:	f642 0303 	movw	r3, #10243	; 0x2803
   19332:	f8ad 3012 	strh.w	r3, [sp, #18]
   19336:	f00d fd14 	bl	26d62 <bt_uuid_cmp>
   1933a:	b970      	cbnz	r0, 1935a <bt_gatt_indicate+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1933c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1933e:	68c3      	ldr	r3, [r0, #12]
   19340:	799b      	ldrb	r3, [r3, #6]
   19342:	069b      	lsls	r3, r3, #26
   19344:	d405      	bmi.n	19352 <bt_gatt_indicate+0xb2>
			return -EINVAL;
   19346:	f06f 0015 	mvn.w	r0, #21
   1934a:	e7e7      	b.n	1931c <bt_gatt_indicate+0x7c>
		if (!data.handle) {
   1934c:	2800      	cmp	r0, #0
   1934e:	d1e8      	bne.n	19322 <bt_gatt_indicate+0x82>
   19350:	e7e2      	b.n	19318 <bt_gatt_indicate+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   19352:	f00e ff7e 	bl	28252 <bt_gatt_attr_value_handle>
   19356:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1935a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1935e:	b13d      	cbz	r5, 19370 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   19360:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   19362:	4601      	mov	r1, r0
		params->_ref = 1;
   19364:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   19366:	4622      	mov	r2, r4
   19368:	4628      	mov	r0, r5
   1936a:	f7ff ff2b 	bl	191c4 <gatt_indicate>
   1936e:	e7d5      	b.n	1931c <bt_gatt_indicate+0x7c>
	data.err = -ENOTCONN;
   19370:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   19374:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   19376:	2302      	movs	r3, #2
   19378:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1937c:	f642 1302 	movw	r3, #10498	; 0x2902
   19380:	f8ad 3012 	strh.w	r3, [sp, #18]
   19384:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   19386:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19388:	9302      	str	r3, [sp, #8]
   1938a:	4b0e      	ldr	r3, [pc, #56]	; (193c4 <bt_gatt_indicate+0x124>)
   1938c:	9301      	str	r3, [sp, #4]
   1938e:	2301      	movs	r3, #1
   19390:	9300      	str	r3, [sp, #0]
   19392:	aa04      	add	r2, sp, #16
   19394:	462b      	mov	r3, r5
   19396:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1939a:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1939c:	f88d 5010 	strb.w	r5, [sp, #16]
   193a0:	f7ff fc9e 	bl	18ce0 <bt_gatt_foreach_attr_type>
	return data.err;
   193a4:	9807      	ldr	r0, [sp, #28]
   193a6:	e7b9      	b.n	1931c <bt_gatt_indicate+0x7c>
		return -EAGAIN;
   193a8:	f06f 000a 	mvn.w	r0, #10
   193ac:	e7b6      	b.n	1931c <bt_gatt_indicate+0x7c>
		return -ENOTCONN;
   193ae:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   193b2:	e7b3      	b.n	1931c <bt_gatt_indicate+0x7c>
   193b4:	0002c542 	.word	0x0002c542
   193b8:	0002a7df 	.word	0x0002a7df
   193bc:	2000044c 	.word	0x2000044c
   193c0:	00027f45 	.word	0x00027f45
   193c4:	00019705 	.word	0x00019705

000193c8 <sc_process>:
{
   193c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   193ca:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   193ce:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   193d0:	f1a0 0720 	sub.w	r7, r0, #32
   193d4:	4628      	mov	r0, r5
   193d6:	f00e fe23 	bl	28020 <atomic_get>
   193da:	0783      	lsls	r3, r0, #30
   193dc:	f3c0 0640 	ubfx	r6, r0, #1, #1
   193e0:	d50a      	bpl.n	193f8 <sc_process+0x30>
   193e2:	4917      	ldr	r1, [pc, #92]	; (19440 <sc_process+0x78>)
   193e4:	4817      	ldr	r0, [pc, #92]	; (19444 <sc_process+0x7c>)
   193e6:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
   193ea:	f00c fda9 	bl	25f40 <assert_print>
   193ee:	4814      	ldr	r0, [pc, #80]	; (19440 <sc_process+0x78>)
   193f0:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   193f4:	f00c fd9d 	bl	25f32 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   193f8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   193fc:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   193fe:	f06f 0101 	mvn.w	r1, #1
   19402:	4628      	mov	r0, r5
   19404:	f00e fe24 	bl	28050 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   19408:	4b0f      	ldr	r3, [pc, #60]	; (19448 <sc_process+0x80>)
   1940a:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1940e:	4b0f      	ldr	r3, [pc, #60]	; (1944c <sc_process+0x84>)
   19410:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   19414:	ab01      	add	r3, sp, #4
   19416:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1941a:	2304      	movs	r3, #4
	sc->start = 0U;
   1941c:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   19420:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   19424:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   19428:	4639      	mov	r1, r7
   1942a:	4630      	mov	r0, r6
   1942c:	f7ff ff38 	bl	192a0 <bt_gatt_indicate>
   19430:	b918      	cbnz	r0, 1943a <sc_process+0x72>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19432:	2102      	movs	r1, #2
   19434:	4628      	mov	r0, r5
   19436:	f00e fdf9 	bl	2802c <atomic_or>
}
   1943a:	b003      	add	sp, #12
   1943c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1943e:	bf00      	nop
   19440:	0002c542 	.word	0x0002c542
   19444:	0002a7df 	.word	0x0002a7df
   19448:	00029f28 	.word	0x00029f28
   1944c:	00018b25 	.word	0x00018b25

00019450 <update_ccc>:
{
   19450:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19454:	4b33      	ldr	r3, [pc, #204]	; (19524 <update_ccc+0xd4>)
	struct bt_conn *conn = data->conn;
   19456:	6814      	ldr	r4, [r2, #0]
{
   19458:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1945a:	6882      	ldr	r2, [r0, #8]
   1945c:	429a      	cmp	r2, r3
{
   1945e:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19460:	d116      	bne.n	19490 <update_ccc+0x40>
	ccc = attr->user_data;
   19462:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   19464:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19466:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   19468:	b193      	cbz	r3, 19490 <update_ccc+0x40>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1946a:	7831      	ldrb	r1, [r6, #0]
   1946c:	4620      	mov	r0, r4
   1946e:	f00e f82e 	bl	274ce <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   19472:	b168      	cbz	r0, 19490 <update_ccc+0x40>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   19474:	f44f 7295 	mov.w	r2, #298	; 0x12a
   19478:	4629      	mov	r1, r5
   1947a:	4620      	mov	r0, r4
   1947c:	f00e ff42 	bl	28304 <bt_gatt_check_perm>
		if (err) {
   19480:	b1d8      	cbz	r0, 194ba <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   19482:	2803      	cmp	r0, #3
   19484:	d108      	bne.n	19498 <update_ccc+0x48>
				BT_WARN("CCC %p not writable", attr);
   19486:	4828      	ldr	r0, [pc, #160]	; (19528 <update_ccc+0xd8>)
   19488:	462a      	mov	r2, r5
   1948a:	2157      	movs	r1, #87	; 0x57
   1948c:	f00c fd66 	bl	25f5c <z_log_minimal_printk>
}
   19490:	2001      	movs	r0, #1
   19492:	b002      	add	sp, #8
   19494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			sec = BT_SECURITY_L2;
   19498:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1949a:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1949c:	bf0c      	ite	eq
   1949e:	f04f 0803 	moveq.w	r8, #3
   194a2:	f04f 0802 	movne.w	r8, #2
			    bt_conn_get_security(conn) < sec) {
   194a6:	f00e f810 	bl	274ca <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   194aa:	4580      	cmp	r8, r0
   194ac:	d905      	bls.n	194ba <update_ccc+0x6a>
				if (data->sec < sec) {
   194ae:	793b      	ldrb	r3, [r7, #4]
   194b0:	4543      	cmp	r3, r8
   194b2:	d2ed      	bcs.n	19490 <update_ccc+0x40>
					data->sec = sec;
   194b4:	f887 8004 	strb.w	r8, [r7, #4]
   194b8:	e7ea      	b.n	19490 <update_ccc+0x40>
		gatt_ccc_changed(attr, ccc);
   194ba:	4631      	mov	r1, r6
   194bc:	4628      	mov	r0, r5
   194be:	f00e fd24 	bl	27f0a <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   194c2:	4b1a      	ldr	r3, [pc, #104]	; (1952c <update_ccc+0xdc>)
   194c4:	429e      	cmp	r6, r3
   194c6:	d1e3      	bne.n	19490 <update_ccc+0x40>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   194c8:	7a20      	ldrb	r0, [r4, #8]
   194ca:	f104 0190 	add.w	r1, r4, #144	; 0x90
   194ce:	f7fe ff5d 	bl	1838c <find_sc_cfg>
	if (!cfg) {
   194d2:	2800      	cmp	r0, #0
   194d4:	d0dc      	beq.n	19490 <update_ccc+0x40>
	if (!(cfg->data.start || cfg->data.end)) {
   194d6:	8902      	ldrh	r2, [r0, #8]
   194d8:	8943      	ldrh	r3, [r0, #10]
   194da:	ea52 0103 	orrs.w	r1, r2, r3
   194de:	d0d7      	beq.n	19490 <update_ccc+0x40>
	index = bt_conn_index(conn);
   194e0:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   194e2:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   194e6:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   194ea:	f7fd f9eb 	bl	168c4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   194ee:	4910      	ldr	r1, [pc, #64]	; (19530 <update_ccc+0xe0>)
   194f0:	4a10      	ldr	r2, [pc, #64]	; (19534 <update_ccc+0xe4>)
   194f2:	2318      	movs	r3, #24
   194f4:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   194f8:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   194fa:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   194fc:	4a0e      	ldr	r2, [pc, #56]	; (19538 <update_ccc+0xe8>)
   194fe:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   19500:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19502:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   19506:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   19508:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1950a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1950e:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19510:	4620      	mov	r0, r4
   19512:	f7ff fec5 	bl	192a0 <bt_gatt_indicate>
   19516:	2800      	cmp	r0, #0
   19518:	d0ba      	beq.n	19490 <update_ccc+0x40>
		BT_ERR("SC restore indication failed");
   1951a:	4808      	ldr	r0, [pc, #32]	; (1953c <update_ccc+0xec>)
   1951c:	2145      	movs	r1, #69	; 0x45
   1951e:	f00c fd1d 	bl	25f5c <z_log_minimal_printk>
   19522:	e7b5      	b.n	19490 <update_ccc+0x40>
   19524:	000189f9 	.word	0x000189f9
   19528:	0002c63d 	.word	0x0002c63d
   1952c:	20000630 	.word	0x20000630
   19530:	2000271c 	.word	0x2000271c
   19534:	00029f28 	.word	0x00029f28
   19538:	000281dd 	.word	0x000281dd
   1953c:	0002c656 	.word	0x0002c656

00019540 <gatt_notify>:
{
   19540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19544:	4614      	mov	r4, r2
   19546:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19548:	2294      	movs	r2, #148	; 0x94
   1954a:	6861      	ldr	r1, [r4, #4]
{
   1954c:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1954e:	f00e fed9 	bl	28304 <bt_gatt_check_perm>
   19552:	b138      	cbz	r0, 19564 <gatt_notify+0x24>
		BT_WARN("Link is not encrypted");
   19554:	4820      	ldr	r0, [pc, #128]	; (195d8 <gatt_notify+0x98>)
   19556:	2157      	movs	r1, #87	; 0x57
   19558:	f00c fd00 	bl	25f5c <z_log_minimal_printk>
		return -EPERM;
   1955c:	f04f 30ff 	mov.w	r0, #4294967295
}
   19560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   19564:	6861      	ldr	r1, [r4, #4]
   19566:	2201      	movs	r2, #1
   19568:	4630      	mov	r0, r6
   1956a:	f7ff fd79 	bl	19060 <bt_gatt_is_subscribed>
   1956e:	b930      	cbnz	r0, 1957e <gatt_notify+0x3e>
			BT_WARN("Device is not subscribed to characteristic");
   19570:	481a      	ldr	r0, [pc, #104]	; (195dc <gatt_notify+0x9c>)
   19572:	2157      	movs	r1, #87	; 0x57
   19574:	f00c fcf2 	bl	25f5c <z_log_minimal_printk>
			return -EINVAL;
   19578:	f06f 0015 	mvn.w	r0, #21
   1957c:	e7f0      	b.n	19560 <gatt_notify+0x20>
				sizeof(*nfy) + params->len);
   1957e:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   19580:	211b      	movs	r1, #27
   19582:	3202      	adds	r2, #2
   19584:	4630      	mov	r0, r6
   19586:	f7fe fa6f 	bl	17a68 <bt_att_create_pdu>
	if (!buf) {
   1958a:	4605      	mov	r5, r0
   1958c:	b930      	cbnz	r0, 1959c <gatt_notify+0x5c>
		BT_WARN("No buffer available to send notification");
   1958e:	4814      	ldr	r0, [pc, #80]	; (195e0 <gatt_notify+0xa0>)
   19590:	2157      	movs	r1, #87	; 0x57
   19592:	f00c fce3 	bl	25f5c <z_log_minimal_printk>
		return -ENOMEM;
   19596:	f06f 000b 	mvn.w	r0, #11
   1959a:	e7e1      	b.n	19560 <gatt_notify+0x20>
   1959c:	f100 0908 	add.w	r9, r0, #8
   195a0:	2102      	movs	r1, #2
   195a2:	4648      	mov	r0, r9
   195a4:	f002 fbb6 	bl	1bd14 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   195a8:	4607      	mov	r7, r0
   195aa:	4648      	mov	r0, r9
   195ac:	f827 8b02 	strh.w	r8, [r7], #2
   195b0:	89a1      	ldrh	r1, [r4, #12]
   195b2:	f002 fbaf 	bl	1bd14 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   195b6:	89a2      	ldrh	r2, [r4, #12]
   195b8:	68a1      	ldr	r1, [r4, #8]
   195ba:	4638      	mov	r0, r7
   195bc:	f00d fb5e 	bl	26c7c <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   195c0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   195c4:	4628      	mov	r0, r5
   195c6:	2301      	movs	r3, #1
   195c8:	f00e fc95 	bl	27ef6 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   195cc:	4629      	mov	r1, r5
   195ce:	4630      	mov	r0, r6
}
   195d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   195d4:	f7fe bdf8 	b.w	181c8 <bt_att_send>
   195d8:	0002c5c6 	.word	0x0002c5c6
   195dc:	0002c5e1 	.word	0x0002c5e1
   195e0:	0002c678 	.word	0x0002c678

000195e4 <bt_gatt_notify_cb>:
{
   195e4:	b530      	push	{r4, r5, lr}
   195e6:	4605      	mov	r5, r0
   195e8:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   195ea:	460c      	mov	r4, r1
   195ec:	b951      	cbnz	r1, 19604 <bt_gatt_notify_cb+0x20>
   195ee:	4940      	ldr	r1, [pc, #256]	; (196f0 <bt_gatt_notify_cb+0x10c>)
   195f0:	4840      	ldr	r0, [pc, #256]	; (196f4 <bt_gatt_notify_cb+0x110>)
   195f2:	f640 222b 	movw	r2, #2603	; 0xa2b
   195f6:	f00c fca3 	bl	25f40 <assert_print>
   195fa:	f640 212b 	movw	r1, #2603	; 0xa2b
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   195fe:	483c      	ldr	r0, [pc, #240]	; (196f0 <bt_gatt_notify_cb+0x10c>)
   19600:	f00c fc97 	bl	25f32 <assert_post_action>
   19604:	684b      	ldr	r3, [r1, #4]
   19606:	b953      	cbnz	r3, 1961e <bt_gatt_notify_cb+0x3a>
   19608:	680b      	ldr	r3, [r1, #0]
   1960a:	b943      	cbnz	r3, 1961e <bt_gatt_notify_cb+0x3a>
   1960c:	4938      	ldr	r1, [pc, #224]	; (196f0 <bt_gatt_notify_cb+0x10c>)
   1960e:	4839      	ldr	r0, [pc, #228]	; (196f4 <bt_gatt_notify_cb+0x110>)
   19610:	f640 222c 	movw	r2, #2604	; 0xa2c
   19614:	f00c fc94 	bl	25f40 <assert_print>
   19618:	f640 212c 	movw	r1, #2604	; 0xa2c
   1961c:	e7ef      	b.n	195fe <bt_gatt_notify_cb+0x1a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1961e:	4836      	ldr	r0, [pc, #216]	; (196f8 <bt_gatt_notify_cb+0x114>)
   19620:	f00e fcfe 	bl	28020 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19624:	0742      	lsls	r2, r0, #29
   19626:	d55d      	bpl.n	196e4 <bt_gatt_notify_cb+0x100>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   19628:	b115      	cbz	r5, 19630 <bt_gatt_notify_cb+0x4c>
   1962a:	7b6b      	ldrb	r3, [r5, #13]
   1962c:	2b07      	cmp	r3, #7
   1962e:	d15c      	bne.n	196ea <bt_gatt_notify_cb+0x106>
	data.attr = params->attr;
   19630:	6860      	ldr	r0, [r4, #4]
   19632:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19634:	f7ff fb14 	bl	18c60 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   19638:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1963a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1963e:	b33a      	cbz	r2, 19690 <bt_gatt_notify_cb+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19640:	a905      	add	r1, sp, #20
   19642:	9102      	str	r1, [sp, #8]
   19644:	492d      	ldr	r1, [pc, #180]	; (196fc <bt_gatt_notify_cb+0x118>)
   19646:	9101      	str	r1, [sp, #4]
   19648:	2101      	movs	r1, #1
	found->attr = NULL;
   1964a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1964c:	9100      	str	r1, [sp, #0]
   1964e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   19652:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19654:	f7ff fb44 	bl	18ce0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   19658:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1965a:	b91b      	cbnz	r3, 19664 <bt_gatt_notify_cb+0x80>
			return -ENOENT;
   1965c:	f06f 0001 	mvn.w	r0, #1
}
   19660:	b00b      	add	sp, #44	; 0x2c
   19662:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   19664:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   19666:	9b05      	ldr	r3, [sp, #20]
   19668:	6818      	ldr	r0, [r3, #0]
   1966a:	2300      	movs	r3, #0
   1966c:	f88d 3010 	strb.w	r3, [sp, #16]
   19670:	a904      	add	r1, sp, #16
   19672:	f642 0303 	movw	r3, #10243	; 0x2803
   19676:	f8ad 3012 	strh.w	r3, [sp, #18]
   1967a:	f00d fb72 	bl	26d62 <bt_uuid_cmp>
   1967e:	b970      	cbnz	r0, 1969e <bt_gatt_notify_cb+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   19680:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   19682:	68c3      	ldr	r3, [r0, #12]
   19684:	799b      	ldrb	r3, [r3, #6]
   19686:	06db      	lsls	r3, r3, #27
   19688:	d405      	bmi.n	19696 <bt_gatt_notify_cb+0xb2>
			return -EINVAL;
   1968a:	f06f 0015 	mvn.w	r0, #21
   1968e:	e7e7      	b.n	19660 <bt_gatt_notify_cb+0x7c>
		if (!data.handle) {
   19690:	2800      	cmp	r0, #0
   19692:	d1e8      	bne.n	19666 <bt_gatt_notify_cb+0x82>
   19694:	e7e2      	b.n	1965c <bt_gatt_notify_cb+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   19696:	f00e fddc 	bl	28252 <bt_gatt_attr_value_handle>
   1969a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1969e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   196a2:	b12d      	cbz	r5, 196b0 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   196a4:	4601      	mov	r1, r0
   196a6:	4622      	mov	r2, r4
   196a8:	4628      	mov	r0, r5
   196aa:	f7ff ff49 	bl	19540 <gatt_notify>
   196ae:	e7d7      	b.n	19660 <bt_gatt_notify_cb+0x7c>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   196b0:	f642 1202 	movw	r2, #10498	; 0x2902
   196b4:	f8ad 2012 	strh.w	r2, [sp, #18]
   196b8:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   196ba:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   196be:	9202      	str	r2, [sp, #8]
   196c0:	4a0f      	ldr	r2, [pc, #60]	; (19700 <bt_gatt_notify_cb+0x11c>)
	data.err = -ENOTCONN;
   196c2:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   196c4:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   196c6:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   196ca:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   196ce:	aa04      	add	r2, sp, #16
   196d0:	462b      	mov	r3, r5
   196d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   196d6:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   196d8:	f88d 5010 	strb.w	r5, [sp, #16]
   196dc:	f7ff fb00 	bl	18ce0 <bt_gatt_foreach_attr_type>
	return data.err;
   196e0:	9807      	ldr	r0, [sp, #28]
   196e2:	e7bd      	b.n	19660 <bt_gatt_notify_cb+0x7c>
		return -EAGAIN;
   196e4:	f06f 000a 	mvn.w	r0, #10
   196e8:	e7ba      	b.n	19660 <bt_gatt_notify_cb+0x7c>
		return -ENOTCONN;
   196ea:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   196ee:	e7b7      	b.n	19660 <bt_gatt_notify_cb+0x7c>
   196f0:	0002c542 	.word	0x0002c542
   196f4:	0002a7df 	.word	0x0002a7df
   196f8:	2000044c 	.word	0x2000044c
   196fc:	00027f45 	.word	0x00027f45
   19700:	00019705 	.word	0x00019705

00019704 <notify_cb>:
{
   19704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19708:	4b3f      	ldr	r3, [pc, #252]	; (19808 <notify_cb+0x104>)
{
   1970a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1970c:	6882      	ldr	r2, [r0, #8]
   1970e:	429a      	cmp	r2, r3
{
   19710:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19712:	d003      	beq.n	1971c <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   19714:	2701      	movs	r7, #1
}
   19716:	4638      	mov	r0, r7
   19718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   1971c:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1971e:	4b3b      	ldr	r3, [pc, #236]	; (1980c <notify_cb+0x108>)
   19720:	429e      	cmp	r6, r3
   19722:	d011      	beq.n	19748 <notify_cb+0x44>
		if (cfg->value != data->type) {
   19724:	8932      	ldrh	r2, [r6, #8]
   19726:	89ab      	ldrh	r3, [r5, #12]
   19728:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1972a:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1972e:	d1f1      	bne.n	19714 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19730:	7830      	ldrb	r0, [r6, #0]
   19732:	f7fd fa45 	bl	16bc0 <bt_conn_lookup_addr_le>
		if (!conn) {
   19736:	4604      	mov	r4, r0
   19738:	2800      	cmp	r0, #0
   1973a:	d0eb      	beq.n	19714 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   1973c:	7b43      	ldrb	r3, [r0, #13]
   1973e:	2b07      	cmp	r3, #7
   19740:	d026      	beq.n	19790 <notify_cb+0x8c>
			bt_conn_unref(conn);
   19742:	f7fc ffad 	bl	166a0 <bt_conn_unref>
			continue;
   19746:	e7e5      	b.n	19714 <notify_cb+0x10>
   19748:	4c31      	ldr	r4, [pc, #196]	; (19810 <notify_cb+0x10c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1974a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 19814 <notify_cb+0x110>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1974e:	f04f 0800 	mov.w	r8, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   19752:	4649      	mov	r1, r9
   19754:	4620      	mov	r0, r4
   19756:	f00e fc4e 	bl	27ff6 <bt_addr_le_eq>
   1975a:	b978      	cbnz	r0, 1977c <notify_cb+0x78>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1975c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   19760:	2207      	movs	r2, #7
   19762:	4621      	mov	r1, r4
   19764:	f7fd fa62 	bl	16c2c <bt_conn_lookup_state_le>
			if (!conn) {
   19768:	b978      	cbnz	r0, 1978a <notify_cb+0x86>
				sc = (struct sc_data *)data->ind_params->data;
   1976a:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1976c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   19770:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   19772:	4621      	mov	r1, r4
   19774:	8853      	ldrh	r3, [r2, #2]
   19776:	8812      	ldrh	r2, [r2, #0]
   19778:	f7fe ff18 	bl	185ac <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1977c:	340c      	adds	r4, #12
   1977e:	f1b8 0f00 	cmp.w	r8, #0
   19782:	d1cf      	bne.n	19724 <notify_cb+0x20>
   19784:	f04f 0801 	mov.w	r8, #1
   19788:	e7e3      	b.n	19752 <notify_cb+0x4e>
			bt_conn_unref(conn);
   1978a:	f7fc ff89 	bl	166a0 <bt_conn_unref>
   1978e:	e7f5      	b.n	1977c <notify_cb+0x78>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   19790:	6973      	ldr	r3, [r6, #20]
   19792:	b123      	cbz	r3, 1979e <notify_cb+0x9a>
   19794:	4639      	mov	r1, r7
   19796:	4798      	blx	r3
   19798:	b908      	cbnz	r0, 1979e <notify_cb+0x9a>
			bt_conn_unref(conn);
   1979a:	4620      	mov	r0, r4
   1979c:	e7d1      	b.n	19742 <notify_cb+0x3e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1979e:	4639      	mov	r1, r7
   197a0:	2294      	movs	r2, #148	; 0x94
   197a2:	4620      	mov	r0, r4
   197a4:	f00e fdae 	bl	28304 <bt_gatt_check_perm>
   197a8:	4607      	mov	r7, r0
   197aa:	b120      	cbz	r0, 197b6 <notify_cb+0xb2>
			BT_WARN("Link is not encrypted");
   197ac:	481a      	ldr	r0, [pc, #104]	; (19818 <notify_cb+0x114>)
   197ae:	2157      	movs	r1, #87	; 0x57
   197b0:	f00c fbd4 	bl	25f5c <z_log_minimal_printk>
   197b4:	e7f1      	b.n	1979a <notify_cb+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   197b6:	89ab      	ldrh	r3, [r5, #12]
   197b8:	2b02      	cmp	r3, #2
   197ba:	d114      	bne.n	197e6 <notify_cb+0xe2>
   197bc:	8933      	ldrh	r3, [r6, #8]
   197be:	079a      	lsls	r2, r3, #30
   197c0:	d405      	bmi.n	197ce <notify_cb+0xca>
		bt_conn_unref(conn);
   197c2:	4620      	mov	r0, r4
   197c4:	f7fc ff6c 	bl	166a0 <bt_conn_unref>
		data->err = 0;
   197c8:	2300      	movs	r3, #0
   197ca:	60ab      	str	r3, [r5, #8]
   197cc:	e7a2      	b.n	19714 <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   197ce:	692a      	ldr	r2, [r5, #16]
   197d0:	88a9      	ldrh	r1, [r5, #4]
   197d2:	4620      	mov	r0, r4
   197d4:	f7ff fcf6 	bl	191c4 <gatt_indicate>
			if (err == 0) {
   197d8:	4606      	mov	r6, r0
   197da:	b978      	cbnz	r0, 197fc <notify_cb+0xf8>
				data->ind_params->_ref++;
   197dc:	692a      	ldr	r2, [r5, #16]
   197de:	7d93      	ldrb	r3, [r2, #22]
   197e0:	3301      	adds	r3, #1
   197e2:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   197e4:	e7ed      	b.n	197c2 <notify_cb+0xbe>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   197e6:	2b01      	cmp	r3, #1
   197e8:	d1eb      	bne.n	197c2 <notify_cb+0xbe>
   197ea:	8933      	ldrh	r3, [r6, #8]
   197ec:	07db      	lsls	r3, r3, #31
   197ee:	d5e8      	bpl.n	197c2 <notify_cb+0xbe>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   197f0:	692a      	ldr	r2, [r5, #16]
   197f2:	88a9      	ldrh	r1, [r5, #4]
   197f4:	4620      	mov	r0, r4
   197f6:	f7ff fea3 	bl	19540 <gatt_notify>
   197fa:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   197fc:	4620      	mov	r0, r4
   197fe:	f7fc ff4f 	bl	166a0 <bt_conn_unref>
		if (err < 0) {
   19802:	2e00      	cmp	r6, #0
   19804:	db87      	blt.n	19716 <notify_cb+0x12>
   19806:	e7df      	b.n	197c8 <notify_cb+0xc4>
   19808:	000189f9 	.word	0x000189f9
   1980c:	20000630 	.word	0x20000630
   19810:	20003587 	.word	0x20003587
   19814:	0002b150 	.word	0x0002b150
   19818:	0002c5c6 	.word	0x0002c5c6

0001981c <bt_gatt_connected>:
{
   1981c:	b570      	push	{r4, r5, r6, lr}
   1981e:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19820:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   19824:	4604      	mov	r4, r0
	data.conn = conn;
   19826:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   19828:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1982a:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1982c:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19830:	4629      	mov	r1, r5
   19832:	f00d fbcd 	bl	26fd0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   19836:	b190      	cbz	r0, 1985e <bt_gatt_connected+0x42>
		if (conn->id) {
   19838:	7a22      	ldrb	r2, [r4, #8]
   1983a:	b34a      	cbz	r2, 19890 <bt_gatt_connected+0x74>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1983c:	ae02      	add	r6, sp, #8
   1983e:	2104      	movs	r1, #4
   19840:	4630      	mov	r0, r6
   19842:	f00c f8e7 	bl	25a14 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   19846:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   19848:	4a12      	ldr	r2, [pc, #72]	; (19894 <bt_gatt_connected+0x78>)
   1984a:	2124      	movs	r1, #36	; 0x24
   1984c:	a805      	add	r0, sp, #20
   1984e:	462b      	mov	r3, r5
   19850:	f7fa fa66 	bl	13d20 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   19854:	aa05      	add	r2, sp, #20
   19856:	4910      	ldr	r1, [pc, #64]	; (19898 <bt_gatt_connected+0x7c>)
   19858:	4610      	mov	r0, r2
   1985a:	f7f8 fee3 	bl	12624 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1985e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19862:	4a0e      	ldr	r2, [pc, #56]	; (1989c <bt_gatt_connected+0x80>)
   19864:	ab03      	add	r3, sp, #12
   19866:	2001      	movs	r0, #1
   19868:	f00e fd41 	bl	282ee <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1986c:	4620      	mov	r0, r4
   1986e:	f00d fe2c 	bl	274ca <bt_conn_get_security>
   19872:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   19876:	4288      	cmp	r0, r1
   19878:	d208      	bcs.n	1988c <bt_gatt_connected+0x70>
		int err = bt_conn_set_security(conn, data.sec);
   1987a:	4620      	mov	r0, r4
   1987c:	f00d fdf5 	bl	2746a <bt_conn_set_security>
		if (err) {
   19880:	4602      	mov	r2, r0
   19882:	b118      	cbz	r0, 1988c <bt_gatt_connected+0x70>
			BT_WARN("Failed to set security for bonded peer (%d)",
   19884:	4806      	ldr	r0, [pc, #24]	; (198a0 <bt_gatt_connected+0x84>)
   19886:	2157      	movs	r1, #87	; 0x57
   19888:	f00c fb68 	bl	25f5c <z_log_minimal_printk>
}
   1988c:	b00e      	add	sp, #56	; 0x38
   1988e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   19890:	9200      	str	r2, [sp, #0]
   19892:	e7d9      	b.n	19848 <bt_gatt_connected+0x2c>
   19894:	0002c5b1 	.word	0x0002c5b1
   19898:	00018f65 	.word	0x00018f65
   1989c:	00019451 	.word	0x00019451
   198a0:	0002c6a6 	.word	0x0002c6a6

000198a4 <bt_gatt_att_max_mtu_changed>:
{
   198a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   198a6:	4b08      	ldr	r3, [pc, #32]	; (198c8 <bt_gatt_att_max_mtu_changed+0x24>)
   198a8:	681c      	ldr	r4, [r3, #0]
   198aa:	4605      	mov	r5, r0
   198ac:	460e      	mov	r6, r1
   198ae:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   198b0:	b14c      	cbz	r4, 198c6 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   198b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   198b6:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   198b8:	b11b      	cbz	r3, 198c2 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   198ba:	463a      	mov	r2, r7
   198bc:	4631      	mov	r1, r6
   198be:	4628      	mov	r0, r5
   198c0:	4798      	blx	r3
	return node->next;
   198c2:	6864      	ldr	r4, [r4, #4]
   198c4:	e7f4      	b.n	198b0 <bt_gatt_att_max_mtu_changed+0xc>
}
   198c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   198c8:	2000275c 	.word	0x2000275c

000198cc <bt_gatt_encrypt_change>:
{
   198cc:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   198ce:	4a06      	ldr	r2, [pc, #24]	; (198e8 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   198d0:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   198d2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   198d4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   198d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   198da:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   198de:	f00e fd06 	bl	282ee <bt_gatt_foreach_attr>
}
   198e2:	b003      	add	sp, #12
   198e4:	f85d fb04 	ldr.w	pc, [sp], #4
   198e8:	00019451 	.word	0x00019451

000198ec <bt_gatt_store_ccc>:
{
   198ec:	b570      	push	{r4, r5, r6, lr}
   198ee:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   198f0:	2300      	movs	r3, #0
{
   198f2:	4604      	mov	r4, r0
   198f4:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   198f6:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   198f8:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   198fc:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   198fe:	4a15      	ldr	r2, [pc, #84]	; (19954 <bt_gatt_store_ccc+0x68>)
   19900:	ab0d      	add	r3, sp, #52	; 0x34
   19902:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19906:	2001      	movs	r0, #1
   19908:	f00e fcf1 	bl	282ee <bt_gatt_foreach_attr>
	if (id) {
   1990c:	b1ec      	cbz	r4, 1994a <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1990e:	ae03      	add	r6, sp, #12
   19910:	4622      	mov	r2, r4
   19912:	2104      	movs	r1, #4
   19914:	4630      	mov	r0, r6
   19916:	f00c f87d 	bl	25a14 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1991a:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1991c:	4a0e      	ldr	r2, [pc, #56]	; (19958 <bt_gatt_store_ccc+0x6c>)
   1991e:	462b      	mov	r3, r5
   19920:	2124      	movs	r1, #36	; 0x24
   19922:	a804      	add	r0, sp, #16
   19924:	f7fa f9fc 	bl	13d20 <bt_settings_encode_key>
	if (save.count) {
   19928:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1992a:	b182      	cbz	r2, 1994e <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   1992c:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1992e:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   19930:	a804      	add	r0, sp, #16
   19932:	f7f8 fe17 	bl	12564 <settings_save_one>
	if (err) {
   19936:	4604      	mov	r4, r0
   19938:	b120      	cbz	r0, 19944 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1993a:	4602      	mov	r2, r0
   1993c:	2145      	movs	r1, #69	; 0x45
   1993e:	4807      	ldr	r0, [pc, #28]	; (1995c <bt_gatt_store_ccc+0x70>)
   19940:	f00c fb0c 	bl	25f5c <z_log_minimal_printk>
}
   19944:	4620      	mov	r0, r4
   19946:	b040      	add	sp, #256	; 0x100
   19948:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1994a:	9400      	str	r4, [sp, #0]
   1994c:	e7e6      	b.n	1991c <bt_gatt_store_ccc+0x30>
		str = NULL;
   1994e:	4611      	mov	r1, r2
   19950:	e7ee      	b.n	19930 <bt_gatt_store_ccc+0x44>
   19952:	bf00      	nop
   19954:	00018849 	.word	0x00018849
   19958:	0002c5b1 	.word	0x0002c5b1
   1995c:	0002c6d7 	.word	0x0002c6d7

00019960 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   19960:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19962:	4603      	mov	r3, r0
   19964:	4a3d      	ldr	r2, [pc, #244]	; (19a5c <bt_gatt_disconnected+0xfc>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   19966:	4e3e      	ldr	r6, [pc, #248]	; (19a60 <bt_gatt_disconnected+0x100>)
{
   19968:	b08d      	sub	sp, #52	; 0x34
   1996a:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1996c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19970:	2001      	movs	r0, #1
   19972:	f00e fcbc 	bl	282ee <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   19976:	4620      	mov	r0, r4
   19978:	f7fc ffa4 	bl	168c4 <bt_conn_index>
   1997c:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1997e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   19982:	b120      	cbz	r0, 1998e <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   19984:	f7fc fe8c 	bl	166a0 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   19988:	2300      	movs	r3, #0
   1998a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1998e:	4835      	ldr	r0, [pc, #212]	; (19a64 <bt_gatt_disconnected+0x104>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19990:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   19994:	f007 fa60 	bl	20e58 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19998:	7a20      	ldrb	r0, [r4, #8]
   1999a:	4629      	mov	r1, r5
   1999c:	f00d fb18 	bl	26fd0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   199a0:	b378      	cbz	r0, 19a02 <bt_gatt_disconnected+0xa2>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   199a2:	4629      	mov	r1, r5
   199a4:	7a20      	ldrb	r0, [r4, #8]
   199a6:	f7ff ffa1 	bl	198ec <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   199aa:	4620      	mov	r0, r4
   199ac:	f7fe fcc0 	bl	18330 <find_cf_cfg>
	if (!cfg) {
   199b0:	4606      	mov	r6, r0
   199b2:	2800      	cmp	r0, #0
   199b4:	d045      	beq.n	19a42 <bt_gatt_disconnected+0xe2>
		if (conn->id) {
   199b6:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   199b8:	3608      	adds	r6, #8
		if (conn->id) {
   199ba:	b172      	cbz	r2, 199da <bt_gatt_disconnected+0x7a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   199bc:	af02      	add	r7, sp, #8
   199be:	2104      	movs	r1, #4
   199c0:	4638      	mov	r0, r7
   199c2:	f00c f827 	bl	25a14 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   199c6:	462b      	mov	r3, r5
   199c8:	4a27      	ldr	r2, [pc, #156]	; (19a68 <bt_gatt_disconnected+0x108>)
   199ca:	9700      	str	r7, [sp, #0]
   199cc:	2124      	movs	r1, #36	; 0x24
   199ce:	a803      	add	r0, sp, #12
   199d0:	f7fa f9a6 	bl	13d20 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   199d4:	7a23      	ldrb	r3, [r4, #8]
   199d6:	2b00      	cmp	r3, #0
   199d8:	d135      	bne.n	19a46 <bt_gatt_disconnected+0xe6>
		len = 0;
   199da:	2701      	movs	r7, #1
		bt_settings_encode_key(key, sizeof(key), "cf",
   199dc:	2300      	movs	r3, #0
   199de:	9300      	str	r3, [sp, #0]
   199e0:	4a21      	ldr	r2, [pc, #132]	; (19a68 <bt_gatt_disconnected+0x108>)
   199e2:	462b      	mov	r3, r5
   199e4:	2124      	movs	r1, #36	; 0x24
   199e6:	a803      	add	r0, sp, #12
   199e8:	f7fa f99a 	bl	13d20 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   199ec:	463a      	mov	r2, r7
   199ee:	4631      	mov	r1, r6
   199f0:	a803      	add	r0, sp, #12
   199f2:	f7f8 fdb7 	bl	12564 <settings_save_one>
	if (err) {
   199f6:	4602      	mov	r2, r0
   199f8:	b118      	cbz	r0, 19a02 <bt_gatt_disconnected+0xa2>
		BT_ERR("Failed to store Client Features (err %d)", err);
   199fa:	481c      	ldr	r0, [pc, #112]	; (19a6c <bt_gatt_disconnected+0x10c>)
   199fc:	2145      	movs	r1, #69	; 0x45
   199fe:	f00c faad 	bl	25f5c <z_log_minimal_printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19a02:	7a20      	ldrb	r0, [r4, #8]
   19a04:	4629      	mov	r1, r5
   19a06:	f00d fae3 	bl	26fd0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   19a0a:	b150      	cbz	r0, 19a22 <bt_gatt_disconnected+0xc2>
		struct addr_with_id addr_with_id = {
   19a0c:	7a23      	ldrb	r3, [r4, #8]
   19a0e:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   19a12:	4a17      	ldr	r2, [pc, #92]	; (19a70 <bt_gatt_disconnected+0x110>)
		struct addr_with_id addr_with_id = {
   19a14:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   19a16:	ab03      	add	r3, sp, #12
   19a18:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19a1c:	2001      	movs	r0, #1
   19a1e:	f00e fc66 	bl	282ee <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   19a22:	4620      	mov	r0, r4
   19a24:	f7fe fc84 	bl	18330 <find_cf_cfg>
	if (!cfg) {
   19a28:	4606      	mov	r6, r0
   19a2a:	b1a8      	cbz	r0, 19a58 <bt_gatt_disconnected+0xf8>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19a2c:	7a20      	ldrb	r0, [r4, #8]
   19a2e:	4629      	mov	r1, r5
   19a30:	f00d face 	bl	26fd0 <bt_addr_le_is_bonded>
   19a34:	b948      	cbnz	r0, 19a4a <bt_gatt_disconnected+0xea>
		clear_cf_cfg(cfg);
   19a36:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   19a38:	b00d      	add	sp, #52	; 0x34
   19a3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   19a3e:	f7fe be71 	b.w	18724 <clear_cf_cfg>
		len = 0;
   19a42:	4607      	mov	r7, r0
   19a44:	e7ca      	b.n	199dc <bt_gatt_disconnected+0x7c>
   19a46:	2701      	movs	r7, #1
   19a48:	e7d0      	b.n	199ec <bt_gatt_disconnected+0x8c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19a4a:	4629      	mov	r1, r5
   19a4c:	1c70      	adds	r0, r6, #1
}
   19a4e:	b00d      	add	sp, #52	; 0x34
   19a50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19a54:	f00e baf9 	b.w	2804a <bt_addr_le_copy>
}
   19a58:	b00d      	add	sp, #52	; 0x34
   19a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a5c:	00018959 	.word	0x00018959
   19a60:	20001a38 	.word	0x20001a38
   19a64:	20001a40 	.word	0x20001a40
   19a68:	0002c72b 	.word	0x0002c72b
   19a6c:	0002c6fa 	.word	0x0002c6fa
   19a70:	00018821 	.word	0x00018821

00019a74 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   19a74:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   19a76:	4b05      	ldr	r3, [pc, #20]	; (19a8c <smp_find+0x18>)
{
   19a78:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   19a7a:	4618      	mov	r0, r3
   19a7c:	f00e fcc3 	bl	28406 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   19a80:	3b04      	subs	r3, #4
   19a82:	2800      	cmp	r0, #0
}
   19a84:	bf14      	ite	ne
   19a86:	4618      	movne	r0, r3
   19a88:	2000      	moveq	r0, #0
   19a8a:	bd08      	pop	{r3, pc}
   19a8c:	20001b44 	.word	0x20001b44

00019a90 <latch_auth_cb>:
{
   19a90:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   19a92:	4a0c      	ldr	r2, [pc, #48]	; (19ac4 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19a94:	6811      	ldr	r1, [r2, #0]
   19a96:	4a0c      	ldr	r2, [pc, #48]	; (19ac8 <latch_auth_cb+0x38>)
   19a98:	f3bf 8f5b 	dmb	ish
   19a9c:	f500 73d8 	add.w	r3, r0, #432	; 0x1b0
   19aa0:	e853 4f00 	ldrex	r4, [r3]
   19aa4:	4294      	cmp	r4, r2
   19aa6:	d104      	bne.n	19ab2 <latch_auth_cb+0x22>
   19aa8:	e843 1c00 	strex	ip, r1, [r3]
   19aac:	f1bc 0f00 	cmp.w	ip, #0
   19ab0:	d1f6      	bne.n	19aa0 <latch_auth_cb+0x10>
   19ab2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19ab6:	f3bf 8f5b 	dmb	ish
   19aba:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
   19abe:	f3bf 8f5b 	dmb	ish
}
   19ac2:	bd10      	pop	{r4, pc}
   19ac4:	20002628 	.word	0x20002628
   19ac8:	20001b40 	.word	0x20001b40

00019acc <get_io_capa>:
{
   19acc:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19ace:	f7ff ffdf 	bl	19a90 <latch_auth_cb>
	if (!smp_auth_cb) {
   19ad2:	4603      	mov	r3, r0
   19ad4:	b1c8      	cbz	r0, 19b0a <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   19ad6:	e9d0 1200 	ldrd	r1, r2, [r0]
   19ada:	b921      	cbnz	r1, 19ae6 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   19adc:	2a00      	cmp	r2, #0
   19ade:	bf0c      	ite	eq
   19ae0:	2003      	moveq	r0, #3
   19ae2:	2002      	movne	r0, #2
   19ae4:	e010      	b.n	19b08 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   19ae6:	b132      	cbz	r2, 19af6 <get_io_capa+0x2a>
   19ae8:	6883      	ldr	r3, [r0, #8]
   19aea:	b913      	cbnz	r3, 19af2 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   19aec:	4b09      	ldr	r3, [pc, #36]	; (19b14 <get_io_capa+0x48>)
   19aee:	781b      	ldrb	r3, [r3, #0]
   19af0:	b933      	cbnz	r3, 19b00 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   19af2:	2004      	movs	r0, #4
   19af4:	e008      	b.n	19b08 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   19af6:	4907      	ldr	r1, [pc, #28]	; (19b14 <get_io_capa+0x48>)
   19af8:	7808      	ldrb	r0, [r1, #0]
   19afa:	b128      	cbz	r0, 19b08 <get_io_capa+0x3c>
   19afc:	689b      	ldr	r3, [r3, #8]
   19afe:	b933      	cbnz	r3, 19b0e <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   19b00:	3a00      	subs	r2, #0
   19b02:	bf18      	it	ne
   19b04:	2201      	movne	r2, #1
   19b06:	0050      	lsls	r0, r2, #1
}
   19b08:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   19b0a:	2003      	movs	r0, #3
   19b0c:	e7fc      	b.n	19b08 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   19b0e:	2001      	movs	r0, #1
   19b10:	e7fa      	b.n	19b08 <get_io_capa+0x3c>
   19b12:	bf00      	nop
   19b14:	20003685 	.word	0x20003685

00019b18 <get_auth>:
{
   19b18:	b510      	push	{r4, lr}
	if (sc_supported) {
   19b1a:	4b0c      	ldr	r3, [pc, #48]	; (19b4c <get_auth+0x34>)
   19b1c:	781b      	ldrb	r3, [r3, #0]
   19b1e:	b17b      	cbz	r3, 19b40 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   19b20:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   19b24:	f7ff ffd2 	bl	19acc <get_io_capa>
	if (bondable) {
   19b28:	4b09      	ldr	r3, [pc, #36]	; (19b50 <get_auth+0x38>)
   19b2a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   19b2c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   19b2e:	bf0c      	ite	eq
   19b30:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   19b34:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   19b38:	b12b      	cbz	r3, 19b46 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   19b3a:	f044 0001 	orr.w	r0, r4, #1
}
   19b3e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   19b40:	f001 0407 	and.w	r4, r1, #7
   19b44:	e7ee      	b.n	19b24 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   19b46:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   19b4a:	e7f8      	b.n	19b3e <get_auth+0x26>
   19b4c:	20003685 	.word	0x20003685
   19b50:	2000085a 	.word	0x2000085a

00019b54 <smp_chan_get>:
{
   19b54:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   19b56:	2106      	movs	r1, #6
   19b58:	f00d fd75 	bl	27646 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19b5c:	4604      	mov	r4, r0
   19b5e:	b928      	cbnz	r0, 19b6c <smp_chan_get+0x18>
		BT_ERR("Unable to find SMP channel");
   19b60:	4804      	ldr	r0, [pc, #16]	; (19b74 <smp_chan_get+0x20>)
   19b62:	2145      	movs	r1, #69	; 0x45
   19b64:	f00c f9fa 	bl	25f5c <z_log_minimal_printk>
}
   19b68:	4620      	mov	r0, r4
   19b6a:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   19b6c:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   19b70:	e7fa      	b.n	19b68 <smp_chan_get+0x14>
   19b72:	bf00      	nop
   19b74:	0002c73c 	.word	0x0002c73c

00019b78 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   19b78:	b510      	push	{r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   19b7a:	4c09      	ldr	r4, [pc, #36]	; (19ba0 <bt_smp_accept+0x28>)
{
   19b7c:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   19b7e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   19b82:	b928      	cbnz	r0, 19b90 <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   19b84:	4a07      	ldr	r2, [pc, #28]	; (19ba4 <bt_smp_accept+0x2c>)
   19b86:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0

		*chan = &smp->chan.chan;
   19b8a:	34ec      	adds	r4, #236	; 0xec
   19b8c:	600c      	str	r4, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   19b8e:	bd10      	pop	{r4, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   19b90:	4805      	ldr	r0, [pc, #20]	; (19ba8 <bt_smp_accept+0x30>)
   19b92:	2145      	movs	r1, #69	; 0x45
   19b94:	f00c f9e2 	bl	25f5c <z_log_minimal_printk>
   19b98:	f06f 000b 	mvn.w	r0, #11
   19b9c:	e7f7      	b.n	19b8e <bt_smp_accept+0x16>
   19b9e:	bf00      	nop
   19ba0:	20001b40 	.word	0x20001b40
   19ba4:	0002a02c 	.word	0x0002a02c
   19ba8:	0002c75c 	.word	0x0002c75c

00019bac <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19bac:	4288      	cmp	r0, r1
{
   19bae:	b510      	push	{r4, lr}
   19bb0:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19bb4:	d90d      	bls.n	19bd2 <sys_memcpy_swap+0x26>
   19bb6:	188c      	adds	r4, r1, r2
   19bb8:	42a0      	cmp	r0, r4
   19bba:	d20d      	bcs.n	19bd8 <sys_memcpy_swap+0x2c>
   19bbc:	490b      	ldr	r1, [pc, #44]	; (19bec <sys_memcpy_swap+0x40>)
   19bbe:	480c      	ldr	r0, [pc, #48]	; (19bf0 <sys_memcpy_swap+0x44>)
   19bc0:	f240 2215 	movw	r2, #533	; 0x215
   19bc4:	f00c f9bc 	bl	25f40 <assert_print>
   19bc8:	4808      	ldr	r0, [pc, #32]	; (19bec <sys_memcpy_swap+0x40>)
   19bca:	f240 2115 	movw	r1, #533	; 0x215
   19bce:	f00c f9b0 	bl	25f32 <assert_post_action>
   19bd2:	d0f3      	beq.n	19bbc <sys_memcpy_swap+0x10>
   19bd4:	4299      	cmp	r1, r3
   19bd6:	e7f0      	b.n	19bba <sys_memcpy_swap+0xe>
	psrc += length - 1;
   19bd8:	3a01      	subs	r2, #1
   19bda:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   19bdc:	f811 2901 	ldrb.w	r2, [r1], #-1
   19be0:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   19be4:	4283      	cmp	r3, r0
   19be6:	d1f9      	bne.n	19bdc <sys_memcpy_swap+0x30>
}
   19be8:	bd10      	pop	{r4, pc}
   19bea:	bf00      	nop
   19bec:	0002c786 	.word	0x0002c786
   19bf0:	0002a7df 	.word	0x0002a7df

00019bf4 <smp_init>:
{
   19bf4:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   19bf6:	22ec      	movs	r2, #236	; 0xec
{
   19bf8:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   19bfa:	2100      	movs	r1, #0
   19bfc:	f00d f849 	bl	26c92 <memset>
	if (bt_rand(smp->prnd, 16)) {
   19c00:	2110      	movs	r1, #16
   19c02:	f105 0027 	add.w	r0, r5, #39	; 0x27
   19c06:	f004 fc71 	bl	1e4ec <bt_rand>
   19c0a:	4604      	mov	r4, r0
   19c0c:	b948      	cbnz	r0, 19c22 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   19c0e:	2105      	movs	r1, #5
   19c10:	4628      	mov	r0, r5
   19c12:	f00e fced 	bl	285f0 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   19c16:	f7fc f9dd 	bl	15fd4 <bt_pub_key_get>
   19c1a:	4b03      	ldr	r3, [pc, #12]	; (19c28 <smp_init+0x34>)
   19c1c:	6018      	str	r0, [r3, #0]
}
   19c1e:	4620      	mov	r0, r4
   19c20:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   19c22:	2408      	movs	r4, #8
   19c24:	e7fb      	b.n	19c1e <smp_init+0x2a>
   19c26:	bf00      	nop
   19c28:	20002764 	.word	0x20002764

00019c2c <smp_dhkey_generate>:
{
   19c2c:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   19c2e:	1d05      	adds	r5, r0, #4
{
   19c30:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   19c32:	2108      	movs	r1, #8
   19c34:	4628      	mov	r0, r5
   19c36:	f00e fcdb 	bl	285f0 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   19c3a:	4908      	ldr	r1, [pc, #32]	; (19c5c <smp_dhkey_generate+0x30>)
   19c3c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19c40:	f7fc f9d8 	bl	15ff4 <bt_dh_key_gen>
	if (err) {
   19c44:	b140      	cbz	r0, 19c58 <smp_dhkey_generate+0x2c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   19c46:	2108      	movs	r1, #8
   19c48:	4628      	mov	r0, r5
   19c4a:	f00e fc06 	bl	2845a <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   19c4e:	4804      	ldr	r0, [pc, #16]	; (19c60 <smp_dhkey_generate+0x34>)
   19c50:	2145      	movs	r1, #69	; 0x45
   19c52:	f00c f983 	bl	25f5c <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   19c56:	2008      	movs	r0, #8
}
   19c58:	bd38      	pop	{r3, r4, r5, pc}
   19c5a:	bf00      	nop
   19c5c:	000289d1 	.word	0x000289d1
   19c60:	0002c7b8 	.word	0x0002c7b8

00019c64 <smp_ident_info>:
{
   19c64:	b570      	push	{r4, r5, r6, lr}
   19c66:	460b      	mov	r3, r1
   19c68:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19c6a:	210d      	movs	r1, #13
   19c6c:	3004      	adds	r0, #4
   19c6e:	f00e fbca 	bl	28406 <atomic_test_bit>
   19c72:	b1c8      	cbz	r0, 19ca8 <smp_ident_info+0x44>
		struct bt_smp_ident_info *req = (void *)buf->data;
   19c74:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   19c76:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   19c7a:	f103 0590 	add.w	r5, r3, #144	; 0x90
   19c7e:	7a19      	ldrb	r1, [r3, #8]
   19c80:	462a      	mov	r2, r5
   19c82:	2002      	movs	r0, #2
   19c84:	f001 fbf6 	bl	1b474 <bt_keys_get_type>
		if (!keys) {
   19c88:	b948      	cbnz	r0, 19c9e <smp_ident_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   19c8a:	4628      	mov	r0, r5
   19c8c:	f7f9 ff9c 	bl	13bc8 <bt_addr_le_str>
   19c90:	2145      	movs	r1, #69	; 0x45
   19c92:	4602      	mov	r2, r0
   19c94:	4807      	ldr	r0, [pc, #28]	; (19cb4 <smp_ident_info+0x50>)
   19c96:	f00c f961 	bl	25f5c <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   19c9a:	2008      	movs	r0, #8
}
   19c9c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   19c9e:	2210      	movs	r2, #16
   19ca0:	4631      	mov	r1, r6
   19ca2:	302a      	adds	r0, #42	; 0x2a
   19ca4:	f00c ffea 	bl	26c7c <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   19ca8:	4620      	mov	r0, r4
   19caa:	2109      	movs	r1, #9
   19cac:	f00e fca0 	bl	285f0 <atomic_set_bit>
	return 0;
   19cb0:	2000      	movs	r0, #0
   19cb2:	e7f3      	b.n	19c9c <smp_ident_info+0x38>
   19cb4:	0002c7d6 	.word	0x0002c7d6

00019cb8 <smp_encrypt_info>:
{
   19cb8:	b570      	push	{r4, r5, r6, lr}
   19cba:	460b      	mov	r3, r1
   19cbc:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19cbe:	210d      	movs	r1, #13
   19cc0:	3004      	adds	r0, #4
   19cc2:	f00e fba0 	bl	28406 <atomic_test_bit>
   19cc6:	b1c8      	cbz	r0, 19cfc <smp_encrypt_info+0x44>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   19cc8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   19cca:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19cce:	f103 0590 	add.w	r5, r3, #144	; 0x90
   19cd2:	7a19      	ldrb	r1, [r3, #8]
   19cd4:	462a      	mov	r2, r5
   19cd6:	2004      	movs	r0, #4
   19cd8:	f001 fbcc 	bl	1b474 <bt_keys_get_type>
		if (!keys) {
   19cdc:	b948      	cbnz	r0, 19cf2 <smp_encrypt_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   19cde:	4628      	mov	r0, r5
   19ce0:	f7f9 ff72 	bl	13bc8 <bt_addr_le_str>
   19ce4:	2145      	movs	r1, #69	; 0x45
   19ce6:	4602      	mov	r2, r0
   19ce8:	4807      	ldr	r0, [pc, #28]	; (19d08 <smp_encrypt_info+0x50>)
   19cea:	f00c f937 	bl	25f5c <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   19cee:	2008      	movs	r0, #8
}
   19cf0:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   19cf2:	2210      	movs	r2, #16
   19cf4:	4631      	mov	r1, r6
   19cf6:	301a      	adds	r0, #26
   19cf8:	f00c ffc0 	bl	26c7c <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   19cfc:	4620      	mov	r0, r4
   19cfe:	2107      	movs	r1, #7
   19d00:	f00e fc76 	bl	285f0 <atomic_set_bit>
	return 0;
   19d04:	2000      	movs	r0, #0
   19d06:	e7f3      	b.n	19cf0 <smp_encrypt_info+0x38>
   19d08:	0002c7d6 	.word	0x0002c7d6

00019d0c <smp_send_pairing_confirm>:
{
   19d0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   19d0e:	7a04      	ldrb	r4, [r0, #8]
   19d10:	2c02      	cmp	r4, #2
{
   19d12:	4605      	mov	r5, r0
	switch (smp->method) {
   19d14:	d823      	bhi.n	19d5e <smp_send_pairing_confirm+0x52>
   19d16:	b144      	cbz	r4, 19d2a <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   19d18:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   19d1c:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   19d20:	40dc      	lsrs	r4, r3
   19d22:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   19d26:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   19d2a:	2103      	movs	r1, #3
   19d2c:	4628      	mov	r0, r5
   19d2e:	f00e fc73 	bl	28618 <smp_create_pdu.constprop.0>
	if (!buf) {
   19d32:	4606      	mov	r6, r0
   19d34:	b1d0      	cbz	r0, 19d6c <smp_send_pairing_confirm+0x60>
   19d36:	2110      	movs	r1, #16
   19d38:	3008      	adds	r0, #8
   19d3a:	f001 ffeb 	bl	1bd14 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   19d3e:	9000      	str	r0, [sp, #0]
   19d40:	4812      	ldr	r0, [pc, #72]	; (19d8c <smp_send_pairing_confirm+0x80>)
   19d42:	4623      	mov	r3, r4
   19d44:	6800      	ldr	r0, [r0, #0]
   19d46:	f105 0227 	add.w	r2, r5, #39	; 0x27
   19d4a:	f105 0157 	add.w	r1, r5, #87	; 0x57
   19d4e:	f00e fc2a 	bl	285a6 <smp_f4>
   19d52:	4604      	mov	r4, r0
   19d54:	b178      	cbz	r0, 19d76 <smp_send_pairing_confirm+0x6a>
		net_buf_unref(buf);
   19d56:	4630      	mov	r0, r6
   19d58:	f001 fed6 	bl	1bb08 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   19d5c:	e006      	b.n	19d6c <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   19d5e:	2c03      	cmp	r4, #3
   19d60:	d007      	beq.n	19d72 <smp_send_pairing_confirm+0x66>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   19d62:	480b      	ldr	r0, [pc, #44]	; (19d90 <smp_send_pairing_confirm+0x84>)
   19d64:	4622      	mov	r2, r4
   19d66:	2145      	movs	r1, #69	; 0x45
   19d68:	f00c f8f8 	bl	25f5c <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   19d6c:	2008      	movs	r0, #8
}
   19d6e:	b002      	add	sp, #8
   19d70:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   19d72:	2400      	movs	r4, #0
   19d74:	e7d9      	b.n	19d2a <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   19d76:	4602      	mov	r2, r0
   19d78:	4631      	mov	r1, r6
   19d7a:	4628      	mov	r0, r5
   19d7c:	f00e fb9c 	bl	284b8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   19d80:	1d28      	adds	r0, r5, #4
   19d82:	4621      	mov	r1, r4
   19d84:	f00e fb69 	bl	2845a <atomic_clear_bit>
	return 0;
   19d88:	4620      	mov	r0, r4
   19d8a:	e7f0      	b.n	19d6e <smp_send_pairing_confirm+0x62>
   19d8c:	20002764 	.word	0x20002764
   19d90:	0002c7f5 	.word	0x0002c7f5

00019d94 <smp_public_key_periph>:
{
   19d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d98:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19d9a:	f7ff fe79 	bl	19a90 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   19d9e:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19da0:	4607      	mov	r7, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   19da2:	210e      	movs	r1, #14
   19da4:	4630      	mov	r0, r6
   19da6:	f00e fb2e 	bl	28406 <atomic_test_bit>
   19daa:	b968      	cbnz	r0, 19dc8 <smp_public_key_periph+0x34>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   19dac:	4b48      	ldr	r3, [pc, #288]	; (19ed0 <smp_public_key_periph+0x13c>)
   19dae:	2220      	movs	r2, #32
   19db0:	6819      	ldr	r1, [r3, #0]
   19db2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19db6:	f00c ff3a 	bl	26c2e <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   19dba:	b928      	cbnz	r0, 19dc8 <smp_public_key_periph+0x34>
		BT_WARN("Remote public key rejected");
   19dbc:	4845      	ldr	r0, [pc, #276]	; (19ed4 <smp_public_key_periph+0x140>)
   19dbe:	2157      	movs	r1, #87	; 0x57
   19dc0:	f00c f8cc 	bl	25f5c <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   19dc4:	2008      	movs	r0, #8
   19dc6:	e02f      	b.n	19e28 <smp_public_key_periph+0x94>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   19dc8:	210c      	movs	r1, #12
   19dca:	4620      	mov	r0, r4
   19dcc:	f00e fc24 	bl	28618 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   19dd0:	4605      	mov	r5, r0
   19dd2:	2800      	cmp	r0, #0
   19dd4:	d0f6      	beq.n	19dc4 <smp_public_key_periph+0x30>
   19dd6:	2140      	movs	r1, #64	; 0x40
   19dd8:	3008      	adds	r0, #8
   19dda:	f001 ff9b 	bl	1bd14 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   19dde:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 19ed0 <smp_public_key_periph+0x13c>
   19de2:	2220      	movs	r2, #32
   19de4:	f8d9 1000 	ldr.w	r1, [r9]
   19de8:	4680      	mov	r8, r0
   19dea:	f00c ff47 	bl	26c7c <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   19dee:	f8d9 1000 	ldr.w	r1, [r9]
   19df2:	2220      	movs	r2, #32
   19df4:	4411      	add	r1, r2
   19df6:	eb08 0002 	add.w	r0, r8, r2
   19dfa:	f00c ff3f 	bl	26c7c <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   19dfe:	2200      	movs	r2, #0
   19e00:	4629      	mov	r1, r5
   19e02:	4620      	mov	r0, r4
   19e04:	f00e fb58 	bl	284b8 <smp_send.constprop.0>
	switch (smp->method) {
   19e08:	7a22      	ldrb	r2, [r4, #8]
   19e0a:	2a05      	cmp	r2, #5
   19e0c:	d859      	bhi.n	19ec2 <smp_public_key_periph+0x12e>
   19e0e:	e8df f002 	tbb	[pc, r2]
   19e12:	3903      	.short	0x3903
   19e14:	5558030d 	.word	0x5558030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   19e18:	2104      	movs	r1, #4
   19e1a:	4620      	mov	r0, r4
   19e1c:	f00e fbe8 	bl	285f0 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   19e20:	f7ff ff74 	bl	19d0c <smp_send_pairing_confirm>
		if (err) {
   19e24:	2800      	cmp	r0, #0
   19e26:	d03c      	beq.n	19ea2 <smp_public_key_periph+0x10e>
}
   19e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19e2c:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   19e2e:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19e32:	f7ff fe2d 	bl	19a90 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   19e36:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19e38:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   19e3a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   19e3e:	f004 fb55 	bl	1e4ec <bt_rand>
   19e42:	2800      	cmp	r0, #0
   19e44:	d1be      	bne.n	19dc4 <smp_public_key_periph+0x30>
		smp->passkey %= 1000000;
   19e46:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   19e4a:	4a23      	ldr	r2, [pc, #140]	; (19ed8 <smp_public_key_periph+0x144>)
   19e4c:	fbb3 f1f2 	udiv	r1, r3, r2
   19e50:	fb02 3311 	mls	r3, r2, r1, r3
   19e54:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   19e58:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   19e5c:	b155      	cbz	r5, 19e74 <smp_public_key_periph+0xe0>
   19e5e:	682b      	ldr	r3, [r5, #0]
   19e60:	b143      	cbz	r3, 19e74 <smp_public_key_periph+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   19e62:	210b      	movs	r1, #11
   19e64:	4630      	mov	r0, r6
   19e66:	f00e fbc3 	bl	285f0 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   19e6a:	682b      	ldr	r3, [r5, #0]
   19e6c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   19e70:	4638      	mov	r0, r7
   19e72:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   19e74:	2103      	movs	r1, #3
   19e76:	4620      	mov	r0, r4
   19e78:	f00e fbba 	bl	285f0 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   19e7c:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   19e7e:	f00e fbb7 	bl	285f0 <atomic_set_bit>
		break;
   19e82:	e00e      	b.n	19ea2 <smp_public_key_periph+0x10e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   19e84:	4620      	mov	r0, r4
   19e86:	2103      	movs	r1, #3
   19e88:	f00e fbb2 	bl	285f0 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   19e8c:	210e      	movs	r1, #14
   19e8e:	f00e fbaf 	bl	285f0 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19e92:	4630      	mov	r0, r6
   19e94:	210a      	movs	r1, #10
   19e96:	f00e fbab 	bl	285f0 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   19e9a:	687b      	ldr	r3, [r7, #4]
   19e9c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   19ea0:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   19ea2:	4630      	mov	r0, r6
   19ea4:	2107      	movs	r1, #7
   19ea6:	f00e fba3 	bl	285f0 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   19eaa:	2008      	movs	r0, #8
   19eac:	f7ff fde2 	bl	19a74 <smp_find>
   19eb0:	b960      	cbnz	r0, 19ecc <smp_public_key_periph+0x138>
		return smp_dhkey_generate(smp);
   19eb2:	4620      	mov	r0, r4
}
   19eb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return smp_dhkey_generate(smp);
   19eb8:	f7ff beb8 	b.w	19c2c <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   19ebc:	2104      	movs	r1, #4
   19ebe:	4620      	mov	r0, r4
   19ec0:	e7dd      	b.n	19e7e <smp_public_key_periph+0xea>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   19ec2:	4806      	ldr	r0, [pc, #24]	; (19edc <smp_public_key_periph+0x148>)
   19ec4:	2145      	movs	r1, #69	; 0x45
   19ec6:	f00c f849 	bl	25f5c <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   19eca:	e77b      	b.n	19dc4 <smp_public_key_periph+0x30>
	return 0;
   19ecc:	2000      	movs	r0, #0
   19ece:	e7ab      	b.n	19e28 <smp_public_key_periph+0x94>
   19ed0:	20002764 	.word	0x20002764
   19ed4:	0002c816 	.word	0x0002c816
   19ed8:	000f4240 	.word	0x000f4240
   19edc:	0002c7f5 	.word	0x0002c7f5

00019ee0 <smp_public_key>:
{
   19ee0:	b570      	push	{r4, r5, r6, lr}
   19ee2:	460d      	mov	r5, r1
   19ee4:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19ee6:	f7ff fdd3 	bl	19a90 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   19eea:	68ae      	ldr	r6, [r5, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   19eec:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19ef0:	2220      	movs	r2, #32
   19ef2:	4631      	mov	r1, r6
   19ef4:	4628      	mov	r0, r5
   19ef6:	f00c fec1 	bl	26c7c <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   19efa:	2220      	movs	r2, #32
   19efc:	18b1      	adds	r1, r6, r2
   19efe:	f104 0077 	add.w	r0, r4, #119	; 0x77
   19f02:	f00c febb 	bl	26c7c <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   19f06:	4628      	mov	r0, r5
   19f08:	f7fb ffdc 	bl	15ec4 <bt_pub_key_is_debug>
   19f0c:	b940      	cbnz	r0, 19f20 <smp_public_key+0x40>
	if (!sc_public_key) {
   19f0e:	4b18      	ldr	r3, [pc, #96]	; (19f70 <smp_public_key+0x90>)
   19f10:	681d      	ldr	r5, [r3, #0]
   19f12:	bb3d      	cbnz	r5, 19f64 <smp_public_key+0x84>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   19f14:	1d20      	adds	r0, r4, #4
   19f16:	2106      	movs	r1, #6
   19f18:	f00e fb6a 	bl	285f0 <atomic_set_bit>
	return 0;
   19f1c:	4628      	mov	r0, r5
		return 0;
   19f1e:	e020      	b.n	19f62 <smp_public_key+0x82>
		BT_INFO("Remote is using Debug Public key");
   19f20:	4814      	ldr	r0, [pc, #80]	; (19f74 <smp_public_key+0x94>)
   19f22:	2149      	movs	r1, #73	; 0x49
   19f24:	f00c f81a 	bl	25f5c <z_log_minimal_printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   19f28:	210e      	movs	r1, #14
   19f2a:	1d20      	adds	r0, r4, #4
   19f2c:	f00e fb60 	bl	285f0 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   19f30:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   19f34:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   19f38:	b933      	cbnz	r3, 19f48 <smp_public_key+0x68>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19f3a:	7a28      	ldrb	r0, [r5, #8]
   19f3c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   19f40:	f001 f9aa 	bl	1b298 <bt_keys_get_addr>
   19f44:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   19f48:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   19f4c:	2b00      	cmp	r3, #0
   19f4e:	d0de      	beq.n	19f0e <smp_public_key+0x2e>
   19f50:	89da      	ldrh	r2, [r3, #14]
   19f52:	f002 0224 	and.w	r2, r2, #36	; 0x24
   19f56:	2a00      	cmp	r2, #0
   19f58:	d0d9      	beq.n	19f0e <smp_public_key+0x2e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   19f5a:	7b5b      	ldrb	r3, [r3, #13]
   19f5c:	079b      	lsls	r3, r3, #30
   19f5e:	d4d6      	bmi.n	19f0e <smp_public_key+0x2e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19f60:	2003      	movs	r0, #3
}
   19f62:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   19f64:	4620      	mov	r0, r4
}
   19f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   19f6a:	f7ff bf13 	b.w	19d94 <smp_public_key_periph>
   19f6e:	bf00      	nop
   19f70:	20002764 	.word	0x20002764
   19f74:	0002c836 	.word	0x0002c836

00019f78 <smp_pairing_req>:
{
   19f78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19f7c:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   19f7e:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   19f82:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19f84:	f7ff fd84 	bl	19a90 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   19f88:	f8d5 8008 	ldr.w	r8, [r5, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   19f8c:	f898 3003 	ldrb.w	r3, [r8, #3]
   19f90:	3b07      	subs	r3, #7
   19f92:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19f94:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   19f96:	d903      	bls.n	19fa0 <smp_pairing_req+0x28>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   19f98:	2006      	movs	r0, #6
}
   19f9a:	b002      	add	sp, #8
   19f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   19fa0:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   19fa4:	b15b      	cbz	r3, 19fbe <smp_pairing_req+0x46>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   19fa6:	1d25      	adds	r5, r4, #4
   19fa8:	210f      	movs	r1, #15
   19faa:	4628      	mov	r0, r5
   19fac:	f00e fa2b 	bl	28406 <atomic_test_bit>
   19fb0:	b980      	cbnz	r0, 19fd4 <smp_pairing_req+0x5c>
		int ret = smp_init(smp);
   19fb2:	4620      	mov	r0, r4
   19fb4:	f7ff fe1e 	bl	19bf4 <smp_init>
		if (ret) {
   19fb8:	b160      	cbz	r0, 19fd4 <smp_pairing_req+0x5c>
			return ret;
   19fba:	b2c0      	uxtb	r0, r0
   19fbc:	e7ed      	b.n	19f9a <smp_pairing_req+0x22>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19fbe:	7a30      	ldrb	r0, [r6, #8]
   19fc0:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19fc4:	f001 f968 	bl	1b298 <bt_keys_get_addr>
   19fc8:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
		if (!conn->le.keys) {
   19fcc:	2800      	cmp	r0, #0
   19fce:	d1ea      	bne.n	19fa6 <smp_pairing_req+0x2e>
			return BT_SMP_ERR_UNSPECIFIED;
   19fd0:	2008      	movs	r0, #8
   19fd2:	e7e2      	b.n	19f9a <smp_pairing_req+0x22>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   19fd4:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   19fd6:	2206      	movs	r2, #6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   19fd8:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   19fda:	4641      	mov	r1, r8
   19fdc:	f104 000a 	add.w	r0, r4, #10
   19fe0:	f00c fe4c 	bl	26c7c <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   19fe4:	2302      	movs	r3, #2
   19fe6:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   19fe8:	f898 1002 	ldrb.w	r1, [r8, #2]
   19fec:	4620      	mov	r0, r4
   19fee:	f7ff fd93 	bl	19b18 <get_auth>
   19ff2:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   19ff4:	4620      	mov	r0, r4
   19ff6:	f7ff fd69 	bl	19acc <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   19ffa:	4ba3      	ldr	r3, [pc, #652]	; (1a288 <smp_pairing_req+0x310>)
	rsp->io_capability = get_io_capa(smp);
   19ffc:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   19ffe:	781b      	ldrb	r3, [r3, #0]
   1a000:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1a002:	2310      	movs	r3, #16
   1a004:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1a006:	f898 3004 	ldrb.w	r3, [r8, #4]
   1a00a:	f003 0303 	and.w	r3, r3, #3
   1a00e:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1a010:	f898 3005 	ldrb.w	r3, [r8, #5]
   1a014:	f003 0301 	and.w	r3, r3, #1
   1a018:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1a01a:	7ce3      	ldrb	r3, [r4, #19]
   1a01c:	071b      	lsls	r3, r3, #28
   1a01e:	d50d      	bpl.n	1a03c <smp_pairing_req+0xc4>
   1a020:	f898 3002 	ldrb.w	r3, [r8, #2]
   1a024:	0718      	lsls	r0, r3, #28
   1a026:	d509      	bpl.n	1a03c <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1a028:	2105      	movs	r1, #5
   1a02a:	4628      	mov	r0, r5
   1a02c:	f00e fae0 	bl	285f0 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1a030:	7d63      	ldrb	r3, [r4, #21]
   1a032:	f003 0302 	and.w	r3, r3, #2
   1a036:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1a038:	2300      	movs	r3, #0
   1a03a:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1a03c:	7ce3      	ldrb	r3, [r4, #19]
   1a03e:	0699      	lsls	r1, r3, #26
   1a040:	d507      	bpl.n	1a052 <smp_pairing_req+0xda>
   1a042:	f898 3002 	ldrb.w	r3, [r8, #2]
   1a046:	069a      	lsls	r2, r3, #26
   1a048:	d503      	bpl.n	1a052 <smp_pairing_req+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1a04a:	2114      	movs	r1, #20
   1a04c:	4628      	mov	r0, r5
   1a04e:	f00e facf 	bl	285f0 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1a052:	7da3      	ldrb	r3, [r4, #22]
   1a054:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1a058:	7d63      	ldrb	r3, [r4, #21]
   1a05a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1a05e:	7ce3      	ldrb	r3, [r4, #19]
   1a060:	07db      	lsls	r3, r3, #31
   1a062:	d507      	bpl.n	1a074 <smp_pairing_req+0xfc>
   1a064:	f898 3002 	ldrb.w	r3, [r8, #2]
   1a068:	07d8      	lsls	r0, r3, #31
   1a06a:	d503      	bpl.n	1a074 <smp_pairing_req+0xfc>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1a06c:	210d      	movs	r1, #13
   1a06e:	4628      	mov	r0, r5
   1a070:	f00e fabe 	bl	285f0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1a074:	2103      	movs	r1, #3
   1a076:	4628      	mov	r0, r5
   1a078:	f00e faba 	bl	285f0 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a07c:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1a07e:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a082:	f00e f9c0 	bl	28406 <atomic_test_bit>
   1a086:	bb40      	cbnz	r0, 1a0da <smp_pairing_req+0x162>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1a088:	f1b8 0f04 	cmp.w	r8, #4
   1a08c:	d845      	bhi.n	1a11a <smp_pairing_req+0x1a2>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1a08e:	7ae3      	ldrb	r3, [r4, #11]
   1a090:	7ca2      	ldrb	r2, [r4, #18]
   1a092:	4013      	ands	r3, r2
   1a094:	07d9      	lsls	r1, r3, #31
   1a096:	d43e      	bmi.n	1a116 <smp_pairing_req+0x19e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1a098:	7b21      	ldrb	r1, [r4, #12]
   1a09a:	7ce3      	ldrb	r3, [r4, #19]
   1a09c:	4319      	orrs	r1, r3
   1a09e:	f011 0104 	ands.w	r1, r1, #4
   1a0a2:	d011      	beq.n	1a0c8 <smp_pairing_req+0x150>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1a0a4:	4620      	mov	r0, r4
   1a0a6:	f7ff fd11 	bl	19acc <get_io_capa>
   1a0aa:	4b78      	ldr	r3, [pc, #480]	; (1a28c <smp_pairing_req+0x314>)
   1a0ac:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1a0b0:	4498      	add	r8, r3
   1a0b2:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   1a0b6:	2904      	cmp	r1, #4
   1a0b8:	d106      	bne.n	1a0c8 <smp_pairing_req+0x150>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1a0ba:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1a0be:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1a0c0:	2b00      	cmp	r3, #0
   1a0c2:	bf14      	ite	ne
   1a0c4:	2101      	movne	r1, #1
   1a0c6:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   1a0c8:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1a0ca:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
   1a0ce:	4620      	mov	r0, r4
   1a0d0:	f00e f9a2 	bl	28418 <update_keys_check>
   1a0d4:	bb18      	cbnz	r0, 1a11e <smp_pairing_req+0x1a6>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1a0d6:	2003      	movs	r0, #3
   1a0d8:	e75f      	b.n	19f9a <smp_pairing_req+0x22>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1a0da:	7b23      	ldrb	r3, [r4, #12]
   1a0dc:	7ce0      	ldrb	r0, [r4, #19]
   1a0de:	ea03 0200 	and.w	r2, r3, r0
   1a0e2:	0712      	lsls	r2, r2, #28
   1a0e4:	d506      	bpl.n	1a0f4 <smp_pairing_req+0x17c>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1a0e6:	7ae2      	ldrb	r2, [r4, #11]
   1a0e8:	f894 c012 	ldrb.w	ip, [r4, #18]
   1a0ec:	ea42 020c 	orr.w	r2, r2, ip
   1a0f0:	07d2      	lsls	r2, r2, #31
   1a0f2:	d4e9      	bmi.n	1a0c8 <smp_pairing_req+0x150>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1a0f4:	f1b8 0f04 	cmp.w	r8, #4
   1a0f8:	d80f      	bhi.n	1a11a <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1a0fa:	ea43 0100 	orr.w	r1, r3, r0
   1a0fe:	f011 0104 	ands.w	r1, r1, #4
   1a102:	d0e1      	beq.n	1a0c8 <smp_pairing_req+0x150>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1a104:	4620      	mov	r0, r4
   1a106:	f7ff fce1 	bl	19acc <get_io_capa>
   1a10a:	4b61      	ldr	r3, [pc, #388]	; (1a290 <smp_pairing_req+0x318>)
   1a10c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1a110:	4443      	add	r3, r8
   1a112:	5c19      	ldrb	r1, [r3, r0]
   1a114:	e7d8      	b.n	1a0c8 <smp_pairing_req+0x150>
		return LEGACY_OOB;
   1a116:	2106      	movs	r1, #6
   1a118:	e7d6      	b.n	1a0c8 <smp_pairing_req+0x150>
		return JUST_WORKS;
   1a11a:	2100      	movs	r1, #0
   1a11c:	e7d4      	b.n	1a0c8 <smp_pairing_req+0x150>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1a11e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1a122:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1a124:	2b03      	cmp	r3, #3
   1a126:	d037      	beq.n	1a198 <smp_pairing_req+0x220>
   1a128:	d825      	bhi.n	1a176 <smp_pairing_req+0x1fe>
   1a12a:	3b01      	subs	r3, #1
   1a12c:	2b01      	cmp	r3, #1
   1a12e:	f63f af4f 	bhi.w	19fd0 <smp_pairing_req+0x58>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a132:	2105      	movs	r1, #5
   1a134:	4628      	mov	r0, r5
   1a136:	f00e f966 	bl	28406 <atomic_test_bit>
   1a13a:	2800      	cmp	r0, #0
   1a13c:	f040 80b0 	bne.w	1a2a0 <smp_pairing_req+0x328>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a140:	4620      	mov	r0, r4
   1a142:	f7ff fca5 	bl	19a90 <latch_auth_cb>
   1a146:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a148:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1a14a:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a14e:	f7ff fc9f 	bl	19a90 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1a152:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a156:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1a158:	f898 0008 	ldrb.w	r0, [r8, #8]
   1a15c:	f001 f954 	bl	1b408 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1a160:	7a22      	ldrb	r2, [r4, #8]
   1a162:	b1e8      	cbz	r0, 1a1a0 <smp_pairing_req+0x228>
   1a164:	7b43      	ldrb	r3, [r0, #13]
   1a166:	07db      	lsls	r3, r3, #31
   1a168:	d51a      	bpl.n	1a1a0 <smp_pairing_req+0x228>
   1a16a:	b9ca      	cbnz	r2, 1a1a0 <smp_pairing_req+0x228>
		BT_ERR("JustWorks failed, authenticated keys present");
   1a16c:	4849      	ldr	r0, [pc, #292]	; (1a294 <smp_pairing_req+0x31c>)
   1a16e:	2145      	movs	r1, #69	; 0x45
   1a170:	f00b fef4 	bl	25f5c <z_log_minimal_printk>
	if (ret) {
   1a174:	e72c      	b.n	19fd0 <smp_pairing_req+0x58>
	switch (sec) {
   1a176:	2b04      	cmp	r3, #4
   1a178:	f47f af2a 	bne.w	19fd0 <smp_pairing_req+0x58>
	return MIN(req->max_key_size, rsp->max_key_size);
   1a17c:	7d23      	ldrb	r3, [r4, #20]
   1a17e:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1a180:	4293      	cmp	r3, r2
   1a182:	bf28      	it	cs
   1a184:	4613      	movcs	r3, r2
   1a186:	2b10      	cmp	r3, #16
   1a188:	f47f af06 	bne.w	19f98 <smp_pairing_req+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a18c:	2105      	movs	r1, #5
   1a18e:	4628      	mov	r0, r5
   1a190:	f00e f939 	bl	28406 <atomic_test_bit>
   1a194:	2800      	cmp	r0, #0
   1a196:	d09e      	beq.n	1a0d6 <smp_pairing_req+0x15e>
		if (smp->method == JUST_WORKS) {
   1a198:	7a23      	ldrb	r3, [r4, #8]
   1a19a:	2b00      	cmp	r3, #0
   1a19c:	d1c9      	bne.n	1a132 <smp_pairing_req+0x1ba>
   1a19e:	e79a      	b.n	1a0d6 <smp_pairing_req+0x15e>
	switch (smp->method) {
   1a1a0:	2a06      	cmp	r2, #6
   1a1a2:	d85e      	bhi.n	1a262 <smp_pairing_req+0x2ea>
   1a1a4:	e8df f002 	tbb	[pc, r2]
   1a1a8:	5d2d5518 	.word	0x5d2d5518
   1a1ac:	5d5d      	.short	0x5d5d
   1a1ae:	04          	.byte	0x04
   1a1af:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1a1b0:	2e00      	cmp	r6, #0
   1a1b2:	d05b      	beq.n	1a26c <smp_pairing_req+0x2f4>
   1a1b4:	68f3      	ldr	r3, [r6, #12]
   1a1b6:	2b00      	cmp	r3, #0
   1a1b8:	d058      	beq.n	1a26c <smp_pairing_req+0x2f4>
			struct bt_conn_oob_info info = {
   1a1ba:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a1bc:	210a      	movs	r1, #10
   1a1be:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1a1c0:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a1c4:	f00e fa14 	bl	285f0 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1a1c8:	68f3      	ldr	r3, [r6, #12]
   1a1ca:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1a1ce:	a901      	add	r1, sp, #4
   1a1d0:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1a1d2:	7a23      	ldrb	r3, [r4, #8]
   1a1d4:	2b00      	cmp	r3, #0
   1a1d6:	d14b      	bne.n	1a270 <smp_pairing_req+0x2f8>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a1d8:	210f      	movs	r1, #15
   1a1da:	4628      	mov	r0, r5
   1a1dc:	f00e f913 	bl	28406 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1a1e0:	2800      	cmp	r0, #0
   1a1e2:	d145      	bne.n	1a270 <smp_pairing_req+0x2f8>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a1e4:	2f00      	cmp	r7, #0
   1a1e6:	d043      	beq.n	1a270 <smp_pairing_req+0x2f8>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1a1e8:	697b      	ldr	r3, [r7, #20]
   1a1ea:	2b00      	cmp	r3, #0
   1a1ec:	d040      	beq.n	1a270 <smp_pairing_req+0x2f8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a1ee:	4628      	mov	r0, r5
   1a1f0:	210a      	movs	r1, #10
   1a1f2:	f00e f9fd 	bl	285f0 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1a1f6:	697b      	ldr	r3, [r7, #20]
   1a1f8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1a1fc:	4798      	blx	r3
		return 0;
   1a1fe:	2000      	movs	r0, #0
   1a200:	e6cb      	b.n	19f9a <smp_pairing_req+0x22>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1a202:	2104      	movs	r1, #4
   1a204:	eb0d 0001 	add.w	r0, sp, r1
   1a208:	f004 f970 	bl	1e4ec <bt_rand>
   1a20c:	2800      	cmp	r0, #0
   1a20e:	f47f aedf 	bne.w	19fd0 <smp_pairing_req+0x58>
			passkey %= 1000000;
   1a212:	9b01      	ldr	r3, [sp, #4]
   1a214:	4a20      	ldr	r2, [pc, #128]	; (1a298 <smp_pairing_req+0x320>)
   1a216:	fbb3 f1f2 	udiv	r1, r3, r2
   1a21a:	fb02 3311 	mls	r3, r2, r1, r3
   1a21e:	9301      	str	r3, [sp, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1a220:	b14e      	cbz	r6, 1a236 <smp_pairing_req+0x2be>
   1a222:	6833      	ldr	r3, [r6, #0]
   1a224:	b13b      	cbz	r3, 1a236 <smp_pairing_req+0x2be>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1a226:	210b      	movs	r1, #11
   1a228:	4628      	mov	r0, r5
   1a22a:	f00e f9e1 	bl	285f0 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1a22e:	6833      	ldr	r3, [r6, #0]
   1a230:	9901      	ldr	r1, [sp, #4]
   1a232:	4640      	mov	r0, r8
   1a234:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1a236:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1a238:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1a23c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1a240:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1a242:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1a246:	0a1b      	lsrs	r3, r3, #8
   1a248:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1a24c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1a250:	e7bf      	b.n	1a1d2 <smp_pairing_req+0x25a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a252:	4628      	mov	r0, r5
   1a254:	210a      	movs	r1, #10
   1a256:	f00e f9cb 	bl	285f0 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1a25a:	6873      	ldr	r3, [r6, #4]
   1a25c:	4640      	mov	r0, r8
   1a25e:	4798      	blx	r3
	if (ret) {
   1a260:	e7b7      	b.n	1a1d2 <smp_pairing_req+0x25a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a262:	480e      	ldr	r0, [pc, #56]	; (1a29c <smp_pairing_req+0x324>)
   1a264:	2145      	movs	r1, #69	; 0x45
   1a266:	f00b fe79 	bl	25f5c <z_log_minimal_printk>
	if (ret) {
   1a26a:	e6b1      	b.n	19fd0 <smp_pairing_req+0x58>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1a26c:	2002      	movs	r0, #2
   1a26e:	e694      	b.n	19f9a <smp_pairing_req+0x22>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1a270:	2103      	movs	r1, #3
   1a272:	4620      	mov	r0, r4
   1a274:	f00e f9bc 	bl	285f0 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1a278:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1a27a:	f00e f9b9 	bl	285f0 <atomic_set_bit>
}
   1a27e:	b002      	add	sp, #8
   1a280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   1a284:	f00e b9e7 	b.w	28656 <send_pairing_rsp>
   1a288:	20003686 	.word	0x20003686
   1a28c:	0002cc11 	.word	0x0002cc11
   1a290:	0002cbf8 	.word	0x0002cbf8
   1a294:	0002c85c 	.word	0x0002c85c
   1a298:	000f4240 	.word	0x000f4240
   1a29c:	0002c7f5 	.word	0x0002c7f5
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1a2a0:	7a23      	ldrb	r3, [r4, #8]
   1a2a2:	b973      	cbnz	r3, 1a2c2 <smp_pairing_req+0x34a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a2a4:	210f      	movs	r1, #15
   1a2a6:	4628      	mov	r0, r5
   1a2a8:	f00e f8ad 	bl	28406 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1a2ac:	b948      	cbnz	r0, 1a2c2 <smp_pairing_req+0x34a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a2ae:	b147      	cbz	r7, 1a2c2 <smp_pairing_req+0x34a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1a2b0:	697b      	ldr	r3, [r7, #20]
   1a2b2:	b133      	cbz	r3, 1a2c2 <smp_pairing_req+0x34a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a2b4:	4628      	mov	r0, r5
   1a2b6:	210a      	movs	r1, #10
   1a2b8:	f00e f99a 	bl	285f0 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1a2bc:	697b      	ldr	r3, [r7, #20]
   1a2be:	4630      	mov	r0, r6
   1a2c0:	e79c      	b.n	1a1fc <smp_pairing_req+0x284>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1a2c2:	210c      	movs	r1, #12
   1a2c4:	4620      	mov	r0, r4
   1a2c6:	e7d8      	b.n	1a27a <smp_pairing_req+0x302>

0001a2c8 <compute_and_check_and_send_periph_dhcheck>:
{
   1a2c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   1a2cc:	2210      	movs	r2, #16
{
   1a2ce:	b0a3      	sub	sp, #140	; 0x8c
   1a2d0:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1a2d2:	2100      	movs	r1, #0
   1a2d4:	eb0d 0002 	add.w	r0, sp, r2
   1a2d8:	f00c fcdb 	bl	26c92 <memset>
	switch (smp->method) {
   1a2dc:	7a22      	ldrb	r2, [r4, #8]
   1a2de:	2a05      	cmp	r2, #5
   1a2e0:	d837      	bhi.n	1a352 <compute_and_check_and_send_periph_dhcheck+0x8a>
   1a2e2:	e8df f002 	tbb	[pc, r2]
   1a2e6:	0309      	.short	0x0309
   1a2e8:	2e360903 	.word	0x2e360903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1a2ec:	2204      	movs	r2, #4
   1a2ee:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1a2f2:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1a2f4:	f00c fcc2 	bl	26c7c <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1a2f8:	4b6a      	ldr	r3, [pc, #424]	; (1a4a4 <compute_and_check_and_send_periph_dhcheck+0x1dc>)
		   &smp->chan.chan.conn->le.init_addr,
   1a2fa:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   1a2fe:	aa14      	add	r2, sp, #80	; 0x50
   1a300:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1a304:	6818      	ldr	r0, [r3, #0]
   1a306:	6859      	ldr	r1, [r3, #4]
   1a308:	4615      	mov	r5, r2
   1a30a:	c503      	stmia	r5!, {r0, r1}
   1a30c:	3308      	adds	r3, #8
   1a30e:	42b3      	cmp	r3, r6
   1a310:	462a      	mov	r2, r5
   1a312:	d1f7      	bne.n	1a304 <compute_and_check_and_send_periph_dhcheck+0x3c>
   1a314:	6818      	ldr	r0, [r3, #0]
   1a316:	791b      	ldrb	r3, [r3, #4]
   1a318:	6028      	str	r0, [r5, #0]
   1a31a:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1a31c:	ad0c      	add	r5, sp, #48	; 0x30
   1a31e:	2220      	movs	r2, #32
   1a320:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1a324:	4628      	mov	r0, r5
   1a326:	f7ff fc41 	bl	19bac <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1a32a:	485f      	ldr	r0, [pc, #380]	; (1a4a8 <compute_and_check_and_send_periph_dhcheck+0x1e0>)
   1a32c:	ab08      	add	r3, sp, #32
   1a32e:	2220      	movs	r2, #32
   1a330:	4629      	mov	r1, r5
   1a332:	f00e f8a1 	bl	28478 <bt_smp_aes_cmac>
	if (err) {
   1a336:	b1a0      	cbz	r0, 1a362 <compute_and_check_and_send_periph_dhcheck+0x9a>
		BT_ERR("Calculate LTK failed");
   1a338:	485c      	ldr	r0, [pc, #368]	; (1a4ac <compute_and_check_and_send_periph_dhcheck+0x1e4>)
   1a33a:	2145      	movs	r1, #69	; 0x45
   1a33c:	f00b fe0e 	bl	25f5c <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1a340:	e00b      	b.n	1a35a <compute_and_check_and_send_periph_dhcheck+0x92>
		if (smp->oobd_remote) {
   1a342:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1a346:	2900      	cmp	r1, #0
   1a348:	d0d6      	beq.n	1a2f8 <compute_and_check_and_send_periph_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1a34a:	2210      	movs	r2, #16
   1a34c:	eb0d 0002 	add.w	r0, sp, r2
   1a350:	e7d0      	b.n	1a2f4 <compute_and_check_and_send_periph_dhcheck+0x2c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a352:	4857      	ldr	r0, [pc, #348]	; (1a4b0 <compute_and_check_and_send_periph_dhcheck+0x1e8>)
   1a354:	2145      	movs	r1, #69	; 0x45
   1a356:	f00b fe01 	bl	25f5c <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1a35a:	2008      	movs	r0, #8
}
   1a35c:	b023      	add	sp, #140	; 0x8c
   1a35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1a362:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1a366:	2210      	movs	r2, #16
   1a368:	4639      	mov	r1, r7
   1a36a:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1a36e:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1a372:	f7ff fc1b 	bl	19bac <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1a376:	2210      	movs	r2, #16
   1a378:	4641      	mov	r1, r8
   1a37a:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1a37e:	f7ff fc15 	bl	19bac <sys_memcpy_swap>
	m[37] = a1->type;
   1a382:	f899 3097 	ldrb.w	r3, [r9, #151]	; 0x97
   1a386:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1a38a:	2206      	movs	r2, #6
   1a38c:	f109 0198 	add.w	r1, r9, #152	; 0x98
   1a390:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1a394:	f7ff fc0a 	bl	19bac <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1a398:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1a39c:	f899 309e 	ldrb.w	r3, [r9, #158]	; 0x9e
   1a3a0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a3a4:	2206      	movs	r2, #6
   1a3a6:	f109 019f 	add.w	r1, r9, #159	; 0x9f
   1a3aa:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1a3ae:	f7ff fbfd 	bl	19bac <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1a3b2:	4633      	mov	r3, r6
   1a3b4:	2235      	movs	r2, #53	; 0x35
   1a3b6:	a914      	add	r1, sp, #80	; 0x50
   1a3b8:	a808      	add	r0, sp, #32
   1a3ba:	f00e f85d 	bl	28478 <bt_smp_aes_cmac>
	if (err) {
   1a3be:	2800      	cmp	r0, #0
   1a3c0:	d1ba      	bne.n	1a338 <compute_and_check_and_send_periph_dhcheck+0x70>
	sys_mem_swap(mackey, 16);
   1a3c2:	4630      	mov	r0, r6
   1a3c4:	f00e f895 	bl	284f2 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1a3c8:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   1a3cc:	2301      	movs	r3, #1
   1a3ce:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1a3d2:	2235      	movs	r2, #53	; 0x35
   1a3d4:	464b      	mov	r3, r9
   1a3d6:	a914      	add	r1, sp, #80	; 0x50
   1a3d8:	a808      	add	r0, sp, #32
   1a3da:	f00e f84d 	bl	28478 <bt_smp_aes_cmac>
	if (err) {
   1a3de:	2800      	cmp	r0, #0
   1a3e0:	d1aa      	bne.n	1a338 <compute_and_check_and_send_periph_dhcheck+0x70>
	sys_mem_swap(ltk, 16);
   1a3e2:	4648      	mov	r0, r9
   1a3e4:	f00e f885 	bl	284f2 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1a3e8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1a3ec:	aa14      	add	r2, sp, #80	; 0x50
   1a3ee:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1a3f0:	f103 0297 	add.w	r2, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr,
   1a3f4:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1a3f6:	9301      	str	r3, [sp, #4]
   1a3f8:	f104 0311 	add.w	r3, r4, #17
   1a3fc:	9202      	str	r2, [sp, #8]
   1a3fe:	9300      	str	r3, [sp, #0]
   1a400:	463a      	mov	r2, r7
   1a402:	ab04      	add	r3, sp, #16
   1a404:	4641      	mov	r1, r8
   1a406:	4630      	mov	r0, r6
   1a408:	f00e f881 	bl	2850e <smp_f6>
   1a40c:	b110      	cbz	r0, 1a414 <compute_and_check_and_send_periph_dhcheck+0x14c>
		BT_ERR("Calculate local DHKey check failed");
   1a40e:	4829      	ldr	r0, [pc, #164]	; (1a4b4 <compute_and_check_and_send_periph_dhcheck+0x1ec>)
   1a410:	2145      	movs	r1, #69	; 0x45
   1a412:	e793      	b.n	1a33c <compute_and_check_and_send_periph_dhcheck+0x74>
	if (smp->method == LE_SC_OOB) {
   1a414:	7a23      	ldrb	r3, [r4, #8]
   1a416:	2b05      	cmp	r3, #5
   1a418:	d107      	bne.n	1a42a <compute_and_check_and_send_periph_dhcheck+0x162>
		if (smp->oobd_local) {
   1a41a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1a41e:	2210      	movs	r2, #16
   1a420:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   1a424:	b1b1      	cbz	r1, 1a454 <compute_and_check_and_send_periph_dhcheck+0x18c>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1a426:	f00c fc29 	bl	26c7c <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1a42a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1a42e:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1a430:	f103 029e 	add.w	r2, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
   1a434:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1a436:	9301      	str	r3, [sp, #4]
   1a438:	f104 030a 	add.w	r3, r4, #10
   1a43c:	9202      	str	r2, [sp, #8]
   1a43e:	9300      	str	r3, [sp, #0]
   1a440:	4642      	mov	r2, r8
   1a442:	ab04      	add	r3, sp, #16
   1a444:	4639      	mov	r1, r7
   1a446:	4630      	mov	r0, r6
   1a448:	f00e f861 	bl	2850e <smp_f6>
   1a44c:	b128      	cbz	r0, 1a45a <compute_and_check_and_send_periph_dhcheck+0x192>
		BT_ERR("Calculate remote DHKey check failed");
   1a44e:	481a      	ldr	r0, [pc, #104]	; (1a4b8 <compute_and_check_and_send_periph_dhcheck+0x1f0>)
   1a450:	2145      	movs	r1, #69	; 0x45
   1a452:	e773      	b.n	1a33c <compute_and_check_and_send_periph_dhcheck+0x74>
			memset(r, 0, sizeof(r));
   1a454:	f00c fc1d 	bl	26c92 <memset>
   1a458:	e7e7      	b.n	1a42a <compute_and_check_and_send_periph_dhcheck+0x162>
	if (memcmp(smp->e, re, 16)) {
   1a45a:	4629      	mov	r1, r5
   1a45c:	2210      	movs	r2, #16
   1a45e:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1a462:	f00c fbe4 	bl	26c2e <memcmp>
   1a466:	4605      	mov	r5, r0
   1a468:	b9d0      	cbnz	r0, 1a4a0 <compute_and_check_and_send_periph_dhcheck+0x1d8>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1a46a:	210d      	movs	r1, #13
   1a46c:	4620      	mov	r0, r4
   1a46e:	f00e f8d3 	bl	28618 <smp_create_pdu.constprop.0>
	if (!buf) {
   1a472:	4606      	mov	r6, r0
   1a474:	2800      	cmp	r0, #0
   1a476:	f43f af70 	beq.w	1a35a <compute_and_check_and_send_periph_dhcheck+0x92>
   1a47a:	2110      	movs	r1, #16
   1a47c:	3008      	adds	r0, #8
   1a47e:	f001 fc49 	bl	1bd14 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1a482:	2210      	movs	r2, #16
   1a484:	a914      	add	r1, sp, #80	; 0x50
   1a486:	f00c fbf9 	bl	26c7c <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1a48a:	462a      	mov	r2, r5
   1a48c:	4631      	mov	r1, r6
   1a48e:	4620      	mov	r0, r4
   1a490:	f00e f812 	bl	284b8 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1a494:	1d20      	adds	r0, r4, #4
   1a496:	2101      	movs	r1, #1
   1a498:	f00e f8aa 	bl	285f0 <atomic_set_bit>
	return 0;
   1a49c:	4628      	mov	r0, r5
   1a49e:	e75d      	b.n	1a35c <compute_and_check_and_send_periph_dhcheck+0x94>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1a4a0:	200b      	movs	r0, #11
   1a4a2:	e75b      	b.n	1a35c <compute_and_check_and_send_periph_dhcheck+0x94>
   1a4a4:	00029ba4 	.word	0x00029ba4
   1a4a8:	0002cbe8 	.word	0x0002cbe8
   1a4ac:	0002c88e 	.word	0x0002c88e
   1a4b0:	0002c7f5 	.word	0x0002c7f5
   1a4b4:	0002c8a8 	.word	0x0002c8a8
   1a4b8:	0002c8d0 	.word	0x0002c8d0

0001a4bc <bt_smp_connected>:
{
   1a4bc:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1a4be:	490b      	ldr	r1, [pc, #44]	; (1a4ec <bt_smp_connected+0x30>)
{
   1a4c0:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1a4c2:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1a4c6:	3094      	adds	r0, #148	; 0x94
   1a4c8:	f006 fbd6 	bl	20c78 <k_work_init_delayable>
	smp_reset(smp);
   1a4cc:	4628      	mov	r0, r5
   1a4ce:	f00e f935 	bl	2873c <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a4d2:	f3bf 8f5b 	dmb	ish
   1a4d6:	4b06      	ldr	r3, [pc, #24]	; (1a4f0 <bt_smp_connected+0x34>)
   1a4d8:	34c4      	adds	r4, #196	; 0xc4
   1a4da:	e854 2f00 	ldrex	r2, [r4]
   1a4de:	e844 3100 	strex	r1, r3, [r4]
   1a4e2:	2900      	cmp	r1, #0
   1a4e4:	d1f9      	bne.n	1a4da <bt_smp_connected+0x1e>
   1a4e6:	f3bf 8f5b 	dmb	ish
}
   1a4ea:	bd38      	pop	{r3, r4, r5, pc}
   1a4ec:	0001b05d 	.word	0x0001b05d
   1a4f0:	20001b40 	.word	0x20001b40

0001a4f4 <smp_pairing_confirm>:
{
   1a4f4:	b570      	push	{r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1a4f6:	1d05      	adds	r5, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1a4f8:	688e      	ldr	r6, [r1, #8]
{
   1a4fa:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1a4fc:	210b      	movs	r1, #11
   1a4fe:	4628      	mov	r0, r5
   1a500:	f00d ffab 	bl	2845a <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1a504:	4631      	mov	r1, r6
   1a506:	2210      	movs	r2, #16
   1a508:	f104 0017 	add.w	r0, r4, #23
   1a50c:	f00c fbb6 	bl	26c7c <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a510:	2105      	movs	r1, #5
   1a512:	4628      	mov	r0, r5
   1a514:	f00d ff77 	bl	28406 <atomic_test_bit>
   1a518:	b920      	cbnz	r0, 1a524 <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   1a51a:	4620      	mov	r0, r4
}
   1a51c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1a520:	f00e b989 	b.w	28836 <legacy_pairing_confirm>
	switch (smp->method) {
   1a524:	7a22      	ldrb	r2, [r4, #8]
   1a526:	2a01      	cmp	r2, #1
   1a528:	d009      	beq.n	1a53e <smp_pairing_confirm+0x4a>
   1a52a:	2a02      	cmp	r2, #2
   1a52c:	d113      	bne.n	1a556 <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1a52e:	4620      	mov	r0, r4
   1a530:	2104      	movs	r1, #4
   1a532:	f00e f85d 	bl	285f0 <atomic_set_bit>
}
   1a536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1a53a:	f7ff bbe7 	b.w	19d0c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1a53e:	210a      	movs	r1, #10
   1a540:	4628      	mov	r0, r5
   1a542:	f00d ff60 	bl	28406 <atomic_test_bit>
   1a546:	2800      	cmp	r0, #0
   1a548:	d0f1      	beq.n	1a52e <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1a54a:	4628      	mov	r0, r5
   1a54c:	2100      	movs	r1, #0
   1a54e:	f00e f84f 	bl	285f0 <atomic_set_bit>
			return 0;
   1a552:	2000      	movs	r0, #0
}
   1a554:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a556:	4803      	ldr	r0, [pc, #12]	; (1a564 <smp_pairing_confirm+0x70>)
   1a558:	2145      	movs	r1, #69	; 0x45
   1a55a:	f00b fcff 	bl	25f5c <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1a55e:	2008      	movs	r0, #8
   1a560:	e7f8      	b.n	1a554 <smp_pairing_confirm+0x60>
   1a562:	bf00      	nop
   1a564:	0002c7f5 	.word	0x0002c7f5

0001a568 <smp_pairing_random>:
{
   1a568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a56c:	b09e      	sub	sp, #120	; 0x78
   1a56e:	4604      	mov	r4, r0
   1a570:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a572:	f7ff fa8d 	bl	19a90 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1a576:	f104 0737 	add.w	r7, r4, #55	; 0x37
   1a57a:	68a9      	ldr	r1, [r5, #8]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a57c:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1a57e:	2210      	movs	r2, #16
   1a580:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a582:	1d25      	adds	r5, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1a584:	f00c fb7a 	bl	26c7c <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a588:	2105      	movs	r1, #5
   1a58a:	4628      	mov	r0, r5
   1a58c:	f00d ff3b 	bl	28406 <atomic_test_bit>
   1a590:	2800      	cmp	r0, #0
   1a592:	d140      	bne.n	1a616 <smp_pairing_random+0xae>
	struct bt_conn *conn = smp->chan.chan.conn;
   1a594:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1a598:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1a59c:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1a5a0:	ae0a      	add	r6, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1a5a2:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1a5a4:	9201      	str	r2, [sp, #4]
   1a5a6:	9300      	str	r3, [sp, #0]
   1a5a8:	9602      	str	r6, [sp, #8]
   1a5aa:	f104 0310 	add.w	r3, r4, #16
   1a5ae:	f104 0209 	add.w	r2, r4, #9
   1a5b2:	4639      	mov	r1, r7
   1a5b4:	4640      	mov	r0, r8
   1a5b6:	f00e f8e4 	bl	28782 <smp_c1>
	if (err) {
   1a5ba:	2800      	cmp	r0, #0
   1a5bc:	d154      	bne.n	1a668 <smp_pairing_random+0x100>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1a5be:	2210      	movs	r2, #16
   1a5c0:	4631      	mov	r1, r6
   1a5c2:	f104 0017 	add.w	r0, r4, #23
   1a5c6:	f00c fb32 	bl	26c2e <memcmp>
   1a5ca:	2800      	cmp	r0, #0
   1a5cc:	f040 8089 	bne.w	1a6e2 <smp_pairing_random+0x17a>
	memcpy(out, r2, 8);
   1a5d0:	2208      	movs	r2, #8
   1a5d2:	4639      	mov	r1, r7
   1a5d4:	4630      	mov	r0, r6
   1a5d6:	f00c fb51 	bl	26c7c <memcpy>
	memcpy(out + 8, r1, 8);
   1a5da:	2208      	movs	r2, #8
   1a5dc:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1a5e0:	a80c      	add	r0, sp, #48	; 0x30
   1a5e2:	f00c fb4b 	bl	26c7c <memcpy>
	return bt_encrypt_le(k, out, out);
   1a5e6:	4632      	mov	r2, r6
   1a5e8:	4631      	mov	r1, r6
   1a5ea:	4640      	mov	r0, r8
   1a5ec:	f00e fd11 	bl	29012 <bt_encrypt_le>
		if (err) {
   1a5f0:	b120      	cbz	r0, 1a5fc <smp_pairing_random+0x94>
			BT_ERR("Calculate STK failed");
   1a5f2:	4867      	ldr	r0, [pc, #412]	; (1a790 <smp_pairing_random+0x228>)
   1a5f4:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Calculate confirm failed");
   1a5f6:	f00b fcb1 	bl	25f5c <z_log_minimal_printk>
		if (err) {
   1a5fa:	e035      	b.n	1a668 <smp_pairing_random+0x100>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1a5fc:	4631      	mov	r1, r6
   1a5fe:	2210      	movs	r2, #16
   1a600:	4640      	mov	r0, r8
   1a602:	f00c fb3b 	bl	26c7c <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1a606:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1a608:	4628      	mov	r0, r5
   1a60a:	f00d fff1 	bl	285f0 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1a60e:	4620      	mov	r0, r4
   1a610:	f00e f83a 	bl	28688 <smp_send_pairing_random>
   1a614:	e029      	b.n	1a66a <smp_pairing_random+0x102>
	switch (smp->method) {
   1a616:	7a22      	ldrb	r2, [r4, #8]
   1a618:	2a05      	cmp	r2, #5
   1a61a:	f200 80b2 	bhi.w	1a782 <smp_pairing_random+0x21a>
   1a61e:	e8df f002 	tbb	[pc, r2]
   1a622:	433d      	.short	0x433d
   1a624:	86b00343 	.word	0x86b00343
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1a628:	4b5a      	ldr	r3, [pc, #360]	; (1a794 <smp_pairing_random+0x22c>)
   1a62a:	f8d3 8000 	ldr.w	r8, [r3]
	sys_memcpy_swap(m, u, 32);
   1a62e:	2220      	movs	r2, #32
   1a630:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1a634:	a80a      	add	r0, sp, #40	; 0x28
   1a636:	f7ff fab9 	bl	19bac <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1a63a:	2220      	movs	r2, #32
   1a63c:	4641      	mov	r1, r8
   1a63e:	a812      	add	r0, sp, #72	; 0x48
   1a640:	f7ff fab4 	bl	19bac <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1a644:	2210      	movs	r2, #16
   1a646:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1a64a:	a81a      	add	r0, sp, #104	; 0x68
   1a64c:	f7ff faae 	bl	19bac <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1a650:	2210      	movs	r2, #16
   1a652:	4639      	mov	r1, r7
   1a654:	a806      	add	r0, sp, #24
   1a656:	f7ff faa9 	bl	19bac <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1a65a:	ab06      	add	r3, sp, #24
   1a65c:	2250      	movs	r2, #80	; 0x50
   1a65e:	a90a      	add	r1, sp, #40	; 0x28
   1a660:	4618      	mov	r0, r3
   1a662:	f00d ff09 	bl	28478 <bt_smp_aes_cmac>
	if (err) {
   1a666:	b118      	cbz	r0, 1a670 <smp_pairing_random+0x108>
			return BT_SMP_ERR_UNSPECIFIED;
   1a668:	2008      	movs	r0, #8
}
   1a66a:	b01e      	add	sp, #120	; 0x78
   1a66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(passkey, xs + 12, 4);
   1a670:	2204      	movs	r2, #4
   1a672:	a909      	add	r1, sp, #36	; 0x24
   1a674:	a805      	add	r0, sp, #20
   1a676:	f00c fb01 	bl	26c7c <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1a67a:	9b05      	ldr	r3, [sp, #20]
   1a67c:	4a46      	ldr	r2, [pc, #280]	; (1a798 <smp_pairing_random+0x230>)
   1a67e:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a680:	4628      	mov	r0, r5
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1a682:	fbb3 f1f2 	udiv	r1, r3, r2
   1a686:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a68a:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1a68c:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a68e:	f00d ffaf 	bl	285f0 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1a692:	68b3      	ldr	r3, [r6, #8]
   1a694:	9905      	ldr	r1, [sp, #20]
   1a696:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1a69a:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1a69c:	210d      	movs	r1, #13
   1a69e:	4620      	mov	r0, r4
   1a6a0:	f00d ffa6 	bl	285f0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1a6a4:	2110      	movs	r1, #16
   1a6a6:	e7af      	b.n	1a608 <smp_pairing_random+0xa0>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1a6a8:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1a6ac:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1a6b0:	4938      	ldr	r1, [pc, #224]	; (1a794 <smp_pairing_random+0x22c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1a6b2:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1a6b4:	ae0a      	add	r6, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1a6b6:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1a6ba:	9600      	str	r6, [sp, #0]
   1a6bc:	6809      	ldr	r1, [r1, #0]
   1a6be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a6c2:	463a      	mov	r2, r7
   1a6c4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1a6c8:	f00d ff6d 	bl	285a6 <smp_f4>
   1a6cc:	b110      	cbz	r0, 1a6d4 <smp_pairing_random+0x16c>
		BT_ERR("Calculate confirm failed");
   1a6ce:	4833      	ldr	r0, [pc, #204]	; (1a79c <smp_pairing_random+0x234>)
   1a6d0:	2145      	movs	r1, #69	; 0x45
   1a6d2:	e790      	b.n	1a5f6 <smp_pairing_random+0x8e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1a6d4:	2210      	movs	r2, #16
   1a6d6:	4631      	mov	r1, r6
   1a6d8:	f104 0017 	add.w	r0, r4, #23
   1a6dc:	f00c faa7 	bl	26c2e <memcmp>
   1a6e0:	b108      	cbz	r0, 1a6e6 <smp_pairing_random+0x17e>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1a6e2:	2004      	movs	r0, #4
   1a6e4:	e7c1      	b.n	1a66a <smp_pairing_random+0x102>
		atomic_set_bit(smp->allowed_cmds,
   1a6e6:	2103      	movs	r1, #3
   1a6e8:	4620      	mov	r0, r4
   1a6ea:	f00d ff81 	bl	285f0 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1a6ee:	f00d ffcb 	bl	28688 <smp_send_pairing_random>
		if (err) {
   1a6f2:	2800      	cmp	r0, #0
   1a6f4:	d1b9      	bne.n	1a66a <smp_pairing_random+0x102>
		smp->passkey_round++;
   1a6f6:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1a6fa:	3301      	adds	r3, #1
   1a6fc:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1a6fe:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1a700:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1a704:	d109      	bne.n	1a71a <smp_pairing_random+0x1b2>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1a706:	210d      	movs	r1, #13
   1a708:	4620      	mov	r0, r4
   1a70a:	f00d ff71 	bl	285f0 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1a70e:	2110      	movs	r1, #16
   1a710:	4628      	mov	r0, r5
   1a712:	f00d ff6d 	bl	285f0 <atomic_set_bit>
			return 0;
   1a716:	2000      	movs	r0, #0
   1a718:	e7a7      	b.n	1a66a <smp_pairing_random+0x102>
		if (bt_rand(smp->prnd, 16)) {
   1a71a:	2110      	movs	r1, #16
   1a71c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1a720:	f003 fee4 	bl	1e4ec <bt_rand>
   1a724:	3800      	subs	r0, #0
   1a726:	bf18      	it	ne
   1a728:	2001      	movne	r0, #1
   1a72a:	00c0      	lsls	r0, r0, #3
   1a72c:	e79d      	b.n	1a66a <smp_pairing_random+0x102>
		if (bt_rand(smp->prnd, 16)) {
   1a72e:	2110      	movs	r1, #16
   1a730:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1a734:	f003 feda 	bl	1e4ec <bt_rand>
   1a738:	2800      	cmp	r0, #0
   1a73a:	d195      	bne.n	1a668 <smp_pairing_random+0x100>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1a73c:	b336      	cbz	r6, 1a78c <smp_pairing_random+0x224>
   1a73e:	68f3      	ldr	r3, [r6, #12]
   1a740:	b323      	cbz	r3, 1a78c <smp_pairing_random+0x224>
			struct bt_conn_oob_info info = {
   1a742:	4b17      	ldr	r3, [pc, #92]	; (1a7a0 <smp_pairing_random+0x238>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1a744:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1a746:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   1a74a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1a74e:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1a750:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1a752:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1a756:	d412      	bmi.n	1a77e <smp_pairing_random+0x216>
   1a758:	2b00      	cmp	r3, #0
   1a75a:	bf14      	ite	ne
   1a75c:	2301      	movne	r3, #1
   1a75e:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   1a760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
			smp->oobd_local = NULL;
   1a764:	2300      	movs	r3, #0
			smp->oobd_remote = NULL;
   1a766:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1a76a:	4628      	mov	r0, r5
   1a76c:	210c      	movs	r1, #12
   1a76e:	f00d ff3f 	bl	285f0 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1a772:	68f3      	ldr	r3, [r6, #12]
   1a774:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1a778:	a90a      	add	r1, sp, #40	; 0x28
   1a77a:	4798      	blx	r3
			return 0;
   1a77c:	e7cb      	b.n	1a716 <smp_pairing_random+0x1ae>
		if (rsp_oob_present) {
   1a77e:	005b      	lsls	r3, r3, #1
   1a780:	e7ee      	b.n	1a760 <smp_pairing_random+0x1f8>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a782:	4808      	ldr	r0, [pc, #32]	; (1a7a4 <smp_pairing_random+0x23c>)
   1a784:	2145      	movs	r1, #69	; 0x45
   1a786:	f00b fbe9 	bl	25f5c <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1a78a:	e76d      	b.n	1a668 <smp_pairing_random+0x100>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1a78c:	2002      	movs	r0, #2
   1a78e:	e76c      	b.n	1a66a <smp_pairing_random+0x102>
   1a790:	0002c8f9 	.word	0x0002c8f9
   1a794:	20002764 	.word	0x20002764
   1a798:	000f4240 	.word	0x000f4240
   1a79c:	0002c913 	.word	0x0002c913
   1a7a0:	00029ba4 	.word	0x00029ba4
   1a7a4:	0002c7f5 	.word	0x0002c7f5

0001a7a8 <bt_smp_start_security>:
{
   1a7a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1a7ac:	78c6      	ldrb	r6, [r0, #3]
   1a7ae:	2e01      	cmp	r6, #1
{
   1a7b0:	4604      	mov	r4, r0
	switch (conn->role) {
   1a7b2:	d005      	beq.n	1a7c0 <bt_smp_start_security+0x18>
		return -EINVAL;
   1a7b4:	f06f 0415 	mvn.w	r4, #21
}
   1a7b8:	4620      	mov	r0, r4
   1a7ba:	b003      	add	sp, #12
   1a7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1a7c0:	f7ff f9c8 	bl	19b54 <smp_chan_get>
	if (!smp) {
   1a7c4:	4605      	mov	r5, r0
   1a7c6:	2800      	cmp	r0, #0
   1a7c8:	f000 80ac 	beq.w	1a924 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1a7cc:	1d07      	adds	r7, r0, #4
   1a7ce:	2104      	movs	r1, #4
   1a7d0:	4638      	mov	r0, r7
   1a7d2:	f00d fe18 	bl	28406 <atomic_test_bit>
   1a7d6:	2800      	cmp	r0, #0
   1a7d8:	f040 80a7 	bne.w	1a92a <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a7dc:	2103      	movs	r1, #3
   1a7de:	4638      	mov	r0, r7
   1a7e0:	f00d fe11 	bl	28406 <atomic_test_bit>
   1a7e4:	b110      	cbz	r0, 1a7ec <bt_smp_start_security+0x44>
		return -EBUSY;
   1a7e6:	f06f 040f 	mvn.w	r4, #15
   1a7ea:	e7e5      	b.n	1a7b8 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1a7ec:	4631      	mov	r1, r6
   1a7ee:	4638      	mov	r0, r7
   1a7f0:	f00d fe09 	bl	28406 <atomic_test_bit>
   1a7f4:	2800      	cmp	r0, #0
   1a7f6:	d1f6      	bne.n	1a7e6 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a7f8:	4628      	mov	r0, r5
   1a7fa:	f7ff f949 	bl	19a90 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1a7fe:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1a802:	7a9b      	ldrb	r3, [r3, #10]
   1a804:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a806:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1a808:	d042      	beq.n	1a890 <bt_smp_start_security+0xe8>
   1a80a:	d832      	bhi.n	1a872 <bt_smp_start_security+0xca>
   1a80c:	3b01      	subs	r3, #1
   1a80e:	2b01      	cmp	r3, #1
   1a810:	d948      	bls.n	1a8a4 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1a812:	210a      	movs	r1, #10
   1a814:	1d20      	adds	r0, r4, #4
   1a816:	f00d fdf6 	bl	28406 <atomic_test_bit>
   1a81a:	2800      	cmp	r0, #0
   1a81c:	d1ca      	bne.n	1a7b4 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1a81e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1a822:	b983      	cbnz	r3, 1a846 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   1a824:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1a828:	7a21      	ldrb	r1, [r4, #8]
   1a82a:	4632      	mov	r2, r6
   1a82c:	2020      	movs	r0, #32
   1a82e:	f000 fd6d 	bl	1b30c <bt_keys_find>
   1a832:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   1a836:	b930      	cbnz	r0, 1a846 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1a838:	7a21      	ldrb	r1, [r4, #8]
   1a83a:	4632      	mov	r2, r6
   1a83c:	2004      	movs	r0, #4
   1a83e:	f000 fd65 	bl	1b30c <bt_keys_find>
   1a842:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys ||
   1a846:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1a84a:	2b00      	cmp	r3, #0
   1a84c:	d0b2      	beq.n	1a7b4 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1a84e:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1a850:	f012 0f24 	tst.w	r2, #36	; 0x24
   1a854:	d0ae      	beq.n	1a7b4 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1a856:	7aa1      	ldrb	r1, [r4, #10]
   1a858:	2902      	cmp	r1, #2
   1a85a:	d923      	bls.n	1a8a4 <bt_smp_start_security+0xfc>
   1a85c:	7b58      	ldrb	r0, [r3, #13]
   1a85e:	07c0      	lsls	r0, r0, #31
   1a860:	d5a8      	bpl.n	1a7b4 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1a862:	2903      	cmp	r1, #3
   1a864:	d01e      	beq.n	1a8a4 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1a866:	0692      	lsls	r2, r2, #26
   1a868:	d5a4      	bpl.n	1a7b4 <bt_smp_start_security+0xc>
   1a86a:	7b1b      	ldrb	r3, [r3, #12]
   1a86c:	2b10      	cmp	r3, #16
   1a86e:	d1a1      	bne.n	1a7b4 <bt_smp_start_security+0xc>
   1a870:	e018      	b.n	1a8a4 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1a872:	2b04      	cmp	r3, #4
   1a874:	d1cd      	bne.n	1a812 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a876:	4628      	mov	r0, r5
   1a878:	f7ff f928 	bl	19acc <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1a87c:	2803      	cmp	r0, #3
   1a87e:	d104      	bne.n	1a88a <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a880:	2e00      	cmp	r6, #0
   1a882:	d0c6      	beq.n	1a812 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1a884:	68f3      	ldr	r3, [r6, #12]
   1a886:	2b00      	cmp	r3, #0
   1a888:	d0c3      	beq.n	1a812 <bt_smp_start_security+0x6a>
   1a88a:	4b29      	ldr	r3, [pc, #164]	; (1a930 <bt_smp_start_security+0x188>)
   1a88c:	781b      	ldrb	r3, [r3, #0]
   1a88e:	e007      	b.n	1a8a0 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a890:	4628      	mov	r0, r5
   1a892:	f7ff f91b 	bl	19acc <get_io_capa>
   1a896:	2803      	cmp	r0, #3
   1a898:	d104      	bne.n	1a8a4 <bt_smp_start_security+0xfc>
   1a89a:	2e00      	cmp	r6, #0
   1a89c:	d0b9      	beq.n	1a812 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1a89e:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1a8a0:	2b00      	cmp	r3, #0
   1a8a2:	d0b6      	beq.n	1a812 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   1a8a4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1a8a8:	b13b      	cbz	r3, 1a8ba <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1a8aa:	4628      	mov	r0, r5
   1a8ac:	f7ff f9a2 	bl	19bf4 <smp_init>
   1a8b0:	4680      	mov	r8, r0
   1a8b2:	b170      	cbz	r0, 1a8d2 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   1a8b4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1a8b8:	e77e      	b.n	1a7b8 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a8ba:	7a20      	ldrb	r0, [r4, #8]
   1a8bc:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1a8c0:	f000 fcea 	bl	1b298 <bt_keys_get_addr>
   1a8c4:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   1a8c8:	2800      	cmp	r0, #0
   1a8ca:	d1ee      	bne.n	1a8aa <bt_smp_start_security+0x102>
			return -ENOMEM;
   1a8cc:	f06f 040b 	mvn.w	r4, #11
   1a8d0:	e772      	b.n	1a7b8 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1a8d2:	210b      	movs	r1, #11
   1a8d4:	4628      	mov	r0, r5
   1a8d6:	f00d fe9f 	bl	28618 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1a8da:	4606      	mov	r6, r0
   1a8dc:	2800      	cmp	r0, #0
   1a8de:	d0e9      	beq.n	1a8b4 <bt_smp_start_security+0x10c>
   1a8e0:	2101      	movs	r1, #1
   1a8e2:	3008      	adds	r0, #8
   1a8e4:	f001 fa16 	bl	1bd14 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1a8e8:	2109      	movs	r1, #9
   1a8ea:	4681      	mov	r9, r0
   1a8ec:	4628      	mov	r0, r5
   1a8ee:	f7ff f913 	bl	19b18 <get_auth>
   1a8f2:	4643      	mov	r3, r8
   1a8f4:	f889 0000 	strb.w	r0, [r9]
   1a8f8:	4632      	mov	r2, r6
   1a8fa:	4620      	mov	r0, r4
   1a8fc:	f8cd 8000 	str.w	r8, [sp]
   1a900:	2106      	movs	r1, #6
   1a902:	f00c fe7d 	bl	27600 <bt_l2cap_send_cb>
	if (err) {
   1a906:	4604      	mov	r4, r0
   1a908:	b118      	cbz	r0, 1a912 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1a90a:	4630      	mov	r0, r6
   1a90c:	f001 f8fc 	bl	1bb08 <net_buf_unref>
		return err;
   1a910:	e752      	b.n	1a7b8 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1a912:	4638      	mov	r0, r7
   1a914:	210f      	movs	r1, #15
   1a916:	f00d fe6b 	bl	285f0 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1a91a:	2101      	movs	r1, #1
   1a91c:	4628      	mov	r0, r5
   1a91e:	f00d fe67 	bl	285f0 <atomic_set_bit>
	return 0;
   1a922:	e749      	b.n	1a7b8 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1a924:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1a928:	e746      	b.n	1a7b8 <bt_smp_start_security+0x10>
		return -EIO;
   1a92a:	f06f 0404 	mvn.w	r4, #4
   1a92e:	e743      	b.n	1a7b8 <bt_smp_start_security+0x10>
   1a930:	20003685 	.word	0x20003685

0001a934 <smp_pairing_complete>:
{
   1a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a936:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1a938:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1a93c:	1d04      	adds	r4, r0, #4
	if (!status) {
   1a93e:	bb61      	cbnz	r1, 1a99a <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1a940:	210d      	movs	r1, #13
   1a942:	4620      	mov	r0, r4
   1a944:	f00d fd5f 	bl	28406 <atomic_test_bit>
		if (bond_flag) {
   1a948:	4607      	mov	r7, r0
   1a94a:	b118      	cbz	r0, 1a954 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1a94c:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1a950:	f000 fe64 	bl	1b61c <bt_keys_store>
	return list->head;
   1a954:	4b36      	ldr	r3, [pc, #216]	; (1aa30 <smp_pairing_complete+0xfc>)
   1a956:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1a958:	b19b      	cbz	r3, 1a982 <smp_pairing_complete+0x4e>
	return node->next;
   1a95a:	681c      	ldr	r4, [r3, #0]
   1a95c:	b104      	cbz	r4, 1a960 <smp_pairing_complete+0x2c>
   1a95e:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1a960:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1a964:	b113      	cbz	r3, 1a96c <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   1a966:	4639      	mov	r1, r7
   1a968:	4628      	mov	r0, r5
   1a96a:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1a96c:	b14c      	cbz	r4, 1a982 <smp_pairing_complete+0x4e>
   1a96e:	4623      	mov	r3, r4
   1a970:	68e4      	ldr	r4, [r4, #12]
   1a972:	681b      	ldr	r3, [r3, #0]
   1a974:	b11c      	cbz	r4, 1a97e <smp_pairing_complete+0x4a>
   1a976:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1a978:	2b00      	cmp	r3, #0
   1a97a:	d1f4      	bne.n	1a966 <smp_pairing_complete+0x32>
   1a97c:	e7f7      	b.n	1a96e <smp_pairing_complete+0x3a>
   1a97e:	2b00      	cmp	r3, #0
   1a980:	d1f1      	bne.n	1a966 <smp_pairing_complete+0x32>
	smp_reset(smp);
   1a982:	4630      	mov	r0, r6
   1a984:	f00d feda 	bl	2873c <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1a988:	7a6a      	ldrb	r2, [r5, #9]
   1a98a:	7aab      	ldrb	r3, [r5, #10]
   1a98c:	429a      	cmp	r2, r3
   1a98e:	d04d      	beq.n	1aa2c <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   1a990:	4628      	mov	r0, r5
}
   1a992:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1a996:	f7ff bf07 	b.w	1a7a8 <bt_smp_start_security>
	switch (smp_err) {
   1a99a:	3901      	subs	r1, #1
   1a99c:	b2c9      	uxtb	r1, r1
   1a99e:	290e      	cmp	r1, #14
   1a9a0:	bf9c      	itt	ls
   1a9a2:	4b24      	ldrls	r3, [pc, #144]	; (1aa34 <smp_pairing_complete+0x100>)
   1a9a4:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1a9a6:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
	if (!status) {
   1a9aa:	bf88      	it	hi
   1a9ac:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1a9ae:	b143      	cbz	r3, 1a9c2 <smp_pairing_complete+0x8e>
   1a9b0:	7b1b      	ldrb	r3, [r3, #12]
   1a9b2:	bb2b      	cbnz	r3, 1aa00 <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   1a9b4:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1a9b8:	f000 fd7e 	bl	1b4b8 <bt_keys_clear>
			conn->le.keys = NULL;
   1a9bc:	2300      	movs	r3, #0
   1a9be:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1a9c2:	2102      	movs	r1, #2
   1a9c4:	4620      	mov	r0, r4
   1a9c6:	f00d fd1e 	bl	28406 <atomic_test_bit>
   1a9ca:	b940      	cbnz	r0, 1a9de <smp_pairing_complete+0xaa>
	switch (err) {
   1a9cc:	2f07      	cmp	r7, #7
   1a9ce:	bf96      	itet	ls
   1a9d0:	4b19      	ldrls	r3, [pc, #100]	; (1aa38 <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1a9d2:	211f      	movhi	r1, #31
   1a9d4:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1a9d6:	463a      	mov	r2, r7
   1a9d8:	4628      	mov	r0, r5
   1a9da:	f7fc f89f 	bl	16b1c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a9de:	2103      	movs	r1, #3
   1a9e0:	4620      	mov	r0, r4
   1a9e2:	f00d fd10 	bl	28406 <atomic_test_bit>
   1a9e6:	2800      	cmp	r0, #0
   1a9e8:	d0cb      	beq.n	1a982 <smp_pairing_complete+0x4e>
	return list->head;
   1a9ea:	4b11      	ldr	r3, [pc, #68]	; (1aa30 <smp_pairing_complete+0xfc>)
   1a9ec:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1a9ee:	2b00      	cmp	r3, #0
   1a9f0:	d0c7      	beq.n	1a982 <smp_pairing_complete+0x4e>
	return node->next;
   1a9f2:	681c      	ldr	r4, [r3, #0]
   1a9f4:	b104      	cbz	r4, 1a9f8 <smp_pairing_complete+0xc4>
   1a9f6:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1a9f8:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1a9fc:	b94b      	cbnz	r3, 1aa12 <smp_pairing_complete+0xde>
   1a9fe:	e00b      	b.n	1aa18 <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1aa00:	2102      	movs	r1, #2
   1aa02:	4620      	mov	r0, r4
   1aa04:	f00d fcff 	bl	28406 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1aa08:	2800      	cmp	r0, #0
   1aa0a:	d1d3      	bne.n	1a9b4 <smp_pairing_complete+0x80>
   1aa0c:	e7d9      	b.n	1a9c2 <smp_pairing_complete+0x8e>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1aa0e:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1aa10:	b123      	cbz	r3, 1aa1c <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   1aa12:	4639      	mov	r1, r7
   1aa14:	4628      	mov	r0, r5
   1aa16:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1aa18:	2c00      	cmp	r4, #0
   1aa1a:	d0b2      	beq.n	1a982 <smp_pairing_complete+0x4e>
   1aa1c:	4623      	mov	r3, r4
   1aa1e:	68e4      	ldr	r4, [r4, #12]
   1aa20:	685b      	ldr	r3, [r3, #4]
   1aa22:	2c00      	cmp	r4, #0
   1aa24:	d1f3      	bne.n	1aa0e <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   1aa26:	2b00      	cmp	r3, #0
   1aa28:	d1f3      	bne.n	1aa12 <smp_pairing_complete+0xde>
   1aa2a:	e7aa      	b.n	1a982 <smp_pairing_complete+0x4e>
}
   1aa2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aa2e:	bf00      	nop
   1aa30:	20002620 	.word	0x20002620
   1aa34:	0002cbd9 	.word	0x0002cbd9
   1aa38:	0002cbc8 	.word	0x0002cbc8

0001aa3c <smp_error>:
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1aa3c:	1d03      	adds	r3, r0, #4
{
   1aa3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1aa40:	4606      	mov	r6, r0
   1aa42:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1aa44:	4618      	mov	r0, r3
   1aa46:	2102      	movs	r1, #2
   1aa48:	f00d fcdd 	bl	28406 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1aa4c:	4604      	mov	r4, r0
   1aa4e:	b120      	cbz	r0, 1aa5a <smp_error+0x1e>
   1aa50:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1aa54:	fab4 f484 	clz	r4, r4
   1aa58:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1aa5a:	2103      	movs	r1, #3
   1aa5c:	4618      	mov	r0, r3
   1aa5e:	f00d fcd2 	bl	28406 <atomic_test_bit>
   1aa62:	b180      	cbz	r0, 1aa86 <smp_error+0x4a>
		smp_pairing_complete(smp, reason);
   1aa64:	4639      	mov	r1, r7
   1aa66:	4630      	mov	r0, r6
   1aa68:	f7ff ff64 	bl	1a934 <smp_pairing_complete>
	if (remote_already_completed) {
   1aa6c:	b1c4      	cbz	r4, 1aaa0 <smp_error+0x64>
		BT_WARN("SMP does not allow a pairing failure at this point. Known issue. "
   1aa6e:	481a      	ldr	r0, [pc, #104]	; (1aad8 <smp_error+0x9c>)
   1aa70:	2157      	movs	r1, #87	; 0x57
   1aa72:	f00b fa73 	bl	25f5c <z_log_minimal_printk>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1aa76:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1aa7a:	2105      	movs	r1, #5
   1aa7c:	f00c fcd5 	bl	2742a <bt_conn_disconnect>
		return 0;
   1aa80:	2000      	movs	r0, #0
}
   1aa82:	b003      	add	sp, #12
   1aa84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1aa86:	2101      	movs	r1, #1
   1aa88:	4618      	mov	r0, r3
   1aa8a:	f00d fcbc 	bl	28406 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1aa8e:	2800      	cmp	r0, #0
   1aa90:	d1e8      	bne.n	1aa64 <smp_error+0x28>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1aa92:	210f      	movs	r1, #15
   1aa94:	4618      	mov	r0, r3
   1aa96:	f00d fcb6 	bl	28406 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1aa9a:	2800      	cmp	r0, #0
   1aa9c:	d1e2      	bne.n	1aa64 <smp_error+0x28>
   1aa9e:	e7e5      	b.n	1aa6c <smp_error+0x30>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1aaa0:	2105      	movs	r1, #5
   1aaa2:	4630      	mov	r0, r6
   1aaa4:	f00d fdb8 	bl	28618 <smp_create_pdu.constprop.0>
	if (!buf) {
   1aaa8:	4605      	mov	r5, r0
   1aaaa:	b190      	cbz	r0, 1aad2 <smp_error+0x96>
   1aaac:	2101      	movs	r1, #1
   1aaae:	3008      	adds	r0, #8
   1aab0:	f001 f930 	bl	1bd14 <net_buf_simple_add>
	rsp->reason = reason;
   1aab4:	7007      	strb	r7, [r0, #0]
   1aab6:	9400      	str	r4, [sp, #0]
   1aab8:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1aabc:	4623      	mov	r3, r4
   1aabe:	462a      	mov	r2, r5
   1aac0:	2106      	movs	r1, #6
   1aac2:	f00c fd9d 	bl	27600 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1aac6:	2800      	cmp	r0, #0
   1aac8:	d0da      	beq.n	1aa80 <smp_error+0x44>
		net_buf_unref(buf);
   1aaca:	4628      	mov	r0, r5
   1aacc:	f001 f81c 	bl	1bb08 <net_buf_unref>
   1aad0:	e7d6      	b.n	1aa80 <smp_error+0x44>
		return -ENOBUFS;
   1aad2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1aad6:	e7d4      	b.n	1aa82 <smp_error+0x46>
   1aad8:	0002c931 	.word	0x0002c931

0001aadc <bt_smp_recv>:
{
   1aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1aade:	898b      	ldrh	r3, [r1, #12]
{
   1aae0:	4607      	mov	r7, r0
   1aae2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1aae4:	b92b      	cbnz	r3, 1aaf2 <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
   1aae6:	4828      	ldr	r0, [pc, #160]	; (1ab88 <bt_smp_recv+0xac>)
   1aae8:	2145      	movs	r1, #69	; 0x45
   1aaea:	f00b fa37 	bl	25f5c <z_log_minimal_printk>
}
   1aaee:	2000      	movs	r0, #0
   1aaf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1aaf2:	2101      	movs	r1, #1
   1aaf4:	f105 0008 	add.w	r0, r5, #8
   1aaf8:	f001 f8f2 	bl	1bce0 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1aafc:	2104      	movs	r1, #4
   1aafe:	4606      	mov	r6, r0
   1ab00:	f1a7 00e8 	sub.w	r0, r7, #232	; 0xe8
   1ab04:	f00d fc7f 	bl	28406 <atomic_test_bit>
   1ab08:	f1a7 04ec 	sub.w	r4, r7, #236	; 0xec
   1ab0c:	7832      	ldrb	r2, [r6, #0]
   1ab0e:	b120      	cbz	r0, 1ab1a <bt_smp_recv+0x3e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1ab10:	481e      	ldr	r0, [pc, #120]	; (1ab8c <bt_smp_recv+0xb0>)
   1ab12:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1ab14:	f00b fa22 	bl	25f5c <z_log_minimal_printk>
		return 0;
   1ab18:	e7e9      	b.n	1aaee <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1ab1a:	2a0e      	cmp	r2, #14
   1ab1c:	d902      	bls.n	1ab24 <bt_smp_recv+0x48>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1ab1e:	481c      	ldr	r0, [pc, #112]	; (1ab90 <bt_smp_recv+0xb4>)
   1ab20:	2157      	movs	r1, #87	; 0x57
   1ab22:	e7f7      	b.n	1ab14 <bt_smp_recv+0x38>
	if (!handlers[hdr->code].func) {
   1ab24:	4f1b      	ldr	r7, [pc, #108]	; (1ab94 <bt_smp_recv+0xb8>)
   1ab26:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   1ab2a:	b943      	cbnz	r3, 1ab3e <bt_smp_recv+0x62>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1ab2c:	2157      	movs	r1, #87	; 0x57
   1ab2e:	481a      	ldr	r0, [pc, #104]	; (1ab98 <bt_smp_recv+0xbc>)
   1ab30:	f00b fa14 	bl	25f5c <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1ab34:	2107      	movs	r1, #7
		smp_error(smp, err);
   1ab36:	4620      	mov	r0, r4
   1ab38:	f7ff ff80 	bl	1aa3c <smp_error>
   1ab3c:	e7d7      	b.n	1aaee <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1ab3e:	4611      	mov	r1, r2
   1ab40:	4620      	mov	r0, r4
   1ab42:	f00d fde5 	bl	28710 <atomic_test_and_clear_bit>
   1ab46:	7833      	ldrb	r3, [r6, #0]
   1ab48:	b948      	cbnz	r0, 1ab5e <bt_smp_recv+0x82>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1ab4a:	461a      	mov	r2, r3
   1ab4c:	4813      	ldr	r0, [pc, #76]	; (1ab9c <bt_smp_recv+0xc0>)
   1ab4e:	2157      	movs	r1, #87	; 0x57
   1ab50:	f00b fa04 	bl	25f5c <z_log_minimal_printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1ab54:	7833      	ldrb	r3, [r6, #0]
   1ab56:	2b05      	cmp	r3, #5
   1ab58:	d0c9      	beq.n	1aaee <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1ab5a:	2108      	movs	r1, #8
   1ab5c:	e7eb      	b.n	1ab36 <bt_smp_recv+0x5a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1ab5e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1ab62:	89aa      	ldrh	r2, [r5, #12]
   1ab64:	7909      	ldrb	r1, [r1, #4]
   1ab66:	4291      	cmp	r1, r2
   1ab68:	d005      	beq.n	1ab76 <bt_smp_recv+0x9a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1ab6a:	2145      	movs	r1, #69	; 0x45
   1ab6c:	480c      	ldr	r0, [pc, #48]	; (1aba0 <bt_smp_recv+0xc4>)
   1ab6e:	f00b f9f5 	bl	25f5c <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1ab72:	210a      	movs	r1, #10
   1ab74:	e7df      	b.n	1ab36 <bt_smp_recv+0x5a>
	err = handlers[hdr->code].func(smp, buf);
   1ab76:	4629      	mov	r1, r5
   1ab78:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   1ab7c:	4620      	mov	r0, r4
   1ab7e:	4798      	blx	r3
	if (err) {
   1ab80:	4601      	mov	r1, r0
   1ab82:	2800      	cmp	r0, #0
   1ab84:	d0b3      	beq.n	1aaee <bt_smp_recv+0x12>
   1ab86:	e7d6      	b.n	1ab36 <bt_smp_recv+0x5a>
   1ab88:	0002c98e 	.word	0x0002c98e
   1ab8c:	0002c9ae 	.word	0x0002c9ae
   1ab90:	0002c9e4 	.word	0x0002c9e4
   1ab94:	0002a054 	.word	0x0002a054
   1ab98:	0002ca0b 	.word	0x0002ca0b
   1ab9c:	0002ca2a 	.word	0x0002ca2a
   1aba0:	0002c2d7 	.word	0x0002c2d7

0001aba4 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1aba4:	4b0f      	ldr	r3, [pc, #60]	; (1abe4 <bt_smp_pkey_ready+0x40>)
{
   1aba6:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1aba8:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1abaa:	b928      	cbnz	r0, 1abb8 <bt_smp_pkey_ready+0x14>
}
   1abac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1abb0:	480d      	ldr	r0, [pc, #52]	; (1abe8 <bt_smp_pkey_ready+0x44>)
   1abb2:	2157      	movs	r1, #87	; 0x57
   1abb4:	f00b b9d2 	b.w	25f5c <z_log_minimal_printk>
		err = smp_public_key_periph(smp);
   1abb8:	4c0c      	ldr	r4, [pc, #48]	; (1abec <bt_smp_pkey_ready+0x48>)
	z_impl_k_sem_give(sem);
   1abba:	480d      	ldr	r0, [pc, #52]	; (1abf0 <bt_smp_pkey_ready+0x4c>)
   1abbc:	f005 fcb6 	bl	2052c <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1abc0:	f3bf 8f5b 	dmb	ish
   1abc4:	f854 3904 	ldr.w	r3, [r4], #-4
   1abc8:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1abcc:	065b      	lsls	r3, r3, #25
   1abce:	d507      	bpl.n	1abe0 <bt_smp_pkey_ready+0x3c>
		err = smp_public_key_periph(smp);
   1abd0:	4620      	mov	r0, r4
   1abd2:	f7ff f8df 	bl	19d94 <smp_public_key_periph>
		if (err) {
   1abd6:	4601      	mov	r1, r0
   1abd8:	b110      	cbz	r0, 1abe0 <bt_smp_pkey_ready+0x3c>
			smp_error(smp, err);
   1abda:	4620      	mov	r0, r4
   1abdc:	f7ff ff2e 	bl	1aa3c <smp_error>
}
   1abe0:	bd10      	pop	{r4, pc}
   1abe2:	bf00      	nop
   1abe4:	20002764 	.word	0x20002764
   1abe8:	0002ca4a 	.word	0x0002ca4a
   1abec:	20001b44 	.word	0x20001b44
   1abf0:	20000944 	.word	0x20000944

0001abf4 <smp_ident_addr_info>:
{
   1abf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1abf8:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1abfc:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1abfe:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1ac02:	f023 0302 	bic.w	r3, r3, #2
   1ac06:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1ac0a:	783b      	ldrb	r3, [r7, #0]
{
   1ac0c:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1ac0e:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1ac12:	b1bb      	cbz	r3, 1ac44 <smp_ident_addr_info+0x50>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1ac14:	79bb      	ldrb	r3, [r7, #6]
   1ac16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ac1a:	2bc0      	cmp	r3, #192	; 0xc0
   1ac1c:	d012      	beq.n	1ac44 <smp_ident_addr_info+0x50>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1ac1e:	4638      	mov	r0, r7
   1ac20:	f7f8 ffd2 	bl	13bc8 <bt_addr_le_str>
   1ac24:	2145      	movs	r1, #69	; 0x45
   1ac26:	4602      	mov	r2, r0
   1ac28:	484e      	ldr	r0, [pc, #312]	; (1ad64 <smp_ident_addr_info+0x170>)
   1ac2a:	f00b f997 	bl	25f5c <z_log_minimal_printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1ac2e:	4640      	mov	r0, r8
   1ac30:	f7f8 ffca 	bl	13bc8 <bt_addr_le_str>
   1ac34:	2145      	movs	r1, #69	; 0x45
   1ac36:	4602      	mov	r2, r0
   1ac38:	484b      	ldr	r0, [pc, #300]	; (1ad68 <smp_ident_addr_info+0x174>)
   1ac3a:	f00b f98f 	bl	25f5c <z_log_minimal_printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1ac3e:	200a      	movs	r0, #10
}
   1ac40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1ac44:	2207      	movs	r2, #7
   1ac46:	4639      	mov	r1, r7
   1ac48:	4640      	mov	r0, r8
   1ac4a:	f00b fff0 	bl	26c2e <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1ac4e:	b168      	cbz	r0, 1ac6c <smp_ident_addr_info+0x78>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1ac50:	7a28      	ldrb	r0, [r5, #8]
   1ac52:	4639      	mov	r1, r7
   1ac54:	f000 fbd8 	bl	1b408 <bt_keys_find_addr>
		if (keys) {
   1ac58:	4606      	mov	r6, r0
   1ac5a:	b138      	cbz	r0, 1ac6c <smp_ident_addr_info+0x78>
			if (!update_keys_check(smp, keys)) {
   1ac5c:	4601      	mov	r1, r0
   1ac5e:	4620      	mov	r0, r4
   1ac60:	f00d fbda 	bl	28418 <update_keys_check>
   1ac64:	b1b8      	cbz	r0, 1ac96 <smp_ident_addr_info+0xa2>
			bt_keys_clear(keys);
   1ac66:	4630      	mov	r0, r6
   1ac68:	f000 fc26 	bl	1b4b8 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ac6c:	210d      	movs	r1, #13
   1ac6e:	1d20      	adds	r0, r4, #4
   1ac70:	f00d fbc9 	bl	28406 <atomic_test_bit>
   1ac74:	2800      	cmp	r0, #0
   1ac76:	d064      	beq.n	1ad42 <smp_ident_addr_info+0x14e>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1ac78:	7a29      	ldrb	r1, [r5, #8]
   1ac7a:	4642      	mov	r2, r8
   1ac7c:	2002      	movs	r0, #2
   1ac7e:	f000 fbf9 	bl	1b474 <bt_keys_get_type>
		if (!keys) {
   1ac82:	4606      	mov	r6, r0
   1ac84:	b948      	cbnz	r0, 1ac9a <smp_ident_addr_info+0xa6>
			BT_ERR("Unable to get keys for %s",
   1ac86:	4640      	mov	r0, r8
   1ac88:	f7f8 ff9e 	bl	13bc8 <bt_addr_le_str>
   1ac8c:	2145      	movs	r1, #69	; 0x45
   1ac8e:	4602      	mov	r2, r0
   1ac90:	4836      	ldr	r0, [pc, #216]	; (1ad6c <smp_ident_addr_info+0x178>)
   1ac92:	f00b f963 	bl	25f5c <z_log_minimal_printk>
				return BT_SMP_ERR_UNSPECIFIED;
   1ac96:	2008      	movs	r0, #8
   1ac98:	e7d2      	b.n	1ac40 <smp_ident_addr_info+0x4c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1ac9a:	78eb      	ldrb	r3, [r5, #3]
   1ac9c:	bba3      	cbnz	r3, 1ad08 <smp_ident_addr_info+0x114>
			dst = &conn->le.resp_addr;
   1ac9e:	f105 019e 	add.w	r1, r5, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1aca2:	780b      	ldrb	r3, [r1, #0]
   1aca4:	2b01      	cmp	r3, #1
   1aca6:	d120      	bne.n	1acea <smp_ident_addr_info+0xf6>
		if (bt_addr_le_is_rpa(dst)) {
   1aca8:	798b      	ldrb	r3, [r1, #6]
   1acaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1acae:	2b40      	cmp	r3, #64	; 0x40
   1acb0:	d11b      	bne.n	1acea <smp_ident_addr_info+0xf6>
	memcpy(dst, src, sizeof(*dst));
   1acb2:	2206      	movs	r2, #6
   1acb4:	3101      	adds	r1, #1
   1acb6:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1acba:	f00b ffdf 	bl	26c7c <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1acbe:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   1acc2:	b193      	cbz	r3, 1acea <smp_ident_addr_info+0xf6>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1acc4:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   1acc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1accc:	2bc0      	cmp	r3, #192	; 0xc0
   1acce:	d00c      	beq.n	1acea <smp_ident_addr_info+0xf6>
	memcpy(dst, src, sizeof(*dst));
   1acd0:	2207      	movs	r2, #7
   1acd2:	4639      	mov	r1, r7
   1acd4:	1c70      	adds	r0, r6, #1
   1acd6:	f00b ffd1 	bl	26c7c <memcpy>
   1acda:	2207      	movs	r2, #7
   1acdc:	4639      	mov	r1, r7
   1acde:	4640      	mov	r0, r8
   1ace0:	f00b ffcc 	bl	26c7c <memcpy>
				bt_conn_identity_resolved(conn);
   1ace4:	4628      	mov	r0, r5
   1ace6:	f7fb fedb 	bl	16aa0 <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1acea:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1acee:	079a      	lsls	r2, r3, #30
   1acf0:	d50d      	bpl.n	1ad0e <smp_ident_addr_info+0x11a>
   1acf2:	491f      	ldr	r1, [pc, #124]	; (1ad70 <smp_ident_addr_info+0x17c>)
   1acf4:	481f      	ldr	r0, [pc, #124]	; (1ad74 <smp_ident_addr_info+0x180>)
   1acf6:	f640 727d 	movw	r2, #3965	; 0xf7d
   1acfa:	f00b f921 	bl	25f40 <assert_print>
   1acfe:	f640 717d 	movw	r1, #3965	; 0xf7d
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1ad02:	481b      	ldr	r0, [pc, #108]	; (1ad70 <smp_ident_addr_info+0x17c>)
   1ad04:	f00b f915 	bl	25f32 <assert_post_action>
			dst = &conn->le.init_addr;
   1ad08:	f105 0197 	add.w	r1, r5, #151	; 0x97
   1ad0c:	e7c9      	b.n	1aca2 <smp_ident_addr_info+0xae>
	conflict = bt_id_find_conflict(new_bond);
   1ad0e:	4630      	mov	r0, r6
   1ad10:	f7fa fb30 	bl	15374 <bt_id_find_conflict>
	if (conflict) {
   1ad14:	b128      	cbz	r0, 1ad22 <smp_ident_addr_info+0x12e>
		BT_WARN("Refusing new pairing. The old bond must be unpaired first.");
   1ad16:	4818      	ldr	r0, [pc, #96]	; (1ad78 <smp_ident_addr_info+0x184>)
   1ad18:	2157      	movs	r1, #87	; 0x57
   1ad1a:	f00b f91f 	bl	25f5c <z_log_minimal_printk>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1ad1e:	2003      	movs	r0, #3
   1ad20:	e78e      	b.n	1ac40 <smp_ident_addr_info+0x4c>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1ad22:	4630      	mov	r0, r6
   1ad24:	f7fa fb26 	bl	15374 <bt_id_find_conflict>
   1ad28:	b140      	cbz	r0, 1ad3c <smp_ident_addr_info+0x148>
   1ad2a:	4911      	ldr	r1, [pc, #68]	; (1ad70 <smp_ident_addr_info+0x17c>)
   1ad2c:	4811      	ldr	r0, [pc, #68]	; (1ad74 <smp_ident_addr_info+0x180>)
   1ad2e:	f640 7299 	movw	r2, #3993	; 0xf99
   1ad32:	f00b f905 	bl	25f40 <assert_print>
   1ad36:	f640 7199 	movw	r1, #3993	; 0xf99
   1ad3a:	e7e2      	b.n	1ad02 <smp_ident_addr_info+0x10e>
	bt_id_add(new_bond);
   1ad3c:	4630      	mov	r0, r6
   1ad3e:	f7fa fb29 	bl	15394 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ad42:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1ad46:	075b      	lsls	r3, r3, #29
   1ad48:	d503      	bpl.n	1ad52 <smp_ident_addr_info+0x15e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ad4a:	210a      	movs	r1, #10
   1ad4c:	4620      	mov	r0, r4
   1ad4e:	f00d fc4f 	bl	285f0 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1ad52:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1ad56:	b109      	cbz	r1, 1ad5c <smp_ident_addr_info+0x168>
	return 0;
   1ad58:	2000      	movs	r0, #0
   1ad5a:	e771      	b.n	1ac40 <smp_ident_addr_info+0x4c>
		smp_pairing_complete(smp, 0);
   1ad5c:	4620      	mov	r0, r4
   1ad5e:	f7ff fde9 	bl	1a934 <smp_pairing_complete>
   1ad62:	e7f9      	b.n	1ad58 <smp_ident_addr_info+0x164>
   1ad64:	0002ca68 	.word	0x0002ca68
   1ad68:	0002ca81 	.word	0x0002ca81
   1ad6c:	0002c7d6 	.word	0x0002c7d6
   1ad70:	0002ca8e 	.word	0x0002ca8e
   1ad74:	0002a7df 	.word	0x0002a7df
   1ad78:	0002cabd 	.word	0x0002cabd

0001ad7c <smp_central_ident>:
{
   1ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad7e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ad80:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1ad84:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ad86:	3004      	adds	r0, #4
   1ad88:	210d      	movs	r1, #13
   1ad8a:	f00d fb3c 	bl	28406 <atomic_test_bit>
   1ad8e:	b1f0      	cbz	r0, 1adce <smp_central_ident+0x52>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ad90:	f105 0790 	add.w	r7, r5, #144	; 0x90
   1ad94:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1ad96:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ad98:	463a      	mov	r2, r7
   1ad9a:	2004      	movs	r0, #4
   1ad9c:	f000 fb6a 	bl	1b474 <bt_keys_get_type>
		if (!keys) {
   1ada0:	4605      	mov	r5, r0
   1ada2:	b948      	cbnz	r0, 1adb8 <smp_central_ident+0x3c>
			BT_ERR("Unable to get keys for %s",
   1ada4:	4638      	mov	r0, r7
   1ada6:	f7f8 ff0f 	bl	13bc8 <bt_addr_le_str>
   1adaa:	2145      	movs	r1, #69	; 0x45
   1adac:	4602      	mov	r2, r0
   1adae:	4814      	ldr	r0, [pc, #80]	; (1ae00 <smp_central_ident+0x84>)
   1adb0:	f00b f8d4 	bl	25f5c <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1adb4:	2008      	movs	r0, #8
}
   1adb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1adb8:	2202      	movs	r2, #2
   1adba:	4631      	mov	r1, r6
   1adbc:	3018      	adds	r0, #24
   1adbe:	f00b ff5d 	bl	26c7c <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1adc2:	2208      	movs	r2, #8
   1adc4:	1cb1      	adds	r1, r6, #2
   1adc6:	f105 0010 	add.w	r0, r5, #16
   1adca:	f00b ff57 	bl	26c7c <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1adce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1add2:	f023 0201 	bic.w	r2, r3, #1
   1add6:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1adda:	079a      	lsls	r2, r3, #30
   1addc:	d508      	bpl.n	1adf0 <smp_central_ident+0x74>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1adde:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ade0:	4620      	mov	r0, r4
   1ade2:	f00d fc05 	bl	285f0 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1ade6:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1adea:	b129      	cbz	r1, 1adf8 <smp_central_ident+0x7c>
	return 0;
   1adec:	2000      	movs	r0, #0
   1adee:	e7e2      	b.n	1adb6 <smp_central_ident+0x3a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1adf0:	075b      	lsls	r3, r3, #29
   1adf2:	d5f8      	bpl.n	1ade6 <smp_central_ident+0x6a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1adf4:	210a      	movs	r1, #10
   1adf6:	e7f3      	b.n	1ade0 <smp_central_ident+0x64>
		smp_pairing_complete(smp, 0);
   1adf8:	4620      	mov	r0, r4
   1adfa:	f7ff fd9b 	bl	1a934 <smp_pairing_complete>
   1adfe:	e7f5      	b.n	1adec <smp_central_ident+0x70>
   1ae00:	0002c7d6 	.word	0x0002c7d6

0001ae04 <smp_pairing_failed>:
{
   1ae04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae08:	460e      	mov	r6, r1
   1ae0a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ae0c:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ae10:	f7fe fe3e 	bl	19a90 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1ae14:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1ae16:	2145      	movs	r1, #69	; 0x45
   1ae18:	7832      	ldrb	r2, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ae1a:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ae1c:	1d27      	adds	r7, r4, #4
	BT_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1ae1e:	480e      	ldr	r0, [pc, #56]	; (1ae58 <smp_pairing_failed+0x54>)
   1ae20:	f00b f89c 	bl	25f5c <z_log_minimal_printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ae24:	210a      	movs	r1, #10
   1ae26:	4638      	mov	r0, r7
   1ae28:	f00d fc72 	bl	28710 <atomic_test_and_clear_bit>
   1ae2c:	b138      	cbz	r0, 1ae3e <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ae2e:	b96d      	cbnz	r5, 1ae4c <smp_pairing_failed+0x48>
	smp_pairing_complete(smp, req->reason);
   1ae30:	4620      	mov	r0, r4
   1ae32:	7831      	ldrb	r1, [r6, #0]
   1ae34:	f7ff fd7e 	bl	1a934 <smp_pairing_complete>
}
   1ae38:	2000      	movs	r0, #0
   1ae3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1ae3e:	210b      	movs	r1, #11
   1ae40:	4638      	mov	r0, r7
   1ae42:	f00d fc65 	bl	28710 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ae46:	2800      	cmp	r0, #0
   1ae48:	d1f1      	bne.n	1ae2e <smp_pairing_failed+0x2a>
   1ae4a:	e7f1      	b.n	1ae30 <smp_pairing_failed+0x2c>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ae4c:	692b      	ldr	r3, [r5, #16]
   1ae4e:	2b00      	cmp	r3, #0
   1ae50:	d0ee      	beq.n	1ae30 <smp_pairing_failed+0x2c>
			smp_auth_cb->cancel(conn);
   1ae52:	4640      	mov	r0, r8
   1ae54:	4798      	blx	r3
   1ae56:	e7eb      	b.n	1ae30 <smp_pairing_failed+0x2c>
   1ae58:	0002cafd 	.word	0x0002cafd

0001ae5c <bt_smp_encrypt_change>:
{
   1ae5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1ae60:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ae62:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1ae66:	b088      	sub	sp, #32
   1ae68:	4604      	mov	r4, r0
   1ae6a:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ae6c:	4630      	mov	r0, r6
   1ae6e:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1ae70:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ae74:	f00d fc4c 	bl	28710 <atomic_test_and_clear_bit>
   1ae78:	2800      	cmp	r0, #0
   1ae7a:	f000 8085 	beq.w	1af88 <bt_smp_encrypt_change+0x12c>
	if (hci_status) {
   1ae7e:	b1d7      	cbz	r7, 1aeb6 <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ae80:	2103      	movs	r1, #3
   1ae82:	4630      	mov	r0, r6
   1ae84:	f00d fabf 	bl	28406 <atomic_test_bit>
   1ae88:	2800      	cmp	r0, #0
   1ae8a:	d07d      	beq.n	1af88 <bt_smp_encrypt_change+0x12c>
			uint8_t smp_err = smp_err_get(
   1ae8c:	4638      	mov	r0, r7
   1ae8e:	f7f9 fe23 	bl	14ad8 <bt_security_err_get>
	switch (auth_err) {
   1ae92:	3801      	subs	r0, #1
   1ae94:	b2c0      	uxtb	r0, r0
   1ae96:	2808      	cmp	r0, #8
   1ae98:	bf9a      	itte	ls
   1ae9a:	4b6a      	ldrls	r3, [pc, #424]	; (1b044 <bt_smp_encrypt_change+0x1e8>)
   1ae9c:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1ae9e:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1aea0:	2102      	movs	r1, #2
   1aea2:	4630      	mov	r0, r6
   1aea4:	f00d fba4 	bl	285f0 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1aea8:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1aeaa:	4628      	mov	r0, r5
}
   1aeac:	b008      	add	sp, #32
   1aeae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   1aeb2:	f7ff bd3f 	b.w	1a934 <smp_pairing_complete>
	if (!conn->encrypt) {
   1aeb6:	f898 300b 	ldrb.w	r3, [r8, #11]
   1aeba:	2b00      	cmp	r3, #0
   1aebc:	d064      	beq.n	1af88 <bt_smp_encrypt_change+0x12c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1aebe:	2103      	movs	r1, #3
   1aec0:	4630      	mov	r0, r6
   1aec2:	f00d faa0 	bl	28406 <atomic_test_bit>
   1aec6:	b928      	cbnz	r0, 1aed4 <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   1aec8:	4628      	mov	r0, r5
}
   1aeca:	b008      	add	sp, #32
   1aecc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   1aed0:	f00d bc34 	b.w	2873c <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1aed4:	2105      	movs	r1, #5
   1aed6:	4630      	mov	r0, r6
   1aed8:	f00d fa95 	bl	28406 <atomic_test_bit>
   1aedc:	b1b8      	cbz	r0, 1af0e <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1aede:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1aee2:	071b      	lsls	r3, r3, #28
   1aee4:	d507      	bpl.n	1aef6 <bt_smp_encrypt_change+0x9a>
   1aee6:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1aeea:	071f      	lsls	r7, r3, #28
   1aeec:	d503      	bpl.n	1aef6 <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1aeee:	2111      	movs	r1, #17
   1aef0:	4630      	mov	r0, r6
   1aef2:	f00d fb7d 	bl	285f0 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1aef6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1aefa:	f023 0308 	bic.w	r3, r3, #8
   1aefe:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1af02:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1af06:	f023 0308 	bic.w	r3, r3, #8
   1af0a:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1af0e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1af12:	07d8      	lsls	r0, r3, #31
   1af14:	d517      	bpl.n	1af46 <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1af16:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1af18:	4628      	mov	r0, r5
   1af1a:	f00d fb69 	bl	285f0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1af1e:	2102      	movs	r1, #2
   1af20:	4630      	mov	r0, r6
   1af22:	f00d fb65 	bl	285f0 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1af26:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1af28:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   1af2c:	b99a      	cbnz	r2, 1af56 <bt_smp_encrypt_change+0xfa>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1af2e:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1af32:	f7f8 fe49 	bl	13bc8 <bt_addr_le_str>
   1af36:	4602      	mov	r2, r0
   1af38:	4843      	ldr	r0, [pc, #268]	; (1b048 <bt_smp_encrypt_change+0x1ec>)
   1af3a:	2145      	movs	r1, #69	; 0x45
}
   1af3c:	b008      	add	sp, #32
   1af3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1af42:	f00b b80b 	b.w	25f5c <z_log_minimal_printk>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1af46:	0799      	lsls	r1, r3, #30
   1af48:	d501      	bpl.n	1af4e <bt_smp_encrypt_change+0xf2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1af4a:	2108      	movs	r1, #8
   1af4c:	e7e4      	b.n	1af18 <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1af4e:	075a      	lsls	r2, r3, #29
   1af50:	d5e5      	bpl.n	1af1e <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1af52:	210a      	movs	r1, #10
   1af54:	e7e0      	b.n	1af18 <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1af56:	2105      	movs	r1, #5
   1af58:	f00d fa55 	bl	28406 <atomic_test_bit>
   1af5c:	b980      	cbnz	r0, 1af80 <bt_smp_encrypt_change+0x124>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1af5e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1af62:	07db      	lsls	r3, r3, #31
   1af64:	d50c      	bpl.n	1af80 <bt_smp_encrypt_change+0x124>
	struct bt_keys *keys = conn->le.keys;
   1af66:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1af68:	211a      	movs	r1, #26
   1af6a:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1af6c:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1af70:	f003 fabc 	bl	1e4ec <bt_rand>
   1af74:	4681      	mov	r9, r0
   1af76:	b150      	cbz	r0, 1af8e <bt_smp_encrypt_change+0x132>
			BT_ERR("Unable to get random bytes");
   1af78:	4834      	ldr	r0, [pc, #208]	; (1b04c <bt_smp_encrypt_change+0x1f0>)
   1af7a:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1af7c:	f00a ffee 	bl	25f5c <z_log_minimal_printk>
	if (!smp->local_dist && !smp->remote_dist) {
   1af80:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1af84:	2900      	cmp	r1, #0
   1af86:	d090      	beq.n	1aeaa <bt_smp_encrypt_change+0x4e>
}
   1af88:	b008      	add	sp, #32
   1af8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1af8e:	2106      	movs	r1, #6
   1af90:	4628      	mov	r0, r5
   1af92:	f00d fb41 	bl	28618 <smp_create_pdu.constprop.0>
		if (!buf) {
   1af96:	4680      	mov	r8, r0
   1af98:	b910      	cbnz	r0, 1afa0 <bt_smp_encrypt_change+0x144>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1af9a:	482d      	ldr	r0, [pc, #180]	; (1b050 <bt_smp_encrypt_change+0x1f4>)
   1af9c:	2145      	movs	r1, #69	; 0x45
   1af9e:	e7ed      	b.n	1af7c <bt_smp_encrypt_change+0x120>
	return net_buf_simple_add(&buf->b, len);
   1afa0:	2110      	movs	r1, #16
   1afa2:	3008      	adds	r0, #8
   1afa4:	f000 feb6 	bl	1bd14 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1afa8:	7b3a      	ldrb	r2, [r7, #12]
   1afaa:	a901      	add	r1, sp, #4
   1afac:	4682      	mov	sl, r0
   1afae:	f00b fe65 	bl	26c7c <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1afb2:	7b38      	ldrb	r0, [r7, #12]
   1afb4:	280f      	cmp	r0, #15
   1afb6:	d805      	bhi.n	1afc4 <bt_smp_encrypt_change+0x168>
			(void)memset(info->ltk + keys->enc_size, 0,
   1afb8:	f1c0 0210 	rsb	r2, r0, #16
   1afbc:	4649      	mov	r1, r9
   1afbe:	4450      	add	r0, sl
   1afc0:	f00b fe67 	bl	26c92 <memset>
		smp_send(smp, buf, NULL, NULL);
   1afc4:	4641      	mov	r1, r8
   1afc6:	2200      	movs	r2, #0
   1afc8:	4628      	mov	r0, r5
   1afca:	f00d fa75 	bl	284b8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1afce:	2107      	movs	r1, #7
   1afd0:	4628      	mov	r0, r5
   1afd2:	f00d fb21 	bl	28618 <smp_create_pdu.constprop.0>
		if (!buf) {
   1afd6:	4680      	mov	r8, r0
   1afd8:	b910      	cbnz	r0, 1afe0 <bt_smp_encrypt_change+0x184>
			BT_ERR("Unable to allocate Central Ident buffer");
   1afda:	481e      	ldr	r0, [pc, #120]	; (1b054 <bt_smp_encrypt_change+0x1f8>)
   1afdc:	2145      	movs	r1, #69	; 0x45
   1afde:	e7cd      	b.n	1af7c <bt_smp_encrypt_change+0x120>
   1afe0:	210a      	movs	r1, #10
   1afe2:	3008      	adds	r0, #8
   1afe4:	f000 fe96 	bl	1bd14 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1afe8:	2208      	movs	r2, #8
   1afea:	4681      	mov	r9, r0
   1afec:	a905      	add	r1, sp, #20
   1afee:	3002      	adds	r0, #2
   1aff0:	f00b fe44 	bl	26c7c <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1aff4:	2202      	movs	r2, #2
   1aff6:	a907      	add	r1, sp, #28
   1aff8:	4648      	mov	r0, r9
   1affa:	f00b fe3f 	bl	26c7c <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1affe:	4641      	mov	r1, r8
   1b000:	4628      	mov	r0, r5
   1b002:	4a15      	ldr	r2, [pc, #84]	; (1b058 <bt_smp_encrypt_change+0x1fc>)
   1b004:	f00d fa58 	bl	284b8 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b008:	210d      	movs	r1, #13
   1b00a:	4630      	mov	r0, r6
   1b00c:	f00d f9fb 	bl	28406 <atomic_test_bit>
   1b010:	2800      	cmp	r0, #0
   1b012:	d0b5      	beq.n	1af80 <bt_smp_encrypt_change+0x124>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1b014:	4638      	mov	r0, r7
   1b016:	2101      	movs	r1, #1
   1b018:	f000 fa16 	bl	1b448 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1b01c:	a901      	add	r1, sp, #4
   1b01e:	2210      	movs	r2, #16
   1b020:	f107 004a 	add.w	r0, r7, #74	; 0x4a
   1b024:	f00b fe2a 	bl	26c7c <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1b028:	a905      	add	r1, sp, #20
   1b02a:	2208      	movs	r2, #8
   1b02c:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1b030:	f00b fe24 	bl	26c7c <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1b034:	2202      	movs	r2, #2
   1b036:	a907      	add	r1, sp, #28
   1b038:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1b03c:	f00b fe1e 	bl	26c7c <memcpy>
   1b040:	e79e      	b.n	1af80 <bt_smp_encrypt_change+0x124>
   1b042:	bf00      	nop
   1b044:	0002cbd0 	.word	0x0002cbd0
   1b048:	0002cb24 	.word	0x0002cb24
   1b04c:	0002cb3e 	.word	0x0002cb3e
   1b050:	0002cb5e 	.word	0x0002cb5e
   1b054:	0002cb8a 	.word	0x0002cb8a
   1b058:	0001b085 	.word	0x0001b085

0001b05c <smp_timeout>:
{
   1b05c:	b510      	push	{r4, lr}
	BT_ERR("SMP Timeout");
   1b05e:	2145      	movs	r1, #69	; 0x45
{
   1b060:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1b062:	4807      	ldr	r0, [pc, #28]	; (1b080 <smp_timeout+0x24>)
   1b064:	f00a ff7a 	bl	25f5c <z_log_minimal_printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1b068:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1b06c:	2108      	movs	r1, #8
   1b06e:	f7ff fc61 	bl	1a934 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1b072:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
   1b076:	2104      	movs	r1, #4
}
   1b078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1b07c:	f00d bab8 	b.w	285f0 <atomic_set_bit>
   1b080:	0002cbb7 	.word	0x0002cbb7

0001b084 <smp_ident_sent>:
{
   1b084:	b508      	push	{r3, lr}
	if (!err) {
   1b086:	b9fa      	cbnz	r2, 1b0c8 <smp_ident_sent+0x44>
	if (conn->type == BT_CONN_TYPE_LE) {
   1b088:	7883      	ldrb	r3, [r0, #2]
   1b08a:	2b01      	cmp	r3, #1
   1b08c:	d11c      	bne.n	1b0c8 <smp_ident_sent+0x44>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1b08e:	2106      	movs	r1, #6
   1b090:	f00c facf 	bl	27632 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1b094:	b950      	cbnz	r0, 1b0ac <smp_ident_sent+0x28>
   1b096:	490d      	ldr	r1, [pc, #52]	; (1b0cc <smp_ident_sent+0x48>)
   1b098:	480d      	ldr	r0, [pc, #52]	; (1b0d0 <smp_ident_sent+0x4c>)
   1b09a:	f240 3245 	movw	r2, #837	; 0x345
   1b09e:	f00a ff4f 	bl	25f40 <assert_print>
   1b0a2:	480a      	ldr	r0, [pc, #40]	; (1b0cc <smp_ident_sent+0x48>)
   1b0a4:	f240 3145 	movw	r1, #837	; 0x345
   1b0a8:	f00a ff43 	bl	25f32 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1b0ac:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1b0b0:	f023 0301 	bic.w	r3, r3, #1
   1b0b4:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1b0b8:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1b0bc:	b921      	cbnz	r1, 1b0c8 <smp_ident_sent+0x44>
}
   1b0be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1b0c2:	38ec      	subs	r0, #236	; 0xec
   1b0c4:	f7ff bc36 	b.w	1a934 <smp_pairing_complete>
}
   1b0c8:	bd08      	pop	{r3, pc}
   1b0ca:	bf00      	nop
   1b0cc:	0002ca8e 	.word	0x0002ca8e
   1b0d0:	0002a7df 	.word	0x0002a7df

0001b0d4 <bt_smp_update_keys>:
{
   1b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0d6:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1b0d8:	f7fe fd3c 	bl	19b54 <smp_chan_get>
	if (!smp) {
   1b0dc:	4605      	mov	r5, r0
   1b0de:	2800      	cmp	r0, #0
   1b0e0:	f000 8084 	beq.w	1b1ec <bt_smp_update_keys+0x118>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b0e4:	1d06      	adds	r6, r0, #4
   1b0e6:	2103      	movs	r1, #3
   1b0e8:	4630      	mov	r0, r6
   1b0ea:	f00d f98c 	bl	28406 <atomic_test_bit>
   1b0ee:	2800      	cmp	r0, #0
   1b0f0:	d07c      	beq.n	1b1ec <bt_smp_update_keys+0x118>
	if (conn->le.keys) {
   1b0f2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b0f6:	b108      	cbz	r0, 1b0fc <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1b0f8:	f000 f9de 	bl	1b4b8 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b0fc:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1b100:	7a20      	ldrb	r0, [r4, #8]
   1b102:	4639      	mov	r1, r7
   1b104:	f000 f8c8 	bl	1b298 <bt_keys_get_addr>
   1b108:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1b10c:	b968      	cbnz	r0, 1b12a <bt_smp_update_keys+0x56>
		BT_ERR("Unable to get keys for %s",
   1b10e:	4638      	mov	r0, r7
   1b110:	f7f8 fd5a 	bl	13bc8 <bt_addr_le_str>
   1b114:	2145      	movs	r1, #69	; 0x45
   1b116:	4602      	mov	r2, r0
   1b118:	4835      	ldr	r0, [pc, #212]	; (1b1f0 <bt_smp_update_keys+0x11c>)
   1b11a:	f00a ff1f 	bl	25f5c <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1b11e:	4628      	mov	r0, r5
   1b120:	2108      	movs	r1, #8
}
   1b122:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1b126:	f7ff bc89 	b.w	1aa3c <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1b12a:	210e      	movs	r1, #14
   1b12c:	4630      	mov	r0, r6
   1b12e:	f00d f96a 	bl	28406 <atomic_test_bit>
   1b132:	b128      	cbz	r0, 1b140 <bt_smp_update_keys+0x6c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1b134:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1b138:	7b53      	ldrb	r3, [r2, #13]
   1b13a:	f043 0302 	orr.w	r3, r3, #2
   1b13e:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1b140:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1b142:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	switch (smp->method) {
   1b146:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1b148:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1b14a:	d83c      	bhi.n	1b1c6 <bt_smp_update_keys+0xf2>
   1b14c:	2a00      	cmp	r2, #0
   1b14e:	d041      	beq.n	1b1d4 <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1b150:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1b154:	7b53      	ldrb	r3, [r2, #13]
   1b156:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1b15a:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1b15c:	7d2b      	ldrb	r3, [r5, #20]
   1b15e:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1b160:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return MIN(req->max_key_size, rsp->max_key_size);
   1b164:	428b      	cmp	r3, r1
   1b166:	bf28      	it	cs
   1b168:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1b16a:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b16c:	2105      	movs	r1, #5
   1b16e:	4630      	mov	r0, r6
   1b170:	f00d f949 	bl	28406 <atomic_test_bit>
   1b174:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1b178:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b17a:	b3a0      	cbz	r0, 1b1e6 <bt_smp_update_keys+0x112>
		conn->le.keys->flags |= BT_KEYS_SC;
   1b17c:	f042 0210 	orr.w	r2, r2, #16
   1b180:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b182:	210d      	movs	r1, #13
   1b184:	4630      	mov	r0, r6
   1b186:	f00d f93e 	bl	28406 <atomic_test_bit>
   1b18a:	b378      	cbz	r0, 1b1ec <bt_smp_update_keys+0x118>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1b18c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b190:	2120      	movs	r1, #32
   1b192:	f000 f959 	bl	1b448 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1b196:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b19a:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1b19e:	2210      	movs	r2, #16
   1b1a0:	301a      	adds	r0, #26
   1b1a2:	f00b fd6b 	bl	26c7c <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1b1a6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b1aa:	2208      	movs	r2, #8
   1b1ac:	2100      	movs	r1, #0
   1b1ae:	3010      	adds	r0, #16
   1b1b0:	f00b fd6f 	bl	26c92 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1b1b4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b1b8:	2202      	movs	r2, #2
}
   1b1ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1b1be:	2100      	movs	r1, #0
   1b1c0:	3018      	adds	r0, #24
   1b1c2:	f00b bd66 	b.w	26c92 <memset>
	switch (smp->method) {
   1b1c6:	3a05      	subs	r2, #5
   1b1c8:	2a01      	cmp	r2, #1
   1b1ca:	d803      	bhi.n	1b1d4 <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1b1cc:	f043 0320 	orr.w	r3, r3, #32
   1b1d0:	734b      	strb	r3, [r1, #13]
   1b1d2:	e7bd      	b.n	1b150 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1b1d4:	f023 0320 	bic.w	r3, r3, #32
   1b1d8:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1b1da:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1b1de:	7b53      	ldrb	r3, [r2, #13]
   1b1e0:	f023 0301 	bic.w	r3, r3, #1
   1b1e4:	e7b9      	b.n	1b15a <bt_smp_update_keys+0x86>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1b1e6:	f022 0210 	bic.w	r2, r2, #16
   1b1ea:	735a      	strb	r2, [r3, #13]
}
   1b1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b1ee:	bf00      	nop
   1b1f0:	0002c7d6 	.word	0x0002c7d6

0001b1f4 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1b1f4:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1b1f6:	4b07      	ldr	r3, [pc, #28]	; (1b214 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1b1f8:	4807      	ldr	r0, [pc, #28]	; (1b218 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1b1fa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1b1fe:	f003 0306 	and.w	r3, r3, #6
   1b202:	1f9a      	subs	r2, r3, #6
   1b204:	4253      	negs	r3, r2
   1b206:	4153      	adcs	r3, r2
   1b208:	4a04      	ldr	r2, [pc, #16]	; (1b21c <bt_smp_init+0x28>)
   1b20a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1b20c:	f7fa fe66 	bl	15edc <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1b210:	2000      	movs	r0, #0
   1b212:	bd08      	pop	{r3, pc}
   1b214:	20000380 	.word	0x20000380
   1b218:	20000660 	.word	0x20000660
   1b21c:	20003685 	.word	0x20003685

0001b220 <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   1b220:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1b222:	b950      	cbnz	r0, 1b23a <id_add+0x1a>
   1b224:	4907      	ldr	r1, [pc, #28]	; (1b244 <id_add+0x24>)
   1b226:	4808      	ldr	r0, [pc, #32]	; (1b248 <id_add+0x28>)
   1b228:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
   1b22c:	f00a fe88 	bl	25f40 <assert_print>
   1b230:	4804      	ldr	r0, [pc, #16]	; (1b244 <id_add+0x24>)
   1b232:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   1b236:	f00a fe7c 	bl	25f32 <assert_post_action>

	bt_id_add(keys);
}
   1b23a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_id_add(keys);
   1b23e:	f7fa b8a9 	b.w	15394 <bt_id_add>
   1b242:	bf00      	nop
   1b244:	0002cc31 	.word	0x0002cc31
   1b248:	0002a7df 	.word	0x0002a7df

0001b24c <bt_keys_get_addr.part.0>:
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1b24c:	b570      	push	{r4, r5, r6, lr}
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1b24e:	4c0f      	ldr	r4, [pc, #60]	; (1b28c <bt_keys_get_addr.part.0+0x40>)
   1b250:	f814 3b01 	ldrb.w	r3, [r4], #1
   1b254:	4283      	cmp	r3, r0
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1b256:	4605      	mov	r5, r0
   1b258:	460e      	mov	r6, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1b25a:	d007      	beq.n	1b26c <bt_keys_get_addr.part.0+0x20>
	return memcmp(a, b, sizeof(*a));
   1b25c:	490c      	ldr	r1, [pc, #48]	; (1b290 <bt_keys_get_addr.part.0+0x44>)
   1b25e:	480d      	ldr	r0, [pc, #52]	; (1b294 <bt_keys_get_addr.part.0+0x48>)
   1b260:	2207      	movs	r2, #7
   1b262:	f00b fce4 	bl	26c2e <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1b266:	b148      	cbz	r0, 1b27c <bt_keys_get_addr.part.0+0x30>
	return NULL;
   1b268:	2000      	movs	r0, #0
}
   1b26a:	bd70      	pop	{r4, r5, r6, pc}
   1b26c:	2207      	movs	r2, #7
   1b26e:	4620      	mov	r0, r4
   1b270:	f00b fcdd 	bl	26c2e <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1b274:	2800      	cmp	r0, #0
   1b276:	d1f1      	bne.n	1b25c <bt_keys_get_addr.part.0+0x10>
		keys = &key_pool[i];
   1b278:	4804      	ldr	r0, [pc, #16]	; (1b28c <bt_keys_get_addr.part.0+0x40>)
   1b27a:	e7f6      	b.n	1b26a <bt_keys_get_addr.part.0+0x1e>
		keys->id = id;
   1b27c:	f804 5c01 	strb.w	r5, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   1b280:	2207      	movs	r2, #7
   1b282:	4631      	mov	r1, r6
   1b284:	4803      	ldr	r0, [pc, #12]	; (1b294 <bt_keys_get_addr.part.0+0x48>)
   1b286:	f00b fcf9 	bl	26c7c <memcpy>
		return keys;
   1b28a:	e7f5      	b.n	1b278 <bt_keys_get_addr.part.0+0x2c>
   1b28c:	20002768 	.word	0x20002768
   1b290:	0002b150 	.word	0x0002b150
   1b294:	20002769 	.word	0x20002769

0001b298 <bt_keys_get_addr>:
{
   1b298:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1b29a:	b941      	cbnz	r1, 1b2ae <bt_keys_get_addr+0x16>
   1b29c:	4906      	ldr	r1, [pc, #24]	; (1b2b8 <bt_keys_get_addr+0x20>)
   1b29e:	4807      	ldr	r0, [pc, #28]	; (1b2bc <bt_keys_get_addr+0x24>)
   1b2a0:	2258      	movs	r2, #88	; 0x58
   1b2a2:	f00a fe4d 	bl	25f40 <assert_print>
   1b2a6:	4804      	ldr	r0, [pc, #16]	; (1b2b8 <bt_keys_get_addr+0x20>)
   1b2a8:	2158      	movs	r1, #88	; 0x58
   1b2aa:	f00a fe42 	bl	25f32 <assert_post_action>
}
   1b2ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b2b2:	f7ff bfcb 	b.w	1b24c <bt_keys_get_addr.part.0>
   1b2b6:	bf00      	nop
   1b2b8:	0002cc31 	.word	0x0002cc31
   1b2bc:	0002a7df 	.word	0x0002a7df

0001b2c0 <bt_keys_foreach_type>:
{
   1b2c0:	460b      	mov	r3, r1
   1b2c2:	b510      	push	{r4, lr}
   1b2c4:	4611      	mov	r1, r2
   1b2c6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(func != NULL);
   1b2c8:	b95b      	cbnz	r3, 1b2e2 <bt_keys_foreach_type+0x22>
   1b2ca:	4908      	ldr	r1, [pc, #32]	; (1b2ec <bt_keys_foreach_type+0x2c>)
   1b2cc:	4808      	ldr	r0, [pc, #32]	; (1b2f0 <bt_keys_foreach_type+0x30>)
   1b2ce:	22b2      	movs	r2, #178	; 0xb2
   1b2d0:	f00a fe36 	bl	25f40 <assert_print>
   1b2d4:	4805      	ldr	r0, [pc, #20]	; (1b2ec <bt_keys_foreach_type+0x2c>)
   1b2d6:	21b2      	movs	r1, #178	; 0xb2
   1b2d8:	f00a fe2b 	bl	25f32 <assert_post_action>
}
   1b2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   1b2e0:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   1b2e2:	4804      	ldr	r0, [pc, #16]	; (1b2f4 <bt_keys_foreach_type+0x34>)
   1b2e4:	89c2      	ldrh	r2, [r0, #14]
   1b2e6:	4222      	tst	r2, r4
   1b2e8:	d1f8      	bne.n	1b2dc <bt_keys_foreach_type+0x1c>
}
   1b2ea:	bd10      	pop	{r4, pc}
   1b2ec:	0002cc31 	.word	0x0002cc31
   1b2f0:	0002a7df 	.word	0x0002a7df
   1b2f4:	20002768 	.word	0x20002768

0001b2f8 <keys_commit>:

static int keys_commit(void)
{
   1b2f8:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1b2fa:	4903      	ldr	r1, [pc, #12]	; (1b308 <keys_commit+0x10>)
   1b2fc:	2200      	movs	r2, #0
   1b2fe:	2002      	movs	r0, #2
   1b300:	f7ff ffde 	bl	1b2c0 <bt_keys_foreach_type>
	}

	return 0;
}
   1b304:	2000      	movs	r0, #0
   1b306:	bd08      	pop	{r3, pc}
   1b308:	0001b221 	.word	0x0001b221

0001b30c <bt_keys_find>:
{
   1b30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b30e:	4605      	mov	r5, r0
   1b310:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(addr != NULL);
   1b312:	4614      	mov	r4, r2
   1b314:	b9a2      	cbnz	r2, 1b340 <bt_keys_find+0x34>
   1b316:	490f      	ldr	r1, [pc, #60]	; (1b354 <bt_keys_find+0x48>)
   1b318:	480f      	ldr	r0, [pc, #60]	; (1b358 <bt_keys_find+0x4c>)
   1b31a:	22bf      	movs	r2, #191	; 0xbf
   1b31c:	f00a fe10 	bl	25f40 <assert_print>
   1b320:	480c      	ldr	r0, [pc, #48]	; (1b354 <bt_keys_find+0x48>)
   1b322:	21bf      	movs	r1, #191	; 0xbf
   1b324:	f00a fe05 	bl	25f32 <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1b328:	b18a      	cbz	r2, 1b34e <bt_keys_find+0x42>
   1b32a:	428e      	cmp	r6, r1
   1b32c:	d10f      	bne.n	1b34e <bt_keys_find+0x42>
	return memcmp(a, b, sizeof(*a));
   1b32e:	480b      	ldr	r0, [pc, #44]	; (1b35c <bt_keys_find+0x50>)
   1b330:	2207      	movs	r2, #7
   1b332:	4621      	mov	r1, r4
   1b334:	f00b fc7b 	bl	26c2e <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b338:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1b33a:	b918      	cbnz	r0, 1b344 <bt_keys_find+0x38>
			return &key_pool[i];
   1b33c:	4808      	ldr	r0, [pc, #32]	; (1b360 <bt_keys_find+0x54>)
   1b33e:	e007      	b.n	1b350 <bt_keys_find+0x44>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1b340:	4f07      	ldr	r7, [pc, #28]	; (1b360 <bt_keys_find+0x54>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b342:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1b344:	89fa      	ldrh	r2, [r7, #14]
   1b346:	7839      	ldrb	r1, [r7, #0]
   1b348:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b34a:	2b00      	cmp	r3, #0
   1b34c:	d0ec      	beq.n	1b328 <bt_keys_find+0x1c>
	return NULL;
   1b34e:	2000      	movs	r0, #0
}
   1b350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b352:	bf00      	nop
   1b354:	0002cc31 	.word	0x0002cc31
   1b358:	0002a7df 	.word	0x0002a7df
   1b35c:	20002769 	.word	0x20002769
   1b360:	20002768 	.word	0x20002768

0001b364 <bt_keys_find_irk>:
{
   1b364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b366:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(addr != NULL);
   1b368:	460c      	mov	r4, r1
   1b36a:	b941      	cbnz	r1, 1b37e <bt_keys_find_irk+0x1a>
   1b36c:	4921      	ldr	r1, [pc, #132]	; (1b3f4 <bt_keys_find_irk+0x90>)
   1b36e:	4822      	ldr	r0, [pc, #136]	; (1b3f8 <bt_keys_find_irk+0x94>)
   1b370:	22e8      	movs	r2, #232	; 0xe8
   1b372:	f00a fde5 	bl	25f40 <assert_print>
   1b376:	481f      	ldr	r0, [pc, #124]	; (1b3f4 <bt_keys_find_irk+0x90>)
   1b378:	21e8      	movs	r1, #232	; 0xe8
   1b37a:	f00a fdda 	bl	25f32 <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1b37e:	780b      	ldrb	r3, [r1, #0]
   1b380:	2b01      	cmp	r3, #1
   1b382:	d001      	beq.n	1b388 <bt_keys_find_irk+0x24>
		return NULL;
   1b384:	2000      	movs	r0, #0
}
   1b386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1b388:	798b      	ldrb	r3, [r1, #6]
   1b38a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b38e:	2b40      	cmp	r3, #64	; 0x40
   1b390:	d1f8      	bne.n	1b384 <bt_keys_find_irk+0x20>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1b392:	4d1a      	ldr	r5, [pc, #104]	; (1b3fc <bt_keys_find_irk+0x98>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b394:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1b396:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1b39a:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1b39c:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b39e:	f002 0202 	and.w	r2, r2, #2
   1b3a2:	b1c3      	cbz	r3, 1b3d6 <bt_keys_find_irk+0x72>
   1b3a4:	2300      	movs	r3, #0
   1b3a6:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1b3a8:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1b3aa:	f002 0202 	and.w	r2, r2, #2
   1b3ae:	2b00      	cmp	r3, #0
   1b3b0:	d1e8      	bne.n	1b384 <bt_keys_find_irk+0x20>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1b3b2:	2a00      	cmp	r2, #0
   1b3b4:	d0e6      	beq.n	1b384 <bt_keys_find_irk+0x20>
		if (key_pool[i].id != id) {
   1b3b6:	42b1      	cmp	r1, r6
   1b3b8:	d1e4      	bne.n	1b384 <bt_keys_find_irk+0x20>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1b3ba:	1c67      	adds	r7, r4, #1
   1b3bc:	4810      	ldr	r0, [pc, #64]	; (1b400 <bt_keys_find_irk+0x9c>)
   1b3be:	4639      	mov	r1, r7
   1b3c0:	f00b fc85 	bl	26cce <bt_rpa_irk_matches>
   1b3c4:	2301      	movs	r3, #1
   1b3c6:	2800      	cmp	r0, #0
   1b3c8:	d0ed      	beq.n	1b3a6 <bt_keys_find_irk+0x42>
	memcpy(dst, src, sizeof(*dst));
   1b3ca:	2206      	movs	r2, #6
   1b3cc:	4639      	mov	r1, r7
   1b3ce:	480d      	ldr	r0, [pc, #52]	; (1b404 <bt_keys_find_irk+0xa0>)
   1b3d0:	f00b fc54 	bl	26c7c <memcpy>
}
   1b3d4:	e00b      	b.n	1b3ee <bt_keys_find_irk+0x8a>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1b3d6:	2a00      	cmp	r2, #0
   1b3d8:	d0e5      	beq.n	1b3a6 <bt_keys_find_irk+0x42>
		if (key_pool[i].id == id &&
   1b3da:	42b0      	cmp	r0, r6
   1b3dc:	d1e3      	bne.n	1b3a6 <bt_keys_find_irk+0x42>
	return memcmp(a, b, sizeof(*a));
   1b3de:	2206      	movs	r2, #6
   1b3e0:	4639      	mov	r1, r7
   1b3e2:	1c60      	adds	r0, r4, #1
   1b3e4:	f00b fc23 	bl	26c2e <memcmp>
   1b3e8:	2301      	movs	r3, #1
   1b3ea:	2800      	cmp	r0, #0
   1b3ec:	d1d5      	bne.n	1b39a <bt_keys_find_irk+0x36>
			return &key_pool[i];
   1b3ee:	4803      	ldr	r0, [pc, #12]	; (1b3fc <bt_keys_find_irk+0x98>)
   1b3f0:	e7c9      	b.n	1b386 <bt_keys_find_irk+0x22>
   1b3f2:	bf00      	nop
   1b3f4:	0002cc31 	.word	0x0002cc31
   1b3f8:	0002a7df 	.word	0x0002a7df
   1b3fc:	20002768 	.word	0x20002768
   1b400:	20002792 	.word	0x20002792
   1b404:	200027a2 	.word	0x200027a2

0001b408 <bt_keys_find_addr>:
{
   1b408:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1b40a:	b951      	cbnz	r1, 1b422 <bt_keys_find_addr+0x1a>
   1b40c:	490b      	ldr	r1, [pc, #44]	; (1b43c <bt_keys_find_addr+0x34>)
   1b40e:	480c      	ldr	r0, [pc, #48]	; (1b440 <bt_keys_find_addr+0x38>)
   1b410:	f240 121b 	movw	r2, #283	; 0x11b
   1b414:	f00a fd94 	bl	25f40 <assert_print>
   1b418:	4808      	ldr	r0, [pc, #32]	; (1b43c <bt_keys_find_addr+0x34>)
   1b41a:	f240 111b 	movw	r1, #283	; 0x11b
   1b41e:	f00a fd88 	bl	25f32 <assert_post_action>
		if (key_pool[i].id == id &&
   1b422:	4c08      	ldr	r4, [pc, #32]	; (1b444 <bt_keys_find_addr+0x3c>)
   1b424:	7823      	ldrb	r3, [r4, #0]
   1b426:	4283      	cmp	r3, r0
   1b428:	d104      	bne.n	1b434 <bt_keys_find_addr+0x2c>
	return memcmp(a, b, sizeof(*a));
   1b42a:	2207      	movs	r2, #7
   1b42c:	1c60      	adds	r0, r4, #1
   1b42e:	f00b fbfe 	bl	26c2e <memcmp>
   1b432:	b108      	cbz	r0, 1b438 <bt_keys_find_addr+0x30>
	return NULL;
   1b434:	2000      	movs	r0, #0
}
   1b436:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1b438:	4620      	mov	r0, r4
   1b43a:	e7fc      	b.n	1b436 <bt_keys_find_addr+0x2e>
   1b43c:	0002cc31 	.word	0x0002cc31
   1b440:	0002a7df 	.word	0x0002a7df
   1b444:	20002768 	.word	0x20002768

0001b448 <bt_keys_add_type>:
{
   1b448:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1b44a:	b950      	cbnz	r0, 1b462 <bt_keys_add_type+0x1a>
   1b44c:	4907      	ldr	r1, [pc, #28]	; (1b46c <bt_keys_add_type+0x24>)
   1b44e:	4808      	ldr	r0, [pc, #32]	; (1b470 <bt_keys_add_type+0x28>)
   1b450:	f240 122b 	movw	r2, #299	; 0x12b
   1b454:	f00a fd74 	bl	25f40 <assert_print>
   1b458:	4804      	ldr	r0, [pc, #16]	; (1b46c <bt_keys_add_type+0x24>)
   1b45a:	f240 112b 	movw	r1, #299	; 0x12b
   1b45e:	f00a fd68 	bl	25f32 <assert_post_action>
	keys->keys |= type;
   1b462:	89c3      	ldrh	r3, [r0, #14]
   1b464:	4319      	orrs	r1, r3
   1b466:	81c1      	strh	r1, [r0, #14]
}
   1b468:	bd08      	pop	{r3, pc}
   1b46a:	bf00      	nop
   1b46c:	0002cc31 	.word	0x0002cc31
   1b470:	0002a7df 	.word	0x0002a7df

0001b474 <bt_keys_get_type>:
{
   1b474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b476:	4606      	mov	r6, r0
   1b478:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   1b47a:	4615      	mov	r5, r2
   1b47c:	b942      	cbnz	r2, 1b490 <bt_keys_get_type+0x1c>
   1b47e:	490c      	ldr	r1, [pc, #48]	; (1b4b0 <bt_keys_get_type+0x3c>)
   1b480:	480c      	ldr	r0, [pc, #48]	; (1b4b4 <bt_keys_get_type+0x40>)
   1b482:	22d1      	movs	r2, #209	; 0xd1
   1b484:	f00a fd5c 	bl	25f40 <assert_print>
   1b488:	4809      	ldr	r0, [pc, #36]	; (1b4b0 <bt_keys_get_type+0x3c>)
   1b48a:	21d1      	movs	r1, #209	; 0xd1
   1b48c:	f00a fd51 	bl	25f32 <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   1b490:	f7ff ff3c 	bl	1b30c <bt_keys_find>
	if (keys) {
   1b494:	4604      	mov	r4, r0
   1b496:	b940      	cbnz	r0, 1b4aa <bt_keys_get_type+0x36>
	keys = bt_keys_get_addr(id, addr);
   1b498:	4629      	mov	r1, r5
   1b49a:	4638      	mov	r0, r7
   1b49c:	f7ff fefc 	bl	1b298 <bt_keys_get_addr>
	if (!keys) {
   1b4a0:	4604      	mov	r4, r0
   1b4a2:	b110      	cbz	r0, 1b4aa <bt_keys_get_type+0x36>
	bt_keys_add_type(keys, type);
   1b4a4:	4631      	mov	r1, r6
   1b4a6:	f7ff ffcf 	bl	1b448 <bt_keys_add_type>
}
   1b4aa:	4620      	mov	r0, r4
   1b4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b4ae:	bf00      	nop
   1b4b0:	0002cc31 	.word	0x0002cc31
   1b4b4:	0002a7df 	.word	0x0002a7df

0001b4b8 <bt_keys_clear>:
{
   1b4b8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1b4ba:	4604      	mov	r4, r0
{
   1b4bc:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1b4be:	b950      	cbnz	r0, 1b4d6 <bt_keys_clear+0x1e>
   1b4c0:	4916      	ldr	r1, [pc, #88]	; (1b51c <bt_keys_clear+0x64>)
   1b4c2:	4817      	ldr	r0, [pc, #92]	; (1b520 <bt_keys_clear+0x68>)
   1b4c4:	f44f 7299 	mov.w	r2, #306	; 0x132
   1b4c8:	f00a fd3a 	bl	25f40 <assert_print>
   1b4cc:	4813      	ldr	r0, [pc, #76]	; (1b51c <bt_keys_clear+0x64>)
   1b4ce:	f44f 7199 	mov.w	r1, #306	; 0x132
   1b4d2:	f00a fd2e 	bl	25f32 <assert_post_action>
	if (keys->state & BT_KEYS_ID_ADDED) {
   1b4d6:	7a03      	ldrb	r3, [r0, #8]
   1b4d8:	075b      	lsls	r3, r3, #29
   1b4da:	d501      	bpl.n	1b4e0 <bt_keys_clear+0x28>
		bt_id_del(keys);
   1b4dc:	f7fa f80e 	bl	154fc <bt_id_del>
		if (keys->id) {
   1b4e0:	4625      	mov	r5, r4
   1b4e2:	f815 2b01 	ldrb.w	r2, [r5], #1
   1b4e6:	b1b2      	cbz	r2, 1b516 <bt_keys_clear+0x5e>
			u8_to_dec(id, sizeof(id), keys->id);
   1b4e8:	ae02      	add	r6, sp, #8
   1b4ea:	2104      	movs	r1, #4
   1b4ec:	4630      	mov	r0, r6
   1b4ee:	f00a fa91 	bl	25a14 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1b4f2:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1b4f4:	4a0b      	ldr	r2, [pc, #44]	; (1b524 <bt_keys_clear+0x6c>)
   1b4f6:	462b      	mov	r3, r5
   1b4f8:	2124      	movs	r1, #36	; 0x24
   1b4fa:	a803      	add	r0, sp, #12
   1b4fc:	f7f8 fc10 	bl	13d20 <bt_settings_encode_key>
		settings_delete(key);
   1b500:	a803      	add	r0, sp, #12
   1b502:	f00a ffaf 	bl	26464 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1b506:	225c      	movs	r2, #92	; 0x5c
   1b508:	2100      	movs	r1, #0
   1b50a:	4620      	mov	r0, r4
}
   1b50c:	b00c      	add	sp, #48	; 0x30
   1b50e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1b512:	f00b bbbe 	b.w	26c92 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1b516:	9200      	str	r2, [sp, #0]
   1b518:	e7ec      	b.n	1b4f4 <bt_keys_clear+0x3c>
   1b51a:	bf00      	nop
   1b51c:	0002cc31 	.word	0x0002cc31
   1b520:	0002a7df 	.word	0x0002a7df
   1b524:	0002cd19 	.word	0x0002cd19

0001b528 <keys_set>:
{
   1b528:	b570      	push	{r4, r5, r6, lr}
   1b52a:	4605      	mov	r5, r0
   1b52c:	b098      	sub	sp, #96	; 0x60
   1b52e:	4614      	mov	r4, r2
   1b530:	4618      	mov	r0, r3
	if (!name) {
   1b532:	b945      	cbnz	r5, 1b546 <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   1b534:	4832      	ldr	r0, [pc, #200]	; (1b600 <keys_set+0xd8>)
   1b536:	2145      	movs	r1, #69	; 0x45
   1b538:	f00a fd10 	bl	25f5c <z_log_minimal_printk>
		return -EINVAL;
   1b53c:	f06f 0615 	mvn.w	r6, #21
}
   1b540:	4630      	mov	r0, r6
   1b542:	b018      	add	sp, #96	; 0x60
   1b544:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1b546:	2250      	movs	r2, #80	; 0x50
   1b548:	a904      	add	r1, sp, #16
   1b54a:	47a0      	blx	r4
	if (len < 0) {
   1b54c:	1e04      	subs	r4, r0, #0
   1b54e:	da05      	bge.n	1b55c <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
   1b550:	482c      	ldr	r0, [pc, #176]	; (1b604 <keys_set+0xdc>)
   1b552:	4622      	mov	r2, r4
   1b554:	2145      	movs	r1, #69	; 0x45
   1b556:	f00a fd01 	bl	25f5c <z_log_minimal_printk>
		return -EINVAL;
   1b55a:	e7ef      	b.n	1b53c <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   1b55c:	a902      	add	r1, sp, #8
   1b55e:	4628      	mov	r0, r5
   1b560:	f00b fbdb 	bl	26d1a <bt_settings_decode_key>
	if (err) {
   1b564:	4606      	mov	r6, r0
   1b566:	b118      	cbz	r0, 1b570 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
   1b568:	4827      	ldr	r0, [pc, #156]	; (1b608 <keys_set+0xe0>)
   1b56a:	462a      	mov	r2, r5
   1b56c:	2145      	movs	r1, #69	; 0x45
   1b56e:	e7f2      	b.n	1b556 <keys_set+0x2e>
	settings_name_next(name, &next);
   1b570:	a901      	add	r1, sp, #4
   1b572:	4628      	mov	r0, r5
   1b574:	f00a ff9e 	bl	264b4 <settings_name_next>
	if (!next) {
   1b578:	9801      	ldr	r0, [sp, #4]
   1b57a:	b140      	cbz	r0, 1b58e <keys_set+0x66>
		unsigned long next_id = strtoul(next, NULL, 10);
   1b57c:	220a      	movs	r2, #10
   1b57e:	4631      	mov	r1, r6
   1b580:	f00b faa4 	bl	26acc <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1b584:	4602      	mov	r2, r0
   1b586:	b110      	cbz	r0, 1b58e <keys_set+0x66>
			BT_ERR("Invalid local identity %lu", next_id);
   1b588:	4820      	ldr	r0, [pc, #128]	; (1b60c <keys_set+0xe4>)
   1b58a:	2145      	movs	r1, #69	; 0x45
   1b58c:	e7e3      	b.n	1b556 <keys_set+0x2e>
	if (!len) {
   1b58e:	b99c      	cbnz	r4, 1b5b8 <keys_set+0x90>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1b590:	aa02      	add	r2, sp, #8
   1b592:	4621      	mov	r1, r4
   1b594:	203f      	movs	r0, #63	; 0x3f
   1b596:	f7ff feb9 	bl	1b30c <bt_keys_find>
		if (keys) {
   1b59a:	b120      	cbz	r0, 1b5a6 <keys_set+0x7e>
			(void)memset(keys, 0, sizeof(*keys));
   1b59c:	225c      	movs	r2, #92	; 0x5c
   1b59e:	4621      	mov	r1, r4
   1b5a0:	f00b fb77 	bl	26c92 <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1b5a4:	e7cc      	b.n	1b540 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
   1b5a6:	a802      	add	r0, sp, #8
   1b5a8:	f7f8 fb0e 	bl	13bc8 <bt_addr_le_str>
   1b5ac:	2157      	movs	r1, #87	; 0x57
   1b5ae:	4602      	mov	r2, r0
   1b5b0:	4817      	ldr	r0, [pc, #92]	; (1b610 <keys_set+0xe8>)
   1b5b2:	f00a fcd3 	bl	25f5c <z_log_minimal_printk>
   1b5b6:	e7c3      	b.n	1b540 <keys_set+0x18>
	__ASSERT_NO_MSG(addr != NULL);
   1b5b8:	a902      	add	r1, sp, #8
   1b5ba:	2000      	movs	r0, #0
   1b5bc:	f7ff fe46 	bl	1b24c <bt_keys_get_addr.part.0>
	if (!keys) {
   1b5c0:	4605      	mov	r5, r0
   1b5c2:	b950      	cbnz	r0, 1b5da <keys_set+0xb2>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1b5c4:	a802      	add	r0, sp, #8
   1b5c6:	f7f8 faff 	bl	13bc8 <bt_addr_le_str>
   1b5ca:	2145      	movs	r1, #69	; 0x45
   1b5cc:	4602      	mov	r2, r0
   1b5ce:	4811      	ldr	r0, [pc, #68]	; (1b614 <keys_set+0xec>)
   1b5d0:	f00a fcc4 	bl	25f5c <z_log_minimal_printk>
		return -ENOMEM;
   1b5d4:	f06f 060b 	mvn.w	r6, #11
   1b5d8:	e7b2      	b.n	1b540 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   1b5da:	2c50      	cmp	r4, #80	; 0x50
   1b5dc:	d009      	beq.n	1b5f2 <keys_set+0xca>
			BT_ERR("Invalid key length %zd != %zu", len,
   1b5de:	480e      	ldr	r0, [pc, #56]	; (1b618 <keys_set+0xf0>)
   1b5e0:	2350      	movs	r3, #80	; 0x50
   1b5e2:	4622      	mov	r2, r4
   1b5e4:	2145      	movs	r1, #69	; 0x45
   1b5e6:	f00a fcb9 	bl	25f5c <z_log_minimal_printk>
			bt_keys_clear(keys);
   1b5ea:	4628      	mov	r0, r5
   1b5ec:	f7ff ff64 	bl	1b4b8 <bt_keys_clear>
			return -EINVAL;
   1b5f0:	e7a4      	b.n	1b53c <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
   1b5f2:	4622      	mov	r2, r4
   1b5f4:	a904      	add	r1, sp, #16
   1b5f6:	300c      	adds	r0, #12
   1b5f8:	f00b fb40 	bl	26c7c <memcpy>
	return 0;
   1b5fc:	e7a0      	b.n	1b540 <keys_set+0x18>
   1b5fe:	bf00      	nop
   1b600:	0002b1b0 	.word	0x0002b1b0
   1b604:	0002cc61 	.word	0x0002cc61
   1b608:	0002c41e 	.word	0x0002c41e
   1b60c:	0002c43f 	.word	0x0002c43f
   1b610:	0002cc85 	.word	0x0002cc85
   1b614:	0002ccad 	.word	0x0002ccad
   1b618:	0002ccd1 	.word	0x0002ccd1

0001b61c <bt_keys_store>:
{
   1b61c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1b61e:	4604      	mov	r4, r0
{
   1b620:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1b622:	b950      	cbnz	r0, 1b63a <bt_keys_store+0x1e>
   1b624:	4916      	ldr	r1, [pc, #88]	; (1b680 <bt_keys_store+0x64>)
   1b626:	4817      	ldr	r0, [pc, #92]	; (1b684 <bt_keys_store+0x68>)
   1b628:	f44f 72ab 	mov.w	r2, #342	; 0x156
   1b62c:	f00a fc88 	bl	25f40 <assert_print>
   1b630:	4813      	ldr	r0, [pc, #76]	; (1b680 <bt_keys_store+0x64>)
   1b632:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1b636:	f00a fc7c 	bl	25f32 <assert_post_action>
	if (keys->id) {
   1b63a:	4605      	mov	r5, r0
   1b63c:	f815 2b01 	ldrb.w	r2, [r5], #1
   1b640:	b1da      	cbz	r2, 1b67a <bt_keys_store+0x5e>
		u8_to_dec(id, sizeof(id), keys->id);
   1b642:	ae02      	add	r6, sp, #8
   1b644:	2104      	movs	r1, #4
   1b646:	4630      	mov	r0, r6
   1b648:	f00a f9e4 	bl	25a14 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1b64c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1b64e:	4a0e      	ldr	r2, [pc, #56]	; (1b688 <bt_keys_store+0x6c>)
   1b650:	462b      	mov	r3, r5
   1b652:	2124      	movs	r1, #36	; 0x24
   1b654:	a803      	add	r0, sp, #12
   1b656:	f7f8 fb63 	bl	13d20 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1b65a:	f104 010c 	add.w	r1, r4, #12
   1b65e:	2250      	movs	r2, #80	; 0x50
   1b660:	a803      	add	r0, sp, #12
   1b662:	f7f6 ff7f 	bl	12564 <settings_save_one>
	if (err) {
   1b666:	4604      	mov	r4, r0
   1b668:	b120      	cbz	r0, 1b674 <bt_keys_store+0x58>
		BT_ERR("Failed to save keys (err %d)", err);
   1b66a:	4602      	mov	r2, r0
   1b66c:	2145      	movs	r1, #69	; 0x45
   1b66e:	4807      	ldr	r0, [pc, #28]	; (1b68c <bt_keys_store+0x70>)
   1b670:	f00a fc74 	bl	25f5c <z_log_minimal_printk>
}
   1b674:	4620      	mov	r0, r4
   1b676:	b00c      	add	sp, #48	; 0x30
   1b678:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1b67a:	9200      	str	r2, [sp, #0]
   1b67c:	e7e7      	b.n	1b64e <bt_keys_store+0x32>
   1b67e:	bf00      	nop
   1b680:	0002cc31 	.word	0x0002cc31
   1b684:	0002a7df 	.word	0x0002a7df
   1b688:	0002cd19 	.word	0x0002cd19
   1b68c:	0002ccf4 	.word	0x0002ccf4

0001b690 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1b690:	4b02      	ldr	r3, [pc, #8]	; (1b69c <net_buf_pool_get+0xc>)
   1b692:	2234      	movs	r2, #52	; 0x34
   1b694:	fb02 3000 	mla	r0, r2, r0, r3
   1b698:	4770      	bx	lr
   1b69a:	bf00      	nop
   1b69c:	20000994 	.word	0x20000994

0001b6a0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b6a0:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b6a2:	4b07      	ldr	r3, [pc, #28]	; (1b6c0 <net_buf_id+0x20>)
   1b6a4:	2134      	movs	r1, #52	; 0x34
   1b6a6:	fb01 3302 	mla	r3, r1, r2, r3
   1b6aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b6ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1b6b0:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b6b2:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b6b4:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1b6b8:	fbb0 f0f3 	udiv	r0, r0, r3
   1b6bc:	4770      	bx	lr
   1b6be:	bf00      	nop
   1b6c0:	20000994 	.word	0x20000994

0001b6c4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1b6c4:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b6c6:	4b0a      	ldr	r3, [pc, #40]	; (1b6f0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b6c8:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b6ca:	2434      	movs	r4, #52	; 0x34
   1b6cc:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1b6d0:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b6d4:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1b6d6:	681a      	ldr	r2, [r3, #0]
   1b6d8:	4294      	cmp	r4, r2
   1b6da:	bf94      	ite	ls
   1b6dc:	600c      	strls	r4, [r1, #0]
   1b6de:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1b6e0:	e9d3 5400 	ldrd	r5, r4, [r3]
   1b6e4:	f7ff ffdc 	bl	1b6a0 <net_buf_id>
}
   1b6e8:	fb05 4000 	mla	r0, r5, r0, r4
   1b6ec:	bd38      	pop	{r3, r4, r5, pc}
   1b6ee:	bf00      	nop
   1b6f0:	20000994 	.word	0x20000994

0001b6f4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6f8:	b085      	sub	sp, #20
   1b6fa:	4605      	mov	r5, r0
   1b6fc:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b6fe:	4610      	mov	r0, r2
   1b700:	4619      	mov	r1, r3
{
   1b702:	4691      	mov	r9, r2
   1b704:	4698      	mov	r8, r3
   1b706:	4617      	mov	r7, r2
   1b708:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b70a:	f00d fed1 	bl	294b0 <sys_clock_timeout_end_calc>
   1b70e:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1b712:	b93d      	cbnz	r5, 1b724 <net_buf_alloc_len+0x30>
   1b714:	495e      	ldr	r1, [pc, #376]	; (1b890 <net_buf_alloc_len+0x19c>)
   1b716:	485f      	ldr	r0, [pc, #380]	; (1b894 <net_buf_alloc_len+0x1a0>)
   1b718:	22f4      	movs	r2, #244	; 0xf4
   1b71a:	f00a fc11 	bl	25f40 <assert_print>
   1b71e:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1b720:	485b      	ldr	r0, [pc, #364]	; (1b890 <net_buf_alloc_len+0x19c>)
   1b722:	e014      	b.n	1b74e <net_buf_alloc_len+0x5a>
	key = k_spin_lock(&pool->lock);
   1b724:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   1b728:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b72c:	f3ef 8b11 	mrs	fp, BASEPRI
   1b730:	f383 8812 	msr	BASEPRI_MAX, r3
   1b734:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b738:	4650      	mov	r0, sl
   1b73a:	f004 fc49 	bl	1ffd0 <z_spin_lock_valid>
   1b73e:	b940      	cbnz	r0, 1b752 <net_buf_alloc_len+0x5e>
   1b740:	4955      	ldr	r1, [pc, #340]	; (1b898 <net_buf_alloc_len+0x1a4>)
   1b742:	4854      	ldr	r0, [pc, #336]	; (1b894 <net_buf_alloc_len+0x1a0>)
   1b744:	2294      	movs	r2, #148	; 0x94
   1b746:	f00a fbfb 	bl	25f40 <assert_print>
   1b74a:	2194      	movs	r1, #148	; 0x94
   1b74c:	4852      	ldr	r0, [pc, #328]	; (1b898 <net_buf_alloc_len+0x1a4>)
   1b74e:	f00a fbf0 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b752:	4650      	mov	r0, sl
   1b754:	f004 fc5a 	bl	2000c <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1b758:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1b75a:	2b00      	cmp	r3, #0
   1b75c:	d06a      	beq.n	1b834 <net_buf_alloc_len+0x140>
		if (pool->uninit_count < pool->buf_count) {
   1b75e:	8c2a      	ldrh	r2, [r5, #32]
   1b760:	429a      	cmp	r2, r3
   1b762:	d947      	bls.n	1b7f4 <net_buf_alloc_len+0x100>
	return z_impl_k_queue_get(queue, timeout);
   1b764:	2200      	movs	r2, #0
   1b766:	2300      	movs	r3, #0
   1b768:	4628      	mov	r0, r5
   1b76a:	f004 fe87 	bl	2047c <z_impl_k_queue_get>
			if (buf) {
   1b76e:	4604      	mov	r4, r0
   1b770:	2800      	cmp	r0, #0
   1b772:	d03f      	beq.n	1b7f4 <net_buf_alloc_len+0x100>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b774:	4650      	mov	r0, sl
   1b776:	f004 fc39 	bl	1ffec <z_spin_unlock_valid>
   1b77a:	b930      	cbnz	r0, 1b78a <net_buf_alloc_len+0x96>
   1b77c:	4946      	ldr	r1, [pc, #280]	; (1b898 <net_buf_alloc_len+0x1a4>)
   1b77e:	4845      	ldr	r0, [pc, #276]	; (1b894 <net_buf_alloc_len+0x1a0>)
   1b780:	22c2      	movs	r2, #194	; 0xc2
   1b782:	f00a fbdd 	bl	25f40 <assert_print>
   1b786:	21c2      	movs	r1, #194	; 0xc2
   1b788:	e7e0      	b.n	1b74c <net_buf_alloc_len+0x58>
	__asm__ volatile(
   1b78a:	f38b 8811 	msr	BASEPRI, fp
   1b78e:	f3bf 8f6f 	isb	sy
	if (size) {
   1b792:	9d03      	ldr	r5, [sp, #12]
   1b794:	2d00      	cmp	r5, #0
   1b796:	d06f      	beq.n	1b878 <net_buf_alloc_len+0x184>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1b798:	ea58 0309 	orrs.w	r3, r8, r9
   1b79c:	d010      	beq.n	1b7c0 <net_buf_alloc_len+0xcc>
   1b79e:	f1b8 3fff 	cmp.w	r8, #4294967295
   1b7a2:	bf08      	it	eq
   1b7a4:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1b7a8:	d00a      	beq.n	1b7c0 <net_buf_alloc_len+0xcc>
			int64_t remaining = end - sys_clock_tick_get();
   1b7aa:	f006 fe01 	bl	223b0 <sys_clock_tick_get>
   1b7ae:	9b01      	ldr	r3, [sp, #4]
   1b7b0:	1a1f      	subs	r7, r3, r0
   1b7b2:	9b02      	ldr	r3, [sp, #8]
   1b7b4:	eb63 0601 	sbc.w	r6, r3, r1
			if (remaining <= 0) {
   1b7b8:	2e00      	cmp	r6, #0
   1b7ba:	bfbc      	itt	lt
   1b7bc:	2700      	movlt	r7, #0
   1b7be:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b7c0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1b7c2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1b89c <net_buf_alloc_len+0x1a8>
   1b7c6:	f04f 0934 	mov.w	r9, #52	; 0x34
   1b7ca:	fb09 8303 	mla	r3, r9, r3, r8
   1b7ce:	463a      	mov	r2, r7
   1b7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b7d2:	681b      	ldr	r3, [r3, #0]
   1b7d4:	a903      	add	r1, sp, #12
   1b7d6:	f8d3 a000 	ldr.w	sl, [r3]
   1b7da:	4620      	mov	r0, r4
   1b7dc:	4633      	mov	r3, r6
   1b7de:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1b7e0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1b7e2:	2800      	cmp	r0, #0
   1b7e4:	d13c      	bne.n	1b860 <net_buf_alloc_len+0x16c>
	k_lifo_put(&pool->free, buf);
   1b7e6:	79a0      	ldrb	r0, [r4, #6]
   1b7e8:	4621      	mov	r1, r4
   1b7ea:	fb00 8009 	mla	r0, r0, r9, r8
   1b7ee:	f00d fda8 	bl	29342 <k_queue_prepend>
}
   1b7f2:	e030      	b.n	1b856 <net_buf_alloc_len+0x162>
		uninit_count = pool->uninit_count--;
   1b7f4:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1b7f6:	1e63      	subs	r3, r4, #1
   1b7f8:	846b      	strh	r3, [r5, #34]	; 0x22
   1b7fa:	4650      	mov	r0, sl
   1b7fc:	f004 fbf6 	bl	1ffec <z_spin_unlock_valid>
   1b800:	2800      	cmp	r0, #0
   1b802:	d0bb      	beq.n	1b77c <net_buf_alloc_len+0x88>
   1b804:	f38b 8811 	msr	BASEPRI, fp
   1b808:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b80c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b810:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b812:	3317      	adds	r3, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b814:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b816:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b818:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b81c:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1b820:	4b1e      	ldr	r3, [pc, #120]	; (1b89c <net_buf_alloc_len+0x1a8>)
   1b822:	4a1f      	ldr	r2, [pc, #124]	; (1b8a0 <net_buf_alloc_len+0x1ac>)
   1b824:	1aeb      	subs	r3, r5, r3
   1b826:	109b      	asrs	r3, r3, #2
   1b828:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1b82a:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   1b82c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1b830:	71e3      	strb	r3, [r4, #7]
		goto success;
   1b832:	e7ae      	b.n	1b792 <net_buf_alloc_len+0x9e>
   1b834:	4650      	mov	r0, sl
   1b836:	f004 fbd9 	bl	1ffec <z_spin_unlock_valid>
   1b83a:	2800      	cmp	r0, #0
   1b83c:	d09e      	beq.n	1b77c <net_buf_alloc_len+0x88>
   1b83e:	f38b 8811 	msr	BASEPRI, fp
   1b842:	f3bf 8f6f 	isb	sy
   1b846:	464a      	mov	r2, r9
   1b848:	4643      	mov	r3, r8
   1b84a:	4628      	mov	r0, r5
   1b84c:	f004 fe16 	bl	2047c <z_impl_k_queue_get>
	if (!buf) {
   1b850:	4604      	mov	r4, r0
   1b852:	2800      	cmp	r0, #0
   1b854:	d19d      	bne.n	1b792 <net_buf_alloc_len+0x9e>
		return NULL;
   1b856:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1b858:	4620      	mov	r0, r4
   1b85a:	b005      	add	sp, #20
   1b85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1b860:	9b03      	ldr	r3, [sp, #12]
   1b862:	429d      	cmp	r5, r3
   1b864:	d909      	bls.n	1b87a <net_buf_alloc_len+0x186>
   1b866:	490a      	ldr	r1, [pc, #40]	; (1b890 <net_buf_alloc_len+0x19c>)
   1b868:	480a      	ldr	r0, [pc, #40]	; (1b894 <net_buf_alloc_len+0x1a0>)
   1b86a:	f240 1255 	movw	r2, #341	; 0x155
   1b86e:	f00a fb67 	bl	25f40 <assert_print>
   1b872:	f240 1155 	movw	r1, #341	; 0x155
   1b876:	e753      	b.n	1b720 <net_buf_alloc_len+0x2c>
		buf->__buf = NULL;
   1b878:	6125      	str	r5, [r4, #16]
	buf->frags = NULL;
   1b87a:	2300      	movs	r3, #0
   1b87c:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1b87e:	2201      	movs	r2, #1
   1b880:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1b882:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1b884:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1b886:	6923      	ldr	r3, [r4, #16]
   1b888:	81e2      	strh	r2, [r4, #14]
   1b88a:	60a3      	str	r3, [r4, #8]
}
   1b88c:	e7e4      	b.n	1b858 <net_buf_alloc_len+0x164>
   1b88e:	bf00      	nop
   1b890:	0002cd26 	.word	0x0002cd26
   1b894:	0002a7df 	.word	0x0002a7df
   1b898:	0002a819 	.word	0x0002a819
   1b89c:	20000994 	.word	0x20000994
   1b8a0:	c4ec4ec5 	.word	0xc4ec4ec5

0001b8a4 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1b8a4:	b570      	push	{r4, r5, r6, lr}
   1b8a6:	4606      	mov	r6, r0
   1b8a8:	f004 fde8 	bl	2047c <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1b8ac:	4605      	mov	r5, r0
   1b8ae:	b128      	cbz	r0, 1b8bc <net_buf_get+0x18>
   1b8b0:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1b8b2:	7963      	ldrb	r3, [r4, #5]
   1b8b4:	f013 0301 	ands.w	r3, r3, #1
   1b8b8:	d102      	bne.n	1b8c0 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1b8ba:	6023      	str	r3, [r4, #0]

	return buf;
}
   1b8bc:	4628      	mov	r0, r5
   1b8be:	bd70      	pop	{r4, r5, r6, pc}
   1b8c0:	2200      	movs	r2, #0
   1b8c2:	2300      	movs	r3, #0
   1b8c4:	4630      	mov	r0, r6
   1b8c6:	f004 fdd9 	bl	2047c <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1b8ca:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1b8cc:	b950      	cbnz	r0, 1b8e4 <net_buf_get+0x40>
   1b8ce:	4908      	ldr	r1, [pc, #32]	; (1b8f0 <net_buf_get+0x4c>)
   1b8d0:	4808      	ldr	r0, [pc, #32]	; (1b8f4 <net_buf_get+0x50>)
   1b8d2:	f240 12ad 	movw	r2, #429	; 0x1ad
   1b8d6:	f00a fb33 	bl	25f40 <assert_print>
   1b8da:	4805      	ldr	r0, [pc, #20]	; (1b8f0 <net_buf_get+0x4c>)
   1b8dc:	f240 11ad 	movw	r1, #429	; 0x1ad
   1b8e0:	f00a fb27 	bl	25f32 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1b8e4:	7963      	ldrb	r3, [r4, #5]
   1b8e6:	f023 0301 	bic.w	r3, r3, #1
   1b8ea:	7163      	strb	r3, [r4, #5]
   1b8ec:	4604      	mov	r4, r0
   1b8ee:	e7e0      	b.n	1b8b2 <net_buf_get+0xe>
   1b8f0:	0002cd26 	.word	0x0002cd26
   1b8f4:	0002a7df 	.word	0x0002a7df

0001b8f8 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1b8f8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b8fa:	b950      	cbnz	r0, 1b912 <net_buf_simple_reserve+0x1a>
   1b8fc:	490c      	ldr	r1, [pc, #48]	; (1b930 <net_buf_simple_reserve+0x38>)
   1b8fe:	480d      	ldr	r0, [pc, #52]	; (1b934 <net_buf_simple_reserve+0x3c>)
   1b900:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   1b904:	f00a fb1c 	bl	25f40 <assert_print>
   1b908:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
	__ASSERT_NO_MSG(buf->len == 0U);
   1b90c:	4808      	ldr	r0, [pc, #32]	; (1b930 <net_buf_simple_reserve+0x38>)
   1b90e:	f00a fb10 	bl	25f32 <assert_post_action>
   1b912:	8883      	ldrh	r3, [r0, #4]
   1b914:	b143      	cbz	r3, 1b928 <net_buf_simple_reserve+0x30>
   1b916:	4906      	ldr	r1, [pc, #24]	; (1b930 <net_buf_simple_reserve+0x38>)
   1b918:	4806      	ldr	r0, [pc, #24]	; (1b934 <net_buf_simple_reserve+0x3c>)
   1b91a:	f240 12c5 	movw	r2, #453	; 0x1c5
   1b91e:	f00a fb0f 	bl	25f40 <assert_print>
   1b922:	f240 11c5 	movw	r1, #453	; 0x1c5
   1b926:	e7f1      	b.n	1b90c <net_buf_simple_reserve+0x14>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1b928:	6883      	ldr	r3, [r0, #8]
   1b92a:	440b      	add	r3, r1
   1b92c:	6003      	str	r3, [r0, #0]
}
   1b92e:	bd08      	pop	{r3, pc}
   1b930:	0002cd26 	.word	0x0002cd26
   1b934:	0002a7df 	.word	0x0002a7df

0001b938 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b93a:	460d      	mov	r5, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1b93c:	4604      	mov	r4, r0
   1b93e:	b950      	cbnz	r0, 1b956 <net_buf_slist_put+0x1e>
   1b940:	4925      	ldr	r1, [pc, #148]	; (1b9d8 <net_buf_slist_put+0xa0>)
   1b942:	4826      	ldr	r0, [pc, #152]	; (1b9dc <net_buf_slist_put+0xa4>)
   1b944:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1b948:	f00a fafa 	bl	25f40 <assert_print>
   1b94c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT_NO_MSG(buf);
   1b950:	4821      	ldr	r0, [pc, #132]	; (1b9d8 <net_buf_slist_put+0xa0>)
   1b952:	f00a faee 	bl	25f32 <assert_post_action>
   1b956:	bb21      	cbnz	r1, 1b9a2 <net_buf_slist_put+0x6a>
   1b958:	491f      	ldr	r1, [pc, #124]	; (1b9d8 <net_buf_slist_put+0xa0>)
   1b95a:	4820      	ldr	r0, [pc, #128]	; (1b9dc <net_buf_slist_put+0xa4>)
   1b95c:	f240 12d3 	movw	r2, #467	; 0x1d3
   1b960:	f00a faee 	bl	25f40 <assert_print>
   1b964:	f240 11d3 	movw	r1, #467	; 0x1d3
   1b968:	e7f2      	b.n	1b950 <net_buf_slist_put+0x18>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   1b96a:	7973      	ldrb	r3, [r6, #5]
   1b96c:	f043 0301 	orr.w	r3, r3, #1
   1b970:	7173      	strb	r3, [r6, #5]
   1b972:	4616      	mov	r6, r2
	for (tail = buf; tail->frags; tail = tail->frags) {
   1b974:	6832      	ldr	r2, [r6, #0]
   1b976:	2a00      	cmp	r2, #0
   1b978:	d1f7      	bne.n	1b96a <net_buf_slist_put+0x32>
	__asm__ volatile(
   1b97a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b97e:	f3ef 8711 	mrs	r7, BASEPRI
   1b982:	f383 8812 	msr	BASEPRI_MAX, r3
   1b986:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b98a:	4815      	ldr	r0, [pc, #84]	; (1b9e0 <net_buf_slist_put+0xa8>)
   1b98c:	f004 fb20 	bl	1ffd0 <z_spin_lock_valid>
   1b990:	b948      	cbnz	r0, 1b9a6 <net_buf_slist_put+0x6e>
   1b992:	4914      	ldr	r1, [pc, #80]	; (1b9e4 <net_buf_slist_put+0xac>)
   1b994:	4811      	ldr	r0, [pc, #68]	; (1b9dc <net_buf_slist_put+0xa4>)
   1b996:	2294      	movs	r2, #148	; 0x94
   1b998:	f00a fad2 	bl	25f40 <assert_print>
   1b99c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b99e:	4811      	ldr	r0, [pc, #68]	; (1b9e4 <net_buf_slist_put+0xac>)
   1b9a0:	e7d7      	b.n	1b952 <net_buf_slist_put+0x1a>
   1b9a2:	460e      	mov	r6, r1
   1b9a4:	e7e6      	b.n	1b974 <net_buf_slist_put+0x3c>
	z_spin_lock_set_owner(l);
   1b9a6:	480e      	ldr	r0, [pc, #56]	; (1b9e0 <net_buf_slist_put+0xa8>)
   1b9a8:	f004 fb30 	bl	2000c <z_spin_lock_set_owner>
	return list->tail;
   1b9ac:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1b9ae:	b963      	cbnz	r3, 1b9ca <net_buf_slist_put+0x92>
	list->head = node;
   1b9b0:	6025      	str	r5, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b9b2:	480b      	ldr	r0, [pc, #44]	; (1b9e0 <net_buf_slist_put+0xa8>)
	list->tail = node;
   1b9b4:	6066      	str	r6, [r4, #4]
   1b9b6:	f004 fb19 	bl	1ffec <z_spin_unlock_valid>
   1b9ba:	b940      	cbnz	r0, 1b9ce <net_buf_slist_put+0x96>
   1b9bc:	4909      	ldr	r1, [pc, #36]	; (1b9e4 <net_buf_slist_put+0xac>)
   1b9be:	4807      	ldr	r0, [pc, #28]	; (1b9dc <net_buf_slist_put+0xa4>)
   1b9c0:	22c2      	movs	r2, #194	; 0xc2
   1b9c2:	f00a fabd 	bl	25f40 <assert_print>
   1b9c6:	21c2      	movs	r1, #194	; 0xc2
   1b9c8:	e7e9      	b.n	1b99e <net_buf_slist_put+0x66>
	parent->next = child;
   1b9ca:	601d      	str	r5, [r3, #0]
}
   1b9cc:	e7f1      	b.n	1b9b2 <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1b9ce:	f387 8811 	msr	BASEPRI, r7
   1b9d2:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1b9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9d8:	0002cd26 	.word	0x0002cd26
   1b9dc:	0002a7df 	.word	0x0002a7df
   1b9e0:	200027c4 	.word	0x200027c4
   1b9e4:	0002a819 	.word	0x0002a819

0001b9e8 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1b9e8:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1b9ea:	4604      	mov	r4, r0
   1b9ec:	b948      	cbnz	r0, 1ba02 <net_buf_slist_get+0x1a>
   1b9ee:	492d      	ldr	r1, [pc, #180]	; (1baa4 <net_buf_slist_get+0xbc>)
   1b9f0:	482d      	ldr	r0, [pc, #180]	; (1baa8 <net_buf_slist_get+0xc0>)
   1b9f2:	f240 12e3 	movw	r2, #483	; 0x1e3
   1b9f6:	f00a faa3 	bl	25f40 <assert_print>
   1b9fa:	f240 11e3 	movw	r1, #483	; 0x1e3

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   1b9fe:	4829      	ldr	r0, [pc, #164]	; (1baa4 <net_buf_slist_get+0xbc>)
   1ba00:	e012      	b.n	1ba28 <net_buf_slist_get+0x40>
	__asm__ volatile(
   1ba02:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba06:	f3ef 8611 	mrs	r6, BASEPRI
   1ba0a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ba12:	4826      	ldr	r0, [pc, #152]	; (1baac <net_buf_slist_get+0xc4>)
   1ba14:	f004 fadc 	bl	1ffd0 <z_spin_lock_valid>
   1ba18:	b940      	cbnz	r0, 1ba2c <net_buf_slist_get+0x44>
   1ba1a:	4925      	ldr	r1, [pc, #148]	; (1bab0 <net_buf_slist_get+0xc8>)
   1ba1c:	4822      	ldr	r0, [pc, #136]	; (1baa8 <net_buf_slist_get+0xc0>)
   1ba1e:	2294      	movs	r2, #148	; 0x94
   1ba20:	f00a fa8e 	bl	25f40 <assert_print>
   1ba24:	2194      	movs	r1, #148	; 0x94
   1ba26:	4822      	ldr	r0, [pc, #136]	; (1bab0 <net_buf_slist_get+0xc8>)
   1ba28:	f00a fa83 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ba2c:	481f      	ldr	r0, [pc, #124]	; (1baac <net_buf_slist_get+0xc4>)
   1ba2e:	f004 faed 	bl	2000c <z_spin_lock_set_owner>
	return list->head;
   1ba32:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1ba34:	b15d      	cbz	r5, 1ba4e <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ba36:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1ba38:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1ba3a:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ba3c:	4295      	cmp	r5, r2
	list->tail = node;
   1ba3e:	bf08      	it	eq
   1ba40:	6063      	streq	r3, [r4, #4]
{
   1ba42:	462b      	mov	r3, r5
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ba44:	795a      	ldrb	r2, [r3, #5]
   1ba46:	f012 0201 	ands.w	r2, r2, #1
   1ba4a:	d10b      	bne.n	1ba64 <net_buf_slist_get+0x7c>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1ba4c:	601a      	str	r2, [r3, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ba4e:	4817      	ldr	r0, [pc, #92]	; (1baac <net_buf_slist_get+0xc4>)
   1ba50:	f004 facc 	bl	1ffec <z_spin_unlock_valid>
   1ba54:	b9f8      	cbnz	r0, 1ba96 <net_buf_slist_get+0xae>
   1ba56:	4916      	ldr	r1, [pc, #88]	; (1bab0 <net_buf_slist_get+0xc8>)
   1ba58:	4813      	ldr	r0, [pc, #76]	; (1baa8 <net_buf_slist_get+0xc0>)
   1ba5a:	22c2      	movs	r2, #194	; 0xc2
   1ba5c:	f00a fa70 	bl	25f40 <assert_print>
   1ba60:	21c2      	movs	r1, #194	; 0xc2
   1ba62:	e7e0      	b.n	1ba26 <net_buf_slist_get+0x3e>
	return list->head;
   1ba64:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1ba66:	b162      	cbz	r2, 1ba82 <net_buf_slist_get+0x9a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ba68:	6860      	ldr	r0, [r4, #4]
	return node->next;
   1ba6a:	6811      	ldr	r1, [r2, #0]
	list->head = node;
   1ba6c:	6021      	str	r1, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ba6e:	4282      	cmp	r2, r0
   1ba70:	d100      	bne.n	1ba74 <net_buf_slist_get+0x8c>
	list->tail = node;
   1ba72:	6061      	str	r1, [r4, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   1ba74:	7959      	ldrb	r1, [r3, #5]
			frag->frags = (void *)sys_slist_get(list);
   1ba76:	601a      	str	r2, [r3, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   1ba78:	f021 0101 	bic.w	r1, r1, #1
   1ba7c:	7159      	strb	r1, [r3, #5]
   1ba7e:	4613      	mov	r3, r2
   1ba80:	e7e0      	b.n	1ba44 <net_buf_slist_get+0x5c>
			__ASSERT_NO_MSG(frag->frags);
   1ba82:	4908      	ldr	r1, [pc, #32]	; (1baa4 <net_buf_slist_get+0xbc>)
			frag->frags = (void *)sys_slist_get(list);
   1ba84:	601a      	str	r2, [r3, #0]
			__ASSERT_NO_MSG(frag->frags);
   1ba86:	4808      	ldr	r0, [pc, #32]	; (1baa8 <net_buf_slist_get+0xc0>)
   1ba88:	f240 12ed 	movw	r2, #493	; 0x1ed
   1ba8c:	f00a fa58 	bl	25f40 <assert_print>
   1ba90:	f240 11ed 	movw	r1, #493	; 0x1ed
   1ba94:	e7b3      	b.n	1b9fe <net_buf_slist_get+0x16>
	__asm__ volatile(
   1ba96:	f386 8811 	msr	BASEPRI, r6
   1ba9a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1ba9e:	4628      	mov	r0, r5
   1baa0:	bd70      	pop	{r4, r5, r6, pc}
   1baa2:	bf00      	nop
   1baa4:	0002cd26 	.word	0x0002cd26
   1baa8:	0002a7df 	.word	0x0002a7df
   1baac:	200027c4 	.word	0x200027c4
   1bab0:	0002a819 	.word	0x0002a819

0001bab4 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1bab4:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1bab6:	b950      	cbnz	r0, 1bace <net_buf_put+0x1a>
   1bab8:	4911      	ldr	r1, [pc, #68]	; (1bb00 <net_buf_put+0x4c>)
   1baba:	4812      	ldr	r0, [pc, #72]	; (1bb04 <net_buf_put+0x50>)
   1babc:	f44f 7200 	mov.w	r2, #512	; 0x200
   1bac0:	f00a fa3e 	bl	25f40 <assert_print>
   1bac4:	f44f 7100 	mov.w	r1, #512	; 0x200
	__ASSERT_NO_MSG(buf);
   1bac8:	480d      	ldr	r0, [pc, #52]	; (1bb00 <net_buf_put+0x4c>)
   1baca:	f00a fa32 	bl	25f32 <assert_post_action>
   1bace:	b9a1      	cbnz	r1, 1bafa <net_buf_put+0x46>
   1bad0:	490b      	ldr	r1, [pc, #44]	; (1bb00 <net_buf_put+0x4c>)
   1bad2:	480c      	ldr	r0, [pc, #48]	; (1bb04 <net_buf_put+0x50>)
   1bad4:	f240 2201 	movw	r2, #513	; 0x201
   1bad8:	f00a fa32 	bl	25f40 <assert_print>
   1badc:	f240 2101 	movw	r1, #513	; 0x201
   1bae0:	e7f2      	b.n	1bac8 <net_buf_put+0x14>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   1bae2:	7953      	ldrb	r3, [r2, #5]
   1bae4:	f043 0301 	orr.w	r3, r3, #1
   1bae8:	7153      	strb	r3, [r2, #5]
   1baea:	4622      	mov	r2, r4
	for (tail = buf; tail->frags; tail = tail->frags) {
   1baec:	6814      	ldr	r4, [r2, #0]
   1baee:	2c00      	cmp	r4, #0
   1baf0:	d1f7      	bne.n	1bae2 <net_buf_put+0x2e>
	}

	k_fifo_put_list(fifo, buf, tail);
}
   1baf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put_list(fifo, buf, tail);
   1baf6:	f004 bc6d 	b.w	203d4 <k_queue_append_list>
   1bafa:	460a      	mov	r2, r1
   1bafc:	e7f6      	b.n	1baec <net_buf_put+0x38>
   1bafe:	bf00      	nop
   1bb00:	0002cd26 	.word	0x0002cd26
   1bb04:	0002a7df 	.word	0x0002a7df

0001bb08 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1bb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1bb0c:	4605      	mov	r5, r0
   1bb0e:	b328      	cbz	r0, 1bb5c <net_buf_unref+0x54>
   1bb10:	4e1b      	ldr	r6, [pc, #108]	; (1bb80 <net_buf_unref+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1bb12:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1bb14:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1bb18:	462c      	mov	r4, r5
   1bb1a:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1bb1c:	7923      	ldrb	r3, [r4, #4]
   1bb1e:	3b01      	subs	r3, #1
   1bb20:	b2db      	uxtb	r3, r3
   1bb22:	7123      	strb	r3, [r4, #4]
   1bb24:	b9c3      	cbnz	r3, 1bb58 <net_buf_unref+0x50>
		if (buf->__buf) {
   1bb26:	6921      	ldr	r1, [r4, #16]
   1bb28:	b159      	cbz	r1, 1bb42 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1bb2a:	7963      	ldrb	r3, [r4, #5]
   1bb2c:	079b      	lsls	r3, r3, #30
   1bb2e:	d407      	bmi.n	1bb40 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bb30:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1bb32:	fb08 6303 	mla	r3, r8, r3, r6
   1bb36:	4620      	mov	r0, r4
   1bb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bb3a:	681b      	ldr	r3, [r3, #0]
   1bb3c:	689b      	ldr	r3, [r3, #8]
   1bb3e:	4798      	blx	r3
			buf->__buf = NULL;
   1bb40:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1bb42:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1bb44:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1bb46:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1bb4a:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1bb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bb4e:	b183      	cbz	r3, 1bb72 <net_buf_unref+0x6a>
			pool->destroy(buf);
   1bb50:	4620      	mov	r0, r4
   1bb52:	4798      	blx	r3
	while (buf) {
   1bb54:	2d00      	cmp	r5, #0
   1bb56:	d1df      	bne.n	1bb18 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1bb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1bb5c:	4909      	ldr	r1, [pc, #36]	; (1bb84 <net_buf_unref+0x7c>)
   1bb5e:	480a      	ldr	r0, [pc, #40]	; (1bb88 <net_buf_unref+0x80>)
   1bb60:	f44f 7204 	mov.w	r2, #528	; 0x210
   1bb64:	f00a f9ec 	bl	25f40 <assert_print>
   1bb68:	4806      	ldr	r0, [pc, #24]	; (1bb84 <net_buf_unref+0x7c>)
   1bb6a:	f44f 7104 	mov.w	r1, #528	; 0x210
   1bb6e:	f00a f9e0 	bl	25f32 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1bb72:	4621      	mov	r1, r4
   1bb74:	fb00 6008 	mla	r0, r0, r8, r6
   1bb78:	f00d fbe3 	bl	29342 <k_queue_prepend>
}
   1bb7c:	e7ea      	b.n	1bb54 <net_buf_unref+0x4c>
   1bb7e:	bf00      	nop
   1bb80:	20000994 	.word	0x20000994
   1bb84:	0002cd26 	.word	0x0002cd26
   1bb88:	0002a7df 	.word	0x0002a7df

0001bb8c <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1bb8c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1bb8e:	b950      	cbnz	r0, 1bba6 <net_buf_ref+0x1a>
   1bb90:	4907      	ldr	r1, [pc, #28]	; (1bbb0 <net_buf_ref+0x24>)
   1bb92:	4808      	ldr	r0, [pc, #32]	; (1bbb4 <net_buf_ref+0x28>)
   1bb94:	f240 223f 	movw	r2, #575	; 0x23f
   1bb98:	f00a f9d2 	bl	25f40 <assert_print>
   1bb9c:	4804      	ldr	r0, [pc, #16]	; (1bbb0 <net_buf_ref+0x24>)
   1bb9e:	f240 213f 	movw	r1, #575	; 0x23f
   1bba2:	f00a f9c6 	bl	25f32 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1bba6:	7902      	ldrb	r2, [r0, #4]
   1bba8:	3201      	adds	r2, #1
   1bbaa:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1bbac:	bd08      	pop	{r3, pc}
   1bbae:	bf00      	nop
   1bbb0:	0002cd26 	.word	0x0002cd26
   1bbb4:	0002a7df 	.word	0x0002a7df

0001bbb8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1bbb8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1bbba:	4603      	mov	r3, r0
   1bbbc:	b950      	cbnz	r0, 1bbd4 <net_buf_frag_last+0x1c>
   1bbbe:	4908      	ldr	r1, [pc, #32]	; (1bbe0 <net_buf_frag_last+0x28>)
   1bbc0:	4808      	ldr	r0, [pc, #32]	; (1bbe4 <net_buf_frag_last+0x2c>)
   1bbc2:	f44f 721f 	mov.w	r2, #636	; 0x27c
   1bbc6:	f00a f9bb 	bl	25f40 <assert_print>
   1bbca:	4805      	ldr	r0, [pc, #20]	; (1bbe0 <net_buf_frag_last+0x28>)
   1bbcc:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1bbd0:	f00a f9af 	bl	25f32 <assert_post_action>

	while (buf->frags) {
   1bbd4:	4618      	mov	r0, r3
   1bbd6:	681b      	ldr	r3, [r3, #0]
   1bbd8:	2b00      	cmp	r3, #0
   1bbda:	d1fb      	bne.n	1bbd4 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1bbdc:	bd08      	pop	{r3, pc}
   1bbde:	bf00      	nop
   1bbe0:	0002cd26 	.word	0x0002cd26
   1bbe4:	0002a7df 	.word	0x0002a7df

0001bbe8 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1bbe8:	b570      	push	{r4, r5, r6, lr}
   1bbea:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1bbec:	4604      	mov	r4, r0
   1bbee:	b950      	cbnz	r0, 1bc06 <net_buf_frag_insert+0x1e>
   1bbf0:	490e      	ldr	r1, [pc, #56]	; (1bc2c <net_buf_frag_insert+0x44>)
   1bbf2:	480f      	ldr	r0, [pc, #60]	; (1bc30 <net_buf_frag_insert+0x48>)
   1bbf4:	f240 2287 	movw	r2, #647	; 0x287
   1bbf8:	f00a f9a2 	bl	25f40 <assert_print>
   1bbfc:	f240 2187 	movw	r1, #647	; 0x287
	__ASSERT_NO_MSG(frag);
   1bc00:	480a      	ldr	r0, [pc, #40]	; (1bc2c <net_buf_frag_insert+0x44>)
   1bc02:	f00a f996 	bl	25f32 <assert_post_action>
   1bc06:	b941      	cbnz	r1, 1bc1a <net_buf_frag_insert+0x32>
   1bc08:	4908      	ldr	r1, [pc, #32]	; (1bc2c <net_buf_frag_insert+0x44>)
   1bc0a:	4809      	ldr	r0, [pc, #36]	; (1bc30 <net_buf_frag_insert+0x48>)
   1bc0c:	f44f 7222 	mov.w	r2, #648	; 0x288
   1bc10:	f00a f996 	bl	25f40 <assert_print>
   1bc14:	f44f 7122 	mov.w	r1, #648	; 0x288
   1bc18:	e7f2      	b.n	1bc00 <net_buf_frag_insert+0x18>

	if (parent->frags) {
   1bc1a:	6806      	ldr	r6, [r0, #0]
   1bc1c:	b11e      	cbz	r6, 1bc26 <net_buf_frag_insert+0x3e>
		net_buf_frag_last(frag)->frags = parent->frags;
   1bc1e:	4608      	mov	r0, r1
   1bc20:	f7ff ffca 	bl	1bbb8 <net_buf_frag_last>
   1bc24:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1bc26:	6025      	str	r5, [r4, #0]
}
   1bc28:	bd70      	pop	{r4, r5, r6, pc}
   1bc2a:	bf00      	nop
   1bc2c:	0002cd26 	.word	0x0002cd26
   1bc30:	0002a7df 	.word	0x0002a7df

0001bc34 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1bc34:	b538      	push	{r3, r4, r5, lr}
   1bc36:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1bc38:	460c      	mov	r4, r1
   1bc3a:	b951      	cbnz	r1, 1bc52 <net_buf_frag_add+0x1e>
   1bc3c:	490b      	ldr	r1, [pc, #44]	; (1bc6c <net_buf_frag_add+0x38>)
   1bc3e:	480c      	ldr	r0, [pc, #48]	; (1bc70 <net_buf_frag_add+0x3c>)
   1bc40:	f240 2293 	movw	r2, #659	; 0x293
   1bc44:	f00a f97c 	bl	25f40 <assert_print>
   1bc48:	4808      	ldr	r0, [pc, #32]	; (1bc6c <net_buf_frag_add+0x38>)
   1bc4a:	f240 2193 	movw	r1, #659	; 0x293
   1bc4e:	f00a f970 	bl	25f32 <assert_post_action>

	if (!head) {
   1bc52:	b920      	cbnz	r0, 1bc5e <net_buf_frag_add+0x2a>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1bc54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1bc58:	4608      	mov	r0, r1
   1bc5a:	f7ff bf97 	b.w	1bb8c <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1bc5e:	f7ff ffab 	bl	1bbb8 <net_buf_frag_last>
   1bc62:	4621      	mov	r1, r4
   1bc64:	f7ff ffc0 	bl	1bbe8 <net_buf_frag_insert>
}
   1bc68:	4628      	mov	r0, r5
   1bc6a:	bd38      	pop	{r3, r4, r5, pc}
   1bc6c:	0002cd26 	.word	0x0002cd26
   1bc70:	0002a7df 	.word	0x0002a7df

0001bc74 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1bc74:	b508      	push	{r3, lr}
   1bc76:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1bc78:	6800      	ldr	r0, [r0, #0]
   1bc7a:	689a      	ldr	r2, [r3, #8]
   1bc7c:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1bc7e:	4291      	cmp	r1, r2
   1bc80:	d90a      	bls.n	1bc98 <net_buf_simple_push+0x24>
   1bc82:	4908      	ldr	r1, [pc, #32]	; (1bca4 <net_buf_simple_push+0x30>)
   1bc84:	4808      	ldr	r0, [pc, #32]	; (1bca8 <net_buf_simple_push+0x34>)
   1bc86:	f240 4217 	movw	r2, #1047	; 0x417
   1bc8a:	f00a f959 	bl	25f40 <assert_print>
   1bc8e:	4805      	ldr	r0, [pc, #20]	; (1bca4 <net_buf_simple_push+0x30>)
   1bc90:	f240 4117 	movw	r1, #1047	; 0x417
   1bc94:	f00a f94d 	bl	25f32 <assert_post_action>
	buf->len += len;
   1bc98:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1bc9a:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1bc9c:	4411      	add	r1, r2
	buf->data -= len;
   1bc9e:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1bca0:	8099      	strh	r1, [r3, #4]
}
   1bca2:	bd08      	pop	{r3, pc}
   1bca4:	0002cd26 	.word	0x0002cd26
   1bca8:	0002a7df 	.word	0x0002a7df

0001bcac <net_buf_simple_pull>:
{
   1bcac:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1bcae:	8882      	ldrh	r2, [r0, #4]
   1bcb0:	428a      	cmp	r2, r1
{
   1bcb2:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1bcb4:	d20a      	bcs.n	1bccc <net_buf_simple_pull+0x20>
   1bcb6:	4908      	ldr	r1, [pc, #32]	; (1bcd8 <net_buf_simple_pull+0x2c>)
   1bcb8:	4808      	ldr	r0, [pc, #32]	; (1bcdc <net_buf_simple_pull+0x30>)
   1bcba:	f240 4277 	movw	r2, #1143	; 0x477
   1bcbe:	f00a f93f 	bl	25f40 <assert_print>
   1bcc2:	4805      	ldr	r0, [pc, #20]	; (1bcd8 <net_buf_simple_pull+0x2c>)
   1bcc4:	f240 4177 	movw	r1, #1143	; 0x477
   1bcc8:	f00a f933 	bl	25f32 <assert_post_action>
	buf->len -= len;
   1bccc:	1a52      	subs	r2, r2, r1
   1bcce:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1bcd0:	6800      	ldr	r0, [r0, #0]
   1bcd2:	4408      	add	r0, r1
   1bcd4:	6018      	str	r0, [r3, #0]
}
   1bcd6:	bd08      	pop	{r3, pc}
   1bcd8:	0002cd26 	.word	0x0002cd26
   1bcdc:	0002a7df 	.word	0x0002a7df

0001bce0 <net_buf_simple_pull_mem>:
{
   1bce0:	b508      	push	{r3, lr}
   1bce2:	4603      	mov	r3, r0
	void *data = buf->data;
   1bce4:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1bce6:	889a      	ldrh	r2, [r3, #4]
   1bce8:	428a      	cmp	r2, r1
   1bcea:	d20a      	bcs.n	1bd02 <net_buf_simple_pull_mem+0x22>
   1bcec:	4907      	ldr	r1, [pc, #28]	; (1bd0c <net_buf_simple_pull_mem+0x2c>)
   1bcee:	4808      	ldr	r0, [pc, #32]	; (1bd10 <net_buf_simple_pull_mem+0x30>)
   1bcf0:	f240 4283 	movw	r2, #1155	; 0x483
   1bcf4:	f00a f924 	bl	25f40 <assert_print>
   1bcf8:	4804      	ldr	r0, [pc, #16]	; (1bd0c <net_buf_simple_pull_mem+0x2c>)
   1bcfa:	f240 4183 	movw	r1, #1155	; 0x483
   1bcfe:	f00a f918 	bl	25f32 <assert_post_action>
	buf->len -= len;
   1bd02:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1bd04:	4401      	add	r1, r0
	buf->len -= len;
   1bd06:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1bd08:	6019      	str	r1, [r3, #0]
}
   1bd0a:	bd08      	pop	{r3, pc}
   1bd0c:	0002cd26 	.word	0x0002cd26
   1bd10:	0002a7df 	.word	0x0002a7df

0001bd14 <net_buf_simple_add>:
{
   1bd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1bd16:	8885      	ldrh	r5, [r0, #4]
   1bd18:	6803      	ldr	r3, [r0, #0]
   1bd1a:	460e      	mov	r6, r1
   1bd1c:	4604      	mov	r4, r0
   1bd1e:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1bd20:	f00c fedb 	bl	28ada <net_buf_simple_tailroom>
   1bd24:	42b0      	cmp	r0, r6
   1bd26:	d20a      	bcs.n	1bd3e <net_buf_simple_add+0x2a>
   1bd28:	4907      	ldr	r1, [pc, #28]	; (1bd48 <net_buf_simple_add+0x34>)
   1bd2a:	4808      	ldr	r0, [pc, #32]	; (1bd4c <net_buf_simple_add+0x38>)
   1bd2c:	f44f 724a 	mov.w	r2, #808	; 0x328
   1bd30:	f00a f906 	bl	25f40 <assert_print>
   1bd34:	4804      	ldr	r0, [pc, #16]	; (1bd48 <net_buf_simple_add+0x34>)
   1bd36:	f44f 714a 	mov.w	r1, #808	; 0x328
   1bd3a:	f00a f8fa 	bl	25f32 <assert_post_action>
	buf->len += len;
   1bd3e:	4435      	add	r5, r6
   1bd40:	80a5      	strh	r5, [r4, #4]
}
   1bd42:	4638      	mov	r0, r7
   1bd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd46:	bf00      	nop
   1bd48:	0002cd26 	.word	0x0002cd26
   1bd4c:	0002a7df 	.word	0x0002a7df

0001bd50 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1bd50:	b508      	push	{r3, lr}
   1bd52:	4804      	ldr	r0, [pc, #16]	; (1bd64 <xoshiro128_initialize+0x14>)
   1bd54:	f00d fa72 	bl	2923c <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1bd58:	2800      	cmp	r0, #0
}
   1bd5a:	bf0c      	ite	eq
   1bd5c:	f06f 0012 	mvneq.w	r0, #18
   1bd60:	2000      	movne	r0, #0
   1bd62:	bd08      	pop	{r3, pc}
   1bd64:	00029780 	.word	0x00029780

0001bd68 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1bd68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bd6a:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1bd6c:	490a      	ldr	r1, [pc, #40]	; (1bd98 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bd6e:	4a0b      	ldr	r2, [pc, #44]	; (1bd9c <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1bd70:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bd72:	2340      	movs	r3, #64	; 0x40
   1bd74:	9300      	str	r3, [sp, #0]
   1bd76:	1149      	asrs	r1, r1, #5
{
   1bd78:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bd7a:	4623      	mov	r3, r4
   1bd7c:	4808      	ldr	r0, [pc, #32]	; (1bda0 <onoff_start+0x38>)
   1bd7e:	f00c feda 	bl	28b36 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1bd82:	1e01      	subs	r1, r0, #0
   1bd84:	da05      	bge.n	1bd92 <onoff_start+0x2a>
		notify(mgr, err);
   1bd86:	4628      	mov	r0, r5
   1bd88:	4623      	mov	r3, r4
	}
}
   1bd8a:	b003      	add	sp, #12
   1bd8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1bd90:	4718      	bx	r3
}
   1bd92:	b003      	add	sp, #12
   1bd94:	bd30      	pop	{r4, r5, pc}
   1bd96:	bf00      	nop
   1bd98:	200027dc 	.word	0x200027dc
   1bd9c:	00028ba1 	.word	0x00028ba1
   1bda0:	00029708 	.word	0x00029708

0001bda4 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bda4:	b2c9      	uxtb	r1, r1
   1bda6:	2901      	cmp	r1, #1
{
   1bda8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bdaa:	d908      	bls.n	1bdbe <get_status+0x1a>
   1bdac:	4908      	ldr	r1, [pc, #32]	; (1bdd0 <get_status+0x2c>)
   1bdae:	4809      	ldr	r0, [pc, #36]	; (1bdd4 <get_status+0x30>)
   1bdb0:	227a      	movs	r2, #122	; 0x7a
   1bdb2:	f00a f8c5 	bl	25f40 <assert_print>
   1bdb6:	4806      	ldr	r0, [pc, #24]	; (1bdd0 <get_status+0x2c>)
   1bdb8:	217a      	movs	r1, #122	; 0x7a
   1bdba:	f00a f8ba 	bl	25f32 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1bdbe:	6903      	ldr	r3, [r0, #16]
   1bdc0:	220c      	movs	r2, #12
   1bdc2:	fb01 3302 	mla	r3, r1, r2, r3
   1bdc6:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   1bdc8:	f000 0007 	and.w	r0, r0, #7
   1bdcc:	bd08      	pop	{r3, pc}
   1bdce:	bf00      	nop
   1bdd0:	0002cd52 	.word	0x0002cd52
   1bdd4:	0002a7df 	.word	0x0002a7df

0001bdd8 <stop>:
{
   1bdd8:	b570      	push	{r4, r5, r6, lr}
   1bdda:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bddc:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   1bdde:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bde0:	d90a      	bls.n	1bdf8 <stop+0x20>
   1bde2:	4918      	ldr	r1, [pc, #96]	; (1be44 <stop+0x6c>)
   1bde4:	4818      	ldr	r0, [pc, #96]	; (1be48 <stop+0x70>)
   1bde6:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   1bdea:	f00a f8a9 	bl	25f40 <assert_print>
   1bdee:	4815      	ldr	r0, [pc, #84]	; (1be44 <stop+0x6c>)
   1bdf0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1bdf4:	f00a f89d 	bl	25f32 <assert_post_action>
	__asm__ volatile(
   1bdf8:	f04f 0440 	mov.w	r4, #64	; 0x40
   1bdfc:	f3ef 8511 	mrs	r5, BASEPRI
   1be00:	f384 8812 	msr	BASEPRI_MAX, r4
   1be04:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1be08:	260c      	movs	r6, #12
   1be0a:	fb06 3401 	mla	r4, r6, r1, r3
   1be0e:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1be10:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1be14:	d008      	beq.n	1be28 <stop+0x50>
   1be16:	42a2      	cmp	r2, r4
   1be18:	d006      	beq.n	1be28 <stop+0x50>
	__asm__ volatile(
   1be1a:	f385 8811 	msr	BASEPRI, r5
   1be1e:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1be22:	f04f 30ff 	mov.w	r0, #4294967295
}
   1be26:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1be28:	4371      	muls	r1, r6
   1be2a:	440b      	add	r3, r1
   1be2c:	2201      	movs	r2, #1
   1be2e:	649a      	str	r2, [r3, #72]	; 0x48
   1be30:	f385 8811 	msr	BASEPRI, r5
   1be34:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1be38:	6843      	ldr	r3, [r0, #4]
   1be3a:	440b      	add	r3, r1
   1be3c:	685b      	ldr	r3, [r3, #4]
   1be3e:	4798      	blx	r3
	return 0;
   1be40:	2000      	movs	r0, #0
   1be42:	e7f0      	b.n	1be26 <stop+0x4e>
   1be44:	0002cd52 	.word	0x0002cd52
   1be48:	0002a7df 	.word	0x0002a7df

0001be4c <onoff_stop>:
{
   1be4c:	b570      	push	{r4, r5, r6, lr}
   1be4e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1be50:	4906      	ldr	r1, [pc, #24]	; (1be6c <onoff_stop+0x20>)
   1be52:	1a41      	subs	r1, r0, r1
{
   1be54:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1be56:	1149      	asrs	r1, r1, #5
   1be58:	4805      	ldr	r0, [pc, #20]	; (1be70 <onoff_stop+0x24>)
   1be5a:	2240      	movs	r2, #64	; 0x40
   1be5c:	f7ff ffbc 	bl	1bdd8 <stop>
	notify(mgr, res);
   1be60:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1be62:	4601      	mov	r1, r0
	notify(mgr, res);
   1be64:	4620      	mov	r0, r4
}
   1be66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1be6a:	4718      	bx	r3
   1be6c:	200027dc 	.word	0x200027dc
   1be70:	00029708 	.word	0x00029708

0001be74 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1be74:	2200      	movs	r2, #0
{
   1be76:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1be78:	2101      	movs	r1, #1
{
   1be7a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1be7c:	4610      	mov	r0, r2
   1be7e:	f7f7 f94f 	bl	13120 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1be82:	480f      	ldr	r0, [pc, #60]	; (1bec0 <clk_init+0x4c>)
   1be84:	f002 fda8 	bl	1e9d8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1be88:	4b0e      	ldr	r3, [pc, #56]	; (1bec4 <clk_init+0x50>)
   1be8a:	4298      	cmp	r0, r3
   1be8c:	d115      	bne.n	1beba <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1be8e:	f00d f91f 	bl	290d0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1be92:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1be94:	490c      	ldr	r1, [pc, #48]	; (1bec8 <clk_init+0x54>)
   1be96:	4630      	mov	r0, r6
   1be98:	f009 ffc7 	bl	25e2a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1be9c:	2800      	cmp	r0, #0
   1be9e:	db0b      	blt.n	1beb8 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1bea0:	2501      	movs	r5, #1
   1bea2:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   1bea4:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1bea6:	4908      	ldr	r1, [pc, #32]	; (1bec8 <clk_init+0x54>)
   1bea8:	f104 0020 	add.w	r0, r4, #32
   1beac:	f009 ffbd 	bl	25e2a <onoff_manager_init>
		if (err < 0) {
   1beb0:	2800      	cmp	r0, #0
   1beb2:	db01      	blt.n	1beb8 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1beb4:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1beb6:	2000      	movs	r0, #0
}
   1beb8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1beba:	f06f 0004 	mvn.w	r0, #4
   1bebe:	e7fb      	b.n	1beb8 <clk_init+0x44>
   1bec0:	0001bf01 	.word	0x0001bf01
   1bec4:	0bad0000 	.word	0x0bad0000
   1bec8:	0002a0d8 	.word	0x0002a0d8

0001becc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1becc:	b570      	push	{r4, r5, r6, lr}
   1bece:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1bed0:	230c      	movs	r3, #12
   1bed2:	4809      	ldr	r0, [pc, #36]	; (1bef8 <clkstarted_handle.constprop.0+0x2c>)
   1bed4:	434b      	muls	r3, r1
   1bed6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1bed8:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1bedc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1bede:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1bee0:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1bee2:	4418      	add	r0, r3
   1bee4:	f00c fe14 	bl	28b10 <set_on_state>
	if (callback) {
   1bee8:	b12d      	cbz	r5, 1bef6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1beea:	4632      	mov	r2, r6
   1beec:	462b      	mov	r3, r5
   1beee:	4803      	ldr	r0, [pc, #12]	; (1befc <clkstarted_handle.constprop.0+0x30>)
}
   1bef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1bef4:	4718      	bx	r3
}
   1bef6:	bd70      	pop	{r4, r5, r6, pc}
   1bef8:	200027dc 	.word	0x200027dc
   1befc:	00029708 	.word	0x00029708

0001bf00 <clock_event_handler>:
	switch (event) {
   1bf00:	2801      	cmp	r0, #1
{
   1bf02:	b508      	push	{r3, lr}
	switch (event) {
   1bf04:	d006      	beq.n	1bf14 <clock_event_handler+0x14>
   1bf06:	2803      	cmp	r0, #3
   1bf08:	d008      	beq.n	1bf1c <clock_event_handler+0x1c>
   1bf0a:	b990      	cbnz	r0, 1bf32 <clock_event_handler+0x32>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1bf0c:	4b0e      	ldr	r3, [pc, #56]	; (1bf48 <clock_event_handler+0x48>)
   1bf0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bf10:	075b      	lsls	r3, r3, #29
   1bf12:	d117      	bne.n	1bf44 <clock_event_handler+0x44>
}
   1bf14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1bf18:	f7ff bfd8 	b.w	1becc <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1bf1c:	490b      	ldr	r1, [pc, #44]	; (1bf4c <clock_event_handler+0x4c>)
   1bf1e:	480c      	ldr	r0, [pc, #48]	; (1bf50 <clock_event_handler+0x50>)
   1bf20:	f240 225f 	movw	r2, #607	; 0x25f
   1bf24:	f00a f80c 	bl	25f40 <assert_print>
   1bf28:	f240 215f 	movw	r1, #607	; 0x25f
		__ASSERT_NO_MSG(0);
   1bf2c:	4807      	ldr	r0, [pc, #28]	; (1bf4c <clock_event_handler+0x4c>)
   1bf2e:	f00a f800 	bl	25f32 <assert_post_action>
   1bf32:	4906      	ldr	r1, [pc, #24]	; (1bf4c <clock_event_handler+0x4c>)
   1bf34:	4806      	ldr	r0, [pc, #24]	; (1bf50 <clock_event_handler+0x50>)
   1bf36:	f240 2263 	movw	r2, #611	; 0x263
   1bf3a:	f00a f801 	bl	25f40 <assert_print>
   1bf3e:	f240 2163 	movw	r1, #611	; 0x263
   1bf42:	e7f3      	b.n	1bf2c <clock_event_handler+0x2c>
}
   1bf44:	bd08      	pop	{r3, pc}
   1bf46:	bf00      	nop
   1bf48:	200027dc 	.word	0x200027dc
   1bf4c:	0002cd52 	.word	0x0002cd52
   1bf50:	0002a7df 	.word	0x0002a7df

0001bf54 <generic_hfclk_start>:
{
   1bf54:	b508      	push	{r3, lr}
	__asm__ volatile(
   1bf56:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf5a:	f3ef 8111 	mrs	r1, BASEPRI
   1bf5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf62:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1bf66:	4a12      	ldr	r2, [pc, #72]	; (1bfb0 <generic_hfclk_start+0x5c>)
   1bf68:	6813      	ldr	r3, [r2, #0]
   1bf6a:	f043 0002 	orr.w	r0, r3, #2
   1bf6e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1bf70:	07da      	lsls	r2, r3, #31
   1bf72:	d408      	bmi.n	1bf86 <generic_hfclk_start+0x32>
	__asm__ volatile(
   1bf74:	f381 8811 	msr	BASEPRI, r1
   1bf78:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1bf7c:	2001      	movs	r0, #1
}
   1bf7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1bf82:	f002 bcf3 	b.w	1e96c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1bf86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bf8a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1bf8e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1bf92:	07d3      	lsls	r3, r2, #31
   1bf94:	d5ee      	bpl.n	1bf74 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1bf96:	4807      	ldr	r0, [pc, #28]	; (1bfb4 <generic_hfclk_start+0x60>)
   1bf98:	f00c fdba 	bl	28b10 <set_on_state>
   1bf9c:	f381 8811 	msr	BASEPRI, r1
   1bfa0:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1bfa4:	2000      	movs	r0, #0
}
   1bfa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1bfaa:	f7ff bf8f 	b.w	1becc <clkstarted_handle.constprop.0>
   1bfae:	bf00      	nop
   1bfb0:	20002834 	.word	0x20002834
   1bfb4:	20002824 	.word	0x20002824

0001bfb8 <api_blocking_start>:
{
   1bfb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bfba:	2200      	movs	r2, #0
   1bfbc:	2301      	movs	r3, #1
   1bfbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1bfc2:	ab04      	add	r3, sp, #16
   1bfc4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bfc8:	4a09      	ldr	r2, [pc, #36]	; (1bff0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bfca:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bfce:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bfd0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bfd4:	f00c fddd 	bl	28b92 <api_start>
	if (err < 0) {
   1bfd8:	2800      	cmp	r0, #0
   1bfda:	db05      	blt.n	1bfe8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1bfdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1bfe0:	2300      	movs	r3, #0
   1bfe2:	4668      	mov	r0, sp
   1bfe4:	f004 fadc 	bl	205a0 <z_impl_k_sem_take>
}
   1bfe8:	b007      	add	sp, #28
   1bfea:	f85d fb04 	ldr.w	pc, [sp], #4
   1bfee:	bf00      	nop
   1bff0:	00028bb9 	.word	0x00028bb9

0001bff4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bff4:	4b09      	ldr	r3, [pc, #36]	; (1c01c <generic_hfclk_stop+0x28>)
   1bff6:	f3bf 8f5b 	dmb	ish
   1bffa:	e853 2f00 	ldrex	r2, [r3]
   1bffe:	f022 0102 	bic.w	r1, r2, #2
   1c002:	e843 1000 	strex	r0, r1, [r3]
   1c006:	2800      	cmp	r0, #0
   1c008:	d1f7      	bne.n	1bffa <generic_hfclk_stop+0x6>
   1c00a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1c00e:	07d3      	lsls	r3, r2, #31
   1c010:	d402      	bmi.n	1c018 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1c012:	2001      	movs	r0, #1
   1c014:	f002 bcca 	b.w	1e9ac <nrfx_clock_stop>
}
   1c018:	4770      	bx	lr
   1c01a:	bf00      	nop
   1c01c:	20002834 	.word	0x20002834

0001c020 <z_nrf_clock_control_lf_on>:
{
   1c020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c024:	4944      	ldr	r1, [pc, #272]	; (1c138 <z_nrf_clock_control_lf_on+0x118>)
   1c026:	f3bf 8f5b 	dmb	ish
   1c02a:	4606      	mov	r6, r0
   1c02c:	2201      	movs	r2, #1
   1c02e:	e851 3f00 	ldrex	r3, [r1]
   1c032:	e841 2000 	strex	r0, r2, [r1]
   1c036:	2800      	cmp	r0, #0
   1c038:	d1f9      	bne.n	1c02e <z_nrf_clock_control_lf_on+0xe>
   1c03a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1c03e:	b99b      	cbnz	r3, 1c068 <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1c040:	493e      	ldr	r1, [pc, #248]	; (1c13c <z_nrf_clock_control_lf_on+0x11c>)
		err = onoff_request(mgr, &cli);
   1c042:	483f      	ldr	r0, [pc, #252]	; (1c140 <z_nrf_clock_control_lf_on+0x120>)
   1c044:	604b      	str	r3, [r1, #4]
   1c046:	60cb      	str	r3, [r1, #12]
   1c048:	608a      	str	r2, [r1, #8]
   1c04a:	f7f5 fa59 	bl	11500 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1c04e:	2800      	cmp	r0, #0
   1c050:	da0a      	bge.n	1c068 <z_nrf_clock_control_lf_on+0x48>
   1c052:	493c      	ldr	r1, [pc, #240]	; (1c144 <z_nrf_clock_control_lf_on+0x124>)
   1c054:	483c      	ldr	r0, [pc, #240]	; (1c148 <z_nrf_clock_control_lf_on+0x128>)
   1c056:	f240 2221 	movw	r2, #545	; 0x221
   1c05a:	f009 ff71 	bl	25f40 <assert_print>
   1c05e:	f240 2121 	movw	r1, #545	; 0x221
		__ASSERT_NO_MSG(false);
   1c062:	4838      	ldr	r0, [pc, #224]	; (1c144 <z_nrf_clock_control_lf_on+0x124>)
   1c064:	f009 ff65 	bl	25f32 <assert_post_action>
	switch (start_mode) {
   1c068:	b376      	cbz	r6, 1c0c8 <z_nrf_clock_control_lf_on+0xa8>
   1c06a:	1e73      	subs	r3, r6, #1
   1c06c:	2b01      	cmp	r3, #1
   1c06e:	d859      	bhi.n	1c124 <z_nrf_clock_control_lf_on+0x104>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c070:	2e01      	cmp	r6, #1
   1c072:	d107      	bne.n	1c084 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c078:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1c07c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1c080:	2b01      	cmp	r3, #1
   1c082:	d021      	beq.n	1c0c8 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c084:	f00d f916 	bl	292b4 <k_is_in_isr>
   1c088:	4605      	mov	r5, r0
   1c08a:	b9f8      	cbnz	r0, 1c0cc <z_nrf_clock_control_lf_on+0xac>
	return !z_sys_post_kernel;
   1c08c:	4b2f      	ldr	r3, [pc, #188]	; (1c14c <z_nrf_clock_control_lf_on+0x12c>)
   1c08e:	781b      	ldrb	r3, [r3, #0]
   1c090:	b1e3      	cbz	r3, 1c0cc <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENCLR = mask;
   1c092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c096:	2202      	movs	r2, #2
   1c098:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1c09c:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c09e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1c150 <z_nrf_clock_control_lf_on+0x130>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c0a2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1c0a6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c0aa:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c0ae:	03d2      	lsls	r2, r2, #15
   1c0b0:	d516      	bpl.n	1c0e0 <z_nrf_clock_control_lf_on+0xc0>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1c0b2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c0b6:	2b01      	cmp	r3, #1
   1c0b8:	d001      	beq.n	1c0be <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c0ba:	2e01      	cmp	r6, #1
   1c0bc:	d110      	bne.n	1c0e0 <z_nrf_clock_control_lf_on+0xc0>
	if (isr_mode) {
   1c0be:	b35d      	cbz	r5, 1c118 <z_nrf_clock_control_lf_on+0xf8>
   1c0c0:	f387 8811 	msr	BASEPRI, r7
   1c0c4:	f3bf 8f6f 	isb	sy
}
   1c0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c0cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c0d0:	f3ef 8711 	mrs	r7, BASEPRI
   1c0d4:	f383 8812 	msr	BASEPRI_MAX, r3
   1c0d8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c0dc:	2501      	movs	r5, #1
   1c0de:	e7de      	b.n	1c09e <z_nrf_clock_control_lf_on+0x7e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c0e0:	b1ad      	cbz	r5, 1c10e <z_nrf_clock_control_lf_on+0xee>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c0e2:	4638      	mov	r0, r7
   1c0e4:	f7f6 ffb4 	bl	13050 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c0e8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c0ec:	2b00      	cmp	r3, #0
   1c0ee:	d1da      	bne.n	1c0a6 <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c0f0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c0f4:	2a00      	cmp	r2, #0
   1c0f6:	d0d6      	beq.n	1c0a6 <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c0f8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1c0fc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c100:	2301      	movs	r3, #1
   1c102:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1c106:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c10a:	60a3      	str	r3, [r4, #8]
}
   1c10c:	e7cb      	b.n	1c0a6 <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   1c10e:	2100      	movs	r1, #0
   1c110:	2021      	movs	r0, #33	; 0x21
   1c112:	f005 fdcd 	bl	21cb0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c116:	e7e7      	b.n	1c0e8 <z_nrf_clock_control_lf_on+0xc8>
    p_reg->INTENSET = mask;
   1c118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c11c:	2202      	movs	r2, #2
   1c11e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c122:	e7d1      	b.n	1c0c8 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   1c124:	4907      	ldr	r1, [pc, #28]	; (1c144 <z_nrf_clock_control_lf_on+0x124>)
   1c126:	4808      	ldr	r0, [pc, #32]	; (1c148 <z_nrf_clock_control_lf_on+0x128>)
   1c128:	f240 2233 	movw	r2, #563	; 0x233
   1c12c:	f009 ff08 	bl	25f40 <assert_print>
   1c130:	f240 2133 	movw	r1, #563	; 0x233
   1c134:	e795      	b.n	1c062 <z_nrf_clock_control_lf_on+0x42>
   1c136:	bf00      	nop
   1c138:	200027d8 	.word	0x200027d8
   1c13c:	200027c8 	.word	0x200027c8
   1c140:	200027fc 	.word	0x200027fc
   1c144:	0002cd52 	.word	0x0002cd52
   1c148:	0002a7df 	.word	0x0002a7df
   1c14c:	200042d8 	.word	0x200042d8
   1c150:	e000e100 	.word	0xe000e100

0001c154 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1c154:	b508      	push	{r3, lr}
   1c156:	4807      	ldr	r0, [pc, #28]	; (1c174 <uart_console_init+0x20>)
   1c158:	f00d f870 	bl	2923c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1c15c:	b138      	cbz	r0, 1c16e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c15e:	4806      	ldr	r0, [pc, #24]	; (1c178 <uart_console_init+0x24>)
   1c160:	f7f7 fcd2 	bl	13b08 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c164:	4804      	ldr	r0, [pc, #16]	; (1c178 <uart_console_init+0x24>)
   1c166:	f7f4 fec1 	bl	10eec <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c16a:	2000      	movs	r0, #0
}
   1c16c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c16e:	f06f 0012 	mvn.w	r0, #18
   1c172:	e7fb      	b.n	1c16c <uart_console_init+0x18>
   1c174:	00029798 	.word	0x00029798
   1c178:	0001c17d 	.word	0x0001c17d

0001c17c <console_out>:
	if ('\n' == c) {
   1c17c:	280a      	cmp	r0, #10
{
   1c17e:	b538      	push	{r3, r4, r5, lr}
   1c180:	4d07      	ldr	r5, [pc, #28]	; (1c1a0 <console_out+0x24>)
   1c182:	4604      	mov	r4, r0
	if ('\n' == c) {
   1c184:	d104      	bne.n	1c190 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1c186:	68ab      	ldr	r3, [r5, #8]
   1c188:	210d      	movs	r1, #13
   1c18a:	685b      	ldr	r3, [r3, #4]
   1c18c:	4628      	mov	r0, r5
   1c18e:	4798      	blx	r3
   1c190:	68ab      	ldr	r3, [r5, #8]
   1c192:	4803      	ldr	r0, [pc, #12]	; (1c1a0 <console_out+0x24>)
   1c194:	685b      	ldr	r3, [r3, #4]
   1c196:	b2e1      	uxtb	r1, r4
   1c198:	4798      	blx	r3
}
   1c19a:	4620      	mov	r0, r4
   1c19c:	bd38      	pop	{r3, r4, r5, pc}
   1c19e:	bf00      	nop
   1c1a0:	00029798 	.word	0x00029798

0001c1a4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1c1a4:	b510      	push	{r4, lr}
	return port->data;
   1c1a6:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1c1a8:	b941      	cbnz	r1, 1c1bc <gpio_nrfx_manage_callback+0x18>
   1c1aa:	491c      	ldr	r1, [pc, #112]	; (1c21c <gpio_nrfx_manage_callback+0x78>)
   1c1ac:	481c      	ldr	r0, [pc, #112]	; (1c220 <gpio_nrfx_manage_callback+0x7c>)
   1c1ae:	222a      	movs	r2, #42	; 0x2a
   1c1b0:	f009 fec6 	bl	25f40 <assert_print>
   1c1b4:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1c1b6:	4819      	ldr	r0, [pc, #100]	; (1c21c <gpio_nrfx_manage_callback+0x78>)
   1c1b8:	f009 febb 	bl	25f32 <assert_post_action>
   1c1bc:	6848      	ldr	r0, [r1, #4]
   1c1be:	b930      	cbnz	r0, 1c1ce <gpio_nrfx_manage_callback+0x2a>
   1c1c0:	4916      	ldr	r1, [pc, #88]	; (1c21c <gpio_nrfx_manage_callback+0x78>)
   1c1c2:	4817      	ldr	r0, [pc, #92]	; (1c220 <gpio_nrfx_manage_callback+0x7c>)
   1c1c4:	222b      	movs	r2, #43	; 0x2b
   1c1c6:	f009 febb 	bl	25f40 <assert_print>
   1c1ca:	212b      	movs	r1, #43	; 0x2b
   1c1cc:	e7f3      	b.n	1c1b6 <gpio_nrfx_manage_callback+0x12>
	return list->head;
   1c1ce:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1c1d0:	b1f8      	cbz	r0, 1c212 <gpio_nrfx_manage_callback+0x6e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c1d2:	4288      	cmp	r0, r1
   1c1d4:	d119      	bne.n	1c20a <gpio_nrfx_manage_callback+0x66>
Z_GENLIST_REMOVE(slist, snode)
   1c1d6:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1c1d8:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1c1da:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c1dc:	42a1      	cmp	r1, r4
   1c1de:	d100      	bne.n	1c1e2 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   1c1e0:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1c1e2:	2000      	movs	r0, #0
   1c1e4:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1c1e6:	b12a      	cbz	r2, 1c1f4 <gpio_nrfx_manage_callback+0x50>
	return list->head;
   1c1e8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1c1ea:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c1ec:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c1ee:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c1f0:	b902      	cbnz	r2, 1c1f4 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1c1f2:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1c1f4:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c1f6:	e010      	b.n	1c21a <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c1f8:	4281      	cmp	r1, r0
   1c1fa:	d106      	bne.n	1c20a <gpio_nrfx_manage_callback+0x66>
	return node->next;
   1c1fc:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1c1fe:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c200:	6898      	ldr	r0, [r3, #8]
   1c202:	4281      	cmp	r1, r0
   1c204:	d1ed      	bne.n	1c1e2 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   1c206:	609c      	str	r4, [r3, #8]
}
   1c208:	e7eb      	b.n	1c1e2 <gpio_nrfx_manage_callback+0x3e>
	return node->next;
   1c20a:	4604      	mov	r4, r0
   1c20c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c20e:	2800      	cmp	r0, #0
   1c210:	d1f2      	bne.n	1c1f8 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1c212:	2a00      	cmp	r2, #0
   1c214:	d1e8      	bne.n	1c1e8 <gpio_nrfx_manage_callback+0x44>
				return -EINVAL;
   1c216:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1c21a:	bd10      	pop	{r4, pc}
   1c21c:	0002cdb8 	.word	0x0002cdb8
   1c220:	0002a7df 	.word	0x0002a7df

0001c224 <gpio_nrfx_pin_interrupt_configure>:
{
   1c224:	b530      	push	{r4, r5, lr}
	return port->config;
   1c226:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c228:	7b05      	ldrb	r5, [r0, #12]
   1c22a:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c22e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1c232:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c234:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c238:	d105      	bne.n	1c246 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1c23a:	4620      	mov	r0, r4
   1c23c:	f003 f8ee 	bl	1f41c <nrfx_gpiote_trigger_disable>
		return 0;
   1c240:	2000      	movs	r0, #0
}
   1c242:	b005      	add	sp, #20
   1c244:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c246:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c248:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c24c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c250:	d114      	bne.n	1c27c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1c252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c256:	bf0c      	ite	eq
   1c258:	2304      	moveq	r3, #4
   1c25a:	2305      	movne	r3, #5
   1c25c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c260:	2300      	movs	r3, #0
   1c262:	4619      	mov	r1, r3
   1c264:	aa02      	add	r2, sp, #8
   1c266:	4620      	mov	r0, r4
   1c268:	f002 feea 	bl	1f040 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c26c:	4b2b      	ldr	r3, [pc, #172]	; (1c31c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1c26e:	4298      	cmp	r0, r3
   1c270:	d150      	bne.n	1c314 <gpio_nrfx_pin_interrupt_configure+0xf0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c272:	2101      	movs	r1, #1
   1c274:	4620      	mov	r0, r4
   1c276:	f003 f86b 	bl	1f350 <nrfx_gpiote_trigger_enable>
	return 0;
   1c27a:	e7e1      	b.n	1c240 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c27c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c280:	d023      	beq.n	1c2ca <gpio_nrfx_pin_interrupt_configure+0xa6>
   1c282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c286:	bf14      	ite	ne
   1c288:	2301      	movne	r3, #1
   1c28a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c28c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1c290:	6883      	ldr	r3, [r0, #8]
   1c292:	40cb      	lsrs	r3, r1
   1c294:	07d8      	lsls	r0, r3, #31
   1c296:	d4e3      	bmi.n	1c260 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1c298:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1c29c:	d1e0      	bne.n	1c260 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1c29e:	0962      	lsrs	r2, r4, #5
   1c2a0:	f004 031f 	and.w	r3, r4, #31
   1c2a4:	d013      	beq.n	1c2ce <gpio_nrfx_pin_interrupt_configure+0xaa>
   1c2a6:	2a01      	cmp	r2, #1
   1c2a8:	d104      	bne.n	1c2b4 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1c2aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c2ae:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c2b0:	07d1      	lsls	r1, r2, #31
   1c2b2:	d414      	bmi.n	1c2de <gpio_nrfx_pin_interrupt_configure+0xba>
   1c2b4:	491a      	ldr	r1, [pc, #104]	; (1c320 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1c2b6:	481b      	ldr	r0, [pc, #108]	; (1c324 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1c2b8:	f240 2247 	movw	r2, #583	; 0x247
   1c2bc:	f009 fe40 	bl	25f40 <assert_print>
   1c2c0:	4817      	ldr	r0, [pc, #92]	; (1c320 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1c2c2:	f240 2147 	movw	r1, #583	; 0x247
   1c2c6:	f009 fe34 	bl	25f32 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c2ca:	2303      	movs	r3, #3
   1c2cc:	e7de      	b.n	1c28c <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1c2ce:	f04f 32ff 	mov.w	r2, #4294967295
   1c2d2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c2d4:	07d2      	lsls	r2, r2, #31
   1c2d6:	d5ed      	bpl.n	1c2b4 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1c2d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1c2dc:	e000      	b.n	1c2e0 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1c2de:	4a12      	ldr	r2, [pc, #72]	; (1c328 <gpio_nrfx_pin_interrupt_configure+0x104>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c2e0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1c2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c2e8:	07db      	lsls	r3, r3, #31
   1c2ea:	d4b9      	bmi.n	1c260 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c2ec:	f10d 0507 	add.w	r5, sp, #7
   1c2f0:	4629      	mov	r1, r5
   1c2f2:	4620      	mov	r0, r4
   1c2f4:	f002 ffc8 	bl	1f288 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c2f8:	4b0c      	ldr	r3, [pc, #48]	; (1c32c <gpio_nrfx_pin_interrupt_configure+0x108>)
   1c2fa:	4298      	cmp	r0, r3
   1c2fc:	d001      	beq.n	1c302 <gpio_nrfx_pin_interrupt_configure+0xde>
		trigger_config.p_in_channel = &ch;
   1c2fe:	9503      	str	r5, [sp, #12]
   1c300:	e7ae      	b.n	1c260 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c302:	4628      	mov	r0, r5
   1c304:	f003 f81e 	bl	1f344 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c308:	4b04      	ldr	r3, [pc, #16]	; (1c31c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1c30a:	4298      	cmp	r0, r3
   1c30c:	d0f7      	beq.n	1c2fe <gpio_nrfx_pin_interrupt_configure+0xda>
				return -ENOMEM;
   1c30e:	f06f 000b 	mvn.w	r0, #11
   1c312:	e796      	b.n	1c242 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1c314:	f06f 0015 	mvn.w	r0, #21
   1c318:	e793      	b.n	1c242 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1c31a:	bf00      	nop
   1c31c:	0bad0000 	.word	0x0bad0000
   1c320:	0002cdf4 	.word	0x0002cdf4
   1c324:	0002a7df 	.word	0x0002a7df
   1c328:	50000300 	.word	0x50000300
   1c32c:	0bad0004 	.word	0x0bad0004

0001c330 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c330:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c332:	f002 fff7 	bl	1f324 <nrfx_gpiote_is_init>
   1c336:	4604      	mov	r4, r0
   1c338:	b968      	cbnz	r0, 1c356 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c33a:	f002 ffcb 	bl	1f2d4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c33e:	4b08      	ldr	r3, [pc, #32]	; (1c360 <gpio_nrfx_init+0x30>)
   1c340:	4298      	cmp	r0, r3
   1c342:	d10a      	bne.n	1c35a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c344:	4807      	ldr	r0, [pc, #28]	; (1c364 <gpio_nrfx_init+0x34>)
   1c346:	4621      	mov	r1, r4
   1c348:	f002 ff98 	bl	1f27c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c34c:	4622      	mov	r2, r4
   1c34e:	2105      	movs	r1, #5
   1c350:	2006      	movs	r0, #6
   1c352:	f7f6 fee5 	bl	13120 <z_arm_irq_priority_set>
		return 0;
   1c356:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c358:	bd10      	pop	{r4, pc}
		return -EIO;
   1c35a:	f06f 0004 	mvn.w	r0, #4
   1c35e:	e7fb      	b.n	1c358 <gpio_nrfx_init+0x28>
   1c360:	0bad0000 	.word	0x0bad0000
   1c364:	0001c369 	.word	0x0001c369

0001c368 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c368:	0942      	lsrs	r2, r0, #5
{
   1c36a:	b570      	push	{r4, r5, r6, lr}
   1c36c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c36e:	d002      	beq.n	1c376 <nrfx_gpio_handler+0xe>
   1c370:	2a01      	cmp	r2, #1
   1c372:	d01a      	beq.n	1c3aa <nrfx_gpio_handler+0x42>
}
   1c374:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c376:	4e12      	ldr	r6, [pc, #72]	; (1c3c0 <nrfx_gpio_handler+0x58>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1c378:	6932      	ldr	r2, [r6, #16]
   1c37a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c37c:	2900      	cmp	r1, #0
   1c37e:	d0f9      	beq.n	1c374 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1c380:	f003 031f 	and.w	r3, r3, #31
   1c384:	2501      	movs	r5, #1
	return node->next;
   1c386:	680c      	ldr	r4, [r1, #0]
   1c388:	409d      	lsls	r5, r3
   1c38a:	2900      	cmp	r1, #0
   1c38c:	d0f2      	beq.n	1c374 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1c38e:	688a      	ldr	r2, [r1, #8]
   1c390:	402a      	ands	r2, r5
   1c392:	d00e      	beq.n	1c3b2 <nrfx_gpio_handler+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
   1c394:	684b      	ldr	r3, [r1, #4]
   1c396:	b953      	cbnz	r3, 1c3ae <nrfx_gpio_handler+0x46>
   1c398:	490a      	ldr	r1, [pc, #40]	; (1c3c4 <nrfx_gpio_handler+0x5c>)
   1c39a:	480b      	ldr	r0, [pc, #44]	; (1c3c8 <nrfx_gpio_handler+0x60>)
   1c39c:	224d      	movs	r2, #77	; 0x4d
   1c39e:	f009 fdcf 	bl	25f40 <assert_print>
   1c3a2:	4808      	ldr	r0, [pc, #32]	; (1c3c4 <nrfx_gpio_handler+0x5c>)
   1c3a4:	214d      	movs	r1, #77	; 0x4d
   1c3a6:	f009 fdc4 	bl	25f32 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c3aa:	4e08      	ldr	r6, [pc, #32]	; (1c3cc <nrfx_gpio_handler+0x64>)
   1c3ac:	e7e4      	b.n	1c378 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1c3ae:	4630      	mov	r0, r6
   1c3b0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c3b2:	b11c      	cbz	r4, 1c3bc <nrfx_gpio_handler+0x54>
   1c3b4:	6823      	ldr	r3, [r4, #0]
   1c3b6:	4621      	mov	r1, r4
   1c3b8:	461c      	mov	r4, r3
   1c3ba:	e7e6      	b.n	1c38a <nrfx_gpio_handler+0x22>
   1c3bc:	4623      	mov	r3, r4
   1c3be:	e7fa      	b.n	1c3b6 <nrfx_gpio_handler+0x4e>
   1c3c0:	00029738 	.word	0x00029738
   1c3c4:	0002cdb8 	.word	0x0002cdb8
   1c3c8:	0002a7df 	.word	0x0002a7df
   1c3cc:	00029720 	.word	0x00029720

0001c3d0 <gpio_nrfx_pin_configure>:
{
   1c3d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1c3d4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c3d8:	f898 300c 	ldrb.w	r3, [r8, #12]
   1c3dc:	f001 051f 	and.w	r5, r1, #31
   1c3e0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1c3e4:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c3e6:	4628      	mov	r0, r5
   1c3e8:	f10d 0103 	add.w	r1, sp, #3
{
   1c3ec:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c3ee:	f002 ff4b 	bl	1f288 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c3f2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c3f6:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c3f8:	d114      	bne.n	1c424 <gpio_nrfx_pin_configure+0x54>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1c3fa:	4628      	mov	r0, r5
   1c3fc:	f003 f838 	bl	1f470 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1c400:	4b48      	ldr	r3, [pc, #288]	; (1c524 <gpio_nrfx_pin_configure+0x154>)
   1c402:	429e      	cmp	r6, r3
   1c404:	d16f      	bne.n	1c4e6 <gpio_nrfx_pin_configure+0x116>
			err = nrfx_gpiote_channel_free(ch);
   1c406:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c40a:	f002 ff95 	bl	1f338 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c40e:	42b0      	cmp	r0, r6
   1c410:	d069      	beq.n	1c4e6 <gpio_nrfx_pin_configure+0x116>
   1c412:	4945      	ldr	r1, [pc, #276]	; (1c528 <gpio_nrfx_pin_configure+0x158>)
   1c414:	4845      	ldr	r0, [pc, #276]	; (1c52c <gpio_nrfx_pin_configure+0x15c>)
   1c416:	226a      	movs	r2, #106	; 0x6a
   1c418:	f009 fd92 	bl	25f40 <assert_print>
   1c41c:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c41e:	4842      	ldr	r0, [pc, #264]	; (1c528 <gpio_nrfx_pin_configure+0x158>)
   1c420:	f009 fd87 	bl	25f32 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c424:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c426:	4619      	mov	r1, r3
   1c428:	aa02      	add	r2, sp, #8
   1c42a:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c42c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c430:	f002 fe06 	bl	1f040 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c434:	4b3b      	ldr	r3, [pc, #236]	; (1c524 <gpio_nrfx_pin_configure+0x154>)
   1c436:	4298      	cmp	r0, r3
   1c438:	d004      	beq.n	1c444 <gpio_nrfx_pin_configure+0x74>
		return NRF_GPIO_PIN_PULLUP;
   1c43a:	f06f 0015 	mvn.w	r0, #21
}
   1c43e:	b004      	add	sp, #16
   1c440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1c444:	4286      	cmp	r6, r0
   1c446:	d10c      	bne.n	1c462 <gpio_nrfx_pin_configure+0x92>
		err = nrfx_gpiote_channel_free(ch);
   1c448:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c44c:	f002 ff74 	bl	1f338 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c450:	42b0      	cmp	r0, r6
   1c452:	d006      	beq.n	1c462 <gpio_nrfx_pin_configure+0x92>
   1c454:	4934      	ldr	r1, [pc, #208]	; (1c528 <gpio_nrfx_pin_configure+0x158>)
   1c456:	4835      	ldr	r0, [pc, #212]	; (1c52c <gpio_nrfx_pin_configure+0x15c>)
   1c458:	227c      	movs	r2, #124	; 0x7c
   1c45a:	f009 fd71 	bl	25f40 <assert_print>
   1c45e:	217c      	movs	r1, #124	; 0x7c
   1c460:	e7dd      	b.n	1c41e <gpio_nrfx_pin_configure+0x4e>
	if (flags & GPIO_OUTPUT) {
   1c462:	03a6      	lsls	r6, r4, #14
   1c464:	d54e      	bpl.n	1c504 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c466:	f240 3306 	movw	r3, #774	; 0x306
   1c46a:	4023      	ands	r3, r4
   1c46c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1c470:	d019      	beq.n	1c4a6 <gpio_nrfx_pin_configure+0xd6>
   1c472:	d80c      	bhi.n	1c48e <gpio_nrfx_pin_configure+0xbe>
   1c474:	2b06      	cmp	r3, #6
   1c476:	d017      	beq.n	1c4a8 <gpio_nrfx_pin_configure+0xd8>
   1c478:	d804      	bhi.n	1c484 <gpio_nrfx_pin_configure+0xb4>
   1c47a:	b1ab      	cbz	r3, 1c4a8 <gpio_nrfx_pin_configure+0xd8>
   1c47c:	2b02      	cmp	r3, #2
   1c47e:	d1dc      	bne.n	1c43a <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_D0S1;
   1c480:	2304      	movs	r3, #4
   1c482:	e011      	b.n	1c4a8 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1c488:	d1d7      	bne.n	1c43a <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_H0S1;
   1c48a:	2301      	movs	r3, #1
   1c48c:	e00c      	b.n	1c4a8 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c48e:	f240 2202 	movw	r2, #514	; 0x202
   1c492:	4293      	cmp	r3, r2
   1c494:	d029      	beq.n	1c4ea <gpio_nrfx_pin_configure+0x11a>
   1c496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1c49a:	d028      	beq.n	1c4ee <gpio_nrfx_pin_configure+0x11e>
   1c49c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c4a0:	d1cb      	bne.n	1c43a <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_S0H1;
   1c4a2:	2302      	movs	r3, #2
   1c4a4:	e000      	b.n	1c4a8 <gpio_nrfx_pin_configure+0xd8>
		*drive = NRF_GPIO_PIN_H0D1;
   1c4a6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1c4a8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1c4ac:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1c4b0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1c4b4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1c4b6:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1c4ba:	bf54      	ite	pl
   1c4bc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1c4c0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c4c2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1c4c4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c4c8:	d513      	bpl.n	1c4f2 <gpio_nrfx_pin_configure+0x122>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1c4ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c4ce:	2301      	movs	r3, #1
   1c4d0:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1c4d2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1c4d6:	2200      	movs	r2, #0
   1c4d8:	a901      	add	r1, sp, #4
   1c4da:	4628      	mov	r0, r5
   1c4dc:	f002 fe5a 	bl	1f194 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c4e0:	4b10      	ldr	r3, [pc, #64]	; (1c524 <gpio_nrfx_pin_configure+0x154>)
   1c4e2:	4298      	cmp	r0, r3
   1c4e4:	d1a9      	bne.n	1c43a <gpio_nrfx_pin_configure+0x6a>
   1c4e6:	2000      	movs	r0, #0
   1c4e8:	e7a9      	b.n	1c43e <gpio_nrfx_pin_configure+0x6e>
		*drive = NRF_GPIO_PIN_D0H1;
   1c4ea:	2305      	movs	r3, #5
   1c4ec:	e7dc      	b.n	1c4a8 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c4ee:	2303      	movs	r3, #3
   1c4f0:	e7da      	b.n	1c4a8 <gpio_nrfx_pin_configure+0xd8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1c4f2:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1c4f4:	bf41      	itttt	mi
   1c4f6:	2301      	movmi	r3, #1
   1c4f8:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1c4fc:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1c4fe:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1c502:	e7e8      	b.n	1c4d6 <gpio_nrfx_pin_configure+0x106>
	if (flags & GPIO_PULL_UP) {
   1c504:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c506:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1c50a:	bf54      	ite	pl
   1c50c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1c510:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c512:	461a      	mov	r2, r3
   1c514:	a901      	add	r1, sp, #4
   1c516:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1c518:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c51c:	f002 fd90 	bl	1f040 <nrfx_gpiote_input_configure>
   1c520:	e7de      	b.n	1c4e0 <gpio_nrfx_pin_configure+0x110>
   1c522:	bf00      	nop
   1c524:	0bad0000 	.word	0x0bad0000
   1c528:	0002ce27 	.word	0x0002ce27
   1c52c:	0002a7df 	.word	0x0002a7df

0001c530 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1c530:	4b02      	ldr	r3, [pc, #8]	; (1c53c <flash_nrf_pages_layout+0xc>)
   1c532:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1c534:	2301      	movs	r3, #1
   1c536:	6013      	str	r3, [r2, #0]
}
   1c538:	4770      	bx	lr
   1c53a:	bf00      	nop
   1c53c:	20002850 	.word	0x20002850

0001c540 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1c540:	4800      	ldr	r0, [pc, #0]	; (1c544 <flash_nrf_get_parameters+0x4>)
   1c542:	4770      	bx	lr
   1c544:	0002a170 	.word	0x0002a170

0001c548 <flash_nrf_read>:
{
   1c548:	b570      	push	{r4, r5, r6, lr}
   1c54a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1c54c:	4628      	mov	r0, r5
   1c54e:	4619      	mov	r1, r3
{
   1c550:	4616      	mov	r6, r2
   1c552:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1c554:	f00c fb62 	bl	28c1c <is_regular_addr_valid>
   1c558:	b940      	cbnz	r0, 1c56c <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c55a:	4808      	ldr	r0, [pc, #32]	; (1c57c <flash_nrf_read+0x34>)
   1c55c:	4623      	mov	r3, r4
   1c55e:	462a      	mov	r2, r5
   1c560:	2145      	movs	r1, #69	; 0x45
   1c562:	f009 fcfb 	bl	25f5c <z_log_minimal_printk>
   1c566:	f06f 0015 	mvn.w	r0, #21
}
   1c56a:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1c56c:	b124      	cbz	r4, 1c578 <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
   1c56e:	4622      	mov	r2, r4
   1c570:	4629      	mov	r1, r5
   1c572:	4630      	mov	r0, r6
   1c574:	f00a fb82 	bl	26c7c <memcpy>
		return 0;
   1c578:	2000      	movs	r0, #0
   1c57a:	e7f6      	b.n	1c56a <flash_nrf_read+0x22>
   1c57c:	0002ce6f 	.word	0x0002ce6f

0001c580 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1c580:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c582:	2201      	movs	r2, #1
   1c584:	4611      	mov	r1, r2
   1c586:	4807      	ldr	r0, [pc, #28]	; (1c5a4 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1c588:	4c07      	ldr	r4, [pc, #28]	; (1c5a8 <nrf_flash_init+0x28>)
   1c58a:	f00c fee4 	bl	29356 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1c58e:	f002 fa89 	bl	1eaa4 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1c592:	f00c fe47 	bl	29224 <nrfx_nvmc_flash_page_count_get>
   1c596:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1c598:	f00c fe40 	bl	2921c <nrfx_nvmc_flash_page_size_get>
   1c59c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1c59e:	2000      	movs	r0, #0
   1c5a0:	bd10      	pop	{r4, pc}
   1c5a2:	bf00      	nop
   1c5a4:	20002858 	.word	0x20002858
   1c5a8:	20002850 	.word	0x20002850

0001c5ac <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   1c5ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1c5b0:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   1c5b4:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1c5b8:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1c5bc:	f023 031f 	bic.w	r3, r3, #31
   1c5c0:	430b      	orrs	r3, r1
    pofcon |=
   1c5c2:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   1c5c6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   1c5ca:	4b02      	ldr	r3, [pc, #8]	; (1c5d4 <restore_pofwarn.part.0+0x28>)
   1c5cc:	2200      	movs	r2, #0
   1c5ce:	701a      	strb	r2, [r3, #0]
	}
}
   1c5d0:	4770      	bx	lr
   1c5d2:	bf00      	nop
   1c5d4:	20003687 	.word	0x20003687

0001c5d8 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c5d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c5dc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1c5e0:	2b08      	cmp	r3, #8
   1c5e2:	d120      	bne.n	1c626 <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   1c5e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1c5e8:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   1c5ec:	07cb      	lsls	r3, r1, #31
   1c5ee:	d51a      	bpl.n	1c626 <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   1c5f0:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   1c5f4:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1c5f8:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   1c5fc:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   1c5fe:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c602:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1c606:	b15b      	cbz	r3, 1c620 <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   1c608:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1c60c:	f023 031f 	bic.w	r3, r3, #31
   1c610:	430b      	orrs	r3, r1
    pofcon |=
   1c612:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   1c616:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   1c61a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1c61e:	4770      	bx	lr
		pofcon_enabled = enabled;
   1c620:	4b02      	ldr	r3, [pc, #8]	; (1c62c <suspend_pofwarn+0x54>)
   1c622:	2201      	movs	r2, #1
   1c624:	701a      	strb	r2, [r3, #0]
		return 0;
   1c626:	2000      	movs	r0, #0
}
   1c628:	4770      	bx	lr
   1c62a:	bf00      	nop
   1c62c:	20003687 	.word	0x20003687

0001c630 <erase_op>:
{
   1c630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c632:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c634:	f00c fdf2 	bl	2921c <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1c638:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c63a:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1c63c:	b10b      	cbz	r3, 1c642 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1c63e:	f00c fd4c 	bl	290da <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1c642:	4f13      	ldr	r7, [pc, #76]	; (1c690 <erase_op+0x60>)
{
   1c644:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   1c646:	f7ff ffc7 	bl	1c5d8 <suspend_pofwarn>
   1c64a:	b9e8      	cbnz	r0, 1c688 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1c64c:	6860      	ldr	r0, [r4, #4]
   1c64e:	f003 f81f 	bl	1f690 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1c652:	68a3      	ldr	r3, [r4, #8]
   1c654:	1b5b      	subs	r3, r3, r5
   1c656:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1c658:	6863      	ldr	r3, [r4, #4]
   1c65a:	442b      	add	r3, r5
   1c65c:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1c65e:	783b      	ldrb	r3, [r7, #0]
   1c660:	b10b      	cbz	r3, 1c666 <erase_op+0x36>
   1c662:	f7ff ffa3 	bl	1c5ac <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   1c666:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1c668:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1c66a:	b93b      	cbnz	r3, 1c67c <erase_op+0x4c>
	} while (e_ctx->len > 0);
   1c66c:	68a3      	ldr	r3, [r4, #8]
   1c66e:	2b00      	cmp	r3, #0
   1c670:	d1e9      	bne.n	1c646 <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1c672:	68a0      	ldr	r0, [r4, #8]
   1c674:	3800      	subs	r0, #0
   1c676:	bf18      	it	ne
   1c678:	2001      	movne	r0, #1
}
   1c67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   1c67c:	4630      	mov	r0, r6
   1c67e:	f002 fac9 	bl	1ec14 <nrf_flash_sync_check_time_limit>
   1c682:	2800      	cmp	r0, #0
   1c684:	d0f2      	beq.n	1c66c <erase_op+0x3c>
   1c686:	e7f4      	b.n	1c672 <erase_op+0x42>
			return -ECANCELED;
   1c688:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1c68c:	e7f5      	b.n	1c67a <erase_op+0x4a>
   1c68e:	bf00      	nop
   1c690:	20003687 	.word	0x20003687

0001c694 <flash_nrf_erase>:
{
   1c694:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c696:	b087      	sub	sp, #28
   1c698:	460e      	mov	r6, r1
   1c69a:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c69c:	f00c fdbe 	bl	2921c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1c6a0:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c6a2:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1c6a4:	4630      	mov	r0, r6
   1c6a6:	f00c fab9 	bl	28c1c <is_regular_addr_valid>
   1c6aa:	b358      	cbz	r0, 1c704 <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1c6ac:	fbb6 f3f7 	udiv	r3, r6, r7
   1c6b0:	fb07 6313 	mls	r3, r7, r3, r6
   1c6b4:	b923      	cbnz	r3, 1c6c0 <flash_nrf_erase+0x2c>
   1c6b6:	fbb5 f4f7 	udiv	r4, r5, r7
   1c6ba:	fb07 5414 	mls	r4, r7, r4, r5
   1c6be:	b154      	cbz	r4, 1c6d6 <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1c6c0:	481f      	ldr	r0, [pc, #124]	; (1c740 <flash_nrf_erase+0xac>)
   1c6c2:	462b      	mov	r3, r5
   1c6c4:	4632      	mov	r2, r6
   1c6c6:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c6c8:	f009 fc48 	bl	25f5c <z_log_minimal_printk>
			return -EINVAL;
   1c6cc:	f06f 0415 	mvn.w	r4, #21
}
   1c6d0:	4620      	mov	r0, r4
   1c6d2:	b007      	add	sp, #28
   1c6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1c6d6:	42bd      	cmp	r5, r7
   1c6d8:	d3fa      	bcc.n	1c6d0 <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1c6da:	f04f 33ff 	mov.w	r3, #4294967295
   1c6de:	f04f 32ff 	mov.w	r2, #4294967295
   1c6e2:	4818      	ldr	r0, [pc, #96]	; (1c744 <flash_nrf_erase+0xb0>)
   1c6e4:	f003 ff5c 	bl	205a0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1c6e8:	f00c fcf5 	bl	290d6 <nrf_flash_sync_is_required>
   1c6ec:	ab02      	add	r3, sp, #8
   1c6ee:	4601      	mov	r1, r0
   1c6f0:	b968      	cbnz	r0, 1c70e <flash_nrf_erase+0x7a>
	struct flash_context context = {
   1c6f2:	2210      	movs	r2, #16
   1c6f4:	4618      	mov	r0, r3
   1c6f6:	f00a facc 	bl	26c92 <memset>
   1c6fa:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   1c6fe:	f7ff ff97 	bl	1c630 <erase_op>
   1c702:	e017      	b.n	1c734 <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c704:	4810      	ldr	r0, [pc, #64]	; (1c748 <flash_nrf_erase+0xb4>)
   1c706:	462b      	mov	r3, r5
   1c708:	4632      	mov	r2, r6
   1c70a:	2145      	movs	r1, #69	; 0x45
   1c70c:	e7dc      	b.n	1c6c8 <flash_nrf_erase+0x34>
	struct flash_context context = {
   1c70e:	2210      	movs	r2, #16
   1c710:	4621      	mov	r1, r4
   1c712:	4618      	mov	r0, r3
   1c714:	f00a fabd 	bl	26c92 <memset>
   1c718:	2201      	movs	r2, #1
   1c71a:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1c71e:	4a0b      	ldr	r2, [pc, #44]	; (1c74c <flash_nrf_erase+0xb8>)
   1c720:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1c724:	480a      	ldr	r0, [pc, #40]	; (1c750 <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   1c726:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1c72a:	f002 f9c3 	bl	1eab4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1c72e:	4668      	mov	r0, sp
   1c730:	f002 f9c6 	bl	1eac0 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1c734:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1c736:	4803      	ldr	r0, [pc, #12]	; (1c744 <flash_nrf_erase+0xb0>)
   1c738:	f003 fef8 	bl	2052c <z_impl_k_sem_give>
}
   1c73c:	e7c8      	b.n	1c6d0 <flash_nrf_erase+0x3c>
   1c73e:	bf00      	nop
   1c740:	0002ce91 	.word	0x0002ce91
   1c744:	20002858 	.word	0x20002858
   1c748:	0002ce6f 	.word	0x0002ce6f
   1c74c:	0001c631 	.word	0x0001c631
   1c750:	00015e64 	.word	0x00015e64

0001c754 <write_op>:
{
   1c754:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   1c756:	7b03      	ldrb	r3, [r0, #12]
{
   1c758:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1c75a:	b10b      	cbz	r3, 1c760 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1c75c:	f00c fcbd 	bl	290da <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1c760:	4e19      	ldr	r6, [pc, #100]	; (1c7c8 <write_op+0x74>)
{
   1c762:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1c764:	68a3      	ldr	r3, [r4, #8]
   1c766:	2b03      	cmp	r3, #3
   1c768:	d806      	bhi.n	1c778 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1c76a:	4a18      	ldr	r2, [pc, #96]	; (1c7cc <write_op+0x78>)
   1c76c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1c770:	07db      	lsls	r3, r3, #31
   1c772:	d5fb      	bpl.n	1c76c <write_op+0x18>
	return FLASH_OP_DONE;
   1c774:	2000      	movs	r0, #0
}
   1c776:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   1c778:	f7ff ff2e 	bl	1c5d8 <suspend_pofwarn>
   1c77c:	bb08      	cbnz	r0, 1c7c2 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1c77e:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1c780:	6860      	ldr	r0, [r4, #4]
   1c782:	6819      	ldr	r1, [r3, #0]
   1c784:	f002 ffb8 	bl	1f6f8 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1c788:	7833      	ldrb	r3, [r6, #0]
   1c78a:	b10b      	cbz	r3, 1c790 <write_op+0x3c>
   1c78c:	f7ff ff0e 	bl	1c5ac <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   1c790:	6863      	ldr	r3, [r4, #4]
   1c792:	3304      	adds	r3, #4
   1c794:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1c796:	6823      	ldr	r3, [r4, #0]
   1c798:	3304      	adds	r3, #4
   1c79a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1c79c:	68a3      	ldr	r3, [r4, #8]
   1c79e:	3b04      	subs	r3, #4
   1c7a0:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1c7a2:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1c7a4:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1c7a6:	2b00      	cmp	r3, #0
   1c7a8:	d0dc      	beq.n	1c764 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   1c7aa:	4628      	mov	r0, r5
   1c7ac:	f002 fa32 	bl	1ec14 <nrf_flash_sync_check_time_limit>
   1c7b0:	2800      	cmp	r0, #0
   1c7b2:	d0d7      	beq.n	1c764 <write_op+0x10>
   1c7b4:	4a05      	ldr	r2, [pc, #20]	; (1c7cc <write_op+0x78>)
   1c7b6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1c7ba:	07d9      	lsls	r1, r3, #31
   1c7bc:	d5fb      	bpl.n	1c7b6 <write_op+0x62>
				return FLASH_OP_ONGOING;
   1c7be:	2001      	movs	r0, #1
   1c7c0:	e7d9      	b.n	1c776 <write_op+0x22>
			return -ECANCELED;
   1c7c2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1c7c6:	e7d6      	b.n	1c776 <write_op+0x22>
   1c7c8:	20003687 	.word	0x20003687
   1c7cc:	4001e000 	.word	0x4001e000

0001c7d0 <flash_nrf_write>:
{
   1c7d0:	b570      	push	{r4, r5, r6, lr}
   1c7d2:	460d      	mov	r5, r1
   1c7d4:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1c7d6:	4619      	mov	r1, r3
   1c7d8:	4628      	mov	r0, r5
{
   1c7da:	4616      	mov	r6, r2
   1c7dc:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1c7de:	f00c fa1d 	bl	28c1c <is_regular_addr_valid>
   1c7e2:	b950      	cbnz	r0, 1c7fa <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c7e4:	481d      	ldr	r0, [pc, #116]	; (1c85c <flash_nrf_write+0x8c>)
   1c7e6:	4623      	mov	r3, r4
   1c7e8:	462a      	mov	r2, r5
   1c7ea:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1c7ec:	f009 fbb6 	bl	25f5c <z_log_minimal_printk>
		return -EINVAL;
   1c7f0:	f06f 0415 	mvn.w	r4, #21
}
   1c7f4:	4620      	mov	r0, r4
   1c7f6:	b006      	add	sp, #24
   1c7f8:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1c7fa:	ea45 0304 	orr.w	r3, r5, r4
   1c7fe:	079b      	lsls	r3, r3, #30
   1c800:	d004      	beq.n	1c80c <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1c802:	4817      	ldr	r0, [pc, #92]	; (1c860 <flash_nrf_write+0x90>)
   1c804:	4623      	mov	r3, r4
   1c806:	462a      	mov	r2, r5
   1c808:	2145      	movs	r1, #69	; 0x45
   1c80a:	e7ef      	b.n	1c7ec <flash_nrf_write+0x1c>
	if (!len) {
   1c80c:	2c00      	cmp	r4, #0
   1c80e:	d0f1      	beq.n	1c7f4 <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   1c810:	f04f 33ff 	mov.w	r3, #4294967295
   1c814:	f04f 32ff 	mov.w	r2, #4294967295
   1c818:	4812      	ldr	r0, [pc, #72]	; (1c864 <flash_nrf_write+0x94>)
   1c81a:	f003 fec1 	bl	205a0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1c81e:	f00c fc5a 	bl	290d6 <nrf_flash_sync_is_required>
   1c822:	4603      	mov	r3, r0
	struct flash_context context = {
   1c824:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1c828:	a802      	add	r0, sp, #8
   1c82a:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1c82c:	b18b      	cbz	r3, 1c852 <flash_nrf_write+0x82>
	struct flash_context context = {
   1c82e:	2301      	movs	r3, #1
   1c830:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1c834:	4b0c      	ldr	r3, [pc, #48]	; (1c868 <flash_nrf_write+0x98>)
   1c836:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1c83a:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1c83e:	f002 f939 	bl	1eab4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1c842:	4668      	mov	r0, sp
   1c844:	f002 f93c 	bl	1eac0 <nrf_flash_sync_exe>
	return write_op(&context);
   1c848:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1c84a:	4806      	ldr	r0, [pc, #24]	; (1c864 <flash_nrf_write+0x94>)
   1c84c:	f003 fe6e 	bl	2052c <z_impl_k_sem_give>
}
   1c850:	e7d0      	b.n	1c7f4 <flash_nrf_write+0x24>
	struct flash_context context = {
   1c852:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1c856:	f7ff ff7d 	bl	1c754 <write_op>
   1c85a:	e7f5      	b.n	1c848 <flash_nrf_write+0x78>
   1c85c:	0002ce6f 	.word	0x0002ce6f
   1c860:	0002ceb5 	.word	0x0002ceb5
   1c864:	20002858 	.word	0x20002858
   1c868:	0001c755 	.word	0x0001c755

0001c86c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1c86c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1c86e:	794b      	ldrb	r3, [r1, #5]
   1c870:	2b01      	cmp	r3, #1
   1c872:	d026      	beq.n	1c8c2 <uarte_nrfx_configure+0x56>
   1c874:	2b03      	cmp	r3, #3
   1c876:	d121      	bne.n	1c8bc <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1c878:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1c87a:	798b      	ldrb	r3, [r1, #6]
   1c87c:	2b03      	cmp	r3, #3
   1c87e:	d11d      	bne.n	1c8bc <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1c880:	79ce      	ldrb	r6, [r1, #7]
   1c882:	b10e      	cbz	r6, 1c888 <uarte_nrfx_configure+0x1c>
   1c884:	2e01      	cmp	r6, #1
   1c886:	d119      	bne.n	1c8bc <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1c888:	790a      	ldrb	r2, [r1, #4]
   1c88a:	b112      	cbz	r2, 1c892 <uarte_nrfx_configure+0x26>
   1c88c:	2a02      	cmp	r2, #2
   1c88e:	d115      	bne.n	1c8bc <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1c890:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1c892:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1c894:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1c896:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1c89a:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1c89c:	d067      	beq.n	1c96e <uarte_nrfx_configure+0x102>
   1c89e:	d82d      	bhi.n	1c8fc <uarte_nrfx_configure+0x90>
   1c8a0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1c8a4:	d066      	beq.n	1c974 <uarte_nrfx_configure+0x108>
   1c8a6:	d816      	bhi.n	1c8d6 <uarte_nrfx_configure+0x6a>
   1c8a8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1c8ac:	d064      	beq.n	1c978 <uarte_nrfx_configure+0x10c>
   1c8ae:	d80a      	bhi.n	1c8c6 <uarte_nrfx_configure+0x5a>
   1c8b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1c8b4:	d063      	beq.n	1c97e <uarte_nrfx_configure+0x112>
   1c8b6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1c8ba:	d063      	beq.n	1c984 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1c8bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c8c0:	e054      	b.n	1c96c <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1c8c2:	2500      	movs	r5, #0
   1c8c4:	e7d9      	b.n	1c87a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1c8c6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1c8ca:	d05e      	beq.n	1c98a <uarte_nrfx_configure+0x11e>
   1c8cc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1c8d0:	d1f4      	bne.n	1c8bc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1c8d2:	4b38      	ldr	r3, [pc, #224]	; (1c9b4 <uarte_nrfx_configure+0x148>)
   1c8d4:	e03c      	b.n	1c950 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c8d6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1c8da:	d059      	beq.n	1c990 <uarte_nrfx_configure+0x124>
   1c8dc:	d807      	bhi.n	1c8ee <uarte_nrfx_configure+0x82>
   1c8de:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1c8e2:	d057      	beq.n	1c994 <uarte_nrfx_configure+0x128>
   1c8e4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1c8e8:	d1e8      	bne.n	1c8bc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1c8ea:	4b33      	ldr	r3, [pc, #204]	; (1c9b8 <uarte_nrfx_configure+0x14c>)
   1c8ec:	e030      	b.n	1c950 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c8ee:	f647 2412 	movw	r4, #31250	; 0x7a12
   1c8f2:	42a3      	cmp	r3, r4
   1c8f4:	d1e2      	bne.n	1c8bc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1c8f6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1c8fa:	e029      	b.n	1c950 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c8fc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1c900:	d04a      	beq.n	1c998 <uarte_nrfx_configure+0x12c>
   1c902:	d813      	bhi.n	1c92c <uarte_nrfx_configure+0xc0>
   1c904:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1c908:	d049      	beq.n	1c99e <uarte_nrfx_configure+0x132>
   1c90a:	d809      	bhi.n	1c920 <uarte_nrfx_configure+0xb4>
   1c90c:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1c910:	42a3      	cmp	r3, r4
   1c912:	d046      	beq.n	1c9a2 <uarte_nrfx_configure+0x136>
   1c914:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1c918:	d1d0      	bne.n	1c8bc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1c91a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1c91e:	e017      	b.n	1c950 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c920:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1c924:	d1ca      	bne.n	1c8bc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1c926:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1c92a:	e011      	b.n	1c950 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c92c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1c930:	d03a      	beq.n	1c9a8 <uarte_nrfx_configure+0x13c>
   1c932:	d808      	bhi.n	1c946 <uarte_nrfx_configure+0xda>
   1c934:	4c21      	ldr	r4, [pc, #132]	; (1c9bc <uarte_nrfx_configure+0x150>)
   1c936:	42a3      	cmp	r3, r4
   1c938:	d039      	beq.n	1c9ae <uarte_nrfx_configure+0x142>
   1c93a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1c93e:	d1bd      	bne.n	1c8bc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1c940:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1c944:	e004      	b.n	1c950 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c946:	4c1e      	ldr	r4, [pc, #120]	; (1c9c0 <uarte_nrfx_configure+0x154>)
   1c948:	42a3      	cmp	r3, r4
   1c94a:	d1b7      	bne.n	1c8bc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1c94c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1c950:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1c952:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1c956:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1c958:	4335      	orrs	r5, r6
   1c95a:	681b      	ldr	r3, [r3, #0]
   1c95c:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1c95e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1c962:	c903      	ldmia	r1, {r0, r1}
   1c964:	1d23      	adds	r3, r4, #4
   1c966:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1c96a:	2000      	movs	r0, #0
}
   1c96c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1c96e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1c972:	e7ed      	b.n	1c950 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1c974:	4b13      	ldr	r3, [pc, #76]	; (1c9c4 <uarte_nrfx_configure+0x158>)
   1c976:	e7eb      	b.n	1c950 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1c978:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1c97c:	e7e8      	b.n	1c950 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1c97e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1c982:	e7e5      	b.n	1c950 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c984:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1c988:	e7e2      	b.n	1c950 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1c98a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1c98e:	e7df      	b.n	1c950 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1c990:	4b0d      	ldr	r3, [pc, #52]	; (1c9c8 <uarte_nrfx_configure+0x15c>)
   1c992:	e7dd      	b.n	1c950 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1c994:	4b0d      	ldr	r3, [pc, #52]	; (1c9cc <uarte_nrfx_configure+0x160>)
   1c996:	e7db      	b.n	1c950 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1c998:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1c99c:	e7d8      	b.n	1c950 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1c99e:	4b0c      	ldr	r3, [pc, #48]	; (1c9d0 <uarte_nrfx_configure+0x164>)
   1c9a0:	e7d6      	b.n	1c950 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1c9a2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1c9a6:	e7d3      	b.n	1c950 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1c9a8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c9ac:	e7d0      	b.n	1c950 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1c9ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1c9b2:	e7cd      	b.n	1c950 <uarte_nrfx_configure+0xe4>
   1c9b4:	0013b000 	.word	0x0013b000
   1c9b8:	004ea000 	.word	0x004ea000
   1c9bc:	0003d090 	.word	0x0003d090
   1c9c0:	000f4240 	.word	0x000f4240
   1c9c4:	00275000 	.word	0x00275000
   1c9c8:	0075c000 	.word	0x0075c000
   1c9cc:	003af000 	.word	0x003af000
   1c9d0:	013a9000 	.word	0x013a9000

0001c9d4 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1c9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c9d8:	4680      	mov	r8, r0
   1c9da:	2200      	movs	r2, #0
   1c9dc:	2101      	movs	r1, #1
   1c9de:	2002      	movs	r0, #2
   1c9e0:	f7f6 fb9e 	bl	13120 <z_arm_irq_priority_set>
   1c9e4:	2002      	movs	r0, #2
   1c9e6:	f7f6 fb6b 	bl	130c0 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1c9ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   1c9ee:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   1c9f2:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1c9f4:	2100      	movs	r1, #0
   1c9f6:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1c9fa:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1c9fe:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1ca02:	aa01      	add	r2, sp, #4
   1ca04:	4648      	mov	r0, r9
   1ca06:	f00c fa04 	bl	28e12 <pinctrl_lookup_state>
	if (ret < 0) {
   1ca0a:	1e05      	subs	r5, r0, #0
   1ca0c:	db1e      	blt.n	1ca4c <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1ca0e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1ca10:	f8d9 2000 	ldr.w	r2, [r9]
   1ca14:	7919      	ldrb	r1, [r3, #4]
   1ca16:	6818      	ldr	r0, [r3, #0]
   1ca18:	f00c fa11 	bl	28e3e <pinctrl_configure_pins>
	if (err < 0) {
   1ca1c:	1e05      	subs	r5, r0, #0
   1ca1e:	db15      	blt.n	1ca4c <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1ca20:	1d31      	adds	r1, r6, #4
   1ca22:	4640      	mov	r0, r8
   1ca24:	f7ff ff22 	bl	1c86c <uarte_nrfx_configure>
	if (err) {
   1ca28:	4605      	mov	r5, r0
   1ca2a:	b978      	cbnz	r0, 1ca4c <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1ca2c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1ca2e:	0799      	lsls	r1, r3, #30
   1ca30:	d524      	bpl.n	1ca7c <uarte_0_init+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1ca32:	f106 0018 	add.w	r0, r6, #24
   1ca36:	f002 fe8f 	bl	1f758 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1ca3a:	4b24      	ldr	r3, [pc, #144]	; (1cacc <uarte_0_init+0xf8>)
   1ca3c:	4298      	cmp	r0, r3
   1ca3e:	d009      	beq.n	1ca54 <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   1ca40:	4823      	ldr	r0, [pc, #140]	; (1cad0 <uarte_0_init+0xfc>)
   1ca42:	2145      	movs	r1, #69	; 0x45
   1ca44:	f009 fa8a 	bl	25f5c <z_log_minimal_printk>
		return -EIO;
   1ca48:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   1ca4c:	4628      	mov	r0, r5
   1ca4e:	b003      	add	sp, #12
   1ca50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ca54:	7e33      	ldrb	r3, [r6, #24]
   1ca56:	00db      	lsls	r3, r3, #3
   1ca58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ca5c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1ca60:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1ca64:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1ca68:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ca6c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1ca70:	7e32      	ldrb	r2, [r6, #24]
   1ca72:	2301      	movs	r3, #1
   1ca74:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1ca76:	4a17      	ldr	r2, [pc, #92]	; (1cad4 <uarte_0_init+0x100>)
   1ca78:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ca7c:	2308      	movs	r3, #8
   1ca7e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1ca82:	7a3b      	ldrb	r3, [r7, #8]
   1ca84:	b953      	cbnz	r3, 1ca9c <uarte_0_init+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca86:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1ca8a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ca8e:	6973      	ldr	r3, [r6, #20]
   1ca90:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1ca94:	2301      	movs	r3, #1
   1ca96:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca9a:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1ca9c:	687b      	ldr	r3, [r7, #4]
   1ca9e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1caa0:	bf5c      	itt	pl
   1caa2:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1caa6:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1caaa:	687b      	ldr	r3, [r7, #4]
   1caac:	06db      	lsls	r3, r3, #27
   1caae:	bf44      	itt	mi
   1cab0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1cab4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1cab8:	6933      	ldr	r3, [r6, #16]
   1caba:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1cabe:	2300      	movs	r3, #0
   1cac0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cac4:	2301      	movs	r3, #1
   1cac6:	60a3      	str	r3, [r4, #8]
   1cac8:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1caca:	e7bf      	b.n	1ca4c <uarte_0_init+0x78>
   1cacc:	0bad0000 	.word	0x0bad0000
   1cad0:	0002cefc 	.word	0x0002cefc
   1cad4:	4001f000 	.word	0x4001f000

0001cad8 <uarte_nrfx_poll_out>:
{
   1cad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cada:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1cadc:	6907      	ldr	r7, [r0, #16]
{
   1cade:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1cae0:	f00c fbe8 	bl	292b4 <k_is_in_isr>
   1cae4:	b9b0      	cbnz	r0, 1cb14 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1cae6:	4b2e      	ldr	r3, [pc, #184]	; (1cba0 <uarte_nrfx_poll_out+0xc8>)
   1cae8:	781b      	ldrb	r3, [r3, #0]
   1caea:	b19b      	cbz	r3, 1cb14 <uarte_nrfx_poll_out+0x3c>
{
   1caec:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1caee:	6860      	ldr	r0, [r4, #4]
   1caf0:	f00c f929 	bl	28d46 <is_tx_ready.isra.0>
   1caf4:	bb00      	cbnz	r0, 1cb38 <uarte_nrfx_poll_out+0x60>
   1caf6:	2001      	movs	r0, #1
   1caf8:	f00c fafc 	bl	290f4 <nrfx_busy_wait>
   1cafc:	3e01      	subs	r6, #1
   1cafe:	d1f6      	bne.n	1caee <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   1cb00:	2100      	movs	r1, #0
   1cb02:	2021      	movs	r0, #33	; 0x21
   1cb04:	f005 f8d4 	bl	21cb0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1cb08:	e7f0      	b.n	1caec <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   1cb0a:	f386 8811 	msr	BASEPRI, r6
   1cb0e:	f3bf 8f6f 	isb	sy
}
   1cb12:	e7f5      	b.n	1cb00 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1cb14:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb18:	f3ef 8611 	mrs	r6, BASEPRI
   1cb1c:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb20:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1cb24:	6860      	ldr	r0, [r4, #4]
   1cb26:	4631      	mov	r1, r6
   1cb28:	f00c f90d 	bl	28d46 <is_tx_ready.isra.0>
   1cb2c:	b990      	cbnz	r0, 1cb54 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1cb2e:	f386 8811 	msr	BASEPRI, r6
   1cb32:	f3bf 8f6f 	isb	sy
}
   1cb36:	e7ed      	b.n	1cb14 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   1cb38:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb3c:	f3ef 8611 	mrs	r6, BASEPRI
   1cb40:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb44:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1cb48:	6860      	ldr	r0, [r4, #4]
   1cb4a:	4631      	mov	r1, r6
   1cb4c:	f00c f8fb 	bl	28d46 <is_tx_ready.isra.0>
   1cb50:	2800      	cmp	r0, #0
   1cb52:	d0da      	beq.n	1cb0a <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1cb54:	693b      	ldr	r3, [r7, #16]
   1cb56:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   1cb58:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1cb5a:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1cb5c:	6813      	ldr	r3, [r2, #0]
   1cb5e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1cb62:	2001      	movs	r0, #1
   1cb64:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cb68:	2000      	movs	r0, #0
   1cb6a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1cb6e:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1cb72:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cb76:	6852      	ldr	r2, [r2, #4]
   1cb78:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1cb7c:	06d2      	lsls	r2, r2, #27
   1cb7e:	d508      	bpl.n	1cb92 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   1cb80:	6862      	ldr	r2, [r4, #4]
   1cb82:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1cb84:	2008      	movs	r0, #8
   1cb86:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1cb8a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1cb8e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cb92:	2201      	movs	r2, #1
   1cb94:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1cb96:	f381 8811 	msr	BASEPRI, r1
   1cb9a:	f3bf 8f6f 	isb	sy
}
   1cb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cba0:	200042d8 	.word	0x200042d8

0001cba4 <random_byte_get>:
	__asm__ volatile(
   1cba4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cba8:	f3ef 8211 	mrs	r2, BASEPRI
   1cbac:	f383 8812 	msr	BASEPRI_MAX, r3
   1cbb0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1cbb4:	4b09      	ldr	r3, [pc, #36]	; (1cbdc <random_byte_get+0x38>)
   1cbb6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1cbba:	b161      	cbz	r1, 1cbd6 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cbbc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1cbbe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cbc2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1cbc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1cbca:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1cbcc:	f382 8811 	msr	BASEPRI, r2
   1cbd0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1cbd4:	4770      	bx	lr
	int retval = -EAGAIN;
   1cbd6:	f06f 000a 	mvn.w	r0, #10
   1cbda:	e7f7      	b.n	1cbcc <random_byte_get+0x28>
   1cbdc:	4000d000 	.word	0x4000d000

0001cbe0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1cbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbe2:	4603      	mov	r3, r0
   1cbe4:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1cbe6:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1cbe8:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1cbec:	f04f 0540 	mov.w	r5, #64	; 0x40
   1cbf0:	f3ef 8211 	mrs	r2, BASEPRI
   1cbf4:	f385 8812 	msr	BASEPRI_MAX, r5
   1cbf8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1cbfc:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1cbfe:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1cc02:	1be4      	subs	r4, r4, r7
   1cc04:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1cc08:	42a0      	cmp	r0, r4
		len = available;
   1cc0a:	bf88      	it	hi
   1cc0c:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1cc0e:	183e      	adds	r6, r7, r0
   1cc10:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1cc14:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1cc16:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1cc18:	f382 8811 	msr	BASEPRI, r2
   1cc1c:	f3bf 8f6f 	isb	sy
   1cc20:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1cc22:	428a      	cmp	r2, r1
   1cc24:	d117      	bne.n	1cc56 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1cc26:	4577      	cmp	r7, lr
   1cc28:	d10d      	bne.n	1cc46 <rng_pool_get+0x66>
	__asm__ volatile(
   1cc2a:	f04f 0140 	mov.w	r1, #64	; 0x40
   1cc2e:	f3ef 8211 	mrs	r2, BASEPRI
   1cc32:	f381 8812 	msr	BASEPRI_MAX, r1
   1cc36:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1cc3a:	7819      	ldrb	r1, [r3, #0]
   1cc3c:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1cc3e:	f382 8811 	msr	BASEPRI, r2
   1cc42:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1cc46:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1cc48:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1cc4a:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1cc4c:	bf22      	ittt	cs
   1cc4e:	4b06      	ldrcs	r3, [pc, #24]	; (1cc68 <rng_pool_get+0x88>)
   1cc50:	2201      	movcs	r2, #1
   1cc52:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1cc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1cc56:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1cc58:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1cc5a:	7976      	ldrb	r6, [r6, #5]
   1cc5c:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1cc60:	ea05 050c 	and.w	r5, r5, ip
   1cc64:	e7dd      	b.n	1cc22 <rng_pool_get+0x42>
   1cc66:	bf00      	nop
   1cc68:	4000d000 	.word	0x4000d000

0001cc6c <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1cc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cc70:	4d2b      	ldr	r5, [pc, #172]	; (1cd20 <entropy_nrf5_get_entropy_isr+0xb4>)
   1cc72:	6900      	ldr	r0, [r0, #16]
   1cc74:	42a8      	cmp	r0, r5
{
   1cc76:	460e      	mov	r6, r1
   1cc78:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cc7a:	d00a      	beq.n	1cc92 <entropy_nrf5_get_entropy_isr+0x26>
   1cc7c:	4929      	ldr	r1, [pc, #164]	; (1cd24 <entropy_nrf5_get_entropy_isr+0xb8>)
   1cc7e:	482a      	ldr	r0, [pc, #168]	; (1cd28 <entropy_nrf5_get_entropy_isr+0xbc>)
   1cc80:	f240 1207 	movw	r2, #263	; 0x107
   1cc84:	f009 f95c 	bl	25f40 <assert_print>
   1cc88:	4826      	ldr	r0, [pc, #152]	; (1cd24 <entropy_nrf5_get_entropy_isr+0xb8>)
   1cc8a:	f240 1107 	movw	r1, #263	; 0x107
   1cc8e:	f009 f950 	bl	25f32 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1cc92:	43db      	mvns	r3, r3
   1cc94:	f013 0501 	ands.w	r5, r3, #1
   1cc98:	d004      	beq.n	1cca4 <entropy_nrf5_get_entropy_isr+0x38>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1cc9a:	3030      	adds	r0, #48	; 0x30
   1cc9c:	f7ff ffa0 	bl	1cbe0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1cca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1cca4:	b3a2      	cbz	r2, 1cd10 <entropy_nrf5_get_entropy_isr+0xa4>
	__asm__ volatile(
   1cca6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ccaa:	f3ef 8811 	mrs	r8, BASEPRI
   1ccae:	f383 8812 	msr	BASEPRI_MAX, r3
   1ccb2:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1ccb6:	200d      	movs	r0, #13
   1ccb8:	f7f6 fa24 	bl	13104 <arch_irq_is_enabled>
   1ccbc:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1ccbe:	200d      	movs	r0, #13
   1ccc0:	f7f6 fa0c 	bl	130dc <arch_irq_disable>
	__asm__ volatile(
   1ccc4:	f388 8811 	msr	BASEPRI, r8
   1ccc8:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cccc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1cd2c <entropy_nrf5_get_entropy_isr+0xc0>
   1ccd0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1cd30 <entropy_nrf5_get_entropy_isr+0xc4>
   1ccd4:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1ccd8:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1ccdc:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1cce0:	2301      	movs	r3, #1
   1cce2:	f8c8 3000 	str.w	r3, [r8]
   1cce6:	4625      	mov	r5, r4
   1cce8:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ccec:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1ccf0:	b183      	cbz	r3, 1cd14 <entropy_nrf5_get_entropy_isr+0xa8>
			byte = random_byte_get();
   1ccf2:	f7ff ff57 	bl	1cba4 <random_byte_get>
			if (byte < 0) {
   1ccf6:	1e03      	subs	r3, r0, #0
   1ccf8:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1ccfc:	dbf6      	blt.n	1ccec <entropy_nrf5_get_entropy_isr+0x80>
			buf[--len] = byte;
   1ccfe:	3d01      	subs	r5, #1
   1cd00:	b2ad      	uxth	r5, r5
   1cd02:	5573      	strb	r3, [r6, r5]
		} while (len);
   1cd04:	2d00      	cmp	r5, #0
   1cd06:	d1f1      	bne.n	1ccec <entropy_nrf5_get_entropy_isr+0x80>
		if (irq_enabled) {
   1cd08:	b117      	cbz	r7, 1cd10 <entropy_nrf5_get_entropy_isr+0xa4>
			irq_enable(IRQN);
   1cd0a:	200d      	movs	r0, #13
   1cd0c:	f7f6 f9d8 	bl	130c0 <arch_irq_enable>
	return cnt;
   1cd10:	4620      	mov	r0, r4
   1cd12:	e7c5      	b.n	1cca0 <entropy_nrf5_get_entropy_isr+0x34>
   1cd14:	f3bf 8f4f 	dsb	sy
				__WFE();
   1cd18:	bf20      	wfe
				__SEV();
   1cd1a:	bf40      	sev
				__WFE();
   1cd1c:	bf20      	wfe
   1cd1e:	e7e5      	b.n	1ccec <entropy_nrf5_get_entropy_isr+0x80>
   1cd20:	20002870 	.word	0x20002870
   1cd24:	0002cf3e 	.word	0x0002cf3e
   1cd28:	0002a7df 	.word	0x0002a7df
   1cd2c:	4000d000 	.word	0x4000d000
   1cd30:	e000e100 	.word	0xe000e100

0001cd34 <entropy_nrf5_get_entropy>:
{
   1cd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cd38:	4b18      	ldr	r3, [pc, #96]	; (1cd9c <entropy_nrf5_get_entropy+0x68>)
   1cd3a:	6907      	ldr	r7, [r0, #16]
   1cd3c:	429f      	cmp	r7, r3
{
   1cd3e:	460d      	mov	r5, r1
   1cd40:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cd42:	d105      	bne.n	1cd50 <entropy_nrf5_get_entropy+0x1c>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1cd44:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1cd48:	b95c      	cbnz	r4, 1cd62 <entropy_nrf5_get_entropy+0x2e>
}
   1cd4a:	4620      	mov	r0, r4
   1cd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cd50:	4913      	ldr	r1, [pc, #76]	; (1cda0 <entropy_nrf5_get_entropy+0x6c>)
   1cd52:	4814      	ldr	r0, [pc, #80]	; (1cda4 <entropy_nrf5_get_entropy+0x70>)
   1cd54:	22e9      	movs	r2, #233	; 0xe9
   1cd56:	f009 f8f3 	bl	25f40 <assert_print>
   1cd5a:	4811      	ldr	r0, [pc, #68]	; (1cda0 <entropy_nrf5_get_entropy+0x6c>)
   1cd5c:	21e9      	movs	r1, #233	; 0xe9
   1cd5e:	f009 f8e8 	bl	25f32 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1cd62:	f04f 33ff 	mov.w	r3, #4294967295
   1cd66:	f04f 32ff 	mov.w	r2, #4294967295
   1cd6a:	4638      	mov	r0, r7
   1cd6c:	f003 fc18 	bl	205a0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1cd70:	4622      	mov	r2, r4
   1cd72:	4629      	mov	r1, r5
   1cd74:	4640      	mov	r0, r8
   1cd76:	f7ff ff33 	bl	1cbe0 <rng_pool_get>
   1cd7a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1cd7c:	4638      	mov	r0, r7
   1cd7e:	f003 fbd5 	bl	2052c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1cd82:	b93e      	cbnz	r6, 1cd94 <entropy_nrf5_get_entropy+0x60>
	return z_impl_k_sem_take(sem, timeout);
   1cd84:	f04f 32ff 	mov.w	r2, #4294967295
   1cd88:	f04f 33ff 	mov.w	r3, #4294967295
   1cd8c:	4806      	ldr	r0, [pc, #24]	; (1cda8 <entropy_nrf5_get_entropy+0x74>)
   1cd8e:	f003 fc07 	bl	205a0 <z_impl_k_sem_take>
	while (len) {
   1cd92:	e7e6      	b.n	1cd62 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   1cd94:	1ba4      	subs	r4, r4, r6
   1cd96:	b2a4      	uxth	r4, r4
		buf += bytes;
   1cd98:	4435      	add	r5, r6
   1cd9a:	e7d5      	b.n	1cd48 <entropy_nrf5_get_entropy+0x14>
   1cd9c:	20002870 	.word	0x20002870
   1cda0:	0002cf3e 	.word	0x0002cf3e
   1cda4:	0002a7df 	.word	0x0002a7df
   1cda8:	20002888 	.word	0x20002888

0001cdac <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1cdac:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cdae:	4b20      	ldr	r3, [pc, #128]	; (1ce30 <entropy_nrf5_init+0x84>)
   1cdb0:	6904      	ldr	r4, [r0, #16]
   1cdb2:	429c      	cmp	r4, r3
   1cdb4:	d00a      	beq.n	1cdcc <entropy_nrf5_init+0x20>
   1cdb6:	491f      	ldr	r1, [pc, #124]	; (1ce34 <entropy_nrf5_init+0x88>)
   1cdb8:	481f      	ldr	r0, [pc, #124]	; (1ce38 <entropy_nrf5_init+0x8c>)
   1cdba:	f44f 72ab 	mov.w	r2, #342	; 0x156
   1cdbe:	f009 f8bf 	bl	25f40 <assert_print>
   1cdc2:	481c      	ldr	r0, [pc, #112]	; (1ce34 <entropy_nrf5_init+0x88>)
   1cdc4:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1cdc8:	f009 f8b3 	bl	25f32 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cdcc:	2201      	movs	r2, #1
   1cdce:	4611      	mov	r1, r2
   1cdd0:	4620      	mov	r0, r4
   1cdd2:	f00c fac0 	bl	29356 <z_impl_k_sem_init>
   1cdd6:	2201      	movs	r2, #1
   1cdd8:	2100      	movs	r1, #0
   1cdda:	f104 0018 	add.w	r0, r4, #24
   1cdde:	f00c faba 	bl	29356 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1cde2:	f240 4307 	movw	r3, #1031	; 0x407
   1cde6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1cdea:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1cdee:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1cdf0:	230c      	movs	r3, #12
   1cdf2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1cdf6:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1cdf8:	4b10      	ldr	r3, [pc, #64]	; (1ce3c <entropy_nrf5_init+0x90>)
   1cdfa:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1cdfe:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1ce02:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1ce06:	f022 0201 	bic.w	r2, r2, #1
   1ce0a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1ce0e:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ce10:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1ce14:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ce18:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1ce1c:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ce1e:	6019      	str	r1, [r3, #0]
   1ce20:	200d      	movs	r0, #13
   1ce22:	f7f6 f97d 	bl	13120 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1ce26:	200d      	movs	r0, #13
   1ce28:	f7f6 f94a 	bl	130c0 <arch_irq_enable>

	return 0;
}
   1ce2c:	4628      	mov	r0, r5
   1ce2e:	bd38      	pop	{r3, r4, r5, pc}
   1ce30:	20002870 	.word	0x20002870
   1ce34:	0002cf3e 	.word	0x0002cf3e
   1ce38:	0002a7df 	.word	0x0002a7df
   1ce3c:	4000d000 	.word	0x4000d000

0001ce40 <isr>:
{
   1ce40:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1ce42:	f7ff feaf 	bl	1cba4 <random_byte_get>
	if (byte < 0) {
   1ce46:	2800      	cmp	r0, #0
   1ce48:	db20      	blt.n	1ce8c <isr+0x4c>
	uint8_t last  = rngp->last;
   1ce4a:	4b17      	ldr	r3, [pc, #92]	; (1cea8 <isr+0x68>)
   1ce4c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1ce50:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1ce54:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1ce58:	1b14      	subs	r4, r2, r4
   1ce5a:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1ce5e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1ce60:	d10d      	bne.n	1ce7e <isr+0x3e>
	uint8_t last  = rngp->last;
   1ce62:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ce66:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ce6a:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1ce6e:	1b14      	subs	r4, r2, r4
   1ce70:	ea31 0404 	bics.w	r4, r1, r4
   1ce74:	d10b      	bne.n	1ce8e <isr+0x4e>
   1ce76:	4b0d      	ldr	r3, [pc, #52]	; (1ceac <isr+0x6c>)
   1ce78:	2201      	movs	r2, #1
   1ce7a:	605a      	str	r2, [r3, #4]
}
   1ce7c:	e00e      	b.n	1ce9c <isr+0x5c>
	rngp->buffer[last] = byte;
   1ce7e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1ce80:	3201      	adds	r2, #1
   1ce82:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1ce84:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ce88:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1ce8c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ce8e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1ce90:	3201      	adds	r2, #1
   1ce92:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1ce94:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ce98:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ce9c:	4804      	ldr	r0, [pc, #16]	; (1ceb0 <isr+0x70>)
}
   1ce9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cea2:	f003 bb43 	b.w	2052c <z_impl_k_sem_give>
   1cea6:	bf00      	nop
   1cea8:	20002870 	.word	0x20002870
   1ceac:	4000d000 	.word	0x4000d000
   1ceb0:	20002888 	.word	0x20002888

0001ceb4 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1ceb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ceb6:	460f      	mov	r7, r1
   1ceb8:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
   1ceba:	b940      	cbnz	r0, 1cece <entropy_cc3xx_rng_get_entropy+0x1a>
   1cebc:	4917      	ldr	r1, [pc, #92]	; (1cf1c <entropy_cc3xx_rng_get_entropy+0x68>)
   1cebe:	4818      	ldr	r0, [pc, #96]	; (1cf20 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1cec0:	2220      	movs	r2, #32
   1cec2:	f009 f83d 	bl	25f40 <assert_print>
   1cec6:	2120      	movs	r1, #32
	__ASSERT_NO_MSG(buffer != NULL);
   1cec8:	4814      	ldr	r0, [pc, #80]	; (1cf1c <entropy_cc3xx_rng_get_entropy+0x68>)
   1ceca:	f009 f832 	bl	25f32 <assert_post_action>
   1cece:	b9e1      	cbnz	r1, 1cf0a <entropy_cc3xx_rng_get_entropy+0x56>
   1ced0:	4912      	ldr	r1, [pc, #72]	; (1cf1c <entropy_cc3xx_rng_get_entropy+0x68>)
   1ced2:	4813      	ldr	r0, [pc, #76]	; (1cf20 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1ced4:	2221      	movs	r2, #33	; 0x21
   1ced6:	f009 f833 	bl	25f40 <assert_print>
   1ceda:	2121      	movs	r1, #33	; 0x21
   1cedc:	e7f4      	b.n	1cec8 <entropy_cc3xx_rng_get_entropy+0x14>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1cede:	1b33      	subs	r3, r6, r4
   1cee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1cee4:	bf38      	it	cc
   1cee6:	461d      	movcc	r5, r3
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   1cee8:	462a      	mov	r2, r5
   1ceea:	ab01      	add	r3, sp, #4
   1ceec:	1939      	adds	r1, r7, r4
   1ceee:	2000      	movs	r0, #0
   1cef0:	f006 f940 	bl	23174 <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   1cef4:	b968      	cbnz	r0, 1cf12 <entropy_cc3xx_rng_get_entropy+0x5e>
			return -EINVAL;
		}
#endif /* defined(CONFIG_SPM) */
		if (olen != chunk_size) {
   1cef6:	9b01      	ldr	r3, [sp, #4]
   1cef8:	429d      	cmp	r5, r3
   1cefa:	d10a      	bne.n	1cf12 <entropy_cc3xx_rng_get_entropy+0x5e>
			return -EINVAL;
		}

		offset += chunk_size;
   1cefc:	442c      	add	r4, r5
	while (offset < length) {
   1cefe:	42a6      	cmp	r6, r4
   1cf00:	d8ed      	bhi.n	1cede <entropy_cc3xx_rng_get_entropy+0x2a>
	}

	if (offset == length) {
   1cf02:	d009      	beq.n	1cf18 <entropy_cc3xx_rng_get_entropy+0x64>
	int err = EINVAL;
   1cf04:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1cf06:	b003      	add	sp, #12
   1cf08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   1cf0a:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   1cf0e:	2400      	movs	r4, #0
   1cf10:	e7f5      	b.n	1cefe <entropy_cc3xx_rng_get_entropy+0x4a>
			return -EINVAL;
   1cf12:	f06f 0015 	mvn.w	r0, #21
   1cf16:	e7f6      	b.n	1cf06 <entropy_cc3xx_rng_get_entropy+0x52>
		err = 0;
   1cf18:	2000      	movs	r0, #0
   1cf1a:	e7f4      	b.n	1cf06 <entropy_cc3xx_rng_get_entropy+0x52>
   1cf1c:	0002cf8f 	.word	0x0002cf8f
   1cf20:	0002a7df 	.word	0x0002a7df

0001cf24 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1cf26:	491b      	ldr	r1, [pc, #108]	; (1cf94 <sys_clock_timeout_handler+0x70>)
{
   1cf28:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1cf2a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1cf2e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1cf30:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1cf34:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1cf38:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1cf3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1cf3e:	d30f      	bcc.n	1cf60 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1cf40:	f005 f9a8 	bl	22294 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1cf44:	00a3      	lsls	r3, r4, #2
   1cf46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cf4a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1cf4e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1cf52:	4295      	cmp	r5, r2
   1cf54:	d11d      	bne.n	1cf92 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1cf56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1cf5a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1cf5e:	e012      	b.n	1cf86 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1cf60:	4b0d      	ldr	r3, [pc, #52]	; (1cf98 <sys_clock_timeout_handler+0x74>)
   1cf62:	681b      	ldr	r3, [r3, #0]
   1cf64:	0a1a      	lsrs	r2, r3, #8
   1cf66:	061b      	lsls	r3, r3, #24
   1cf68:	195e      	adds	r6, r3, r5
   1cf6a:	4b0c      	ldr	r3, [pc, #48]	; (1cf9c <sys_clock_timeout_handler+0x78>)
   1cf6c:	f142 0700 	adc.w	r7, r2, #0
   1cf70:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1cf74:	f005 f98e 	bl	22294 <sys_clock_announce>
    return p_reg->CC[ch];
   1cf78:	4a09      	ldr	r2, [pc, #36]	; (1cfa0 <sys_clock_timeout_handler+0x7c>)
   1cf7a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1cf7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1cf82:	429d      	cmp	r5, r3
   1cf84:	d105      	bne.n	1cf92 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1cf86:	4a06      	ldr	r2, [pc, #24]	; (1cfa0 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cf88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1cf8c:	40a3      	lsls	r3, r4
   1cf8e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1cf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cf94:	20001d08 	.word	0x20001d08
   1cf98:	200028cc 	.word	0x200028cc
   1cf9c:	20001d10 	.word	0x20001d10
   1cfa0:	40011000 	.word	0x40011000

0001cfa4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1cfa4:	4b0d      	ldr	r3, [pc, #52]	; (1cfdc <z_nrf_rtc_timer_read+0x38>)
   1cfa6:	6818      	ldr	r0, [r3, #0]
   1cfa8:	0a01      	lsrs	r1, r0, #8
   1cfaa:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1cfac:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1cfb0:	4b0b      	ldr	r3, [pc, #44]	; (1cfe0 <z_nrf_rtc_timer_read+0x3c>)
   1cfb2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1cfb6:	1818      	adds	r0, r3, r0
   1cfb8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1cfbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1cfc0:	d20a      	bcs.n	1cfd8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1cfc2:	4b08      	ldr	r3, [pc, #32]	; (1cfe4 <z_nrf_rtc_timer_read+0x40>)
   1cfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cfc8:	4290      	cmp	r0, r2
   1cfca:	eb71 0303 	sbcs.w	r3, r1, r3
   1cfce:	d203      	bcs.n	1cfd8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1cfd0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1cfd4:	f141 0100 	adc.w	r1, r1, #0
}
   1cfd8:	4770      	bx	lr
   1cfda:	bf00      	nop
   1cfdc:	200028cc 	.word	0x200028cc
   1cfe0:	40011000 	.word	0x40011000
   1cfe4:	20001d10 	.word	0x20001d10

0001cfe8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1cfe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1cfec:	4c2b      	ldr	r4, [pc, #172]	; (1d09c <rtc_nrf_isr+0xb4>)
   1cfee:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1cff2:	079a      	lsls	r2, r3, #30
   1cff4:	d50b      	bpl.n	1d00e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cff6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1cffa:	b143      	cbz	r3, 1d00e <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1cffc:	4a28      	ldr	r2, [pc, #160]	; (1d0a0 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cffe:	2300      	movs	r3, #0
   1d000:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1d004:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d008:	6813      	ldr	r3, [r2, #0]
   1d00a:	3301      	adds	r3, #1
   1d00c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1d00e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d012:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1d014:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1d018:	03db      	lsls	r3, r3, #15
   1d01a:	d522      	bpl.n	1d062 <rtc_nrf_isr+0x7a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d01c:	f3bf 8f5b 	dmb	ish
   1d020:	4b20      	ldr	r3, [pc, #128]	; (1d0a4 <rtc_nrf_isr+0xbc>)
   1d022:	e853 1f00 	ldrex	r1, [r3]
   1d026:	f021 0001 	bic.w	r0, r1, #1
   1d02a:	e843 0500 	strex	r5, r0, [r3]
   1d02e:	2d00      	cmp	r5, #0
   1d030:	d1f7      	bne.n	1d022 <rtc_nrf_isr+0x3a>
   1d032:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1d036:	b911      	cbnz	r1, 1d03e <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d038:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1d03c:	b18b      	cbz	r3, 1d062 <rtc_nrf_isr+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d03e:	2500      	movs	r5, #0
   1d040:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1d044:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1d048:	f382 8810 	msr	PRIMASK, r2
		curr_time = z_nrf_rtc_timer_read();
   1d04c:	f7ff ffaa 	bl	1cfa4 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1d050:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d054:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1d056:	4b14      	ldr	r3, [pc, #80]	; (1d0a8 <rtc_nrf_isr+0xc0>)
   1d058:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1d05c:	42b0      	cmp	r0, r6
   1d05e:	41b9      	sbcs	r1, r7
   1d060:	d204      	bcs.n	1d06c <rtc_nrf_isr+0x84>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1d062:	f382 8810 	msr	PRIMASK, r2
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   1d066:	b003      	add	sp, #12
   1d068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d06c:	f04f 38ff 	mov.w	r8, #4294967295
   1d070:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
   1d074:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d078:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   1d07c:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1d07e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d082:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   1d086:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1d08a:	2900      	cmp	r1, #0
   1d08c:	d0eb      	beq.n	1d066 <rtc_nrf_isr+0x7e>
			handler(chan, expire_time, user_context);
   1d08e:	9000      	str	r0, [sp, #0]
   1d090:	4632      	mov	r2, r6
   1d092:	463b      	mov	r3, r7
   1d094:	4628      	mov	r0, r5
   1d096:	4788      	blx	r1
}
   1d098:	e7e5      	b.n	1d066 <rtc_nrf_isr+0x7e>
   1d09a:	bf00      	nop
   1d09c:	40011000 	.word	0x40011000
   1d0a0:	200028cc 	.word	0x200028cc
   1d0a4:	200028c4 	.word	0x200028c4
   1d0a8:	20001cf8 	.word	0x20001cf8

0001d0ac <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   1d0ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0b0:	4f53      	ldr	r7, [pc, #332]	; (1d200 <compare_set.constprop.0.isra.0+0x154>)
   1d0b2:	f3bf 8f5b 	dmb	ish
   1d0b6:	4604      	mov	r4, r0
   1d0b8:	460d      	mov	r5, r1
   1d0ba:	e857 8f00 	ldrex	r8, [r7]
   1d0be:	f028 0301 	bic.w	r3, r8, #1
   1d0c2:	e847 3200 	strex	r2, r3, [r7]
   1d0c6:	2a00      	cmp	r2, #0
   1d0c8:	d1f7      	bne.n	1d0ba <compare_set.constprop.0.isra.0+0xe>
   1d0ca:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   1d0ce:	f8df 9134 	ldr.w	r9, [pc, #308]	; 1d204 <compare_set.constprop.0.isra.0+0x158>
   1d0d2:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
   1d0d6:	f8c9 a308 	str.w	sl, [r9, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1d0da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d0de:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1d0e2:	f7ff ff5f 	bl	1cfa4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1d0e6:	42a0      	cmp	r0, r4
   1d0e8:	eb71 0305 	sbcs.w	r3, r1, r5
	return prev & BIT(chan);
   1d0ec:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   1d0f0:	d277      	bcs.n	1d1e2 <compare_set.constprop.0.isra.0+0x136>
		if (target_time - curr_time > COUNTER_SPAN) {
   1d0f2:	4b45      	ldr	r3, [pc, #276]	; (1d208 <compare_set.constprop.0.isra.0+0x15c>)
   1d0f4:	1a20      	subs	r0, r4, r0
   1d0f6:	eb65 0101 	sbc.w	r1, r5, r1
   1d0fa:	4298      	cmp	r0, r3
   1d0fc:	f171 0100 	sbcs.w	r1, r1, #0
   1d100:	d24a      	bcs.n	1d198 <compare_set.constprop.0.isra.0+0xec>
		if (target_time != cc_data[chan].target_time) {
   1d102:	4b42      	ldr	r3, [pc, #264]	; (1d20c <compare_set.constprop.0.isra.0+0x160>)
   1d104:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1d108:	429d      	cmp	r5, r3
   1d10a:	bf08      	it	eq
   1d10c:	4294      	cmpeq	r4, r2
   1d10e:	d03c      	beq.n	1d18a <compare_set.constprop.0.isra.0+0xde>
	return absolute_time & COUNTER_MAX;
   1d110:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
    return p_reg->CC[ch];
   1d114:	f8d9 3540 	ldr.w	r3, [r9, #1344]	; 0x540
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1d118:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d11a:	2200      	movs	r2, #0
     return p_reg->COUNTER;
   1d11c:	f8d9 1504 	ldr.w	r1, [r9, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d120:	1a5b      	subs	r3, r3, r1
   1d122:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1d126:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1d12a:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   1d12c:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
   1d130:	d105      	bne.n	1d13e <compare_set.constprop.0.isra.0+0x92>
   1d132:	9101      	str	r1, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   1d134:	2013      	movs	r0, #19
   1d136:	f00c f9b7 	bl	294a8 <z_impl_k_busy_wait>
   1d13a:	9901      	ldr	r1, [sp, #4]
   1d13c:	2200      	movs	r2, #0
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1d13e:	1c88      	adds	r0, r1, #2
	return (a - b) & COUNTER_MAX;
   1d140:	1a33      	subs	r3, r6, r0
   1d142:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d146:	f8c9 2140 	str.w	r2, [r9, #320]	; 0x140
			cc_val = now + 2;
   1d14a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1d14e:	bf88      	it	hi
   1d150:	4606      	movhi	r6, r0
   1d152:	f8d9 3140 	ldr.w	r3, [r9, #320]	; 0x140
    p_reg->EVTENSET = mask;
   1d156:	f8c9 a344 	str.w	sl, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1d15a:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1d15e:	f8c9 3540 	str.w	r3, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1d162:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
	} while ((now2 != now) &&
   1d166:	4299      	cmp	r1, r3
   1d168:	d006      	beq.n	1d178 <compare_set.constprop.0.isra.0+0xcc>
	return (a - b) & COUNTER_MAX;
   1d16a:	1af3      	subs	r3, r6, r3
   1d16c:	3b02      	subs	r3, #2
   1d16e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1d172:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1d176:	d832      	bhi.n	1d1de <compare_set.constprop.0.isra.0+0x132>
	return (a - b) & COUNTER_MAX;
   1d178:	eba6 060b 	sub.w	r6, r6, fp
   1d17c:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1d180:	1936      	adds	r6, r6, r4
   1d182:	f145 0300 	adc.w	r3, r5, #0
   1d186:	4634      	mov	r4, r6
   1d188:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1d18a:	4b20      	ldr	r3, [pc, #128]	; (1d20c <compare_set.constprop.0.isra.0+0x160>)
	cc_data[chan].callback = handler;
   1d18c:	4a20      	ldr	r2, [pc, #128]	; (1d210 <compare_set.constprop.0.isra.0+0x164>)
   1d18e:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
   1d190:	e9c3 4502 	strd	r4, r5, [r3, #8]
	cc_data[chan].user_context = user_data;
   1d194:	2200      	movs	r2, #0
   1d196:	605a      	str	r2, [r3, #4]
	if (key) {
   1d198:	f1b8 0f00 	cmp.w	r8, #0
   1d19c:	d01c      	beq.n	1d1d8 <compare_set.constprop.0.isra.0+0x12c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d19e:	f3bf 8f5b 	dmb	ish
   1d1a2:	e857 3f00 	ldrex	r3, [r7]
   1d1a6:	f043 0301 	orr.w	r3, r3, #1
   1d1aa:	e847 3200 	strex	r2, r3, [r7]
   1d1ae:	2a00      	cmp	r2, #0
   1d1b0:	d1f7      	bne.n	1d1a2 <compare_set.constprop.0.isra.0+0xf6>
   1d1b2:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1d1b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d1ba:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d1be:	4b15      	ldr	r3, [pc, #84]	; (1d214 <compare_set.constprop.0.isra.0+0x168>)
   1d1c0:	f3bf 8f5b 	dmb	ish
   1d1c4:	681b      	ldr	r3, [r3, #0]
   1d1c6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1d1ca:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d1cc:	bf42      	ittt	mi
   1d1ce:	4b12      	ldrmi	r3, [pc, #72]	; (1d218 <compare_set.constprop.0.isra.0+0x16c>)
   1d1d0:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1d1d4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1d1d8:	b003      	add	sp, #12
   1d1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1de:	4633      	mov	r3, r6
   1d1e0:	e79c      	b.n	1d11c <compare_set.constprop.0.isra.0+0x70>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d1e2:	4b0c      	ldr	r3, [pc, #48]	; (1d214 <compare_set.constprop.0.isra.0+0x168>)
   1d1e4:	f3bf 8f5b 	dmb	ish
   1d1e8:	e853 1f00 	ldrex	r1, [r3]
   1d1ec:	f041 0101 	orr.w	r1, r1, #1
   1d1f0:	e843 1200 	strex	r2, r1, [r3]
   1d1f4:	2a00      	cmp	r2, #0
   1d1f6:	d1f7      	bne.n	1d1e8 <compare_set.constprop.0.isra.0+0x13c>
   1d1f8:	f3bf 8f5b 	dmb	ish
   1d1fc:	e7c5      	b.n	1d18a <compare_set.constprop.0.isra.0+0xde>
   1d1fe:	bf00      	nop
   1d200:	200028c8 	.word	0x200028c8
   1d204:	40011000 	.word	0x40011000
   1d208:	01000001 	.word	0x01000001
   1d20c:	20001cf8 	.word	0x20001cf8
   1d210:	0001cf25 	.word	0x0001cf25
   1d214:	200028c4 	.word	0x200028c4
   1d218:	e000e100 	.word	0xe000e100

0001d21c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1d21c:	b570      	push	{r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d21e:	4b16      	ldr	r3, [pc, #88]	; (1d278 <sys_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   1d220:	4c16      	ldr	r4, [pc, #88]	; (1d27c <sys_clock_driver_init+0x60>)
   1d222:	2500      	movs	r5, #0
   1d224:	f04f 30ff 	mov.w	r0, #4294967295
   1d228:	f04f 31ff 	mov.w	r1, #4294967295
   1d22c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1d230:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1d234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d238:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d23c:	4b10      	ldr	r3, [pc, #64]	; (1d280 <sys_clock_driver_init+0x64>)
   1d23e:	2602      	movs	r6, #2
   1d240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1d244:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1d248:	2101      	movs	r1, #1
   1d24a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1d24e:	2011      	movs	r0, #17
   1d250:	462a      	mov	r2, r5
   1d252:	f7f5 ff65 	bl	13120 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1d256:	2011      	movs	r0, #17
   1d258:	f7f5 ff32 	bl	130c0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d25c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1d25e:	4a09      	ldr	r2, [pc, #36]	; (1d284 <sys_clock_driver_init+0x68>)
   1d260:	60a3      	str	r3, [r4, #8]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d262:	2100      	movs	r1, #0
   1d264:	6023      	str	r3, [r4, #0]
   1d266:	4808      	ldr	r0, [pc, #32]	; (1d288 <sys_clock_driver_init+0x6c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   1d268:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d26a:	f7ff ff1f 	bl	1d0ac <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   1d26e:	4630      	mov	r0, r6
   1d270:	f7fe fed6 	bl	1c020 <z_nrf_clock_control_lf_on>

	return 0;
}
   1d274:	4628      	mov	r0, r5
   1d276:	bd70      	pop	{r4, r5, r6, pc}
   1d278:	20001cf8 	.word	0x20001cf8
   1d27c:	40011000 	.word	0x40011000
   1d280:	e000e100 	.word	0xe000e100
   1d284:	200028c8 	.word	0x200028c8
   1d288:	007fffff 	.word	0x007fffff

0001d28c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d28c:	1c43      	adds	r3, r0, #1
{
   1d28e:	b510      	push	{r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d290:	d01c      	beq.n	1d2cc <sys_clock_set_timeout+0x40>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1d292:	2801      	cmp	r0, #1
   1d294:	dd1c      	ble.n	1d2d0 <sys_clock_set_timeout+0x44>
   1d296:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d29a:	da1b      	bge.n	1d2d4 <sys_clock_set_timeout+0x48>
   1d29c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1d29e:	f7ff fe81 	bl	1cfa4 <z_nrf_rtc_timer_read>
   1d2a2:	4a0d      	ldr	r2, [pc, #52]	; (1d2d8 <sys_clock_set_timeout+0x4c>)
   1d2a4:	e9d2 3100 	ldrd	r3, r1, [r2]
   1d2a8:	1ac0      	subs	r0, r0, r3
		ticks = 0;
   1d2aa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d2ae:	bf28      	it	cs
   1d2b0:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1d2b2:	4a0a      	ldr	r2, [pc, #40]	; (1d2dc <sys_clock_set_timeout+0x50>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1d2b4:	3001      	adds	r0, #1
   1d2b6:	4420      	add	r0, r4
	if (cyc > MAX_CYCLES) {
   1d2b8:	4290      	cmp	r0, r2
   1d2ba:	bf28      	it	cs
   1d2bc:	4610      	movcs	r0, r2
	uint64_t target_time = cyc + last_count;
   1d2be:	18c0      	adds	r0, r0, r3
}
   1d2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1d2c4:	f141 0100 	adc.w	r1, r1, #0
   1d2c8:	f7ff bef0 	b.w	1d0ac <compare_set.constprop.0.isra.0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d2cc:	4803      	ldr	r0, [pc, #12]	; (1d2dc <sys_clock_set_timeout+0x50>)
   1d2ce:	e7e5      	b.n	1d29c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1d2d0:	2400      	movs	r4, #0
   1d2d2:	e7e4      	b.n	1d29e <sys_clock_set_timeout+0x12>
   1d2d4:	4c01      	ldr	r4, [pc, #4]	; (1d2dc <sys_clock_set_timeout+0x50>)
   1d2d6:	e7e2      	b.n	1d29e <sys_clock_set_timeout+0x12>
   1d2d8:	20001d08 	.word	0x20001d08
   1d2dc:	007fffff 	.word	0x007fffff

0001d2e0 <sys_clock_elapsed>:
{
   1d2e0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1d2e2:	f7ff fe5f 	bl	1cfa4 <z_nrf_rtc_timer_read>
   1d2e6:	4b02      	ldr	r3, [pc, #8]	; (1d2f0 <sys_clock_elapsed+0x10>)
   1d2e8:	681b      	ldr	r3, [r3, #0]
}
   1d2ea:	1ac0      	subs	r0, r0, r3
   1d2ec:	bd08      	pop	{r3, pc}
   1d2ee:	bf00      	nop
   1d2f0:	20001d08 	.word	0x20001d08

0001d2f4 <nrf_gpio_pin_port_decode>:
{
   1d2f4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d2f6:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1d2f8:	095a      	lsrs	r2, r3, #5
   1d2fa:	d00c      	beq.n	1d316 <nrf_gpio_pin_port_decode+0x22>
   1d2fc:	2a01      	cmp	r2, #1
   1d2fe:	d013      	beq.n	1d328 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d300:	490e      	ldr	r1, [pc, #56]	; (1d33c <nrf_gpio_pin_port_decode+0x48>)
   1d302:	480f      	ldr	r0, [pc, #60]	; (1d340 <nrf_gpio_pin_port_decode+0x4c>)
   1d304:	f240 2247 	movw	r2, #583	; 0x247
   1d308:	f008 fe1a 	bl	25f40 <assert_print>
   1d30c:	480b      	ldr	r0, [pc, #44]	; (1d33c <nrf_gpio_pin_port_decode+0x48>)
   1d30e:	f240 2147 	movw	r1, #583	; 0x247
   1d312:	f008 fe0e 	bl	25f32 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1d316:	f04f 32ff 	mov.w	r2, #4294967295
   1d31a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d31e:	07d9      	lsls	r1, r3, #31
   1d320:	d5ee      	bpl.n	1d300 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1d322:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1d326:	e008      	b.n	1d33a <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   1d328:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d32c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d330:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d332:	07d2      	lsls	r2, r2, #31
   1d334:	d5e4      	bpl.n	1d300 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1d336:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1d338:	4802      	ldr	r0, [pc, #8]	; (1d344 <nrf_gpio_pin_port_decode+0x50>)
}
   1d33a:	bd08      	pop	{r3, pc}
   1d33c:	0002cdf4 	.word	0x0002cdf4
   1d340:	0002a7df 	.word	0x0002a7df
   1d344:	50000300 	.word	0x50000300

0001d348 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   1d348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1d34c:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
	__unused const struct gpio_driver_config *const cfg =
   1d350:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   1d354:	6906      	ldr	r6, [r0, #16]
{
   1d356:	4613      	mov	r3, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1d358:	d00a      	beq.n	1d370 <z_impl_gpio_pin_configure+0x28>
   1d35a:	4935      	ldr	r1, [pc, #212]	; (1d430 <z_impl_gpio_pin_configure+0xe8>)
   1d35c:	4835      	ldr	r0, [pc, #212]	; (1d434 <z_impl_gpio_pin_configure+0xec>)
   1d35e:	f240 22be 	movw	r2, #702	; 0x2be
   1d362:	f008 fded 	bl	25f40 <assert_print>
   1d366:	f240 21be 	movw	r1, #702	; 0x2be
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1d36a:	4831      	ldr	r0, [pc, #196]	; (1d430 <z_impl_gpio_pin_configure+0xe8>)
   1d36c:	f008 fde1 	bl	25f32 <assert_post_action>
   1d370:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1d374:	2a30      	cmp	r2, #48	; 0x30
   1d376:	d108      	bne.n	1d38a <z_impl_gpio_pin_configure+0x42>
   1d378:	492d      	ldr	r1, [pc, #180]	; (1d430 <z_impl_gpio_pin_configure+0xe8>)
   1d37a:	482e      	ldr	r0, [pc, #184]	; (1d434 <z_impl_gpio_pin_configure+0xec>)
   1d37c:	f240 22c1 	movw	r2, #705	; 0x2c1
   1d380:	f008 fdde 	bl	25f40 <assert_print>
   1d384:	f240 21c1 	movw	r1, #705	; 0x2c1
   1d388:	e7ef      	b.n	1d36a <z_impl_gpio_pin_configure+0x22>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   1d38a:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   1d38e:	2a02      	cmp	r2, #2
   1d390:	d108      	bne.n	1d3a4 <z_impl_gpio_pin_configure+0x5c>
   1d392:	4927      	ldr	r1, [pc, #156]	; (1d430 <z_impl_gpio_pin_configure+0xe8>)
   1d394:	4827      	ldr	r0, [pc, #156]	; (1d434 <z_impl_gpio_pin_configure+0xec>)
   1d396:	f240 22c5 	movw	r2, #709	; 0x2c5
   1d39a:	f008 fdd1 	bl	25f40 <assert_print>
   1d39e:	f240 21c5 	movw	r1, #709	; 0x2c5
   1d3a2:	e7e2      	b.n	1d36a <z_impl_gpio_pin_configure+0x22>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1d3a4:	f003 0206 	and.w	r2, r3, #6
   1d3a8:	2a04      	cmp	r2, #4
   1d3aa:	d108      	bne.n	1d3be <z_impl_gpio_pin_configure+0x76>
   1d3ac:	4920      	ldr	r1, [pc, #128]	; (1d430 <z_impl_gpio_pin_configure+0xe8>)
   1d3ae:	4821      	ldr	r0, [pc, #132]	; (1d434 <z_impl_gpio_pin_configure+0xec>)
   1d3b0:	f240 22c9 	movw	r2, #713	; 0x2c9
   1d3b4:	f008 fdc4 	bl	25f40 <assert_print>
   1d3b8:	f240 21c9 	movw	r1, #713	; 0x2c9
   1d3bc:	e7d5      	b.n	1d36a <z_impl_gpio_pin_configure+0x22>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1d3be:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   1d3c2:	d012      	beq.n	1d3ea <z_impl_gpio_pin_configure+0xa2>
   1d3c4:	039d      	lsls	r5, r3, #14
   1d3c6:	d408      	bmi.n	1d3da <z_impl_gpio_pin_configure+0x92>
   1d3c8:	4919      	ldr	r1, [pc, #100]	; (1d430 <z_impl_gpio_pin_configure+0xe8>)
   1d3ca:	481a      	ldr	r0, [pc, #104]	; (1d434 <z_impl_gpio_pin_configure+0xec>)
   1d3cc:	f44f 7233 	mov.w	r2, #716	; 0x2cc
   1d3d0:	f008 fdb6 	bl	25f40 <assert_print>
   1d3d4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1d3d8:	e7c7      	b.n	1d36a <z_impl_gpio_pin_configure+0x22>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1d3da:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   1d3de:	d014      	beq.n	1d40a <z_impl_gpio_pin_configure+0xc2>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1d3e0:	4a15      	ldr	r2, [pc, #84]	; (1d438 <z_impl_gpio_pin_configure+0xf0>)
   1d3e2:	439a      	bics	r2, r3
   1d3e4:	d101      	bne.n	1d3ea <z_impl_gpio_pin_configure+0xa2>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1d3e6:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d3ea:	6824      	ldr	r4, [r4, #0]
   1d3ec:	2501      	movs	r5, #1
   1d3ee:	408d      	lsls	r5, r1
   1d3f0:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1d3f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d3f6:	d111      	bne.n	1d41c <z_impl_gpio_pin_configure+0xd4>
   1d3f8:	490d      	ldr	r1, [pc, #52]	; (1d430 <z_impl_gpio_pin_configure+0xe8>)
   1d3fa:	480e      	ldr	r0, [pc, #56]	; (1d434 <z_impl_gpio_pin_configure+0xec>)
   1d3fc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   1d400:	f008 fd9e 	bl	25f40 <assert_print>
   1d404:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   1d408:	e7af      	b.n	1d36a <z_impl_gpio_pin_configure+0x22>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1d40a:	4909      	ldr	r1, [pc, #36]	; (1d430 <z_impl_gpio_pin_configure+0xe8>)
   1d40c:	4809      	ldr	r0, [pc, #36]	; (1d434 <z_impl_gpio_pin_configure+0xec>)
   1d40e:	f44f 7234 	mov.w	r2, #720	; 0x2d0
   1d412:	f008 fd95 	bl	25f40 <assert_print>
   1d416:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   1d41a:	e7a6      	b.n	1d36a <z_impl_gpio_pin_configure+0x22>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d41c:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1d41e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d420:	bf4c      	ite	mi
   1d422:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1d424:	43ac      	bicpl	r4, r5
   1d426:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
   1d428:	683b      	ldr	r3, [r7, #0]
}
   1d42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   1d42e:	4718      	bx	r3
   1d430:	0002cfcf 	.word	0x0002cfcf
   1d434:	0002a7df 	.word	0x0002a7df
   1d438:	00100001 	.word	0x00100001

0001d43c <z_impl_gpio_pin_interrupt_configure>:
{
   1d43c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1d43e:	f402 03c0 	and.w	r3, r2, #6291456	; 0x600000
   1d442:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
	__unused const struct gpio_driver_config *const cfg =
   1d446:	e9d0 6401 	ldrd	r6, r4, [r0, #4]
	const struct gpio_driver_data *const data =
   1d44a:	6905      	ldr	r5, [r0, #16]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1d44c:	d10a      	bne.n	1d464 <z_impl_gpio_pin_interrupt_configure+0x28>
   1d44e:	4920      	ldr	r1, [pc, #128]	; (1d4d0 <z_impl_gpio_pin_interrupt_configure+0x94>)
   1d450:	4820      	ldr	r0, [pc, #128]	; (1d4d4 <z_impl_gpio_pin_interrupt_configure+0x98>)
   1d452:	f240 226b 	movw	r2, #619	; 0x26b
   1d456:	f008 fd73 	bl	25f40 <assert_print>
   1d45a:	f240 216b 	movw	r1, #619	; 0x26b
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1d45e:	481c      	ldr	r0, [pc, #112]	; (1d4d0 <z_impl_gpio_pin_interrupt_configure+0x94>)
   1d460:	f008 fd67 	bl	25f32 <assert_post_action>
   1d464:	b943      	cbnz	r3, 1d478 <z_impl_gpio_pin_interrupt_configure+0x3c>
   1d466:	491a      	ldr	r1, [pc, #104]	; (1d4d0 <z_impl_gpio_pin_interrupt_configure+0x94>)
   1d468:	481a      	ldr	r0, [pc, #104]	; (1d4d4 <z_impl_gpio_pin_interrupt_configure+0x98>)
   1d46a:	f240 226f 	movw	r2, #623	; 0x26f
   1d46e:	f008 fd67 	bl	25f40 <assert_print>
   1d472:	f240 216f 	movw	r1, #623	; 0x26f
   1d476:	e7f2      	b.n	1d45e <z_impl_gpio_pin_interrupt_configure+0x22>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1d478:	f002 63c8 	and.w	r3, r2, #104857600	; 0x6400000
   1d47c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d480:	d108      	bne.n	1d494 <z_impl_gpio_pin_interrupt_configure+0x58>
   1d482:	4913      	ldr	r1, [pc, #76]	; (1d4d0 <z_impl_gpio_pin_interrupt_configure+0x94>)
   1d484:	4813      	ldr	r0, [pc, #76]	; (1d4d4 <z_impl_gpio_pin_interrupt_configure+0x98>)
   1d486:	f240 2279 	movw	r2, #633	; 0x279
   1d48a:	f008 fd59 	bl	25f40 <assert_print>
   1d48e:	f240 2179 	movw	r1, #633	; 0x279
   1d492:	e7e4      	b.n	1d45e <z_impl_gpio_pin_interrupt_configure+0x22>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d494:	6836      	ldr	r6, [r6, #0]
   1d496:	2301      	movs	r3, #1
   1d498:	408b      	lsls	r3, r1
   1d49a:	4233      	tst	r3, r6
   1d49c:	d108      	bne.n	1d4b0 <z_impl_gpio_pin_interrupt_configure+0x74>
   1d49e:	490c      	ldr	r1, [pc, #48]	; (1d4d0 <z_impl_gpio_pin_interrupt_configure+0x94>)
   1d4a0:	480c      	ldr	r0, [pc, #48]	; (1d4d4 <z_impl_gpio_pin_interrupt_configure+0x98>)
   1d4a2:	f240 227e 	movw	r2, #638	; 0x27e
   1d4a6:	f008 fd4b 	bl	25f40 <assert_print>
   1d4aa:	f240 217e 	movw	r1, #638	; 0x27e
   1d4ae:	e7d6      	b.n	1d45e <z_impl_gpio_pin_interrupt_configure+0x22>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1d4b0:	0216      	lsls	r6, r2, #8
   1d4b2:	d504      	bpl.n	1d4be <z_impl_gpio_pin_interrupt_configure+0x82>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1d4b4:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1d4b6:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1d4b8:	bf18      	it	ne
   1d4ba:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1d4be:	69a4      	ldr	r4, [r4, #24]
   1d4c0:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1d4c4:	46a4      	mov	ip, r4
   1d4c6:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
   1d4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1d4ce:	4760      	bx	ip
   1d4d0:	0002cfcf 	.word	0x0002cfcf
   1d4d4:	0002a7df 	.word	0x0002a7df

0001d4d8 <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   1d4d8:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d4da:	2301      	movs	r3, #1
   1d4dc:	fa03 f101 	lsl.w	r1, r3, r1
   1d4e0:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1d4e2:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d4e4:	681b      	ldr	r3, [r3, #0]
   1d4e6:	4219      	tst	r1, r3
   1d4e8:	d10a      	bne.n	1d500 <gpio_pin_set+0x28>
   1d4ea:	490c      	ldr	r1, [pc, #48]	; (1d51c <gpio_pin_set+0x44>)
   1d4ec:	480c      	ldr	r0, [pc, #48]	; (1d520 <gpio_pin_set+0x48>)
   1d4ee:	f240 5227 	movw	r2, #1319	; 0x527
   1d4f2:	f008 fd25 	bl	25f40 <assert_print>
   1d4f6:	4809      	ldr	r0, [pc, #36]	; (1d51c <gpio_pin_set+0x44>)
   1d4f8:	f240 5127 	movw	r1, #1319	; 0x527
   1d4fc:	f008 fd19 	bl	25f32 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1d500:	6823      	ldr	r3, [r4, #0]
   1d502:	4219      	tst	r1, r3
   1d504:	d003      	beq.n	1d50e <gpio_pin_set+0x36>
	if (value != 0)	{
   1d506:	b122      	cbz	r2, 1d512 <gpio_pin_set+0x3a>
	return api->port_clear_bits_raw(port, pins);
   1d508:	6883      	ldr	r3, [r0, #8]
   1d50a:	691b      	ldr	r3, [r3, #16]
   1d50c:	e003      	b.n	1d516 <gpio_pin_set+0x3e>
	if (value != 0)	{
   1d50e:	2a00      	cmp	r2, #0
   1d510:	d0fa      	beq.n	1d508 <gpio_pin_set+0x30>
	return api->port_set_bits_raw(port, pins);
   1d512:	6883      	ldr	r3, [r0, #8]
   1d514:	68db      	ldr	r3, [r3, #12]
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   1d516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1d51a:	4718      	bx	r3
   1d51c:	0002cfcf 	.word	0x0002cfcf
   1d520:	0002a7df 	.word	0x0002a7df

0001d524 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   1d524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   1d528:	2400      	movs	r4, #0
   1d52a:	4d1b      	ldr	r5, [pc, #108]	; (1d598 <get_buttons+0x74>)
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d52c:	4627      	mov	r7, r4
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d52e:	f04f 0801 	mov.w	r8, #1
	return gpio_pin_get(spec->port, spec->pin);
   1d532:	6828      	ldr	r0, [r5, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d534:	792e      	ldrb	r6, [r5, #4]
   1d536:	6843      	ldr	r3, [r0, #4]
   1d538:	681b      	ldr	r3, [r3, #0]
   1d53a:	fa08 f606 	lsl.w	r6, r8, r6
   1d53e:	421e      	tst	r6, r3
   1d540:	d10a      	bne.n	1d558 <get_buttons+0x34>
   1d542:	4916      	ldr	r1, [pc, #88]	; (1d59c <get_buttons+0x78>)
   1d544:	4816      	ldr	r0, [pc, #88]	; (1d5a0 <get_buttons+0x7c>)
   1d546:	f240 42ce 	movw	r2, #1230	; 0x4ce
   1d54a:	f008 fcf9 	bl	25f40 <assert_print>
   1d54e:	4813      	ldr	r0, [pc, #76]	; (1d59c <get_buttons+0x78>)
   1d550:	f240 41ce 	movw	r1, #1230	; 0x4ce
   1d554:	f008 fced 	bl	25f32 <assert_post_action>
	const struct gpio_driver_data *const data =
   1d558:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   1d55c:	6883      	ldr	r3, [r0, #8]
   1d55e:	a901      	add	r1, sp, #4
   1d560:	685b      	ldr	r3, [r3, #4]
   1d562:	4798      	blx	r3
	if (ret == 0) {
   1d564:	2800      	cmp	r0, #0
   1d566:	d007      	beq.n	1d578 <get_buttons+0x54>
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
   1d568:	db0d      	blt.n	1d586 <get_buttons+0x62>
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if (val) {
			ret |= 1U << i;
   1d56a:	2301      	movs	r3, #1
   1d56c:	40bb      	lsls	r3, r7
   1d56e:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d570:	3508      	adds	r5, #8
   1d572:	b96f      	cbnz	r7, 1d590 <get_buttons+0x6c>
   1d574:	2701      	movs	r7, #1
   1d576:	e7dc      	b.n	1d532 <get_buttons+0xe>
		*value ^= data->invert;
   1d578:	f8d9 2000 	ldr.w	r2, [r9]
   1d57c:	9b01      	ldr	r3, [sp, #4]
   1d57e:	4053      	eors	r3, r2
		if (val) {
   1d580:	4233      	tst	r3, r6
   1d582:	d0f5      	beq.n	1d570 <get_buttons+0x4c>
   1d584:	e7f1      	b.n	1d56a <get_buttons+0x46>
			LOG_ERR("Cannot read gpio pin");
   1d586:	4807      	ldr	r0, [pc, #28]	; (1d5a4 <get_buttons+0x80>)
   1d588:	2145      	movs	r1, #69	; 0x45
   1d58a:	f008 fce7 	bl	25f5c <z_log_minimal_printk>
   1d58e:	2400      	movs	r4, #0
		}
	}

	return ret;
}
   1d590:	4620      	mov	r0, r4
   1d592:	b003      	add	sp, #12
   1d594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d598:	0002a1f0 	.word	0x0002a1f0
   1d59c:	0002cfcf 	.word	0x0002cfcf
   1d5a0:	0002a7df 	.word	0x0002a7df
   1d5a4:	0002d000 	.word	0x0002d000

0001d5a8 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1d5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5ac:	4e11      	ldr	r6, [pc, #68]	; (1d5f4 <dk_set_leds_state.part.0+0x4c>)
   1d5ae:	4607      	mov	r7, r0
   1d5b0:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d5b2:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1d5b4:	fa27 f205 	lsr.w	r2, r7, r5
   1d5b8:	f012 0201 	ands.w	r2, r2, #1
   1d5bc:	d110      	bne.n	1d5e0 <dk_set_leds_state.part.0+0x38>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1d5be:	fa28 f305 	lsr.w	r3, r8, r5
   1d5c2:	07db      	lsls	r3, r3, #31
   1d5c4:	d50e      	bpl.n	1d5e4 <dk_set_leds_state.part.0+0x3c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1d5c6:	7931      	ldrb	r1, [r6, #4]
   1d5c8:	6830      	ldr	r0, [r6, #0]
   1d5ca:	f7ff ff85 	bl	1d4d8 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1d5ce:	4604      	mov	r4, r0
   1d5d0:	b140      	cbz	r0, 1d5e4 <dk_set_leds_state.part.0+0x3c>
			LOG_ERR("Cannot write LED gpio");
   1d5d2:	4809      	ldr	r0, [pc, #36]	; (1d5f8 <dk_set_leds_state.part.0+0x50>)
   1d5d4:	2145      	movs	r1, #69	; 0x45
   1d5d6:	f008 fcc1 	bl	25f5c <z_log_minimal_printk>
			return err;
		}
	}

	return 0;
}
   1d5da:	4620      	mov	r0, r4
   1d5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1d5e0:	2201      	movs	r2, #1
   1d5e2:	e7f0      	b.n	1d5c6 <dk_set_leds_state.part.0+0x1e>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d5e4:	3501      	adds	r5, #1
   1d5e6:	2d03      	cmp	r5, #3
   1d5e8:	f106 0608 	add.w	r6, r6, #8
   1d5ec:	d1e2      	bne.n	1d5b4 <dk_set_leds_state.part.0+0xc>
	return 0;
   1d5ee:	2400      	movs	r4, #0
   1d5f0:	e7f3      	b.n	1d5da <dk_set_leds_state.part.0+0x32>
   1d5f2:	bf00      	nop
   1d5f4:	0002a1d8 	.word	0x0002a1d8
   1d5f8:	0002d01a 	.word	0x0002d01a

0001d5fc <callback_ctrl>:
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   1d5fc:	2800      	cmp	r0, #0
{
   1d5fe:	b510      	push	{r4, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   1d600:	bf0c      	ite	eq
   1d602:	f44f 1400 	moveq.w	r4, #2097152	; 0x200000
   1d606:	f04f 6498 	movne.w	r4, #79691776	; 0x4c00000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1d60a:	4807      	ldr	r0, [pc, #28]	; (1d628 <callback_ctrl+0x2c>)
   1d60c:	4622      	mov	r2, r4
   1d60e:	2119      	movs	r1, #25
   1d610:	f7ff ff14 	bl	1d43c <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1d614:	b930      	cbnz	r0, 1d624 <callback_ctrl+0x28>
   1d616:	4804      	ldr	r0, [pc, #16]	; (1d628 <callback_ctrl+0x2c>)
   1d618:	4622      	mov	r2, r4
   1d61a:	2102      	movs	r1, #2
}
   1d61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d620:	f7ff bf0c 	b.w	1d43c <z_impl_gpio_pin_interrupt_configure>
   1d624:	bd10      	pop	{r4, pc}
   1d626:	bf00      	nop
   1d628:	00029738 	.word	0x00029738

0001d62c <button_pressed>:
{
   1d62c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d62e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d632:	f3ef 8411 	mrs	r4, BASEPRI
   1d636:	f383 8812 	msr	BASEPRI_MAX, r3
   1d63a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d63e:	481d      	ldr	r0, [pc, #116]	; (1d6b4 <button_pressed+0x88>)
   1d640:	f002 fcc6 	bl	1ffd0 <z_spin_lock_valid>
   1d644:	b940      	cbnz	r0, 1d658 <button_pressed+0x2c>
   1d646:	491c      	ldr	r1, [pc, #112]	; (1d6b8 <button_pressed+0x8c>)
   1d648:	481c      	ldr	r0, [pc, #112]	; (1d6bc <button_pressed+0x90>)
   1d64a:	2294      	movs	r2, #148	; 0x94
   1d64c:	f008 fc78 	bl	25f40 <assert_print>
   1d650:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d652:	4819      	ldr	r0, [pc, #100]	; (1d6b8 <button_pressed+0x8c>)
   1d654:	f008 fc6d 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d658:	4816      	ldr	r0, [pc, #88]	; (1d6b4 <button_pressed+0x88>)
   1d65a:	f002 fcd7 	bl	2000c <z_spin_lock_set_owner>
	int err = callback_ctrl(false);
   1d65e:	2000      	movs	r0, #0
   1d660:	f7ff ffcc 	bl	1d5fc <callback_ctrl>
	if (err) {
   1d664:	b118      	cbz	r0, 1d66e <button_pressed+0x42>
		LOG_ERR("Cannot disable callbacks");
   1d666:	4816      	ldr	r0, [pc, #88]	; (1d6c0 <button_pressed+0x94>)
   1d668:	2145      	movs	r1, #69	; 0x45
   1d66a:	f008 fc77 	bl	25f5c <z_log_minimal_printk>
	switch (state) {
   1d66e:	4b15      	ldr	r3, [pc, #84]	; (1d6c4 <button_pressed+0x98>)
   1d670:	781a      	ldrb	r2, [r3, #0]
   1d672:	b9b2      	cbnz	r2, 1d6a2 <button_pressed+0x76>
		state = STATE_SCANNING;
   1d674:	2201      	movs	r2, #1
   1d676:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1d678:	4813      	ldr	r0, [pc, #76]	; (1d6c8 <button_pressed+0x9c>)
   1d67a:	2221      	movs	r2, #33	; 0x21
   1d67c:	2300      	movs	r3, #0
   1d67e:	f003 fbe5 	bl	20e4c <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d682:	480c      	ldr	r0, [pc, #48]	; (1d6b4 <button_pressed+0x88>)
   1d684:	f002 fcb2 	bl	1ffec <z_spin_unlock_valid>
   1d688:	b930      	cbnz	r0, 1d698 <button_pressed+0x6c>
   1d68a:	490b      	ldr	r1, [pc, #44]	; (1d6b8 <button_pressed+0x8c>)
   1d68c:	480b      	ldr	r0, [pc, #44]	; (1d6bc <button_pressed+0x90>)
   1d68e:	22c2      	movs	r2, #194	; 0xc2
   1d690:	f008 fc56 	bl	25f40 <assert_print>
   1d694:	21c2      	movs	r1, #194	; 0xc2
   1d696:	e7dc      	b.n	1d652 <button_pressed+0x26>
	__asm__ volatile(
   1d698:	f384 8811 	msr	BASEPRI, r4
   1d69c:	f3bf 8f6f 	isb	sy
}
   1d6a0:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
   1d6a2:	490a      	ldr	r1, [pc, #40]	; (1d6cc <button_pressed+0xa0>)
   1d6a4:	4805      	ldr	r0, [pc, #20]	; (1d6bc <button_pressed+0x90>)
   1d6a6:	22ba      	movs	r2, #186	; 0xba
   1d6a8:	f008 fc4a 	bl	25f40 <assert_print>
   1d6ac:	4807      	ldr	r0, [pc, #28]	; (1d6cc <button_pressed+0xa0>)
   1d6ae:	21ba      	movs	r1, #186	; 0xba
   1d6b0:	e7d0      	b.n	1d654 <button_pressed+0x28>
   1d6b2:	bf00      	nop
   1d6b4:	200028f4 	.word	0x200028f4
   1d6b8:	0002a819 	.word	0x0002a819
   1d6bc:	0002a7df 	.word	0x0002a7df
   1d6c0:	0002d035 	.word	0x0002d035
   1d6c4:	2000368a 	.word	0x2000368a
   1d6c8:	20001d18 	.word	0x20001d18
   1d6cc:	0002d053 	.word	0x0002d053

0001d6d0 <buttons_scan_fn>:
{
   1d6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	button_scan = get_buttons();
   1d6d4:	f7ff ff26 	bl	1d524 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d6d8:	f3bf 8f5b 	dmb	ish
   1d6dc:	4b3b      	ldr	r3, [pc, #236]	; (1d7cc <buttons_scan_fn+0xfc>)
   1d6de:	4604      	mov	r4, r0
   1d6e0:	e853 2f00 	ldrex	r2, [r3]
   1d6e4:	e843 4100 	strex	r1, r4, [r3]
   1d6e8:	2900      	cmp	r1, #0
   1d6ea:	d1f9      	bne.n	1d6e0 <buttons_scan_fn+0x10>
   1d6ec:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   1d6f0:	4b37      	ldr	r3, [pc, #220]	; (1d7d0 <buttons_scan_fn+0x100>)
   1d6f2:	4f38      	ldr	r7, [pc, #224]	; (1d7d4 <buttons_scan_fn+0x104>)
   1d6f4:	781a      	ldrb	r2, [r3, #0]
   1d6f6:	bb32      	cbnz	r2, 1d746 <buttons_scan_fn+0x76>
		if (button_scan != last_button_scan) {
   1d6f8:	683e      	ldr	r6, [r7, #0]
   1d6fa:	42a6      	cmp	r6, r4
   1d6fc:	d019      	beq.n	1d732 <buttons_scan_fn+0x62>
	if (button_handler_cb != NULL) {
   1d6fe:	4b36      	ldr	r3, [pc, #216]	; (1d7d8 <buttons_scan_fn+0x108>)
   1d700:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
   1d702:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   1d704:	b10b      	cbz	r3, 1d70a <buttons_scan_fn+0x3a>
		button_handler_cb(button_state, has_changed);
   1d706:	4631      	mov	r1, r6
   1d708:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1d70a:	f04f 33ff 	mov.w	r3, #4294967295
   1d70e:	4833      	ldr	r0, [pc, #204]	; (1d7dc <buttons_scan_fn+0x10c>)
   1d710:	f04f 32ff 	mov.w	r2, #4294967295
   1d714:	f002 fcb0 	bl	20078 <z_impl_k_mutex_lock>
	return list->head;
   1d718:	4b31      	ldr	r3, [pc, #196]	; (1d7e0 <buttons_scan_fn+0x110>)
   1d71a:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1d71c:	b135      	cbz	r5, 1d72c <buttons_scan_fn+0x5c>
   1d71e:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   1d720:	4631      	mov	r1, r6
   1d722:	682b      	ldr	r3, [r5, #0]
   1d724:	4620      	mov	r0, r4
   1d726:	4798      	blx	r3
	return node->next;
   1d728:	686d      	ldr	r5, [r5, #4]
   1d72a:	e7f7      	b.n	1d71c <buttons_scan_fn+0x4c>
	return z_impl_k_mutex_unlock(mutex);
   1d72c:	482b      	ldr	r0, [pc, #172]	; (1d7dc <buttons_scan_fn+0x10c>)
   1d72e:	f002 fd59 	bl	201e4 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1d732:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   1d734:	b154      	cbz	r4, 1d74c <buttons_scan_fn+0x7c>
}
   1d736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   1d73a:	482a      	ldr	r0, [pc, #168]	; (1d7e4 <buttons_scan_fn+0x114>)
   1d73c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1d740:	2300      	movs	r3, #0
   1d742:	f003 bb83 	b.w	20e4c <k_work_reschedule>
		initial_run = false;
   1d746:	2200      	movs	r2, #0
   1d748:	701a      	strb	r2, [r3, #0]
   1d74a:	e7f2      	b.n	1d732 <buttons_scan_fn+0x62>
	__asm__ volatile(
   1d74c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d750:	f3ef 8511 	mrs	r5, BASEPRI
   1d754:	f383 8812 	msr	BASEPRI_MAX, r3
   1d758:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d75c:	4822      	ldr	r0, [pc, #136]	; (1d7e8 <buttons_scan_fn+0x118>)
   1d75e:	f002 fc37 	bl	1ffd0 <z_spin_lock_valid>
   1d762:	b940      	cbnz	r0, 1d776 <buttons_scan_fn+0xa6>
   1d764:	4921      	ldr	r1, [pc, #132]	; (1d7ec <buttons_scan_fn+0x11c>)
   1d766:	4822      	ldr	r0, [pc, #136]	; (1d7f0 <buttons_scan_fn+0x120>)
   1d768:	2294      	movs	r2, #148	; 0x94
   1d76a:	f008 fbe9 	bl	25f40 <assert_print>
   1d76e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d770:	481e      	ldr	r0, [pc, #120]	; (1d7ec <buttons_scan_fn+0x11c>)
   1d772:	f008 fbde 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d776:	481c      	ldr	r0, [pc, #112]	; (1d7e8 <buttons_scan_fn+0x118>)
   1d778:	f002 fc48 	bl	2000c <z_spin_lock_set_owner>
		switch (state) {
   1d77c:	4b1d      	ldr	r3, [pc, #116]	; (1d7f4 <buttons_scan_fn+0x124>)
   1d77e:	7818      	ldrb	r0, [r3, #0]
   1d780:	2801      	cmp	r0, #1
   1d782:	d119      	bne.n	1d7b8 <buttons_scan_fn+0xe8>
			state = STATE_WAITING;
   1d784:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   1d786:	f7ff ff39 	bl	1d5fc <callback_ctrl>
   1d78a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d78c:	4816      	ldr	r0, [pc, #88]	; (1d7e8 <buttons_scan_fn+0x118>)
   1d78e:	f002 fc2d 	bl	1ffec <z_spin_unlock_valid>
   1d792:	b930      	cbnz	r0, 1d7a2 <buttons_scan_fn+0xd2>
   1d794:	4915      	ldr	r1, [pc, #84]	; (1d7ec <buttons_scan_fn+0x11c>)
   1d796:	4816      	ldr	r0, [pc, #88]	; (1d7f0 <buttons_scan_fn+0x120>)
   1d798:	22c2      	movs	r2, #194	; 0xc2
   1d79a:	f008 fbd1 	bl	25f40 <assert_print>
   1d79e:	21c2      	movs	r1, #194	; 0xc2
   1d7a0:	e7e6      	b.n	1d770 <buttons_scan_fn+0xa0>
	__asm__ volatile(
   1d7a2:	f385 8811 	msr	BASEPRI, r5
   1d7a6:	f3bf 8f6f 	isb	sy
		if (err) {
   1d7aa:	b16c      	cbz	r4, 1d7c8 <buttons_scan_fn+0xf8>
}
   1d7ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Cannot enable callbacks");
   1d7b0:	4811      	ldr	r0, [pc, #68]	; (1d7f8 <buttons_scan_fn+0x128>)
   1d7b2:	2145      	movs	r1, #69	; 0x45
   1d7b4:	f008 bbd2 	b.w	25f5c <z_log_minimal_printk>
			__ASSERT_NO_MSG(false);
   1d7b8:	4910      	ldr	r1, [pc, #64]	; (1d7fc <buttons_scan_fn+0x12c>)
   1d7ba:	480d      	ldr	r0, [pc, #52]	; (1d7f0 <buttons_scan_fn+0x120>)
   1d7bc:	228a      	movs	r2, #138	; 0x8a
   1d7be:	f008 fbbf 	bl	25f40 <assert_print>
   1d7c2:	480e      	ldr	r0, [pc, #56]	; (1d7fc <buttons_scan_fn+0x12c>)
   1d7c4:	218a      	movs	r1, #138	; 0x8a
   1d7c6:	e7d4      	b.n	1d772 <buttons_scan_fn+0xa2>
}
   1d7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d7cc:	20002904 	.word	0x20002904
   1d7d0:	2000085b 	.word	0x2000085b
   1d7d4:	200028d4 	.word	0x200028d4
   1d7d8:	20002908 	.word	0x20002908
   1d7dc:	200028d8 	.word	0x200028d8
   1d7e0:	200028ec 	.word	0x200028ec
   1d7e4:	20001d18 	.word	0x20001d18
   1d7e8:	200028f4 	.word	0x200028f4
   1d7ec:	0002a819 	.word	0x0002a819
   1d7f0:	0002a7df 	.word	0x0002a7df
   1d7f4:	2000368a 	.word	0x2000368a
   1d7f8:	0002d091 	.word	0x0002d091
   1d7fc:	0002d053 	.word	0x0002d053

0001d800 <dk_leds_init>:
{
   1d800:	b570      	push	{r4, r5, r6, lr}
   1d802:	4c0d      	ldr	r4, [pc, #52]	; (1d838 <dk_leds_init+0x38>)
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d804:	2600      	movs	r6, #0
				  spec->dt_flags | extra_flags);
   1d806:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   1d808:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1d80a:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   1d80c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1d810:	f7ff fd9a 	bl	1d348 <z_impl_gpio_pin_configure>
		if (err) {
   1d814:	4605      	mov	r5, r0
   1d816:	b948      	cbnz	r0, 1d82c <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d818:	3601      	adds	r6, #1
   1d81a:	2e03      	cmp	r6, #3
   1d81c:	f104 0408 	add.w	r4, r4, #8
   1d820:	d1f1      	bne.n	1d806 <dk_leds_init+0x6>
}
   1d822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d826:	210f      	movs	r1, #15
   1d828:	f7ff bebe 	b.w	1d5a8 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1d82c:	4803      	ldr	r0, [pc, #12]	; (1d83c <dk_leds_init+0x3c>)
   1d82e:	2145      	movs	r1, #69	; 0x45
   1d830:	f008 fb94 	bl	25f5c <z_log_minimal_printk>
}
   1d834:	4628      	mov	r0, r5
   1d836:	bd70      	pop	{r4, r5, r6, pc}
   1d838:	0002a1d8 	.word	0x0002a1d8
   1d83c:	0002d0ae 	.word	0x0002d0ae

0001d840 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d840:	4b07      	ldr	r3, [pc, #28]	; (1d860 <dk_read_buttons+0x20>)
   1d842:	f3bf 8f5b 	dmb	ish
   1d846:	681b      	ldr	r3, [r3, #0]
   1d848:	f3bf 8f5b 	dmb	ish
	if (button_state != NULL) {
   1d84c:	b100      	cbz	r0, 1d850 <dk_read_buttons+0x10>
		*button_state = current_state;
   1d84e:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   1d850:	4804      	ldr	r0, [pc, #16]	; (1d864 <dk_read_buttons+0x24>)
   1d852:	b111      	cbz	r1, 1d85a <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   1d854:	6802      	ldr	r2, [r0, #0]
   1d856:	405a      	eors	r2, r3
   1d858:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   1d85a:	6003      	str	r3, [r0, #0]
}
   1d85c:	4770      	bx	lr
   1d85e:	bf00      	nop
   1d860:	20002904 	.word	0x20002904
   1d864:	200028d0 	.word	0x200028d0

0001d868 <dk_buttons_init>:
{
   1d868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	button_handler_cb = button_handler;
   1d86a:	4b35      	ldr	r3, [pc, #212]	; (1d940 <dk_buttons_init+0xd8>)
   1d86c:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1d86e:	4835      	ldr	r0, [pc, #212]	; (1d944 <dk_buttons_init+0xdc>)
   1d870:	f00b fd3c 	bl	292ec <z_impl_k_mutex_init>
   1d874:	4f34      	ldr	r7, [pc, #208]	; (1d948 <dk_buttons_init+0xe0>)
   1d876:	4a35      	ldr	r2, [pc, #212]	; (1d94c <dk_buttons_init+0xe4>)
   1d878:	2119      	movs	r1, #25
   1d87a:	4638      	mov	r0, r7
   1d87c:	f7ff fd64 	bl	1d348 <z_impl_gpio_pin_configure>
		if (err) {
   1d880:	4604      	mov	r4, r0
   1d882:	b988      	cbnz	r0, 1d8a8 <dk_buttons_init+0x40>
   1d884:	4a31      	ldr	r2, [pc, #196]	; (1d94c <dk_buttons_init+0xe4>)
   1d886:	2102      	movs	r1, #2
   1d888:	4638      	mov	r0, r7
   1d88a:	f7ff fd5d 	bl	1d348 <z_impl_gpio_pin_configure>
   1d88e:	4604      	mov	r4, r0
   1d890:	b950      	cbnz	r0, 1d8a8 <dk_buttons_init+0x40>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1d892:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d896:	2119      	movs	r1, #25
   1d898:	4638      	mov	r0, r7
   1d89a:	f7ff fdcf 	bl	1d43c <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1d89e:	4604      	mov	r4, r0
   1d8a0:	b138      	cbz	r0, 1d8b2 <dk_buttons_init+0x4a>
			LOG_ERR("Cannot disable callbacks()");
   1d8a2:	482b      	ldr	r0, [pc, #172]	; (1d950 <dk_buttons_init+0xe8>)
   1d8a4:	2145      	movs	r1, #69	; 0x45
   1d8a6:	e001      	b.n	1d8ac <dk_buttons_init+0x44>
			LOG_ERR("Cannot configure button gpio");
   1d8a8:	482a      	ldr	r0, [pc, #168]	; (1d954 <dk_buttons_init+0xec>)
   1d8aa:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Cannot add callback");
   1d8ac:	f008 fb56 	bl	25f5c <z_log_minimal_printk>
			return err;
   1d8b0:	e043      	b.n	1d93a <dk_buttons_init+0xd2>
   1d8b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d8b6:	2102      	movs	r1, #2
   1d8b8:	4638      	mov	r0, r7
   1d8ba:	f7ff fdbf 	bl	1d43c <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1d8be:	4604      	mov	r4, r0
   1d8c0:	2800      	cmp	r0, #0
   1d8c2:	d1ee      	bne.n	1d8a2 <dk_buttons_init+0x3a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1d8c4:	4d24      	ldr	r5, [pc, #144]	; (1d958 <dk_buttons_init+0xf0>)
   1d8c6:	4b25      	ldr	r3, [pc, #148]	; (1d95c <dk_buttons_init+0xf4>)
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
   1d8c8:	68be      	ldr	r6, [r7, #8]
	callback->handler = handler;
   1d8ca:	606b      	str	r3, [r5, #4]
	callback->pin_mask = pin_mask;
   1d8cc:	4b24      	ldr	r3, [pc, #144]	; (1d960 <dk_buttons_init+0xf8>)
   1d8ce:	60ab      	str	r3, [r5, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1d8d0:	69f3      	ldr	r3, [r6, #28]
   1d8d2:	b923      	cbnz	r3, 1d8de <dk_buttons_init+0x76>
		return -ENOTSUP;
   1d8d4:	f06f 0485 	mvn.w	r4, #133	; 0x85
			LOG_ERR("Cannot add callback");
   1d8d8:	4822      	ldr	r0, [pc, #136]	; (1d964 <dk_buttons_init+0xfc>)
   1d8da:	2145      	movs	r1, #69	; 0x45
   1d8dc:	e7e6      	b.n	1d8ac <dk_buttons_init+0x44>
	}

	return api->manage_callback(port, callback, true);
   1d8de:	2201      	movs	r2, #1
   1d8e0:	4629      	mov	r1, r5
   1d8e2:	4638      	mov	r0, r7
   1d8e4:	4798      	blx	r3
		if (err) {
   1d8e6:	4604      	mov	r4, r0
   1d8e8:	2800      	cmp	r0, #0
   1d8ea:	d1f5      	bne.n	1d8d8 <dk_buttons_init+0x70>
	if (api->manage_callback == NULL) {
   1d8ec:	69f3      	ldr	r3, [r6, #28]
   1d8ee:	2b00      	cmp	r3, #0
   1d8f0:	d0f0      	beq.n	1d8d4 <dk_buttons_init+0x6c>
	return api->manage_callback(port, callback, true);
   1d8f2:	2201      	movs	r2, #1
   1d8f4:	4629      	mov	r1, r5
   1d8f6:	4638      	mov	r0, r7
   1d8f8:	4798      	blx	r3
   1d8fa:	4604      	mov	r4, r0
   1d8fc:	2800      	cmp	r0, #0
   1d8fe:	d1eb      	bne.n	1d8d8 <dk_buttons_init+0x70>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1d900:	4919      	ldr	r1, [pc, #100]	; (1d968 <dk_buttons_init+0x100>)
   1d902:	481a      	ldr	r0, [pc, #104]	; (1d96c <dk_buttons_init+0x104>)
   1d904:	f003 f9b8 	bl	20c78 <k_work_init_delayable>
	state = STATE_SCANNING;
   1d908:	4b19      	ldr	r3, [pc, #100]	; (1d970 <dk_buttons_init+0x108>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1d90a:	4818      	ldr	r0, [pc, #96]	; (1d96c <dk_buttons_init+0x104>)
	state = STATE_SCANNING;
   1d90c:	2201      	movs	r2, #1
   1d90e:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1d910:	2300      	movs	r3, #0
   1d912:	2200      	movs	r2, #0
   1d914:	f003 fa36 	bl	20d84 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1d918:	4621      	mov	r1, r4
   1d91a:	4620      	mov	r0, r4
   1d91c:	f7ff ff90 	bl	1d840 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1d920:	f7ff fe00 	bl	1d524 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d924:	f3bf 8f5b 	dmb	ish
   1d928:	4b12      	ldr	r3, [pc, #72]	; (1d974 <dk_buttons_init+0x10c>)
   1d92a:	e853 2f00 	ldrex	r2, [r3]
   1d92e:	e843 0100 	strex	r1, r0, [r3]
   1d932:	2900      	cmp	r1, #0
   1d934:	d1f9      	bne.n	1d92a <dk_buttons_init+0xc2>
   1d936:	f3bf 8f5b 	dmb	ish
}
   1d93a:	4620      	mov	r0, r4
   1d93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d93e:	bf00      	nop
   1d940:	20002908 	.word	0x20002908
   1d944:	200028d8 	.word	0x200028d8
   1d948:	00029738 	.word	0x00029738
   1d94c:	00010011 	.word	0x00010011
   1d950:	0002d0ef 	.word	0x0002d0ef
   1d954:	0002d0cd 	.word	0x0002d0cd
   1d958:	200028f8 	.word	0x200028f8
   1d95c:	0001d62d 	.word	0x0001d62d
   1d960:	02000004 	.word	0x02000004
   1d964:	0002d10f 	.word	0x0002d10f
   1d968:	0001d6d1 	.word	0x0001d6d1
   1d96c:	20001d18 	.word	0x20001d18
   1d970:	2000368a 	.word	0x2000368a
   1d974:	20002904 	.word	0x20002904

0001d978 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1d978:	2802      	cmp	r0, #2
{
   1d97a:	b510      	push	{r4, lr}
   1d97c:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   1d97e:	d907      	bls.n	1d990 <dk_set_led+0x18>
		LOG_ERR("LED index out of the range");
   1d980:	480b      	ldr	r0, [pc, #44]	; (1d9b0 <dk_set_led+0x38>)
   1d982:	2145      	movs	r1, #69	; 0x45
   1d984:	f008 faea 	bl	25f5c <z_log_minimal_printk>
   1d988:	f06f 0415 	mvn.w	r4, #21
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1d98c:	4620      	mov	r0, r4
   1d98e:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1d990:	4b08      	ldr	r3, [pc, #32]	; (1d9b4 <dk_set_led+0x3c>)
   1d992:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1d996:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1d99a:	7909      	ldrb	r1, [r1, #4]
   1d99c:	f7ff fd9c 	bl	1d4d8 <gpio_pin_set>
	if (err) {
   1d9a0:	4604      	mov	r4, r0
   1d9a2:	2800      	cmp	r0, #0
   1d9a4:	d0f2      	beq.n	1d98c <dk_set_led+0x14>
		LOG_ERR("Cannot write LED gpio");
   1d9a6:	4804      	ldr	r0, [pc, #16]	; (1d9b8 <dk_set_led+0x40>)
   1d9a8:	2145      	movs	r1, #69	; 0x45
   1d9aa:	f008 fad7 	bl	25f5c <z_log_minimal_printk>
   1d9ae:	e7ed      	b.n	1d98c <dk_set_led+0x14>
   1d9b0:	0002d128 	.word	0x0002d128
   1d9b4:	0002a1d8 	.word	0x0002a1d8
   1d9b8:	0002d01a 	.word	0x0002d01a

0001d9bc <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1d9bc:	4602      	mov	r2, r0
   1d9be:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1d9c0:	4801      	ldr	r0, [pc, #4]	; (1d9c8 <multithreading_lock_acquire+0xc>)
   1d9c2:	f002 bb59 	b.w	20078 <z_impl_k_mutex_lock>
   1d9c6:	bf00      	nop
   1d9c8:	200008e0 	.word	0x200008e0

0001d9cc <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1d9cc:	4801      	ldr	r0, [pc, #4]	; (1d9d4 <multithreading_lock_release+0x8>)
   1d9ce:	f002 bc09 	b.w	201e4 <z_impl_k_mutex_unlock>
   1d9d2:	bf00      	nop
   1d9d4:	200008e0 	.word	0x200008e0

0001d9d8 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1d9d8:	4803      	ldr	r0, [pc, #12]	; (1d9e8 <k_sys_fatal_error_handler+0x10>)
{
   1d9da:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   1d9dc:	2145      	movs	r1, #69	; 0x45
   1d9de:	f008 fabd 	bl	25f5c <z_log_minimal_printk>
		sys_arch_reboot(0);
   1d9e2:	2000      	movs	r0, #0
   1d9e4:	f7f6 f8ae 	bl	13b44 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1d9e8:	0002d15c 	.word	0x0002d15c

0001d9ec <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1d9ec:	b508      	push	{r3, lr}
   1d9ee:	4602      	mov	r2, r0
   1d9f0:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1d9f2:	4805      	ldr	r0, [pc, #20]	; (1da08 <sdc_assertion_handler+0x1c>)
   1d9f4:	2145      	movs	r1, #69	; 0x45
   1d9f6:	f008 fab1 	bl	25f5c <z_log_minimal_printk>
	k_oops();
   1d9fa:	4040      	eors	r0, r0
   1d9fc:	f380 8811 	msr	BASEPRI, r0
   1da00:	f04f 0003 	mov.w	r0, #3
   1da04:	df02      	svc	2
}
   1da06:	bd08      	pop	{r3, pc}
   1da08:	0002d17e 	.word	0x0002d17e

0001da0c <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   1da0c:	b510      	push	{r4, lr}
	BT_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   1da0e:	4921      	ldr	r1, [pc, #132]	; (1da94 <hci_driver_open+0x88>)
   1da10:	4821      	ldr	r0, [pc, #132]	; (1da98 <hci_driver_open+0x8c>)
{
   1da12:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   1da14:	f003 f81a 	bl	20a4c <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   1da18:	f000 fe9e 	bl	1e758 <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   1da1c:	a803      	add	r0, sp, #12
   1da1e:	f7e6 fcc1 	bl	43a4 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1da22:	4a1e      	ldr	r2, [pc, #120]	; (1da9c <hci_driver_open+0x90>)
   1da24:	481e      	ldr	r0, [pc, #120]	; (1daa0 <hci_driver_open+0x94>)
   1da26:	2149      	movs	r1, #73	; 0x49
   1da28:	f008 fa98 	bl	25f5c <z_log_minimal_printk>
   1da2c:	2214      	movs	r2, #20
   1da2e:	a903      	add	r1, sp, #12
   1da30:	2003      	movs	r0, #3
   1da32:	f7f4 f9d9 	bl	11de8 <z_log_minimal_hexdump_print>
   1da36:	481b      	ldr	r0, [pc, #108]	; (1daa4 <hci_driver_open+0x98>)
   1da38:	f00b fc00 	bl	2923c <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   1da3c:	b940      	cbnz	r0, 1da50 <hci_driver_open+0x44>
		BT_ERR("Entropy source device not ready");
   1da3e:	481a      	ldr	r0, [pc, #104]	; (1daa8 <hci_driver_open+0x9c>)
   1da40:	2145      	movs	r1, #69	; 0x45
   1da42:	f008 fa8b 	bl	25f5c <z_log_minimal_printk>
		return -ENODEV;
   1da46:	f06f 0412 	mvn.w	r4, #18
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   1da4a:	4620      	mov	r0, r4
   1da4c:	b008      	add	sp, #32
   1da4e:	bd10      	pop	{r4, pc}
	sdc_rand_source_t rand_functions = {
   1da50:	4a16      	ldr	r2, [pc, #88]	; (1daac <hci_driver_open+0xa0>)
   1da52:	ca07      	ldmia	r2, {r0, r1, r2}
   1da54:	466b      	mov	r3, sp
   1da56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1da5a:	4618      	mov	r0, r3
   1da5c:	f7e6 fe50 	bl	4700 <sdc_rand_source_register>
	if (err) {
   1da60:	4602      	mov	r2, r0
   1da62:	b130      	cbz	r0, 1da72 <hci_driver_open+0x66>
		BT_ERR("Failed to register rand source (%d)", err);
   1da64:	4812      	ldr	r0, [pc, #72]	; (1dab0 <hci_driver_open+0xa4>)
   1da66:	2145      	movs	r1, #69	; 0x45
   1da68:	f008 fa78 	bl	25f5c <z_log_minimal_printk>
		return -EINVAL;
   1da6c:	f06f 0415 	mvn.w	r4, #21
   1da70:	e7eb      	b.n	1da4a <hci_driver_open+0x3e>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1da72:	f04f 30ff 	mov.w	r0, #4294967295
   1da76:	f04f 31ff 	mov.w	r1, #4294967295
   1da7a:	f7ff ff9f 	bl	1d9bc <multithreading_lock_acquire>
	if (err) {
   1da7e:	4604      	mov	r4, r0
   1da80:	2800      	cmp	r0, #0
   1da82:	d1e2      	bne.n	1da4a <hci_driver_open+0x3e>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1da84:	490b      	ldr	r1, [pc, #44]	; (1dab4 <hci_driver_open+0xa8>)
   1da86:	480c      	ldr	r0, [pc, #48]	; (1dab8 <hci_driver_open+0xac>)
   1da88:	f7e6 fcfe 	bl	4488 <sdc_enable>
	if (err) {
   1da8c:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1da8e:	f7ff ff9d 	bl	1d9cc <multithreading_lock_release>
	return 0;
   1da92:	e7da      	b.n	1da4a <hci_driver_open+0x3e>
   1da94:	0002900f 	.word	0x0002900f
   1da98:	2000290c 	.word	0x2000290c
   1da9c:	0002d1a8 	.word	0x0002d1a8
   1daa0:	0002d1cf 	.word	0x0002d1cf
   1daa4:	00029750 	.word	0x00029750
   1daa8:	0002d1d7 	.word	0x0002d1d7
   1daac:	00029b90 	.word	0x00029b90
   1dab0:	0002d1fc 	.word	0x0002d1fc
   1dab4:	200036d4 	.word	0x200036d4
   1dab8:	0001dc31 	.word	0x0001dc31

0001dabc <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1dabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1dabe:	4835      	ldr	r0, [pc, #212]	; (1db94 <hci_driver_init+0xd8>)
   1dac0:	f7f7 faac 	bl	1501c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1dac4:	4834      	ldr	r0, [pc, #208]	; (1db98 <hci_driver_init+0xdc>)
   1dac6:	f7e6 fd07 	bl	44d8 <sdc_init>
			err = sdc_support_adv();
   1daca:	f7e6 fd83 	bl	45d4 <sdc_support_adv>
			if (err) {
   1dace:	b118      	cbz	r0, 1dad8 <hci_driver_init+0x1c>
				return -ENOTSUP;
   1dad0:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1dad4:	b003      	add	sp, #12
   1dad6:	bd30      	pop	{r4, r5, pc}
		err = sdc_support_peripheral();
   1dad8:	f7e6 fdac 	bl	4634 <sdc_support_peripheral>
		if (err) {
   1dadc:	2800      	cmp	r0, #0
   1dade:	d1f7      	bne.n	1dad0 <hci_driver_init+0x14>
			err = sdc_support_dle_peripheral();
   1dae0:	f7e6 fd88 	bl	45f4 <sdc_support_dle_peripheral>
			if (err) {
   1dae4:	2800      	cmp	r0, #0
   1dae6:	d1f3      	bne.n	1dad0 <hci_driver_init+0x14>
		err = sdc_support_le_2m_phy();
   1dae8:	f7e6 fd94 	bl	4614 <sdc_support_le_2m_phy>
		if (err) {
   1daec:	2800      	cmp	r0, #0
   1daee:	d1ef      	bne.n	1dad0 <hci_driver_init+0x14>
			err = sdc_support_phy_update_peripheral();
   1daf0:	f7e6 fdb0 	bl	4654 <sdc_support_phy_update_peripheral>
			if (err) {
   1daf4:	4604      	mov	r4, r0
   1daf6:	2800      	cmp	r0, #0
   1daf8:	d1ea      	bne.n	1dad0 <hci_driver_init+0x14>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dafa:	aa01      	add	r2, sp, #4
   1dafc:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1dafe:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1db02:	f7e6 fc5d 	bl	43c0 <sdc_cfg_set>
	if (required_memory < 0) {
   1db06:	2800      	cmp	r0, #0
   1db08:	dbe4      	blt.n	1dad4 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1db0a:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1db0c:	aa01      	add	r2, sp, #4
   1db0e:	2102      	movs	r1, #2
   1db10:	4620      	mov	r0, r4
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1db12:	f88d 5004 	strb.w	r5, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1db16:	f7e6 fc53 	bl	43c0 <sdc_cfg_set>
	if (required_memory < 0) {
   1db1a:	2800      	cmp	r0, #0
   1db1c:	dbda      	blt.n	1dad4 <hci_driver_init+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1db1e:	4b1f      	ldr	r3, [pc, #124]	; (1db9c <hci_driver_init+0xe0>)
   1db20:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1db22:	aa01      	add	r2, sp, #4
   1db24:	2103      	movs	r1, #3
   1db26:	4620      	mov	r0, r4
   1db28:	f7e6 fc4a 	bl	43c0 <sdc_cfg_set>
	if (required_memory < 0) {
   1db2c:	2800      	cmp	r0, #0
   1db2e:	dbd1      	blt.n	1dad4 <hci_driver_init+0x18>
	cfg.event_length.event_length_us =
   1db30:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1db34:	aa01      	add	r2, sp, #4
   1db36:	2104      	movs	r1, #4
   1db38:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1db3a:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1db3c:	f7e6 fc40 	bl	43c0 <sdc_cfg_set>
	if (required_memory < 0) {
   1db40:	2800      	cmp	r0, #0
   1db42:	dbc7      	blt.n	1dad4 <hci_driver_init+0x18>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1db44:	aa01      	add	r2, sp, #4
   1db46:	2105      	movs	r1, #5
   1db48:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1db4a:	f88d 5004 	strb.w	r5, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1db4e:	f7e6 fc37 	bl	43c0 <sdc_cfg_set>
	if (required_memory < 0) {
   1db52:	2800      	cmp	r0, #0
   1db54:	dbbe      	blt.n	1dad4 <hci_driver_init+0x18>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1db56:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1db58:	aa01      	add	r2, sp, #4
   1db5a:	2107      	movs	r1, #7
   1db5c:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1db5e:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1db62:	f7e6 fc2d 	bl	43c0 <sdc_cfg_set>
		if (required_memory < 0) {
   1db66:	2800      	cmp	r0, #0
   1db68:	dbb4      	blt.n	1dad4 <hci_driver_init+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   1db6a:	f240 724d 	movw	r2, #1869	; 0x74d
   1db6e:	4290      	cmp	r0, r2
   1db70:	dd0d      	ble.n	1db8e <hci_driver_init+0xd2>
		BT_ERR("Allocated memory too low: %u < %u",
   1db72:	4603      	mov	r3, r0
   1db74:	2145      	movs	r1, #69	; 0x45
   1db76:	480a      	ldr	r0, [pc, #40]	; (1dba0 <hci_driver_init+0xe4>)
   1db78:	f008 f9f0 	bl	25f5c <z_log_minimal_printk>
		k_panic();
   1db7c:	4040      	eors	r0, r0
   1db7e:	f380 8811 	msr	BASEPRI, r0
   1db82:	f04f 0004 	mov.w	r0, #4
   1db86:	df02      	svc	2
		return -ENOMEM;
   1db88:	f06f 000b 	mvn.w	r0, #11
   1db8c:	e7a2      	b.n	1dad4 <hci_driver_init+0x18>
	return 0;
   1db8e:	2000      	movs	r0, #0
	if (err) {
   1db90:	e7a0      	b.n	1dad4 <hci_driver_init+0x18>
   1db92:	bf00      	nop
   1db94:	0002a200 	.word	0x0002a200
   1db98:	0001d9ed 	.word	0x0001d9ed
   1db9c:	02031b1b 	.word	0x02031b1b
   1dba0:	0002d225 	.word	0x0002d225

0001dba4 <rand_prio_low_vector_get_blocking>:
{
   1dba4:	b510      	push	{r4, lr}
   1dba6:	4603      	mov	r3, r0
   1dba8:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1dbaa:	480d      	ldr	r0, [pc, #52]	; (1dbe0 <rand_prio_low_vector_get_blocking+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1dbac:	6881      	ldr	r1, [r0, #8]
   1dbae:	680c      	ldr	r4, [r1, #0]
   1dbb0:	b944      	cbnz	r4, 1dbc4 <rand_prio_low_vector_get_blocking+0x20>
   1dbb2:	490c      	ldr	r1, [pc, #48]	; (1dbe4 <rand_prio_low_vector_get_blocking+0x40>)
   1dbb4:	480c      	ldr	r0, [pc, #48]	; (1dbe8 <rand_prio_low_vector_get_blocking+0x44>)
   1dbb6:	224d      	movs	r2, #77	; 0x4d
   1dbb8:	f008 f9c2 	bl	25f40 <assert_print>
   1dbbc:	4809      	ldr	r0, [pc, #36]	; (1dbe4 <rand_prio_low_vector_get_blocking+0x40>)
   1dbbe:	214d      	movs	r1, #77	; 0x4d
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1dbc0:	f008 f9b7 	bl	25f32 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1dbc4:	4619      	mov	r1, r3
   1dbc6:	47a0      	blx	r4
   1dbc8:	b148      	cbz	r0, 1dbde <rand_prio_low_vector_get_blocking+0x3a>
   1dbca:	4908      	ldr	r1, [pc, #32]	; (1dbec <rand_prio_low_vector_get_blocking+0x48>)
   1dbcc:	4806      	ldr	r0, [pc, #24]	; (1dbe8 <rand_prio_low_vector_get_blocking+0x44>)
   1dbce:	f240 12a9 	movw	r2, #425	; 0x1a9
   1dbd2:	f008 f9b5 	bl	25f40 <assert_print>
   1dbd6:	4805      	ldr	r0, [pc, #20]	; (1dbec <rand_prio_low_vector_get_blocking+0x48>)
   1dbd8:	f240 11a9 	movw	r1, #425	; 0x1a9
   1dbdc:	e7f0      	b.n	1dbc0 <rand_prio_low_vector_get_blocking+0x1c>
}
   1dbde:	bd10      	pop	{r4, pc}
   1dbe0:	00029750 	.word	0x00029750
   1dbe4:	0002d24c 	.word	0x0002d24c
   1dbe8:	0002a7df 	.word	0x0002a7df
   1dbec:	0002d280 	.word	0x0002d280

0001dbf0 <rand_prio_low_vector_get>:
{
   1dbf0:	b538      	push	{r3, r4, r5, lr}
   1dbf2:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1dbf4:	480b      	ldr	r0, [pc, #44]	; (1dc24 <rand_prio_low_vector_get+0x34>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1dbf6:	6883      	ldr	r3, [r0, #8]
   1dbf8:	685d      	ldr	r5, [r3, #4]
   1dbfa:	460a      	mov	r2, r1
   1dbfc:	b955      	cbnz	r5, 1dc14 <rand_prio_low_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1dbfe:	490a      	ldr	r1, [pc, #40]	; (1dc28 <rand_prio_low_vector_get+0x38>)
   1dc00:	480a      	ldr	r0, [pc, #40]	; (1dc2c <rand_prio_low_vector_get+0x3c>)
   1dc02:	f240 1299 	movw	r2, #409	; 0x199
   1dc06:	f008 f99b 	bl	25f40 <assert_print>
   1dc0a:	4807      	ldr	r0, [pc, #28]	; (1dc28 <rand_prio_low_vector_get+0x38>)
   1dc0c:	f240 1199 	movw	r1, #409	; 0x199
   1dc10:	f008 f98f 	bl	25f32 <assert_post_action>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1dc14:	2300      	movs	r3, #0
   1dc16:	4621      	mov	r1, r4
   1dc18:	47a8      	blx	r5
   1dc1a:	2800      	cmp	r0, #0
   1dc1c:	dbef      	blt.n	1dbfe <rand_prio_low_vector_get+0xe>
}
   1dc1e:	b2c0      	uxtb	r0, r0
   1dc20:	bd38      	pop	{r3, r4, r5, pc}
   1dc22:	bf00      	nop
   1dc24:	00029750 	.word	0x00029750
   1dc28:	0002d280 	.word	0x0002d280
   1dc2c:	0002a7df 	.word	0x0002a7df

0001dc30 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1dc30:	4901      	ldr	r1, [pc, #4]	; (1dc38 <receive_signal_raise+0x8>)
   1dc32:	4802      	ldr	r0, [pc, #8]	; (1dc3c <receive_signal_raise+0xc>)
   1dc34:	f00b bbf2 	b.w	2941c <k_work_submit_to_queue>
   1dc38:	2000290c 	.word	0x2000290c
   1dc3c:	20001dc8 	.word	0x20001dc8

0001dc40 <rand_prio_high_vector_get>:
{
   1dc40:	b538      	push	{r3, r4, r5, lr}
   1dc42:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1dc44:	480b      	ldr	r0, [pc, #44]	; (1dc74 <rand_prio_high_vector_get+0x34>)
	if (unlikely(!api->get_entropy_isr)) {
   1dc46:	6883      	ldr	r3, [r0, #8]
   1dc48:	685d      	ldr	r5, [r3, #4]
   1dc4a:	460a      	mov	r2, r1
   1dc4c:	b955      	cbnz	r5, 1dc64 <rand_prio_high_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1dc4e:	490a      	ldr	r1, [pc, #40]	; (1dc78 <rand_prio_high_vector_get+0x38>)
   1dc50:	480a      	ldr	r0, [pc, #40]	; (1dc7c <rand_prio_high_vector_get+0x3c>)
   1dc52:	f240 12a1 	movw	r2, #417	; 0x1a1
   1dc56:	f008 f973 	bl	25f40 <assert_print>
   1dc5a:	4807      	ldr	r0, [pc, #28]	; (1dc78 <rand_prio_high_vector_get+0x38>)
   1dc5c:	f240 11a1 	movw	r1, #417	; 0x1a1
   1dc60:	f008 f967 	bl	25f32 <assert_post_action>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1dc64:	2300      	movs	r3, #0
   1dc66:	4621      	mov	r1, r4
   1dc68:	47a8      	blx	r5
   1dc6a:	2800      	cmp	r0, #0
   1dc6c:	dbef      	blt.n	1dc4e <rand_prio_high_vector_get+0xe>
}
   1dc6e:	b2c0      	uxtb	r0, r0
   1dc70:	bd38      	pop	{r3, r4, r5, pc}
   1dc72:	bf00      	nop
   1dc74:	00029750 	.word	0x00029750
   1dc78:	0002d280 	.word	0x0002d280
   1dc7c:	0002a7df 	.word	0x0002a7df

0001dc80 <hci_driver_receive_process>:
{
   1dc80:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1dc82:	f04f 30ff 	mov.w	r0, #4294967295
   1dc86:	f04f 31ff 	mov.w	r1, #4294967295
   1dc8a:	f7ff fe97 	bl	1d9bc <multithreading_lock_acquire>
	if (!errcode) {
   1dc8e:	2800      	cmp	r0, #0
   1dc90:	d15b      	bne.n	1dd4a <hci_driver_receive_process+0xca>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1dc92:	4d2f      	ldr	r5, [pc, #188]	; (1dd50 <hci_driver_receive_process+0xd0>)
   1dc94:	f10d 0107 	add.w	r1, sp, #7
   1dc98:	4628      	mov	r0, r5
   1dc9a:	f000 fbed 	bl	1e478 <hci_internal_msg_get>
   1dc9e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1dca0:	f7ff fe94 	bl	1d9cc <multithreading_lock_release>
	if (errcode) {
   1dca4:	2c00      	cmp	r4, #0
   1dca6:	d150      	bne.n	1dd4a <hci_driver_receive_process+0xca>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1dca8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dcac:	2b04      	cmp	r3, #4
   1dcae:	d12b      	bne.n	1dd08 <hci_driver_receive_process+0x88>
	switch (hdr->evt) {
   1dcb0:	7828      	ldrb	r0, [r5, #0]
   1dcb2:	283e      	cmp	r0, #62	; 0x3e
   1dcb4:	d014      	beq.n	1dce0 <hci_driver_receive_process+0x60>
   1dcb6:	28ff      	cmp	r0, #255	; 0xff
   1dcb8:	d019      	beq.n	1dcee <hci_driver_receive_process+0x6e>
		switch (subevent) {
   1dcba:	f04f 32ff 	mov.w	r2, #4294967295
   1dcbe:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1dcc2:	4621      	mov	r1, r4
   1dcc4:	f7f6 f94c 	bl	13f60 <bt_buf_get_evt>
	if (!evt_buf) {
   1dcc8:	4606      	mov	r6, r0
   1dcca:	b998      	cbnz	r0, 1dcf4 <hci_driver_receive_process+0x74>
		if (discardable) {
   1dccc:	b91c      	cbnz	r4, 1dcd6 <hci_driver_receive_process+0x56>
		BT_ERR("No event buffer available");
   1dcce:	4821      	ldr	r0, [pc, #132]	; (1dd54 <hci_driver_receive_process+0xd4>)
   1dcd0:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No data buffer available");
   1dcd2:	f008 f943 	bl	25f5c <z_log_minimal_printk>
}
   1dcd6:	b002      	add	sp, #8
   1dcd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1dcdc:	f7ff bfa8 	b.w	1dc30 <receive_signal_raise>
		switch (me->subevent) {
   1dce0:	78ab      	ldrb	r3, [r5, #2]
   1dce2:	2b02      	cmp	r3, #2
		switch (subevent) {
   1dce4:	d1e9      	bne.n	1dcba <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1dce6:	2200      	movs	r2, #0
   1dce8:	2300      	movs	r3, #0
			return true;
   1dcea:	2401      	movs	r4, #1
   1dcec:	e7e9      	b.n	1dcc2 <hci_driver_receive_process+0x42>
		switch (subevent) {
   1dcee:	78ab      	ldrb	r3, [r5, #2]
   1dcf0:	2b80      	cmp	r3, #128	; 0x80
   1dcf2:	e7f7      	b.n	1dce4 <hci_driver_receive_process+0x64>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1dcf4:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1dcf6:	4916      	ldr	r1, [pc, #88]	; (1dd50 <hci_driver_receive_process+0xd0>)
   1dcf8:	3202      	adds	r2, #2
   1dcfa:	3008      	adds	r0, #8
   1dcfc:	f00a fef5 	bl	28aea <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1dd00:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1dd02:	f7f7 f965 	bl	14fd0 <bt_recv>
   1dd06:	e7e6      	b.n	1dcd6 <hci_driver_receive_process+0x56>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1dd08:	2b02      	cmp	r3, #2
   1dd0a:	d113      	bne.n	1dd34 <hci_driver_receive_process+0xb4>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1dd0c:	f04f 32ff 	mov.w	r2, #4294967295
   1dd10:	f04f 33ff 	mov.w	r3, #4294967295
   1dd14:	2003      	movs	r0, #3
   1dd16:	f7f6 f8e5 	bl	13ee4 <bt_buf_get_rx>
	if (!data_buf) {
   1dd1a:	4604      	mov	r4, r0
   1dd1c:	b910      	cbnz	r0, 1dd24 <hci_driver_receive_process+0xa4>
		BT_ERR("No data buffer available");
   1dd1e:	480e      	ldr	r0, [pc, #56]	; (1dd58 <hci_driver_receive_process+0xd8>)
   1dd20:	2145      	movs	r1, #69	; 0x45
   1dd22:	e7d6      	b.n	1dcd2 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1dd24:	886a      	ldrh	r2, [r5, #2]
   1dd26:	4629      	mov	r1, r5
   1dd28:	3204      	adds	r2, #4
   1dd2a:	3008      	adds	r0, #8
   1dd2c:	f00a fedd 	bl	28aea <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1dd30:	4620      	mov	r0, r4
   1dd32:	e7e6      	b.n	1dd02 <hci_driver_receive_process+0x82>
		__ASSERT(false, "sdc_hci_msg_type_t has changed. This if-else needs a new branch");
   1dd34:	4909      	ldr	r1, [pc, #36]	; (1dd5c <hci_driver_receive_process+0xdc>)
   1dd36:	480a      	ldr	r0, [pc, #40]	; (1dd60 <hci_driver_receive_process+0xe0>)
   1dd38:	f44f 72bb 	mov.w	r2, #374	; 0x176
   1dd3c:	f008 f900 	bl	25f40 <assert_print>
   1dd40:	4806      	ldr	r0, [pc, #24]	; (1dd5c <hci_driver_receive_process+0xdc>)
   1dd42:	f44f 71bb 	mov.w	r1, #374	; 0x176
   1dd46:	f008 f8f4 	bl	25f32 <assert_post_action>
}
   1dd4a:	b002      	add	sp, #8
   1dd4c:	bd70      	pop	{r4, r5, r6, pc}
   1dd4e:	bf00      	nop
   1dd50:	2000368b 	.word	0x2000368b
   1dd54:	0002d2b9 	.word	0x0002d2b9
   1dd58:	0002d2d8 	.word	0x0002d2d8
   1dd5c:	0002d280 	.word	0x0002d280
   1dd60:	0002a7df 	.word	0x0002a7df

0001dd64 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1dd64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1dd66:	4db2      	ldr	r5, [pc, #712]	; (1e030 <hci_internal_cmd_put+0x2cc>)
   1dd68:	782b      	ldrb	r3, [r5, #0]
{
   1dd6a:	4606      	mov	r6, r0
	if (cmd_complete_or_status.occurred) {
   1dd6c:	2b00      	cmp	r3, #0
   1dd6e:	f040 8380 	bne.w	1e472 <hci_internal_cmd_put+0x70e>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1dd72:	2304      	movs	r3, #4
   1dd74:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1dd78:	4bae      	ldr	r3, [pc, #696]	; (1e034 <hci_internal_cmd_put+0x2d0>)
   1dd7a:	8804      	ldrh	r4, [r0, #0]
   1dd7c:	681f      	ldr	r7, [r3, #0]
   1dd7e:	b1a7      	cbz	r7, 1ddaa <hci_internal_cmd_put+0x46>
		status = user_cmd_handler(cmd_in,
   1dd80:	f10d 0306 	add.w	r3, sp, #6
   1dd84:	f10d 0207 	add.w	r2, sp, #7
   1dd88:	1c69      	adds	r1, r5, #1
   1dd8a:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1dd8c:	2801      	cmp	r0, #1
   1dd8e:	d00c      	beq.n	1ddaa <hci_internal_cmd_put+0x46>
	if (generate_command_status_event ||
   1dd90:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1dd94:	bbab      	cbnz	r3, 1de02 <hci_internal_cmd_put+0x9e>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1dd96:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1dd9a:	70ab      	strb	r3, [r5, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1dd9c:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1dd9e:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1dda0:	706a      	strb	r2, [r5, #1]
	evt_data->ncmd = 1;
   1dda2:	70eb      	strb	r3, [r5, #3]
	evt_data->opcode = hci_opcode;
   1dda4:	80ac      	strh	r4, [r5, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1dda6:	71a8      	strb	r0, [r5, #6]
}
   1dda8:	e034      	b.n	1de14 <hci_internal_cmd_put+0xb0>
		switch (BT_OGF(opcode)) {
   1ddaa:	f5b4 5f10 	cmp.w	r4, #9216	; 0x2400
   1ddae:	ea4f 2394 	mov.w	r3, r4, lsr #10
   1ddb2:	d20d      	bcs.n	1ddd0 <hci_internal_cmd_put+0x6c>
   1ddb4:	b17b      	cbz	r3, 1ddd6 <hci_internal_cmd_put+0x72>
   1ddb6:	3b01      	subs	r3, #1
   1ddb8:	2b07      	cmp	r3, #7
   1ddba:	d819      	bhi.n	1ddf0 <hci_internal_cmd_put+0x8c>
   1ddbc:	e8df f013 	tbh	[pc, r3, lsl #1]
   1ddc0:	0018000d 	.word	0x0018000d
   1ddc4:	0081003f 	.word	0x0081003f
   1ddc8:	00180018 	.word	0x00180018
   1ddcc:	01400018 	.word	0x01400018
   1ddd0:	2b3f      	cmp	r3, #63	; 0x3f
   1ddd2:	f000 8290 	beq.w	1e2f6 <hci_internal_cmd_put+0x592>
	switch (opcode)	{
   1ddd6:	2001      	movs	r0, #1
   1ddd8:	e013      	b.n	1de02 <hci_internal_cmd_put+0x9e>
	return ((uint16_t)src[1] << 8) | src[0];
   1ddda:	4630      	mov	r0, r6
	switch (opcode)	{
   1dddc:	f240 4206 	movw	r2, #1030	; 0x406
   1dde0:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1dde4:	4293      	cmp	r3, r2
   1dde6:	d005      	beq.n	1ddf4 <hci_internal_cmd_put+0x90>
   1dde8:	f240 421d 	movw	r2, #1053	; 0x41d
   1ddec:	4293      	cmp	r3, r2
   1ddee:	d016      	beq.n	1de1e <hci_internal_cmd_put+0xba>
		switch (BT_OGF(opcode)) {
   1ddf0:	2001      	movs	r0, #1
   1ddf2:	e001      	b.n	1ddf8 <hci_internal_cmd_put+0x94>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1ddf4:	f7ef f86d 	bl	ced2 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1ddf8:	f240 4306 	movw	r3, #1030	; 0x406
   1ddfc:	429c      	cmp	r4, r3
   1ddfe:	f040 832b 	bne.w	1e458 <hci_internal_cmd_put+0x6f4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1de02:	230f      	movs	r3, #15
   1de04:	706b      	strb	r3, [r5, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1de06:	2304      	movs	r3, #4
   1de08:	70ab      	strb	r3, [r5, #2]
	evt_data->ncmd = 1;
   1de0a:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1de0c:	70e8      	strb	r0, [r5, #3]
	evt_data->ncmd = 1;
   1de0e:	712b      	strb	r3, [r5, #4]
	evt_data->opcode = hci_opcode;
   1de10:	f8a5 4005 	strh.w	r4, [r5, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1de14:	2301      	movs	r3, #1
   1de16:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   1de18:	2000      	movs	r0, #0
}
   1de1a:	b003      	add	sp, #12
   1de1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1de1e:	f7ef f85a 	bl	ced6 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1de22:	f242 030c 	movw	r3, #8204	; 0x200c
   1de26:	429c      	cmp	r4, r3
   1de28:	d9e6      	bls.n	1ddf8 <hci_internal_cmd_put+0x94>
   1de2a:	f5a4 5300 	sub.w	r3, r4, #8192	; 0x2000
   1de2e:	4a82      	ldr	r2, [pc, #520]	; (1e038 <hci_internal_cmd_put+0x2d4>)
   1de30:	3b0d      	subs	r3, #13
   1de32:	b29b      	uxth	r3, r3
   1de34:	fa22 f303 	lsr.w	r3, r2, r3
   1de38:	07db      	lsls	r3, r3, #31
   1de3a:	d516      	bpl.n	1de6a <hci_internal_cmd_put+0x106>
   1de3c:	e7e1      	b.n	1de02 <hci_internal_cmd_put+0x9e>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1de3e:	4630      	mov	r0, r6
	switch (opcode)	{
   1de40:	f640 4263 	movw	r2, #3171	; 0xc63
   1de44:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1de48:	4293      	cmp	r3, r2
   1de4a:	d02e      	beq.n	1deaa <hci_internal_cmd_put+0x146>
   1de4c:	dc10      	bgt.n	1de70 <hci_internal_cmd_put+0x10c>
   1de4e:	f640 4203 	movw	r2, #3075	; 0xc03
   1de52:	4293      	cmp	r3, r2
   1de54:	d01d      	beq.n	1de92 <hci_internal_cmd_put+0x12e>
   1de56:	f640 422d 	movw	r2, #3117	; 0xc2d
   1de5a:	4293      	cmp	r3, r2
   1de5c:	d01c      	beq.n	1de98 <hci_internal_cmd_put+0x134>
   1de5e:	f640 4201 	movw	r2, #3073	; 0xc01
   1de62:	4293      	cmp	r3, r2
   1de64:	d1b7      	bne.n	1ddd6 <hci_internal_cmd_put+0x72>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1de66:	f7ee ff1c 	bl	cca2 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1de6a:	2801      	cmp	r0, #1
   1de6c:	d0b3      	beq.n	1ddd6 <hci_internal_cmd_put+0x72>
   1de6e:	e792      	b.n	1dd96 <hci_internal_cmd_put+0x32>
	switch (opcode)	{
   1de70:	f640 427b 	movw	r2, #3195	; 0xc7b
   1de74:	4293      	cmp	r3, r2
   1de76:	d01b      	beq.n	1deb0 <hci_internal_cmd_put+0x14c>
   1de78:	f640 427c 	movw	r2, #3196	; 0xc7c
   1de7c:	4293      	cmp	r3, r2
   1de7e:	d1aa      	bne.n	1ddd6 <hci_internal_cmd_put+0x72>
		*param_length_out +=
   1de80:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1de84:	496d      	ldr	r1, [pc, #436]	; (1e03c <hci_internal_cmd_put+0x2d8>)
		*param_length_out +=
   1de86:	3302      	adds	r3, #2
   1de88:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1de8c:	f7ee ff13 	bl	ccb6 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1de90:	e7eb      	b.n	1de6a <hci_internal_cmd_put+0x106>
		return sdc_hci_cmd_cb_reset();
   1de92:	f7e6 fd37 	bl	4904 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1de96:	e7e8      	b.n	1de6a <hci_internal_cmd_put+0x106>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1de98:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1de9c:	4967      	ldr	r1, [pc, #412]	; (1e03c <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1de9e:	3303      	adds	r3, #3
   1dea0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1dea4:	f7ee fefb 	bl	cc9e <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1dea8:	e7df      	b.n	1de6a <hci_internal_cmd_put+0x106>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1deaa:	f7ee feff 	bl	ccac <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1deae:	e7dc      	b.n	1de6a <hci_internal_cmd_put+0x106>
		*param_length_out +=
   1deb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1deb4:	4961      	ldr	r1, [pc, #388]	; (1e03c <hci_internal_cmd_put+0x2d8>)
		*param_length_out +=
   1deb6:	3304      	adds	r3, #4
   1deb8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1debc:	f7ee feed 	bl	cc9a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1dec0:	e7d3      	b.n	1de6a <hci_internal_cmd_put+0x106>
	switch (opcode)	{
   1dec2:	8833      	ldrh	r3, [r6, #0]
   1dec4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1dec8:	3b01      	subs	r3, #1
   1deca:	2b08      	cmp	r3, #8
   1decc:	d883      	bhi.n	1ddd6 <hci_internal_cmd_put+0x72>
   1dece:	a201      	add	r2, pc, #4	; (adr r2, 1ded4 <hci_internal_cmd_put+0x170>)
   1ded0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ded4:	0001def9 	.word	0x0001def9
   1ded8:	0001df0b 	.word	0x0001df0b
   1dedc:	0001dffb 	.word	0x0001dffb
   1dee0:	0001ddd7 	.word	0x0001ddd7
   1dee4:	0001ddd7 	.word	0x0001ddd7
   1dee8:	0001ddd7 	.word	0x0001ddd7
   1deec:	0001ddd7 	.word	0x0001ddd7
   1def0:	0001ddd7 	.word	0x0001ddd7
   1def4:	0001e01d 	.word	0x0001e01d
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1def8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1defc:	484f      	ldr	r0, [pc, #316]	; (1e03c <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1defe:	3308      	adds	r3, #8
   1df00:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1df04:	f7ee ffa6 	bl	ce54 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1df08:	e7af      	b.n	1de6a <hci_internal_cmd_put+0x106>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1df0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1df0e:	484b      	ldr	r0, [pc, #300]	; (1e03c <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1df10:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1df12:	222f      	movs	r2, #47	; 0x2f
   1df14:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1df16:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1df1a:	f008 feba 	bl	26c92 <memset>
	cmds->hci_disconnect = 1;
   1df1e:	79eb      	ldrb	r3, [r5, #7]
   1df20:	f043 0320 	orr.w	r3, r3, #32
   1df24:	71eb      	strb	r3, [r5, #7]
	cmds->hci_read_remote_version_information = 1;
   1df26:	7a6b      	ldrb	r3, [r5, #9]
   1df28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1df2c:	726b      	strb	r3, [r5, #9]
	cmds->hci_set_event_mask = 1;
   1df2e:	7b2b      	ldrb	r3, [r5, #12]
   1df30:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1df34:	732b      	strb	r3, [r5, #12]
	cmds->hci_read_transmit_power_level = 1;
   1df36:	7c6b      	ldrb	r3, [r5, #17]
   1df38:	f043 0304 	orr.w	r3, r3, #4
   1df3c:	746b      	strb	r3, [r5, #17]
	cmds->hci_read_local_version_information = 1;
   1df3e:	7d6b      	ldrb	r3, [r5, #21]
   1df40:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1df44:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1df48:	756b      	strb	r3, [r5, #21]
	cmds->hci_read_bd_addr = 1;
   1df4a:	7dab      	ldrb	r3, [r5, #22]
   1df4c:	f043 0302 	orr.w	r3, r3, #2
   1df50:	75ab      	strb	r3, [r5, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1df52:	7f6b      	ldrb	r3, [r5, #29]
   1df54:	f043 0304 	orr.w	r3, r3, #4
   1df58:	776b      	strb	r3, [r5, #29]
	cmds->hci_le_set_event_mask = 1;
   1df5a:	f895 3020 	ldrb.w	r3, [r5, #32]
   1df5e:	f063 0308 	orn	r3, r3, #8
   1df62:	f885 3020 	strb.w	r3, [r5, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1df66:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1df6a:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1df6e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1df72:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1df76:	f063 030c 	orn	r3, r3, #12
   1df7a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1df7e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1df82:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1df86:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1df8a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1df8e:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   1df92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1df96:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1df9a:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1df9e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1dfa2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1dfa6:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1dfaa:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1dfae:	f023 0307 	bic.w	r3, r3, #7
   1dfb2:	f043 0307 	orr.w	r3, r3, #7
   1dfb6:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1dfba:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   1dfbe:	f063 0307 	orn	r3, r3, #7
   1dfc2:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1dfc6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1dfca:	f043 0301 	orr.w	r3, r3, #1
   1dfce:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1dfd2:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1dfd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1dfda:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1dfde:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1dfe2:	f043 0304 	orr.w	r3, r3, #4
   1dfe6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   1dfea:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   1dfee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1dff2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		return 0;
   1dff6:	2000      	movs	r0, #0
   1dff8:	e6cd      	b.n	1dd96 <hci_internal_cmd_put+0x32>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1dffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1dffe:	480f      	ldr	r0, [pc, #60]	; (1e03c <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e000:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1e002:	2208      	movs	r2, #8
   1e004:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e006:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e00a:	f008 fe42 	bl	26c92 <memset>
	features->bdedr_not_supported = 1;
   1e00e:	7aeb      	ldrb	r3, [r5, #11]
   1e010:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1e014:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1e018:	72eb      	strb	r3, [r5, #11]
	if (generate_command_status_event ||
   1e01a:	e7ec      	b.n	1dff6 <hci_internal_cmd_put+0x292>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e01c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e020:	4806      	ldr	r0, [pc, #24]	; (1e03c <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e022:	3306      	adds	r3, #6
   1e024:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e028:	f7ee ff12 	bl	ce50 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1e02c:	e71d      	b.n	1de6a <hci_internal_cmd_put+0x106>
   1e02e:	bf00      	nop
   1e030:	20003e21 	.word	0x20003e21
   1e034:	2000291c 	.word	0x2000291c
   1e038:	03001241 	.word	0x03001241
   1e03c:	20003e28 	.word	0x20003e28
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e040:	4630      	mov	r0, r6
	switch (opcode)	{
   1e042:	f242 014b 	movw	r1, #8267	; 0x204b
   1e046:	f830 3b03 	ldrh.w	r3, [r0], #3
   1e04a:	b21a      	sxth	r2, r3
   1e04c:	428a      	cmp	r2, r1
   1e04e:	dc56      	bgt.n	1e0fe <hci_internal_cmd_put+0x39a>
   1e050:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1e054:	f242 0626 	movw	r6, #8230	; 0x2026
   1e058:	dd5c      	ble.n	1e114 <hci_internal_cmd_put+0x3b0>
   1e05a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1e05e:	3b01      	subs	r3, #1
   1e060:	2b4a      	cmp	r3, #74	; 0x4a
   1e062:	d857      	bhi.n	1e114 <hci_internal_cmd_put+0x3b0>
   1e064:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e068:	0061005d 	.word	0x0061005d
   1e06c:	00560084 	.word	0x00560084
   1e070:	00a400a1 	.word	0x00a400a1
   1e074:	00b000a7 	.word	0x00b000a7
   1e078:	00b600b3 	.word	0x00b600b3
   1e07c:	00560056 	.word	0x00560056
   1e080:	00560056 	.word	0x00560056
   1e084:	00c500bc 	.word	0x00c500bc
   1e088:	00cb00c8 	.word	0x00cb00c8
   1e08c:	00560056 	.word	0x00560056
   1e090:	00d700ce 	.word	0x00d700ce
   1e094:	00e300da 	.word	0x00e300da
   1e098:	00ec0056 	.word	0x00ec0056
   1e09c:	00fe00f5 	.word	0x00fe00f5
   1e0a0:	00560056 	.word	0x00560056
   1e0a4:	00560056 	.word	0x00560056
   1e0a8:	01080056 	.word	0x01080056
   1e0ac:	011a0111 	.word	0x011a0111
   1e0b0:	0120011d 	.word	0x0120011d
   1e0b4:	00560056 	.word	0x00560056
   1e0b8:	00560056 	.word	0x00560056
   1e0bc:	00560056 	.word	0x00560056
   1e0c0:	00560056 	.word	0x00560056
   1e0c4:	012f0126 	.word	0x012f0126
   1e0c8:	013b0138 	.word	0x013b0138
   1e0cc:	00560056 	.word	0x00560056
   1e0d0:	00560056 	.word	0x00560056
   1e0d4:	00560056 	.word	0x00560056
   1e0d8:	00560056 	.word	0x00560056
   1e0dc:	00560056 	.word	0x00560056
   1e0e0:	00560056 	.word	0x00560056
   1e0e4:	00560056 	.word	0x00560056
   1e0e8:	00560056 	.word	0x00560056
   1e0ec:	00560056 	.word	0x00560056
   1e0f0:	00560056 	.word	0x00560056
   1e0f4:	00560056 	.word	0x00560056
   1e0f8:	00560056 	.word	0x00560056
   1e0fc:	013e      	.short	0x013e
   1e0fe:	f242 035e 	movw	r3, #8286	; 0x205e
   1e102:	429a      	cmp	r2, r3
   1e104:	f242 0626 	movw	r6, #8230	; 0x2026
   1e108:	f000 80d1 	beq.w	1e2ae <hci_internal_cmd_put+0x54a>
   1e10c:	f242 037c 	movw	r3, #8316	; 0x207c
   1e110:	429a      	cmp	r2, r3
   1e112:	d062      	beq.n	1e1da <hci_internal_cmd_put+0x476>
	switch (hci_opcode) {
   1e114:	42b4      	cmp	r4, r6
   1e116:	f200 81a8 	bhi.w	1e46a <hci_internal_cmd_put+0x706>
   1e11a:	f242 030c 	movw	r3, #8204	; 0x200c
   1e11e:	2001      	movs	r0, #1
   1e120:	e197      	b.n	1e452 <hci_internal_cmd_put+0x6ee>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1e122:	f7ee fec9 	bl	ceb8 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1e126:	42b4      	cmp	r4, r6
   1e128:	e00a      	b.n	1e140 <hci_internal_cmd_put+0x3dc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1e12a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e12e:	48c6      	ldr	r0, [pc, #792]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1e130:	3303      	adds	r3, #3
   1e132:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e136:	f7ee fea1 	bl	ce7c <sdc_hci_cmd_le_read_buffer_size>
	switch (hci_opcode) {
   1e13a:	f242 0326 	movw	r3, #8230	; 0x2026
   1e13e:	429c      	cmp	r4, r3
   1e140:	f240 8190 	bls.w	1e464 <hci_internal_cmd_put+0x700>
   1e144:	f242 0377 	movw	r3, #8311	; 0x2077
   1e148:	429c      	cmp	r4, r3
   1e14a:	f43f ae5a 	beq.w	1de02 <hci_internal_cmd_put+0x9e>
   1e14e:	f242 0377 	movw	r3, #8311	; 0x2077
   1e152:	429c      	cmp	r4, r3
   1e154:	f200 8115 	bhi.w	1e382 <hci_internal_cmd_put+0x61e>
   1e158:	f242 0332 	movw	r3, #8242	; 0x2032
   1e15c:	429c      	cmp	r4, r3
   1e15e:	f43f ae50 	beq.w	1de02 <hci_internal_cmd_put+0x9e>
   1e162:	f5a4 5301 	sub.w	r3, r4, #8256	; 0x2040
   1e166:	3b03      	subs	r3, #3
   1e168:	2b01      	cmp	r3, #1
   1e16a:	f63f ae7e 	bhi.w	1de6a <hci_internal_cmd_put+0x106>
   1e16e:	e648      	b.n	1de02 <hci_internal_cmd_put+0x9e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e170:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e174:	48b4      	ldr	r0, [pc, #720]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e176:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1e178:	2205      	movs	r2, #5
   1e17a:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e17c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e180:	f008 fd87 	bl	26c92 <memset>
	features->le_encryption = 1;
   1e184:	79eb      	ldrb	r3, [r5, #7]
   1e186:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1e18a:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1e18e:	71eb      	strb	r3, [r5, #7]
	features->le_2m_phy = 1;
   1e190:	7a2b      	ldrb	r3, [r5, #8]
   1e192:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1e196:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1e19a:	722b      	strb	r3, [r5, #8]
	switch (hci_opcode) {
   1e19c:	f242 0326 	movw	r3, #8230	; 0x2026
   1e1a0:	429c      	cmp	r4, r3
   1e1a2:	f240 8153 	bls.w	1e44c <hci_internal_cmd_put+0x6e8>
		return 0;
   1e1a6:	2000      	movs	r0, #0
   1e1a8:	e7cc      	b.n	1e144 <hci_internal_cmd_put+0x3e0>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1e1aa:	f7ee fe8c 	bl	cec6 <sdc_hci_cmd_le_set_random_address>
	switch (hci_opcode) {
   1e1ae:	e7ba      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1e1b0:	f7ee fe7a 	bl	cea8 <sdc_hci_cmd_le_set_adv_params>
	switch (hci_opcode) {
   1e1b4:	e7b7      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		*param_length_out +=
   1e1b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1e1ba:	48a3      	ldr	r0, [pc, #652]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1e1bc:	3301      	adds	r3, #1
   1e1be:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1e1c2:	f7ee fe59 	bl	ce78 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
	switch (hci_opcode) {
   1e1c6:	e7b8      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1e1c8:	f7ee fe6a 	bl	cea0 <sdc_hci_cmd_le_set_adv_data>
	switch (hci_opcode) {
   1e1cc:	e7ab      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1e1ce:	f7ee fe7c 	bl	ceca <sdc_hci_cmd_le_set_scan_response_data>
	switch (hci_opcode) {
   1e1d2:	e7a8      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1e1d4:	f7ee fe66 	bl	cea4 <sdc_hci_cmd_le_set_adv_enable>
	switch (hci_opcode) {
   1e1d8:	e7a5      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1e1da:	f7ee fe69 	bl	ceb0 <sdc_hci_cmd_le_set_data_related_address_changes>
	switch (hci_opcode) {
   1e1de:	e7a2      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1e1e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1e1e4:	4898      	ldr	r0, [pc, #608]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1e1e6:	3301      	adds	r3, #1
   1e1e8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1e1ec:	f7ee fe4a 	bl	ce84 <sdc_hci_cmd_le_read_filter_accept_list_size>
	switch (hci_opcode) {
   1e1f0:	e7a3      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1e1f2:	f7ee fe33 	bl	ce5c <sdc_hci_cmd_le_clear_filter_accept_list>
	switch (hci_opcode) {
   1e1f6:	e796      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1e1f8:	f7ee fe2e 	bl	ce58 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
	switch (hci_opcode) {
   1e1fc:	e793      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1e1fe:	f7ee fe4d 	bl	ce9c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1e202:	e790      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1e204:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e208:	498f      	ldr	r1, [pc, #572]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1e20a:	3307      	adds	r3, #7
   1e20c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e210:	f7ee fe36 	bl	ce80 <sdc_hci_cmd_le_read_channel_map>
	switch (hci_opcode) {
   1e214:	e791      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1e216:	f7ee fe3b 	bl	ce90 <sdc_hci_cmd_le_read_remote_features>
	switch (hci_opcode) {
   1e21a:	e784      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1e21c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e220:	4989      	ldr	r1, [pc, #548]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1e222:	3310      	adds	r3, #16
   1e224:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e228:	f7ee fe1a 	bl	ce60 <sdc_hci_cmd_le_encrypt>
	switch (hci_opcode) {
   1e22c:	e785      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1e22e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1e232:	4885      	ldr	r0, [pc, #532]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1e234:	3308      	adds	r3, #8
   1e236:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1e23a:	f7ee fe1b 	bl	ce74 <sdc_hci_cmd_le_rand>
	switch (hci_opcode) {
   1e23e:	e77c      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1e240:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1e244:	4980      	ldr	r1, [pc, #512]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1e246:	3302      	adds	r3, #2
   1e248:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1e24c:	f7ee fe0e 	bl	ce6c <sdc_hci_cmd_le_long_term_key_request_reply>
	switch (hci_opcode) {
   1e250:	e773      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
		*param_length_out +=
   1e252:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1e256:	497c      	ldr	r1, [pc, #496]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1e258:	3302      	adds	r3, #2
   1e25a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1e25e:	f7ee fe01 	bl	ce64 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
	switch (hci_opcode) {
   1e262:	e76a      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1e264:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e268:	3308      	adds	r3, #8
   1e26a:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1e26e:	238f      	movs	r3, #143	; 0x8f
   1e270:	71eb      	strb	r3, [r5, #7]
	*(buf + 4) = states2;
   1e272:	23c0      	movs	r3, #192	; 0xc0
   1e274:	72eb      	strb	r3, [r5, #11]
   1e276:	e791      	b.n	1e19c <hci_internal_cmd_put+0x438>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1e278:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1e27c:	4972      	ldr	r1, [pc, #456]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1e27e:	3302      	adds	r3, #2
   1e280:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1e284:	f7ee fe12 	bl	ceac <sdc_hci_cmd_le_set_data_length>
	switch (hci_opcode) {
   1e288:	e757      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
		*param_length_out +=
   1e28a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1e28e:	486e      	ldr	r0, [pc, #440]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1e290:	3304      	adds	r3, #4
   1e292:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1e296:	f7ee fdfd 	bl	ce94 <sdc_hci_cmd_le_read_suggested_default_data_length>
	switch (hci_opcode) {
   1e29a:	e74e      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1e29c:	f7ee fe17 	bl	cece <sdc_hci_cmd_le_write_suggested_default_data_length>
	switch (hci_opcode) {
   1e2a0:	e741      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		return hci_cmd_le_read_local_p256_public_key();
   1e2a2:	f000 fa89 	bl	1e7b8 <hci_cmd_le_read_local_p256_public_key>
	switch (hci_opcode) {
   1e2a6:	e73e      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1e2a8:	f00a fed7 	bl	2905a <hci_cmd_le_generate_dhkey>
	switch (hci_opcode) {
   1e2ac:	e73b      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1e2ae:	f00a fed7 	bl	29060 <hci_cmd_le_generate_dhkey_v2>
	switch (hci_opcode) {
   1e2b2:	e738      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1e2b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e2b8:	4863      	ldr	r0, [pc, #396]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1e2ba:	3308      	adds	r3, #8
   1e2bc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e2c0:	f7ee fde2 	bl	ce88 <sdc_hci_cmd_le_read_max_data_length>
	switch (hci_opcode) {
   1e2c4:	e739      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1e2c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e2ca:	495f      	ldr	r1, [pc, #380]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1e2cc:	3304      	adds	r3, #4
   1e2ce:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e2d2:	f7ee fddb 	bl	ce8c <sdc_hci_cmd_le_read_phy>
	switch (hci_opcode) {
   1e2d6:	e730      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1e2d8:	f7ee fdec 	bl	ceb4 <sdc_hci_cmd_le_set_default_phy>
	switch (hci_opcode) {
   1e2dc:	e723      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1e2de:	f7ee fdf0 	bl	cec2 <sdc_hci_cmd_le_set_phy>
	switch (hci_opcode) {
   1e2e2:	e720      	b.n	1e126 <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1e2e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e2e8:	4857      	ldr	r0, [pc, #348]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1e2ea:	3302      	adds	r3, #2
   1e2ec:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e2f0:	f7ee fdd2 	bl	ce98 <sdc_hci_cmd_le_read_transmit_power>
	switch (hci_opcode) {
   1e2f4:	e721      	b.n	1e13a <hci_internal_cmd_put+0x3d6>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e2f6:	4630      	mov	r0, r6
	switch (opcode)	{
   1e2f8:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1e2fc:	f830 3b03 	ldrh.w	r3, [r0], #3
   1e300:	4293      	cmp	r3, r2
   1e302:	d823      	bhi.n	1e34c <hci_internal_cmd_put+0x5e8>
   1e304:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1e308:	d801      	bhi.n	1e30e <hci_internal_cmd_put+0x5aa>
   1e30a:	2001      	movs	r0, #1
   1e30c:	e039      	b.n	1e382 <hci_internal_cmd_put+0x61e>
   1e30e:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1e312:	3b01      	subs	r3, #1
   1e314:	2b0a      	cmp	r3, #10
   1e316:	d8f8      	bhi.n	1e30a <hci_internal_cmd_put+0x5a6>
   1e318:	a201      	add	r2, pc, #4	; (adr r2, 1e320 <hci_internal_cmd_put+0x5bc>)
   1e31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e31e:	bf00      	nop
   1e320:	0001e373 	.word	0x0001e373
   1e324:	0001e38f 	.word	0x0001e38f
   1e328:	0001e30b 	.word	0x0001e30b
   1e32c:	0001e30b 	.word	0x0001e30b
   1e330:	0001e30b 	.word	0x0001e30b
   1e334:	0001e3e3 	.word	0x0001e3e3
   1e338:	0001e30b 	.word	0x0001e30b
   1e33c:	0001e30b 	.word	0x0001e30b
   1e340:	0001e3bf 	.word	0x0001e3bf
   1e344:	0001e3d1 	.word	0x0001e3d1
   1e348:	0001e3e9 	.word	0x0001e3e9
   1e34c:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1e350:	b292      	uxth	r2, r2
   1e352:	2a0c      	cmp	r2, #12
   1e354:	d8d9      	bhi.n	1e30a <hci_internal_cmd_put+0x5a6>
   1e356:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1e35a:	2b0c      	cmp	r3, #12
   1e35c:	f200 8087 	bhi.w	1e46e <hci_internal_cmd_put+0x70a>
   1e360:	e8df f003 	tbb	[pc, r3]
   1e364:	625f5c4b 	.word	0x625f5c4b
   1e368:	85856865 	.word	0x85856865
   1e36c:	85856b85 	.word	0x85856b85
   1e370:	6e          	.byte	0x6e
   1e371:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1e372:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1e376:	4834      	ldr	r0, [pc, #208]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1e378:	330c      	adds	r3, #12
   1e37a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1e37e:	f7e6 fad5 	bl	492c <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1e382:	f024 0308 	bic.w	r3, r4, #8
   1e386:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1e38a:	4293      	cmp	r3, r2
   1e38c:	e067      	b.n	1e45e <hci_internal_cmd_put+0x6fa>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e38e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e392:	482d      	ldr	r0, [pc, #180]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e394:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1e396:	2202      	movs	r2, #2
   1e398:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e39a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e39e:	f008 fc78 	bl	26c92 <memset>
	cmds->read_version_info = 1;
   1e3a2:	79eb      	ldrb	r3, [r5, #7]
   1e3a4:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1e3a8:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1e3ac:	71eb      	strb	r3, [r5, #7]
	cmds->read_static_addresses = 1;
   1e3ae:	7a2b      	ldrb	r3, [r5, #8]
   1e3b0:	f023 0307 	bic.w	r3, r3, #7
   1e3b4:	f043 0307 	orr.w	r3, r3, #7
   1e3b8:	722b      	strb	r3, [r5, #8]
		return 0;
   1e3ba:	2000      	movs	r0, #0
   1e3bc:	e7e1      	b.n	1e382 <hci_internal_cmd_put+0x61e>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1e3be:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e3c2:	4821      	ldr	r0, [pc, #132]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1e3c4:	3317      	adds	r3, #23
   1e3c6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e3ca:	f7ee fcf0 	bl	cdae <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1e3ce:	e7d8      	b.n	1e382 <hci_internal_cmd_put+0x61e>
		*param_length_out +=
   1e3d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e3d4:	481c      	ldr	r0, [pc, #112]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1e3d6:	3320      	adds	r3, #32
   1e3d8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e3dc:	f7ee fc9a 	bl	cd14 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1e3e0:	e7cf      	b.n	1e382 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1e3e2:	f7ee fd33 	bl	ce4c <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1e3e6:	e7cc      	b.n	1e382 <hci_internal_cmd_put+0x61e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1e3e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1e3ec:	4816      	ldr	r0, [pc, #88]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1e3ee:	3301      	adds	r3, #1
   1e3f0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1e3f4:	f7ee fc7a 	bl	ccec <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1e3f8:	e7c3      	b.n	1e382 <hci_internal_cmd_put+0x61e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e3fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e3fe:	4812      	ldr	r0, [pc, #72]	; (1e448 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e400:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1e402:	2202      	movs	r2, #2
   1e404:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e406:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e40a:	f008 fc42 	bl	26c92 <memset>
	cmds->read_supported_vs_commands = 1;
   1e40e:	79eb      	ldrb	r3, [r5, #7]
   1e410:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1e414:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1e418:	71eb      	strb	r3, [r5, #7]
}
   1e41a:	e7ce      	b.n	1e3ba <hci_internal_cmd_put+0x656>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1e41c:	f7ee fc59 	bl	ccd2 <sdc_hci_cmd_vs_llpm_mode_set>
   1e420:	e7af      	b.n	1e382 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1e422:	f7ee fc52 	bl	ccca <sdc_hci_cmd_vs_conn_update>
   1e426:	e7ac      	b.n	1e382 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1e428:	f7ee fc47 	bl	ccba <sdc_hci_cmd_vs_conn_event_extend>
   1e42c:	e7a9      	b.n	1e382 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1e42e:	f7ee fc56 	bl	ccde <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1e432:	e7a6      	b.n	1e382 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1e434:	f7ee fc4b 	bl	ccce <sdc_hci_cmd_vs_event_length_set>
   1e438:	e7a3      	b.n	1e382 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1e43a:	f7ee fc4c 	bl	ccd6 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1e43e:	e7a0      	b.n	1e382 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1e440:	f7ee fc52 	bl	cce8 <sdc_hci_cmd_vs_set_adv_randomness>
   1e444:	e79d      	b.n	1e382 <hci_internal_cmd_put+0x61e>
   1e446:	bf00      	nop
   1e448:	20003e28 	.word	0x20003e28
	switch (hci_opcode) {
   1e44c:	f242 030c 	movw	r3, #8204	; 0x200c
		return 0;
   1e450:	2000      	movs	r0, #0
	switch (hci_opcode) {
   1e452:	429c      	cmp	r4, r3
   1e454:	f63f ace9 	bhi.w	1de2a <hci_internal_cmd_put+0xc6>
   1e458:	f240 431d 	movw	r3, #1053	; 0x41d
   1e45c:	429c      	cmp	r4, r3
   1e45e:	f47f ad04 	bne.w	1de6a <hci_internal_cmd_put+0x106>
   1e462:	e4ce      	b.n	1de02 <hci_internal_cmd_put+0x9e>
   1e464:	f242 030c 	movw	r3, #8204	; 0x200c
   1e468:	e7f3      	b.n	1e452 <hci_internal_cmd_put+0x6ee>
   1e46a:	2001      	movs	r0, #1
   1e46c:	e66a      	b.n	1e144 <hci_internal_cmd_put+0x3e0>
	switch (opcode)	{
   1e46e:	2001      	movs	r0, #1
   1e470:	e66d      	b.n	1e14e <hci_internal_cmd_put+0x3ea>
		return -NRF_EPERM;
   1e472:	f04f 30ff 	mov.w	r0, #4294967295
   1e476:	e4d0      	b.n	1de1a <hci_internal_cmd_put+0xb6>

0001e478 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1e478:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1e47a:	4c09      	ldr	r4, [pc, #36]	; (1e4a0 <hci_internal_msg_get+0x28>)
   1e47c:	7823      	ldrb	r3, [r4, #0]
{
   1e47e:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1e480:	b91b      	cbnz	r3, 1e48a <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1e482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1e486:	f7ee bbf8 	b.w	cc7a <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1e48a:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1e48c:	1c61      	adds	r1, r4, #1
   1e48e:	3202      	adds	r2, #2
   1e490:	f008 fbf4 	bl	26c7c <memcpy>
		cmd_complete_or_status.occurred = false;
   1e494:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1e496:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1e498:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1e49a:	702b      	strb	r3, [r5, #0]
}
   1e49c:	bd38      	pop	{r3, r4, r5, pc}
   1e49e:	bf00      	nop
   1e4a0:	20003e21 	.word	0x20003e21

0001e4a4 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e4a4:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1e4a6:	b508      	push	{r3, lr}
   1e4a8:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e4ac:	d90c      	bls.n	1e4c8 <sys_memcpy_swap.constprop.0+0x24>
   1e4ae:	4298      	cmp	r0, r3
   1e4b0:	d20f      	bcs.n	1e4d2 <sys_memcpy_swap.constprop.0+0x2e>
   1e4b2:	490c      	ldr	r1, [pc, #48]	; (1e4e4 <sys_memcpy_swap.constprop.0+0x40>)
   1e4b4:	480c      	ldr	r0, [pc, #48]	; (1e4e8 <sys_memcpy_swap.constprop.0+0x44>)
   1e4b6:	f240 2215 	movw	r2, #533	; 0x215
   1e4ba:	f007 fd41 	bl	25f40 <assert_print>
   1e4be:	4809      	ldr	r0, [pc, #36]	; (1e4e4 <sys_memcpy_swap.constprop.0+0x40>)
   1e4c0:	f240 2115 	movw	r1, #533	; 0x215
   1e4c4:	f007 fd35 	bl	25f32 <assert_post_action>
   1e4c8:	d0f3      	beq.n	1e4b2 <sys_memcpy_swap.constprop.0+0xe>
   1e4ca:	f100 0210 	add.w	r2, r0, #16
   1e4ce:	4291      	cmp	r1, r2
   1e4d0:	e7ee      	b.n	1e4b0 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   1e4d2:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1e4d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1e4d8:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1e4dc:	428b      	cmp	r3, r1
   1e4de:	d1f9      	bne.n	1e4d4 <sys_memcpy_swap.constprop.0+0x30>
}
   1e4e0:	bd08      	pop	{r3, pc}
   1e4e2:	bf00      	nop
   1e4e4:	0002c786 	.word	0x0002c786
   1e4e8:	0002a7df 	.word	0x0002a7df

0001e4ec <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1e4ec:	b570      	push	{r4, r5, r6, lr}
   1e4ee:	4606      	mov	r6, r0
   1e4f0:	460c      	mov	r4, r1
   1e4f2:	4d0d      	ldr	r5, [pc, #52]	; (1e528 <bt_rand+0x3c>)
   1e4f4:	4628      	mov	r0, r5
   1e4f6:	f00a fea1 	bl	2923c <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1e4fa:	b188      	cbz	r0, 1e520 <bt_rand+0x34>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1e4fc:	b2a2      	uxth	r2, r4
	__ASSERT(api->get_entropy != NULL,
   1e4fe:	68ab      	ldr	r3, [r5, #8]
   1e500:	681b      	ldr	r3, [r3, #0]
   1e502:	b943      	cbnz	r3, 1e516 <bt_rand+0x2a>
   1e504:	4909      	ldr	r1, [pc, #36]	; (1e52c <bt_rand+0x40>)
   1e506:	480a      	ldr	r0, [pc, #40]	; (1e530 <bt_rand+0x44>)
   1e508:	224d      	movs	r2, #77	; 0x4d
   1e50a:	f007 fd19 	bl	25f40 <assert_print>
   1e50e:	4807      	ldr	r0, [pc, #28]	; (1e52c <bt_rand+0x40>)
   1e510:	214d      	movs	r1, #77	; 0x4d
   1e512:	f007 fd0e 	bl	25f32 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1e516:	4631      	mov	r1, r6
   1e518:	4628      	mov	r0, r5
}
   1e51a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e51e:	4718      	bx	r3
   1e520:	f06f 0012 	mvn.w	r0, #18
   1e524:	bd70      	pop	{r4, r5, r6, pc}
   1e526:	bf00      	nop
   1e528:	00029750 	.word	0x00029750
   1e52c:	0002d24c 	.word	0x0002d24c
   1e530:	0002a7df 	.word	0x0002a7df

0001e534 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e534:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1e536:	b508      	push	{r3, lr}
   1e538:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e53c:	d90c      	bls.n	1e558 <sys_memcpy_swap.constprop.0+0x24>
   1e53e:	4298      	cmp	r0, r3
   1e540:	d20f      	bcs.n	1e562 <sys_memcpy_swap.constprop.0+0x2e>
   1e542:	490c      	ldr	r1, [pc, #48]	; (1e574 <sys_memcpy_swap.constprop.0+0x40>)
   1e544:	480c      	ldr	r0, [pc, #48]	; (1e578 <sys_memcpy_swap.constprop.0+0x44>)
   1e546:	f240 2215 	movw	r2, #533	; 0x215
   1e54a:	f007 fcf9 	bl	25f40 <assert_print>
   1e54e:	4809      	ldr	r0, [pc, #36]	; (1e574 <sys_memcpy_swap.constprop.0+0x40>)
   1e550:	f240 2115 	movw	r1, #533	; 0x215
   1e554:	f007 fced 	bl	25f32 <assert_post_action>
   1e558:	d0f3      	beq.n	1e542 <sys_memcpy_swap.constprop.0+0xe>
   1e55a:	f100 0220 	add.w	r2, r0, #32
   1e55e:	4291      	cmp	r1, r2
   1e560:	e7ee      	b.n	1e540 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   1e562:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1e564:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1e568:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1e56c:	428b      	cmp	r3, r1
   1e56e:	d1f9      	bne.n	1e564 <sys_memcpy_swap.constprop.0+0x30>
}
   1e570:	bd08      	pop	{r3, pc}
   1e572:	bf00      	nop
   1e574:	0002c786 	.word	0x0002c786
   1e578:	0002a7df 	.word	0x0002a7df

0001e57c <ecdh_p256_common_secret>:

static uint8_t common_secret(bool use_debug)
{
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1e57c:	4b1e      	ldr	r3, [pc, #120]	; (1e5f8 <ecdh_p256_common_secret+0x7c>)
   1e57e:	491f      	ldr	r1, [pc, #124]	; (1e5fc <ecdh_p256_common_secret+0x80>)
   1e580:	f103 0220 	add.w	r2, r3, #32
   1e584:	2800      	cmp	r0, #0
   1e586:	bf08      	it	eq
   1e588:	4619      	moveq	r1, r3

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1e58a:	b570      	push	{r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1e58c:	4610      	mov	r0, r2
   1e58e:	f004 fa17 	bl	229c0 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1e592:	4602      	mov	r2, r0
   1e594:	b348      	cbz	r0, 1e5ea <ecdh_p256_common_secret+0x6e>
		BT_ERR("public key is not valid (err %d)", err);
   1e596:	481a      	ldr	r0, [pc, #104]	; (1e600 <ecdh_p256_common_secret+0x84>)
   1e598:	2145      	movs	r1, #69	; 0x45
   1e59a:	f007 fcdf 	bl	25f5c <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   1e59e:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1e5a0:	f04f 32ff 	mov.w	r2, #4294967295
   1e5a4:	f04f 33ff 	mov.w	r3, #4294967295
   1e5a8:	2001      	movs	r0, #1
   1e5aa:	f7f5 fc9b 	bl	13ee4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1e5ae:	f100 0608 	add.w	r6, r0, #8
   1e5b2:	2102      	movs	r1, #2
   1e5b4:	4605      	mov	r5, r0
   1e5b6:	4630      	mov	r0, r6
   1e5b8:	f7fd fbac 	bl	1bd14 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1e5bc:	233e      	movs	r3, #62	; 0x3e
   1e5be:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1e5c0:	2322      	movs	r3, #34	; 0x22
   1e5c2:	7043      	strb	r3, [r0, #1]
   1e5c4:	2101      	movs	r1, #1
   1e5c6:	4630      	mov	r0, r6
   1e5c8:	f7fd fba4 	bl	1bd14 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1e5cc:	2309      	movs	r3, #9
   1e5ce:	7003      	strb	r3, [r0, #0]
   1e5d0:	2121      	movs	r1, #33	; 0x21
   1e5d2:	4630      	mov	r0, r6
   1e5d4:	f7fd fb9e 	bl	1bd14 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1e5d8:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1e5dc:	b13c      	cbz	r4, 1e5ee <ecdh_p256_common_secret+0x72>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1e5de:	2220      	movs	r2, #32
   1e5e0:	21ff      	movs	r1, #255	; 0xff
   1e5e2:	f008 fb56 	bl	26c92 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1e5e6:	4628      	mov	r0, r5
   1e5e8:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1e5ea:	4604      	mov	r4, r0
   1e5ec:	e7d8      	b.n	1e5a0 <ecdh_p256_common_secret+0x24>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1e5ee:	4905      	ldr	r1, [pc, #20]	; (1e604 <ecdh_p256_common_secret+0x88>)
   1e5f0:	f7ff ffa0 	bl	1e534 <sys_memcpy_swap.constprop.0>
   1e5f4:	e7f7      	b.n	1e5e6 <ecdh_p256_common_secret+0x6a>
   1e5f6:	bf00      	nop
   1e5f8:	20003e68 	.word	0x20003e68
   1e5fc:	0002d37f 	.word	0x0002d37f
   1e600:	0002d337 	.word	0x0002d337
   1e604:	20003e88 	.word	0x20003e88

0001e608 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1e608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e60a:	4c3d      	ldr	r4, [pc, #244]	; (1e700 <ecdh_cmd_process+0xf8>)
   1e60c:	f3bf 8f5b 	dmb	ish
   1e610:	6823      	ldr	r3, [r4, #0]
   1e612:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1e616:	2b02      	cmp	r3, #2
   1e618:	4627      	mov	r7, r4
   1e61a:	d059      	beq.n	1e6d0 <ecdh_cmd_process+0xc8>
   1e61c:	2b04      	cmp	r3, #4
   1e61e:	d05c      	beq.n	1e6da <ecdh_cmd_process+0xd2>
   1e620:	2b01      	cmp	r3, #1
   1e622:	d15c      	bne.n	1e6de <ecdh_cmd_process+0xd6>
		err = bt_rand(ecdh.private_key_be, 32);
   1e624:	4c37      	ldr	r4, [pc, #220]	; (1e704 <ecdh_cmd_process+0xfc>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1e626:	4e38      	ldr	r6, [pc, #224]	; (1e708 <ecdh_cmd_process+0x100>)
		err = bt_rand(ecdh.private_key_be, 32);
   1e628:	2120      	movs	r1, #32
   1e62a:	4620      	mov	r0, r4
   1e62c:	f7ff ff5e 	bl	1e4ec <bt_rand>
		if (err) {
   1e630:	2800      	cmp	r0, #0
   1e632:	d142      	bne.n	1e6ba <ecdh_cmd_process+0xb2>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1e634:	2220      	movs	r2, #32
   1e636:	4631      	mov	r1, r6
   1e638:	4620      	mov	r0, r4
   1e63a:	f008 faf8 	bl	26c2e <memcmp>
   1e63e:	2800      	cmp	r0, #0
   1e640:	d0f2      	beq.n	1e628 <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1e642:	4832      	ldr	r0, [pc, #200]	; (1e70c <ecdh_cmd_process+0x104>)
   1e644:	4621      	mov	r1, r4
   1e646:	f004 f9a7 	bl	22998 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1e64a:	4605      	mov	r5, r0
   1e64c:	2800      	cmp	r0, #0
   1e64e:	d1eb      	bne.n	1e628 <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1e650:	f04f 32ff 	mov.w	r2, #4294967295
   1e654:	f04f 33ff 	mov.w	r3, #4294967295
   1e658:	2001      	movs	r0, #1
   1e65a:	f7f5 fc43 	bl	13ee4 <bt_buf_get_rx>
   1e65e:	f100 0608 	add.w	r6, r0, #8
   1e662:	2102      	movs	r1, #2
   1e664:	4604      	mov	r4, r0
   1e666:	4630      	mov	r0, r6
   1e668:	f7fd fb54 	bl	1bd14 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1e66c:	233e      	movs	r3, #62	; 0x3e
   1e66e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1e670:	2342      	movs	r3, #66	; 0x42
   1e672:	7043      	strb	r3, [r0, #1]
   1e674:	2101      	movs	r1, #1
   1e676:	4630      	mov	r0, r6
   1e678:	f7fd fb4c 	bl	1bd14 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1e67c:	2308      	movs	r3, #8
   1e67e:	7003      	strb	r3, [r0, #0]
   1e680:	2141      	movs	r1, #65	; 0x41
   1e682:	4630      	mov	r0, r6
   1e684:	f7fd fb46 	bl	1bd14 <net_buf_simple_add>
   1e688:	4606      	mov	r6, r0
	evt->status = status;
   1e68a:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1e68e:	b1b5      	cbz	r5, 1e6be <ecdh_cmd_process+0xb6>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1e690:	2240      	movs	r2, #64	; 0x40
   1e692:	2100      	movs	r1, #0
   1e694:	f008 fafd 	bl	26c92 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e698:	f3bf 8f5b 	dmb	ish
   1e69c:	2300      	movs	r3, #0
   1e69e:	e857 2f00 	ldrex	r2, [r7]
   1e6a2:	e847 3100 	strex	r1, r3, [r7]
   1e6a6:	2900      	cmp	r1, #0
   1e6a8:	d1f9      	bne.n	1e69e <ecdh_cmd_process+0x96>
   1e6aa:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1e6ae:	b32c      	cbz	r4, 1e6fc <ecdh_cmd_process+0xf4>
		bt_recv(buf);
   1e6b0:	4620      	mov	r0, r4
	}
}
   1e6b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   1e6b6:	f7f6 bc8b 	b.w	14fd0 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1e6ba:	251f      	movs	r5, #31
   1e6bc:	e7c8      	b.n	1e650 <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1e6be:	4913      	ldr	r1, [pc, #76]	; (1e70c <ecdh_cmd_process+0x104>)
   1e6c0:	f7ff ff38 	bl	1e534 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1e6c4:	4912      	ldr	r1, [pc, #72]	; (1e710 <ecdh_cmd_process+0x108>)
   1e6c6:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1e6ca:	f7ff ff33 	bl	1e534 <sys_memcpy_swap.constprop.0>
		break;
   1e6ce:	e7e3      	b.n	1e698 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   1e6d0:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1e6d2:	f7ff ff53 	bl	1e57c <ecdh_p256_common_secret>
   1e6d6:	4604      	mov	r4, r0
		break;
   1e6d8:	e7de      	b.n	1e698 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   1e6da:	2001      	movs	r0, #1
   1e6dc:	e7f9      	b.n	1e6d2 <ecdh_cmd_process+0xca>
		BT_WARN("Unknown command");
   1e6de:	480d      	ldr	r0, [pc, #52]	; (1e714 <ecdh_cmd_process+0x10c>)
   1e6e0:	2157      	movs	r1, #87	; 0x57
   1e6e2:	f007 fc3b 	bl	25f5c <z_log_minimal_printk>
   1e6e6:	f3bf 8f5b 	dmb	ish
   1e6ea:	2300      	movs	r3, #0
   1e6ec:	e854 2f00 	ldrex	r2, [r4]
   1e6f0:	e844 3100 	strex	r1, r3, [r4]
   1e6f4:	2900      	cmp	r1, #0
   1e6f6:	d1f9      	bne.n	1e6ec <ecdh_cmd_process+0xe4>
   1e6f8:	f3bf 8f5b 	dmb	ish
}
   1e6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e6fe:	bf00      	nop
   1e700:	20002930 	.word	0x20002930
   1e704:	20003e68 	.word	0x20003e68
   1e708:	0002d37f 	.word	0x0002d37f
   1e70c:	20003e88 	.word	0x20003e88
   1e710:	20003ea8 	.word	0x20003ea8
   1e714:	0002d35d 	.word	0x0002d35d

0001e718 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1e718:	b510      	push	{r4, lr}
   1e71a:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1e71c:	2210      	movs	r2, #16
   1e71e:	2100      	movs	r1, #0
   1e720:	a801      	add	r0, sp, #4
   1e722:	f008 fab6 	bl	26c92 <memset>
   1e726:	4c0b      	ldr	r4, [pc, #44]	; (1e754 <ecdh_thread+0x3c>)
   1e728:	9405      	str	r4, [sp, #20]
   1e72a:	2301      	movs	r3, #1
   1e72c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1e730:	f04f 32ff 	mov.w	r2, #4294967295
   1e734:	f04f 33ff 	mov.w	r3, #4294967295
   1e738:	2101      	movs	r1, #1
   1e73a:	a801      	add	r0, sp, #4
   1e73c:	f003 fffc 	bl	22738 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1e740:	4620      	mov	r0, r4
   1e742:	f00a ff75 	bl	29630 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1e746:	9b04      	ldr	r3, [sp, #16]
   1e748:	f36f 3394 	bfc	r3, #14, #7
   1e74c:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1e74e:	f7ff ff5b 	bl	1e608 <ecdh_cmd_process>
	while (true) {
   1e752:	e7ed      	b.n	1e730 <ecdh_thread+0x18>
   1e754:	20002920 	.word	0x20002920

0001e758 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1e758:	b510      	push	{r4, lr}
   1e75a:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1e75c:	480e      	ldr	r0, [pc, #56]	; (1e798 <hci_ecdh_init+0x40>)
   1e75e:	f00a ff62 	bl	29626 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e762:	4c0e      	ldr	r4, [pc, #56]	; (1e79c <hci_ecdh_init+0x44>)
   1e764:	490e      	ldr	r1, [pc, #56]	; (1e7a0 <hci_ecdh_init+0x48>)
   1e766:	2200      	movs	r2, #0
   1e768:	2300      	movs	r3, #0
   1e76a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e76e:	2300      	movs	r3, #0
   1e770:	220a      	movs	r2, #10
   1e772:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1e776:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1e77a:	9300      	str	r3, [sp, #0]
   1e77c:	f44f 7262 	mov.w	r2, #904	; 0x388
   1e780:	4b08      	ldr	r3, [pc, #32]	; (1e7a4 <hci_ecdh_init+0x4c>)
   1e782:	4620      	mov	r0, r4
   1e784:	f001 fb6e 	bl	1fe64 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1e788:	4907      	ldr	r1, [pc, #28]	; (1e7a8 <hci_ecdh_init+0x50>)
   1e78a:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1e78c:	b008      	add	sp, #32
   1e78e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e792:	f00a bd95 	b.w	292c0 <z_impl_k_thread_name_set>
   1e796:	bf00      	nop
   1e798:	20002920 	.word	0x20002920
   1e79c:	20001d48 	.word	0x20001d48
   1e7a0:	200057c0 	.word	0x200057c0
   1e7a4:	0001e719 	.word	0x0001e719
   1e7a8:	0002d372 	.word	0x0002d372

0001e7ac <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1e7ac:	4801      	ldr	r0, [pc, #4]	; (1e7b4 <hci_ecdh_uninit+0x8>)
   1e7ae:	f7f5 b883 	b.w	138b8 <z_impl_k_thread_abort>
   1e7b2:	bf00      	nop
   1e7b4:	20001d48 	.word	0x20001d48

0001e7b8 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1e7b8:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e7ba:	4b0b      	ldr	r3, [pc, #44]	; (1e7e8 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1e7bc:	f3bf 8f5b 	dmb	ish
   1e7c0:	2201      	movs	r2, #1
   1e7c2:	e853 1f00 	ldrex	r1, [r3]
   1e7c6:	2900      	cmp	r1, #0
   1e7c8:	d103      	bne.n	1e7d2 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1e7ca:	e843 2000 	strex	r0, r2, [r3]
   1e7ce:	2800      	cmp	r0, #0
   1e7d0:	d1f7      	bne.n	1e7c2 <hci_cmd_le_read_local_p256_public_key+0xa>
   1e7d2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1e7d6:	d105      	bne.n	1e7e4 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1e7d8:	4804      	ldr	r0, [pc, #16]	; (1e7ec <hci_cmd_le_read_local_p256_public_key+0x34>)
   1e7da:	2100      	movs	r1, #0
   1e7dc:	f004 f85e 	bl	2289c <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1e7e0:	2000      	movs	r0, #0
}
   1e7e2:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e7e4:	200c      	movs	r0, #12
   1e7e6:	e7fc      	b.n	1e7e2 <hci_cmd_le_read_local_p256_public_key+0x2a>
   1e7e8:	20002930 	.word	0x20002930
   1e7ec:	20002920 	.word	0x20002920

0001e7f0 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1e7f0:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1e7f2:	2900      	cmp	r1, #0
   1e7f4:	4b11      	ldr	r3, [pc, #68]	; (1e83c <cmd_le_generate_dhkey+0x4c>)
   1e7f6:	f3bf 8f5b 	dmb	ish
{
   1e7fa:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1e7fc:	bf0c      	ite	eq
   1e7fe:	2202      	moveq	r2, #2
   1e800:	2204      	movne	r2, #4
   1e802:	e853 1f00 	ldrex	r1, [r3]
   1e806:	2900      	cmp	r1, #0
   1e808:	d103      	bne.n	1e812 <cmd_le_generate_dhkey+0x22>
   1e80a:	e843 2000 	strex	r0, r2, [r3]
   1e80e:	2800      	cmp	r0, #0
   1e810:	d1f7      	bne.n	1e802 <cmd_le_generate_dhkey+0x12>
   1e812:	f3bf 8f5b 	dmb	ish
   1e816:	d10e      	bne.n	1e836 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1e818:	4621      	mov	r1, r4
   1e81a:	4809      	ldr	r0, [pc, #36]	; (1e840 <cmd_le_generate_dhkey+0x50>)
   1e81c:	f7ff fe8a 	bl	1e534 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1e820:	4808      	ldr	r0, [pc, #32]	; (1e844 <cmd_le_generate_dhkey+0x54>)
   1e822:	f104 0120 	add.w	r1, r4, #32
   1e826:	f7ff fe85 	bl	1e534 <sys_memcpy_swap.constprop.0>
   1e82a:	4807      	ldr	r0, [pc, #28]	; (1e848 <cmd_le_generate_dhkey+0x58>)
   1e82c:	2100      	movs	r1, #0
   1e82e:	f004 f835 	bl	2289c <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1e832:	2000      	movs	r0, #0
}
   1e834:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e836:	200c      	movs	r0, #12
   1e838:	e7fc      	b.n	1e834 <cmd_le_generate_dhkey+0x44>
   1e83a:	bf00      	nop
   1e83c:	20002930 	.word	0x20002930
   1e840:	20003e88 	.word	0x20003e88
   1e844:	20003ea8 	.word	0x20003ea8
   1e848:	20002920 	.word	0x20002920

0001e84c <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1e84c:	b508      	push	{r3, lr}
   1e84e:	4602      	mov	r2, r0
   1e850:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1e852:	4805      	ldr	r0, [pc, #20]	; (1e868 <m_assert_handler+0x1c>)
   1e854:	2145      	movs	r1, #69	; 0x45
   1e856:	f007 fb81 	bl	25f5c <z_log_minimal_printk>
	k_oops();
   1e85a:	4040      	eors	r0, r0
   1e85c:	f380 8811 	msr	BASEPRI, r0
   1e860:	f04f 0003 	mov.w	r0, #3
   1e864:	df02      	svc	2
}
   1e866:	bd08      	pop	{r3, pc}
   1e868:	0002d3a7 	.word	0x0002d3a7

0001e86c <mpsl_low_prio_irq_handler>:
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1e86c:	4901      	ldr	r1, [pc, #4]	; (1e874 <mpsl_low_prio_irq_handler+0x8>)
   1e86e:	4802      	ldr	r0, [pc, #8]	; (1e878 <mpsl_low_prio_irq_handler+0xc>)
   1e870:	f00a bdd4 	b.w	2941c <k_work_submit_to_queue>
   1e874:	20002964 	.word	0x20002964
   1e878:	20001dc8 	.word	0x20001dc8

0001e87c <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   1e87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1e87e:	2332      	movs	r3, #50	; 0x32
   1e880:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e884:	4a13      	ldr	r2, [pc, #76]	; (1e8d4 <mpsl_lib_init_sys+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   1e886:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1e888:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e88a:	2119      	movs	r1, #25
   1e88c:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1e88e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1e892:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1e896:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e89a:	f7e5 fbad 	bl	3ff8 <mpsl_init>
	if (err) {
   1e89e:	4604      	mov	r4, r0
   1e8a0:	b9a0      	cbnz	r0, 1e8cc <mpsl_lib_init_sys+0x50>
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1e8a2:	480d      	ldr	r0, [pc, #52]	; (1e8d8 <mpsl_lib_init_sys+0x5c>)
   1e8a4:	4629      	mov	r1, r5
   1e8a6:	f7ed fc64 	bl	c172 <mpsl_timeslot_session_count_set>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1e8aa:	4604      	mov	r4, r0
   1e8ac:	b970      	cbnz	r0, 1e8cc <mpsl_lib_init_sys+0x50>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e8ae:	4601      	mov	r1, r0
   1e8b0:	462a      	mov	r2, r5
   1e8b2:	2008      	movs	r0, #8
   1e8b4:	f7f4 fc34 	bl	13120 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e8b8:	462a      	mov	r2, r5
   1e8ba:	4621      	mov	r1, r4
   1e8bc:	200b      	movs	r0, #11
   1e8be:	f7f4 fc2f 	bl	13120 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e8c2:	462a      	mov	r2, r5
   1e8c4:	4621      	mov	r1, r4
   1e8c6:	4628      	mov	r0, r5
   1e8c8:	f7f4 fc2a 	bl	13120 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1e8cc:	4620      	mov	r0, r4
   1e8ce:	b003      	add	sp, #12
   1e8d0:	bd30      	pop	{r4, r5, pc}
   1e8d2:	bf00      	nop
   1e8d4:	0001e84d 	.word	0x0001e84d
   1e8d8:	20002934 	.word	0x20002934

0001e8dc <mpsl_low_prio_work_handler>:
{
   1e8dc:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e8de:	f04f 30ff 	mov.w	r0, #4294967295
   1e8e2:	f04f 31ff 	mov.w	r1, #4294967295
   1e8e6:	f7ff f869 	bl	1d9bc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1e8ea:	b140      	cbz	r0, 1e8fe <mpsl_low_prio_work_handler+0x22>
   1e8ec:	4907      	ldr	r1, [pc, #28]	; (1e90c <mpsl_low_prio_work_handler+0x30>)
   1e8ee:	4808      	ldr	r0, [pc, #32]	; (1e910 <mpsl_low_prio_work_handler+0x34>)
   1e8f0:	2247      	movs	r2, #71	; 0x47
   1e8f2:	f007 fb25 	bl	25f40 <assert_print>
   1e8f6:	4805      	ldr	r0, [pc, #20]	; (1e90c <mpsl_low_prio_work_handler+0x30>)
   1e8f8:	2147      	movs	r1, #71	; 0x47
   1e8fa:	f007 fb1a 	bl	25f32 <assert_post_action>
	mpsl_low_priority_process();
   1e8fe:	f7ed fd55 	bl	c3ac <mpsl_low_priority_process>
}
   1e902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1e906:	f7ff b861 	b.w	1d9cc <multithreading_lock_release>
   1e90a:	bf00      	nop
   1e90c:	0002d3c0 	.word	0x0002d3c0
   1e910:	0002a7df 	.word	0x0002a7df

0001e914 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1e914:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1e916:	4d0d      	ldr	r5, [pc, #52]	; (1e94c <mpsl_low_prio_init+0x38>)
   1e918:	490d      	ldr	r1, [pc, #52]	; (1e950 <mpsl_low_prio_init+0x3c>)
   1e91a:	2400      	movs	r4, #0
   1e91c:	9400      	str	r4, [sp, #0]
   1e91e:	f06f 0309 	mvn.w	r3, #9
   1e922:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e926:	4628      	mov	r0, r5
   1e928:	f002 f946 	bl	20bb8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1e92c:	4909      	ldr	r1, [pc, #36]	; (1e954 <mpsl_low_prio_init+0x40>)
   1e92e:	4628      	mov	r0, r5
   1e930:	f00a fcc6 	bl	292c0 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1e934:	4908      	ldr	r1, [pc, #32]	; (1e958 <mpsl_low_prio_init+0x44>)
   1e936:	4809      	ldr	r0, [pc, #36]	; (1e95c <mpsl_low_prio_init+0x48>)
   1e938:	f002 f888 	bl	20a4c <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1e93c:	4622      	mov	r2, r4
   1e93e:	2104      	movs	r1, #4
   1e940:	2019      	movs	r0, #25
   1e942:	f7f4 fbed 	bl	13120 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1e946:	4620      	mov	r0, r4
   1e948:	b003      	add	sp, #12
   1e94a:	bd30      	pop	{r4, r5, pc}
   1e94c:	20001dc8 	.word	0x20001dc8
   1e950:	20005bc0 	.word	0x20005bc0
   1e954:	0002d3ed 	.word	0x0002d3ed
   1e958:	0001e8dd 	.word	0x0001e8dd
   1e95c:	20002964 	.word	0x20002964

0001e960 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1e960:	4b01      	ldr	r3, [pc, #4]	; (1e968 <mpsl_hfclk_callback+0x8>)
   1e962:	2000      	movs	r0, #0
   1e964:	681b      	ldr	r3, [r3, #0]
   1e966:	4718      	bx	r3
   1e968:	20002974 	.word	0x20002974

0001e96c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1e96c:	b510      	push	{r4, lr}
	switch (domain) {
   1e96e:	b130      	cbz	r0, 1e97e <nrfx_clock_start+0x12>
   1e970:	2801      	cmp	r0, #1
   1e972:	d10a      	bne.n	1e98a <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1e974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1e978:	4808      	ldr	r0, [pc, #32]	; (1e99c <nrfx_clock_start+0x30>)
   1e97a:	f7e5 b9b3 	b.w	3ce4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e97e:	4b08      	ldr	r3, [pc, #32]	; (1e9a0 <nrfx_clock_start+0x34>)
}
   1e980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e984:	681b      	ldr	r3, [r3, #0]
   1e986:	2001      	movs	r0, #1
   1e988:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1e98a:	4906      	ldr	r1, [pc, #24]	; (1e9a4 <nrfx_clock_start+0x38>)
   1e98c:	4806      	ldr	r0, [pc, #24]	; (1e9a8 <nrfx_clock_start+0x3c>)
   1e98e:	221c      	movs	r2, #28
   1e990:	f007 fad6 	bl	25f40 <assert_print>
   1e994:	4803      	ldr	r0, [pc, #12]	; (1e9a4 <nrfx_clock_start+0x38>)
   1e996:	211c      	movs	r1, #28
   1e998:	f007 facb 	bl	25f32 <assert_post_action>
   1e99c:	0001e961 	.word	0x0001e961
   1e9a0:	20002974 	.word	0x20002974
   1e9a4:	0002d401 	.word	0x0002d401
   1e9a8:	0002a7df 	.word	0x0002a7df

0001e9ac <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1e9ac:	b508      	push	{r3, lr}
	switch (domain) {
   1e9ae:	b170      	cbz	r0, 1e9ce <nrfx_clock_stop+0x22>
   1e9b0:	2801      	cmp	r0, #1
   1e9b2:	d103      	bne.n	1e9bc <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1e9b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1e9b8:	f7e5 b986 	b.w	3cc8 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1e9bc:	4904      	ldr	r1, [pc, #16]	; (1e9d0 <nrfx_clock_stop+0x24>)
   1e9be:	4805      	ldr	r0, [pc, #20]	; (1e9d4 <nrfx_clock_stop+0x28>)
   1e9c0:	222a      	movs	r2, #42	; 0x2a
   1e9c2:	f007 fabd 	bl	25f40 <assert_print>
   1e9c6:	4802      	ldr	r0, [pc, #8]	; (1e9d0 <nrfx_clock_stop+0x24>)
   1e9c8:	212a      	movs	r1, #42	; 0x2a
   1e9ca:	f007 fab2 	bl	25f32 <assert_post_action>
}
   1e9ce:	bd08      	pop	{r3, pc}
   1e9d0:	0002d401 	.word	0x0002d401
   1e9d4:	0002a7df 	.word	0x0002a7df

0001e9d8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1e9d8:	4b01      	ldr	r3, [pc, #4]	; (1e9e0 <nrfx_clock_init+0x8>)
   1e9da:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1e9dc:	4801      	ldr	r0, [pc, #4]	; (1e9e4 <nrfx_clock_init+0xc>)
   1e9de:	4770      	bx	lr
   1e9e0:	20002974 	.word	0x20002974
   1e9e4:	0bad0000 	.word	0x0bad0000

0001e9e8 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1e9e8:	b510      	push	{r4, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   1e9ea:	4c28      	ldr	r4, [pc, #160]	; (1ea8c <timeslot_callback+0xa4>)
   1e9ec:	7e23      	ldrb	r3, [r4, #24]
   1e9ee:	4283      	cmp	r3, r0
   1e9f0:	d008      	beq.n	1ea04 <timeslot_callback+0x1c>
   1e9f2:	4927      	ldr	r1, [pc, #156]	; (1ea90 <timeslot_callback+0xa8>)
   1e9f4:	4827      	ldr	r0, [pc, #156]	; (1ea94 <timeslot_callback+0xac>)
   1e9f6:	2250      	movs	r2, #80	; 0x50
   1e9f8:	f007 faa2 	bl	25f40 <assert_print>
   1e9fc:	2150      	movs	r1, #80	; 0x50
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1e9fe:	4824      	ldr	r0, [pc, #144]	; (1ea90 <timeslot_callback+0xa8>)
   1ea00:	f007 fa97 	bl	25f32 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ea04:	f3bf 8f5b 	dmb	ish
   1ea08:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1ea0a:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   1ea0e:	bb13      	cbnz	r3, 1ea56 <timeslot_callback+0x6e>
		return NULL;
	}

	switch (signal) {
   1ea10:	2909      	cmp	r1, #9
   1ea12:	d834      	bhi.n	1ea7e <timeslot_callback+0x96>
   1ea14:	e8df f001 	tbb	[pc, r1]
   1ea18:	33333305 	.word	0x33333305
   1ea1c:	1c212133 	.word	0x1c212133
   1ea20:	1f33      	.short	0x1f33
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   1ea22:	6a23      	ldr	r3, [r4, #32]
   1ea24:	e9d3 2000 	ldrd	r2, r0, [r3]
   1ea28:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   1ea2a:	2801      	cmp	r0, #1
   1ea2c:	d005      	beq.n	1ea3a <timeslot_callback+0x52>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
			_context.return_param.callback_action =
   1ea2e:	2302      	movs	r3, #2
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1ea30:	63e0      	str	r0, [r4, #60]	; 0x3c
			_context.return_param.callback_action =
   1ea32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   1ea36:	4818      	ldr	r0, [pc, #96]	; (1ea98 <timeslot_callback+0xb0>)
   1ea38:	e00e      	b.n	1ea58 <timeslot_callback+0x70>
			_context.timeslot_request.params.earliest.timeout_us =
   1ea3a:	f247 5330 	movw	r3, #30000	; 0x7530
   1ea3e:	6323      	str	r3, [r4, #48]	; 0x30
			_context.return_param.callback_action =
   1ea40:	2303      	movs	r3, #3
   1ea42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			_context.return_param.params.request.p_next =
   1ea46:	4b15      	ldr	r3, [pc, #84]	; (1ea9c <timeslot_callback+0xb4>)
			_context.timeslot_request.params.earliest.priority =
   1ea48:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
			_context.return_param.params.request.p_next =
   1ea4c:	63a3      	str	r3, [r4, #56]	; 0x38
   1ea4e:	e7f2      	b.n	1ea36 <timeslot_callback+0x4e>
	z_impl_k_sem_give(sem);
   1ea50:	480e      	ldr	r0, [pc, #56]	; (1ea8c <timeslot_callback+0xa4>)
   1ea52:	f001 fd6b 	bl	2052c <z_impl_k_sem_give>
		return NULL;
   1ea56:	2000      	movs	r0, #0
}
   1ea58:	bd10      	pop	{r4, pc}
	_context.timeslot_request.params.earliest.priority =
   1ea5a:	2300      	movs	r3, #0
   1ea5c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1ea60:	490e      	ldr	r1, [pc, #56]	; (1ea9c <timeslot_callback+0xb4>)
	_context.timeslot_request.params.earliest.timeout_us =
   1ea62:	4b0f      	ldr	r3, [pc, #60]	; (1eaa0 <timeslot_callback+0xb8>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1ea64:	7e20      	ldrb	r0, [r4, #24]
	_context.timeslot_request.params.earliest.timeout_us =
   1ea66:	6323      	str	r3, [r4, #48]	; 0x30
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1ea68:	f7ed fb27 	bl	c0ba <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1ea6c:	2800      	cmp	r0, #0
   1ea6e:	d0f2      	beq.n	1ea56 <timeslot_callback+0x6e>
   1ea70:	4907      	ldr	r1, [pc, #28]	; (1ea90 <timeslot_callback+0xa8>)
   1ea72:	4808      	ldr	r0, [pc, #32]	; (1ea94 <timeslot_callback+0xac>)
   1ea74:	2248      	movs	r2, #72	; 0x48
   1ea76:	f007 fa63 	bl	25f40 <assert_print>
   1ea7a:	2148      	movs	r1, #72	; 0x48
   1ea7c:	e7bf      	b.n	1e9fe <timeslot_callback+0x16>
		__ASSERT(false, "unexpected signal: %u", signal);
   1ea7e:	4904      	ldr	r1, [pc, #16]	; (1ea90 <timeslot_callback+0xa8>)
   1ea80:	4804      	ldr	r0, [pc, #16]	; (1ea94 <timeslot_callback+0xac>)
   1ea82:	227c      	movs	r2, #124	; 0x7c
   1ea84:	f007 fa5c 	bl	25f40 <assert_print>
   1ea88:	217c      	movs	r1, #124	; 0x7c
   1ea8a:	e7b8      	b.n	1e9fe <timeslot_callback+0x16>
   1ea8c:	20002978 	.word	0x20002978
   1ea90:	0002d43e 	.word	0x0002d43e
   1ea94:	0002a7df 	.word	0x0002a7df
   1ea98:	200029ac 	.word	0x200029ac
   1ea9c:	2000299c 	.word	0x2000299c
   1eaa0:	0f423fff 	.word	0x0f423fff

0001eaa4 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1eaa4:	4802      	ldr	r0, [pc, #8]	; (1eab0 <nrf_flash_sync_init+0xc>)
   1eaa6:	2201      	movs	r2, #1
   1eaa8:	2100      	movs	r1, #0
   1eaaa:	f00a bc54 	b.w	29356 <z_impl_k_sem_init>
   1eaae:	bf00      	nop
   1eab0:	20002978 	.word	0x20002978

0001eab4 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   1eab4:	4b01      	ldr	r3, [pc, #4]	; (1eabc <nrf_flash_sync_set_context+0x8>)
   1eab6:	61d8      	str	r0, [r3, #28]
}
   1eab8:	4770      	bx	lr
   1eaba:	bf00      	nop
   1eabc:	20002978 	.word	0x20002978

0001eac0 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1eac0:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1eac2:	f04f 31ff 	mov.w	r1, #4294967295
{
   1eac6:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1eac8:	f04f 30ff 	mov.w	r0, #4294967295
   1eacc:	f7fe ff76 	bl	1d9bc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1ead0:	4605      	mov	r5, r0
   1ead2:	b140      	cbz	r0, 1eae6 <nrf_flash_sync_exe+0x26>
   1ead4:	4947      	ldr	r1, [pc, #284]	; (1ebf4 <nrf_flash_sync_exe+0x134>)
   1ead6:	4848      	ldr	r0, [pc, #288]	; (1ebf8 <nrf_flash_sync_exe+0x138>)
   1ead8:	2299      	movs	r2, #153	; 0x99
   1eada:	f007 fa31 	bl	25f40 <assert_print>
   1eade:	2199      	movs	r1, #153	; 0x99

	_context.op_desc = op_desc;
	_context.status = -ETIMEDOUT;
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   1eae0:	4844      	ldr	r0, [pc, #272]	; (1ebf4 <nrf_flash_sync_exe+0x134>)
   1eae2:	f007 fa26 	bl	25f32 <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1eae6:	4945      	ldr	r1, [pc, #276]	; (1ebfc <nrf_flash_sync_exe+0x13c>)
   1eae8:	4845      	ldr	r0, [pc, #276]	; (1ec00 <nrf_flash_sync_exe+0x140>)
   1eaea:	f7e1 ff11 	bl	910 <mpsl_timeslot_session_open>
   1eaee:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1eaf0:	f7fe ff6c 	bl	1d9cc <multithreading_lock_release>
	if (ret < 0) {
   1eaf4:	2c00      	cmp	r4, #0
   1eaf6:	da07      	bge.n	1eb08 <nrf_flash_sync_exe+0x48>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   1eaf8:	4842      	ldr	r0, [pc, #264]	; (1ec04 <nrf_flash_sync_exe+0x144>)
   1eafa:	4622      	mov	r2, r4
   1eafc:	2145      	movs	r1, #69	; 0x45
   1eafe:	f007 fa2d 	bl	25f5c <z_log_minimal_printk>
		return -ENOMEM;
   1eb02:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   1eb06:	bd70      	pop	{r4, r5, r6, pc}
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1eb08:	4c3f      	ldr	r4, [pc, #252]	; (1ec08 <nrf_flash_sync_exe+0x148>)
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1eb0a:	f240 1301 	movw	r3, #257	; 0x101
   1eb0e:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1eb10:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   1eb12:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1eb14:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   1eb16:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   1eb18:	f247 5330 	movw	r3, #30000	; 0x7530
   1eb1c:	6323      	str	r3, [r4, #48]	; 0x30
	_context.status = -ETIMEDOUT;
   1eb1e:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1eb22:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   1eb26:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1eb28:	f104 0640 	add.w	r6, r4, #64	; 0x40
   1eb2c:	f3bf 8f5b 	dmb	ish
   1eb30:	e856 3f00 	ldrex	r3, [r6]
   1eb34:	e846 5200 	strex	r2, r5, [r6]
   1eb38:	2a00      	cmp	r2, #0
   1eb3a:	d1f9      	bne.n	1eb30 <nrf_flash_sync_exe+0x70>
   1eb3c:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   1eb40:	68a3      	ldr	r3, [r4, #8]
   1eb42:	b133      	cbz	r3, 1eb52 <nrf_flash_sync_exe+0x92>
   1eb44:	492b      	ldr	r1, [pc, #172]	; (1ebf4 <nrf_flash_sync_exe+0x134>)
   1eb46:	482c      	ldr	r0, [pc, #176]	; (1ebf8 <nrf_flash_sync_exe+0x138>)
   1eb48:	22af      	movs	r2, #175	; 0xaf
   1eb4a:	f007 f9f9 	bl	25f40 <assert_print>
   1eb4e:	21af      	movs	r1, #175	; 0xaf
   1eb50:	e7c6      	b.n	1eae0 <nrf_flash_sync_exe+0x20>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1eb52:	f04f 30ff 	mov.w	r0, #4294967295
   1eb56:	f04f 31ff 	mov.w	r1, #4294967295
   1eb5a:	f7fe ff2f 	bl	1d9bc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1eb5e:	b130      	cbz	r0, 1eb6e <nrf_flash_sync_exe+0xae>
   1eb60:	4924      	ldr	r1, [pc, #144]	; (1ebf4 <nrf_flash_sync_exe+0x134>)
   1eb62:	4825      	ldr	r0, [pc, #148]	; (1ebf8 <nrf_flash_sync_exe+0x138>)
   1eb64:	22b2      	movs	r2, #178	; 0xb2
   1eb66:	f007 f9eb 	bl	25f40 <assert_print>
   1eb6a:	21b2      	movs	r1, #178	; 0xb2
   1eb6c:	e7b8      	b.n	1eae0 <nrf_flash_sync_exe+0x20>
	ret = mpsl_timeslot_request(_context.session_id, req);
   1eb6e:	7e20      	ldrb	r0, [r4, #24]
   1eb70:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1eb74:	f7ed faa1 	bl	c0ba <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1eb78:	b130      	cbz	r0, 1eb88 <nrf_flash_sync_exe+0xc8>
   1eb7a:	491e      	ldr	r1, [pc, #120]	; (1ebf4 <nrf_flash_sync_exe+0x134>)
   1eb7c:	481e      	ldr	r0, [pc, #120]	; (1ebf8 <nrf_flash_sync_exe+0x138>)
   1eb7e:	22b4      	movs	r2, #180	; 0xb4
   1eb80:	f007 f9de 	bl	25f40 <assert_print>
   1eb84:	21b4      	movs	r1, #180	; 0xb4
   1eb86:	e7ab      	b.n	1eae0 <nrf_flash_sync_exe+0x20>
	MULTITHREADING_LOCK_RELEASE();
   1eb88:	f7fe ff20 	bl	1d9cc <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   1eb8c:	4a1f      	ldr	r2, [pc, #124]	; (1ec0c <nrf_flash_sync_exe+0x14c>)
   1eb8e:	2300      	movs	r3, #0
   1eb90:	4620      	mov	r0, r4
   1eb92:	f001 fd05 	bl	205a0 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1eb96:	2800      	cmp	r0, #0
   1eb98:	da0e      	bge.n	1ebb8 <nrf_flash_sync_exe+0xf8>
		LOG_ERR("timeout");
   1eb9a:	481d      	ldr	r0, [pc, #116]	; (1ec10 <nrf_flash_sync_exe+0x150>)
   1eb9c:	2145      	movs	r1, #69	; 0x45
   1eb9e:	f007 f9dd 	bl	25f5c <z_log_minimal_printk>
   1eba2:	f3bf 8f5b 	dmb	ish
   1eba6:	2301      	movs	r3, #1
   1eba8:	e856 2f00 	ldrex	r2, [r6]
   1ebac:	e846 3100 	strex	r1, r3, [r6]
   1ebb0:	2900      	cmp	r1, #0
   1ebb2:	d1f9      	bne.n	1eba8 <nrf_flash_sync_exe+0xe8>
   1ebb4:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ebb8:	f04f 30ff 	mov.w	r0, #4294967295
   1ebbc:	f04f 31ff 	mov.w	r1, #4294967295
   1ebc0:	f7fe fefc 	bl	1d9bc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1ebc4:	b130      	cbz	r0, 1ebd4 <nrf_flash_sync_exe+0x114>
   1ebc6:	490b      	ldr	r1, [pc, #44]	; (1ebf4 <nrf_flash_sync_exe+0x134>)
   1ebc8:	480b      	ldr	r0, [pc, #44]	; (1ebf8 <nrf_flash_sync_exe+0x138>)
   1ebca:	22bf      	movs	r2, #191	; 0xbf
   1ebcc:	f007 f9b8 	bl	25f40 <assert_print>
   1ebd0:	21bf      	movs	r1, #191	; 0xbf
   1ebd2:	e785      	b.n	1eae0 <nrf_flash_sync_exe+0x20>
	mpsl_timeslot_session_close(_context.session_id);
   1ebd4:	7e20      	ldrb	r0, [r4, #24]
   1ebd6:	f7ed faab 	bl	c130 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1ebda:	f7fe fef7 	bl	1d9cc <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ebde:	f3bf 8f5b 	dmb	ish
   1ebe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1ebe4:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   1ebe8:	b113      	cbz	r3, 1ebf0 <nrf_flash_sync_exe+0x130>
	z_impl_k_sem_reset(sem);
   1ebea:	4807      	ldr	r0, [pc, #28]	; (1ec08 <nrf_flash_sync_exe+0x148>)
   1ebec:	f001 fd38 	bl	20660 <z_impl_k_sem_reset>
	return _context.status;
   1ebf0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1ebf2:	e788      	b.n	1eb06 <nrf_flash_sync_exe+0x46>
   1ebf4:	0002d43e 	.word	0x0002d43e
   1ebf8:	0002a7df 	.word	0x0002a7df
   1ebfc:	20002990 	.word	0x20002990
   1ec00:	0001e9e9 	.word	0x0001e9e9
   1ec04:	0002d478 	.word	0x0002d478
   1ec08:	20002978 	.word	0x20002978
   1ec0c:	000b7b44 	.word	0x000b7b44
   1ec10:	0002d4a3 	.word	0x0002d4a3

0001ec14 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec14:	4b07      	ldr	r3, [pc, #28]	; (1ec34 <nrf_flash_sync_check_time_limit+0x20>)
   1ec16:	2201      	movs	r2, #1
   1ec18:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   1ec1a:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   1ec1e:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1ec22:	4418      	add	r0, r3
   1ec24:	4b04      	ldr	r3, [pc, #16]	; (1ec38 <nrf_flash_sync_check_time_limit+0x24>)
   1ec26:	69db      	ldr	r3, [r3, #28]
}
   1ec28:	4298      	cmp	r0, r3
   1ec2a:	bf34      	ite	cc
   1ec2c:	2000      	movcc	r0, #0
   1ec2e:	2001      	movcs	r0, #1
   1ec30:	4770      	bx	lr
   1ec32:	bf00      	nop
   1ec34:	40008000 	.word	0x40008000
   1ec38:	20002978 	.word	0x20002978

0001ec3c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ec3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1ec40:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1ec44:	2a08      	cmp	r2, #8
   1ec46:	d106      	bne.n	1ec56 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ec48:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1ec4c:	2b05      	cmp	r3, #5
   1ec4e:	d802      	bhi.n	1ec56 <nrf52_errata_103+0x1a>
   1ec50:	4a02      	ldr	r2, [pc, #8]	; (1ec5c <nrf52_errata_103+0x20>)
   1ec52:	5cd0      	ldrb	r0, [r2, r3]
   1ec54:	4770      	bx	lr
                        return false;
   1ec56:	2000      	movs	r0, #0
}
   1ec58:	4770      	bx	lr
   1ec5a:	bf00      	nop
   1ec5c:	0002d4c6 	.word	0x0002d4c6

0001ec60 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1ec60:	4a02      	ldr	r2, [pc, #8]	; (1ec6c <nvmc_wait+0xc>)
   1ec62:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1ec66:	2b00      	cmp	r3, #0
   1ec68:	d0fb      	beq.n	1ec62 <nvmc_wait+0x2>
}
   1ec6a:	4770      	bx	lr
   1ec6c:	4001e000 	.word	0x4001e000

0001ec70 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1ec70:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ec72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1ec76:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1ec7a:	2a08      	cmp	r2, #8
   1ec7c:	d14e      	bne.n	1ed1c <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1ec7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ec82:	2100      	movs	r1, #0
   1ec84:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1ec88:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1ec8c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1ec90:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   1ec94:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   1ec98:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1ec9c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   1eca0:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1eca4:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   1eca8:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1ecac:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   1ecb0:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1ecb4:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   1ecb8:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1ecbc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1ecc0:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1ecc4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   1ecc8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1eccc:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   1ecd0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1ecd4:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   1ecd8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1ecdc:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   1ece0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1ece4:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   1ece8:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1ecec:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   1ecf0:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1ecf4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   1ecf8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1ecfc:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   1ed00:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1ed04:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   1ed08:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1ed0c:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   1ed10:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1ed14:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   1ed18:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1ed1c:	f7ff ff8e 	bl	1ec3c <nrf52_errata_103>
   1ed20:	b118      	cbz	r0, 1ed2a <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1ed22:	4b3b      	ldr	r3, [pc, #236]	; (1ee10 <SystemInit+0x1a0>)
   1ed24:	4a3b      	ldr	r2, [pc, #236]	; (1ee14 <SystemInit+0x1a4>)
   1ed26:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1ed2a:	f7ff ff87 	bl	1ec3c <nrf52_errata_103>
   1ed2e:	b118      	cbz	r0, 1ed38 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1ed30:	4b39      	ldr	r3, [pc, #228]	; (1ee18 <SystemInit+0x1a8>)
   1ed32:	22fb      	movs	r2, #251	; 0xfb
   1ed34:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1ed38:	f7ff ff80 	bl	1ec3c <nrf52_errata_103>
   1ed3c:	b170      	cbz	r0, 1ed5c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1ed3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1ed42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ed46:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1ed4a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1ed4e:	f022 020f 	bic.w	r2, r2, #15
   1ed52:	f003 030f 	and.w	r3, r3, #15
   1ed56:	4313      	orrs	r3, r2
   1ed58:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1ed5c:	f7ff ff6e 	bl	1ec3c <nrf52_errata_103>
   1ed60:	b120      	cbz	r0, 1ed6c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1ed62:	4b2e      	ldr	r3, [pc, #184]	; (1ee1c <SystemInit+0x1ac>)
   1ed64:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ed68:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ed6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1ed70:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1ed74:	2b08      	cmp	r3, #8
   1ed76:	d11a      	bne.n	1edae <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1ed78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ed7c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1ed80:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1ed82:	bf44      	itt	mi
   1ed84:	f06f 0201 	mvnmi.w	r2, #1
   1ed88:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ed8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ed90:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   1ed94:	2b05      	cmp	r3, #5
   1ed96:	d802      	bhi.n	1ed9e <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1ed98:	4a21      	ldr	r2, [pc, #132]	; (1ee20 <SystemInit+0x1b0>)
   1ed9a:	5cd3      	ldrb	r3, [r2, r3]
   1ed9c:	b13b      	cbz	r3, 1edae <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1ed9e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1eda2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1eda6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1edaa:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1edae:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1edb2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1edb6:	2a00      	cmp	r2, #0
   1edb8:	db03      	blt.n	1edc2 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1edba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1edbe:	2b00      	cmp	r3, #0
   1edc0:	da22      	bge.n	1ee08 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1edc2:	4918      	ldr	r1, [pc, #96]	; (1ee24 <SystemInit+0x1b4>)
   1edc4:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1edc6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1edca:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1edce:	2412      	movs	r4, #18
    nvmc_wait();
   1edd0:	f7ff ff46 	bl	1ec60 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1edd4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1edd8:	f7ff ff42 	bl	1ec60 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1eddc:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1ede0:	f7ff ff3e 	bl	1ec60 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1ede4:	2300      	movs	r3, #0
   1ede6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1edea:	f7ff ff39 	bl	1ec60 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1edee:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1edf2:	490d      	ldr	r1, [pc, #52]	; (1ee28 <SystemInit+0x1b8>)
   1edf4:	4b0d      	ldr	r3, [pc, #52]	; (1ee2c <SystemInit+0x1bc>)
   1edf6:	68ca      	ldr	r2, [r1, #12]
   1edf8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1edfc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1edfe:	60cb      	str	r3, [r1, #12]
   1ee00:	f3bf 8f4f 	dsb	sy
    __NOP();
   1ee04:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1ee06:	e7fd      	b.n	1ee04 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1ee08:	4b09      	ldr	r3, [pc, #36]	; (1ee30 <SystemInit+0x1c0>)
   1ee0a:	4a0a      	ldr	r2, [pc, #40]	; (1ee34 <SystemInit+0x1c4>)
   1ee0c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1ee0e:	bd10      	pop	{r4, pc}
   1ee10:	40005000 	.word	0x40005000
   1ee14:	00038148 	.word	0x00038148
   1ee18:	4000f000 	.word	0x4000f000
   1ee1c:	40029000 	.word	0x40029000
   1ee20:	0002d4c0 	.word	0x0002d4c0
   1ee24:	4001e000 	.word	0x4001e000
   1ee28:	e000ed00 	.word	0xe000ed00
   1ee2c:	05fa0004 	.word	0x05fa0004
   1ee30:	20000684 	.word	0x20000684
   1ee34:	03d09000 	.word	0x03d09000

0001ee38 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1ee38:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ee3a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1ee3c:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ee3e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1ee42:	fab2 f382 	clz	r3, r2
   1ee46:	f1c3 031f 	rsb	r3, r3, #31
   1ee4a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ee4c:	fa05 f403 	lsl.w	r4, r5, r3
   1ee50:	ea22 0404 	bic.w	r4, r2, r4
   1ee54:	e850 6f00 	ldrex	r6, [r0]
   1ee58:	4296      	cmp	r6, r2
   1ee5a:	d104      	bne.n	1ee66 <nrfx_flag32_alloc+0x2e>
   1ee5c:	e840 4c00 	strex	ip, r4, [r0]
   1ee60:	f1bc 0f00 	cmp.w	ip, #0
   1ee64:	d1f6      	bne.n	1ee54 <nrfx_flag32_alloc+0x1c>
   1ee66:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ee6a:	d1e7      	bne.n	1ee3c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1ee6c:	4801      	ldr	r0, [pc, #4]	; (1ee74 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1ee6e:	700b      	strb	r3, [r1, #0]
}
   1ee70:	bd70      	pop	{r4, r5, r6, pc}
   1ee72:	bf00      	nop
   1ee74:	0bad0000 	.word	0x0bad0000

0001ee78 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1ee78:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1ee7a:	6803      	ldr	r3, [r0, #0]
   1ee7c:	40cb      	lsrs	r3, r1
   1ee7e:	07db      	lsls	r3, r3, #31
   1ee80:	d414      	bmi.n	1eeac <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1ee82:	2301      	movs	r3, #1
   1ee84:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1ee86:	6802      	ldr	r2, [r0, #0]
   1ee88:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1ee8c:	ea43 0102 	orr.w	r1, r3, r2
   1ee90:	e850 4f00 	ldrex	r4, [r0]
   1ee94:	4294      	cmp	r4, r2
   1ee96:	d104      	bne.n	1eea2 <nrfx_flag32_free+0x2a>
   1ee98:	e840 1c00 	strex	ip, r1, [r0]
   1ee9c:	f1bc 0f00 	cmp.w	ip, #0
   1eea0:	d1f6      	bne.n	1ee90 <nrfx_flag32_free+0x18>
   1eea2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1eea6:	d1ee      	bne.n	1ee86 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1eea8:	4801      	ldr	r0, [pc, #4]	; (1eeb0 <nrfx_flag32_free+0x38>)
}
   1eeaa:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1eeac:	4801      	ldr	r0, [pc, #4]	; (1eeb4 <nrfx_flag32_free+0x3c>)
   1eeae:	e7fc      	b.n	1eeaa <nrfx_flag32_free+0x32>
   1eeb0:	0bad0000 	.word	0x0bad0000
   1eeb4:	0bad0004 	.word	0x0bad0004

0001eeb8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1eeb8:	4b03      	ldr	r3, [pc, #12]	; (1eec8 <pin_in_use_by_te+0x10>)
   1eeba:	3008      	adds	r0, #8
   1eebc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1eec0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1eec4:	4770      	bx	lr
   1eec6:	bf00      	nop
   1eec8:	20000688 	.word	0x20000688

0001eecc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1eecc:	4b04      	ldr	r3, [pc, #16]	; (1eee0 <pin_has_trigger+0x14>)
   1eece:	3008      	adds	r0, #8
   1eed0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1eed4:	f010 001c 	ands.w	r0, r0, #28
   1eed8:	bf18      	it	ne
   1eeda:	2001      	movne	r0, #1
   1eedc:	4770      	bx	lr
   1eede:	bf00      	nop
   1eee0:	20000688 	.word	0x20000688

0001eee4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1eee4:	4b03      	ldr	r3, [pc, #12]	; (1eef4 <pin_is_output+0x10>)
   1eee6:	3008      	adds	r0, #8
   1eee8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1eeec:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1eef0:	4770      	bx	lr
   1eef2:	bf00      	nop
   1eef4:	20000688 	.word	0x20000688

0001eef8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1eef8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1eefa:	f100 0308 	add.w	r3, r0, #8
   1eefe:	4c0c      	ldr	r4, [pc, #48]	; (1ef30 <call_handler+0x38>)
   1ef00:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1ef04:	05da      	lsls	r2, r3, #23
{
   1ef06:	4605      	mov	r5, r0
   1ef08:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ef0a:	d507      	bpl.n	1ef1c <call_handler+0x24>
   1ef0c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1ef10:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1ef14:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1ef18:	6852      	ldr	r2, [r2, #4]
   1ef1a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1ef1c:	68a3      	ldr	r3, [r4, #8]
   1ef1e:	b12b      	cbz	r3, 1ef2c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1ef20:	68e2      	ldr	r2, [r4, #12]
   1ef22:	4631      	mov	r1, r6
   1ef24:	4628      	mov	r0, r5
    }
}
   1ef26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1ef2a:	4718      	bx	r3
}
   1ef2c:	bd70      	pop	{r4, r5, r6, pc}
   1ef2e:	bf00      	nop
   1ef30:	20000688 	.word	0x20000688

0001ef34 <release_handler>:
{
   1ef34:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ef36:	4a18      	ldr	r2, [pc, #96]	; (1ef98 <release_handler+0x64>)
   1ef38:	3008      	adds	r0, #8
   1ef3a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1ef3e:	05d9      	lsls	r1, r3, #23
   1ef40:	d51d      	bpl.n	1ef7e <release_handler+0x4a>
   1ef42:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1ef46:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1ef4a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1ef4e:	f102 040e 	add.w	r4, r2, #14
   1ef52:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1ef54:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1ef58:	f413 7f80 	tst.w	r3, #256	; 0x100
   1ef5c:	d003      	beq.n	1ef66 <release_handler+0x32>
   1ef5e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1ef62:	4299      	cmp	r1, r3
   1ef64:	d00b      	beq.n	1ef7e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1ef66:	3001      	adds	r0, #1
   1ef68:	2830      	cmp	r0, #48	; 0x30
   1ef6a:	d1f3      	bne.n	1ef54 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1ef6c:	2300      	movs	r3, #0
   1ef6e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1ef72:	480a      	ldr	r0, [pc, #40]	; (1ef9c <release_handler+0x68>)
   1ef74:	f7ff ff80 	bl	1ee78 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1ef78:	4b09      	ldr	r3, [pc, #36]	; (1efa0 <release_handler+0x6c>)
   1ef7a:	4298      	cmp	r0, r3
   1ef7c:	d100      	bne.n	1ef80 <release_handler+0x4c>
}
   1ef7e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1ef80:	4908      	ldr	r1, [pc, #32]	; (1efa4 <release_handler+0x70>)
   1ef82:	4809      	ldr	r0, [pc, #36]	; (1efa8 <release_handler+0x74>)
   1ef84:	f44f 7299 	mov.w	r2, #306	; 0x132
   1ef88:	f006 ffda 	bl	25f40 <assert_print>
   1ef8c:	4805      	ldr	r0, [pc, #20]	; (1efa4 <release_handler+0x70>)
   1ef8e:	f44f 7199 	mov.w	r1, #306	; 0x132
   1ef92:	f006 ffce 	bl	25f32 <assert_post_action>
   1ef96:	bf00      	nop
   1ef98:	20000688 	.word	0x20000688
   1ef9c:	200006fc 	.word	0x200006fc
   1efa0:	0bad0000 	.word	0x0bad0000
   1efa4:	0002d4cc 	.word	0x0002d4cc
   1efa8:	0002a7df 	.word	0x0002a7df

0001efac <pin_handler_trigger_uninit>:
{
   1efac:	b538      	push	{r3, r4, r5, lr}
   1efae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1efb0:	f7ff ff82 	bl	1eeb8 <pin_in_use_by_te>
   1efb4:	4c09      	ldr	r4, [pc, #36]	; (1efdc <pin_handler_trigger_uninit+0x30>)
   1efb6:	f102 0508 	add.w	r5, r2, #8
   1efba:	b140      	cbz	r0, 1efce <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1efbc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1efc0:	4907      	ldr	r1, [pc, #28]	; (1efe0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1efc2:	0b5b      	lsrs	r3, r3, #13
   1efc4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1efc8:	2000      	movs	r0, #0
   1efca:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1efce:	4610      	mov	r0, r2
   1efd0:	f7ff ffb0 	bl	1ef34 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1efd4:	2300      	movs	r3, #0
   1efd6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1efda:	bd38      	pop	{r3, r4, r5, pc}
   1efdc:	20000688 	.word	0x20000688
   1efe0:	40006000 	.word	0x40006000

0001efe4 <nrf_gpio_pin_port_decode>:
{
   1efe4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1efe6:	6802      	ldr	r2, [r0, #0]
{
   1efe8:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1efea:	4610      	mov	r0, r2
   1efec:	f00a f884 	bl	290f8 <nrf_gpio_pin_present_check>
   1eff0:	b950      	cbnz	r0, 1f008 <nrf_gpio_pin_port_decode+0x24>
   1eff2:	4910      	ldr	r1, [pc, #64]	; (1f034 <nrf_gpio_pin_port_decode+0x50>)
   1eff4:	4810      	ldr	r0, [pc, #64]	; (1f038 <nrf_gpio_pin_port_decode+0x54>)
   1eff6:	f240 2247 	movw	r2, #583	; 0x247
   1effa:	f006 ffa1 	bl	25f40 <assert_print>
   1effe:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1f002:	480c      	ldr	r0, [pc, #48]	; (1f034 <nrf_gpio_pin_port_decode+0x50>)
   1f004:	f006 ff95 	bl	25f32 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1f008:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f00c:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1f00e:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f010:	d00a      	beq.n	1f028 <nrf_gpio_pin_port_decode+0x44>
   1f012:	2a01      	cmp	r2, #1
   1f014:	d00b      	beq.n	1f02e <nrf_gpio_pin_port_decode+0x4a>
            NRFX_ASSERT(0);
   1f016:	4907      	ldr	r1, [pc, #28]	; (1f034 <nrf_gpio_pin_port_decode+0x50>)
   1f018:	4807      	ldr	r0, [pc, #28]	; (1f038 <nrf_gpio_pin_port_decode+0x54>)
   1f01a:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1f01e:	f006 ff8f 	bl	25f40 <assert_print>
   1f022:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1f026:	e7ec      	b.n	1f002 <nrf_gpio_pin_port_decode+0x1e>
        case 0: return NRF_P0;
   1f028:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1f02c:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f02e:	4803      	ldr	r0, [pc, #12]	; (1f03c <nrf_gpio_pin_port_decode+0x58>)
   1f030:	e7fc      	b.n	1f02c <nrf_gpio_pin_port_decode+0x48>
   1f032:	bf00      	nop
   1f034:	0002cdf4 	.word	0x0002cdf4
   1f038:	0002a7df 	.word	0x0002a7df
   1f03c:	50000300 	.word	0x50000300

0001f040 <nrfx_gpiote_input_configure>:
{
   1f040:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f042:	4604      	mov	r4, r0
   1f044:	b085      	sub	sp, #20
   1f046:	4617      	mov	r7, r2
   1f048:	461d      	mov	r5, r3
    if (p_input_config)
   1f04a:	b1d9      	cbz	r1, 1f084 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1f04c:	f00a f865 	bl	2911a <pin_is_task_output>
   1f050:	bb00      	cbnz	r0, 1f094 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f052:	460b      	mov	r3, r1
   1f054:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f058:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f05c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f060:	f10d 020f 	add.w	r2, sp, #15
   1f064:	f10d 010e 	add.w	r1, sp, #14
   1f068:	4620      	mov	r0, r4
   1f06a:	f00a f861 	bl	29130 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f06e:	4a44      	ldr	r2, [pc, #272]	; (1f180 <nrfx_gpiote_input_configure+0x140>)
   1f070:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f074:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f078:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f07c:	f043 0301 	orr.w	r3, r3, #1
   1f080:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1f084:	b34f      	cbz	r7, 1f0da <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
   1f086:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f088:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f08a:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1f08c:	f7ff ff2a 	bl	1eee4 <pin_is_output>
   1f090:	b110      	cbz	r0, 1f098 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1f092:	b1ba      	cbz	r2, 1f0c4 <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
   1f094:	483b      	ldr	r0, [pc, #236]	; (1f184 <nrfx_gpiote_input_configure+0x144>)
   1f096:	e022      	b.n	1f0de <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f098:	4b39      	ldr	r3, [pc, #228]	; (1f180 <nrfx_gpiote_input_configure+0x140>)
   1f09a:	f104 0c08 	add.w	ip, r4, #8
   1f09e:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
   1f0a2:	f021 0120 	bic.w	r1, r1, #32
   1f0a6:	04c9      	lsls	r1, r1, #19
   1f0a8:	0cc9      	lsrs	r1, r1, #19
   1f0aa:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
   1f0ae:	b14a      	cbz	r2, 1f0c4 <nrfx_gpiote_input_configure+0x84>
                if (!edge)
   1f0b0:	2e03      	cmp	r6, #3
   1f0b2:	d8ef      	bhi.n	1f094 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f0b4:	687a      	ldr	r2, [r7, #4]
   1f0b6:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f0b8:	b99e      	cbnz	r6, 1f0e2 <nrfx_gpiote_input_configure+0xa2>
   1f0ba:	4b33      	ldr	r3, [pc, #204]	; (1f188 <nrfx_gpiote_input_configure+0x148>)
   1f0bc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   1f0c0:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f0c4:	4a2e      	ldr	r2, [pc, #184]	; (1f180 <nrfx_gpiote_input_configure+0x140>)
   1f0c6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f0ca:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f0ce:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f0d2:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1f0d6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1f0da:	bb3d      	cbnz	r5, 1f12c <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
   1f0dc:	482b      	ldr	r0, [pc, #172]	; (1f18c <nrfx_gpiote_input_configure+0x14c>)
}
   1f0de:	b005      	add	sp, #20
   1f0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f0e2:	00ba      	lsls	r2, r7, #2
   1f0e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f0e8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f0ec:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1f0f0:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f0f4:	f020 0003 	bic.w	r0, r0, #3
   1f0f8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f0fc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f100:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1f104:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1f108:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f10c:	0220      	lsls	r0, r4, #8
   1f10e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1f112:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1f116:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1f11a:	ea40 000e 	orr.w	r0, r0, lr
   1f11e:	f041 0120 	orr.w	r1, r1, #32
   1f122:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
   1f126:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1f12a:	e7cb      	b.n	1f0c4 <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f12c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1f130:	4620      	mov	r0, r4
   1f132:	f7ff feff 	bl	1ef34 <release_handler>
    if (!handler)
   1f136:	2e00      	cmp	r6, #0
   1f138:	d0d0      	beq.n	1f0dc <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f13a:	4d11      	ldr	r5, [pc, #68]	; (1f180 <nrfx_gpiote_input_configure+0x140>)
   1f13c:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f140:	4296      	cmp	r6, r2
   1f142:	d101      	bne.n	1f148 <nrfx_gpiote_input_configure+0x108>
   1f144:	429f      	cmp	r7, r3
   1f146:	d018      	beq.n	1f17a <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f148:	4811      	ldr	r0, [pc, #68]	; (1f190 <nrfx_gpiote_input_configure+0x150>)
   1f14a:	f10d 010f 	add.w	r1, sp, #15
   1f14e:	f7ff fe73 	bl	1ee38 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f152:	4b0e      	ldr	r3, [pc, #56]	; (1f18c <nrfx_gpiote_input_configure+0x14c>)
   1f154:	4298      	cmp	r0, r3
   1f156:	d1c2      	bne.n	1f0de <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
   1f158:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1f15c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1f160:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f164:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f166:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f168:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1f16c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f174:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1f178:	e7b0      	b.n	1f0dc <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f17a:	2200      	movs	r2, #0
   1f17c:	e7ee      	b.n	1f15c <nrfx_gpiote_input_configure+0x11c>
   1f17e:	bf00      	nop
   1f180:	20000688 	.word	0x20000688
   1f184:	0bad0004 	.word	0x0bad0004
   1f188:	40006000 	.word	0x40006000
   1f18c:	0bad0000 	.word	0x0bad0000
   1f190:	200006fc 	.word	0x200006fc

0001f194 <nrfx_gpiote_output_configure>:
{
   1f194:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f196:	4604      	mov	r4, r0
   1f198:	b085      	sub	sp, #20
   1f19a:	4615      	mov	r5, r2
    if (p_config)
   1f19c:	b321      	cbz	r1, 1f1e8 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1f19e:	f7ff fea1 	bl	1eee4 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f1a2:	b920      	cbnz	r0, 1f1ae <nrfx_gpiote_output_configure+0x1a>
   1f1a4:	4620      	mov	r0, r4
   1f1a6:	f7ff fe87 	bl	1eeb8 <pin_in_use_by_te>
   1f1aa:	2800      	cmp	r0, #0
   1f1ac:	d15e      	bne.n	1f26c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f1ae:	4620      	mov	r0, r4
   1f1b0:	f7ff fe8c 	bl	1eecc <pin_has_trigger>
   1f1b4:	b110      	cbz	r0, 1f1bc <nrfx_gpiote_output_configure+0x28>
   1f1b6:	784b      	ldrb	r3, [r1, #1]
   1f1b8:	2b01      	cmp	r3, #1
   1f1ba:	d057      	beq.n	1f26c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f1bc:	2301      	movs	r3, #1
   1f1be:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1f1c2:	2300      	movs	r3, #0
   1f1c4:	e9cd 1300 	strd	r1, r3, [sp]
   1f1c8:	1c4a      	adds	r2, r1, #1
   1f1ca:	1c8b      	adds	r3, r1, #2
   1f1cc:	4620      	mov	r0, r4
   1f1ce:	f10d 010f 	add.w	r1, sp, #15
   1f1d2:	f009 ffad 	bl	29130 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f1d6:	4a26      	ldr	r2, [pc, #152]	; (1f270 <nrfx_gpiote_output_configure+0xdc>)
   1f1d8:	f104 0108 	add.w	r1, r4, #8
   1f1dc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f1e0:	f043 0303 	orr.w	r3, r3, #3
   1f1e4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1f1e8:	b915      	cbnz	r5, 1f1f0 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1f1ea:	4822      	ldr	r0, [pc, #136]	; (1f274 <nrfx_gpiote_output_configure+0xe0>)
}
   1f1ec:	b005      	add	sp, #20
   1f1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1f1f0:	4620      	mov	r0, r4
   1f1f2:	f7ff fe77 	bl	1eee4 <pin_is_output>
        if (pin_is_input(pin))
   1f1f6:	b3c8      	cbz	r0, 1f26c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f1f8:	4e1d      	ldr	r6, [pc, #116]	; (1f270 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   1f1fa:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f1fe:	f104 0708 	add.w	r7, r4, #8
   1f202:	4661      	mov	r1, ip
   1f204:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1f208:	0089      	lsls	r1, r1, #2
   1f20a:	f020 0020 	bic.w	r0, r0, #32
   1f20e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f212:	04c0      	lsls	r0, r0, #19
   1f214:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1f218:	0cc0      	lsrs	r0, r0, #19
   1f21a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1f21e:	2300      	movs	r3, #0
   1f220:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1f224:	786a      	ldrb	r2, [r5, #1]
   1f226:	2a00      	cmp	r2, #0
   1f228:	d0df      	beq.n	1f1ea <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1f22a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1f22e:	78ad      	ldrb	r5, [r5, #2]
   1f230:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1f234:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f238:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f23c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1f240:	0223      	lsls	r3, r4, #8
   1f242:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f246:	0412      	lsls	r2, r2, #16
   1f248:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f24c:	ea43 030e 	orr.w	r3, r3, lr
   1f250:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f252:	052a      	lsls	r2, r5, #20
   1f254:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f258:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f25c:	4313      	orrs	r3, r2
   1f25e:	f040 0020 	orr.w	r0, r0, #32
   1f262:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1f266:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f26a:	e7be      	b.n	1f1ea <nrfx_gpiote_output_configure+0x56>
{
   1f26c:	4802      	ldr	r0, [pc, #8]	; (1f278 <nrfx_gpiote_output_configure+0xe4>)
   1f26e:	e7bd      	b.n	1f1ec <nrfx_gpiote_output_configure+0x58>
   1f270:	20000688 	.word	0x20000688
   1f274:	0bad0000 	.word	0x0bad0000
   1f278:	0bad0004 	.word	0x0bad0004

0001f27c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1f27c:	4b01      	ldr	r3, [pc, #4]	; (1f284 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1f27e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1f282:	4770      	bx	lr
   1f284:	20000688 	.word	0x20000688

0001f288 <nrfx_gpiote_channel_get>:
{
   1f288:	b508      	push	{r3, lr}
   1f28a:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
   1f28c:	b951      	cbnz	r1, 1f2a4 <nrfx_gpiote_channel_get+0x1c>
   1f28e:	490c      	ldr	r1, [pc, #48]	; (1f2c0 <nrfx_gpiote_channel_get+0x38>)
   1f290:	480c      	ldr	r0, [pc, #48]	; (1f2c4 <nrfx_gpiote_channel_get+0x3c>)
   1f292:	f240 2235 	movw	r2, #565	; 0x235
   1f296:	f006 fe53 	bl	25f40 <assert_print>
   1f29a:	4809      	ldr	r0, [pc, #36]	; (1f2c0 <nrfx_gpiote_channel_get+0x38>)
   1f29c:	f240 2135 	movw	r1, #565	; 0x235
   1f2a0:	f006 fe47 	bl	25f32 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1f2a4:	f7ff fe08 	bl	1eeb8 <pin_in_use_by_te>
   1f2a8:	b138      	cbz	r0, 1f2ba <nrfx_gpiote_channel_get+0x32>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f2aa:	4b07      	ldr	r3, [pc, #28]	; (1f2c8 <nrfx_gpiote_channel_get+0x40>)
        return NRFX_SUCCESS;
   1f2ac:	4807      	ldr	r0, [pc, #28]	; (1f2cc <nrfx_gpiote_channel_get+0x44>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f2ae:	3208      	adds	r2, #8
   1f2b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1f2b4:	0b5b      	lsrs	r3, r3, #13
   1f2b6:	700b      	strb	r3, [r1, #0]
}
   1f2b8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f2ba:	4805      	ldr	r0, [pc, #20]	; (1f2d0 <nrfx_gpiote_channel_get+0x48>)
   1f2bc:	e7fc      	b.n	1f2b8 <nrfx_gpiote_channel_get+0x30>
   1f2be:	bf00      	nop
   1f2c0:	0002d4cc 	.word	0x0002d4cc
   1f2c4:	0002a7df 	.word	0x0002a7df
   1f2c8:	20000688 	.word	0x20000688
   1f2cc:	0bad0000 	.word	0x0bad0000
   1f2d0:	0bad0004 	.word	0x0bad0004

0001f2d4 <nrfx_gpiote_init>:
{
   1f2d4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f2d6:	4c0f      	ldr	r4, [pc, #60]	; (1f314 <nrfx_gpiote_init+0x40>)
   1f2d8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1f2dc:	b9bd      	cbnz	r5, 1f30e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1f2de:	2260      	movs	r2, #96	; 0x60
   1f2e0:	4629      	mov	r1, r5
   1f2e2:	f104 0010 	add.w	r0, r4, #16
   1f2e6:	f007 fcd4 	bl	26c92 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1f2ea:	2006      	movs	r0, #6
   1f2ec:	f7f3 fee8 	bl	130c0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f2f0:	4b09      	ldr	r3, [pc, #36]	; (1f318 <nrfx_gpiote_init+0x44>)
    return err_code;
   1f2f2:	480a      	ldr	r0, [pc, #40]	; (1f31c <nrfx_gpiote_init+0x48>)
   1f2f4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1f2f8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1f2fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1f300:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f304:	2301      	movs	r3, #1
   1f306:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1f30a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1f30c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1f30e:	4804      	ldr	r0, [pc, #16]	; (1f320 <nrfx_gpiote_init+0x4c>)
   1f310:	e7fc      	b.n	1f30c <nrfx_gpiote_init+0x38>
   1f312:	bf00      	nop
   1f314:	20000688 	.word	0x20000688
   1f318:	40006000 	.word	0x40006000
   1f31c:	0bad0000 	.word	0x0bad0000
   1f320:	0bad0005 	.word	0x0bad0005

0001f324 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1f324:	4b03      	ldr	r3, [pc, #12]	; (1f334 <nrfx_gpiote_is_init+0x10>)
   1f326:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1f32a:	3800      	subs	r0, #0
   1f32c:	bf18      	it	ne
   1f32e:	2001      	movne	r0, #1
   1f330:	4770      	bx	lr
   1f332:	bf00      	nop
   1f334:	20000688 	.word	0x20000688

0001f338 <nrfx_gpiote_channel_free>:
{
   1f338:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1f33a:	4801      	ldr	r0, [pc, #4]	; (1f340 <nrfx_gpiote_channel_free+0x8>)
   1f33c:	f7ff bd9c 	b.w	1ee78 <nrfx_flag32_free>
   1f340:	200006f8 	.word	0x200006f8

0001f344 <nrfx_gpiote_channel_alloc>:
{
   1f344:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1f346:	4801      	ldr	r0, [pc, #4]	; (1f34c <nrfx_gpiote_channel_alloc+0x8>)
   1f348:	f7ff bd76 	b.w	1ee38 <nrfx_flag32_alloc>
   1f34c:	200006f8 	.word	0x200006f8

0001f350 <nrfx_gpiote_trigger_enable>:
{
   1f350:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f352:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1f354:	f7ff fdba 	bl	1eecc <pin_has_trigger>
   1f358:	b950      	cbnz	r0, 1f370 <nrfx_gpiote_trigger_enable+0x20>
   1f35a:	492c      	ldr	r1, [pc, #176]	; (1f40c <nrfx_gpiote_trigger_enable+0xbc>)
   1f35c:	482c      	ldr	r0, [pc, #176]	; (1f410 <nrfx_gpiote_trigger_enable+0xc0>)
   1f35e:	f240 32df 	movw	r2, #991	; 0x3df
   1f362:	f006 fded 	bl	25f40 <assert_print>
   1f366:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1f36a:	4828      	ldr	r0, [pc, #160]	; (1f40c <nrfx_gpiote_trigger_enable+0xbc>)
   1f36c:	f006 fde1 	bl	25f32 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f370:	4620      	mov	r0, r4
   1f372:	f7ff fda1 	bl	1eeb8 <pin_in_use_by_te>
   1f376:	4a27      	ldr	r2, [pc, #156]	; (1f414 <nrfx_gpiote_trigger_enable+0xc4>)
   1f378:	f104 0508 	add.w	r5, r4, #8
   1f37c:	b1f8      	cbz	r0, 1f3be <nrfx_gpiote_trigger_enable+0x6e>
    return !pin_is_output(pin);
   1f37e:	4620      	mov	r0, r4
   1f380:	f7ff fdb0 	bl	1eee4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f384:	b9d8      	cbnz	r0, 1f3be <nrfx_gpiote_trigger_enable+0x6e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f386:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
   1f38a:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1f38c:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   1f38e:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   1f392:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
   1f396:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f39a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f39e:	6020      	str	r0, [r4, #0]
   1f3a0:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f3a2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1f3a6:	f040 0001 	orr.w	r0, r0, #1
   1f3aa:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1f3ae:	b121      	cbz	r1, 1f3ba <nrfx_gpiote_trigger_enable+0x6a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1f3b0:	2301      	movs	r3, #1
   1f3b2:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1f3b4:	4a18      	ldr	r2, [pc, #96]	; (1f418 <nrfx_gpiote_trigger_enable+0xc8>)
   1f3b6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f3ba:	b003      	add	sp, #12
   1f3bc:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1f3be:	b941      	cbnz	r1, 1f3d2 <nrfx_gpiote_trigger_enable+0x82>
   1f3c0:	4912      	ldr	r1, [pc, #72]	; (1f40c <nrfx_gpiote_trigger_enable+0xbc>)
   1f3c2:	4813      	ldr	r0, [pc, #76]	; (1f410 <nrfx_gpiote_trigger_enable+0xc0>)
   1f3c4:	f240 32ee 	movw	r2, #1006	; 0x3ee
   1f3c8:	f006 fdba 	bl	25f40 <assert_print>
   1f3cc:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1f3d0:	e7cb      	b.n	1f36a <nrfx_gpiote_trigger_enable+0x1a>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f3d2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1f3d6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1f3da:	2b04      	cmp	r3, #4
   1f3dc:	d012      	beq.n	1f404 <nrfx_gpiote_trigger_enable+0xb4>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1f3de:	2b05      	cmp	r3, #5
   1f3e0:	d012      	beq.n	1f408 <nrfx_gpiote_trigger_enable+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f3e2:	a801      	add	r0, sp, #4
   1f3e4:	9401      	str	r4, [sp, #4]
   1f3e6:	f7ff fdfd 	bl	1efe4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f3ea:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1f3ec:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f3f0:	40d9      	lsrs	r1, r3
   1f3f2:	f001 0101 	and.w	r1, r1, #1
   1f3f6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f3f8:	4620      	mov	r0, r4
}
   1f3fa:	b003      	add	sp, #12
   1f3fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f400:	f009 bee3 	b.w	291ca <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1f404:	2103      	movs	r1, #3
   1f406:	e7f7      	b.n	1f3f8 <nrfx_gpiote_trigger_enable+0xa8>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1f408:	2102      	movs	r1, #2
   1f40a:	e7f5      	b.n	1f3f8 <nrfx_gpiote_trigger_enable+0xa8>
   1f40c:	0002d4cc 	.word	0x0002d4cc
   1f410:	0002a7df 	.word	0x0002a7df
   1f414:	20000688 	.word	0x20000688
   1f418:	40006000 	.word	0x40006000

0001f41c <nrfx_gpiote_trigger_disable>:
{
   1f41c:	b508      	push	{r3, lr}
   1f41e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f420:	f7ff fd4a 	bl	1eeb8 <pin_in_use_by_te>
   1f424:	b1c8      	cbz	r0, 1f45a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1f426:	4610      	mov	r0, r2
   1f428:	f7ff fd5c 	bl	1eee4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f42c:	b9a8      	cbnz	r0, 1f45a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f42e:	3208      	adds	r2, #8
   1f430:	4b0d      	ldr	r3, [pc, #52]	; (1f468 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   1f432:	490e      	ldr	r1, [pc, #56]	; (1f46c <nrfx_gpiote_trigger_disable+0x50>)
   1f434:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f438:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f43a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f43c:	409a      	lsls	r2, r3
   1f43e:	009b      	lsls	r3, r3, #2
   1f440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f444:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1f448:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f44c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f450:	f022 0203 	bic.w	r2, r2, #3
   1f454:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1f458:	bd08      	pop	{r3, pc}
   1f45a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f45e:	2100      	movs	r1, #0
   1f460:	4610      	mov	r0, r2
   1f462:	f009 beb2 	b.w	291ca <nrf_gpio_cfg_sense_set>
   1f466:	bf00      	nop
   1f468:	20000688 	.word	0x20000688
   1f46c:	40006000 	.word	0x40006000

0001f470 <nrfx_gpiote_pin_uninit>:
{
   1f470:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f472:	4b0e      	ldr	r3, [pc, #56]	; (1f4ac <nrfx_gpiote_pin_uninit+0x3c>)
   1f474:	f100 0208 	add.w	r2, r0, #8
{
   1f478:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f47a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1f47e:	07db      	lsls	r3, r3, #31
   1f480:	d511      	bpl.n	1f4a6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1f482:	f7ff ffcb 	bl	1f41c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1f486:	4620      	mov	r0, r4
   1f488:	f7ff fd90 	bl	1efac <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f48c:	a801      	add	r0, sp, #4
   1f48e:	9401      	str	r4, [sp, #4]
   1f490:	f7ff fda8 	bl	1efe4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1f494:	9b01      	ldr	r3, [sp, #4]
   1f496:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f49a:	2202      	movs	r2, #2
   1f49c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1f4a0:	4803      	ldr	r0, [pc, #12]	; (1f4b0 <nrfx_gpiote_pin_uninit+0x40>)
}
   1f4a2:	b002      	add	sp, #8
   1f4a4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f4a6:	4803      	ldr	r0, [pc, #12]	; (1f4b4 <nrfx_gpiote_pin_uninit+0x44>)
   1f4a8:	e7fb      	b.n	1f4a2 <nrfx_gpiote_pin_uninit+0x32>
   1f4aa:	bf00      	nop
   1f4ac:	20000688 	.word	0x20000688
   1f4b0:	0bad0000 	.word	0x0bad0000
   1f4b4:	0bad0004 	.word	0x0bad0004

0001f4b8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1f4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4bc:	4b69      	ldr	r3, [pc, #420]	; (1f664 <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
   1f4be:	486a      	ldr	r0, [pc, #424]	; (1f668 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f4c0:	496a      	ldr	r1, [pc, #424]	; (1f66c <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
   1f4c2:	2600      	movs	r6, #0
{
   1f4c4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1f4c6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f4c8:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f4ca:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1f4cc:	b135      	cbz	r5, 1f4dc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1f4ce:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1f4d2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f4d4:	bf1e      	ittt	ne
   1f4d6:	601c      	strne	r4, [r3, #0]
   1f4d8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1f4da:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f4dc:	3304      	adds	r3, #4
   1f4de:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1f4e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f4e4:	d1f1      	bne.n	1f4ca <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f4e6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1f668 <nrfx_gpiote_irq_handler+0x1b0>
   1f4ea:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1f4ee:	2b00      	cmp	r3, #0
   1f4f0:	f000 809b 	beq.w	1f62a <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
   1f4f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f4f8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1f4fc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f4fe:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1f502:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1f506:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1f508:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f50c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   1f510:	f10d 0a10 	add.w	sl, sp, #16
   1f514:	ea4f 1348 	mov.w	r3, r8, lsl #5
   1f518:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1f51a:	f04f 0b01 	mov.w	fp, #1
   1f51e:	e04b      	b.n	1f5b8 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
   1f520:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f522:	4a53      	ldr	r2, [pc, #332]	; (1f670 <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1f524:	fa94 f4a4 	rbit	r4, r4
   1f528:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1f52c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1f52e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f530:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   1f534:	f004 0107 	and.w	r1, r4, #7
   1f538:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1f53c:	f81a 3000 	ldrb.w	r3, [sl, r0]
   1f540:	9403      	str	r4, [sp, #12]
   1f542:	fa0b f101 	lsl.w	r1, fp, r1
   1f546:	ea23 0301 	bic.w	r3, r3, r1
   1f54a:	08ba      	lsrs	r2, r7, #2
   1f54c:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f550:	a803      	add	r0, sp, #12
   1f552:	9201      	str	r2, [sp, #4]
   1f554:	f7ff fd46 	bl	1efe4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f558:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1f55a:	9a01      	ldr	r2, [sp, #4]
   1f55c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f560:	f3c7 0582 	ubfx	r5, r7, #2, #3
   1f564:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
   1f568:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f56a:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1f56c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1f570:	d52c      	bpl.n	1f5cc <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
   1f572:	4639      	mov	r1, r7
   1f574:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f576:	b2dd      	uxtb	r5, r3
   1f578:	f7ff fcbe 	bl	1eef8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f57c:	a803      	add	r0, sp, #12
   1f57e:	9403      	str	r4, [sp, #12]
   1f580:	f7ff fd30 	bl	1efe4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f584:	9b03      	ldr	r3, [sp, #12]
   1f586:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f58a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1f58e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1f592:	429d      	cmp	r5, r3
   1f594:	d107      	bne.n	1f5a6 <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f596:	2100      	movs	r1, #0
   1f598:	4620      	mov	r0, r4
   1f59a:	f009 fe16 	bl	291ca <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1f59e:	4629      	mov	r1, r5
   1f5a0:	4620      	mov	r0, r4
   1f5a2:	f009 fe12 	bl	291ca <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f5a6:	a803      	add	r0, sp, #12
   1f5a8:	9403      	str	r4, [sp, #12]
   1f5aa:	f7ff fd1b 	bl	1efe4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1f5ae:	9b03      	ldr	r3, [sp, #12]
   1f5b0:	fa0b f303 	lsl.w	r3, fp, r3
   1f5b4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1f5b8:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   1f5bc:	2c00      	cmp	r4, #0
   1f5be:	d1af      	bne.n	1f520 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f5c0:	f1b8 0f00 	cmp.w	r8, #0
   1f5c4:	d11d      	bne.n	1f602 <nrfx_gpiote_irq_handler+0x14a>
   1f5c6:	f04f 0801 	mov.w	r8, #1
   1f5ca:	e7a3      	b.n	1f514 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f5cc:	2b02      	cmp	r3, #2
   1f5ce:	d10c      	bne.n	1f5ea <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f5d0:	2103      	movs	r1, #3
   1f5d2:	4620      	mov	r0, r4
   1f5d4:	f009 fdf9 	bl	291ca <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f5d8:	f005 0305 	and.w	r3, r5, #5
   1f5dc:	2b01      	cmp	r3, #1
   1f5de:	d1e2      	bne.n	1f5a6 <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
   1f5e0:	4639      	mov	r1, r7
   1f5e2:	4620      	mov	r0, r4
   1f5e4:	f7ff fc88 	bl	1eef8 <call_handler>
   1f5e8:	e7dd      	b.n	1f5a6 <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f5ea:	2102      	movs	r1, #2
   1f5ec:	4620      	mov	r0, r4
   1f5ee:	9301      	str	r3, [sp, #4]
   1f5f0:	f009 fdeb 	bl	291ca <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f5f4:	2d03      	cmp	r5, #3
   1f5f6:	d0f3      	beq.n	1f5e0 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f5f8:	9b01      	ldr	r3, [sp, #4]
   1f5fa:	2b03      	cmp	r3, #3
   1f5fc:	d1d3      	bne.n	1f5a6 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f5fe:	2d02      	cmp	r5, #2
   1f600:	e7ed      	b.n	1f5de <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
   1f602:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f606:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   1f60a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1f60e:	4919      	ldr	r1, [pc, #100]	; (1f674 <nrfx_gpiote_irq_handler+0x1bc>)
   1f610:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1f614:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f616:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1f61a:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1f61e:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1f620:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1f622:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   1f626:	f47f af71 	bne.w	1f50c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1f62a:	2401      	movs	r4, #1
    while (mask)
   1f62c:	b916      	cbnz	r6, 1f634 <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1f62e:	b007      	add	sp, #28
   1f630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1f634:	fa96 f3a6 	rbit	r3, r6
   1f638:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1f63c:	fa04 f203 	lsl.w	r2, r4, r3
   1f640:	009b      	lsls	r3, r3, #2
   1f642:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f646:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1f64a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f64e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1f652:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f656:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1f65a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1f65e:	f7ff fc4b 	bl	1eef8 <call_handler>
   1f662:	e7e3      	b.n	1f62c <nrfx_gpiote_irq_handler+0x174>
   1f664:	40006100 	.word	0x40006100
   1f668:	40006000 	.word	0x40006000
   1f66c:	40006120 	.word	0x40006120
   1f670:	20000688 	.word	0x20000688
   1f674:	50000300 	.word	0x50000300

0001f678 <nvmc_word_write>:
   1f678:	4a04      	ldr	r2, [pc, #16]	; (1f68c <nvmc_word_write+0x14>)
   1f67a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f67e:	07db      	lsls	r3, r3, #31
   1f680:	d5fb      	bpl.n	1f67a <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1f682:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1f684:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1f688:	4770      	bx	lr
   1f68a:	bf00      	nop
   1f68c:	4001e000 	.word	0x4001e000

0001f690 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1f690:	b508      	push	{r3, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1f692:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f696:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   1f698:	6959      	ldr	r1, [r3, #20]
    return flash_page_size_get() * flash_page_count_get();
   1f69a:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1f69c:	4290      	cmp	r0, r2
   1f69e:	d207      	bcs.n	1f6b0 <nrfx_nvmc_page_erase+0x20>
    return p_reg->CODEPAGESIZE;
   1f6a0:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1f6a2:	fbb0 f3f2 	udiv	r3, r0, r2
   1f6a6:	fb02 0313 	mls	r3, r2, r3, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1f6aa:	b163      	cbz	r3, 1f6c6 <nrfx_nvmc_page_erase+0x36>
    {
        return NRFX_ERROR_INVALID_ADDR;
   1f6ac:	480d      	ldr	r0, [pc, #52]	; (1f6e4 <nrfx_nvmc_page_erase+0x54>)
   1f6ae:	e018      	b.n	1f6e2 <nrfx_nvmc_page_erase+0x52>
    NRFX_ASSERT(is_valid_address(addr, false));
   1f6b0:	490d      	ldr	r1, [pc, #52]	; (1f6e8 <nrfx_nvmc_page_erase+0x58>)
   1f6b2:	480e      	ldr	r0, [pc, #56]	; (1f6ec <nrfx_nvmc_page_erase+0x5c>)
   1f6b4:	f44f 7283 	mov.w	r2, #262	; 0x106
   1f6b8:	f006 fc42 	bl	25f40 <assert_print>
   1f6bc:	480a      	ldr	r0, [pc, #40]	; (1f6e8 <nrfx_nvmc_page_erase+0x58>)
   1f6be:	f44f 7183 	mov.w	r1, #262	; 0x106
   1f6c2:	f006 fc36 	bl	25f32 <assert_post_action>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1f6c6:	4b0a      	ldr	r3, [pc, #40]	; (1f6f0 <nrfx_nvmc_page_erase+0x60>)
   1f6c8:	2202      	movs	r2, #2
   1f6ca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1f6ce:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f6d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f6d6:	07d2      	lsls	r2, r2, #31
   1f6d8:	d5fb      	bpl.n	1f6d2 <nrfx_nvmc_page_erase+0x42>
    p_reg->CONFIG = (uint32_t)mode;
   1f6da:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1f6dc:	4805      	ldr	r0, [pc, #20]	; (1f6f4 <nrfx_nvmc_page_erase+0x64>)
   1f6de:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1f6e2:	bd08      	pop	{r3, pc}
   1f6e4:	0bad000a 	.word	0x0bad000a
   1f6e8:	0002d50a 	.word	0x0002d50a
   1f6ec:	0002a7df 	.word	0x0002a7df
   1f6f0:	4001e000 	.word	0x4001e000
   1f6f4:	0bad0000 	.word	0x0bad0000

0001f6f8 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1f6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f6fa:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   1f6fc:	2101      	movs	r1, #1
{
   1f6fe:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   1f700:	f009 fd72 	bl	291e8 <is_valid_address>
   1f704:	b950      	cbnz	r0, 1f71c <nrfx_nvmc_word_write+0x24>
   1f706:	4911      	ldr	r1, [pc, #68]	; (1f74c <nrfx_nvmc_word_write+0x54>)
   1f708:	4811      	ldr	r0, [pc, #68]	; (1f750 <nrfx_nvmc_word_write+0x58>)
   1f70a:	f44f 72ca 	mov.w	r2, #404	; 0x194
   1f70e:	f006 fc17 	bl	25f40 <assert_print>
   1f712:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1f716:	480d      	ldr	r0, [pc, #52]	; (1f74c <nrfx_nvmc_word_write+0x54>)
   1f718:	f006 fc0b 	bl	25f32 <assert_post_action>
   1f71c:	f014 0703 	ands.w	r7, r4, #3
   1f720:	d008      	beq.n	1f734 <nrfx_nvmc_word_write+0x3c>
   1f722:	490a      	ldr	r1, [pc, #40]	; (1f74c <nrfx_nvmc_word_write+0x54>)
   1f724:	480a      	ldr	r0, [pc, #40]	; (1f750 <nrfx_nvmc_word_write+0x58>)
   1f726:	f240 1295 	movw	r2, #405	; 0x195
   1f72a:	f006 fc09 	bl	25f40 <assert_print>
   1f72e:	f240 1195 	movw	r1, #405	; 0x195
   1f732:	e7f0      	b.n	1f716 <nrfx_nvmc_word_write+0x1e>
   1f734:	4e07      	ldr	r6, [pc, #28]	; (1f754 <nrfx_nvmc_word_write+0x5c>)
   1f736:	2301      	movs	r3, #1
   1f738:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1f73c:	4629      	mov	r1, r5
   1f73e:	4620      	mov	r0, r4
   1f740:	f7ff ff9a 	bl	1f678 <nvmc_word_write>
   1f744:	f8c6 7504 	str.w	r7, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1f748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f74a:	bf00      	nop
   1f74c:	0002d50a 	.word	0x0002d50a
   1f750:	0002a7df 	.word	0x0002a7df
   1f754:	4001e000 	.word	0x4001e000

0001f758 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1f758:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1f75a:	4801      	ldr	r0, [pc, #4]	; (1f760 <nrfx_ppi_channel_alloc+0x8>)
   1f75c:	f7ff bb6c 	b.w	1ee38 <nrfx_flag32_alloc>
   1f760:	20000704 	.word	0x20000704

0001f764 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1f764:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f766:	4c14      	ldr	r4, [pc, #80]	; (1f7b8 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1f768:	4a14      	ldr	r2, [pc, #80]	; (1f7bc <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1f76a:	4915      	ldr	r1, [pc, #84]	; (1f7c0 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f76c:	2303      	movs	r3, #3
   1f76e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1f770:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f772:	4b14      	ldr	r3, [pc, #80]	; (1f7c4 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   1f774:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f776:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1f778:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1f77c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1f77e:	2300      	movs	r3, #0
   1f780:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1f782:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f784:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1f786:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1f788:	4a0f      	ldr	r2, [pc, #60]	; (1f7c8 <_DoInit+0x64>)
   1f78a:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1f78c:	2210      	movs	r2, #16
   1f78e:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   1f790:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   1f792:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1f794:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f796:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1f798:	f007 fa0f 	bl	26bba <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1f79c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1f7a0:	490a      	ldr	r1, [pc, #40]	; (1f7cc <_DoInit+0x68>)
   1f7a2:	4620      	mov	r0, r4
   1f7a4:	f007 fa09 	bl	26bba <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1f7a8:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1f7ac:	2320      	movs	r3, #32
   1f7ae:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1f7b0:	f3bf 8f5f 	dmb	sy
}
   1f7b4:	bd10      	pop	{r4, pc}
   1f7b6:	bf00      	nop
   1f7b8:	200029bc 	.word	0x200029bc
   1f7bc:	0002d546 	.word	0x0002d546
   1f7c0:	0002d54f 	.word	0x0002d54f
   1f7c4:	20003ed8 	.word	0x20003ed8
   1f7c8:	20003ec8 	.word	0x20003ec8
   1f7cc:	0002d553 	.word	0x0002d553

0001f7d0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f7d0:	4b01      	ldr	r3, [pc, #4]	; (1f7d8 <z_impl_z_errno+0x8>)
   1f7d2:	6898      	ldr	r0, [r3, #8]
}
   1f7d4:	3064      	adds	r0, #100	; 0x64
   1f7d6:	4770      	bx	lr
   1f7d8:	20002a64 	.word	0x20002a64

0001f7dc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f7dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f7de:	4604      	mov	r4, r0
   1f7e0:	460e      	mov	r6, r1
	__asm__ volatile(
   1f7e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f7e6:	f3ef 8711 	mrs	r7, BASEPRI
   1f7ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1f7ee:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1f7f2:	f002 fa89 	bl	21d08 <z_impl_z_current_get>
   1f7f6:	2c04      	cmp	r4, #4
   1f7f8:	bf96      	itet	ls
   1f7fa:	4b1e      	ldrls	r3, [pc, #120]	; (1f874 <z_fatal_error+0x98>)
   1f7fc:	4b1e      	ldrhi	r3, [pc, #120]	; (1f878 <z_fatal_error+0x9c>)
   1f7fe:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f802:	2200      	movs	r2, #0
   1f804:	4605      	mov	r5, r0
   1f806:	9200      	str	r2, [sp, #0]
   1f808:	481c      	ldr	r0, [pc, #112]	; (1f87c <z_fatal_error+0xa0>)
   1f80a:	4622      	mov	r2, r4
   1f80c:	2145      	movs	r1, #69	; 0x45
   1f80e:	f006 fba5 	bl	25f5c <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f812:	b13e      	cbz	r6, 1f824 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f814:	69f3      	ldr	r3, [r6, #28]
   1f816:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f81a:	b11b      	cbz	r3, 1f824 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   1f81c:	4818      	ldr	r0, [pc, #96]	; (1f880 <z_fatal_error+0xa4>)
   1f81e:	2145      	movs	r1, #69	; 0x45
   1f820:	f006 fb9c 	bl	25f5c <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f824:	b135      	cbz	r5, 1f834 <z_fatal_error+0x58>
   1f826:	4628      	mov	r0, r5
   1f828:	f009 fd4d 	bl	292c6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1f82c:	4603      	mov	r3, r0
   1f82e:	b108      	cbz	r0, 1f834 <z_fatal_error+0x58>
   1f830:	7802      	ldrb	r2, [r0, #0]
   1f832:	b902      	cbnz	r2, 1f836 <z_fatal_error+0x5a>
		thread_name = "unknown";
   1f834:	4b13      	ldr	r3, [pc, #76]	; (1f884 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f836:	4814      	ldr	r0, [pc, #80]	; (1f888 <z_fatal_error+0xac>)
   1f838:	462a      	mov	r2, r5
   1f83a:	2145      	movs	r1, #69	; 0x45
   1f83c:	f006 fb8e 	bl	25f5c <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1f840:	4631      	mov	r1, r6
   1f842:	4620      	mov	r0, r4
   1f844:	f7fe f8c8 	bl	1d9d8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1f848:	2c04      	cmp	r4, #4
   1f84a:	d108      	bne.n	1f85e <z_fatal_error+0x82>
   1f84c:	490f      	ldr	r1, [pc, #60]	; (1f88c <z_fatal_error+0xb0>)
   1f84e:	4810      	ldr	r0, [pc, #64]	; (1f890 <z_fatal_error+0xb4>)
   1f850:	2293      	movs	r2, #147	; 0x93
   1f852:	f006 fb75 	bl	25f40 <assert_print>
   1f856:	480d      	ldr	r0, [pc, #52]	; (1f88c <z_fatal_error+0xb0>)
   1f858:	2193      	movs	r1, #147	; 0x93
   1f85a:	f006 fb6a 	bl	25f32 <assert_post_action>
	__asm__ volatile(
   1f85e:	f387 8811 	msr	BASEPRI, r7
   1f862:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f866:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1f868:	b003      	add	sp, #12
   1f86a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1f86e:	f7f4 b823 	b.w	138b8 <z_impl_k_thread_abort>
   1f872:	bf00      	nop
   1f874:	0002a21c 	.word	0x0002a21c
   1f878:	0002d55a 	.word	0x0002d55a
   1f87c:	0002d570 	.word	0x0002d570
   1f880:	0002d59d 	.word	0x0002d59d
   1f884:	0002d568 	.word	0x0002d568
   1f888:	0002d5c3 	.word	0x0002d5c3
   1f88c:	0002d5e0 	.word	0x0002d5e0
   1f890:	0002a7df 	.word	0x0002a7df

0001f894 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f894:	4b0f      	ldr	r3, [pc, #60]	; (1f8d4 <z_sys_init_run_level+0x40>)
{
   1f896:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f898:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1f89c:	3001      	adds	r0, #1
   1f89e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f8a2:	42a6      	cmp	r6, r4
   1f8a4:	d800      	bhi.n	1f8a8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1f8a6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1f8a8:	e9d4 3500 	ldrd	r3, r5, [r4]
   1f8ac:	4628      	mov	r0, r5
   1f8ae:	4798      	blx	r3
		if (dev != NULL) {
   1f8b0:	b16d      	cbz	r5, 1f8ce <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1f8b2:	b138      	cbz	r0, 1f8c4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1f8b4:	2800      	cmp	r0, #0
   1f8b6:	bfb8      	it	lt
   1f8b8:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1f8ba:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1f8bc:	28ff      	cmp	r0, #255	; 0xff
   1f8be:	bfa8      	it	ge
   1f8c0:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1f8c2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1f8c4:	68ea      	ldr	r2, [r5, #12]
   1f8c6:	7853      	ldrb	r3, [r2, #1]
   1f8c8:	f043 0301 	orr.w	r3, r3, #1
   1f8cc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f8ce:	3408      	adds	r4, #8
   1f8d0:	e7e7      	b.n	1f8a2 <z_sys_init_run_level+0xe>
   1f8d2:	bf00      	nop
   1f8d4:	0002a230 	.word	0x0002a230

0001f8d8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f8d8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1f8da:	4b0a      	ldr	r3, [pc, #40]	; (1f904 <bg_thread_main+0x2c>)
   1f8dc:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f8de:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1f8e0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f8e2:	f7ff ffd7 	bl	1f894 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1f8e6:	f003 f851 	bl	2298c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1f8ea:	2004      	movs	r0, #4
   1f8ec:	f7ff ffd2 	bl	1f894 <z_sys_init_run_level>

	z_init_static_threads();
   1f8f0:	f000 faf6 	bl	1fee0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1f8f4:	f7f1 fa58 	bl	10da8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f8f8:	4a03      	ldr	r2, [pc, #12]	; (1f908 <bg_thread_main+0x30>)
   1f8fa:	7b13      	ldrb	r3, [r2, #12]
   1f8fc:	f023 0301 	bic.w	r3, r3, #1
   1f900:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f902:	bd08      	pop	{r3, pc}
   1f904:	200042d8 	.word	0x200042d8
   1f908:	20001ee8 	.word	0x20001ee8

0001f90c <z_bss_zero>:
{
   1f90c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1f90e:	4803      	ldr	r0, [pc, #12]	; (1f91c <z_bss_zero+0x10>)
   1f910:	4a03      	ldr	r2, [pc, #12]	; (1f920 <z_bss_zero+0x14>)
   1f912:	2100      	movs	r1, #0
   1f914:	1a12      	subs	r2, r2, r0
   1f916:	f009 fc9c 	bl	29252 <z_early_memset>
}
   1f91a:	bd08      	pop	{r3, pc}
   1f91c:	20000ad0 	.word	0x20000ad0
   1f920:	200042dc 	.word	0x200042dc

0001f924 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1f924:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1f926:	2300      	movs	r3, #0
{
   1f928:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1f92a:	2201      	movs	r2, #1
   1f92c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1f930:	4e13      	ldr	r6, [pc, #76]	; (1f980 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f932:	4d14      	ldr	r5, [pc, #80]	; (1f984 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1f934:	9301      	str	r3, [sp, #4]
   1f936:	220f      	movs	r2, #15
   1f938:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1f93c:	4912      	ldr	r1, [pc, #72]	; (1f988 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f93e:	2318      	movs	r3, #24
   1f940:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1f944:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1f948:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1f94a:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1f94e:	fb00 1104 	mla	r1, r0, r4, r1
   1f952:	4b0e      	ldr	r3, [pc, #56]	; (1f98c <z_init_cpu+0x68>)
   1f954:	9500      	str	r5, [sp, #0]
   1f956:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f95a:	4630      	mov	r0, r6
   1f95c:	f000 fa36 	bl	1fdcc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f960:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1f962:	4a0b      	ldr	r2, [pc, #44]	; (1f990 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1f964:	60ee      	str	r6, [r5, #12]
   1f966:	f023 0304 	bic.w	r3, r3, #4
   1f96a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1f96c:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1f970:	fb04 3303 	mla	r3, r4, r3, r3
   1f974:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1f976:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   1f978:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1f97a:	b006      	add	sp, #24
   1f97c:	bd70      	pop	{r4, r5, r6, pc}
   1f97e:	bf00      	nop
   1f980:	20001e68 	.word	0x20001e68
   1f984:	20002a64 	.word	0x20002a64
   1f988:	20006840 	.word	0x20006840
   1f98c:	0002001d 	.word	0x0002001d
   1f990:	20006000 	.word	0x20006000

0001f994 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1f994:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f996:	2000      	movs	r0, #0
{
   1f998:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f99a:	f7ff ff7b 	bl	1f894 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1f99e:	4b2d      	ldr	r3, [pc, #180]	; (1fa54 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f9a0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f9a4:	4d2c      	ldr	r5, [pc, #176]	; (1fa58 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1f9a6:	4e2d      	ldr	r6, [pc, #180]	; (1fa5c <z_cstart+0xc8>)
   1f9a8:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f9aa:	4f2d      	ldr	r7, [pc, #180]	; (1fa60 <z_cstart+0xcc>)
   1f9ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1f9b0:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f9b2:	23e0      	movs	r3, #224	; 0xe0
   1f9b4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f9b8:	2400      	movs	r4, #0
   1f9ba:	2320      	movs	r3, #32
   1f9bc:	77eb      	strb	r3, [r5, #31]
   1f9be:	762c      	strb	r4, [r5, #24]
   1f9c0:	766c      	strb	r4, [r5, #25]
   1f9c2:	76ac      	strb	r4, [r5, #26]
   1f9c4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f9c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f9ca:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f9ce:	626b      	str	r3, [r5, #36]	; 0x24
   1f9d0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f9d4:	f7f3 fee4 	bl	137a0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f9d8:	f7f3 fb26 	bl	13028 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f9dc:	f04f 33ff 	mov.w	r3, #4294967295
   1f9e0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f9e2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1f9e4:	f7f4 f844 	bl	13a70 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1f9e8:	f7f3 ff7c 	bl	138e4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f9ec:	f240 1301 	movw	r3, #257	; 0x101
   1f9f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1f9f4:	ab06      	add	r3, sp, #24
   1f9f6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1f9f8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1f9fc:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1f9fe:	f009 fc1c 	bl	2923a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1fa02:	2001      	movs	r0, #1
   1fa04:	f7ff ff46 	bl	1f894 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1fa08:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1fa0a:	4d16      	ldr	r5, [pc, #88]	; (1fa64 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1fa0c:	f7ff ff42 	bl	1f894 <z_sys_init_run_level>
	z_sched_init();
   1fa10:	f002 f844 	bl	21a9c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fa14:	4b14      	ldr	r3, [pc, #80]	; (1fa68 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   1fa16:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fa18:	9305      	str	r3, [sp, #20]
   1fa1a:	2301      	movs	r3, #1
   1fa1c:	4913      	ldr	r1, [pc, #76]	; (1fa6c <z_cstart+0xd8>)
   1fa1e:	9400      	str	r4, [sp, #0]
   1fa20:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1fa24:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1fa28:	463b      	mov	r3, r7
   1fa2a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1fa2e:	4628      	mov	r0, r5
   1fa30:	f000 f9cc 	bl	1fdcc <z_setup_new_thread>
   1fa34:	7b6a      	ldrb	r2, [r5, #13]
   1fa36:	4606      	mov	r6, r0
   1fa38:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1fa3c:	4628      	mov	r0, r5
   1fa3e:	736a      	strb	r2, [r5, #13]
   1fa40:	f001 fb9e 	bl	21180 <z_ready_thread>
	z_init_cpu(0);
   1fa44:	4620      	mov	r0, r4
   1fa46:	f7ff ff6d 	bl	1f924 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1fa4a:	463a      	mov	r2, r7
   1fa4c:	4631      	mov	r1, r6
   1fa4e:	4628      	mov	r0, r5
   1fa50:	f7f3 fc44 	bl	132dc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1fa54:	20006840 	.word	0x20006840
   1fa58:	e000ed00 	.word	0xe000ed00
   1fa5c:	20002a64 	.word	0x20002a64
   1fa60:	0001f8d9 	.word	0x0001f8d9
   1fa64:	20001ee8 	.word	0x20001ee8
   1fa68:	0002d64c 	.word	0x0002d64c
   1fa6c:	200069c0 	.word	0x200069c0

0001fa70 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1fa70:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1fa72:	4c0b      	ldr	r4, [pc, #44]	; (1faa0 <statics_init+0x30>)
   1fa74:	4d0b      	ldr	r5, [pc, #44]	; (1faa4 <statics_init+0x34>)
   1fa76:	42ac      	cmp	r4, r5
   1fa78:	d90f      	bls.n	1fa9a <statics_init+0x2a>
   1fa7a:	490b      	ldr	r1, [pc, #44]	; (1faa8 <statics_init+0x38>)
   1fa7c:	480b      	ldr	r0, [pc, #44]	; (1faac <statics_init+0x3c>)
   1fa7e:	2218      	movs	r2, #24
   1fa80:	f006 fa5e 	bl	25f40 <assert_print>
   1fa84:	4808      	ldr	r0, [pc, #32]	; (1faa8 <statics_init+0x38>)
   1fa86:	2118      	movs	r1, #24
   1fa88:	f006 fa53 	bl	25f32 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1fa8c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1fa90:	4620      	mov	r0, r4
   1fa92:	f009 fbe2 	bl	2925a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1fa96:	3418      	adds	r4, #24
   1fa98:	e7ed      	b.n	1fa76 <statics_init+0x6>
   1fa9a:	d3f7      	bcc.n	1fa8c <statics_init+0x1c>
		}
	}
	return 0;
}
   1fa9c:	2000      	movs	r0, #0
   1fa9e:	bd38      	pop	{r3, r4, r5, pc}
   1faa0:	200008cc 	.word	0x200008cc
   1faa4:	200008cc 	.word	0x200008cc
   1faa8:	0002d654 	.word	0x0002d654
   1faac:	0002a7df 	.word	0x0002a7df

0001fab0 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1fab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fab4:	b085      	sub	sp, #20
   1fab6:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   1faba:	4680      	mov	r8, r0
   1fabc:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fabe:	4648      	mov	r0, r9
   1fac0:	4659      	mov	r1, fp
{
   1fac2:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fac4:	f009 fcf4 	bl	294b0 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1fac8:	f1bb 3fff 	cmp.w	fp, #4294967295
   1facc:	bf08      	it	eq
   1face:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fad2:	4605      	mov	r5, r0
   1fad4:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1fad6:	bf04      	itt	eq
   1fad8:	f04f 35ff 	moveq.w	r5, #4294967295
   1fadc:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fae0:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   1fae4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fae8:	f3ef 8411 	mrs	r4, BASEPRI
   1faec:	f383 8812 	msr	BASEPRI_MAX, r3
   1faf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1faf4:	4630      	mov	r0, r6
   1faf6:	f000 fa6b 	bl	1ffd0 <z_spin_lock_valid>
   1fafa:	b938      	cbnz	r0, 1fb0c <k_heap_aligned_alloc+0x5c>
   1fafc:	492c      	ldr	r1, [pc, #176]	; (1fbb0 <k_heap_aligned_alloc+0x100>)
   1fafe:	482d      	ldr	r0, [pc, #180]	; (1fbb4 <k_heap_aligned_alloc+0x104>)
   1fb00:	2294      	movs	r2, #148	; 0x94
   1fb02:	f006 fa1d 	bl	25f40 <assert_print>
   1fb06:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fb08:	4829      	ldr	r0, [pc, #164]	; (1fbb0 <k_heap_aligned_alloc+0x100>)
   1fb0a:	e027      	b.n	1fb5c <k_heap_aligned_alloc+0xac>
	z_spin_lock_set_owner(l);
   1fb0c:	4630      	mov	r0, r6
   1fb0e:	f000 fa7d 	bl	2000c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fb12:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1fb16:	b113      	cbz	r3, 1fb1e <k_heap_aligned_alloc+0x6e>
   1fb18:	ea5b 0909 	orrs.w	r9, fp, r9
   1fb1c:	d117      	bne.n	1fb4e <k_heap_aligned_alloc+0x9e>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fb1e:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1fb22:	9903      	ldr	r1, [sp, #12]
   1fb24:	4652      	mov	r2, sl
   1fb26:	4640      	mov	r0, r8
   1fb28:	f7f1 fa3c 	bl	10fa4 <sys_heap_aligned_alloc>
   1fb2c:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   1fb2e:	f002 fc3f 	bl	223b0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1fb32:	f1b9 0f00 	cmp.w	r9, #0
   1fb36:	d013      	beq.n	1fb60 <k_heap_aligned_alloc+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fb38:	4630      	mov	r0, r6
   1fb3a:	f000 fa57 	bl	1ffec <z_spin_unlock_valid>
   1fb3e:	bb70      	cbnz	r0, 1fb9e <k_heap_aligned_alloc+0xee>
   1fb40:	491b      	ldr	r1, [pc, #108]	; (1fbb0 <k_heap_aligned_alloc+0x100>)
   1fb42:	481c      	ldr	r0, [pc, #112]	; (1fbb4 <k_heap_aligned_alloc+0x104>)
   1fb44:	22c2      	movs	r2, #194	; 0xc2
   1fb46:	f006 f9fb 	bl	25f40 <assert_print>
   1fb4a:	21c2      	movs	r1, #194	; 0xc2
   1fb4c:	e7dc      	b.n	1fb08 <k_heap_aligned_alloc+0x58>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1fb4e:	491a      	ldr	r1, [pc, #104]	; (1fbb8 <k_heap_aligned_alloc+0x108>)
   1fb50:	4818      	ldr	r0, [pc, #96]	; (1fbb4 <k_heap_aligned_alloc+0x104>)
   1fb52:	224c      	movs	r2, #76	; 0x4c
   1fb54:	f006 f9f4 	bl	25f40 <assert_print>
   1fb58:	4817      	ldr	r0, [pc, #92]	; (1fbb8 <k_heap_aligned_alloc+0x108>)
   1fb5a:	214c      	movs	r1, #76	; 0x4c
   1fb5c:	f006 f9e9 	bl	25f32 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   1fb60:	1a28      	subs	r0, r5, r0
   1fb62:	eb67 0101 	sbc.w	r1, r7, r1
   1fb66:	2801      	cmp	r0, #1
   1fb68:	f171 0300 	sbcs.w	r3, r1, #0
   1fb6c:	dbe4      	blt.n	1fb38 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fb6e:	e9cd 0100 	strd	r0, r1, [sp]
   1fb72:	465a      	mov	r2, fp
   1fb74:	4621      	mov	r1, r4
   1fb76:	4630      	mov	r0, r6
   1fb78:	f001 fd8a 	bl	21690 <z_pend_curr>
   1fb7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb80:	f3ef 8411 	mrs	r4, BASEPRI
   1fb84:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fb8c:	4630      	mov	r0, r6
   1fb8e:	f000 fa1f 	bl	1ffd0 <z_spin_lock_valid>
   1fb92:	2800      	cmp	r0, #0
   1fb94:	d0b2      	beq.n	1fafc <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   1fb96:	4630      	mov	r0, r6
   1fb98:	f000 fa38 	bl	2000c <z_spin_lock_set_owner>
	return k;
   1fb9c:	e7c1      	b.n	1fb22 <k_heap_aligned_alloc+0x72>
	__asm__ volatile(
   1fb9e:	f384 8811 	msr	BASEPRI, r4
   1fba2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1fba6:	4648      	mov	r0, r9
   1fba8:	b005      	add	sp, #20
   1fbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbae:	bf00      	nop
   1fbb0:	0002a819 	.word	0x0002a819
   1fbb4:	0002a7df 	.word	0x0002a7df
   1fbb8:	0002d654 	.word	0x0002d654

0001fbbc <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1fbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fbbe:	4604      	mov	r4, r0
   1fbc0:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fbc2:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   1fbc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fbca:	f3ef 8711 	mrs	r7, BASEPRI
   1fbce:	f383 8812 	msr	BASEPRI_MAX, r3
   1fbd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fbd6:	4628      	mov	r0, r5
   1fbd8:	f000 f9fa 	bl	1ffd0 <z_spin_lock_valid>
   1fbdc:	b940      	cbnz	r0, 1fbf0 <k_heap_free+0x34>
   1fbde:	4915      	ldr	r1, [pc, #84]	; (1fc34 <k_heap_free+0x78>)
   1fbe0:	4815      	ldr	r0, [pc, #84]	; (1fc38 <k_heap_free+0x7c>)
   1fbe2:	2294      	movs	r2, #148	; 0x94
   1fbe4:	f006 f9ac 	bl	25f40 <assert_print>
   1fbe8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fbea:	4812      	ldr	r0, [pc, #72]	; (1fc34 <k_heap_free+0x78>)
   1fbec:	f006 f9a1 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fbf0:	4628      	mov	r0, r5
   1fbf2:	f000 fa0b 	bl	2000c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1fbf6:	4620      	mov	r0, r4
   1fbf8:	4631      	mov	r1, r6
   1fbfa:	f7f1 f9a1 	bl	10f40 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1fbfe:	f104 000c 	add.w	r0, r4, #12
   1fc02:	f009 fc3d 	bl	29480 <z_unpend_all>
   1fc06:	b128      	cbz	r0, 1fc14 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   1fc08:	4639      	mov	r1, r7
   1fc0a:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1fc0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1fc10:	f001 baea 	b.w	211e8 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fc14:	4628      	mov	r0, r5
   1fc16:	f000 f9e9 	bl	1ffec <z_spin_unlock_valid>
   1fc1a:	b930      	cbnz	r0, 1fc2a <k_heap_free+0x6e>
   1fc1c:	4905      	ldr	r1, [pc, #20]	; (1fc34 <k_heap_free+0x78>)
   1fc1e:	4806      	ldr	r0, [pc, #24]	; (1fc38 <k_heap_free+0x7c>)
   1fc20:	22c2      	movs	r2, #194	; 0xc2
   1fc22:	f006 f98d 	bl	25f40 <assert_print>
   1fc26:	21c2      	movs	r1, #194	; 0xc2
   1fc28:	e7df      	b.n	1fbea <k_heap_free+0x2e>
	__asm__ volatile(
   1fc2a:	f387 8811 	msr	BASEPRI, r7
   1fc2e:	f3bf 8f6f 	isb	sy
}
   1fc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fc34:	0002a819 	.word	0x0002a819
   1fc38:	0002a7df 	.word	0x0002a7df

0001fc3c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1fc3c:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fc3e:	4c0b      	ldr	r4, [pc, #44]	; (1fc6c <init_mem_slab_module+0x30>)
   1fc40:	4d0b      	ldr	r5, [pc, #44]	; (1fc70 <init_mem_slab_module+0x34>)
	int rc = 0;
   1fc42:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fc44:	42ac      	cmp	r4, r5
   1fc46:	d90f      	bls.n	1fc68 <init_mem_slab_module+0x2c>
   1fc48:	490a      	ldr	r1, [pc, #40]	; (1fc74 <init_mem_slab_module+0x38>)
   1fc4a:	480b      	ldr	r0, [pc, #44]	; (1fc78 <init_mem_slab_module+0x3c>)
   1fc4c:	223d      	movs	r2, #61	; 0x3d
   1fc4e:	f006 f977 	bl	25f40 <assert_print>
   1fc52:	4808      	ldr	r0, [pc, #32]	; (1fc74 <init_mem_slab_module+0x38>)
   1fc54:	213d      	movs	r1, #61	; 0x3d
   1fc56:	f006 f96c 	bl	25f32 <assert_post_action>
		rc = create_free_list(slab);
   1fc5a:	4620      	mov	r0, r4
   1fc5c:	f009 fb05 	bl	2926a <create_free_list>
		if (rc < 0) {
   1fc60:	2800      	cmp	r0, #0
   1fc62:	db02      	blt.n	1fc6a <init_mem_slab_module+0x2e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fc64:	3420      	adds	r4, #32
   1fc66:	e7ed      	b.n	1fc44 <init_mem_slab_module+0x8>
   1fc68:	d3f7      	bcc.n	1fc5a <init_mem_slab_module+0x1e>
		z_object_init(slab);
	}

out:
	return rc;
}
   1fc6a:	bd38      	pop	{r3, r4, r5, pc}
   1fc6c:	2000086c 	.word	0x2000086c
   1fc70:	200008cc 	.word	0x200008cc
   1fc74:	0002d676 	.word	0x0002d676
   1fc78:	0002a7df 	.word	0x0002a7df

0001fc7c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1fc7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1fc80:	4604      	mov	r4, r0
   1fc82:	460d      	mov	r5, r1
   1fc84:	4690      	mov	r8, r2
   1fc86:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1fc88:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1fc8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fc90:	f3ef 8911 	mrs	r9, BASEPRI
   1fc94:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fc9c:	4630      	mov	r0, r6
   1fc9e:	f000 f997 	bl	1ffd0 <z_spin_lock_valid>
   1fca2:	b940      	cbnz	r0, 1fcb6 <k_mem_slab_alloc+0x3a>
   1fca4:	491e      	ldr	r1, [pc, #120]	; (1fd20 <k_mem_slab_alloc+0xa4>)
   1fca6:	481f      	ldr	r0, [pc, #124]	; (1fd24 <k_mem_slab_alloc+0xa8>)
   1fca8:	2294      	movs	r2, #148	; 0x94
   1fcaa:	f006 f949 	bl	25f40 <assert_print>
   1fcae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fcb0:	481b      	ldr	r0, [pc, #108]	; (1fd20 <k_mem_slab_alloc+0xa4>)
   1fcb2:	f006 f93e 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fcb6:	4630      	mov	r0, r6
   1fcb8:	f000 f9a8 	bl	2000c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1fcbc:	69a3      	ldr	r3, [r4, #24]
   1fcbe:	b18b      	cbz	r3, 1fce4 <k_mem_slab_alloc+0x68>
		/* take a free block */
		*mem = slab->free_list;
   1fcc0:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1fcc2:	681b      	ldr	r3, [r3, #0]
   1fcc4:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1fcc6:	69e3      	ldr	r3, [r4, #28]
   1fcc8:	3301      	adds	r3, #1
   1fcca:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1fccc:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fcce:	4630      	mov	r0, r6
   1fcd0:	f000 f98c 	bl	1ffec <z_spin_unlock_valid>
   1fcd4:	b9f0      	cbnz	r0, 1fd14 <k_mem_slab_alloc+0x98>
   1fcd6:	4912      	ldr	r1, [pc, #72]	; (1fd20 <k_mem_slab_alloc+0xa4>)
   1fcd8:	4812      	ldr	r0, [pc, #72]	; (1fd24 <k_mem_slab_alloc+0xa8>)
   1fcda:	22c2      	movs	r2, #194	; 0xc2
   1fcdc:	f006 f930 	bl	25f40 <assert_print>
   1fce0:	21c2      	movs	r1, #194	; 0xc2
   1fce2:	e7e5      	b.n	1fcb0 <k_mem_slab_alloc+0x34>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1fce4:	ea58 0207 	orrs.w	r2, r8, r7
   1fce8:	d103      	bne.n	1fcf2 <k_mem_slab_alloc+0x76>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   1fcea:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   1fcec:	f06f 040b 	mvn.w	r4, #11
   1fcf0:	e7ed      	b.n	1fcce <k_mem_slab_alloc+0x52>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1fcf2:	4622      	mov	r2, r4
   1fcf4:	e9cd 8700 	strd	r8, r7, [sp]
   1fcf8:	4649      	mov	r1, r9
   1fcfa:	4630      	mov	r0, r6
   1fcfc:	f001 fcc8 	bl	21690 <z_pend_curr>
		if (result == 0) {
   1fd00:	4604      	mov	r4, r0
   1fd02:	b918      	cbnz	r0, 1fd0c <k_mem_slab_alloc+0x90>
			*mem = _current->base.swap_data;
   1fd04:	4b08      	ldr	r3, [pc, #32]	; (1fd28 <k_mem_slab_alloc+0xac>)
   1fd06:	689b      	ldr	r3, [r3, #8]
   1fd08:	695b      	ldr	r3, [r3, #20]
   1fd0a:	602b      	str	r3, [r5, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1fd0c:	4620      	mov	r0, r4
   1fd0e:	b003      	add	sp, #12
   1fd10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   1fd14:	f389 8811 	msr	BASEPRI, r9
   1fd18:	f3bf 8f6f 	isb	sy
	return result;
   1fd1c:	e7f6      	b.n	1fd0c <k_mem_slab_alloc+0x90>
   1fd1e:	bf00      	nop
   1fd20:	0002a819 	.word	0x0002a819
   1fd24:	0002a7df 	.word	0x0002a7df
   1fd28:	20002a64 	.word	0x20002a64

0001fd2c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1fd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fd30:	4604      	mov	r4, r0
   1fd32:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1fd34:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1fd38:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd3c:	f3ef 8711 	mrs	r7, BASEPRI
   1fd40:	f383 8812 	msr	BASEPRI_MAX, r3
   1fd44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fd48:	4630      	mov	r0, r6
   1fd4a:	f000 f941 	bl	1ffd0 <z_spin_lock_valid>
   1fd4e:	b940      	cbnz	r0, 1fd62 <k_mem_slab_free+0x36>
   1fd50:	491c      	ldr	r1, [pc, #112]	; (1fdc4 <k_mem_slab_free+0x98>)
   1fd52:	481d      	ldr	r0, [pc, #116]	; (1fdc8 <k_mem_slab_free+0x9c>)
   1fd54:	2294      	movs	r2, #148	; 0x94
   1fd56:	f006 f8f3 	bl	25f40 <assert_print>
   1fd5a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd5c:	4819      	ldr	r0, [pc, #100]	; (1fdc4 <k_mem_slab_free+0x98>)
   1fd5e:	f006 f8e8 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fd62:	4630      	mov	r0, r6
   1fd64:	f000 f952 	bl	2000c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1fd68:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1fd6c:	f1b8 0f00 	cmp.w	r8, #0
   1fd70:	d10f      	bne.n	1fd92 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1fd72:	4620      	mov	r0, r4
   1fd74:	f001 fe54 	bl	21a20 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1fd78:	b158      	cbz	r0, 1fd92 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1fd7a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1fd7c:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1fd7e:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1fd82:	f001 f9fd 	bl	21180 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1fd86:	4639      	mov	r1, r7
   1fd88:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1fd8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1fd8e:	f001 ba2b 	b.w	211e8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1fd92:	682b      	ldr	r3, [r5, #0]
   1fd94:	69a2      	ldr	r2, [r4, #24]
   1fd96:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1fd98:	682b      	ldr	r3, [r5, #0]
   1fd9a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1fd9c:	69e3      	ldr	r3, [r4, #28]
   1fd9e:	3b01      	subs	r3, #1
   1fda0:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fda2:	4630      	mov	r0, r6
   1fda4:	f000 f922 	bl	1ffec <z_spin_unlock_valid>
   1fda8:	b930      	cbnz	r0, 1fdb8 <k_mem_slab_free+0x8c>
   1fdaa:	4906      	ldr	r1, [pc, #24]	; (1fdc4 <k_mem_slab_free+0x98>)
   1fdac:	4806      	ldr	r0, [pc, #24]	; (1fdc8 <k_mem_slab_free+0x9c>)
   1fdae:	22c2      	movs	r2, #194	; 0xc2
   1fdb0:	f006 f8c6 	bl	25f40 <assert_print>
   1fdb4:	21c2      	movs	r1, #194	; 0xc2
   1fdb6:	e7d1      	b.n	1fd5c <k_mem_slab_free+0x30>
	__asm__ volatile(
   1fdb8:	f387 8811 	msr	BASEPRI, r7
   1fdbc:	f3bf 8f6f 	isb	sy
}
   1fdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fdc4:	0002a819 	.word	0x0002a819
   1fdc8:	0002a7df 	.word	0x0002a7df

0001fdcc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1fdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdce:	b085      	sub	sp, #20
   1fdd0:	4604      	mov	r4, r0
   1fdd2:	980d      	ldr	r0, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   1fdd4:	280f      	cmp	r0, #15
   1fdd6:	d12e      	bne.n	1fe36 <z_setup_new_thread+0x6a>
   1fdd8:	4d1e      	ldr	r5, [pc, #120]	; (1fe54 <z_setup_new_thread+0x88>)
   1fdda:	42ab      	cmp	r3, r5
   1fddc:	d12f      	bne.n	1fe3e <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1fdde:	f104 0558 	add.w	r5, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1fde2:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1fde6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1fde8:	7325      	strb	r5, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1fdea:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   1fdec:	2504      	movs	r5, #4
   1fdee:	7365      	strb	r5, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1fdf0:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1fdf4:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   1fdf8:	e9c4 251a 	strd	r2, r5, [r4, #104]	; 0x68
	thread_base->pended_on = NULL;
   1fdfc:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fdfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->prio = priority;
   1fe00:	73a0      	strb	r0, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1fe02:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   1fe06:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   1fe08:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   1fe0a:	6726      	str	r6, [r4, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1fe0c:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fe10:	9202      	str	r2, [sp, #8]
   1fe12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fe14:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1fe16:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fe18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fe1a:	9200      	str	r2, [sp, #0]
   1fe1c:	4620      	mov	r0, r4
   1fe1e:	463a      	mov	r2, r7
   1fe20:	f7f3 fa2a 	bl	13278 <arch_new_thread>
	if (!_current) {
   1fe24:	4b0c      	ldr	r3, [pc, #48]	; (1fe58 <z_setup_new_thread+0x8c>)
	new_thread->init_data = NULL;
   1fe26:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   1fe28:	689b      	ldr	r3, [r3, #8]
   1fe2a:	b103      	cbz	r3, 1fe2e <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
   1fe2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1fe2e:	6763      	str	r3, [r4, #116]	; 0x74
}
   1fe30:	4638      	mov	r0, r7
   1fe32:	b005      	add	sp, #20
   1fe34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1fe36:	f100 0510 	add.w	r5, r0, #16
   1fe3a:	2d1e      	cmp	r5, #30
   1fe3c:	d9cf      	bls.n	1fdde <z_setup_new_thread+0x12>
   1fe3e:	4907      	ldr	r1, [pc, #28]	; (1fe5c <z_setup_new_thread+0x90>)
   1fe40:	4807      	ldr	r0, [pc, #28]	; (1fe60 <z_setup_new_thread+0x94>)
   1fe42:	f44f 7206 	mov.w	r2, #536	; 0x218
   1fe46:	f006 f87b 	bl	25f40 <assert_print>
   1fe4a:	4804      	ldr	r0, [pc, #16]	; (1fe5c <z_setup_new_thread+0x90>)
   1fe4c:	f44f 7106 	mov.w	r1, #536	; 0x218
   1fe50:	f006 f86f 	bl	25f32 <assert_post_action>
   1fe54:	0002001d 	.word	0x0002001d
   1fe58:	20002a64 	.word	0x20002a64
   1fe5c:	0002d69b 	.word	0x0002d69b
   1fe60:	0002a7df 	.word	0x0002a7df

0001fe64 <z_impl_k_thread_create>:
{
   1fe64:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe66:	b087      	sub	sp, #28
   1fe68:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   1fe6c:	4604      	mov	r4, r0
   1fe6e:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1fe72:	b155      	cbz	r5, 1fe8a <z_impl_k_thread_create+0x26>
   1fe74:	4917      	ldr	r1, [pc, #92]	; (1fed4 <z_impl_k_thread_create+0x70>)
   1fe76:	4818      	ldr	r0, [pc, #96]	; (1fed8 <z_impl_k_thread_create+0x74>)
   1fe78:	f240 2287 	movw	r2, #647	; 0x287
   1fe7c:	f006 f860 	bl	25f40 <assert_print>
   1fe80:	4814      	ldr	r0, [pc, #80]	; (1fed4 <z_impl_k_thread_create+0x70>)
   1fe82:	f240 2187 	movw	r1, #647	; 0x287
   1fe86:	f006 f854 	bl	25f32 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fe8a:	9505      	str	r5, [sp, #20]
   1fe8c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1fe8e:	9504      	str	r5, [sp, #16]
   1fe90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1fe92:	9503      	str	r5, [sp, #12]
   1fe94:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1fe96:	9502      	str	r5, [sp, #8]
   1fe98:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1fe9a:	9501      	str	r5, [sp, #4]
   1fe9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1fe9e:	9500      	str	r5, [sp, #0]
   1fea0:	f7ff ff94 	bl	1fdcc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1fea4:	f1b6 3fff 	cmp.w	r6, #4294967295
   1fea8:	bf08      	it	eq
   1feaa:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1feae:	d005      	beq.n	1febc <z_impl_k_thread_create+0x58>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1feb0:	ea56 0307 	orrs.w	r3, r6, r7
   1feb4:	d105      	bne.n	1fec2 <z_impl_k_thread_create+0x5e>
	z_sched_start(thread);
   1feb6:	4620      	mov	r0, r4
   1feb8:	f001 f9ca 	bl	21250 <z_sched_start>
}
   1febc:	4620      	mov	r0, r4
   1febe:	b007      	add	sp, #28
   1fec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1fec2:	4906      	ldr	r1, [pc, #24]	; (1fedc <z_impl_k_thread_create+0x78>)
   1fec4:	463a      	mov	r2, r7
   1fec6:	4633      	mov	r3, r6
   1fec8:	f104 0018 	add.w	r0, r4, #24
   1fecc:	f002 f88a 	bl	21fe4 <z_add_timeout>
   1fed0:	e7f4      	b.n	1febc <z_impl_k_thread_create+0x58>
   1fed2:	bf00      	nop
   1fed4:	0002d69b 	.word	0x0002d69b
   1fed8:	0002a7df 	.word	0x0002a7df
   1fedc:	00021995 	.word	0x00021995

0001fee0 <z_init_static_threads>:
{
   1fee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fee4:	4c35      	ldr	r4, [pc, #212]	; (1ffbc <z_init_static_threads+0xdc>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1fee6:	4d36      	ldr	r5, [pc, #216]	; (1ffc0 <z_init_static_threads+0xe0>)
{
   1fee8:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1feea:	42ac      	cmp	r4, r5
   1feec:	4626      	mov	r6, r4
   1feee:	d926      	bls.n	1ff3e <z_init_static_threads+0x5e>
   1fef0:	4934      	ldr	r1, [pc, #208]	; (1ffc4 <z_init_static_threads+0xe4>)
   1fef2:	4835      	ldr	r0, [pc, #212]	; (1ffc8 <z_init_static_threads+0xe8>)
   1fef4:	f240 22ee 	movw	r2, #750	; 0x2ee
   1fef8:	f006 f822 	bl	25f40 <assert_print>
   1fefc:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   1ff00:	4830      	ldr	r0, [pc, #192]	; (1ffc4 <z_init_static_threads+0xe4>)
   1ff02:	f006 f816 	bl	25f32 <assert_post_action>
		z_setup_new_thread(
   1ff06:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1ff0a:	9305      	str	r3, [sp, #20]
   1ff0c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1ff10:	9304      	str	r3, [sp, #16]
   1ff12:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1ff16:	9303      	str	r3, [sp, #12]
   1ff18:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1ff1c:	9302      	str	r3, [sp, #8]
   1ff1e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1ff22:	9301      	str	r3, [sp, #4]
   1ff24:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1ff28:	9300      	str	r3, [sp, #0]
   1ff2a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1ff2e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1ff32:	f7ff ff4b 	bl	1fdcc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1ff36:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1ff3a:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1ff3c:	e7d5      	b.n	1feea <z_init_static_threads+0xa>
   1ff3e:	42ae      	cmp	r6, r5
   1ff40:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1ff44:	d3df      	bcc.n	1ff06 <z_init_static_threads+0x26>
	k_sched_lock();
   1ff46:	f001 f9c3 	bl	212d0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ff4a:	4c1c      	ldr	r4, [pc, #112]	; (1ffbc <z_init_static_threads+0xdc>)
   1ff4c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1ffcc <z_init_static_threads+0xec>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1ff50:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ff54:	f240 37e7 	movw	r7, #999	; 0x3e7
   1ff58:	42ac      	cmp	r4, r5
   1ff5a:	d928      	bls.n	1ffae <z_init_static_threads+0xce>
   1ff5c:	4919      	ldr	r1, [pc, #100]	; (1ffc4 <z_init_static_threads+0xe4>)
   1ff5e:	481a      	ldr	r0, [pc, #104]	; (1ffc8 <z_init_static_threads+0xe8>)
   1ff60:	f240 320d 	movw	r2, #781	; 0x30d
   1ff64:	f005 ffec 	bl	25f40 <assert_print>
   1ff68:	f240 310d 	movw	r1, #781	; 0x30d
   1ff6c:	e7c8      	b.n	1ff00 <z_init_static_threads+0x20>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ff6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ff70:	1c5a      	adds	r2, r3, #1
   1ff72:	d00d      	beq.n	1ff90 <z_init_static_threads+0xb0>
					    K_MSEC(thread_data->init_delay));
   1ff74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ff78:	2100      	movs	r1, #0
   1ff7a:	4638      	mov	r0, r7
   1ff7c:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ff80:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1ff84:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ff88:	d104      	bne.n	1ff94 <z_init_static_threads+0xb4>
	z_sched_start(thread);
   1ff8a:	4640      	mov	r0, r8
   1ff8c:	f001 f960 	bl	21250 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ff90:	3430      	adds	r4, #48	; 0x30
   1ff92:	e7e1      	b.n	1ff58 <z_init_static_threads+0x78>
   1ff94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ff98:	2300      	movs	r3, #0
   1ff9a:	f7e0 f8b1 	bl	100 <__aeabi_uldivmod>
   1ff9e:	4602      	mov	r2, r0
   1ffa0:	460b      	mov	r3, r1
   1ffa2:	f108 0018 	add.w	r0, r8, #24
   1ffa6:	4649      	mov	r1, r9
   1ffa8:	f002 f81c 	bl	21fe4 <z_add_timeout>
   1ffac:	e7f0      	b.n	1ff90 <z_init_static_threads+0xb0>
   1ffae:	d3de      	bcc.n	1ff6e <z_init_static_threads+0x8e>
}
   1ffb0:	b007      	add	sp, #28
   1ffb2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1ffb6:	f001 b9d7 	b.w	21368 <k_sched_unlock>
   1ffba:	bf00      	nop
   1ffbc:	00029948 	.word	0x00029948
   1ffc0:	00029948 	.word	0x00029948
   1ffc4:	0002d69b 	.word	0x0002d69b
   1ffc8:	0002a7df 	.word	0x0002a7df
   1ffcc:	00021995 	.word	0x00021995

0001ffd0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1ffd0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1ffd2:	b138      	cbz	r0, 1ffe4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1ffd4:	4b04      	ldr	r3, [pc, #16]	; (1ffe8 <z_spin_lock_valid+0x18>)
   1ffd6:	7d1b      	ldrb	r3, [r3, #20]
   1ffd8:	f000 0003 	and.w	r0, r0, #3
   1ffdc:	1ac0      	subs	r0, r0, r3
   1ffde:	bf18      	it	ne
   1ffe0:	2001      	movne	r0, #1
   1ffe2:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1ffe4:	2001      	movs	r0, #1
}
   1ffe6:	4770      	bx	lr
   1ffe8:	20002a64 	.word	0x20002a64

0001ffec <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1ffec:	4a06      	ldr	r2, [pc, #24]	; (20008 <z_spin_unlock_valid+0x1c>)
   1ffee:	7d11      	ldrb	r1, [r2, #20]
   1fff0:	6892      	ldr	r2, [r2, #8]
   1fff2:	430a      	orrs	r2, r1
   1fff4:	6801      	ldr	r1, [r0, #0]
{
   1fff6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1fff8:	4291      	cmp	r1, r2
   1fffa:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   1fffe:	bf04      	itt	eq
   20000:	6018      	streq	r0, [r3, #0]
	return true;
   20002:	2001      	moveq	r0, #1
}
   20004:	4770      	bx	lr
   20006:	bf00      	nop
   20008:	20002a64 	.word	0x20002a64

0002000c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   2000c:	4b02      	ldr	r3, [pc, #8]	; (20018 <z_spin_lock_set_owner+0xc>)
   2000e:	7d1a      	ldrb	r2, [r3, #20]
   20010:	689b      	ldr	r3, [r3, #8]
   20012:	4313      	orrs	r3, r2
   20014:	6003      	str	r3, [r0, #0]
}
   20016:	4770      	bx	lr
   20018:	20002a64 	.word	0x20002a64

0002001c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2001c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   2001e:	4c12      	ldr	r4, [pc, #72]	; (20068 <idle+0x4c>)
   20020:	68a3      	ldr	r3, [r4, #8]
   20022:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20026:	2b00      	cmp	r3, #0
   20028:	db10      	blt.n	2004c <idle+0x30>
	return !z_sys_post_kernel;
   2002a:	4d10      	ldr	r5, [pc, #64]	; (2006c <idle+0x50>)
	__asm__ volatile(
   2002c:	f04f 0240 	mov.w	r2, #64	; 0x40
   20030:	f3ef 8311 	mrs	r3, BASEPRI
   20034:	f382 8812 	msr	BASEPRI_MAX, r2
   20038:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2003c:	f002 f8b8 	bl	221b0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20040:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   20042:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20044:	b95b      	cbnz	r3, 2005e <idle+0x42>
	arch_cpu_idle();
   20046:	f7f2 fff5 	bl	13034 <arch_cpu_idle>
}
   2004a:	e7ef      	b.n	2002c <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   2004c:	4908      	ldr	r1, [pc, #32]	; (20070 <idle+0x54>)
   2004e:	4809      	ldr	r0, [pc, #36]	; (20074 <idle+0x58>)
   20050:	2227      	movs	r2, #39	; 0x27
   20052:	f005 ff75 	bl	25f40 <assert_print>
   20056:	4806      	ldr	r0, [pc, #24]	; (20070 <idle+0x54>)
   20058:	2127      	movs	r1, #39	; 0x27
   2005a:	f005 ff6a 	bl	25f32 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2005e:	f7f2 fd37 	bl	12ad0 <pm_system_suspend>
   20062:	2800      	cmp	r0, #0
   20064:	d1e2      	bne.n	2002c <idle+0x10>
   20066:	e7ee      	b.n	20046 <idle+0x2a>
   20068:	20002a64 	.word	0x20002a64
   2006c:	200042d8 	.word	0x200042d8
   20070:	0002d6be 	.word	0x0002d6be
   20074:	0002a7df 	.word	0x0002a7df

00020078 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20078:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2007c:	4604      	mov	r4, r0
   2007e:	4617      	mov	r7, r2
   20080:	461e      	mov	r6, r3
   20082:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20086:	b145      	cbz	r5, 2009a <z_impl_k_mutex_lock+0x22>
   20088:	4951      	ldr	r1, [pc, #324]	; (201d0 <z_impl_k_mutex_lock+0x158>)
   2008a:	4852      	ldr	r0, [pc, #328]	; (201d4 <z_impl_k_mutex_lock+0x15c>)
   2008c:	2265      	movs	r2, #101	; 0x65
   2008e:	f005 ff57 	bl	25f40 <assert_print>
   20092:	484f      	ldr	r0, [pc, #316]	; (201d0 <z_impl_k_mutex_lock+0x158>)
   20094:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20096:	f005 ff4c 	bl	25f32 <assert_post_action>
   2009a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2009e:	f3ef 8811 	mrs	r8, BASEPRI
   200a2:	f383 8812 	msr	BASEPRI_MAX, r3
   200a6:	f3bf 8f6f 	isb	sy
   200aa:	484b      	ldr	r0, [pc, #300]	; (201d8 <z_impl_k_mutex_lock+0x160>)
   200ac:	f7ff ff90 	bl	1ffd0 <z_spin_lock_valid>
   200b0:	b938      	cbnz	r0, 200c2 <z_impl_k_mutex_lock+0x4a>
   200b2:	494a      	ldr	r1, [pc, #296]	; (201dc <z_impl_k_mutex_lock+0x164>)
   200b4:	4847      	ldr	r0, [pc, #284]	; (201d4 <z_impl_k_mutex_lock+0x15c>)
   200b6:	2294      	movs	r2, #148	; 0x94
   200b8:	f005 ff42 	bl	25f40 <assert_print>
   200bc:	2194      	movs	r1, #148	; 0x94
   200be:	4847      	ldr	r0, [pc, #284]	; (201dc <z_impl_k_mutex_lock+0x164>)
   200c0:	e7e9      	b.n	20096 <z_impl_k_mutex_lock+0x1e>
	z_spin_lock_set_owner(l);
   200c2:	4845      	ldr	r0, [pc, #276]	; (201d8 <z_impl_k_mutex_lock+0x160>)
   200c4:	f7ff ffa2 	bl	2000c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   200c8:	68e3      	ldr	r3, [r4, #12]
   200ca:	4a45      	ldr	r2, [pc, #276]	; (201e0 <z_impl_k_mutex_lock+0x168>)
   200cc:	b19b      	cbz	r3, 200f6 <z_impl_k_mutex_lock+0x7e>
   200ce:	68a0      	ldr	r0, [r4, #8]
   200d0:	6891      	ldr	r1, [r2, #8]
   200d2:	4288      	cmp	r0, r1
   200d4:	d022      	beq.n	2011c <z_impl_k_mutex_lock+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   200d6:	ea57 0306 	orrs.w	r3, r7, r6
   200da:	d127      	bne.n	2012c <z_impl_k_mutex_lock+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   200dc:	483e      	ldr	r0, [pc, #248]	; (201d8 <z_impl_k_mutex_lock+0x160>)
   200de:	f7ff ff85 	bl	1ffec <z_spin_unlock_valid>
   200e2:	b1a0      	cbz	r0, 2010e <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   200e4:	f388 8811 	msr	BASEPRI, r8
   200e8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   200ec:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   200f0:	b002      	add	sp, #8
   200f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   200f6:	6891      	ldr	r1, [r2, #8]
   200f8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   200fc:	4836      	ldr	r0, [pc, #216]	; (201d8 <z_impl_k_mutex_lock+0x160>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   200fe:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   20100:	3301      	adds	r3, #1
   20102:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   20104:	6893      	ldr	r3, [r2, #8]
   20106:	60a3      	str	r3, [r4, #8]
   20108:	f7ff ff70 	bl	1ffec <z_spin_unlock_valid>
   2010c:	b940      	cbnz	r0, 20120 <z_impl_k_mutex_lock+0xa8>
   2010e:	4933      	ldr	r1, [pc, #204]	; (201dc <z_impl_k_mutex_lock+0x164>)
   20110:	4830      	ldr	r0, [pc, #192]	; (201d4 <z_impl_k_mutex_lock+0x15c>)
   20112:	22c2      	movs	r2, #194	; 0xc2
   20114:	f005 ff14 	bl	25f40 <assert_print>
   20118:	21c2      	movs	r1, #194	; 0xc2
   2011a:	e7d0      	b.n	200be <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
   2011c:	6921      	ldr	r1, [r4, #16]
   2011e:	e7ed      	b.n	200fc <z_impl_k_mutex_lock+0x84>
   20120:	f388 8811 	msr	BASEPRI, r8
   20124:	f3bf 8f6f 	isb	sy
		return 0;
   20128:	2000      	movs	r0, #0
   2012a:	e7e1      	b.n	200f0 <z_impl_k_mutex_lock+0x78>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2012c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20130:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   20134:	4299      	cmp	r1, r3
   20136:	bfa8      	it	ge
   20138:	4619      	movge	r1, r3
   2013a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2013e:	4291      	cmp	r1, r2
   20140:	bfb8      	it	lt
   20142:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20144:	428b      	cmp	r3, r1
   20146:	dd02      	ble.n	2014e <z_impl_k_mutex_lock+0xd6>
		resched = adjust_owner_prio(mutex, new_prio);
   20148:	f009 f8c8 	bl	292dc <adjust_owner_prio.isra.0>
   2014c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2014e:	e9cd 7600 	strd	r7, r6, [sp]
   20152:	4821      	ldr	r0, [pc, #132]	; (201d8 <z_impl_k_mutex_lock+0x160>)
   20154:	4622      	mov	r2, r4
   20156:	4641      	mov	r1, r8
   20158:	f001 fa9a 	bl	21690 <z_pend_curr>
	if (got_mutex == 0) {
   2015c:	2800      	cmp	r0, #0
   2015e:	d0e3      	beq.n	20128 <z_impl_k_mutex_lock+0xb0>
	__asm__ volatile(
   20160:	f04f 0340 	mov.w	r3, #64	; 0x40
   20164:	f3ef 8611 	mrs	r6, BASEPRI
   20168:	f383 8812 	msr	BASEPRI_MAX, r3
   2016c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20170:	4819      	ldr	r0, [pc, #100]	; (201d8 <z_impl_k_mutex_lock+0x160>)
   20172:	f7ff ff2d 	bl	1ffd0 <z_spin_lock_valid>
   20176:	2800      	cmp	r0, #0
   20178:	d09b      	beq.n	200b2 <z_impl_k_mutex_lock+0x3a>
	z_spin_lock_set_owner(l);
   2017a:	4817      	ldr	r0, [pc, #92]	; (201d8 <z_impl_k_mutex_lock+0x160>)
   2017c:	f7ff ff46 	bl	2000c <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   20180:	68a0      	ldr	r0, [r4, #8]
   20182:	b1c0      	cbz	r0, 201b6 <z_impl_k_mutex_lock+0x13e>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20184:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   20186:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20188:	429c      	cmp	r4, r3
   2018a:	d00a      	beq.n	201a2 <z_impl_k_mutex_lock+0x12a>
   2018c:	b14b      	cbz	r3, 201a2 <z_impl_k_mutex_lock+0x12a>
   2018e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20192:	4299      	cmp	r1, r3
   20194:	bfa8      	it	ge
   20196:	4619      	movge	r1, r3
   20198:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2019c:	4299      	cmp	r1, r3
   2019e:	bfb8      	it	lt
   201a0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   201a2:	f009 f89b 	bl	292dc <adjust_owner_prio.isra.0>
   201a6:	b130      	cbz	r0, 201b6 <z_impl_k_mutex_lock+0x13e>
		z_reschedule(&lock, key);
   201a8:	480b      	ldr	r0, [pc, #44]	; (201d8 <z_impl_k_mutex_lock+0x160>)
   201aa:	4631      	mov	r1, r6
   201ac:	f001 f81c 	bl	211e8 <z_reschedule>
	return -EAGAIN;
   201b0:	f06f 000a 	mvn.w	r0, #10
   201b4:	e79c      	b.n	200f0 <z_impl_k_mutex_lock+0x78>
	if (resched) {
   201b6:	2d00      	cmp	r5, #0
   201b8:	d1f6      	bne.n	201a8 <z_impl_k_mutex_lock+0x130>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   201ba:	4807      	ldr	r0, [pc, #28]	; (201d8 <z_impl_k_mutex_lock+0x160>)
   201bc:	f7ff ff16 	bl	1ffec <z_spin_unlock_valid>
   201c0:	2800      	cmp	r0, #0
   201c2:	d0a4      	beq.n	2010e <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   201c4:	f386 8811 	msr	BASEPRI, r6
   201c8:	f3bf 8f6f 	isb	sy
   201cc:	e7f0      	b.n	201b0 <z_impl_k_mutex_lock+0x138>
   201ce:	bf00      	nop
   201d0:	0002d6df 	.word	0x0002d6df
   201d4:	0002a7df 	.word	0x0002a7df
   201d8:	20002a8c 	.word	0x20002a8c
   201dc:	0002a819 	.word	0x0002a819
   201e0:	20002a64 	.word	0x20002a64

000201e4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   201e4:	b570      	push	{r4, r5, r6, lr}
   201e6:	4604      	mov	r4, r0
   201e8:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   201ec:	b146      	cbz	r6, 20200 <z_impl_k_mutex_unlock+0x1c>
   201ee:	4930      	ldr	r1, [pc, #192]	; (202b0 <z_impl_k_mutex_unlock+0xcc>)
   201f0:	4830      	ldr	r0, [pc, #192]	; (202b4 <z_impl_k_mutex_unlock+0xd0>)
   201f2:	22cd      	movs	r2, #205	; 0xcd
   201f4:	f005 fea4 	bl	25f40 <assert_print>
   201f8:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   201fa:	482d      	ldr	r0, [pc, #180]	; (202b0 <z_impl_k_mutex_unlock+0xcc>)
   201fc:	f005 fe99 	bl	25f32 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   20200:	6883      	ldr	r3, [r0, #8]
   20202:	2b00      	cmp	r3, #0
   20204:	d04e      	beq.n	202a4 <z_impl_k_mutex_unlock+0xc0>
	CHECKIF(mutex->owner != _current) {
   20206:	4a2c      	ldr	r2, [pc, #176]	; (202b8 <z_impl_k_mutex_unlock+0xd4>)
   20208:	6892      	ldr	r2, [r2, #8]
   2020a:	4293      	cmp	r3, r2
   2020c:	d14d      	bne.n	202aa <z_impl_k_mutex_unlock+0xc6>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2020e:	68c3      	ldr	r3, [r0, #12]
   20210:	b933      	cbnz	r3, 20220 <z_impl_k_mutex_unlock+0x3c>
   20212:	4927      	ldr	r1, [pc, #156]	; (202b0 <z_impl_k_mutex_unlock+0xcc>)
   20214:	4827      	ldr	r0, [pc, #156]	; (202b4 <z_impl_k_mutex_unlock+0xd0>)
   20216:	22e5      	movs	r2, #229	; 0xe5
   20218:	f005 fe92 	bl	25f40 <assert_print>
   2021c:	21e5      	movs	r1, #229	; 0xe5
   2021e:	e7ec      	b.n	201fa <z_impl_k_mutex_unlock+0x16>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   20220:	2b01      	cmp	r3, #1
   20222:	d003      	beq.n	2022c <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count--;
   20224:	3b01      	subs	r3, #1
   20226:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   20228:	2000      	movs	r0, #0
}
   2022a:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   2022c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20230:	f3ef 8511 	mrs	r5, BASEPRI
   20234:	f383 8812 	msr	BASEPRI_MAX, r3
   20238:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2023c:	481f      	ldr	r0, [pc, #124]	; (202bc <z_impl_k_mutex_unlock+0xd8>)
   2023e:	f7ff fec7 	bl	1ffd0 <z_spin_lock_valid>
   20242:	b938      	cbnz	r0, 20254 <z_impl_k_mutex_unlock+0x70>
   20244:	491e      	ldr	r1, [pc, #120]	; (202c0 <z_impl_k_mutex_unlock+0xdc>)
   20246:	481b      	ldr	r0, [pc, #108]	; (202b4 <z_impl_k_mutex_unlock+0xd0>)
   20248:	2294      	movs	r2, #148	; 0x94
   2024a:	f005 fe79 	bl	25f40 <assert_print>
   2024e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20250:	481b      	ldr	r0, [pc, #108]	; (202c0 <z_impl_k_mutex_unlock+0xdc>)
   20252:	e7d3      	b.n	201fc <z_impl_k_mutex_unlock+0x18>
	z_spin_lock_set_owner(l);
   20254:	4819      	ldr	r0, [pc, #100]	; (202bc <z_impl_k_mutex_unlock+0xd8>)
   20256:	f7ff fed9 	bl	2000c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2025a:	6921      	ldr	r1, [r4, #16]
   2025c:	68a0      	ldr	r0, [r4, #8]
   2025e:	f009 f83d 	bl	292dc <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   20262:	4620      	mov	r0, r4
   20264:	f001 fbdc 	bl	21a20 <z_unpend_first_thread>
	mutex->owner = new_owner;
   20268:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2026a:	b150      	cbz	r0, 20282 <z_impl_k_mutex_unlock+0x9e>
		mutex->owner_orig_prio = new_owner->base.prio;
   2026c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   20270:	6122      	str	r2, [r4, #16]
   20272:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   20274:	f000 ff84 	bl	21180 <z_ready_thread>
		z_reschedule(&lock, key);
   20278:	4810      	ldr	r0, [pc, #64]	; (202bc <z_impl_k_mutex_unlock+0xd8>)
   2027a:	4629      	mov	r1, r5
   2027c:	f000 ffb4 	bl	211e8 <z_reschedule>
   20280:	e7d2      	b.n	20228 <z_impl_k_mutex_unlock+0x44>
		mutex->lock_count = 0U;
   20282:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20284:	480d      	ldr	r0, [pc, #52]	; (202bc <z_impl_k_mutex_unlock+0xd8>)
   20286:	f7ff feb1 	bl	1ffec <z_spin_unlock_valid>
   2028a:	b930      	cbnz	r0, 2029a <z_impl_k_mutex_unlock+0xb6>
   2028c:	490c      	ldr	r1, [pc, #48]	; (202c0 <z_impl_k_mutex_unlock+0xdc>)
   2028e:	4809      	ldr	r0, [pc, #36]	; (202b4 <z_impl_k_mutex_unlock+0xd0>)
   20290:	22c2      	movs	r2, #194	; 0xc2
   20292:	f005 fe55 	bl	25f40 <assert_print>
   20296:	21c2      	movs	r1, #194	; 0xc2
   20298:	e7da      	b.n	20250 <z_impl_k_mutex_unlock+0x6c>
	__asm__ volatile(
   2029a:	f385 8811 	msr	BASEPRI, r5
   2029e:	f3bf 8f6f 	isb	sy
   202a2:	e7c1      	b.n	20228 <z_impl_k_mutex_unlock+0x44>
		return -EINVAL;
   202a4:	f06f 0015 	mvn.w	r0, #21
   202a8:	e7bf      	b.n	2022a <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
   202aa:	f04f 30ff 	mov.w	r0, #4294967295
   202ae:	e7bc      	b.n	2022a <z_impl_k_mutex_unlock+0x46>
   202b0:	0002d6df 	.word	0x0002d6df
   202b4:	0002a7df 	.word	0x0002a7df
   202b8:	20002a64 	.word	0x20002a64
   202bc:	20002a8c 	.word	0x20002a8c
   202c0:	0002a819 	.word	0x0002a819

000202c4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   202c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   202c8:	4604      	mov	r4, r0
   202ca:	f89d a020 	ldrb.w	sl, [sp, #32]
   202ce:	460d      	mov	r5, r1
   202d0:	4690      	mov	r8, r2
   202d2:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   202d4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   202d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   202dc:	f3ef 8711 	mrs	r7, BASEPRI
   202e0:	f383 8812 	msr	BASEPRI_MAX, r3
   202e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   202e8:	4630      	mov	r0, r6
   202ea:	f7ff fe71 	bl	1ffd0 <z_spin_lock_valid>
   202ee:	b940      	cbnz	r0, 20302 <queue_insert+0x3e>
   202f0:	4936      	ldr	r1, [pc, #216]	; (203cc <queue_insert+0x108>)
   202f2:	4837      	ldr	r0, [pc, #220]	; (203d0 <queue_insert+0x10c>)
   202f4:	2294      	movs	r2, #148	; 0x94
   202f6:	f005 fe23 	bl	25f40 <assert_print>
   202fa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   202fc:	4833      	ldr	r0, [pc, #204]	; (203cc <queue_insert+0x108>)
   202fe:	f005 fe18 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   20302:	4630      	mov	r0, r6
   20304:	f7ff fe82 	bl	2000c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   20308:	f1ba 0f00 	cmp.w	sl, #0
   2030c:	d000      	beq.n	20310 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   2030e:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20310:	f104 000c 	add.w	r0, r4, #12
   20314:	f001 fb84 	bl	21a20 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   20318:	b158      	cbz	r0, 20332 <queue_insert+0x6e>
   2031a:	2300      	movs	r3, #0
   2031c:	67c3      	str	r3, [r0, #124]	; 0x7c
   2031e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   20322:	f000 ff2d 	bl	21180 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20326:	4630      	mov	r0, r6
   20328:	4639      	mov	r1, r7
   2032a:	f000 ff5d 	bl	211e8 <z_reschedule>
		return 0;
   2032e:	2000      	movs	r0, #0
   20330:	e017      	b.n	20362 <queue_insert+0x9e>
	if (alloc) {
   20332:	f1b9 0f00 	cmp.w	r9, #0
   20336:	d026      	beq.n	20386 <queue_insert+0xc2>
	return z_thread_aligned_alloc(0, size);
   20338:	2108      	movs	r1, #8
   2033a:	f002 faf7 	bl	2292c <z_thread_aligned_alloc>
		if (anode == NULL) {
   2033e:	b990      	cbnz	r0, 20366 <queue_insert+0xa2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20340:	4630      	mov	r0, r6
   20342:	f7ff fe53 	bl	1ffec <z_spin_unlock_valid>
   20346:	b930      	cbnz	r0, 20356 <queue_insert+0x92>
   20348:	4920      	ldr	r1, [pc, #128]	; (203cc <queue_insert+0x108>)
   2034a:	4821      	ldr	r0, [pc, #132]	; (203d0 <queue_insert+0x10c>)
   2034c:	22c2      	movs	r2, #194	; 0xc2
   2034e:	f005 fdf7 	bl	25f40 <assert_print>
   20352:	21c2      	movs	r1, #194	; 0xc2
   20354:	e7d2      	b.n	202fc <queue_insert+0x38>
	__asm__ volatile(
   20356:	f387 8811 	msr	BASEPRI, r7
   2035a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2035e:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   20362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   20366:	2201      	movs	r2, #1
		anode->data = data;
   20368:	f8c0 8004 	str.w	r8, [r0, #4]
   2036c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2036e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20370:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   20374:	b95d      	cbnz	r5, 2038e <queue_insert+0xca>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20376:	6822      	ldr	r2, [r4, #0]
   20378:	430a      	orrs	r2, r1
   2037a:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2037c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2037e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20380:	b96a      	cbnz	r2, 2039e <queue_insert+0xda>
	list->tail = node;
   20382:	6060      	str	r0, [r4, #4]
}
   20384:	e00b      	b.n	2039e <queue_insert+0xda>
	node->next_and_flags = flags;
   20386:	f8c8 9000 	str.w	r9, [r8]
}
   2038a:	4640      	mov	r0, r8
   2038c:	e7ef      	b.n	2036e <queue_insert+0xaa>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2038e:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20390:	2a03      	cmp	r2, #3
   20392:	d810      	bhi.n	203b6 <queue_insert+0xf2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20394:	6001      	str	r1, [r0, #0]
	return list->tail;
   20396:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   20398:	b939      	cbnz	r1, 203aa <queue_insert+0xe6>
	list->head = node;
   2039a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2039e:	2104      	movs	r1, #4
   203a0:	f104 0014 	add.w	r0, r4, #20
   203a4:	f009 f931 	bl	2960a <z_handle_obj_poll_events>
   203a8:	e7bd      	b.n	20326 <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   203aa:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   203ac:	f002 0203 	and.w	r2, r2, #3
   203b0:	4302      	orrs	r2, r0
   203b2:	600a      	str	r2, [r1, #0]
   203b4:	e7e5      	b.n	20382 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   203b6:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   203ba:	430a      	orrs	r2, r1
   203bc:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   203be:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   203c0:	f002 0203 	and.w	r2, r2, #3
   203c4:	ea40 0302 	orr.w	r3, r0, r2
   203c8:	602b      	str	r3, [r5, #0]
}
   203ca:	e7e8      	b.n	2039e <queue_insert+0xda>
   203cc:	0002a819 	.word	0x0002a819
   203d0:	0002a7df 	.word	0x0002a7df

000203d4 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   203d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   203d8:	4605      	mov	r5, r0
   203da:	4616      	mov	r6, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   203dc:	460c      	mov	r4, r1
   203de:	2900      	cmp	r1, #0
   203e0:	d045      	beq.n	2046e <k_queue_append_list+0x9a>
   203e2:	2a00      	cmp	r2, #0
   203e4:	d043      	beq.n	2046e <k_queue_append_list+0x9a>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   203e6:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   203ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   203ee:	f3ef 8911 	mrs	r9, BASEPRI
   203f2:	f383 8812 	msr	BASEPRI_MAX, r3
   203f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   203fa:	4638      	mov	r0, r7
   203fc:	f7ff fde8 	bl	1ffd0 <z_spin_lock_valid>
   20400:	b940      	cbnz	r0, 20414 <k_queue_append_list+0x40>
   20402:	491c      	ldr	r1, [pc, #112]	; (20474 <k_queue_append_list+0xa0>)
   20404:	481c      	ldr	r0, [pc, #112]	; (20478 <k_queue_append_list+0xa4>)
   20406:	2294      	movs	r2, #148	; 0x94
   20408:	f005 fd9a 	bl	25f40 <assert_print>
   2040c:	4819      	ldr	r0, [pc, #100]	; (20474 <k_queue_append_list+0xa0>)
   2040e:	2194      	movs	r1, #148	; 0x94
   20410:	f005 fd8f 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   20414:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   20416:	f105 080c 	add.w	r8, r5, #12
   2041a:	f7ff fdf7 	bl	2000c <z_spin_lock_set_owner>
   2041e:	4640      	mov	r0, r8
   20420:	f001 fafe 	bl	21a20 <z_unpend_first_thread>
	}

	while ((head != NULL) && (thread != NULL)) {
   20424:	b168      	cbz	r0, 20442 <k_queue_append_list+0x6e>
   20426:	f04f 0a00 	mov.w	sl, #0
	thread->base.swap_data = data;
   2042a:	6144      	str	r4, [r0, #20]
   2042c:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   20430:	f000 fea6 	bl	21180 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   20434:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   20436:	4640      	mov	r0, r8
   20438:	f001 faf2 	bl	21a20 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2043c:	b12c      	cbz	r4, 2044a <k_queue_append_list+0x76>
   2043e:	2800      	cmp	r0, #0
   20440:	d1f3      	bne.n	2042a <k_queue_append_list+0x56>
	return list->tail;
   20442:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20444:	b96b      	cbnz	r3, 20462 <k_queue_append_list+0x8e>
	list->head = node;
   20446:	602c      	str	r4, [r5, #0]
	list->tail = node;
   20448:	606e      	str	r6, [r5, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2044a:	2104      	movs	r1, #4
   2044c:	f105 0014 	add.w	r0, r5, #20
   20450:	f009 f8db 	bl	2960a <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20454:	4638      	mov	r0, r7
   20456:	4649      	mov	r1, r9
   20458:	f000 fec6 	bl	211e8 <z_reschedule>
	return 0;
   2045c:	2000      	movs	r0, #0
}
   2045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20462:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20464:	f002 0203 	and.w	r2, r2, #3
   20468:	4314      	orrs	r4, r2
   2046a:	601c      	str	r4, [r3, #0]
}
   2046c:	e7ec      	b.n	20448 <k_queue_append_list+0x74>
		return -EINVAL;
   2046e:	f06f 0015 	mvn.w	r0, #21
   20472:	e7f4      	b.n	2045e <k_queue_append_list+0x8a>
   20474:	0002a819 	.word	0x0002a819
   20478:	0002a7df 	.word	0x0002a7df

0002047c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2047c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20480:	4605      	mov	r5, r0
   20482:	4691      	mov	r9, r2
   20484:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20486:	f100 0608 	add.w	r6, r0, #8
   2048a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2048e:	f3ef 8811 	mrs	r8, BASEPRI
   20492:	f383 8812 	msr	BASEPRI_MAX, r3
   20496:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2049a:	4630      	mov	r0, r6
   2049c:	f7ff fd98 	bl	1ffd0 <z_spin_lock_valid>
   204a0:	b940      	cbnz	r0, 204b4 <z_impl_k_queue_get+0x38>
   204a2:	491f      	ldr	r1, [pc, #124]	; (20520 <z_impl_k_queue_get+0xa4>)
   204a4:	481f      	ldr	r0, [pc, #124]	; (20524 <z_impl_k_queue_get+0xa8>)
   204a6:	2294      	movs	r2, #148	; 0x94
   204a8:	f005 fd4a 	bl	25f40 <assert_print>
   204ac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   204ae:	481c      	ldr	r0, [pc, #112]	; (20520 <z_impl_k_queue_get+0xa4>)
   204b0:	f005 fd3f 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   204b4:	4630      	mov	r0, r6
   204b6:	f7ff fda9 	bl	2000c <z_spin_lock_set_owner>
	return list->head;
   204ba:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   204bc:	b1bc      	cbz	r4, 204ee <z_impl_k_queue_get+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   204be:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   204c0:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   204c2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   204c6:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   204c8:	4620      	mov	r0, r4
	list->head = node;
   204ca:	602b      	str	r3, [r5, #0]
	list->tail = node;
   204cc:	bf08      	it	eq
   204ce:	606b      	streq	r3, [r5, #4]
   204d0:	2101      	movs	r1, #1
   204d2:	f008 ff12 	bl	292fa <z_queue_node_peek>
   204d6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   204d8:	4630      	mov	r0, r6
   204da:	f7ff fd87 	bl	1ffec <z_spin_unlock_valid>
   204de:	b9b0      	cbnz	r0, 2050e <z_impl_k_queue_get+0x92>
   204e0:	490f      	ldr	r1, [pc, #60]	; (20520 <z_impl_k_queue_get+0xa4>)
   204e2:	4810      	ldr	r0, [pc, #64]	; (20524 <z_impl_k_queue_get+0xa8>)
   204e4:	22c2      	movs	r2, #194	; 0xc2
   204e6:	f005 fd2b 	bl	25f40 <assert_print>
   204ea:	21c2      	movs	r1, #194	; 0xc2
   204ec:	e7df      	b.n	204ae <z_impl_k_queue_get+0x32>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   204ee:	ea59 0307 	orrs.w	r3, r9, r7
   204f2:	d0f1      	beq.n	204d8 <z_impl_k_queue_get+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   204f4:	e9cd 9700 	strd	r9, r7, [sp]
   204f8:	f105 020c 	add.w	r2, r5, #12
   204fc:	4641      	mov	r1, r8
   204fe:	4630      	mov	r0, r6
   20500:	f001 f8c6 	bl	21690 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   20504:	b938      	cbnz	r0, 20516 <z_impl_k_queue_get+0x9a>
   20506:	4b08      	ldr	r3, [pc, #32]	; (20528 <z_impl_k_queue_get+0xac>)
   20508:	689b      	ldr	r3, [r3, #8]
   2050a:	695c      	ldr	r4, [r3, #20]
   2050c:	e003      	b.n	20516 <z_impl_k_queue_get+0x9a>
	__asm__ volatile(
   2050e:	f388 8811 	msr	BASEPRI, r8
   20512:	f3bf 8f6f 	isb	sy
}
   20516:	4620      	mov	r0, r4
   20518:	b003      	add	sp, #12
   2051a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2051e:	bf00      	nop
   20520:	0002a819 	.word	0x0002a819
   20524:	0002a7df 	.word	0x0002a7df
   20528:	20002a64 	.word	0x20002a64

0002052c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2052c:	b538      	push	{r3, r4, r5, lr}
   2052e:	4604      	mov	r4, r0
	__asm__ volatile(
   20530:	f04f 0340 	mov.w	r3, #64	; 0x40
   20534:	f3ef 8511 	mrs	r5, BASEPRI
   20538:	f383 8812 	msr	BASEPRI_MAX, r3
   2053c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20540:	4814      	ldr	r0, [pc, #80]	; (20594 <z_impl_k_sem_give+0x68>)
   20542:	f7ff fd45 	bl	1ffd0 <z_spin_lock_valid>
   20546:	b940      	cbnz	r0, 2055a <z_impl_k_sem_give+0x2e>
   20548:	4913      	ldr	r1, [pc, #76]	; (20598 <z_impl_k_sem_give+0x6c>)
   2054a:	4814      	ldr	r0, [pc, #80]	; (2059c <z_impl_k_sem_give+0x70>)
   2054c:	2294      	movs	r2, #148	; 0x94
   2054e:	f005 fcf7 	bl	25f40 <assert_print>
   20552:	4811      	ldr	r0, [pc, #68]	; (20598 <z_impl_k_sem_give+0x6c>)
   20554:	2194      	movs	r1, #148	; 0x94
   20556:	f005 fcec 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   2055a:	480e      	ldr	r0, [pc, #56]	; (20594 <z_impl_k_sem_give+0x68>)
   2055c:	f7ff fd56 	bl	2000c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   20560:	4620      	mov	r0, r4
   20562:	f001 fa5d 	bl	21a20 <z_unpend_first_thread>

	if (thread != NULL) {
   20566:	b148      	cbz	r0, 2057c <z_impl_k_sem_give+0x50>
   20568:	2200      	movs	r2, #0
   2056a:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2056c:	f000 fe08 	bl	21180 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20570:	4629      	mov	r1, r5
   20572:	4808      	ldr	r0, [pc, #32]	; (20594 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   20574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20578:	f000 be36 	b.w	211e8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2057c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20580:	429a      	cmp	r2, r3
   20582:	bf18      	it	ne
   20584:	3301      	addne	r3, #1
   20586:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20588:	2102      	movs	r1, #2
   2058a:	f104 0010 	add.w	r0, r4, #16
   2058e:	f009 f83c 	bl	2960a <z_handle_obj_poll_events>
}
   20592:	e7ed      	b.n	20570 <z_impl_k_sem_give+0x44>
   20594:	20002a90 	.word	0x20002a90
   20598:	0002a819 	.word	0x0002a819
   2059c:	0002a7df 	.word	0x0002a7df

000205a0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   205a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   205a2:	4604      	mov	r4, r0
   205a4:	4616      	mov	r6, r2
   205a6:	461d      	mov	r5, r3
   205a8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   205ac:	b15b      	cbz	r3, 205c6 <z_impl_k_sem_take+0x26>
   205ae:	ea52 0305 	orrs.w	r3, r2, r5
   205b2:	d008      	beq.n	205c6 <z_impl_k_sem_take+0x26>
   205b4:	4926      	ldr	r1, [pc, #152]	; (20650 <z_impl_k_sem_take+0xb0>)
   205b6:	4827      	ldr	r0, [pc, #156]	; (20654 <z_impl_k_sem_take+0xb4>)
   205b8:	2279      	movs	r2, #121	; 0x79
   205ba:	f005 fcc1 	bl	25f40 <assert_print>
   205be:	4824      	ldr	r0, [pc, #144]	; (20650 <z_impl_k_sem_take+0xb0>)
   205c0:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   205c2:	f005 fcb6 	bl	25f32 <assert_post_action>
   205c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   205ca:	f3ef 8711 	mrs	r7, BASEPRI
   205ce:	f383 8812 	msr	BASEPRI_MAX, r3
   205d2:	f3bf 8f6f 	isb	sy
   205d6:	4820      	ldr	r0, [pc, #128]	; (20658 <z_impl_k_sem_take+0xb8>)
   205d8:	f7ff fcfa 	bl	1ffd0 <z_spin_lock_valid>
   205dc:	b938      	cbnz	r0, 205ee <z_impl_k_sem_take+0x4e>
   205de:	491f      	ldr	r1, [pc, #124]	; (2065c <z_impl_k_sem_take+0xbc>)
   205e0:	481c      	ldr	r0, [pc, #112]	; (20654 <z_impl_k_sem_take+0xb4>)
   205e2:	2294      	movs	r2, #148	; 0x94
   205e4:	f005 fcac 	bl	25f40 <assert_print>
   205e8:	2194      	movs	r1, #148	; 0x94
   205ea:	481c      	ldr	r0, [pc, #112]	; (2065c <z_impl_k_sem_take+0xbc>)
   205ec:	e7e9      	b.n	205c2 <z_impl_k_sem_take+0x22>
	z_spin_lock_set_owner(l);
   205ee:	481a      	ldr	r0, [pc, #104]	; (20658 <z_impl_k_sem_take+0xb8>)
   205f0:	f7ff fd0c 	bl	2000c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   205f4:	68a3      	ldr	r3, [r4, #8]
   205f6:	b19b      	cbz	r3, 20620 <z_impl_k_sem_take+0x80>
		sem->count--;
   205f8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   205fa:	4817      	ldr	r0, [pc, #92]	; (20658 <z_impl_k_sem_take+0xb8>)
   205fc:	60a3      	str	r3, [r4, #8]
   205fe:	f7ff fcf5 	bl	1ffec <z_spin_unlock_valid>
   20602:	b930      	cbnz	r0, 20612 <z_impl_k_sem_take+0x72>
   20604:	4915      	ldr	r1, [pc, #84]	; (2065c <z_impl_k_sem_take+0xbc>)
   20606:	4813      	ldr	r0, [pc, #76]	; (20654 <z_impl_k_sem_take+0xb4>)
   20608:	22c2      	movs	r2, #194	; 0xc2
   2060a:	f005 fc99 	bl	25f40 <assert_print>
   2060e:	21c2      	movs	r1, #194	; 0xc2
   20610:	e7eb      	b.n	205ea <z_impl_k_sem_take+0x4a>
	__asm__ volatile(
   20612:	f387 8811 	msr	BASEPRI, r7
   20616:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2061a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2061c:	b003      	add	sp, #12
   2061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20620:	ea56 0305 	orrs.w	r3, r6, r5
   20624:	d10b      	bne.n	2063e <z_impl_k_sem_take+0x9e>
   20626:	480c      	ldr	r0, [pc, #48]	; (20658 <z_impl_k_sem_take+0xb8>)
   20628:	f7ff fce0 	bl	1ffec <z_spin_unlock_valid>
   2062c:	2800      	cmp	r0, #0
   2062e:	d0e9      	beq.n	20604 <z_impl_k_sem_take+0x64>
   20630:	f387 8811 	msr	BASEPRI, r7
   20634:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20638:	f06f 000f 	mvn.w	r0, #15
   2063c:	e7ee      	b.n	2061c <z_impl_k_sem_take+0x7c>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2063e:	e9cd 6500 	strd	r6, r5, [sp]
   20642:	4622      	mov	r2, r4
   20644:	4639      	mov	r1, r7
   20646:	4804      	ldr	r0, [pc, #16]	; (20658 <z_impl_k_sem_take+0xb8>)
   20648:	f001 f822 	bl	21690 <z_pend_curr>
	return ret;
   2064c:	e7e6      	b.n	2061c <z_impl_k_sem_take+0x7c>
   2064e:	bf00      	nop
   20650:	0002d701 	.word	0x0002d701
   20654:	0002a7df 	.word	0x0002a7df
   20658:	20002a90 	.word	0x20002a90
   2065c:	0002a819 	.word	0x0002a819

00020660 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   20660:	b570      	push	{r4, r5, r6, lr}
   20662:	4604      	mov	r4, r0
	__asm__ volatile(
   20664:	f04f 0340 	mov.w	r3, #64	; 0x40
   20668:	f3ef 8511 	mrs	r5, BASEPRI
   2066c:	f383 8812 	msr	BASEPRI_MAX, r3
   20670:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20674:	4812      	ldr	r0, [pc, #72]	; (206c0 <z_impl_k_sem_reset+0x60>)
   20676:	f7ff fcab 	bl	1ffd0 <z_spin_lock_valid>
   2067a:	b940      	cbnz	r0, 2068e <z_impl_k_sem_reset+0x2e>
   2067c:	4911      	ldr	r1, [pc, #68]	; (206c4 <z_impl_k_sem_reset+0x64>)
   2067e:	4812      	ldr	r0, [pc, #72]	; (206c8 <z_impl_k_sem_reset+0x68>)
   20680:	2294      	movs	r2, #148	; 0x94
   20682:	f005 fc5d 	bl	25f40 <assert_print>
   20686:	480f      	ldr	r0, [pc, #60]	; (206c4 <z_impl_k_sem_reset+0x64>)
   20688:	2194      	movs	r1, #148	; 0x94
   2068a:	f005 fc52 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   2068e:	480c      	ldr	r0, [pc, #48]	; (206c0 <z_impl_k_sem_reset+0x60>)
   20690:	f7ff fcbc 	bl	2000c <z_spin_lock_set_owner>
   20694:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   20698:	4620      	mov	r0, r4
   2069a:	f001 f9c1 	bl	21a20 <z_unpend_first_thread>
		if (thread == NULL) {
   2069e:	b118      	cbz	r0, 206a8 <z_impl_k_sem_reset+0x48>
   206a0:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   206a2:	f000 fd6d 	bl	21180 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   206a6:	e7f7      	b.n	20698 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   206a8:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   206aa:	2102      	movs	r1, #2
   206ac:	f104 0010 	add.w	r0, r4, #16
   206b0:	f008 ffab 	bl	2960a <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   206b4:	4629      	mov	r1, r5
   206b6:	4802      	ldr	r0, [pc, #8]	; (206c0 <z_impl_k_sem_reset+0x60>)
}
   206b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   206bc:	f000 bd94 	b.w	211e8 <z_reschedule>
   206c0:	20002a90 	.word	0x20002a90
   206c4:	0002a819 	.word	0x0002a819
   206c8:	0002a7df 	.word	0x0002a7df

000206cc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   206cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   206ce:	4b09      	ldr	r3, [pc, #36]	; (206f4 <k_sys_work_q_init+0x28>)
   206d0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   206d2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   206d4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   206d6:	9300      	str	r3, [sp, #0]
   206d8:	4907      	ldr	r1, [pc, #28]	; (206f8 <k_sys_work_q_init+0x2c>)
   206da:	4808      	ldr	r0, [pc, #32]	; (206fc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   206dc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   206e0:	f04f 33ff 	mov.w	r3, #4294967295
   206e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   206e8:	f000 fa66 	bl	20bb8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   206ec:	4620      	mov	r0, r4
   206ee:	b004      	add	sp, #16
   206f0:	bd10      	pop	{r4, pc}
   206f2:	bf00      	nop
   206f4:	0002d721 	.word	0x0002d721
   206f8:	20007200 	.word	0x20007200
   206fc:	20001f68 	.word	0x20001f68

00020700 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   20700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20704:	4e68      	ldr	r6, [pc, #416]	; (208a8 <work_queue_main+0x1a8>)
	return list->head;
   20706:	4f69      	ldr	r7, [pc, #420]	; (208ac <work_queue_main+0x1ac>)
   20708:	b085      	sub	sp, #20
   2070a:	4604      	mov	r4, r0
   2070c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20710:	f3ef 8811 	mrs	r8, BASEPRI
   20714:	f383 8812 	msr	BASEPRI_MAX, r3
   20718:	f3bf 8f6f 	isb	sy
   2071c:	4630      	mov	r0, r6
   2071e:	f7ff fc57 	bl	1ffd0 <z_spin_lock_valid>
   20722:	b940      	cbnz	r0, 20736 <work_queue_main+0x36>
   20724:	4962      	ldr	r1, [pc, #392]	; (208b0 <work_queue_main+0x1b0>)
   20726:	4863      	ldr	r0, [pc, #396]	; (208b4 <work_queue_main+0x1b4>)
   20728:	2294      	movs	r2, #148	; 0x94
   2072a:	f005 fc09 	bl	25f40 <assert_print>
   2072e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20730:	485f      	ldr	r0, [pc, #380]	; (208b0 <work_queue_main+0x1b0>)
   20732:	f005 fbfe 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   20736:	4630      	mov	r0, r6
   20738:	f7ff fc68 	bl	2000c <z_spin_lock_set_owner>
   2073c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   20740:	b9a5      	cbnz	r5, 2076c <work_queue_main+0x6c>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   20742:	2102      	movs	r1, #2
   20744:	f104 0098 	add.w	r0, r4, #152	; 0x98
   20748:	f008 fe15 	bl	29376 <flag_test_and_clear>
   2074c:	bb80      	cbnz	r0, 207b0 <work_queue_main+0xb0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2074e:	2300      	movs	r3, #0
   20750:	9302      	str	r3, [sp, #8]
   20752:	f04f 32ff 	mov.w	r2, #4294967295
   20756:	f04f 33ff 	mov.w	r3, #4294967295
   2075a:	e9cd 2300 	strd	r2, r3, [sp]
   2075e:	4641      	mov	r1, r8
   20760:	f104 0288 	add.w	r2, r4, #136	; 0x88
   20764:	4630      	mov	r0, r6
   20766:	f001 fbc3 	bl	21ef0 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   2076a:	e7cf      	b.n	2070c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2076c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   20770:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   20772:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20776:	4295      	cmp	r5, r2
	list->tail = node;
   20778:	bf08      	it	eq
   2077a:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   2077e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   20782:	f043 0302 	orr.w	r3, r3, #2
   20786:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2078a:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   2078c:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   20790:	f023 0304 	bic.w	r3, r3, #4
   20794:	f043 0301 	orr.w	r3, r3, #1
   20798:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2079a:	4630      	mov	r0, r6
   2079c:	f7ff fc26 	bl	1ffec <z_spin_unlock_valid>
   207a0:	b980      	cbnz	r0, 207c4 <work_queue_main+0xc4>
   207a2:	4943      	ldr	r1, [pc, #268]	; (208b0 <work_queue_main+0x1b0>)
   207a4:	4843      	ldr	r0, [pc, #268]	; (208b4 <work_queue_main+0x1b4>)
   207a6:	22c2      	movs	r2, #194	; 0xc2
   207a8:	f005 fbca 	bl	25f40 <assert_print>
   207ac:	21c2      	movs	r1, #194	; 0xc2
   207ae:	e7bf      	b.n	20730 <work_queue_main+0x30>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   207b0:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   207b4:	2200      	movs	r2, #0
   207b6:	2101      	movs	r1, #1
   207b8:	4628      	mov	r0, r5
   207ba:	f001 fb4d 	bl	21e58 <z_sched_wake>
   207be:	2800      	cmp	r0, #0
   207c0:	d1f8      	bne.n	207b4 <work_queue_main+0xb4>
   207c2:	e7c4      	b.n	2074e <work_queue_main+0x4e>
	__asm__ volatile(
   207c4:	f388 8811 	msr	BASEPRI, r8
   207c8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   207cc:	f1b9 0f00 	cmp.w	r9, #0
   207d0:	d109      	bne.n	207e6 <work_queue_main+0xe6>
   207d2:	4939      	ldr	r1, [pc, #228]	; (208b8 <work_queue_main+0x1b8>)
   207d4:	4837      	ldr	r0, [pc, #220]	; (208b4 <work_queue_main+0x1b4>)
   207d6:	f240 229b 	movw	r2, #667	; 0x29b
   207da:	f005 fbb1 	bl	25f40 <assert_print>
   207de:	4836      	ldr	r0, [pc, #216]	; (208b8 <work_queue_main+0x1b8>)
   207e0:	f240 219b 	movw	r1, #667	; 0x29b
   207e4:	e7a5      	b.n	20732 <work_queue_main+0x32>
		handler(work);
   207e6:	4628      	mov	r0, r5
   207e8:	47c8      	blx	r9
	__asm__ volatile(
   207ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   207ee:	f3ef 8a11 	mrs	sl, BASEPRI
   207f2:	f383 8812 	msr	BASEPRI_MAX, r3
   207f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   207fa:	4630      	mov	r0, r6
   207fc:	f7ff fbe8 	bl	1ffd0 <z_spin_lock_valid>
   20800:	2800      	cmp	r0, #0
   20802:	d08f      	beq.n	20724 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   20804:	4630      	mov	r0, r6
   20806:	f7ff fc01 	bl	2000c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   2080a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2080c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2080e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20812:	d417      	bmi.n	20844 <work_queue_main+0x144>
	*flagp &= ~BIT(bit);
   20814:	60ea      	str	r2, [r5, #12]
   20816:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2081a:	f023 0302 	bic.w	r3, r3, #2
   2081e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20822:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   20824:	f3c3 2500 	ubfx	r5, r3, #8, #1
   20828:	f7ff fbe0 	bl	1ffec <z_spin_unlock_valid>
   2082c:	2800      	cmp	r0, #0
   2082e:	d0b8      	beq.n	207a2 <work_queue_main+0xa2>
	__asm__ volatile(
   20830:	f38a 8811 	msr	BASEPRI, sl
   20834:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   20838:	2d00      	cmp	r5, #0
   2083a:	f47f af67 	bne.w	2070c <work_queue_main+0xc>
	z_impl_k_yield();
   2083e:	f001 f939 	bl	21ab4 <z_impl_k_yield>
}
   20842:	e763      	b.n	2070c <work_queue_main+0xc>
	return list->head;
   20844:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   20846:	f023 0303 	bic.w	r3, r3, #3
   2084a:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2084c:	2800      	cmp	r0, #0
   2084e:	d0e2      	beq.n	20816 <work_queue_main+0x116>
	return node->next;
   20850:	f04f 0800 	mov.w	r8, #0
   20854:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   20858:	46c3      	mov	fp, r8
   2085a:	2800      	cmp	r0, #0
   2085c:	d0db      	beq.n	20816 <work_queue_main+0x116>
		if (wc->work == work) {
   2085e:	6843      	ldr	r3, [r0, #4]
   20860:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   20862:	4602      	mov	r2, r0
		if (wc->work == work) {
   20864:	d10d      	bne.n	20882 <work_queue_main+0x182>
	return node->next;
   20866:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   20868:	f1b8 0f00 	cmp.w	r8, #0
   2086c:	d112      	bne.n	20894 <work_queue_main+0x194>
   2086e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   20870:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   20872:	4283      	cmp	r3, r0
   20874:	d100      	bne.n	20878 <work_queue_main+0x178>
	list->tail = node;
   20876:	607a      	str	r2, [r7, #4]
	parent->next = child;
   20878:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   2087c:	f7ff fe56 	bl	2052c <z_impl_k_sem_give>
}
   20880:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20882:	f1b9 0f00 	cmp.w	r9, #0
   20886:	d00d      	beq.n	208a4 <work_queue_main+0x1a4>
	return node->next;
   20888:	f8d9 3000 	ldr.w	r3, [r9]
   2088c:	4648      	mov	r0, r9
   2088e:	4690      	mov	r8, r2
   20890:	4699      	mov	r9, r3
   20892:	e7e2      	b.n	2085a <work_queue_main+0x15a>
	parent->next = child;
   20894:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   20898:	687b      	ldr	r3, [r7, #4]
   2089a:	4283      	cmp	r3, r0
	list->tail = node;
   2089c:	bf08      	it	eq
   2089e:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   208a2:	e7e9      	b.n	20878 <work_queue_main+0x178>
   208a4:	464b      	mov	r3, r9
   208a6:	e7f1      	b.n	2088c <work_queue_main+0x18c>
   208a8:	20002a9c 	.word	0x20002a9c
   208ac:	20002a94 	.word	0x20002a94
   208b0:	0002a819 	.word	0x0002a819
   208b4:	0002a7df 	.word	0x0002a7df
   208b8:	0002d72a 	.word	0x0002d72a

000208bc <cancel_sync_locked>:
{
   208bc:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   208be:	68c3      	ldr	r3, [r0, #12]
   208c0:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   208c4:	079b      	lsls	r3, r3, #30
{
   208c6:	4605      	mov	r5, r0
   208c8:	460c      	mov	r4, r1
	if (ret) {
   208ca:	d50d      	bpl.n	208e8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   208cc:	2201      	movs	r2, #1
   208ce:	2100      	movs	r1, #0
   208d0:	f104 0008 	add.w	r0, r4, #8
   208d4:	f008 fd3f 	bl	29356 <z_impl_k_sem_init>
	parent->next = child;
   208d8:	2300      	movs	r3, #0
   208da:	6023      	str	r3, [r4, #0]
	return list->tail;
   208dc:	4b05      	ldr	r3, [pc, #20]	; (208f4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   208de:	6065      	str	r5, [r4, #4]
   208e0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   208e2:	b91a      	cbnz	r2, 208ec <cancel_sync_locked+0x30>
	list->head = node;
   208e4:	e9c3 4400 	strd	r4, r4, [r3]
}
   208e8:	4630      	mov	r0, r6
   208ea:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   208ec:	6014      	str	r4, [r2, #0]
	list->tail = node;
   208ee:	605c      	str	r4, [r3, #4]
}
   208f0:	e7fa      	b.n	208e8 <cancel_sync_locked+0x2c>
   208f2:	bf00      	nop
   208f4:	20002a94 	.word	0x20002a94

000208f8 <submit_to_queue_locked>:
{
   208f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   208fa:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   208fc:	079a      	lsls	r2, r3, #30
{
   208fe:	4604      	mov	r4, r0
   20900:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20902:	f3c3 0640 	ubfx	r6, r3, #1, #1
   20906:	d438      	bmi.n	2097a <submit_to_queue_locked+0x82>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   20908:	075b      	lsls	r3, r3, #29
   2090a:	d424      	bmi.n	20956 <submit_to_queue_locked+0x5e>
		if (*queuep == NULL) {
   2090c:	680b      	ldr	r3, [r1, #0]
   2090e:	b90b      	cbnz	r3, 20914 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   20910:	6883      	ldr	r3, [r0, #8]
   20912:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   20914:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   20916:	07dd      	lsls	r5, r3, #31
   20918:	d520      	bpl.n	2095c <submit_to_queue_locked+0x64>
			__ASSERT_NO_MSG(work->queue != NULL);
   2091a:	68a3      	ldr	r3, [r4, #8]
   2091c:	b953      	cbnz	r3, 20934 <submit_to_queue_locked+0x3c>
   2091e:	4928      	ldr	r1, [pc, #160]	; (209c0 <submit_to_queue_locked+0xc8>)
   20920:	4828      	ldr	r0, [pc, #160]	; (209c4 <submit_to_queue_locked+0xcc>)
   20922:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   20926:	f005 fb0b 	bl	25f40 <assert_print>
   2092a:	4825      	ldr	r0, [pc, #148]	; (209c0 <submit_to_queue_locked+0xc8>)
   2092c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   20930:	f005 faff 	bl	25f32 <assert_post_action>
			*queuep = work->queue;
   20934:	603b      	str	r3, [r7, #0]
			ret = 2;
   20936:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   20938:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   2093a:	2d00      	cmp	r5, #0
   2093c:	d03c      	beq.n	209b8 <submit_to_queue_locked+0xc0>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2093e:	4b22      	ldr	r3, [pc, #136]	; (209c8 <submit_to_queue_locked+0xd0>)
   20940:	689b      	ldr	r3, [r3, #8]
   20942:	42ab      	cmp	r3, r5
   20944:	d00c      	beq.n	20960 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   20946:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2094a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2094c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20950:	d416      	bmi.n	20980 <submit_to_queue_locked+0x88>
		ret = -EBUSY;
   20952:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   20956:	2300      	movs	r3, #0
   20958:	603b      	str	r3, [r7, #0]
	return ret;
   2095a:	e027      	b.n	209ac <submit_to_queue_locked+0xb4>
		ret = 1;
   2095c:	2601      	movs	r6, #1
   2095e:	e7eb      	b.n	20938 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   20960:	f008 fca8 	bl	292b4 <k_is_in_isr>
   20964:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   20968:	2800      	cmp	r0, #0
   2096a:	d1ee      	bne.n	2094a <submit_to_queue_locked+0x52>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2096c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2096e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20972:	d5ee      	bpl.n	20952 <submit_to_queue_locked+0x5a>
	} else if (plugged && !draining) {
   20974:	b152      	cbz	r2, 2098c <submit_to_queue_locked+0x94>
   20976:	075b      	lsls	r3, r3, #29
   20978:	d408      	bmi.n	2098c <submit_to_queue_locked+0x94>
		ret = -EBUSY;
   2097a:	f06f 060f 	mvn.w	r6, #15
   2097e:	e7ea      	b.n	20956 <submit_to_queue_locked+0x5e>
	} else if (draining && !chained) {
   20980:	2a00      	cmp	r2, #0
   20982:	d1fa      	bne.n	2097a <submit_to_queue_locked+0x82>
	return (*flagp & BIT(bit)) != 0U;
   20984:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   20988:	2b00      	cmp	r3, #0
   2098a:	d1f6      	bne.n	2097a <submit_to_queue_locked+0x82>
	parent->next = child;
   2098c:	2300      	movs	r3, #0
   2098e:	6023      	str	r3, [r4, #0]
	return list->tail;
   20990:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   20994:	b963      	cbnz	r3, 209b0 <submit_to_queue_locked+0xb8>
	list->head = node;
   20996:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2099a:	4628      	mov	r0, r5
   2099c:	f008 fd04 	bl	293a8 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   209a0:	68e3      	ldr	r3, [r4, #12]
   209a2:	f043 0304 	orr.w	r3, r3, #4
   209a6:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   209a8:	683b      	ldr	r3, [r7, #0]
   209aa:	60a3      	str	r3, [r4, #8]
}
   209ac:	4630      	mov	r0, r6
   209ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   209b0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   209b2:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   209b6:	e7f0      	b.n	2099a <submit_to_queue_locked+0xa2>
		return -EINVAL;
   209b8:	f06f 0615 	mvn.w	r6, #21
   209bc:	e7cb      	b.n	20956 <submit_to_queue_locked+0x5e>
   209be:	bf00      	nop
   209c0:	0002d72a 	.word	0x0002d72a
   209c4:	0002a7df 	.word	0x0002a7df
   209c8:	20002a64 	.word	0x20002a64

000209cc <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   209cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   209ce:	4604      	mov	r4, r0
	__asm__ volatile(
   209d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   209d4:	f3ef 8511 	mrs	r5, BASEPRI
   209d8:	f383 8812 	msr	BASEPRI_MAX, r3
   209dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   209e0:	4817      	ldr	r0, [pc, #92]	; (20a40 <work_timeout+0x74>)
   209e2:	f7ff faf5 	bl	1ffd0 <z_spin_lock_valid>
   209e6:	b940      	cbnz	r0, 209fa <work_timeout+0x2e>
   209e8:	4916      	ldr	r1, [pc, #88]	; (20a44 <work_timeout+0x78>)
   209ea:	4817      	ldr	r0, [pc, #92]	; (20a48 <work_timeout+0x7c>)
   209ec:	2294      	movs	r2, #148	; 0x94
   209ee:	f005 faa7 	bl	25f40 <assert_print>
   209f2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   209f4:	4813      	ldr	r0, [pc, #76]	; (20a44 <work_timeout+0x78>)
   209f6:	f005 fa9c 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   209fa:	4811      	ldr	r0, [pc, #68]	; (20a40 <work_timeout+0x74>)
   209fc:	f7ff fb06 	bl	2000c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   20a00:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20a02:	2103      	movs	r1, #3
   20a04:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   20a06:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20a08:	f1a4 0610 	sub.w	r6, r4, #16
   20a0c:	f008 fcb3 	bl	29376 <flag_test_and_clear>
   20a10:	b128      	cbz	r0, 20a1e <work_timeout+0x52>
		queue = dw->queue;
   20a12:	69a3      	ldr	r3, [r4, #24]
   20a14:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   20a16:	a901      	add	r1, sp, #4
   20a18:	4630      	mov	r0, r6
   20a1a:	f7ff ff6d 	bl	208f8 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a1e:	4808      	ldr	r0, [pc, #32]	; (20a40 <work_timeout+0x74>)
   20a20:	f7ff fae4 	bl	1ffec <z_spin_unlock_valid>
   20a24:	b930      	cbnz	r0, 20a34 <work_timeout+0x68>
   20a26:	4907      	ldr	r1, [pc, #28]	; (20a44 <work_timeout+0x78>)
   20a28:	4807      	ldr	r0, [pc, #28]	; (20a48 <work_timeout+0x7c>)
   20a2a:	22c2      	movs	r2, #194	; 0xc2
   20a2c:	f005 fa88 	bl	25f40 <assert_print>
   20a30:	21c2      	movs	r1, #194	; 0xc2
   20a32:	e7df      	b.n	209f4 <work_timeout+0x28>
	__asm__ volatile(
   20a34:	f385 8811 	msr	BASEPRI, r5
   20a38:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   20a3c:	b002      	add	sp, #8
   20a3e:	bd70      	pop	{r4, r5, r6, pc}
   20a40:	20002a9c 	.word	0x20002a9c
   20a44:	0002a819 	.word	0x0002a819
   20a48:	0002a7df 	.word	0x0002a7df

00020a4c <k_work_init>:
{
   20a4c:	b538      	push	{r3, r4, r5, lr}
   20a4e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   20a50:	4604      	mov	r4, r0
   20a52:	b940      	cbnz	r0, 20a66 <k_work_init+0x1a>
   20a54:	490b      	ldr	r1, [pc, #44]	; (20a84 <k_work_init+0x38>)
   20a56:	480c      	ldr	r0, [pc, #48]	; (20a88 <k_work_init+0x3c>)
   20a58:	2289      	movs	r2, #137	; 0x89
   20a5a:	f005 fa71 	bl	25f40 <assert_print>
   20a5e:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   20a60:	4808      	ldr	r0, [pc, #32]	; (20a84 <k_work_init+0x38>)
   20a62:	f005 fa66 	bl	25f32 <assert_post_action>
   20a66:	b931      	cbnz	r1, 20a76 <k_work_init+0x2a>
   20a68:	4906      	ldr	r1, [pc, #24]	; (20a84 <k_work_init+0x38>)
   20a6a:	4807      	ldr	r0, [pc, #28]	; (20a88 <k_work_init+0x3c>)
   20a6c:	228a      	movs	r2, #138	; 0x8a
   20a6e:	f005 fa67 	bl	25f40 <assert_print>
   20a72:	218a      	movs	r1, #138	; 0x8a
   20a74:	e7f4      	b.n	20a60 <k_work_init+0x14>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   20a76:	2210      	movs	r2, #16
   20a78:	2100      	movs	r1, #0
   20a7a:	f006 f90a 	bl	26c92 <memset>
   20a7e:	6065      	str	r5, [r4, #4]
}
   20a80:	bd38      	pop	{r3, r4, r5, pc}
   20a82:	bf00      	nop
   20a84:	0002d72a 	.word	0x0002d72a
   20a88:	0002a7df 	.word	0x0002a7df

00020a8c <k_work_busy_get>:
{
   20a8c:	b538      	push	{r3, r4, r5, lr}
   20a8e:	4604      	mov	r4, r0
	__asm__ volatile(
   20a90:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a94:	f3ef 8511 	mrs	r5, BASEPRI
   20a98:	f383 8812 	msr	BASEPRI_MAX, r3
   20a9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20aa0:	4811      	ldr	r0, [pc, #68]	; (20ae8 <k_work_busy_get+0x5c>)
   20aa2:	f7ff fa95 	bl	1ffd0 <z_spin_lock_valid>
   20aa6:	b940      	cbnz	r0, 20aba <k_work_busy_get+0x2e>
   20aa8:	4910      	ldr	r1, [pc, #64]	; (20aec <k_work_busy_get+0x60>)
   20aaa:	4811      	ldr	r0, [pc, #68]	; (20af0 <k_work_busy_get+0x64>)
   20aac:	2294      	movs	r2, #148	; 0x94
   20aae:	f005 fa47 	bl	25f40 <assert_print>
   20ab2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ab4:	480d      	ldr	r0, [pc, #52]	; (20aec <k_work_busy_get+0x60>)
   20ab6:	f005 fa3c 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   20aba:	480b      	ldr	r0, [pc, #44]	; (20ae8 <k_work_busy_get+0x5c>)
   20abc:	f7ff faa6 	bl	2000c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   20ac0:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ac2:	4809      	ldr	r0, [pc, #36]	; (20ae8 <k_work_busy_get+0x5c>)
   20ac4:	f004 040f 	and.w	r4, r4, #15
   20ac8:	f7ff fa90 	bl	1ffec <z_spin_unlock_valid>
   20acc:	b930      	cbnz	r0, 20adc <k_work_busy_get+0x50>
   20ace:	4907      	ldr	r1, [pc, #28]	; (20aec <k_work_busy_get+0x60>)
   20ad0:	4807      	ldr	r0, [pc, #28]	; (20af0 <k_work_busy_get+0x64>)
   20ad2:	22c2      	movs	r2, #194	; 0xc2
   20ad4:	f005 fa34 	bl	25f40 <assert_print>
   20ad8:	21c2      	movs	r1, #194	; 0xc2
   20ada:	e7eb      	b.n	20ab4 <k_work_busy_get+0x28>
	__asm__ volatile(
   20adc:	f385 8811 	msr	BASEPRI, r5
   20ae0:	f3bf 8f6f 	isb	sy
}
   20ae4:	4620      	mov	r0, r4
   20ae6:	bd38      	pop	{r3, r4, r5, pc}
   20ae8:	20002a9c 	.word	0x20002a9c
   20aec:	0002a819 	.word	0x0002a819
   20af0:	0002a7df 	.word	0x0002a7df

00020af4 <z_work_submit_to_queue>:
{
   20af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   20af6:	460c      	mov	r4, r1
{
   20af8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   20afa:	b951      	cbnz	r1, 20b12 <z_work_submit_to_queue+0x1e>
   20afc:	491c      	ldr	r1, [pc, #112]	; (20b70 <z_work_submit_to_queue+0x7c>)
   20afe:	481d      	ldr	r0, [pc, #116]	; (20b74 <z_work_submit_to_queue+0x80>)
   20b00:	f44f 72ba 	mov.w	r2, #372	; 0x174
   20b04:	f005 fa1c 	bl	25f40 <assert_print>
   20b08:	4819      	ldr	r0, [pc, #100]	; (20b70 <z_work_submit_to_queue+0x7c>)
   20b0a:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b0e:	f005 fa10 	bl	25f32 <assert_post_action>
	__asm__ volatile(
   20b12:	f04f 0340 	mov.w	r3, #64	; 0x40
   20b16:	f3ef 8511 	mrs	r5, BASEPRI
   20b1a:	f383 8812 	msr	BASEPRI_MAX, r3
   20b1e:	f3bf 8f6f 	isb	sy
   20b22:	4815      	ldr	r0, [pc, #84]	; (20b78 <z_work_submit_to_queue+0x84>)
   20b24:	f7ff fa54 	bl	1ffd0 <z_spin_lock_valid>
   20b28:	b938      	cbnz	r0, 20b3a <z_work_submit_to_queue+0x46>
   20b2a:	4914      	ldr	r1, [pc, #80]	; (20b7c <z_work_submit_to_queue+0x88>)
   20b2c:	4811      	ldr	r0, [pc, #68]	; (20b74 <z_work_submit_to_queue+0x80>)
   20b2e:	2294      	movs	r2, #148	; 0x94
   20b30:	f005 fa06 	bl	25f40 <assert_print>
   20b34:	2194      	movs	r1, #148	; 0x94
   20b36:	4811      	ldr	r0, [pc, #68]	; (20b7c <z_work_submit_to_queue+0x88>)
   20b38:	e7e9      	b.n	20b0e <z_work_submit_to_queue+0x1a>
	z_spin_lock_set_owner(l);
   20b3a:	480f      	ldr	r0, [pc, #60]	; (20b78 <z_work_submit_to_queue+0x84>)
   20b3c:	f7ff fa66 	bl	2000c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   20b40:	4620      	mov	r0, r4
   20b42:	a901      	add	r1, sp, #4
   20b44:	f7ff fed8 	bl	208f8 <submit_to_queue_locked>
   20b48:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b4a:	480b      	ldr	r0, [pc, #44]	; (20b78 <z_work_submit_to_queue+0x84>)
   20b4c:	f7ff fa4e 	bl	1ffec <z_spin_unlock_valid>
   20b50:	b930      	cbnz	r0, 20b60 <z_work_submit_to_queue+0x6c>
   20b52:	490a      	ldr	r1, [pc, #40]	; (20b7c <z_work_submit_to_queue+0x88>)
   20b54:	4807      	ldr	r0, [pc, #28]	; (20b74 <z_work_submit_to_queue+0x80>)
   20b56:	22c2      	movs	r2, #194	; 0xc2
   20b58:	f005 f9f2 	bl	25f40 <assert_print>
   20b5c:	21c2      	movs	r1, #194	; 0xc2
   20b5e:	e7ea      	b.n	20b36 <z_work_submit_to_queue+0x42>
	__asm__ volatile(
   20b60:	f385 8811 	msr	BASEPRI, r5
   20b64:	f3bf 8f6f 	isb	sy
}
   20b68:	4620      	mov	r0, r4
   20b6a:	b003      	add	sp, #12
   20b6c:	bd30      	pop	{r4, r5, pc}
   20b6e:	bf00      	nop
   20b70:	0002d72a 	.word	0x0002d72a
   20b74:	0002a7df 	.word	0x0002a7df
   20b78:	20002a9c 	.word	0x20002a9c
   20b7c:	0002a819 	.word	0x0002a819

00020b80 <k_work_submit>:
{
   20b80:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   20b82:	4801      	ldr	r0, [pc, #4]	; (20b88 <k_work_submit+0x8>)
   20b84:	f008 bc4a 	b.w	2941c <k_work_submit_to_queue>
   20b88:	20001f68 	.word	0x20001f68

00020b8c <k_work_queue_init>:
{
   20b8c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   20b8e:	b950      	cbnz	r0, 20ba6 <k_work_queue_init+0x1a>
   20b90:	4907      	ldr	r1, [pc, #28]	; (20bb0 <k_work_queue_init+0x24>)
   20b92:	4808      	ldr	r0, [pc, #32]	; (20bb4 <k_work_queue_init+0x28>)
   20b94:	f240 22b9 	movw	r2, #697	; 0x2b9
   20b98:	f005 f9d2 	bl	25f40 <assert_print>
   20b9c:	4804      	ldr	r0, [pc, #16]	; (20bb0 <k_work_queue_init+0x24>)
   20b9e:	f240 21b9 	movw	r1, #697	; 0x2b9
   20ba2:	f005 f9c6 	bl	25f32 <assert_post_action>
	*queue = (struct k_work_q) {
   20ba6:	22a0      	movs	r2, #160	; 0xa0
   20ba8:	2100      	movs	r1, #0
   20baa:	f006 f872 	bl	26c92 <memset>
}
   20bae:	bd08      	pop	{r3, pc}
   20bb0:	0002d72a 	.word	0x0002d72a
   20bb4:	0002a7df 	.word	0x0002a7df

00020bb8 <k_work_queue_start>:
{
   20bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   20bba:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   20bbc:	4604      	mov	r4, r0
{
   20bbe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   20bc0:	b950      	cbnz	r0, 20bd8 <k_work_queue_start+0x20>
   20bc2:	492a      	ldr	r1, [pc, #168]	; (20c6c <k_work_queue_start+0xb4>)
   20bc4:	482a      	ldr	r0, [pc, #168]	; (20c70 <k_work_queue_start+0xb8>)
   20bc6:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   20bca:	f005 f9b9 	bl	25f40 <assert_print>
   20bce:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   20bd2:	4826      	ldr	r0, [pc, #152]	; (20c6c <k_work_queue_start+0xb4>)
   20bd4:	f005 f9ad 	bl	25f32 <assert_post_action>
   20bd8:	b941      	cbnz	r1, 20bec <k_work_queue_start+0x34>
   20bda:	4924      	ldr	r1, [pc, #144]	; (20c6c <k_work_queue_start+0xb4>)
   20bdc:	4824      	ldr	r0, [pc, #144]	; (20c70 <k_work_queue_start+0xb8>)
   20bde:	f240 22c9 	movw	r2, #713	; 0x2c9
   20be2:	f005 f9ad 	bl	25f40 <assert_print>
   20be6:	f240 21c9 	movw	r1, #713	; 0x2c9
   20bea:	e7f2      	b.n	20bd2 <k_work_queue_start+0x1a>
	return (*flagp & BIT(bit)) != 0U;
   20bec:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   20bf0:	f010 0001 	ands.w	r0, r0, #1
   20bf4:	d008      	beq.n	20c08 <k_work_queue_start+0x50>
   20bf6:	491d      	ldr	r1, [pc, #116]	; (20c6c <k_work_queue_start+0xb4>)
   20bf8:	481d      	ldr	r0, [pc, #116]	; (20c70 <k_work_queue_start+0xb8>)
   20bfa:	f240 22ca 	movw	r2, #714	; 0x2ca
   20bfe:	f005 f99f 	bl	25f40 <assert_print>
   20c02:	f240 21ca 	movw	r1, #714	; 0x2ca
   20c06:	e7e4      	b.n	20bd2 <k_work_queue_start+0x1a>
	list->tail = NULL;
   20c08:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   20c0c:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   20c10:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   20c14:	f104 0090 	add.w	r0, r4, #144	; 0x90
   20c18:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   20c1c:	b31d      	cbz	r5, 20c66 <k_work_queue_start+0xae>
   20c1e:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   20c20:	2800      	cmp	r0, #0
   20c22:	f240 1001 	movw	r0, #257	; 0x101
   20c26:	bf08      	it	eq
   20c28:	2001      	moveq	r0, #1
	*flagp = flags;
   20c2a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20c2e:	2000      	movs	r0, #0
   20c30:	f04f 36ff 	mov.w	r6, #4294967295
   20c34:	f04f 37ff 	mov.w	r7, #4294967295
   20c38:	e9cd 3003 	strd	r3, r0, [sp, #12]
   20c3c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   20c40:	e9cd 6706 	strd	r6, r7, [sp, #24]
   20c44:	4b0b      	ldr	r3, [pc, #44]	; (20c74 <k_work_queue_start+0xbc>)
   20c46:	9400      	str	r4, [sp, #0]
   20c48:	4620      	mov	r0, r4
   20c4a:	f7ff f90b 	bl	1fe64 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   20c4e:	b125      	cbz	r5, 20c5a <k_work_queue_start+0xa2>
   20c50:	6829      	ldr	r1, [r5, #0]
   20c52:	b111      	cbz	r1, 20c5a <k_work_queue_start+0xa2>
	return z_impl_k_thread_name_set(thread, str);
   20c54:	4620      	mov	r0, r4
   20c56:	f008 fb33 	bl	292c0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   20c5a:	4620      	mov	r0, r4
}
   20c5c:	b009      	add	sp, #36	; 0x24
   20c5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20c62:	f008 bb32 	b.w	292ca <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   20c66:	2001      	movs	r0, #1
   20c68:	e7df      	b.n	20c2a <k_work_queue_start+0x72>
   20c6a:	bf00      	nop
   20c6c:	0002d72a 	.word	0x0002d72a
   20c70:	0002a7df 	.word	0x0002a7df
   20c74:	00020701 	.word	0x00020701

00020c78 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   20c78:	b538      	push	{r3, r4, r5, lr}
   20c7a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   20c7c:	4604      	mov	r4, r0
   20c7e:	b950      	cbnz	r0, 20c96 <k_work_init_delayable+0x1e>
   20c80:	490e      	ldr	r1, [pc, #56]	; (20cbc <k_work_init_delayable+0x44>)
   20c82:	480f      	ldr	r0, [pc, #60]	; (20cc0 <k_work_init_delayable+0x48>)
   20c84:	f44f 7250 	mov.w	r2, #832	; 0x340
   20c88:	f005 f95a 	bl	25f40 <assert_print>
   20c8c:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   20c90:	480a      	ldr	r0, [pc, #40]	; (20cbc <k_work_init_delayable+0x44>)
   20c92:	f005 f94e 	bl	25f32 <assert_post_action>
   20c96:	b941      	cbnz	r1, 20caa <k_work_init_delayable+0x32>
   20c98:	4908      	ldr	r1, [pc, #32]	; (20cbc <k_work_init_delayable+0x44>)
   20c9a:	4809      	ldr	r0, [pc, #36]	; (20cc0 <k_work_init_delayable+0x48>)
   20c9c:	f240 3241 	movw	r2, #833	; 0x341
   20ca0:	f005 f94e 	bl	25f40 <assert_print>
   20ca4:	f240 3141 	movw	r1, #833	; 0x341
   20ca8:	e7f2      	b.n	20c90 <k_work_init_delayable+0x18>

	*dwork = (struct k_work_delayable){
   20caa:	2230      	movs	r2, #48	; 0x30
   20cac:	2100      	movs	r1, #0
   20cae:	f005 fff0 	bl	26c92 <memset>
   20cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
   20cb6:	6065      	str	r5, [r4, #4]
   20cb8:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   20cba:	bd38      	pop	{r3, r4, r5, pc}
   20cbc:	0002d72a 	.word	0x0002d72a
   20cc0:	0002a7df 	.word	0x0002a7df

00020cc4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   20cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20cc6:	4616      	mov	r6, r2
   20cc8:	9001      	str	r0, [sp, #4]
   20cca:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   20ccc:	460c      	mov	r4, r1
   20cce:	b951      	cbnz	r1, 20ce6 <k_work_schedule_for_queue+0x22>
   20cd0:	4927      	ldr	r1, [pc, #156]	; (20d70 <k_work_schedule_for_queue+0xac>)
   20cd2:	4828      	ldr	r0, [pc, #160]	; (20d74 <k_work_schedule_for_queue+0xb0>)
   20cd4:	f240 32b7 	movw	r2, #951	; 0x3b7
   20cd8:	f005 f932 	bl	25f40 <assert_print>
   20cdc:	4824      	ldr	r0, [pc, #144]	; (20d70 <k_work_schedule_for_queue+0xac>)
   20cde:	f240 31b7 	movw	r1, #951	; 0x3b7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ce2:	f005 f926 	bl	25f32 <assert_post_action>
	__asm__ volatile(
   20ce6:	f04f 0340 	mov.w	r3, #64	; 0x40
   20cea:	f3ef 8711 	mrs	r7, BASEPRI
   20cee:	f383 8812 	msr	BASEPRI_MAX, r3
   20cf2:	f3bf 8f6f 	isb	sy
   20cf6:	4820      	ldr	r0, [pc, #128]	; (20d78 <k_work_schedule_for_queue+0xb4>)
   20cf8:	f7ff f96a 	bl	1ffd0 <z_spin_lock_valid>
   20cfc:	b938      	cbnz	r0, 20d0e <k_work_schedule_for_queue+0x4a>
   20cfe:	491f      	ldr	r1, [pc, #124]	; (20d7c <k_work_schedule_for_queue+0xb8>)
   20d00:	481c      	ldr	r0, [pc, #112]	; (20d74 <k_work_schedule_for_queue+0xb0>)
   20d02:	2294      	movs	r2, #148	; 0x94
   20d04:	f005 f91c 	bl	25f40 <assert_print>
   20d08:	2194      	movs	r1, #148	; 0x94
   20d0a:	481c      	ldr	r0, [pc, #112]	; (20d7c <k_work_schedule_for_queue+0xb8>)
   20d0c:	e7e9      	b.n	20ce2 <k_work_schedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   20d0e:	481a      	ldr	r0, [pc, #104]	; (20d78 <k_work_schedule_for_queue+0xb4>)
   20d10:	f7ff f97c 	bl	2000c <z_spin_lock_set_owner>
	return *flagp;
   20d14:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   20d16:	f013 0f0e 	tst.w	r3, #14
   20d1a:	d120      	bne.n	20d5e <k_work_schedule_for_queue+0x9a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20d1c:	ea55 0206 	orrs.w	r2, r5, r6
   20d20:	d10f      	bne.n	20d42 <k_work_schedule_for_queue+0x7e>
		return submit_to_queue_locked(work, queuep);
   20d22:	4620      	mov	r0, r4
   20d24:	a901      	add	r1, sp, #4
   20d26:	f7ff fde7 	bl	208f8 <submit_to_queue_locked>
   20d2a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d2c:	4812      	ldr	r0, [pc, #72]	; (20d78 <k_work_schedule_for_queue+0xb4>)
   20d2e:	f7ff f95d 	bl	1ffec <z_spin_unlock_valid>
   20d32:	b9b0      	cbnz	r0, 20d62 <k_work_schedule_for_queue+0x9e>
   20d34:	4911      	ldr	r1, [pc, #68]	; (20d7c <k_work_schedule_for_queue+0xb8>)
   20d36:	480f      	ldr	r0, [pc, #60]	; (20d74 <k_work_schedule_for_queue+0xb0>)
   20d38:	22c2      	movs	r2, #194	; 0xc2
   20d3a:	f005 f901 	bl	25f40 <assert_print>
   20d3e:	21c2      	movs	r1, #194	; 0xc2
   20d40:	e7e3      	b.n	20d0a <k_work_schedule_for_queue+0x46>
	*flagp |= BIT(bit);
   20d42:	f043 0308 	orr.w	r3, r3, #8
   20d46:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   20d48:	9b01      	ldr	r3, [sp, #4]
   20d4a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20d4c:	f104 0010 	add.w	r0, r4, #16
   20d50:	490b      	ldr	r1, [pc, #44]	; (20d80 <k_work_schedule_for_queue+0xbc>)
   20d52:	4632      	mov	r2, r6
   20d54:	462b      	mov	r3, r5
   20d56:	f001 f945 	bl	21fe4 <z_add_timeout>
	return ret;
   20d5a:	2401      	movs	r4, #1
   20d5c:	e7e6      	b.n	20d2c <k_work_schedule_for_queue+0x68>
	int ret = 0;
   20d5e:	2400      	movs	r4, #0
   20d60:	e7e4      	b.n	20d2c <k_work_schedule_for_queue+0x68>
	__asm__ volatile(
   20d62:	f387 8811 	msr	BASEPRI, r7
   20d66:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   20d6a:	4620      	mov	r0, r4
   20d6c:	b003      	add	sp, #12
   20d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20d70:	0002d72a 	.word	0x0002d72a
   20d74:	0002a7df 	.word	0x0002a7df
   20d78:	20002a9c 	.word	0x20002a9c
   20d7c:	0002a819 	.word	0x0002a819
   20d80:	000209cd 	.word	0x000209cd

00020d84 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   20d84:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   20d86:	4801      	ldr	r0, [pc, #4]	; (20d8c <k_work_schedule+0x8>)
   20d88:	f7ff bf9c 	b.w	20cc4 <k_work_schedule_for_queue>
   20d8c:	20001f68 	.word	0x20001f68

00020d90 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   20d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20d92:	4616      	mov	r6, r2
   20d94:	9001      	str	r0, [sp, #4]
   20d96:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   20d98:	460c      	mov	r4, r1
   20d9a:	b951      	cbnz	r1, 20db2 <k_work_reschedule_for_queue+0x22>
   20d9c:	4926      	ldr	r1, [pc, #152]	; (20e38 <k_work_reschedule_for_queue+0xa8>)
   20d9e:	4827      	ldr	r0, [pc, #156]	; (20e3c <k_work_reschedule_for_queue+0xac>)
   20da0:	f240 32db 	movw	r2, #987	; 0x3db
   20da4:	f005 f8cc 	bl	25f40 <assert_print>
   20da8:	4823      	ldr	r0, [pc, #140]	; (20e38 <k_work_reschedule_for_queue+0xa8>)
   20daa:	f240 31db 	movw	r1, #987	; 0x3db
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20dae:	f005 f8c0 	bl	25f32 <assert_post_action>
	__asm__ volatile(
   20db2:	f04f 0340 	mov.w	r3, #64	; 0x40
   20db6:	f3ef 8711 	mrs	r7, BASEPRI
   20dba:	f383 8812 	msr	BASEPRI_MAX, r3
   20dbe:	f3bf 8f6f 	isb	sy
   20dc2:	481f      	ldr	r0, [pc, #124]	; (20e40 <k_work_reschedule_for_queue+0xb0>)
   20dc4:	f7ff f904 	bl	1ffd0 <z_spin_lock_valid>
   20dc8:	b938      	cbnz	r0, 20dda <k_work_reschedule_for_queue+0x4a>
   20dca:	491e      	ldr	r1, [pc, #120]	; (20e44 <k_work_reschedule_for_queue+0xb4>)
   20dcc:	481b      	ldr	r0, [pc, #108]	; (20e3c <k_work_reschedule_for_queue+0xac>)
   20dce:	2294      	movs	r2, #148	; 0x94
   20dd0:	f005 f8b6 	bl	25f40 <assert_print>
   20dd4:	2194      	movs	r1, #148	; 0x94
   20dd6:	481b      	ldr	r0, [pc, #108]	; (20e44 <k_work_reschedule_for_queue+0xb4>)
   20dd8:	e7e9      	b.n	20dae <k_work_reschedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   20dda:	4819      	ldr	r0, [pc, #100]	; (20e40 <k_work_reschedule_for_queue+0xb0>)
   20ddc:	f7ff f916 	bl	2000c <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   20de0:	4620      	mov	r0, r4
   20de2:	f008 fad3 	bl	2938c <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20de6:	ea55 0306 	orrs.w	r3, r5, r6
   20dea:	d10f      	bne.n	20e0c <k_work_reschedule_for_queue+0x7c>
		return submit_to_queue_locked(work, queuep);
   20dec:	4620      	mov	r0, r4
   20dee:	a901      	add	r1, sp, #4
   20df0:	f7ff fd82 	bl	208f8 <submit_to_queue_locked>
   20df4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20df6:	4812      	ldr	r0, [pc, #72]	; (20e40 <k_work_reschedule_for_queue+0xb0>)
   20df8:	f7ff f8f8 	bl	1ffec <z_spin_unlock_valid>
   20dfc:	b9a8      	cbnz	r0, 20e2a <k_work_reschedule_for_queue+0x9a>
   20dfe:	4911      	ldr	r1, [pc, #68]	; (20e44 <k_work_reschedule_for_queue+0xb4>)
   20e00:	480e      	ldr	r0, [pc, #56]	; (20e3c <k_work_reschedule_for_queue+0xac>)
   20e02:	22c2      	movs	r2, #194	; 0xc2
   20e04:	f005 f89c 	bl	25f40 <assert_print>
   20e08:	21c2      	movs	r1, #194	; 0xc2
   20e0a:	e7e4      	b.n	20dd6 <k_work_reschedule_for_queue+0x46>
	*flagp |= BIT(bit);
   20e0c:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20e0e:	490e      	ldr	r1, [pc, #56]	; (20e48 <k_work_reschedule_for_queue+0xb8>)
	*flagp |= BIT(bit);
   20e10:	f043 0308 	orr.w	r3, r3, #8
   20e14:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   20e16:	9b01      	ldr	r3, [sp, #4]
   20e18:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20e1a:	f104 0010 	add.w	r0, r4, #16
   20e1e:	4632      	mov	r2, r6
   20e20:	462b      	mov	r3, r5
   20e22:	f001 f8df 	bl	21fe4 <z_add_timeout>
	return ret;
   20e26:	2401      	movs	r4, #1
   20e28:	e7e5      	b.n	20df6 <k_work_reschedule_for_queue+0x66>
	__asm__ volatile(
   20e2a:	f387 8811 	msr	BASEPRI, r7
   20e2e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   20e32:	4620      	mov	r0, r4
   20e34:	b003      	add	sp, #12
   20e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20e38:	0002d72a 	.word	0x0002d72a
   20e3c:	0002a7df 	.word	0x0002a7df
   20e40:	20002a9c 	.word	0x20002a9c
   20e44:	0002a819 	.word	0x0002a819
   20e48:	000209cd 	.word	0x000209cd

00020e4c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   20e4c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   20e4e:	4801      	ldr	r0, [pc, #4]	; (20e54 <k_work_reschedule+0x8>)
   20e50:	f7ff bf9e 	b.w	20d90 <k_work_reschedule_for_queue>
   20e54:	20001f68 	.word	0x20001f68

00020e58 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   20e58:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   20e5a:	4604      	mov	r4, r0
   20e5c:	b950      	cbnz	r0, 20e74 <k_work_cancel_delayable+0x1c>
   20e5e:	491d      	ldr	r1, [pc, #116]	; (20ed4 <k_work_cancel_delayable+0x7c>)
   20e60:	481d      	ldr	r0, [pc, #116]	; (20ed8 <k_work_cancel_delayable+0x80>)
   20e62:	f240 32fd 	movw	r2, #1021	; 0x3fd
   20e66:	f005 f86b 	bl	25f40 <assert_print>
   20e6a:	481a      	ldr	r0, [pc, #104]	; (20ed4 <k_work_cancel_delayable+0x7c>)
   20e6c:	f240 31fd 	movw	r1, #1021	; 0x3fd
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e70:	f005 f85f 	bl	25f32 <assert_post_action>
	__asm__ volatile(
   20e74:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e78:	f3ef 8511 	mrs	r5, BASEPRI
   20e7c:	f383 8812 	msr	BASEPRI_MAX, r3
   20e80:	f3bf 8f6f 	isb	sy
   20e84:	4815      	ldr	r0, [pc, #84]	; (20edc <k_work_cancel_delayable+0x84>)
   20e86:	f7ff f8a3 	bl	1ffd0 <z_spin_lock_valid>
   20e8a:	b938      	cbnz	r0, 20e9c <k_work_cancel_delayable+0x44>
   20e8c:	4914      	ldr	r1, [pc, #80]	; (20ee0 <k_work_cancel_delayable+0x88>)
   20e8e:	4812      	ldr	r0, [pc, #72]	; (20ed8 <k_work_cancel_delayable+0x80>)
   20e90:	2294      	movs	r2, #148	; 0x94
   20e92:	f005 f855 	bl	25f40 <assert_print>
   20e96:	2194      	movs	r1, #148	; 0x94
   20e98:	4811      	ldr	r0, [pc, #68]	; (20ee0 <k_work_cancel_delayable+0x88>)
   20e9a:	e7e9      	b.n	20e70 <k_work_cancel_delayable+0x18>
	z_spin_lock_set_owner(l);
   20e9c:	480f      	ldr	r0, [pc, #60]	; (20edc <k_work_cancel_delayable+0x84>)
   20e9e:	f7ff f8b5 	bl	2000c <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   20ea2:	4620      	mov	r0, r4
   20ea4:	f008 fa72 	bl	2938c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   20ea8:	4620      	mov	r0, r4
   20eaa:	f008 fa84 	bl	293b6 <cancel_async_locked>
   20eae:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20eb0:	480a      	ldr	r0, [pc, #40]	; (20edc <k_work_cancel_delayable+0x84>)
   20eb2:	f7ff f89b 	bl	1ffec <z_spin_unlock_valid>
   20eb6:	b930      	cbnz	r0, 20ec6 <k_work_cancel_delayable+0x6e>
   20eb8:	4909      	ldr	r1, [pc, #36]	; (20ee0 <k_work_cancel_delayable+0x88>)
   20eba:	4807      	ldr	r0, [pc, #28]	; (20ed8 <k_work_cancel_delayable+0x80>)
   20ebc:	22c2      	movs	r2, #194	; 0xc2
   20ebe:	f005 f83f 	bl	25f40 <assert_print>
   20ec2:	21c2      	movs	r1, #194	; 0xc2
   20ec4:	e7e8      	b.n	20e98 <k_work_cancel_delayable+0x40>
	__asm__ volatile(
   20ec6:	f385 8811 	msr	BASEPRI, r5
   20eca:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   20ece:	4620      	mov	r0, r4
   20ed0:	bd38      	pop	{r3, r4, r5, pc}
   20ed2:	bf00      	nop
   20ed4:	0002d72a 	.word	0x0002d72a
   20ed8:	0002a7df 	.word	0x0002a7df
   20edc:	20002a9c 	.word	0x20002a9c
   20ee0:	0002a819 	.word	0x0002a819

00020ee4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   20ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ee8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   20eea:	4605      	mov	r5, r0
   20eec:	b950      	cbnz	r0, 20f04 <k_work_cancel_delayable_sync+0x20>
   20eee:	4933      	ldr	r1, [pc, #204]	; (20fbc <k_work_cancel_delayable_sync+0xd8>)
   20ef0:	4833      	ldr	r0, [pc, #204]	; (20fc0 <k_work_cancel_delayable_sync+0xdc>)
   20ef2:	f240 420e 	movw	r2, #1038	; 0x40e
   20ef6:	f005 f823 	bl	25f40 <assert_print>
   20efa:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   20efe:	482f      	ldr	r0, [pc, #188]	; (20fbc <k_work_cancel_delayable_sync+0xd8>)
   20f00:	f005 f817 	bl	25f32 <assert_post_action>
   20f04:	b941      	cbnz	r1, 20f18 <k_work_cancel_delayable_sync+0x34>
   20f06:	492d      	ldr	r1, [pc, #180]	; (20fbc <k_work_cancel_delayable_sync+0xd8>)
   20f08:	482d      	ldr	r0, [pc, #180]	; (20fc0 <k_work_cancel_delayable_sync+0xdc>)
   20f0a:	f240 420f 	movw	r2, #1039	; 0x40f
   20f0e:	f005 f817 	bl	25f40 <assert_print>
   20f12:	f240 410f 	movw	r1, #1039	; 0x40f
   20f16:	e7f2      	b.n	20efe <k_work_cancel_delayable_sync+0x1a>
	__ASSERT_NO_MSG(!k_is_in_isr());
   20f18:	f008 f9cc 	bl	292b4 <k_is_in_isr>
   20f1c:	4604      	mov	r4, r0
   20f1e:	b140      	cbz	r0, 20f32 <k_work_cancel_delayable_sync+0x4e>
   20f20:	4926      	ldr	r1, [pc, #152]	; (20fbc <k_work_cancel_delayable_sync+0xd8>)
   20f22:	4827      	ldr	r0, [pc, #156]	; (20fc0 <k_work_cancel_delayable_sync+0xdc>)
   20f24:	f44f 6282 	mov.w	r2, #1040	; 0x410
   20f28:	f005 f80a 	bl	25f40 <assert_print>
   20f2c:	f44f 6182 	mov.w	r1, #1040	; 0x410
   20f30:	e7e5      	b.n	20efe <k_work_cancel_delayable_sync+0x1a>
	__asm__ volatile(
   20f32:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f36:	f3ef 8811 	mrs	r8, BASEPRI
   20f3a:	f383 8812 	msr	BASEPRI_MAX, r3
   20f3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f42:	4820      	ldr	r0, [pc, #128]	; (20fc4 <k_work_cancel_delayable_sync+0xe0>)
   20f44:	f7ff f844 	bl	1ffd0 <z_spin_lock_valid>
   20f48:	b938      	cbnz	r0, 20f5a <k_work_cancel_delayable_sync+0x76>
   20f4a:	491f      	ldr	r1, [pc, #124]	; (20fc8 <k_work_cancel_delayable_sync+0xe4>)
   20f4c:	481c      	ldr	r0, [pc, #112]	; (20fc0 <k_work_cancel_delayable_sync+0xdc>)
   20f4e:	2294      	movs	r2, #148	; 0x94
   20f50:	f004 fff6 	bl	25f40 <assert_print>
   20f54:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f56:	481c      	ldr	r0, [pc, #112]	; (20fc8 <k_work_cancel_delayable_sync+0xe4>)
   20f58:	e7d2      	b.n	20f00 <k_work_cancel_delayable_sync+0x1c>
	z_spin_lock_set_owner(l);
   20f5a:	481a      	ldr	r0, [pc, #104]	; (20fc4 <k_work_cancel_delayable_sync+0xe0>)
   20f5c:	f7ff f856 	bl	2000c <z_spin_lock_set_owner>
	return *flagp;
   20f60:	68eb      	ldr	r3, [r5, #12]
   20f62:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   20f66:	2b00      	cmp	r3, #0
   20f68:	bf14      	ite	ne
   20f6a:	2701      	movne	r7, #1
   20f6c:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   20f6e:	d00a      	beq.n	20f86 <k_work_cancel_delayable_sync+0xa2>
	(void)unschedule_locked(dwork);
   20f70:	4628      	mov	r0, r5
   20f72:	f008 fa0b 	bl	2938c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   20f76:	4628      	mov	r0, r5
   20f78:	f008 fa1d 	bl	293b6 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   20f7c:	4631      	mov	r1, r6
   20f7e:	4628      	mov	r0, r5
   20f80:	f7ff fc9c 	bl	208bc <cancel_sync_locked>
   20f84:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f86:	480f      	ldr	r0, [pc, #60]	; (20fc4 <k_work_cancel_delayable_sync+0xe0>)
   20f88:	f7ff f830 	bl	1ffec <z_spin_unlock_valid>
   20f8c:	b930      	cbnz	r0, 20f9c <k_work_cancel_delayable_sync+0xb8>
   20f8e:	490e      	ldr	r1, [pc, #56]	; (20fc8 <k_work_cancel_delayable_sync+0xe4>)
   20f90:	480b      	ldr	r0, [pc, #44]	; (20fc0 <k_work_cancel_delayable_sync+0xdc>)
   20f92:	22c2      	movs	r2, #194	; 0xc2
   20f94:	f004 ffd4 	bl	25f40 <assert_print>
   20f98:	21c2      	movs	r1, #194	; 0xc2
   20f9a:	e7dc      	b.n	20f56 <k_work_cancel_delayable_sync+0x72>
	__asm__ volatile(
   20f9c:	f388 8811 	msr	BASEPRI, r8
   20fa0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   20fa4:	b13c      	cbz	r4, 20fb6 <k_work_cancel_delayable_sync+0xd2>
	return z_impl_k_sem_take(sem, timeout);
   20fa6:	f04f 32ff 	mov.w	r2, #4294967295
   20faa:	f04f 33ff 	mov.w	r3, #4294967295
   20fae:	f106 0008 	add.w	r0, r6, #8
   20fb2:	f7ff faf5 	bl	205a0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   20fb6:	4638      	mov	r0, r7
   20fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20fbc:	0002d72a 	.word	0x0002d72a
   20fc0:	0002a7df 	.word	0x0002a7df
   20fc4:	20002a9c 	.word	0x20002a9c
   20fc8:	0002a819 	.word	0x0002a819

00020fcc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   20fcc:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   20fce:	4d07      	ldr	r5, [pc, #28]	; (20fec <z_reset_time_slice+0x20>)
   20fd0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   20fd2:	b154      	cbz	r4, 20fea <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   20fd4:	f7fc f984 	bl	1d2e0 <sys_clock_elapsed>
   20fd8:	4b05      	ldr	r3, [pc, #20]	; (20ff0 <z_reset_time_slice+0x24>)
   20fda:	4404      	add	r4, r0
   20fdc:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   20fde:	6828      	ldr	r0, [r5, #0]
   20fe0:	2100      	movs	r1, #0
	}
}
   20fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   20fe6:	f001 b917 	b.w	22218 <z_set_timeout_expiry>
}
   20fea:	bd38      	pop	{r3, r4, r5, pc}
   20fec:	20002aa8 	.word	0x20002aa8
   20ff0:	20002a64 	.word	0x20002a64

00020ff4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   20ff4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   20ff6:	4d12      	ldr	r5, [pc, #72]	; (21040 <update_cache+0x4c>)
   20ff8:	462b      	mov	r3, r5
   20ffa:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20ffe:	429c      	cmp	r4, r3
   21000:	d000      	beq.n	21004 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21002:	b904      	cbnz	r4, 21006 <update_cache+0x12>
   21004:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   21006:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   21008:	b988      	cbnz	r0, 2102e <update_cache+0x3a>
	__ASSERT(_current != NULL, "");
   2100a:	b943      	cbnz	r3, 2101e <update_cache+0x2a>
   2100c:	490d      	ldr	r1, [pc, #52]	; (21044 <update_cache+0x50>)
   2100e:	480e      	ldr	r0, [pc, #56]	; (21048 <update_cache+0x54>)
   21010:	2289      	movs	r2, #137	; 0x89
   21012:	f004 ff95 	bl	25f40 <assert_print>
   21016:	480b      	ldr	r0, [pc, #44]	; (21044 <update_cache+0x50>)
   21018:	2189      	movs	r1, #137	; 0x89
   2101a:	f004 ff8a 	bl	25f32 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2101e:	7b5a      	ldrb	r2, [r3, #13]
   21020:	06d2      	lsls	r2, r2, #27
   21022:	d104      	bne.n	2102e <update_cache+0x3a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21024:	69a2      	ldr	r2, [r4, #24]
   21026:	b912      	cbnz	r2, 2102e <update_cache+0x3a>
	if (is_preempt(_current) || is_metairq(thread)) {
   21028:	89da      	ldrh	r2, [r3, #14]
   2102a:	2a7f      	cmp	r2, #127	; 0x7f
   2102c:	d805      	bhi.n	2103a <update_cache+0x46>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   2102e:	429c      	cmp	r4, r3
   21030:	d002      	beq.n	21038 <update_cache+0x44>
			z_reset_time_slice(thread);
   21032:	4620      	mov	r0, r4
   21034:	f7ff ffca 	bl	20fcc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   21038:	4623      	mov	r3, r4
   2103a:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   2103c:	bd38      	pop	{r3, r4, r5, pc}
   2103e:	bf00      	nop
   21040:	20002a64 	.word	0x20002a64
   21044:	0002d74b 	.word	0x0002d74b
   21048:	0002a7df 	.word	0x0002a7df

0002104c <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   2104c:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2104e:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21052:	7b42      	ldrb	r2, [r0, #13]
   21054:	2b00      	cmp	r3, #0
   21056:	db37      	blt.n	210c8 <ready_thread+0x7c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21058:	06d3      	lsls	r3, r2, #27
   2105a:	d135      	bne.n	210c8 <ready_thread+0x7c>
	return node->next != NULL;
   2105c:	6983      	ldr	r3, [r0, #24]
   2105e:	2b00      	cmp	r3, #0
   21060:	d132      	bne.n	210c8 <ready_thread+0x7c>
	thread->base.thread_state |= _THREAD_QUEUED;
   21062:	f062 027f 	orn	r2, r2, #127	; 0x7f
   21066:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21068:	4a18      	ldr	r2, [pc, #96]	; (210cc <ready_thread+0x80>)
   2106a:	4290      	cmp	r0, r2
   2106c:	d108      	bne.n	21080 <ready_thread+0x34>
   2106e:	4918      	ldr	r1, [pc, #96]	; (210d0 <ready_thread+0x84>)
   21070:	4818      	ldr	r0, [pc, #96]	; (210d4 <ready_thread+0x88>)
   21072:	22ba      	movs	r2, #186	; 0xba
   21074:	f004 ff64 	bl	25f40 <assert_print>
   21078:	4815      	ldr	r0, [pc, #84]	; (210d0 <ready_thread+0x84>)
   2107a:	21ba      	movs	r1, #186	; 0xba
   2107c:	f004 ff59 	bl	25f32 <assert_post_action>
	return list->head == list;
   21080:	4915      	ldr	r1, [pc, #84]	; (210d8 <ready_thread+0x8c>)
   21082:	460a      	mov	r2, r1
   21084:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21088:	4294      	cmp	r4, r2
   2108a:	bf18      	it	ne
   2108c:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2108e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21090:	b923      	cbnz	r3, 2109c <ready_thread+0x50>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   21092:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   21096:	6020      	str	r0, [r4, #0]
	list->tail = node;
   21098:	6248      	str	r0, [r1, #36]	; 0x24
}
   2109a:	e00c      	b.n	210b6 <ready_thread+0x6a>
	int32_t b1 = thread_1->base.prio;
   2109c:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   210a0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   210a4:	42b5      	cmp	r5, r6
   210a6:	d00b      	beq.n	210c0 <ready_thread+0x74>
		if (z_sched_prio_cmp(thread, t) > 0) {
   210a8:	42ae      	cmp	r6, r5
   210aa:	dd09      	ble.n	210c0 <ready_thread+0x74>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   210ac:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   210ae:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   210b2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   210b4:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
   210b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   210ba:	2000      	movs	r0, #0
   210bc:	f7ff bf9a 	b.w	20ff4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   210c0:	42a3      	cmp	r3, r4
   210c2:	d0e6      	beq.n	21092 <ready_thread+0x46>
   210c4:	681b      	ldr	r3, [r3, #0]
   210c6:	e7e3      	b.n	21090 <ready_thread+0x44>
}
   210c8:	bd70      	pop	{r4, r5, r6, pc}
   210ca:	bf00      	nop
   210cc:	20001e68 	.word	0x20001e68
   210d0:	0002d74b 	.word	0x0002d74b
   210d4:	0002a7df 	.word	0x0002a7df
   210d8:	20002a64 	.word	0x20002a64

000210dc <k_sched_time_slice_set>:
{
   210dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   210de:	4604      	mov	r4, r0
   210e0:	460d      	mov	r5, r1
	__asm__ volatile(
   210e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   210e6:	f3ef 8711 	mrs	r7, BASEPRI
   210ea:	f383 8812 	msr	BASEPRI_MAX, r3
   210ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   210f2:	481d      	ldr	r0, [pc, #116]	; (21168 <k_sched_time_slice_set+0x8c>)
   210f4:	f7fe ff6c 	bl	1ffd0 <z_spin_lock_valid>
   210f8:	b940      	cbnz	r0, 2110c <k_sched_time_slice_set+0x30>
   210fa:	491c      	ldr	r1, [pc, #112]	; (2116c <k_sched_time_slice_set+0x90>)
   210fc:	481c      	ldr	r0, [pc, #112]	; (21170 <k_sched_time_slice_set+0x94>)
   210fe:	2294      	movs	r2, #148	; 0x94
   21100:	f004 ff1e 	bl	25f40 <assert_print>
   21104:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21106:	4819      	ldr	r0, [pc, #100]	; (2116c <k_sched_time_slice_set+0x90>)
   21108:	f004 ff13 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   2110c:	4816      	ldr	r0, [pc, #88]	; (21168 <k_sched_time_slice_set+0x8c>)
			return (uint32_t)((t * to_hz + off) / from_hz);
   2110e:	2600      	movs	r6, #0
   21110:	f7fe ff7c 	bl	2000c <z_spin_lock_set_owner>
   21114:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   21118:	f240 30e7 	movw	r0, #999	; 0x3e7
   2111c:	4631      	mov	r1, r6
   2111e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21122:	2300      	movs	r3, #0
   21124:	fbe4 010c 	umlal	r0, r1, r4, ip
   21128:	f7de ffea 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2112c:	42b4      	cmp	r4, r6
   2112e:	dd02      	ble.n	21136 <k_sched_time_slice_set+0x5a>
			slice_ticks = MAX(2, slice_ticks);
   21130:	2802      	cmp	r0, #2
   21132:	bfb8      	it	lt
   21134:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   21136:	4a0f      	ldr	r2, [pc, #60]	; (21174 <k_sched_time_slice_set+0x98>)
		_current_cpu->slice_ticks = 0;
   21138:	4b0f      	ldr	r3, [pc, #60]	; (21178 <k_sched_time_slice_set+0x9c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2113a:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   2113c:	4a0f      	ldr	r2, [pc, #60]	; (2117c <k_sched_time_slice_set+0xa0>)
		z_reset_time_slice(_current);
   2113e:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   21140:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   21142:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   21144:	f7ff ff42 	bl	20fcc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21148:	4807      	ldr	r0, [pc, #28]	; (21168 <k_sched_time_slice_set+0x8c>)
   2114a:	f7fe ff4f 	bl	1ffec <z_spin_unlock_valid>
   2114e:	b930      	cbnz	r0, 2115e <k_sched_time_slice_set+0x82>
   21150:	4906      	ldr	r1, [pc, #24]	; (2116c <k_sched_time_slice_set+0x90>)
   21152:	4807      	ldr	r0, [pc, #28]	; (21170 <k_sched_time_slice_set+0x94>)
   21154:	22c2      	movs	r2, #194	; 0xc2
   21156:	f004 fef3 	bl	25f40 <assert_print>
   2115a:	21c2      	movs	r1, #194	; 0xc2
   2115c:	e7d3      	b.n	21106 <k_sched_time_slice_set+0x2a>
	__asm__ volatile(
   2115e:	f387 8811 	msr	BASEPRI, r7
   21162:	f3bf 8f6f 	isb	sy
}
   21166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21168:	20002aac 	.word	0x20002aac
   2116c:	0002a819 	.word	0x0002a819
   21170:	0002a7df 	.word	0x0002a7df
   21174:	20002aa8 	.word	0x20002aa8
   21178:	20002a64 	.word	0x20002a64
   2117c:	20002aa4 	.word	0x20002aa4

00021180 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   21180:	b538      	push	{r3, r4, r5, lr}
   21182:	4604      	mov	r4, r0
	__asm__ volatile(
   21184:	f04f 0340 	mov.w	r3, #64	; 0x40
   21188:	f3ef 8511 	mrs	r5, BASEPRI
   2118c:	f383 8812 	msr	BASEPRI_MAX, r3
   21190:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21194:	4811      	ldr	r0, [pc, #68]	; (211dc <z_ready_thread+0x5c>)
   21196:	f7fe ff1b 	bl	1ffd0 <z_spin_lock_valid>
   2119a:	b940      	cbnz	r0, 211ae <z_ready_thread+0x2e>
   2119c:	4910      	ldr	r1, [pc, #64]	; (211e0 <z_ready_thread+0x60>)
   2119e:	4811      	ldr	r0, [pc, #68]	; (211e4 <z_ready_thread+0x64>)
   211a0:	2294      	movs	r2, #148	; 0x94
   211a2:	f004 fecd 	bl	25f40 <assert_print>
   211a6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   211a8:	480d      	ldr	r0, [pc, #52]	; (211e0 <z_ready_thread+0x60>)
   211aa:	f004 fec2 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   211ae:	480b      	ldr	r0, [pc, #44]	; (211dc <z_ready_thread+0x5c>)
   211b0:	f7fe ff2c 	bl	2000c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   211b4:	4620      	mov	r0, r4
   211b6:	f7ff ff49 	bl	2104c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   211ba:	4808      	ldr	r0, [pc, #32]	; (211dc <z_ready_thread+0x5c>)
   211bc:	f7fe ff16 	bl	1ffec <z_spin_unlock_valid>
   211c0:	b930      	cbnz	r0, 211d0 <z_ready_thread+0x50>
   211c2:	4907      	ldr	r1, [pc, #28]	; (211e0 <z_ready_thread+0x60>)
   211c4:	4807      	ldr	r0, [pc, #28]	; (211e4 <z_ready_thread+0x64>)
   211c6:	22c2      	movs	r2, #194	; 0xc2
   211c8:	f004 feba 	bl	25f40 <assert_print>
   211cc:	21c2      	movs	r1, #194	; 0xc2
   211ce:	e7eb      	b.n	211a8 <z_ready_thread+0x28>
	__asm__ volatile(
   211d0:	f385 8811 	msr	BASEPRI, r5
   211d4:	f3bf 8f6f 	isb	sy
		}
	}
}
   211d8:	bd38      	pop	{r3, r4, r5, pc}
   211da:	bf00      	nop
   211dc:	20002aac 	.word	0x20002aac
   211e0:	0002a819 	.word	0x0002a819
   211e4:	0002a7df 	.word	0x0002a7df

000211e8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   211e8:	b538      	push	{r3, r4, r5, lr}
   211ea:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   211ec:	460c      	mov	r4, r1
   211ee:	b9c1      	cbnz	r1, 21222 <z_reschedule+0x3a>
   211f0:	f3ef 8505 	mrs	r5, IPSR
   211f4:	b9ad      	cbnz	r5, 21222 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   211f6:	4a13      	ldr	r2, [pc, #76]	; (21244 <z_reschedule+0x5c>)
	if (resched(key.key) && need_swap()) {
   211f8:	69d1      	ldr	r1, [r2, #28]
   211fa:	6892      	ldr	r2, [r2, #8]
   211fc:	4291      	cmp	r1, r2
   211fe:	d010      	beq.n	21222 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21200:	f7fe fef4 	bl	1ffec <z_spin_unlock_valid>
   21204:	b940      	cbnz	r0, 21218 <z_reschedule+0x30>
   21206:	4910      	ldr	r1, [pc, #64]	; (21248 <z_reschedule+0x60>)
   21208:	4810      	ldr	r0, [pc, #64]	; (2124c <z_reschedule+0x64>)
   2120a:	22e1      	movs	r2, #225	; 0xe1
   2120c:	f004 fe98 	bl	25f40 <assert_print>
   21210:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21212:	480d      	ldr	r0, [pc, #52]	; (21248 <z_reschedule+0x60>)
   21214:	f004 fe8d 	bl	25f32 <assert_post_action>
	ret = arch_swap(key);
   21218:	4628      	mov	r0, r5
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   2121a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2121e:	f7f1 bfd7 	b.w	131d0 <arch_swap>
   21222:	4618      	mov	r0, r3
   21224:	f7fe fee2 	bl	1ffec <z_spin_unlock_valid>
   21228:	b930      	cbnz	r0, 21238 <z_reschedule+0x50>
   2122a:	4907      	ldr	r1, [pc, #28]	; (21248 <z_reschedule+0x60>)
   2122c:	4807      	ldr	r0, [pc, #28]	; (2124c <z_reschedule+0x64>)
   2122e:	22c2      	movs	r2, #194	; 0xc2
   21230:	f004 fe86 	bl	25f40 <assert_print>
   21234:	21c2      	movs	r1, #194	; 0xc2
   21236:	e7ec      	b.n	21212 <z_reschedule+0x2a>
   21238:	f384 8811 	msr	BASEPRI, r4
   2123c:	f3bf 8f6f 	isb	sy
   21240:	bd38      	pop	{r3, r4, r5, pc}
   21242:	bf00      	nop
   21244:	20002a64 	.word	0x20002a64
   21248:	0002a819 	.word	0x0002a819
   2124c:	0002a7df 	.word	0x0002a7df

00021250 <z_sched_start>:
{
   21250:	b538      	push	{r3, r4, r5, lr}
   21252:	4604      	mov	r4, r0
	__asm__ volatile(
   21254:	f04f 0340 	mov.w	r3, #64	; 0x40
   21258:	f3ef 8511 	mrs	r5, BASEPRI
   2125c:	f383 8812 	msr	BASEPRI_MAX, r3
   21260:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21264:	4817      	ldr	r0, [pc, #92]	; (212c4 <z_sched_start+0x74>)
   21266:	f7fe feb3 	bl	1ffd0 <z_spin_lock_valid>
   2126a:	b940      	cbnz	r0, 2127e <z_sched_start+0x2e>
   2126c:	4916      	ldr	r1, [pc, #88]	; (212c8 <z_sched_start+0x78>)
   2126e:	4817      	ldr	r0, [pc, #92]	; (212cc <z_sched_start+0x7c>)
   21270:	2294      	movs	r2, #148	; 0x94
   21272:	f004 fe65 	bl	25f40 <assert_print>
   21276:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21278:	4813      	ldr	r0, [pc, #76]	; (212c8 <z_sched_start+0x78>)
   2127a:	f004 fe5a 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   2127e:	4811      	ldr	r0, [pc, #68]	; (212c4 <z_sched_start+0x74>)
   21280:	f7fe fec4 	bl	2000c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21284:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   21286:	075a      	lsls	r2, r3, #29
   21288:	d40f      	bmi.n	212aa <z_sched_start+0x5a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2128a:	480e      	ldr	r0, [pc, #56]	; (212c4 <z_sched_start+0x74>)
   2128c:	f7fe feae 	bl	1ffec <z_spin_unlock_valid>
   21290:	b930      	cbnz	r0, 212a0 <z_sched_start+0x50>
   21292:	490d      	ldr	r1, [pc, #52]	; (212c8 <z_sched_start+0x78>)
   21294:	480d      	ldr	r0, [pc, #52]	; (212cc <z_sched_start+0x7c>)
   21296:	22c2      	movs	r2, #194	; 0xc2
   21298:	f004 fe52 	bl	25f40 <assert_print>
   2129c:	21c2      	movs	r1, #194	; 0xc2
   2129e:	e7eb      	b.n	21278 <z_sched_start+0x28>
	__asm__ volatile(
   212a0:	f385 8811 	msr	BASEPRI, r5
   212a4:	f3bf 8f6f 	isb	sy
}
   212a8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   212aa:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   212ae:	4620      	mov	r0, r4
   212b0:	7363      	strb	r3, [r4, #13]
   212b2:	f7ff fecb 	bl	2104c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   212b6:	4629      	mov	r1, r5
   212b8:	4802      	ldr	r0, [pc, #8]	; (212c4 <z_sched_start+0x74>)
}
   212ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   212be:	f7ff bf93 	b.w	211e8 <z_reschedule>
   212c2:	bf00      	nop
   212c4:	20002aac 	.word	0x20002aac
   212c8:	0002a819 	.word	0x0002a819
   212cc:	0002a7df 	.word	0x0002a7df

000212d0 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   212d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   212d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   212d6:	f3ef 8411 	mrs	r4, BASEPRI
   212da:	f383 8812 	msr	BASEPRI_MAX, r3
   212de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   212e2:	481c      	ldr	r0, [pc, #112]	; (21354 <k_sched_lock+0x84>)
   212e4:	f7fe fe74 	bl	1ffd0 <z_spin_lock_valid>
   212e8:	b938      	cbnz	r0, 212fa <k_sched_lock+0x2a>
   212ea:	491b      	ldr	r1, [pc, #108]	; (21358 <k_sched_lock+0x88>)
   212ec:	481b      	ldr	r0, [pc, #108]	; (2135c <k_sched_lock+0x8c>)
   212ee:	2294      	movs	r2, #148	; 0x94
   212f0:	f004 fe26 	bl	25f40 <assert_print>
   212f4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212f6:	4818      	ldr	r0, [pc, #96]	; (21358 <k_sched_lock+0x88>)
   212f8:	e00c      	b.n	21314 <k_sched_lock+0x44>
	z_spin_lock_set_owner(l);
   212fa:	4816      	ldr	r0, [pc, #88]	; (21354 <k_sched_lock+0x84>)
   212fc:	f7fe fe86 	bl	2000c <z_spin_lock_set_owner>
   21300:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21304:	b143      	cbz	r3, 21318 <k_sched_lock+0x48>
   21306:	4916      	ldr	r1, [pc, #88]	; (21360 <k_sched_lock+0x90>)
   21308:	4814      	ldr	r0, [pc, #80]	; (2135c <k_sched_lock+0x8c>)
   2130a:	22fd      	movs	r2, #253	; 0xfd
   2130c:	f004 fe18 	bl	25f40 <assert_print>
   21310:	21fd      	movs	r1, #253	; 0xfd
   21312:	4813      	ldr	r0, [pc, #76]	; (21360 <k_sched_lock+0x90>)
   21314:	f004 fe0d 	bl	25f32 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   21318:	4b12      	ldr	r3, [pc, #72]	; (21364 <k_sched_lock+0x94>)
   2131a:	689a      	ldr	r2, [r3, #8]
   2131c:	7bd3      	ldrb	r3, [r2, #15]
   2131e:	2b01      	cmp	r3, #1
   21320:	d106      	bne.n	21330 <k_sched_lock+0x60>
   21322:	490f      	ldr	r1, [pc, #60]	; (21360 <k_sched_lock+0x90>)
   21324:	480d      	ldr	r0, [pc, #52]	; (2135c <k_sched_lock+0x8c>)
   21326:	22fe      	movs	r2, #254	; 0xfe
   21328:	f004 fe0a 	bl	25f40 <assert_print>
   2132c:	21fe      	movs	r1, #254	; 0xfe
   2132e:	e7f0      	b.n	21312 <k_sched_lock+0x42>
	--_current->base.sched_locked;
   21330:	3b01      	subs	r3, #1
   21332:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21334:	4807      	ldr	r0, [pc, #28]	; (21354 <k_sched_lock+0x84>)
   21336:	f7fe fe59 	bl	1ffec <z_spin_unlock_valid>
   2133a:	b930      	cbnz	r0, 2134a <k_sched_lock+0x7a>
   2133c:	4906      	ldr	r1, [pc, #24]	; (21358 <k_sched_lock+0x88>)
   2133e:	4807      	ldr	r0, [pc, #28]	; (2135c <k_sched_lock+0x8c>)
   21340:	22c2      	movs	r2, #194	; 0xc2
   21342:	f004 fdfd 	bl	25f40 <assert_print>
   21346:	21c2      	movs	r1, #194	; 0xc2
   21348:	e7d5      	b.n	212f6 <k_sched_lock+0x26>
	__asm__ volatile(
   2134a:	f384 8811 	msr	BASEPRI, r4
   2134e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   21352:	bd10      	pop	{r4, pc}
   21354:	20002aac 	.word	0x20002aac
   21358:	0002a819 	.word	0x0002a819
   2135c:	0002a7df 	.word	0x0002a7df
   21360:	0002d76d 	.word	0x0002d76d
   21364:	20002a64 	.word	0x20002a64

00021368 <k_sched_unlock>:

void k_sched_unlock(void)
{
   21368:	b510      	push	{r4, lr}
	__asm__ volatile(
   2136a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2136e:	f3ef 8411 	mrs	r4, BASEPRI
   21372:	f383 8812 	msr	BASEPRI_MAX, r3
   21376:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2137a:	4820      	ldr	r0, [pc, #128]	; (213fc <k_sched_unlock+0x94>)
   2137c:	f7fe fe28 	bl	1ffd0 <z_spin_lock_valid>
   21380:	b938      	cbnz	r0, 21392 <k_sched_unlock+0x2a>
   21382:	491f      	ldr	r1, [pc, #124]	; (21400 <k_sched_unlock+0x98>)
   21384:	481f      	ldr	r0, [pc, #124]	; (21404 <k_sched_unlock+0x9c>)
   21386:	2294      	movs	r2, #148	; 0x94
   21388:	f004 fdda 	bl	25f40 <assert_print>
   2138c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2138e:	481c      	ldr	r0, [pc, #112]	; (21400 <k_sched_unlock+0x98>)
   21390:	e00f      	b.n	213b2 <k_sched_unlock+0x4a>
	z_spin_lock_set_owner(l);
   21392:	481a      	ldr	r0, [pc, #104]	; (213fc <k_sched_unlock+0x94>)
   21394:	f7fe fe3a 	bl	2000c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   21398:	4b1b      	ldr	r3, [pc, #108]	; (21408 <k_sched_unlock+0xa0>)
   2139a:	689a      	ldr	r2, [r3, #8]
   2139c:	7bd3      	ldrb	r3, [r2, #15]
   2139e:	b953      	cbnz	r3, 213b6 <k_sched_unlock+0x4e>
   213a0:	491a      	ldr	r1, [pc, #104]	; (2140c <k_sched_unlock+0xa4>)
   213a2:	4818      	ldr	r0, [pc, #96]	; (21404 <k_sched_unlock+0x9c>)
   213a4:	f240 32e7 	movw	r2, #999	; 0x3e7
   213a8:	f004 fdca 	bl	25f40 <assert_print>
   213ac:	f240 31e7 	movw	r1, #999	; 0x3e7
   213b0:	4816      	ldr	r0, [pc, #88]	; (2140c <k_sched_unlock+0xa4>)
   213b2:	f004 fdbe 	bl	25f32 <assert_post_action>
   213b6:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   213ba:	b140      	cbz	r0, 213ce <k_sched_unlock+0x66>
   213bc:	4913      	ldr	r1, [pc, #76]	; (2140c <k_sched_unlock+0xa4>)
   213be:	4811      	ldr	r0, [pc, #68]	; (21404 <k_sched_unlock+0x9c>)
   213c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   213c4:	f004 fdbc 	bl	25f40 <assert_print>
   213c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   213cc:	e7f0      	b.n	213b0 <k_sched_unlock+0x48>

		++_current->base.sched_locked;
   213ce:	3301      	adds	r3, #1
   213d0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   213d2:	f7ff fe0f 	bl	20ff4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   213d6:	4809      	ldr	r0, [pc, #36]	; (213fc <k_sched_unlock+0x94>)
   213d8:	f7fe fe08 	bl	1ffec <z_spin_unlock_valid>
   213dc:	b930      	cbnz	r0, 213ec <k_sched_unlock+0x84>
   213de:	4908      	ldr	r1, [pc, #32]	; (21400 <k_sched_unlock+0x98>)
   213e0:	4808      	ldr	r0, [pc, #32]	; (21404 <k_sched_unlock+0x9c>)
   213e2:	22c2      	movs	r2, #194	; 0xc2
   213e4:	f004 fdac 	bl	25f40 <assert_print>
   213e8:	21c2      	movs	r1, #194	; 0xc2
   213ea:	e7d0      	b.n	2138e <k_sched_unlock+0x26>
	__asm__ volatile(
   213ec:	f384 8811 	msr	BASEPRI, r4
   213f0:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   213f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   213f8:	f008 b838 	b.w	2946c <z_reschedule_unlocked>
   213fc:	20002aac 	.word	0x20002aac
   21400:	0002a819 	.word	0x0002a819
   21404:	0002a7df 	.word	0x0002a7df
   21408:	20002a64 	.word	0x20002a64
   2140c:	0002d74b 	.word	0x0002d74b

00021410 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   21410:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21412:	4b0b      	ldr	r3, [pc, #44]	; (21440 <z_priq_dumb_remove+0x30>)
   21414:	4299      	cmp	r1, r3
   21416:	d10a      	bne.n	2142e <z_priq_dumb_remove+0x1e>
   21418:	490a      	ldr	r1, [pc, #40]	; (21444 <z_priq_dumb_remove+0x34>)
   2141a:	480b      	ldr	r0, [pc, #44]	; (21448 <z_priq_dumb_remove+0x38>)
   2141c:	f240 4273 	movw	r2, #1139	; 0x473
   21420:	f004 fd8e 	bl	25f40 <assert_print>
   21424:	4807      	ldr	r0, [pc, #28]	; (21444 <z_priq_dumb_remove+0x34>)
   21426:	f240 4173 	movw	r1, #1139	; 0x473
   2142a:	f004 fd82 	bl	25f32 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2142e:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   21432:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21434:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21436:	2300      	movs	r3, #0
	node->prev = NULL;
   21438:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2143c:	bd08      	pop	{r3, pc}
   2143e:	bf00      	nop
   21440:	20001e68 	.word	0x20001e68
   21444:	0002d74b 	.word	0x0002d74b
   21448:	0002a7df 	.word	0x0002a7df

0002144c <move_thread_to_end_of_prio_q>:
{
   2144c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2144e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21452:	7b43      	ldrb	r3, [r0, #13]
   21454:	2a00      	cmp	r2, #0
{
   21456:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21458:	da06      	bge.n	21468 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2145a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2145e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21460:	4601      	mov	r1, r0
   21462:	481d      	ldr	r0, [pc, #116]	; (214d8 <move_thread_to_end_of_prio_q+0x8c>)
   21464:	f7ff ffd4 	bl	21410 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21468:	7b63      	ldrb	r3, [r4, #13]
   2146a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2146e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21470:	4b1a      	ldr	r3, [pc, #104]	; (214dc <move_thread_to_end_of_prio_q+0x90>)
   21472:	429c      	cmp	r4, r3
   21474:	d108      	bne.n	21488 <move_thread_to_end_of_prio_q+0x3c>
   21476:	491a      	ldr	r1, [pc, #104]	; (214e0 <move_thread_to_end_of_prio_q+0x94>)
   21478:	481a      	ldr	r0, [pc, #104]	; (214e4 <move_thread_to_end_of_prio_q+0x98>)
   2147a:	22ba      	movs	r2, #186	; 0xba
   2147c:	f004 fd60 	bl	25f40 <assert_print>
   21480:	4817      	ldr	r0, [pc, #92]	; (214e0 <move_thread_to_end_of_prio_q+0x94>)
   21482:	21ba      	movs	r1, #186	; 0xba
   21484:	f004 fd55 	bl	25f32 <assert_post_action>
	return list->head == list;
   21488:	4a17      	ldr	r2, [pc, #92]	; (214e8 <move_thread_to_end_of_prio_q+0x9c>)
   2148a:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
   2148c:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
   2148e:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21492:	428b      	cmp	r3, r1
   21494:	bf08      	it	eq
   21496:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21498:	b923      	cbnz	r3, 214a4 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   2149a:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   2149e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   214a0:	6254      	str	r4, [r2, #36]	; 0x24
}
   214a2:	e00c      	b.n	214be <move_thread_to_end_of_prio_q+0x72>
	int32_t b1 = thread_1->base.prio;
   214a4:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   214a8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   214ac:	42b5      	cmp	r5, r6
   214ae:	d00e      	beq.n	214ce <move_thread_to_end_of_prio_q+0x82>
		if (z_sched_prio_cmp(thread, t) > 0) {
   214b0:	42ae      	cmp	r6, r5
   214b2:	dd0c      	ble.n	214ce <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   214b4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   214b6:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   214ba:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   214bc:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   214be:	6890      	ldr	r0, [r2, #8]
   214c0:	1b03      	subs	r3, r0, r4
   214c2:	4258      	negs	r0, r3
}
   214c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   214c8:	4158      	adcs	r0, r3
   214ca:	f7ff bd93 	b.w	20ff4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   214ce:	4298      	cmp	r0, r3
   214d0:	d0e3      	beq.n	2149a <move_thread_to_end_of_prio_q+0x4e>
   214d2:	681b      	ldr	r3, [r3, #0]
   214d4:	e7e0      	b.n	21498 <move_thread_to_end_of_prio_q+0x4c>
   214d6:	bf00      	nop
   214d8:	20002a84 	.word	0x20002a84
   214dc:	20001e68 	.word	0x20001e68
   214e0:	0002d74b 	.word	0x0002d74b
   214e4:	0002a7df 	.word	0x0002a7df
   214e8:	20002a64 	.word	0x20002a64

000214ec <z_time_slice>:
{
   214ec:	b570      	push	{r4, r5, r6, lr}
   214ee:	4605      	mov	r5, r0
	__asm__ volatile(
   214f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   214f4:	f3ef 8611 	mrs	r6, BASEPRI
   214f8:	f383 8812 	msr	BASEPRI_MAX, r3
   214fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21500:	4824      	ldr	r0, [pc, #144]	; (21594 <z_time_slice+0xa8>)
   21502:	f7fe fd65 	bl	1ffd0 <z_spin_lock_valid>
   21506:	b940      	cbnz	r0, 2151a <z_time_slice+0x2e>
   21508:	4923      	ldr	r1, [pc, #140]	; (21598 <z_time_slice+0xac>)
   2150a:	4824      	ldr	r0, [pc, #144]	; (2159c <z_time_slice+0xb0>)
   2150c:	2294      	movs	r2, #148	; 0x94
   2150e:	f004 fd17 	bl	25f40 <assert_print>
   21512:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21514:	4820      	ldr	r0, [pc, #128]	; (21598 <z_time_slice+0xac>)
   21516:	f004 fd0c 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   2151a:	481e      	ldr	r0, [pc, #120]	; (21594 <z_time_slice+0xa8>)
   2151c:	f7fe fd76 	bl	2000c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   21520:	4b1f      	ldr	r3, [pc, #124]	; (215a0 <z_time_slice+0xb4>)
   21522:	4a20      	ldr	r2, [pc, #128]	; (215a4 <z_time_slice+0xb8>)
   21524:	689c      	ldr	r4, [r3, #8]
   21526:	6811      	ldr	r1, [r2, #0]
   21528:	428c      	cmp	r4, r1
   2152a:	d10d      	bne.n	21548 <z_time_slice+0x5c>
		z_reset_time_slice(_current);
   2152c:	4620      	mov	r0, r4
   2152e:	f7ff fd4d 	bl	20fcc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21532:	4818      	ldr	r0, [pc, #96]	; (21594 <z_time_slice+0xa8>)
   21534:	f7fe fd5a 	bl	1ffec <z_spin_unlock_valid>
   21538:	bb30      	cbnz	r0, 21588 <z_time_slice+0x9c>
   2153a:	4917      	ldr	r1, [pc, #92]	; (21598 <z_time_slice+0xac>)
   2153c:	4817      	ldr	r0, [pc, #92]	; (2159c <z_time_slice+0xb0>)
   2153e:	22c2      	movs	r2, #194	; 0xc2
   21540:	f004 fcfe 	bl	25f40 <assert_print>
   21544:	21c2      	movs	r1, #194	; 0xc2
   21546:	e7e5      	b.n	21514 <z_time_slice+0x28>
	pending_current = NULL;
   21548:	2100      	movs	r1, #0
   2154a:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   2154c:	4a16      	ldr	r2, [pc, #88]	; (215a8 <z_time_slice+0xbc>)
	if (slice_time(_current) && sliceable(_current)) {
   2154e:	6812      	ldr	r2, [r2, #0]
   21550:	b1c2      	cbz	r2, 21584 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   21552:	89e2      	ldrh	r2, [r4, #14]
   21554:	2a7f      	cmp	r2, #127	; 0x7f
   21556:	d815      	bhi.n	21584 <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
   21558:	7b62      	ldrb	r2, [r4, #13]
   2155a:	06d2      	lsls	r2, r2, #27
   2155c:	d112      	bne.n	21584 <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2155e:	4a13      	ldr	r2, [pc, #76]	; (215ac <z_time_slice+0xc0>)
   21560:	f994 100e 	ldrsb.w	r1, [r4, #14]
   21564:	6812      	ldr	r2, [r2, #0]
   21566:	4291      	cmp	r1, r2
   21568:	db0c      	blt.n	21584 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   2156a:	4a11      	ldr	r2, [pc, #68]	; (215b0 <z_time_slice+0xc4>)
   2156c:	4294      	cmp	r4, r2
   2156e:	d009      	beq.n	21584 <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
   21570:	691a      	ldr	r2, [r3, #16]
   21572:	42aa      	cmp	r2, r5
   21574:	dc03      	bgt.n	2157e <z_time_slice+0x92>
		move_thread_to_end_of_prio_q(curr);
   21576:	4620      	mov	r0, r4
   21578:	f7ff ff68 	bl	2144c <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   2157c:	e7d6      	b.n	2152c <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   2157e:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   21580:	611a      	str	r2, [r3, #16]
   21582:	e7d6      	b.n	21532 <z_time_slice+0x46>
   21584:	2200      	movs	r2, #0
   21586:	e7fb      	b.n	21580 <z_time_slice+0x94>
	__asm__ volatile(
   21588:	f386 8811 	msr	BASEPRI, r6
   2158c:	f3bf 8f6f 	isb	sy
}
   21590:	bd70      	pop	{r4, r5, r6, pc}
   21592:	bf00      	nop
   21594:	20002aac 	.word	0x20002aac
   21598:	0002a819 	.word	0x0002a819
   2159c:	0002a7df 	.word	0x0002a7df
   215a0:	20002a64 	.word	0x20002a64
   215a4:	20002aa0 	.word	0x20002aa0
   215a8:	20002aa8 	.word	0x20002aa8
   215ac:	20002aa4 	.word	0x20002aa4
   215b0:	20001e68 	.word	0x20001e68

000215b4 <unready_thread>:
{
   215b4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   215b6:	f990 200d 	ldrsb.w	r2, [r0, #13]
   215ba:	7b43      	ldrb	r3, [r0, #13]
   215bc:	2a00      	cmp	r2, #0
{
   215be:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   215c0:	da06      	bge.n	215d0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   215c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   215c6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   215c8:	4601      	mov	r1, r0
   215ca:	4806      	ldr	r0, [pc, #24]	; (215e4 <unready_thread+0x30>)
   215cc:	f7ff ff20 	bl	21410 <z_priq_dumb_remove>
	update_cache(thread == _current);
   215d0:	4b05      	ldr	r3, [pc, #20]	; (215e8 <unready_thread+0x34>)
   215d2:	6898      	ldr	r0, [r3, #8]
   215d4:	1b03      	subs	r3, r0, r4
   215d6:	4258      	negs	r0, r3
}
   215d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   215dc:	4158      	adcs	r0, r3
   215de:	f7ff bd09 	b.w	20ff4 <update_cache>
   215e2:	bf00      	nop
   215e4:	20002a84 	.word	0x20002a84
   215e8:	20002a64 	.word	0x20002a64

000215ec <add_to_waitq_locked>:
{
   215ec:	b538      	push	{r3, r4, r5, lr}
   215ee:	4604      	mov	r4, r0
   215f0:	460d      	mov	r5, r1
	unready_thread(thread);
   215f2:	f7ff ffdf 	bl	215b4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   215f6:	7b63      	ldrb	r3, [r4, #13]
   215f8:	f043 0302 	orr.w	r3, r3, #2
   215fc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   215fe:	b345      	cbz	r5, 21652 <add_to_waitq_locked+0x66>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21600:	4b14      	ldr	r3, [pc, #80]	; (21654 <add_to_waitq_locked+0x68>)
		thread->base.pended_on = wait_q;
   21602:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21604:	429c      	cmp	r4, r3
   21606:	d108      	bne.n	2161a <add_to_waitq_locked+0x2e>
   21608:	4913      	ldr	r1, [pc, #76]	; (21658 <add_to_waitq_locked+0x6c>)
   2160a:	4814      	ldr	r0, [pc, #80]	; (2165c <add_to_waitq_locked+0x70>)
   2160c:	22ba      	movs	r2, #186	; 0xba
   2160e:	f004 fc97 	bl	25f40 <assert_print>
   21612:	4811      	ldr	r0, [pc, #68]	; (21658 <add_to_waitq_locked+0x6c>)
   21614:	21ba      	movs	r1, #186	; 0xba
   21616:	f004 fc8c 	bl	25f32 <assert_post_action>
	return list->head == list;
   2161a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2161c:	429d      	cmp	r5, r3
   2161e:	d109      	bne.n	21634 <add_to_waitq_locked+0x48>
	sys_dnode_t *const tail = list->tail;
   21620:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   21622:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   21626:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21628:	606c      	str	r4, [r5, #4]
}
   2162a:	e012      	b.n	21652 <add_to_waitq_locked+0x66>
	return (node == list->tail) ? NULL : node->next;
   2162c:	686a      	ldr	r2, [r5, #4]
   2162e:	4293      	cmp	r3, r2
   21630:	d0f6      	beq.n	21620 <add_to_waitq_locked+0x34>
   21632:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21634:	2b00      	cmp	r3, #0
   21636:	d0f3      	beq.n	21620 <add_to_waitq_locked+0x34>
	int32_t b1 = thread_1->base.prio;
   21638:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2163c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   21640:	428a      	cmp	r2, r1
   21642:	d0f3      	beq.n	2162c <add_to_waitq_locked+0x40>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21644:	4291      	cmp	r1, r2
   21646:	ddf1      	ble.n	2162c <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
   21648:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2164a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2164e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21650:	605c      	str	r4, [r3, #4]
}
   21652:	bd38      	pop	{r3, r4, r5, pc}
   21654:	20001e68 	.word	0x20001e68
   21658:	0002d74b 	.word	0x0002d74b
   2165c:	0002a7df 	.word	0x0002a7df

00021660 <pend_locked>:
{
   21660:	b570      	push	{r4, r5, r6, lr}
   21662:	4615      	mov	r5, r2
   21664:	461c      	mov	r4, r3
   21666:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   21668:	f7ff ffc0 	bl	215ec <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2166c:	f1b4 3fff 	cmp.w	r4, #4294967295
   21670:	bf08      	it	eq
   21672:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   21676:	d008      	beq.n	2168a <pend_locked+0x2a>
   21678:	462a      	mov	r2, r5
   2167a:	4623      	mov	r3, r4
   2167c:	f106 0018 	add.w	r0, r6, #24
   21680:	4902      	ldr	r1, [pc, #8]	; (2168c <pend_locked+0x2c>)
}
   21682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21686:	f000 bcad 	b.w	21fe4 <z_add_timeout>
   2168a:	bd70      	pop	{r4, r5, r6, pc}
   2168c:	00021995 	.word	0x00021995

00021690 <z_pend_curr>:
{
   21690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
   21694:	f8df a094 	ldr.w	sl, [pc, #148]	; 2172c <z_pend_curr+0x9c>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   21698:	4c25      	ldr	r4, [pc, #148]	; (21730 <z_pend_curr+0xa0>)
	pending_current = _current;
   2169a:	4b26      	ldr	r3, [pc, #152]	; (21734 <z_pend_curr+0xa4>)
{
   2169c:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2169e:	42a0      	cmp	r0, r4
	pending_current = _current;
   216a0:	f8da 2008 	ldr.w	r2, [sl, #8]
   216a4:	601a      	str	r2, [r3, #0]
{
   216a6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   216aa:	4605      	mov	r5, r0
   216ac:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   216ae:	d10a      	bne.n	216c6 <z_pend_curr+0x36>
   216b0:	4921      	ldr	r1, [pc, #132]	; (21738 <z_pend_curr+0xa8>)
   216b2:	4822      	ldr	r0, [pc, #136]	; (2173c <z_pend_curr+0xac>)
   216b4:	f240 324e 	movw	r2, #846	; 0x34e
   216b8:	f004 fc42 	bl	25f40 <assert_print>
   216bc:	481e      	ldr	r0, [pc, #120]	; (21738 <z_pend_curr+0xa8>)
   216be:	f240 314e 	movw	r1, #846	; 0x34e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   216c2:	f004 fc36 	bl	25f32 <assert_post_action>
	__asm__ volatile(
   216c6:	f04f 0240 	mov.w	r2, #64	; 0x40
   216ca:	f3ef 8311 	mrs	r3, BASEPRI
   216ce:	f382 8812 	msr	BASEPRI_MAX, r2
   216d2:	f3bf 8f6f 	isb	sy
   216d6:	4620      	mov	r0, r4
   216d8:	f7fe fc7a 	bl	1ffd0 <z_spin_lock_valid>
   216dc:	b938      	cbnz	r0, 216ee <z_pend_curr+0x5e>
   216de:	4918      	ldr	r1, [pc, #96]	; (21740 <z_pend_curr+0xb0>)
   216e0:	4816      	ldr	r0, [pc, #88]	; (2173c <z_pend_curr+0xac>)
   216e2:	2294      	movs	r2, #148	; 0x94
   216e4:	f004 fc2c 	bl	25f40 <assert_print>
   216e8:	2194      	movs	r1, #148	; 0x94
   216ea:	4815      	ldr	r0, [pc, #84]	; (21740 <z_pend_curr+0xb0>)
   216ec:	e7e9      	b.n	216c2 <z_pend_curr+0x32>
	z_spin_lock_set_owner(l);
   216ee:	4620      	mov	r0, r4
   216f0:	f7fe fc8c 	bl	2000c <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   216f4:	f8da 0008 	ldr.w	r0, [sl, #8]
   216f8:	4642      	mov	r2, r8
   216fa:	464b      	mov	r3, r9
   216fc:	4639      	mov	r1, r7
   216fe:	f7ff ffaf 	bl	21660 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21702:	4628      	mov	r0, r5
   21704:	f7fe fc72 	bl	1ffec <z_spin_unlock_valid>
   21708:	b930      	cbnz	r0, 21718 <z_pend_curr+0x88>
   2170a:	490d      	ldr	r1, [pc, #52]	; (21740 <z_pend_curr+0xb0>)
   2170c:	480b      	ldr	r0, [pc, #44]	; (2173c <z_pend_curr+0xac>)
   2170e:	22e1      	movs	r2, #225	; 0xe1
   21710:	f004 fc16 	bl	25f40 <assert_print>
   21714:	21e1      	movs	r1, #225	; 0xe1
   21716:	e7e8      	b.n	216ea <z_pend_curr+0x5a>
   21718:	4620      	mov	r0, r4
   2171a:	f7fe fc67 	bl	1ffec <z_spin_unlock_valid>
   2171e:	2800      	cmp	r0, #0
   21720:	d0f3      	beq.n	2170a <z_pend_curr+0x7a>
   21722:	4630      	mov	r0, r6
}
   21724:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21728:	f7f1 bd52 	b.w	131d0 <arch_swap>
   2172c:	20002a64 	.word	0x20002a64
   21730:	20002aac 	.word	0x20002aac
   21734:	20002aa0 	.word	0x20002aa0
   21738:	0002d74b 	.word	0x0002d74b
   2173c:	0002a7df 	.word	0x0002a7df
   21740:	0002a819 	.word	0x0002a819

00021744 <z_set_prio>:
{
   21744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21748:	4604      	mov	r4, r0
   2174a:	460e      	mov	r6, r1
   2174c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21750:	f3ef 8911 	mrs	r9, BASEPRI
   21754:	f383 8812 	msr	BASEPRI_MAX, r3
   21758:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2175c:	4831      	ldr	r0, [pc, #196]	; (21824 <z_set_prio+0xe0>)
   2175e:	f7fe fc37 	bl	1ffd0 <z_spin_lock_valid>
   21762:	4607      	mov	r7, r0
   21764:	b938      	cbnz	r0, 21776 <z_set_prio+0x32>
   21766:	4930      	ldr	r1, [pc, #192]	; (21828 <z_set_prio+0xe4>)
   21768:	4830      	ldr	r0, [pc, #192]	; (2182c <z_set_prio+0xe8>)
   2176a:	2294      	movs	r2, #148	; 0x94
   2176c:	f004 fbe8 	bl	25f40 <assert_print>
   21770:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21772:	482d      	ldr	r0, [pc, #180]	; (21828 <z_set_prio+0xe4>)
   21774:	e020      	b.n	217b8 <z_set_prio+0x74>
	z_spin_lock_set_owner(l);
   21776:	482b      	ldr	r0, [pc, #172]	; (21824 <z_set_prio+0xe0>)
   21778:	f7fe fc48 	bl	2000c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   2177c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2177e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   21780:	b276      	sxtb	r6, r6
   21782:	d11b      	bne.n	217bc <z_set_prio+0x78>
	return node->next != NULL;
   21784:	69a5      	ldr	r5, [r4, #24]
   21786:	b9cd      	cbnz	r5, 217bc <z_set_prio+0x78>
	_priq_run_remove(thread_runq(thread), thread);
   21788:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 21830 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2178c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21790:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21792:	4621      	mov	r1, r4
   21794:	4640      	mov	r0, r8
   21796:	f7ff fe3b 	bl	21410 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2179a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2179c:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2179e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   217a2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   217a4:	4b23      	ldr	r3, [pc, #140]	; (21834 <z_set_prio+0xf0>)
   217a6:	429c      	cmp	r4, r3
   217a8:	d115      	bne.n	217d6 <z_set_prio+0x92>
   217aa:	4923      	ldr	r1, [pc, #140]	; (21838 <z_set_prio+0xf4>)
   217ac:	481f      	ldr	r0, [pc, #124]	; (2182c <z_set_prio+0xe8>)
   217ae:	22ba      	movs	r2, #186	; 0xba
   217b0:	f004 fbc6 	bl	25f40 <assert_print>
   217b4:	4820      	ldr	r0, [pc, #128]	; (21838 <z_set_prio+0xf4>)
   217b6:	21ba      	movs	r1, #186	; 0xba
   217b8:	f004 fbbb 	bl	25f32 <assert_post_action>
			thread->base.prio = prio;
   217bc:	73a6      	strb	r6, [r4, #14]
   217be:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   217c0:	4818      	ldr	r0, [pc, #96]	; (21824 <z_set_prio+0xe0>)
   217c2:	f7fe fc13 	bl	1ffec <z_spin_unlock_valid>
   217c6:	bb30      	cbnz	r0, 21816 <z_set_prio+0xd2>
   217c8:	4917      	ldr	r1, [pc, #92]	; (21828 <z_set_prio+0xe4>)
   217ca:	4818      	ldr	r0, [pc, #96]	; (2182c <z_set_prio+0xe8>)
   217cc:	22c2      	movs	r2, #194	; 0xc2
   217ce:	f004 fbb7 	bl	25f40 <assert_print>
   217d2:	21c2      	movs	r1, #194	; 0xc2
   217d4:	e7cd      	b.n	21772 <z_set_prio+0x2e>
	return list->head == list;
   217d6:	4643      	mov	r3, r8
   217d8:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   217dc:	4542      	cmp	r2, r8
   217de:	bf18      	it	ne
   217e0:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   217e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   217e4:	b925      	cbnz	r5, 217f0 <z_set_prio+0xac>
	node->prev = tail;
   217e6:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   217ea:	6014      	str	r4, [r2, #0]
	list->tail = node;
   217ec:	625c      	str	r4, [r3, #36]	; 0x24
}
   217ee:	e00a      	b.n	21806 <z_set_prio+0xc2>
	int32_t b2 = thread_2->base.prio;
   217f0:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   217f4:	428e      	cmp	r6, r1
   217f6:	d00a      	beq.n	2180e <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
   217f8:	42b1      	cmp	r1, r6
   217fa:	dd08      	ble.n	2180e <z_set_prio+0xca>
	sys_dnode_t *const prev = successor->prev;
   217fc:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   217fe:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   21802:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   21804:	606c      	str	r4, [r5, #4]
			update_cache(1);
   21806:	2001      	movs	r0, #1
   21808:	f7ff fbf4 	bl	20ff4 <update_cache>
   2180c:	e7d8      	b.n	217c0 <z_set_prio+0x7c>
	return (node == list->tail) ? NULL : node->next;
   2180e:	42aa      	cmp	r2, r5
   21810:	d0e9      	beq.n	217e6 <z_set_prio+0xa2>
   21812:	682d      	ldr	r5, [r5, #0]
   21814:	e7e6      	b.n	217e4 <z_set_prio+0xa0>
	__asm__ volatile(
   21816:	f389 8811 	msr	BASEPRI, r9
   2181a:	f3bf 8f6f 	isb	sy
}
   2181e:	4638      	mov	r0, r7
   21820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21824:	20002aac 	.word	0x20002aac
   21828:	0002a819 	.word	0x0002a819
   2182c:	0002a7df 	.word	0x0002a7df
   21830:	20002a84 	.word	0x20002a84
   21834:	20001e68 	.word	0x20001e68
   21838:	0002d74b 	.word	0x0002d74b

0002183c <z_impl_k_thread_suspend>:
{
   2183c:	b570      	push	{r4, r5, r6, lr}
   2183e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21840:	3018      	adds	r0, #24
   21842:	f000 fc7b 	bl	2213c <z_abort_timeout>
	__asm__ volatile(
   21846:	f04f 0340 	mov.w	r3, #64	; 0x40
   2184a:	f3ef 8611 	mrs	r6, BASEPRI
   2184e:	f383 8812 	msr	BASEPRI_MAX, r3
   21852:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21856:	481f      	ldr	r0, [pc, #124]	; (218d4 <z_impl_k_thread_suspend+0x98>)
   21858:	f7fe fbba 	bl	1ffd0 <z_spin_lock_valid>
   2185c:	b940      	cbnz	r0, 21870 <z_impl_k_thread_suspend+0x34>
   2185e:	491e      	ldr	r1, [pc, #120]	; (218d8 <z_impl_k_thread_suspend+0x9c>)
   21860:	481e      	ldr	r0, [pc, #120]	; (218dc <z_impl_k_thread_suspend+0xa0>)
   21862:	2294      	movs	r2, #148	; 0x94
   21864:	f004 fb6c 	bl	25f40 <assert_print>
   21868:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2186a:	481b      	ldr	r0, [pc, #108]	; (218d8 <z_impl_k_thread_suspend+0x9c>)
   2186c:	f004 fb61 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   21870:	4818      	ldr	r0, [pc, #96]	; (218d4 <z_impl_k_thread_suspend+0x98>)
   21872:	f7fe fbcb 	bl	2000c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   21876:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2187a:	7b63      	ldrb	r3, [r4, #13]
   2187c:	2a00      	cmp	r2, #0
   2187e:	da06      	bge.n	2188e <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   21884:	4816      	ldr	r0, [pc, #88]	; (218e0 <z_impl_k_thread_suspend+0xa4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21886:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21888:	4621      	mov	r1, r4
   2188a:	f7ff fdc1 	bl	21410 <z_priq_dumb_remove>
		update_cache(thread == _current);
   2188e:	4d15      	ldr	r5, [pc, #84]	; (218e4 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21890:	7b63      	ldrb	r3, [r4, #13]
   21892:	68a8      	ldr	r0, [r5, #8]
   21894:	f043 0310 	orr.w	r3, r3, #16
   21898:	7363      	strb	r3, [r4, #13]
   2189a:	1b03      	subs	r3, r0, r4
   2189c:	4258      	negs	r0, r3
   2189e:	4158      	adcs	r0, r3
   218a0:	f7ff fba8 	bl	20ff4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   218a4:	480b      	ldr	r0, [pc, #44]	; (218d4 <z_impl_k_thread_suspend+0x98>)
   218a6:	f7fe fba1 	bl	1ffec <z_spin_unlock_valid>
   218aa:	b930      	cbnz	r0, 218ba <z_impl_k_thread_suspend+0x7e>
   218ac:	490a      	ldr	r1, [pc, #40]	; (218d8 <z_impl_k_thread_suspend+0x9c>)
   218ae:	480b      	ldr	r0, [pc, #44]	; (218dc <z_impl_k_thread_suspend+0xa0>)
   218b0:	22c2      	movs	r2, #194	; 0xc2
   218b2:	f004 fb45 	bl	25f40 <assert_print>
   218b6:	21c2      	movs	r1, #194	; 0xc2
   218b8:	e7d7      	b.n	2186a <z_impl_k_thread_suspend+0x2e>
	__asm__ volatile(
   218ba:	f386 8811 	msr	BASEPRI, r6
   218be:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   218c2:	68ab      	ldr	r3, [r5, #8]
   218c4:	42a3      	cmp	r3, r4
   218c6:	d103      	bne.n	218d0 <z_impl_k_thread_suspend+0x94>
}
   218c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   218cc:	f007 bdce 	b.w	2946c <z_reschedule_unlocked>
}
   218d0:	bd70      	pop	{r4, r5, r6, pc}
   218d2:	bf00      	nop
   218d4:	20002aac 	.word	0x20002aac
   218d8:	0002a819 	.word	0x0002a819
   218dc:	0002a7df 	.word	0x0002a7df
   218e0:	20002a84 	.word	0x20002a84
   218e4:	20002a64 	.word	0x20002a64

000218e8 <unpend_thread_no_timeout>:
{
   218e8:	b510      	push	{r4, lr}
   218ea:	4604      	mov	r4, r0
   218ec:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   218ee:	b950      	cbnz	r0, 21906 <unpend_thread_no_timeout+0x1e>
   218f0:	490a      	ldr	r1, [pc, #40]	; (2191c <unpend_thread_no_timeout+0x34>)
   218f2:	480b      	ldr	r0, [pc, #44]	; (21920 <unpend_thread_no_timeout+0x38>)
   218f4:	f240 22d6 	movw	r2, #726	; 0x2d6
   218f8:	f004 fb22 	bl	25f40 <assert_print>
   218fc:	4807      	ldr	r0, [pc, #28]	; (2191c <unpend_thread_no_timeout+0x34>)
   218fe:	f240 21d6 	movw	r1, #726	; 0x2d6
   21902:	f004 fb16 	bl	25f32 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21906:	4621      	mov	r1, r4
   21908:	f7ff fd82 	bl	21410 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2190c:	7b63      	ldrb	r3, [r4, #13]
   2190e:	f023 0302 	bic.w	r3, r3, #2
   21912:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21914:	2300      	movs	r3, #0
   21916:	60a3      	str	r3, [r4, #8]
}
   21918:	bd10      	pop	{r4, pc}
   2191a:	bf00      	nop
   2191c:	0002d74b 	.word	0x0002d74b
   21920:	0002a7df 	.word	0x0002a7df

00021924 <z_unpend_thread>:
{
   21924:	b538      	push	{r3, r4, r5, lr}
   21926:	4604      	mov	r4, r0
	__asm__ volatile(
   21928:	f04f 0340 	mov.w	r3, #64	; 0x40
   2192c:	f3ef 8511 	mrs	r5, BASEPRI
   21930:	f383 8812 	msr	BASEPRI_MAX, r3
   21934:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21938:	4813      	ldr	r0, [pc, #76]	; (21988 <z_unpend_thread+0x64>)
   2193a:	f7fe fb49 	bl	1ffd0 <z_spin_lock_valid>
   2193e:	b940      	cbnz	r0, 21952 <z_unpend_thread+0x2e>
   21940:	4912      	ldr	r1, [pc, #72]	; (2198c <z_unpend_thread+0x68>)
   21942:	4813      	ldr	r0, [pc, #76]	; (21990 <z_unpend_thread+0x6c>)
   21944:	2294      	movs	r2, #148	; 0x94
   21946:	f004 fafb 	bl	25f40 <assert_print>
   2194a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2194c:	480f      	ldr	r0, [pc, #60]	; (2198c <z_unpend_thread+0x68>)
   2194e:	f004 faf0 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   21952:	480d      	ldr	r0, [pc, #52]	; (21988 <z_unpend_thread+0x64>)
   21954:	f7fe fb5a 	bl	2000c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   21958:	4620      	mov	r0, r4
   2195a:	f7ff ffc5 	bl	218e8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2195e:	480a      	ldr	r0, [pc, #40]	; (21988 <z_unpend_thread+0x64>)
   21960:	f7fe fb44 	bl	1ffec <z_spin_unlock_valid>
   21964:	b930      	cbnz	r0, 21974 <z_unpend_thread+0x50>
   21966:	4909      	ldr	r1, [pc, #36]	; (2198c <z_unpend_thread+0x68>)
   21968:	4809      	ldr	r0, [pc, #36]	; (21990 <z_unpend_thread+0x6c>)
   2196a:	22c2      	movs	r2, #194	; 0xc2
   2196c:	f004 fae8 	bl	25f40 <assert_print>
   21970:	21c2      	movs	r1, #194	; 0xc2
   21972:	e7eb      	b.n	2194c <z_unpend_thread+0x28>
	__asm__ volatile(
   21974:	f385 8811 	msr	BASEPRI, r5
   21978:	f3bf 8f6f 	isb	sy
   2197c:	f104 0018 	add.w	r0, r4, #24
}
   21980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21984:	f000 bbda 	b.w	2213c <z_abort_timeout>
   21988:	20002aac 	.word	0x20002aac
   2198c:	0002a819 	.word	0x0002a819
   21990:	0002a7df 	.word	0x0002a7df

00021994 <z_thread_timeout>:
{
   21994:	b570      	push	{r4, r5, r6, lr}
   21996:	4604      	mov	r4, r0
	__asm__ volatile(
   21998:	f04f 0340 	mov.w	r3, #64	; 0x40
   2199c:	f3ef 8611 	mrs	r6, BASEPRI
   219a0:	f383 8812 	msr	BASEPRI_MAX, r3
   219a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   219a8:	481a      	ldr	r0, [pc, #104]	; (21a14 <z_thread_timeout+0x80>)
   219aa:	f7fe fb11 	bl	1ffd0 <z_spin_lock_valid>
   219ae:	b940      	cbnz	r0, 219c2 <z_thread_timeout+0x2e>
   219b0:	4919      	ldr	r1, [pc, #100]	; (21a18 <z_thread_timeout+0x84>)
   219b2:	481a      	ldr	r0, [pc, #104]	; (21a1c <z_thread_timeout+0x88>)
   219b4:	2294      	movs	r2, #148	; 0x94
   219b6:	f004 fac3 	bl	25f40 <assert_print>
   219ba:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219bc:	4816      	ldr	r0, [pc, #88]	; (21a18 <z_thread_timeout+0x84>)
   219be:	f004 fab8 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   219c2:	4814      	ldr	r0, [pc, #80]	; (21a14 <z_thread_timeout+0x80>)
   219c4:	f7fe fb22 	bl	2000c <z_spin_lock_set_owner>
		if (!killed) {
   219c8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   219cc:	f013 0f28 	tst.w	r3, #40	; 0x28
   219d0:	d110      	bne.n	219f4 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   219d2:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   219d6:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   219da:	b113      	cbz	r3, 219e2 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   219dc:	4628      	mov	r0, r5
   219de:	f7ff ff83 	bl	218e8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   219e2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   219e6:	f023 0314 	bic.w	r3, r3, #20
   219ea:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   219ee:	4628      	mov	r0, r5
   219f0:	f7ff fb2c 	bl	2104c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219f4:	4807      	ldr	r0, [pc, #28]	; (21a14 <z_thread_timeout+0x80>)
   219f6:	f7fe faf9 	bl	1ffec <z_spin_unlock_valid>
   219fa:	b930      	cbnz	r0, 21a0a <z_thread_timeout+0x76>
   219fc:	4906      	ldr	r1, [pc, #24]	; (21a18 <z_thread_timeout+0x84>)
   219fe:	4807      	ldr	r0, [pc, #28]	; (21a1c <z_thread_timeout+0x88>)
   21a00:	22c2      	movs	r2, #194	; 0xc2
   21a02:	f004 fa9d 	bl	25f40 <assert_print>
   21a06:	21c2      	movs	r1, #194	; 0xc2
   21a08:	e7d8      	b.n	219bc <z_thread_timeout+0x28>
	__asm__ volatile(
   21a0a:	f386 8811 	msr	BASEPRI, r6
   21a0e:	f3bf 8f6f 	isb	sy
}
   21a12:	bd70      	pop	{r4, r5, r6, pc}
   21a14:	20002aac 	.word	0x20002aac
   21a18:	0002a819 	.word	0x0002a819
   21a1c:	0002a7df 	.word	0x0002a7df

00021a20 <z_unpend_first_thread>:
{
   21a20:	b570      	push	{r4, r5, r6, lr}
   21a22:	4605      	mov	r5, r0
	__asm__ volatile(
   21a24:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a28:	f3ef 8611 	mrs	r6, BASEPRI
   21a2c:	f383 8812 	msr	BASEPRI_MAX, r3
   21a30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a34:	4816      	ldr	r0, [pc, #88]	; (21a90 <z_unpend_first_thread+0x70>)
   21a36:	f7fe facb 	bl	1ffd0 <z_spin_lock_valid>
   21a3a:	b940      	cbnz	r0, 21a4e <z_unpend_first_thread+0x2e>
   21a3c:	4915      	ldr	r1, [pc, #84]	; (21a94 <z_unpend_first_thread+0x74>)
   21a3e:	4816      	ldr	r0, [pc, #88]	; (21a98 <z_unpend_first_thread+0x78>)
   21a40:	2294      	movs	r2, #148	; 0x94
   21a42:	f004 fa7d 	bl	25f40 <assert_print>
   21a46:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a48:	4812      	ldr	r0, [pc, #72]	; (21a94 <z_unpend_first_thread+0x74>)
   21a4a:	f004 fa72 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   21a4e:	4810      	ldr	r0, [pc, #64]	; (21a90 <z_unpend_first_thread+0x70>)
   21a50:	f7fe fadc 	bl	2000c <z_spin_lock_set_owner>
	return list->head == list;
   21a54:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21a56:	42a5      	cmp	r5, r4
   21a58:	d012      	beq.n	21a80 <z_unpend_first_thread+0x60>
		if (thread != NULL) {
   21a5a:	b134      	cbz	r4, 21a6a <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   21a5c:	4620      	mov	r0, r4
   21a5e:	f7ff ff43 	bl	218e8 <unpend_thread_no_timeout>
   21a62:	f104 0018 	add.w	r0, r4, #24
   21a66:	f000 fb69 	bl	2213c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a6a:	4809      	ldr	r0, [pc, #36]	; (21a90 <z_unpend_first_thread+0x70>)
   21a6c:	f7fe fabe 	bl	1ffec <z_spin_unlock_valid>
   21a70:	b940      	cbnz	r0, 21a84 <z_unpend_first_thread+0x64>
   21a72:	4908      	ldr	r1, [pc, #32]	; (21a94 <z_unpend_first_thread+0x74>)
   21a74:	4808      	ldr	r0, [pc, #32]	; (21a98 <z_unpend_first_thread+0x78>)
   21a76:	22c2      	movs	r2, #194	; 0xc2
   21a78:	f004 fa62 	bl	25f40 <assert_print>
   21a7c:	21c2      	movs	r1, #194	; 0xc2
   21a7e:	e7e3      	b.n	21a48 <z_unpend_first_thread+0x28>
   21a80:	2400      	movs	r4, #0
   21a82:	e7f2      	b.n	21a6a <z_unpend_first_thread+0x4a>
	__asm__ volatile(
   21a84:	f386 8811 	msr	BASEPRI, r6
   21a88:	f3bf 8f6f 	isb	sy
}
   21a8c:	4620      	mov	r0, r4
   21a8e:	bd70      	pop	{r4, r5, r6, pc}
   21a90:	20002aac 	.word	0x20002aac
   21a94:	0002a819 	.word	0x0002a819
   21a98:	0002a7df 	.word	0x0002a7df

00021a9c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   21a9c:	4b04      	ldr	r3, [pc, #16]	; (21ab0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21a9e:	2100      	movs	r1, #0
   21aa0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   21aa4:	e9c3 2208 	strd	r2, r2, [r3, #32]
   21aa8:	4608      	mov	r0, r1
   21aaa:	f7ff bb17 	b.w	210dc <k_sched_time_slice_set>
   21aae:	bf00      	nop
   21ab0:	20002a64 	.word	0x20002a64

00021ab4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   21ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ab6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21aba:	b14b      	cbz	r3, 21ad0 <z_impl_k_yield+0x1c>
   21abc:	4935      	ldr	r1, [pc, #212]	; (21b94 <z_impl_k_yield+0xe0>)
   21abe:	4836      	ldr	r0, [pc, #216]	; (21b98 <z_impl_k_yield+0xe4>)
   21ac0:	f44f 62ae 	mov.w	r2, #1392	; 0x570
   21ac4:	f004 fa3c 	bl	25f40 <assert_print>
   21ac8:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21acc:	4831      	ldr	r0, [pc, #196]	; (21b94 <z_impl_k_yield+0xe0>)
   21ace:	e012      	b.n	21af6 <z_impl_k_yield+0x42>
	__asm__ volatile(
   21ad0:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ad4:	f3ef 8611 	mrs	r6, BASEPRI
   21ad8:	f383 8812 	msr	BASEPRI_MAX, r3
   21adc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ae0:	482e      	ldr	r0, [pc, #184]	; (21b9c <z_impl_k_yield+0xe8>)
   21ae2:	f7fe fa75 	bl	1ffd0 <z_spin_lock_valid>
   21ae6:	b940      	cbnz	r0, 21afa <z_impl_k_yield+0x46>
   21ae8:	492d      	ldr	r1, [pc, #180]	; (21ba0 <z_impl_k_yield+0xec>)
   21aea:	482b      	ldr	r0, [pc, #172]	; (21b98 <z_impl_k_yield+0xe4>)
   21aec:	2294      	movs	r2, #148	; 0x94
   21aee:	f004 fa27 	bl	25f40 <assert_print>
   21af2:	2194      	movs	r1, #148	; 0x94
   21af4:	482a      	ldr	r0, [pc, #168]	; (21ba0 <z_impl_k_yield+0xec>)
   21af6:	f004 fa1c 	bl	25f32 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   21afa:	4c2a      	ldr	r4, [pc, #168]	; (21ba4 <z_impl_k_yield+0xf0>)
	z_spin_lock_set_owner(l);
   21afc:	4827      	ldr	r0, [pc, #156]	; (21b9c <z_impl_k_yield+0xe8>)
   21afe:	f7fe fa85 	bl	2000c <z_spin_lock_set_owner>
   21b02:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21b04:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21b06:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21b0e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21b10:	4628      	mov	r0, r5
   21b12:	f7ff fc7d 	bl	21410 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   21b16:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   21b18:	7b5a      	ldrb	r2, [r3, #13]
   21b1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   21b1e:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21b20:	4a21      	ldr	r2, [pc, #132]	; (21ba8 <z_impl_k_yield+0xf4>)
   21b22:	4293      	cmp	r3, r2
   21b24:	d106      	bne.n	21b34 <z_impl_k_yield+0x80>
   21b26:	491b      	ldr	r1, [pc, #108]	; (21b94 <z_impl_k_yield+0xe0>)
   21b28:	481b      	ldr	r0, [pc, #108]	; (21b98 <z_impl_k_yield+0xe4>)
   21b2a:	22ba      	movs	r2, #186	; 0xba
   21b2c:	f004 fa08 	bl	25f40 <assert_print>
   21b30:	21ba      	movs	r1, #186	; 0xba
   21b32:	e7cb      	b.n	21acc <z_impl_k_yield+0x18>
	return list->head == list;
   21b34:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   21b36:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b38:	42aa      	cmp	r2, r5
   21b3a:	bf08      	it	eq
   21b3c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b3e:	b922      	cbnz	r2, 21b4a <z_impl_k_yield+0x96>
	node->prev = tail;
   21b40:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   21b44:	600b      	str	r3, [r1, #0]
	list->tail = node;
   21b46:	6263      	str	r3, [r4, #36]	; 0x24
}
   21b48:	e00c      	b.n	21b64 <z_impl_k_yield+0xb0>
	int32_t b1 = thread_1->base.prio;
   21b4a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   21b4e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   21b52:	42b8      	cmp	r0, r7
   21b54:	d014      	beq.n	21b80 <z_impl_k_yield+0xcc>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21b56:	4287      	cmp	r7, r0
   21b58:	dd12      	ble.n	21b80 <z_impl_k_yield+0xcc>
	sys_dnode_t *const prev = successor->prev;
   21b5a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   21b5c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   21b60:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   21b62:	6053      	str	r3, [r2, #4]
	update_cache(1);
   21b64:	2001      	movs	r0, #1
   21b66:	f7ff fa45 	bl	20ff4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b6a:	480c      	ldr	r0, [pc, #48]	; (21b9c <z_impl_k_yield+0xe8>)
   21b6c:	f7fe fa3e 	bl	1ffec <z_spin_unlock_valid>
   21b70:	b950      	cbnz	r0, 21b88 <z_impl_k_yield+0xd4>
   21b72:	490b      	ldr	r1, [pc, #44]	; (21ba0 <z_impl_k_yield+0xec>)
   21b74:	4808      	ldr	r0, [pc, #32]	; (21b98 <z_impl_k_yield+0xe4>)
   21b76:	22e1      	movs	r2, #225	; 0xe1
   21b78:	f004 f9e2 	bl	25f40 <assert_print>
   21b7c:	21e1      	movs	r1, #225	; 0xe1
   21b7e:	e7b9      	b.n	21af4 <z_impl_k_yield+0x40>
	return (node == list->tail) ? NULL : node->next;
   21b80:	428a      	cmp	r2, r1
   21b82:	d0dd      	beq.n	21b40 <z_impl_k_yield+0x8c>
   21b84:	6812      	ldr	r2, [r2, #0]
   21b86:	e7da      	b.n	21b3e <z_impl_k_yield+0x8a>
   21b88:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   21b8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21b8e:	f7f1 bb1f 	b.w	131d0 <arch_swap>
   21b92:	bf00      	nop
   21b94:	0002d74b 	.word	0x0002d74b
   21b98:	0002a7df 	.word	0x0002a7df
   21b9c:	20002aac 	.word	0x20002aac
   21ba0:	0002a819 	.word	0x0002a819
   21ba4:	20002a64 	.word	0x20002a64
   21ba8:	20001e68 	.word	0x20001e68

00021bac <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   21bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21bb0:	4605      	mov	r5, r0
   21bb2:	460e      	mov	r6, r1
   21bb4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21bb8:	b14b      	cbz	r3, 21bce <z_tick_sleep+0x22>
   21bba:	4936      	ldr	r1, [pc, #216]	; (21c94 <z_tick_sleep+0xe8>)
   21bbc:	4836      	ldr	r0, [pc, #216]	; (21c98 <z_tick_sleep+0xec>)
   21bbe:	f240 528c 	movw	r2, #1420	; 0x58c
   21bc2:	f004 f9bd 	bl	25f40 <assert_print>
   21bc6:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21bca:	4832      	ldr	r0, [pc, #200]	; (21c94 <z_tick_sleep+0xe8>)
   21bcc:	e020      	b.n	21c10 <z_tick_sleep+0x64>
	if (ticks == 0) {
   21bce:	ea50 0301 	orrs.w	r3, r0, r1
   21bd2:	d103      	bne.n	21bdc <z_tick_sleep+0x30>
	z_impl_k_yield();
   21bd4:	f7ff ff6e 	bl	21ab4 <z_impl_k_yield>
		return 0;
   21bd8:	2000      	movs	r0, #0
   21bda:	e058      	b.n	21c8e <z_tick_sleep+0xe2>
	if (Z_TICK_ABS(ticks) <= 0) {
   21bdc:	1c82      	adds	r2, r0, #2
   21bde:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   21be2:	db17      	blt.n	21c14 <z_tick_sleep+0x68>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   21be4:	f007 fc5c 	bl	294a0 <sys_clock_tick_get_32>
   21be8:	1944      	adds	r4, r0, r5
   21bea:	f04f 0340 	mov.w	r3, #64	; 0x40
   21bee:	f3ef 8811 	mrs	r8, BASEPRI
   21bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   21bf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21bfa:	4828      	ldr	r0, [pc, #160]	; (21c9c <z_tick_sleep+0xf0>)
   21bfc:	f7fe f9e8 	bl	1ffd0 <z_spin_lock_valid>
   21c00:	b960      	cbnz	r0, 21c1c <z_tick_sleep+0x70>
   21c02:	4927      	ldr	r1, [pc, #156]	; (21ca0 <z_tick_sleep+0xf4>)
   21c04:	4824      	ldr	r0, [pc, #144]	; (21c98 <z_tick_sleep+0xec>)
   21c06:	2294      	movs	r2, #148	; 0x94
   21c08:	f004 f99a 	bl	25f40 <assert_print>
   21c0c:	2194      	movs	r1, #148	; 0x94
   21c0e:	4824      	ldr	r0, [pc, #144]	; (21ca0 <z_tick_sleep+0xf4>)
   21c10:	f004 f98f 	bl	25f32 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   21c14:	f06f 0401 	mvn.w	r4, #1
   21c18:	1a24      	subs	r4, r4, r0
   21c1a:	e7e6      	b.n	21bea <z_tick_sleep+0x3e>
	pending_current = _current;
   21c1c:	4f21      	ldr	r7, [pc, #132]	; (21ca4 <z_tick_sleep+0xf8>)
	z_spin_lock_set_owner(l);
   21c1e:	481f      	ldr	r0, [pc, #124]	; (21c9c <z_tick_sleep+0xf0>)
   21c20:	f7fe f9f4 	bl	2000c <z_spin_lock_set_owner>
   21c24:	4b20      	ldr	r3, [pc, #128]	; (21ca8 <z_tick_sleep+0xfc>)
   21c26:	68b8      	ldr	r0, [r7, #8]
   21c28:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   21c2a:	f7ff fcc3 	bl	215b4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21c2e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21c30:	491e      	ldr	r1, [pc, #120]	; (21cac <z_tick_sleep+0x100>)
   21c32:	462a      	mov	r2, r5
   21c34:	4633      	mov	r3, r6
   21c36:	3018      	adds	r0, #24
   21c38:	f000 f9d4 	bl	21fe4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21c3c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c3e:	4817      	ldr	r0, [pc, #92]	; (21c9c <z_tick_sleep+0xf0>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21c40:	7b53      	ldrb	r3, [r2, #13]
   21c42:	f043 0310 	orr.w	r3, r3, #16
   21c46:	7353      	strb	r3, [r2, #13]
   21c48:	f7fe f9d0 	bl	1ffec <z_spin_unlock_valid>
   21c4c:	b930      	cbnz	r0, 21c5c <z_tick_sleep+0xb0>
   21c4e:	4914      	ldr	r1, [pc, #80]	; (21ca0 <z_tick_sleep+0xf4>)
   21c50:	4811      	ldr	r0, [pc, #68]	; (21c98 <z_tick_sleep+0xec>)
   21c52:	22e1      	movs	r2, #225	; 0xe1
   21c54:	f004 f974 	bl	25f40 <assert_print>
   21c58:	21e1      	movs	r1, #225	; 0xe1
   21c5a:	e7d8      	b.n	21c0e <z_tick_sleep+0x62>
   21c5c:	4640      	mov	r0, r8
   21c5e:	f7f1 fab7 	bl	131d0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   21c62:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21c64:	7b5b      	ldrb	r3, [r3, #13]
   21c66:	06db      	lsls	r3, r3, #27
   21c68:	d508      	bpl.n	21c7c <z_tick_sleep+0xd0>
   21c6a:	490a      	ldr	r1, [pc, #40]	; (21c94 <z_tick_sleep+0xe8>)
   21c6c:	480a      	ldr	r0, [pc, #40]	; (21c98 <z_tick_sleep+0xec>)
   21c6e:	f240 52ad 	movw	r2, #1453	; 0x5ad
   21c72:	f004 f965 	bl	25f40 <assert_print>
   21c76:	f240 51ad 	movw	r1, #1453	; 0x5ad
   21c7a:	e7a6      	b.n	21bca <z_tick_sleep+0x1e>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   21c7c:	f007 fc10 	bl	294a0 <sys_clock_tick_get_32>
   21c80:	1a20      	subs	r0, r4, r0
   21c82:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   21c86:	2801      	cmp	r0, #1
   21c88:	f173 0300 	sbcs.w	r3, r3, #0
   21c8c:	dba4      	blt.n	21bd8 <z_tick_sleep+0x2c>
		return ticks;
	}
#endif

	return 0;
}
   21c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21c92:	bf00      	nop
   21c94:	0002d74b 	.word	0x0002d74b
   21c98:	0002a7df 	.word	0x0002a7df
   21c9c:	20002aac 	.word	0x20002aac
   21ca0:	0002a819 	.word	0x0002a819
   21ca4:	20002a64 	.word	0x20002a64
   21ca8:	20002aa0 	.word	0x20002aa0
   21cac:	00021995 	.word	0x00021995

00021cb0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   21cb0:	b508      	push	{r3, lr}
   21cb2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21cb6:	b153      	cbz	r3, 21cce <z_impl_k_sleep+0x1e>
   21cb8:	4910      	ldr	r1, [pc, #64]	; (21cfc <z_impl_k_sleep+0x4c>)
   21cba:	4811      	ldr	r0, [pc, #68]	; (21d00 <z_impl_k_sleep+0x50>)
   21cbc:	f240 52bc 	movw	r2, #1468	; 0x5bc
   21cc0:	f004 f93e 	bl	25f40 <assert_print>
   21cc4:	480d      	ldr	r0, [pc, #52]	; (21cfc <z_impl_k_sleep+0x4c>)
   21cc6:	f240 51bc 	movw	r1, #1468	; 0x5bc
   21cca:	f004 f932 	bl	25f32 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21cce:	f1b1 3fff 	cmp.w	r1, #4294967295
   21cd2:	bf08      	it	eq
   21cd4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   21cd8:	d106      	bne.n	21ce8 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   21cda:	4b0a      	ldr	r3, [pc, #40]	; (21d04 <z_impl_k_sleep+0x54>)
   21cdc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21cde:	f7ff fdad 	bl	2183c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   21ce2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   21ce6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   21ce8:	f7ff ff60 	bl	21bac <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   21cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21cf0:	fb80 0303 	smull	r0, r3, r0, r3
   21cf4:	0bc0      	lsrs	r0, r0, #15
   21cf6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   21cfa:	e7f4      	b.n	21ce6 <z_impl_k_sleep+0x36>
   21cfc:	0002d74b 	.word	0x0002d74b
   21d00:	0002a7df 	.word	0x0002a7df
   21d04:	20002a64 	.word	0x20002a64

00021d08 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21d08:	4b01      	ldr	r3, [pc, #4]	; (21d10 <z_impl_z_current_get+0x8>)
   21d0a:	6898      	ldr	r0, [r3, #8]
   21d0c:	4770      	bx	lr
   21d0e:	bf00      	nop
   21d10:	20002a64 	.word	0x20002a64

00021d14 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   21d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d18:	4604      	mov	r4, r0
   21d1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d1e:	f3ef 8611 	mrs	r6, BASEPRI
   21d22:	f383 8812 	msr	BASEPRI_MAX, r3
   21d26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d2a:	4845      	ldr	r0, [pc, #276]	; (21e40 <z_thread_abort+0x12c>)
   21d2c:	f7fe f950 	bl	1ffd0 <z_spin_lock_valid>
   21d30:	b940      	cbnz	r0, 21d44 <z_thread_abort+0x30>
   21d32:	4944      	ldr	r1, [pc, #272]	; (21e44 <z_thread_abort+0x130>)
   21d34:	4844      	ldr	r0, [pc, #272]	; (21e48 <z_thread_abort+0x134>)
   21d36:	2294      	movs	r2, #148	; 0x94
   21d38:	f004 f902 	bl	25f40 <assert_print>
   21d3c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d3e:	4841      	ldr	r0, [pc, #260]	; (21e44 <z_thread_abort+0x130>)
   21d40:	f004 f8f7 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   21d44:	483e      	ldr	r0, [pc, #248]	; (21e40 <z_thread_abort+0x12c>)
   21d46:	f7fe f961 	bl	2000c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   21d4a:	7b23      	ldrb	r3, [r4, #12]
   21d4c:	07d9      	lsls	r1, r3, #31
   21d4e:	d518      	bpl.n	21d82 <z_thread_abort+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d50:	483b      	ldr	r0, [pc, #236]	; (21e40 <z_thread_abort+0x12c>)
   21d52:	f7fe f94b 	bl	1ffec <z_spin_unlock_valid>
   21d56:	b930      	cbnz	r0, 21d66 <z_thread_abort+0x52>
   21d58:	493a      	ldr	r1, [pc, #232]	; (21e44 <z_thread_abort+0x130>)
   21d5a:	483b      	ldr	r0, [pc, #236]	; (21e48 <z_thread_abort+0x134>)
   21d5c:	22c2      	movs	r2, #194	; 0xc2
   21d5e:	f004 f8ef 	bl	25f40 <assert_print>
   21d62:	21c2      	movs	r1, #194	; 0xc2
   21d64:	e7eb      	b.n	21d3e <z_thread_abort+0x2a>
	__asm__ volatile(
   21d66:	f386 8811 	msr	BASEPRI, r6
   21d6a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   21d6e:	4937      	ldr	r1, [pc, #220]	; (21e4c <z_thread_abort+0x138>)
   21d70:	4835      	ldr	r0, [pc, #212]	; (21e48 <z_thread_abort+0x134>)
   21d72:	f44f 62d9 	mov.w	r2, #1736	; 0x6c8
   21d76:	f004 f8e3 	bl	25f40 <assert_print>
   21d7a:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   21d7e:	4833      	ldr	r0, [pc, #204]	; (21e4c <z_thread_abort+0x138>)
   21d80:	e7de      	b.n	21d40 <z_thread_abort+0x2c>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   21d82:	7b63      	ldrb	r3, [r4, #13]
   21d84:	071a      	lsls	r2, r3, #28
   21d86:	d50a      	bpl.n	21d9e <z_thread_abort+0x8a>
   21d88:	482d      	ldr	r0, [pc, #180]	; (21e40 <z_thread_abort+0x12c>)
   21d8a:	f7fe f92f 	bl	1ffec <z_spin_unlock_valid>
   21d8e:	2800      	cmp	r0, #0
   21d90:	d0e2      	beq.n	21d58 <z_thread_abort+0x44>
   21d92:	f386 8811 	msr	BASEPRI, r6
   21d96:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   21d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21d9e:	f023 0220 	bic.w	r2, r3, #32
   21da2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   21da6:	09d2      	lsrs	r2, r2, #7
   21da8:	d127      	bne.n	21dfa <z_thread_abort+0xe6>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21daa:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   21dac:	68a3      	ldr	r3, [r4, #8]
   21dae:	b113      	cbz	r3, 21db6 <z_thread_abort+0xa2>
			unpend_thread_no_timeout(thread);
   21db0:	4620      	mov	r0, r4
   21db2:	f7ff fd99 	bl	218e8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   21db6:	f104 0018 	add.w	r0, r4, #24
   21dba:	f000 f9bf 	bl	2213c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21dbe:	f104 0758 	add.w	r7, r4, #88	; 0x58
   21dc2:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   21dc6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21dc8:	42bd      	cmp	r5, r7
   21dca:	d000      	beq.n	21dce <z_thread_abort+0xba>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21dcc:	b9fd      	cbnz	r5, 21e0e <z_thread_abort+0xfa>
		update_cache(1);
   21dce:	2001      	movs	r0, #1
   21dd0:	f7ff f910 	bl	20ff4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   21dd4:	4b1e      	ldr	r3, [pc, #120]	; (21e50 <z_thread_abort+0x13c>)
   21dd6:	689b      	ldr	r3, [r3, #8]
   21dd8:	42a3      	cmp	r3, r4
   21dda:	d1d5      	bne.n	21d88 <z_thread_abort+0x74>
   21ddc:	f3ef 8305 	mrs	r3, IPSR
   21de0:	2b00      	cmp	r3, #0
   21de2:	d1d1      	bne.n	21d88 <z_thread_abort+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21de4:	4816      	ldr	r0, [pc, #88]	; (21e40 <z_thread_abort+0x12c>)
   21de6:	f7fe f901 	bl	1ffec <z_spin_unlock_valid>
   21dea:	b9e8      	cbnz	r0, 21e28 <z_thread_abort+0x114>
   21dec:	4915      	ldr	r1, [pc, #84]	; (21e44 <z_thread_abort+0x130>)
   21dee:	4816      	ldr	r0, [pc, #88]	; (21e48 <z_thread_abort+0x134>)
   21df0:	22e1      	movs	r2, #225	; 0xe1
   21df2:	f004 f8a5 	bl	25f40 <assert_print>
   21df6:	21e1      	movs	r1, #225	; 0xe1
   21df8:	e7a1      	b.n	21d3e <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21dfa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   21dfe:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   21e02:	4814      	ldr	r0, [pc, #80]	; (21e54 <z_thread_abort+0x140>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21e04:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21e06:	4621      	mov	r1, r4
   21e08:	f7ff fb02 	bl	21410 <z_priq_dumb_remove>
}
   21e0c:	e7ce      	b.n	21dac <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
   21e0e:	4628      	mov	r0, r5
   21e10:	f7ff fd6a 	bl	218e8 <unpend_thread_no_timeout>
   21e14:	f105 0018 	add.w	r0, r5, #24
   21e18:	f000 f990 	bl	2213c <z_abort_timeout>
   21e1c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   21e20:	4628      	mov	r0, r5
   21e22:	f7ff f913 	bl	2104c <ready_thread>
   21e26:	e7ce      	b.n	21dc6 <z_thread_abort+0xb2>
   21e28:	4630      	mov	r0, r6
   21e2a:	f7f1 f9d1 	bl	131d0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   21e2e:	4907      	ldr	r1, [pc, #28]	; (21e4c <z_thread_abort+0x138>)
   21e30:	4805      	ldr	r0, [pc, #20]	; (21e48 <z_thread_abort+0x134>)
   21e32:	f240 62f7 	movw	r2, #1783	; 0x6f7
   21e36:	f004 f883 	bl	25f40 <assert_print>
   21e3a:	f240 61f7 	movw	r1, #1783	; 0x6f7
   21e3e:	e79e      	b.n	21d7e <z_thread_abort+0x6a>
   21e40:	20002aac 	.word	0x20002aac
   21e44:	0002a819 	.word	0x0002a819
   21e48:	0002a7df 	.word	0x0002a7df
   21e4c:	0002d74b 	.word	0x0002d74b
   21e50:	20002a64 	.word	0x20002a64
   21e54:	20002a84 	.word	0x20002a84

00021e58 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   21e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21e5c:	4606      	mov	r6, r0
   21e5e:	4688      	mov	r8, r1
   21e60:	4617      	mov	r7, r2
	__asm__ volatile(
   21e62:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e66:	f3ef 8911 	mrs	r9, BASEPRI
   21e6a:	f383 8812 	msr	BASEPRI_MAX, r3
   21e6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e72:	481c      	ldr	r0, [pc, #112]	; (21ee4 <z_sched_wake+0x8c>)
   21e74:	f7fe f8ac 	bl	1ffd0 <z_spin_lock_valid>
   21e78:	4605      	mov	r5, r0
   21e7a:	b940      	cbnz	r0, 21e8e <z_sched_wake+0x36>
   21e7c:	491a      	ldr	r1, [pc, #104]	; (21ee8 <z_sched_wake+0x90>)
   21e7e:	481b      	ldr	r0, [pc, #108]	; (21eec <z_sched_wake+0x94>)
   21e80:	2294      	movs	r2, #148	; 0x94
   21e82:	f004 f85d 	bl	25f40 <assert_print>
   21e86:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e88:	4817      	ldr	r0, [pc, #92]	; (21ee8 <z_sched_wake+0x90>)
   21e8a:	f004 f852 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   21e8e:	4815      	ldr	r0, [pc, #84]	; (21ee4 <z_sched_wake+0x8c>)
   21e90:	f7fe f8bc 	bl	2000c <z_spin_lock_set_owner>
	return list->head == list;
   21e94:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21e96:	42a6      	cmp	r6, r4
   21e98:	d018      	beq.n	21ecc <z_sched_wake+0x74>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   21e9a:	b1cc      	cbz	r4, 21ed0 <z_sched_wake+0x78>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   21e9c:	4620      	mov	r0, r4
   21e9e:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
   21ea2:	6167      	str	r7, [r4, #20]
   21ea4:	f7ff fd20 	bl	218e8 <unpend_thread_no_timeout>
   21ea8:	f104 0018 	add.w	r0, r4, #24
   21eac:	f000 f946 	bl	2213c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   21eb0:	4620      	mov	r0, r4
   21eb2:	f7ff f8cb 	bl	2104c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21eb6:	480b      	ldr	r0, [pc, #44]	; (21ee4 <z_sched_wake+0x8c>)
   21eb8:	f7fe f898 	bl	1ffec <z_spin_unlock_valid>
   21ebc:	b950      	cbnz	r0, 21ed4 <z_sched_wake+0x7c>
   21ebe:	490a      	ldr	r1, [pc, #40]	; (21ee8 <z_sched_wake+0x90>)
   21ec0:	480a      	ldr	r0, [pc, #40]	; (21eec <z_sched_wake+0x94>)
   21ec2:	22c2      	movs	r2, #194	; 0xc2
   21ec4:	f004 f83c 	bl	25f40 <assert_print>
   21ec8:	21c2      	movs	r1, #194	; 0xc2
   21eca:	e7dd      	b.n	21e88 <z_sched_wake+0x30>
	bool ret = false;
   21ecc:	2500      	movs	r5, #0
   21ece:	e7f2      	b.n	21eb6 <z_sched_wake+0x5e>
   21ed0:	4625      	mov	r5, r4
   21ed2:	e7f0      	b.n	21eb6 <z_sched_wake+0x5e>
	__asm__ volatile(
   21ed4:	f389 8811 	msr	BASEPRI, r9
   21ed8:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   21edc:	4628      	mov	r0, r5
   21ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21ee2:	bf00      	nop
   21ee4:	20002aac 	.word	0x20002aac
   21ee8:	0002a819 	.word	0x0002a819
   21eec:	0002a7df 	.word	0x0002a7df

00021ef0 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   21ef0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21ef2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   21ef6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21ef8:	e9cd 6700 	strd	r6, r7, [sp]
   21efc:	f7ff fbc8 	bl	21690 <z_pend_curr>

	if (data != NULL) {
   21f00:	b11c      	cbz	r4, 21f0a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   21f02:	4b03      	ldr	r3, [pc, #12]	; (21f10 <z_sched_wait+0x20>)
   21f04:	689b      	ldr	r3, [r3, #8]
   21f06:	695b      	ldr	r3, [r3, #20]
   21f08:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   21f0a:	b002      	add	sp, #8
   21f0c:	bdd0      	pop	{r4, r6, r7, pc}
   21f0e:	bf00      	nop
   21f10:	20002a64 	.word	0x20002a64

00021f14 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   21f14:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   21f16:	4806      	ldr	r0, [pc, #24]	; (21f30 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   21f18:	4a06      	ldr	r2, [pc, #24]	; (21f34 <z_data_copy+0x20>)
   21f1a:	4907      	ldr	r1, [pc, #28]	; (21f38 <z_data_copy+0x24>)
   21f1c:	1a12      	subs	r2, r2, r0
   21f1e:	f007 f99a 	bl	29256 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21f22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   21f26:	4a05      	ldr	r2, [pc, #20]	; (21f3c <z_data_copy+0x28>)
   21f28:	4905      	ldr	r1, [pc, #20]	; (21f40 <z_data_copy+0x2c>)
   21f2a:	4806      	ldr	r0, [pc, #24]	; (21f44 <z_data_copy+0x30>)
   21f2c:	f007 b993 	b.w	29256 <z_early_memcpy>
   21f30:	20000000 	.word	0x20000000
   21f34:	20000acc 	.word	0x20000acc
   21f38:	0002d830 	.word	0x0002d830
   21f3c:	00000000 	.word	0x00000000
   21f40:	0002d830 	.word	0x0002d830
   21f44:	20000000 	.word	0x20000000

00021f48 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   21f48:	4b03      	ldr	r3, [pc, #12]	; (21f58 <elapsed+0x10>)
   21f4a:	681b      	ldr	r3, [r3, #0]
   21f4c:	b90b      	cbnz	r3, 21f52 <elapsed+0xa>
   21f4e:	f7fb b9c7 	b.w	1d2e0 <sys_clock_elapsed>
}
   21f52:	2000      	movs	r0, #0
   21f54:	4770      	bx	lr
   21f56:	bf00      	nop
   21f58:	20002ab0 	.word	0x20002ab0

00021f5c <next_timeout>:

static int32_t next_timeout(void)
{
   21f5c:	b510      	push	{r4, lr}
	return list->head == list;
   21f5e:	4b11      	ldr	r3, [pc, #68]	; (21fa4 <next_timeout+0x48>)
   21f60:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21f62:	429c      	cmp	r4, r3
   21f64:	d10a      	bne.n	21f7c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   21f66:	f7ff ffef 	bl	21f48 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   21f6a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   21f6e:	4b0e      	ldr	r3, [pc, #56]	; (21fa8 <next_timeout+0x4c>)
   21f70:	691b      	ldr	r3, [r3, #16]
   21f72:	b113      	cbz	r3, 21f7a <next_timeout+0x1e>
   21f74:	4298      	cmp	r0, r3
   21f76:	bfa8      	it	ge
   21f78:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   21f7a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   21f7c:	f7ff ffe4 	bl	21f48 <elapsed>
	if ((to == NULL) ||
   21f80:	2c00      	cmp	r4, #0
   21f82:	d0f2      	beq.n	21f6a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   21f84:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   21f88:	1a1b      	subs	r3, r3, r0
   21f8a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   21f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   21f92:	f172 0100 	sbcs.w	r1, r2, #0
   21f96:	dae8      	bge.n	21f6a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   21f98:	2a00      	cmp	r2, #0
   21f9a:	bfac      	ite	ge
   21f9c:	4618      	movge	r0, r3
   21f9e:	2000      	movlt	r0, #0
   21fa0:	e7e5      	b.n	21f6e <next_timeout+0x12>
   21fa2:	bf00      	nop
   21fa4:	20000708 	.word	0x20000708
   21fa8:	20002a64 	.word	0x20002a64

00021fac <remove_timeout>:
{
   21fac:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21fae:	b170      	cbz	r0, 21fce <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   21fb0:	4b0b      	ldr	r3, [pc, #44]	; (21fe0 <remove_timeout+0x34>)
   21fb2:	685b      	ldr	r3, [r3, #4]
   21fb4:	4298      	cmp	r0, r3
   21fb6:	d00a      	beq.n	21fce <remove_timeout+0x22>
   21fb8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   21fba:	b143      	cbz	r3, 21fce <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   21fbc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   21fc0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   21fc4:	1912      	adds	r2, r2, r4
   21fc6:	eb41 0105 	adc.w	r1, r1, r5
   21fca:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   21fce:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21fd2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21fd4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21fd6:	2300      	movs	r3, #0
	node->prev = NULL;
   21fd8:	e9c0 3300 	strd	r3, r3, [r0]
}
   21fdc:	bd30      	pop	{r4, r5, pc}
   21fde:	bf00      	nop
   21fe0:	20000708 	.word	0x20000708

00021fe4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
   21fe8:	bf08      	it	eq
   21fea:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   21fee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21ff2:	4604      	mov	r4, r0
   21ff4:	4692      	mov	sl, r2
   21ff6:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21ff8:	f000 8090 	beq.w	2211c <z_add_timeout+0x138>
	return node->next != NULL;
   21ffc:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   21ffe:	b146      	cbz	r6, 22012 <z_add_timeout+0x2e>
   22000:	4947      	ldr	r1, [pc, #284]	; (22120 <z_add_timeout+0x13c>)
   22002:	4848      	ldr	r0, [pc, #288]	; (22124 <z_add_timeout+0x140>)
   22004:	2263      	movs	r2, #99	; 0x63
   22006:	f003 ff9b 	bl	25f40 <assert_print>
   2200a:	4845      	ldr	r0, [pc, #276]	; (22120 <z_add_timeout+0x13c>)
   2200c:	2163      	movs	r1, #99	; 0x63
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2200e:	f003 ff90 	bl	25f32 <assert_post_action>
	to->fn = fn;
   22012:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   22014:	f04f 0340 	mov.w	r3, #64	; 0x40
   22018:	f3ef 8711 	mrs	r7, BASEPRI
   2201c:	f383 8812 	msr	BASEPRI_MAX, r3
   22020:	f3bf 8f6f 	isb	sy
   22024:	4840      	ldr	r0, [pc, #256]	; (22128 <z_add_timeout+0x144>)
   22026:	f7fd ffd3 	bl	1ffd0 <z_spin_lock_valid>
   2202a:	b938      	cbnz	r0, 2203c <z_add_timeout+0x58>
   2202c:	493f      	ldr	r1, [pc, #252]	; (2212c <z_add_timeout+0x148>)
   2202e:	483d      	ldr	r0, [pc, #244]	; (22124 <z_add_timeout+0x140>)
   22030:	2294      	movs	r2, #148	; 0x94
   22032:	f003 ff85 	bl	25f40 <assert_print>
   22036:	2194      	movs	r1, #148	; 0x94
   22038:	483c      	ldr	r0, [pc, #240]	; (2212c <z_add_timeout+0x148>)
   2203a:	e7e8      	b.n	2200e <z_add_timeout+0x2a>
	z_spin_lock_set_owner(l);
   2203c:	483a      	ldr	r0, [pc, #232]	; (22128 <z_add_timeout+0x144>)
   2203e:	f7fd ffe5 	bl	2000c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   22042:	f1ba 3fff 	cmp.w	sl, #4294967295
   22046:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   2204a:	da23      	bge.n	22094 <z_add_timeout+0xb0>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2204c:	4938      	ldr	r1, [pc, #224]	; (22130 <z_add_timeout+0x14c>)
   2204e:	e9d1 2000 	ldrd	r2, r0, [r1]
   22052:	f06f 0301 	mvn.w	r3, #1
   22056:	1a9b      	subs	r3, r3, r2
   22058:	f04f 32ff 	mov.w	r2, #4294967295
   2205c:	eb62 0000 	sbc.w	r0, r2, r0
   22060:	ebb3 030a 	subs.w	r3, r3, sl
   22064:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   22068:	2b01      	cmp	r3, #1
   2206a:	f170 0200 	sbcs.w	r2, r0, #0
   2206e:	da01      	bge.n	22074 <z_add_timeout+0x90>
   22070:	2301      	movs	r3, #1
   22072:	4630      	mov	r0, r6
   22074:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   22078:	4b2e      	ldr	r3, [pc, #184]	; (22134 <z_add_timeout+0x150>)
   2207a:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   2207c:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22080:	429a      	cmp	r2, r3
   22082:	bf18      	it	ne
   22084:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   22086:	b986      	cbnz	r6, 220aa <z_add_timeout+0xc6>
	node->prev = tail;
   22088:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   2208c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   22090:	605c      	str	r4, [r3, #4]
}
   22092:	e01c      	b.n	220ce <z_add_timeout+0xea>
			to->dticks = timeout.ticks + 1 + elapsed();
   22094:	f7ff ff58 	bl	21f48 <elapsed>
   22098:	f11a 0801 	adds.w	r8, sl, #1
   2209c:	f145 0500 	adc.w	r5, r5, #0
   220a0:	eb18 0300 	adds.w	r3, r8, r0
   220a4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   220a8:	e7e4      	b.n	22074 <z_add_timeout+0x90>
			if (t->dticks > to->dticks) {
   220aa:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   220ae:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   220b2:	428a      	cmp	r2, r1
   220b4:	eb70 0e05 	sbcs.w	lr, r0, r5
   220b8:	da23      	bge.n	22102 <z_add_timeout+0x11e>
				t->dticks -= to->dticks;
   220ba:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   220bc:	6872      	ldr	r2, [r6, #4]
   220be:	eb65 0500 	sbc.w	r5, r5, r0
   220c2:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   220c6:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   220ca:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   220cc:	6074      	str	r4, [r6, #4]
	return list->head == list;
   220ce:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   220d0:	429a      	cmp	r2, r3
   220d2:	d00b      	beq.n	220ec <z_add_timeout+0x108>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   220d4:	4294      	cmp	r4, r2
   220d6:	d109      	bne.n	220ec <z_add_timeout+0x108>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   220d8:	f7ff ff40 	bl	21f5c <next_timeout>

			if (next_time == 0 ||
   220dc:	b118      	cbz	r0, 220e6 <z_add_timeout+0x102>
			    _current_cpu->slice_ticks != next_time) {
   220de:	4b16      	ldr	r3, [pc, #88]	; (22138 <z_add_timeout+0x154>)
			if (next_time == 0 ||
   220e0:	691b      	ldr	r3, [r3, #16]
   220e2:	4283      	cmp	r3, r0
   220e4:	d002      	beq.n	220ec <z_add_timeout+0x108>
				sys_clock_set_timeout(next_time, false);
   220e6:	2100      	movs	r1, #0
   220e8:	f7fb f8d0 	bl	1d28c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   220ec:	480e      	ldr	r0, [pc, #56]	; (22128 <z_add_timeout+0x144>)
   220ee:	f7fd ff7d 	bl	1ffec <z_spin_unlock_valid>
   220f2:	b978      	cbnz	r0, 22114 <z_add_timeout+0x130>
   220f4:	490d      	ldr	r1, [pc, #52]	; (2212c <z_add_timeout+0x148>)
   220f6:	480b      	ldr	r0, [pc, #44]	; (22124 <z_add_timeout+0x140>)
   220f8:	22c2      	movs	r2, #194	; 0xc2
   220fa:	f003 ff21 	bl	25f40 <assert_print>
   220fe:	21c2      	movs	r1, #194	; 0xc2
   22100:	e79a      	b.n	22038 <z_add_timeout+0x54>
			to->dticks -= t->dticks;
   22102:	1a52      	subs	r2, r2, r1
   22104:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   22108:	4566      	cmp	r6, ip
   2210a:	e9c4 2004 	strd	r2, r0, [r4, #16]
   2210e:	d0bb      	beq.n	22088 <z_add_timeout+0xa4>
   22110:	6836      	ldr	r6, [r6, #0]
   22112:	e7b8      	b.n	22086 <z_add_timeout+0xa2>
	__asm__ volatile(
   22114:	f387 8811 	msr	BASEPRI, r7
   22118:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2211c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22120:	0002d798 	.word	0x0002d798
   22124:	0002a7df 	.word	0x0002a7df
   22128:	20002ab4 	.word	0x20002ab4
   2212c:	0002a819 	.word	0x0002a819
   22130:	20002008 	.word	0x20002008
   22134:	20000708 	.word	0x20000708
   22138:	20002a64 	.word	0x20002a64

0002213c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   2213c:	b538      	push	{r3, r4, r5, lr}
   2213e:	4604      	mov	r4, r0
	__asm__ volatile(
   22140:	f04f 0340 	mov.w	r3, #64	; 0x40
   22144:	f3ef 8511 	mrs	r5, BASEPRI
   22148:	f383 8812 	msr	BASEPRI_MAX, r3
   2214c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22150:	4814      	ldr	r0, [pc, #80]	; (221a4 <z_abort_timeout+0x68>)
   22152:	f7fd ff3d 	bl	1ffd0 <z_spin_lock_valid>
   22156:	b940      	cbnz	r0, 2216a <z_abort_timeout+0x2e>
   22158:	4913      	ldr	r1, [pc, #76]	; (221a8 <z_abort_timeout+0x6c>)
   2215a:	4814      	ldr	r0, [pc, #80]	; (221ac <z_abort_timeout+0x70>)
   2215c:	2294      	movs	r2, #148	; 0x94
   2215e:	f003 feef 	bl	25f40 <assert_print>
   22162:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22164:	4810      	ldr	r0, [pc, #64]	; (221a8 <z_abort_timeout+0x6c>)
   22166:	f003 fee4 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   2216a:	480e      	ldr	r0, [pc, #56]	; (221a4 <z_abort_timeout+0x68>)
   2216c:	f7fd ff4e 	bl	2000c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   22170:	6823      	ldr	r3, [r4, #0]
   22172:	b173      	cbz	r3, 22192 <z_abort_timeout+0x56>
			remove_timeout(to);
   22174:	4620      	mov	r0, r4
   22176:	f7ff ff19 	bl	21fac <remove_timeout>
			ret = 0;
   2217a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2217c:	4809      	ldr	r0, [pc, #36]	; (221a4 <z_abort_timeout+0x68>)
   2217e:	f7fd ff35 	bl	1ffec <z_spin_unlock_valid>
   22182:	b948      	cbnz	r0, 22198 <z_abort_timeout+0x5c>
   22184:	4908      	ldr	r1, [pc, #32]	; (221a8 <z_abort_timeout+0x6c>)
   22186:	4809      	ldr	r0, [pc, #36]	; (221ac <z_abort_timeout+0x70>)
   22188:	22c2      	movs	r2, #194	; 0xc2
   2218a:	f003 fed9 	bl	25f40 <assert_print>
   2218e:	21c2      	movs	r1, #194	; 0xc2
   22190:	e7e8      	b.n	22164 <z_abort_timeout+0x28>
	int ret = -EINVAL;
   22192:	f06f 0415 	mvn.w	r4, #21
   22196:	e7f1      	b.n	2217c <z_abort_timeout+0x40>
	__asm__ volatile(
   22198:	f385 8811 	msr	BASEPRI, r5
   2219c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   221a0:	4620      	mov	r0, r4
   221a2:	bd38      	pop	{r3, r4, r5, pc}
   221a4:	20002ab4 	.word	0x20002ab4
   221a8:	0002a819 	.word	0x0002a819
   221ac:	0002a7df 	.word	0x0002a7df

000221b0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   221b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   221b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   221b6:	f3ef 8511 	mrs	r5, BASEPRI
   221ba:	f383 8812 	msr	BASEPRI_MAX, r3
   221be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   221c2:	4812      	ldr	r0, [pc, #72]	; (2220c <z_get_next_timeout_expiry+0x5c>)
   221c4:	f7fd ff04 	bl	1ffd0 <z_spin_lock_valid>
   221c8:	b940      	cbnz	r0, 221dc <z_get_next_timeout_expiry+0x2c>
   221ca:	4911      	ldr	r1, [pc, #68]	; (22210 <z_get_next_timeout_expiry+0x60>)
   221cc:	4811      	ldr	r0, [pc, #68]	; (22214 <z_get_next_timeout_expiry+0x64>)
   221ce:	2294      	movs	r2, #148	; 0x94
   221d0:	f003 feb6 	bl	25f40 <assert_print>
   221d4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221d6:	480e      	ldr	r0, [pc, #56]	; (22210 <z_get_next_timeout_expiry+0x60>)
   221d8:	f003 feab 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   221dc:	480b      	ldr	r0, [pc, #44]	; (2220c <z_get_next_timeout_expiry+0x5c>)
   221de:	f7fd ff15 	bl	2000c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   221e2:	f7ff febb 	bl	21f5c <next_timeout>
   221e6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221e8:	4808      	ldr	r0, [pc, #32]	; (2220c <z_get_next_timeout_expiry+0x5c>)
   221ea:	f7fd feff 	bl	1ffec <z_spin_unlock_valid>
   221ee:	b930      	cbnz	r0, 221fe <z_get_next_timeout_expiry+0x4e>
   221f0:	4907      	ldr	r1, [pc, #28]	; (22210 <z_get_next_timeout_expiry+0x60>)
   221f2:	4808      	ldr	r0, [pc, #32]	; (22214 <z_get_next_timeout_expiry+0x64>)
   221f4:	22c2      	movs	r2, #194	; 0xc2
   221f6:	f003 fea3 	bl	25f40 <assert_print>
   221fa:	21c2      	movs	r1, #194	; 0xc2
   221fc:	e7eb      	b.n	221d6 <z_get_next_timeout_expiry+0x26>
	__asm__ volatile(
   221fe:	f385 8811 	msr	BASEPRI, r5
   22202:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   22206:	4620      	mov	r0, r4
   22208:	bd38      	pop	{r3, r4, r5, pc}
   2220a:	bf00      	nop
   2220c:	20002ab4 	.word	0x20002ab4
   22210:	0002a819 	.word	0x0002a819
   22214:	0002a7df 	.word	0x0002a7df

00022218 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   22218:	b570      	push	{r4, r5, r6, lr}
   2221a:	4604      	mov	r4, r0
   2221c:	460d      	mov	r5, r1
	__asm__ volatile(
   2221e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22222:	f3ef 8611 	mrs	r6, BASEPRI
   22226:	f383 8812 	msr	BASEPRI_MAX, r3
   2222a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2222e:	4816      	ldr	r0, [pc, #88]	; (22288 <z_set_timeout_expiry+0x70>)
   22230:	f7fd fece 	bl	1ffd0 <z_spin_lock_valid>
   22234:	b940      	cbnz	r0, 22248 <z_set_timeout_expiry+0x30>
   22236:	4915      	ldr	r1, [pc, #84]	; (2228c <z_set_timeout_expiry+0x74>)
   22238:	4815      	ldr	r0, [pc, #84]	; (22290 <z_set_timeout_expiry+0x78>)
   2223a:	2294      	movs	r2, #148	; 0x94
   2223c:	f003 fe80 	bl	25f40 <assert_print>
   22240:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22242:	4812      	ldr	r0, [pc, #72]	; (2228c <z_set_timeout_expiry+0x74>)
   22244:	f003 fe75 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   22248:	480f      	ldr	r0, [pc, #60]	; (22288 <z_set_timeout_expiry+0x70>)
   2224a:	f7fd fedf 	bl	2000c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   2224e:	f7ff fe85 	bl	21f5c <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   22252:	2801      	cmp	r0, #1
   22254:	dd07      	ble.n	22266 <z_set_timeout_expiry+0x4e>
   22256:	42a0      	cmp	r0, r4
   22258:	db05      	blt.n	22266 <z_set_timeout_expiry+0x4e>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2225a:	42a0      	cmp	r0, r4
   2225c:	4629      	mov	r1, r5
   2225e:	bfa8      	it	ge
   22260:	4620      	movge	r0, r4
   22262:	f7fb f813 	bl	1d28c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22266:	4808      	ldr	r0, [pc, #32]	; (22288 <z_set_timeout_expiry+0x70>)
   22268:	f7fd fec0 	bl	1ffec <z_spin_unlock_valid>
   2226c:	b930      	cbnz	r0, 2227c <z_set_timeout_expiry+0x64>
   2226e:	4907      	ldr	r1, [pc, #28]	; (2228c <z_set_timeout_expiry+0x74>)
   22270:	4807      	ldr	r0, [pc, #28]	; (22290 <z_set_timeout_expiry+0x78>)
   22272:	22c2      	movs	r2, #194	; 0xc2
   22274:	f003 fe64 	bl	25f40 <assert_print>
   22278:	21c2      	movs	r1, #194	; 0xc2
   2227a:	e7e2      	b.n	22242 <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
   2227c:	f386 8811 	msr	BASEPRI, r6
   22280:	f3bf 8f6f 	isb	sy
		}
	}
}
   22284:	bd70      	pop	{r4, r5, r6, pc}
   22286:	bf00      	nop
   22288:	20002ab4 	.word	0x20002ab4
   2228c:	0002a819 	.word	0x0002a819
   22290:	0002a7df 	.word	0x0002a7df

00022294 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   22294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22298:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2229a:	f7ff f927 	bl	214ec <z_time_slice>
	__asm__ volatile(
   2229e:	f04f 0340 	mov.w	r3, #64	; 0x40
   222a2:	f3ef 8711 	mrs	r7, BASEPRI
   222a6:	f383 8812 	msr	BASEPRI_MAX, r3
   222aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   222ae:	483a      	ldr	r0, [pc, #232]	; (22398 <sys_clock_announce+0x104>)
   222b0:	f7fd fe8e 	bl	1ffd0 <z_spin_lock_valid>
   222b4:	b940      	cbnz	r0, 222c8 <sys_clock_announce+0x34>
   222b6:	4939      	ldr	r1, [pc, #228]	; (2239c <sys_clock_announce+0x108>)
   222b8:	4839      	ldr	r0, [pc, #228]	; (223a0 <sys_clock_announce+0x10c>)
   222ba:	2294      	movs	r2, #148	; 0x94
   222bc:	f003 fe40 	bl	25f40 <assert_print>
   222c0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222c2:	4836      	ldr	r0, [pc, #216]	; (2239c <sys_clock_announce+0x108>)
   222c4:	f003 fe35 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   222c8:	4833      	ldr	r0, [pc, #204]	; (22398 <sys_clock_announce+0x104>)
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   222ca:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 223a4 <sys_clock_announce+0x110>
	return list->head == list;
   222ce:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 223a8 <sys_clock_announce+0x114>
   222d2:	f7fd fe9b 	bl	2000c <z_spin_lock_set_owner>
   222d6:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   222da:	4a34      	ldr	r2, [pc, #208]	; (223ac <sys_clock_announce+0x118>)
	announce_remaining = ticks;
   222dc:	f8c8 4000 	str.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   222e0:	454d      	cmp	r5, r9
		curr_tick += dt;
   222e2:	e9d2 3c00 	ldrd	r3, ip, [r2]
   222e6:	ea4f 71e4 	mov.w	r1, r4, asr #31
   222ea:	d00b      	beq.n	22304 <sys_clock_announce+0x70>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   222ec:	b155      	cbz	r5, 22304 <sys_clock_announce+0x70>
   222ee:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   222f2:	42b4      	cmp	r4, r6
   222f4:	eb71 0e00 	sbcs.w	lr, r1, r0
   222f8:	da1b      	bge.n	22332 <sys_clock_announce+0x9e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   222fa:	1b36      	subs	r6, r6, r4
   222fc:	eb60 0001 	sbc.w	r0, r0, r1
   22300:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   22304:	18e3      	adds	r3, r4, r3
   22306:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
   2230a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2230c:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   22310:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   22314:	f7ff fe22 	bl	21f5c <next_timeout>
   22318:	4621      	mov	r1, r4
   2231a:	f7fa ffb7 	bl	1d28c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2231e:	481e      	ldr	r0, [pc, #120]	; (22398 <sys_clock_announce+0x104>)
   22320:	f7fd fe64 	bl	1ffec <z_spin_unlock_valid>
   22324:	b1a8      	cbz	r0, 22352 <sys_clock_announce+0xbe>
	__asm__ volatile(
   22326:	f387 8811 	msr	BASEPRI, r7
   2232a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2232e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   22332:	18f3      	adds	r3, r6, r3
   22334:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   22338:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   2233c:	2200      	movs	r2, #0
   2233e:	2300      	movs	r3, #0
		remove_timeout(t);
   22340:	4628      	mov	r0, r5
		t->dticks = 0;
   22342:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   22346:	f7ff fe31 	bl	21fac <remove_timeout>
   2234a:	4813      	ldr	r0, [pc, #76]	; (22398 <sys_clock_announce+0x104>)
   2234c:	f7fd fe4e 	bl	1ffec <z_spin_unlock_valid>
   22350:	b930      	cbnz	r0, 22360 <sys_clock_announce+0xcc>
   22352:	4912      	ldr	r1, [pc, #72]	; (2239c <sys_clock_announce+0x108>)
   22354:	4812      	ldr	r0, [pc, #72]	; (223a0 <sys_clock_announce+0x10c>)
   22356:	22c2      	movs	r2, #194	; 0xc2
   22358:	f003 fdf2 	bl	25f40 <assert_print>
   2235c:	21c2      	movs	r1, #194	; 0xc2
   2235e:	e7b0      	b.n	222c2 <sys_clock_announce+0x2e>
   22360:	f387 8811 	msr	BASEPRI, r7
   22364:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22368:	68ab      	ldr	r3, [r5, #8]
   2236a:	4628      	mov	r0, r5
   2236c:	4798      	blx	r3
	__asm__ volatile(
   2236e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22372:	f3ef 8711 	mrs	r7, BASEPRI
   22376:	f383 8812 	msr	BASEPRI_MAX, r3
   2237a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2237e:	4806      	ldr	r0, [pc, #24]	; (22398 <sys_clock_announce+0x104>)
   22380:	f7fd fe26 	bl	1ffd0 <z_spin_lock_valid>
   22384:	2800      	cmp	r0, #0
   22386:	d096      	beq.n	222b6 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   22388:	4803      	ldr	r0, [pc, #12]	; (22398 <sys_clock_announce+0x104>)
   2238a:	f7fd fe3f 	bl	2000c <z_spin_lock_set_owner>
		announce_remaining -= dt;
   2238e:	f8d8 4000 	ldr.w	r4, [r8]
   22392:	1ba4      	subs	r4, r4, r6
   22394:	e79f      	b.n	222d6 <sys_clock_announce+0x42>
   22396:	bf00      	nop
   22398:	20002ab4 	.word	0x20002ab4
   2239c:	0002a819 	.word	0x0002a819
   223a0:	0002a7df 	.word	0x0002a7df
   223a4:	20002ab0 	.word	0x20002ab0
   223a8:	20000708 	.word	0x20000708
   223ac:	20002008 	.word	0x20002008

000223b0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   223b0:	b570      	push	{r4, r5, r6, lr}
   223b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   223b6:	f3ef 8611 	mrs	r6, BASEPRI
   223ba:	f383 8812 	msr	BASEPRI_MAX, r3
   223be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223c2:	4815      	ldr	r0, [pc, #84]	; (22418 <sys_clock_tick_get+0x68>)
   223c4:	f7fd fe04 	bl	1ffd0 <z_spin_lock_valid>
   223c8:	b940      	cbnz	r0, 223dc <sys_clock_tick_get+0x2c>
   223ca:	4914      	ldr	r1, [pc, #80]	; (2241c <sys_clock_tick_get+0x6c>)
   223cc:	4814      	ldr	r0, [pc, #80]	; (22420 <sys_clock_tick_get+0x70>)
   223ce:	2294      	movs	r2, #148	; 0x94
   223d0:	f003 fdb6 	bl	25f40 <assert_print>
   223d4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223d6:	4811      	ldr	r0, [pc, #68]	; (2241c <sys_clock_tick_get+0x6c>)
   223d8:	f003 fdab 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   223dc:	480e      	ldr	r0, [pc, #56]	; (22418 <sys_clock_tick_get+0x68>)
   223de:	f7fd fe15 	bl	2000c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   223e2:	f7ff fdb1 	bl	21f48 <elapsed>
   223e6:	4a0f      	ldr	r2, [pc, #60]	; (22424 <sys_clock_tick_get+0x74>)
   223e8:	e9d2 4500 	ldrd	r4, r5, [r2]
   223ec:	1904      	adds	r4, r0, r4
   223ee:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223f2:	4809      	ldr	r0, [pc, #36]	; (22418 <sys_clock_tick_get+0x68>)
   223f4:	f7fd fdfa 	bl	1ffec <z_spin_unlock_valid>
   223f8:	b930      	cbnz	r0, 22408 <sys_clock_tick_get+0x58>
   223fa:	4908      	ldr	r1, [pc, #32]	; (2241c <sys_clock_tick_get+0x6c>)
   223fc:	4808      	ldr	r0, [pc, #32]	; (22420 <sys_clock_tick_get+0x70>)
   223fe:	22c2      	movs	r2, #194	; 0xc2
   22400:	f003 fd9e 	bl	25f40 <assert_print>
   22404:	21c2      	movs	r1, #194	; 0xc2
   22406:	e7e6      	b.n	223d6 <sys_clock_tick_get+0x26>
	__asm__ volatile(
   22408:	f386 8811 	msr	BASEPRI, r6
   2240c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22410:	4620      	mov	r0, r4
   22412:	4629      	mov	r1, r5
   22414:	bd70      	pop	{r4, r5, r6, pc}
   22416:	bf00      	nop
   22418:	20002ab4 	.word	0x20002ab4
   2241c:	0002a819 	.word	0x0002a819
   22420:	0002a7df 	.word	0x0002a7df
   22424:	20002008 	.word	0x20002008

00022428 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   22428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   2242c:	2500      	movs	r5, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2242e:	f8df 9194 	ldr.w	r9, [pc, #404]	; 225c4 <register_events+0x19c>
{
   22432:	9301      	str	r3, [sp, #4]
   22434:	460f      	mov	r7, r1
   22436:	4614      	mov	r4, r2
	for (int ii = 0; ii < num_events; ii++) {
   22438:	4680      	mov	r8, r0
	int events_registered = 0;
   2243a:	462e      	mov	r6, r5
	event->poller = NULL;
   2243c:	46aa      	mov	sl, r5
	for (int ii = 0; ii < num_events; ii++) {
   2243e:	42bd      	cmp	r5, r7
   22440:	db03      	blt.n	2244a <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   22442:	4630      	mov	r0, r6
   22444:	b003      	add	sp, #12
   22446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2244a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2244e:	f3ef 8b11 	mrs	fp, BASEPRI
   22452:	f383 8812 	msr	BASEPRI_MAX, r3
   22456:	f3bf 8f6f 	isb	sy
   2245a:	4648      	mov	r0, r9
   2245c:	f7fd fdb8 	bl	1ffd0 <z_spin_lock_valid>
   22460:	b938      	cbnz	r0, 22472 <register_events+0x4a>
   22462:	4959      	ldr	r1, [pc, #356]	; (225c8 <register_events+0x1a0>)
   22464:	4859      	ldr	r0, [pc, #356]	; (225cc <register_events+0x1a4>)
   22466:	2294      	movs	r2, #148	; 0x94
   22468:	f003 fd6a 	bl	25f40 <assert_print>
   2246c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2246e:	4856      	ldr	r0, [pc, #344]	; (225c8 <register_events+0x1a0>)
   22470:	e05b      	b.n	2252a <register_events+0x102>
	z_spin_lock_set_owner(l);
   22472:	4648      	mov	r0, r9
   22474:	f7fd fdca 	bl	2000c <z_spin_lock_set_owner>
	switch (event->type) {
   22478:	f898 300d 	ldrb.w	r3, [r8, #13]
   2247c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22480:	2b08      	cmp	r3, #8
   22482:	d84b      	bhi.n	2251c <register_events+0xf4>
   22484:	e8df f003 	tbb	[pc, r3]
   22488:	4a053c29 	.word	0x4a053c29
   2248c:	4a4a4a25 	.word	0x4a4a4a25
   22490:	43          	.byte	0x43
   22491:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   22492:	f8d8 3010 	ldr.w	r3, [r8, #16]
   22496:	689b      	ldr	r3, [r3, #8]
   22498:	b1fb      	cbz	r3, 224da <register_events+0xb2>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2249a:	2302      	movs	r3, #2
	event->state |= state;
   2249c:	f8d8 200c 	ldr.w	r2, [r8, #12]
	event->poller = NULL;
   224a0:	f8c8 a008 	str.w	sl, [r8, #8]
	event->state |= state;
   224a4:	f3c2 3086 	ubfx	r0, r2, #14, #7
   224a8:	4303      	orrs	r3, r0
   224aa:	f363 3294 	bfi	r2, r3, #14, #7
   224ae:	f8c8 200c 	str.w	r2, [r8, #12]
			poller->is_polling = false;
   224b2:	f884 a000 	strb.w	sl, [r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   224b6:	4648      	mov	r0, r9
   224b8:	f7fd fd98 	bl	1ffec <z_spin_unlock_valid>
   224bc:	f108 0814 	add.w	r8, r8, #20
   224c0:	2800      	cmp	r0, #0
   224c2:	d179      	bne.n	225b8 <register_events+0x190>
   224c4:	4940      	ldr	r1, [pc, #256]	; (225c8 <register_events+0x1a0>)
   224c6:	4841      	ldr	r0, [pc, #260]	; (225cc <register_events+0x1a4>)
   224c8:	22c2      	movs	r2, #194	; 0xc2
   224ca:	f003 fd39 	bl	25f40 <assert_print>
   224ce:	21c2      	movs	r1, #194	; 0xc2
   224d0:	e7cd      	b.n	2246e <register_events+0x46>
		if (!k_queue_is_empty(event->queue)) {
   224d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   224d6:	681b      	ldr	r3, [r3, #0]
   224d8:	bb4b      	cbnz	r3, 2252e <register_events+0x106>
		} else if (!just_check && poller->is_polling) {
   224da:	9b01      	ldr	r3, [sp, #4]
   224dc:	2b00      	cmp	r3, #0
   224de:	d1ea      	bne.n	224b6 <register_events+0x8e>
   224e0:	7823      	ldrb	r3, [r4, #0]
   224e2:	2b00      	cmp	r3, #0
   224e4:	d0e7      	beq.n	224b6 <register_events+0x8e>
	switch (event->type) {
   224e6:	f898 300d 	ldrb.w	r3, [r8, #13]
   224ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   224ee:	2b08      	cmp	r3, #8
   224f0:	d85b      	bhi.n	225aa <register_events+0x182>
   224f2:	e8df f003 	tbb	[pc, r3]
   224f6:	3f2d      	.short	0x3f2d
   224f8:	5a315a1e 	.word	0x5a315a1e
   224fc:	5a5a      	.short	0x5a5a
   224fe:	4c          	.byte	0x4c
   224ff:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   22500:	f8d8 3010 	ldr.w	r3, [r8, #16]
   22504:	689b      	ldr	r3, [r3, #8]
   22506:	2b00      	cmp	r3, #0
   22508:	d0e7      	beq.n	224da <register_events+0xb2>
			*state = K_POLL_STATE_SIGNALED;
   2250a:	2301      	movs	r3, #1
   2250c:	e7c6      	b.n	2249c <register_events+0x74>
		if (event->msgq->used_msgs > 0) {
   2250e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   22512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22514:	2b00      	cmp	r3, #0
   22516:	d0e0      	beq.n	224da <register_events+0xb2>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   22518:	2310      	movs	r3, #16
   2251a:	e7bf      	b.n	2249c <register_events+0x74>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2251c:	492c      	ldr	r1, [pc, #176]	; (225d0 <register_events+0x1a8>)
   2251e:	482b      	ldr	r0, [pc, #172]	; (225cc <register_events+0x1a4>)
   22520:	2263      	movs	r2, #99	; 0x63
   22522:	f003 fd0d 	bl	25f40 <assert_print>
   22526:	2163      	movs	r1, #99	; 0x63
   22528:	4829      	ldr	r0, [pc, #164]	; (225d0 <register_events+0x1a8>)
   2252a:	f003 fd02 	bl	25f32 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2252e:	2304      	movs	r3, #4
   22530:	e7b4      	b.n	2249c <register_events+0x74>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22532:	f8d8 0010 	ldr.w	r0, [r8, #16]
   22536:	b930      	cbnz	r0, 22546 <register_events+0x11e>
   22538:	4925      	ldr	r1, [pc, #148]	; (225d0 <register_events+0x1a8>)
   2253a:	4824      	ldr	r0, [pc, #144]	; (225cc <register_events+0x1a4>)
   2253c:	228d      	movs	r2, #141	; 0x8d
   2253e:	f003 fcff 	bl	25f40 <assert_print>
   22542:	218d      	movs	r1, #141	; 0x8d
   22544:	e7f0      	b.n	22528 <register_events+0x100>
		add_event(&event->sem->poll_events, event, poller);
   22546:	4622      	mov	r2, r4
   22548:	4641      	mov	r1, r8
   2254a:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2254c:	f006 ffd2 	bl	294f4 <add_event>
	event->poller = poller;
   22550:	f8c8 4008 	str.w	r4, [r8, #8]
			events_registered += 1;
   22554:	3601      	adds	r6, #1
   22556:	e7ae      	b.n	224b6 <register_events+0x8e>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22558:	f8d8 0010 	ldr.w	r0, [r8, #16]
   2255c:	b930      	cbnz	r0, 2256c <register_events+0x144>
   2255e:	491c      	ldr	r1, [pc, #112]	; (225d0 <register_events+0x1a8>)
   22560:	481a      	ldr	r0, [pc, #104]	; (225cc <register_events+0x1a4>)
   22562:	2291      	movs	r2, #145	; 0x91
   22564:	f003 fcec 	bl	25f40 <assert_print>
   22568:	2191      	movs	r1, #145	; 0x91
   2256a:	e7dd      	b.n	22528 <register_events+0x100>
		add_event(&event->queue->poll_events, event, poller);
   2256c:	4622      	mov	r2, r4
   2256e:	4641      	mov	r1, r8
   22570:	3014      	adds	r0, #20
   22572:	e7eb      	b.n	2254c <register_events+0x124>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22574:	f8d8 0010 	ldr.w	r0, [r8, #16]
   22578:	b930      	cbnz	r0, 22588 <register_events+0x160>
   2257a:	4915      	ldr	r1, [pc, #84]	; (225d0 <register_events+0x1a8>)
   2257c:	4813      	ldr	r0, [pc, #76]	; (225cc <register_events+0x1a4>)
   2257e:	2295      	movs	r2, #149	; 0x95
   22580:	f003 fcde 	bl	25f40 <assert_print>
   22584:	2195      	movs	r1, #149	; 0x95
   22586:	e7cf      	b.n	22528 <register_events+0x100>
		add_event(&event->signal->poll_events, event, poller);
   22588:	4622      	mov	r2, r4
   2258a:	4641      	mov	r1, r8
   2258c:	e7de      	b.n	2254c <register_events+0x124>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2258e:	f8d8 0010 	ldr.w	r0, [r8, #16]
   22592:	b930      	cbnz	r0, 225a2 <register_events+0x17a>
   22594:	490e      	ldr	r1, [pc, #56]	; (225d0 <register_events+0x1a8>)
   22596:	480d      	ldr	r0, [pc, #52]	; (225cc <register_events+0x1a4>)
   22598:	2299      	movs	r2, #153	; 0x99
   2259a:	f003 fcd1 	bl	25f40 <assert_print>
   2259e:	2199      	movs	r1, #153	; 0x99
   225a0:	e7c2      	b.n	22528 <register_events+0x100>
		add_event(&event->msgq->poll_events, event, poller);
   225a2:	4622      	mov	r2, r4
   225a4:	4641      	mov	r1, r8
   225a6:	3028      	adds	r0, #40	; 0x28
   225a8:	e7d0      	b.n	2254c <register_events+0x124>
		__ASSERT(false, "invalid event type\n");
   225aa:	4909      	ldr	r1, [pc, #36]	; (225d0 <register_events+0x1a8>)
   225ac:	4807      	ldr	r0, [pc, #28]	; (225cc <register_events+0x1a4>)
   225ae:	22a6      	movs	r2, #166	; 0xa6
   225b0:	f003 fcc6 	bl	25f40 <assert_print>
   225b4:	21a6      	movs	r1, #166	; 0xa6
   225b6:	e7b7      	b.n	22528 <register_events+0x100>
	__asm__ volatile(
   225b8:	f38b 8811 	msr	BASEPRI, fp
   225bc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   225c0:	3501      	adds	r5, #1
   225c2:	e73c      	b.n	2243e <register_events+0x16>
   225c4:	20002ab8 	.word	0x20002ab8
   225c8:	0002a819 	.word	0x0002a819
   225cc:	0002a7df 	.word	0x0002a7df
   225d0:	0002d7bc 	.word	0x0002d7bc

000225d4 <clear_event_registrations>:
{
   225d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   225d8:	2314      	movs	r3, #20
   225da:	4f3e      	ldr	r7, [pc, #248]	; (226d4 <clear_event_registrations+0x100>)
   225dc:	4615      	mov	r5, r2
	while (num_events--) {
   225de:	460c      	mov	r4, r1
   225e0:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   225e4:	2600      	movs	r6, #0
	while (num_events--) {
   225e6:	b90c      	cbnz	r4, 225ec <clear_event_registrations+0x18>
}
   225e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   225ec:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   225f0:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   225f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   225f8:	f1a0 0814 	sub.w	r8, r0, #20
   225fc:	2b08      	cmp	r3, #8
   225fe:	d830      	bhi.n	22662 <clear_event_registrations+0x8e>
   22600:	e8df f003 	tbb	[pc, r3]
   22604:	2f051b3f 	.word	0x2f051b3f
   22608:	2f2f2f11 	.word	0x2f2f2f11
   2260c:	25          	.byte	0x25
   2260d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2260e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22612:	bb6b      	cbnz	r3, 22670 <clear_event_registrations+0x9c>
   22614:	4930      	ldr	r1, [pc, #192]	; (226d8 <clear_event_registrations+0x104>)
   22616:	4831      	ldr	r0, [pc, #196]	; (226dc <clear_event_registrations+0x108>)
   22618:	22b6      	movs	r2, #182	; 0xb6
   2261a:	f003 fc91 	bl	25f40 <assert_print>
   2261e:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22620:	482d      	ldr	r0, [pc, #180]	; (226d8 <clear_event_registrations+0x104>)
   22622:	f003 fc86 	bl	25f32 <assert_post_action>
   22626:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2262a:	bb0b      	cbnz	r3, 22670 <clear_event_registrations+0x9c>
   2262c:	492a      	ldr	r1, [pc, #168]	; (226d8 <clear_event_registrations+0x104>)
   2262e:	482b      	ldr	r0, [pc, #172]	; (226dc <clear_event_registrations+0x108>)
   22630:	22ba      	movs	r2, #186	; 0xba
   22632:	f003 fc85 	bl	25f40 <assert_print>
   22636:	21ba      	movs	r1, #186	; 0xba
   22638:	e7f2      	b.n	22620 <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2263a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2263e:	b9bb      	cbnz	r3, 22670 <clear_event_registrations+0x9c>
   22640:	4925      	ldr	r1, [pc, #148]	; (226d8 <clear_event_registrations+0x104>)
   22642:	4826      	ldr	r0, [pc, #152]	; (226dc <clear_event_registrations+0x108>)
   22644:	22be      	movs	r2, #190	; 0xbe
   22646:	f003 fc7b 	bl	25f40 <assert_print>
   2264a:	21be      	movs	r1, #190	; 0xbe
   2264c:	e7e8      	b.n	22620 <clear_event_registrations+0x4c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2264e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22652:	b96b      	cbnz	r3, 22670 <clear_event_registrations+0x9c>
   22654:	4920      	ldr	r1, [pc, #128]	; (226d8 <clear_event_registrations+0x104>)
   22656:	4821      	ldr	r0, [pc, #132]	; (226dc <clear_event_registrations+0x108>)
   22658:	22c2      	movs	r2, #194	; 0xc2
   2265a:	f003 fc71 	bl	25f40 <assert_print>
   2265e:	21c2      	movs	r1, #194	; 0xc2
   22660:	e7de      	b.n	22620 <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   22662:	491d      	ldr	r1, [pc, #116]	; (226d8 <clear_event_registrations+0x104>)
   22664:	481d      	ldr	r0, [pc, #116]	; (226dc <clear_event_registrations+0x108>)
   22666:	22cf      	movs	r2, #207	; 0xcf
   22668:	f003 fc6a 	bl	25f40 <assert_print>
   2266c:	21cf      	movs	r1, #207	; 0xcf
   2266e:	e7d7      	b.n	22620 <clear_event_registrations+0x4c>
	return node->next != NULL;
   22670:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   22674:	b12b      	cbz	r3, 22682 <clear_event_registrations+0xae>
	sys_dnode_t *const prev = node->prev;
   22676:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   2267a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2267c:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   2267e:	e940 6605 	strd	r6, r6, [r0, #-20]
   22682:	4638      	mov	r0, r7
   22684:	f7fd fcb2 	bl	1ffec <z_spin_unlock_valid>
   22688:	b938      	cbnz	r0, 2269a <clear_event_registrations+0xc6>
   2268a:	4915      	ldr	r1, [pc, #84]	; (226e0 <clear_event_registrations+0x10c>)
   2268c:	4813      	ldr	r0, [pc, #76]	; (226dc <clear_event_registrations+0x108>)
   2268e:	22c2      	movs	r2, #194	; 0xc2
   22690:	f003 fc56 	bl	25f40 <assert_print>
   22694:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22696:	4812      	ldr	r0, [pc, #72]	; (226e0 <clear_event_registrations+0x10c>)
   22698:	e7c3      	b.n	22622 <clear_event_registrations+0x4e>
   2269a:	f385 8811 	msr	BASEPRI, r5
   2269e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   226a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   226a6:	f3ef 8511 	mrs	r5, BASEPRI
   226aa:	f383 8812 	msr	BASEPRI_MAX, r3
   226ae:	f3bf 8f6f 	isb	sy
   226b2:	4638      	mov	r0, r7
   226b4:	f7fd fc8c 	bl	1ffd0 <z_spin_lock_valid>
   226b8:	3c01      	subs	r4, #1
   226ba:	b930      	cbnz	r0, 226ca <clear_event_registrations+0xf6>
   226bc:	4908      	ldr	r1, [pc, #32]	; (226e0 <clear_event_registrations+0x10c>)
   226be:	4807      	ldr	r0, [pc, #28]	; (226dc <clear_event_registrations+0x108>)
   226c0:	2294      	movs	r2, #148	; 0x94
   226c2:	f003 fc3d 	bl	25f40 <assert_print>
   226c6:	2194      	movs	r1, #148	; 0x94
   226c8:	e7e5      	b.n	22696 <clear_event_registrations+0xc2>
	z_spin_lock_set_owner(l);
   226ca:	4638      	mov	r0, r7
   226cc:	f7fd fc9e 	bl	2000c <z_spin_lock_set_owner>
	return k;
   226d0:	4640      	mov	r0, r8
   226d2:	e788      	b.n	225e6 <clear_event_registrations+0x12>
   226d4:	20002ab8 	.word	0x20002ab8
   226d8:	0002d7bc 	.word	0x0002d7bc
   226dc:	0002a7df 	.word	0x0002a7df
   226e0:	0002a819 	.word	0x0002a819

000226e4 <k_poll_event_init>:
{
   226e4:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   226e6:	b142      	cbz	r2, 226fa <k_poll_event_init+0x16>
   226e8:	4911      	ldr	r1, [pc, #68]	; (22730 <k_poll_event_init+0x4c>)
   226ea:	4812      	ldr	r0, [pc, #72]	; (22734 <k_poll_event_init+0x50>)
   226ec:	222d      	movs	r2, #45	; 0x2d
   226ee:	f003 fc27 	bl	25f40 <assert_print>
   226f2:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   226f4:	480e      	ldr	r0, [pc, #56]	; (22730 <k_poll_event_init+0x4c>)
   226f6:	f003 fc1c 	bl	25f32 <assert_post_action>
   226fa:	293f      	cmp	r1, #63	; 0x3f
   226fc:	d906      	bls.n	2270c <k_poll_event_init+0x28>
   226fe:	490c      	ldr	r1, [pc, #48]	; (22730 <k_poll_event_init+0x4c>)
   22700:	480c      	ldr	r0, [pc, #48]	; (22734 <k_poll_event_init+0x50>)
   22702:	222f      	movs	r2, #47	; 0x2f
   22704:	f003 fc1c 	bl	25f40 <assert_print>
   22708:	212f      	movs	r1, #47	; 0x2f
   2270a:	e7f3      	b.n	226f4 <k_poll_event_init+0x10>
	__ASSERT(obj != NULL, "must provide an object\n");
   2270c:	b933      	cbnz	r3, 2271c <k_poll_event_init+0x38>
   2270e:	4908      	ldr	r1, [pc, #32]	; (22730 <k_poll_event_init+0x4c>)
   22710:	4808      	ldr	r0, [pc, #32]	; (22734 <k_poll_event_init+0x50>)
   22712:	2230      	movs	r2, #48	; 0x30
   22714:	f003 fc14 	bl	25f40 <assert_print>
   22718:	2130      	movs	r1, #48	; 0x30
   2271a:	e7eb      	b.n	226f4 <k_poll_event_init+0x10>
	event->poller = NULL;
   2271c:	6082      	str	r2, [r0, #8]
	event->type = type;
   2271e:	0209      	lsls	r1, r1, #8
   22720:	7b02      	ldrb	r2, [r0, #12]
   22722:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   22726:	4311      	orrs	r1, r2
	event->obj = obj;
   22728:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   2272c:	bd08      	pop	{r3, pc}
   2272e:	bf00      	nop
   22730:	0002d7bc 	.word	0x0002d7bc
   22734:	0002a7df 	.word	0x0002a7df

00022738 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   22738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2273c:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2273e:	4b51      	ldr	r3, [pc, #324]	; (22884 <z_impl_k_poll+0x14c>)
   22740:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   22744:	2301      	movs	r3, #1
{
   22746:	4617      	mov	r7, r2
   22748:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   2274a:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   2274e:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   22752:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   22756:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   2275a:	f1bb 0f00 	cmp.w	fp, #0
   2275e:	d00a      	beq.n	22776 <z_impl_k_poll+0x3e>
   22760:	4949      	ldr	r1, [pc, #292]	; (22888 <z_impl_k_poll+0x150>)
   22762:	484a      	ldr	r0, [pc, #296]	; (2288c <z_impl_k_poll+0x154>)
   22764:	f240 122d 	movw	r2, #301	; 0x12d
   22768:	f003 fbea 	bl	25f40 <assert_print>
   2276c:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   22770:	4845      	ldr	r0, [pc, #276]	; (22888 <z_impl_k_poll+0x150>)
   22772:	f003 fbde 	bl	25f32 <assert_post_action>
   22776:	b940      	cbnz	r0, 2278a <z_impl_k_poll+0x52>
   22778:	4943      	ldr	r1, [pc, #268]	; (22888 <z_impl_k_poll+0x150>)
   2277a:	4844      	ldr	r0, [pc, #272]	; (2288c <z_impl_k_poll+0x154>)
   2277c:	f44f 7297 	mov.w	r2, #302	; 0x12e
   22780:	f003 fbde 	bl	25f40 <assert_print>
   22784:	f44f 7197 	mov.w	r1, #302	; 0x12e
   22788:	e7f2      	b.n	22770 <z_impl_k_poll+0x38>
	__ASSERT(num_events >= 0, "<0 events\n");
   2278a:	2900      	cmp	r1, #0
   2278c:	da08      	bge.n	227a0 <z_impl_k_poll+0x68>
   2278e:	493e      	ldr	r1, [pc, #248]	; (22888 <z_impl_k_poll+0x150>)
   22790:	483e      	ldr	r0, [pc, #248]	; (2288c <z_impl_k_poll+0x154>)
   22792:	f240 122f 	movw	r2, #303	; 0x12f
   22796:	f003 fbd3 	bl	25f40 <assert_print>
   2279a:	f240 112f 	movw	r1, #303	; 0x12f
   2279e:	e7e7      	b.n	22770 <z_impl_k_poll+0x38>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   227a0:	ea57 0306 	orrs.w	r3, r7, r6
   227a4:	bf0c      	ite	eq
   227a6:	2301      	moveq	r3, #1
   227a8:	2300      	movne	r3, #0
   227aa:	f7ff fe3d 	bl	22428 <register_events>
   227ae:	4681      	mov	r9, r0
   227b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   227b4:	f3ef 8a11 	mrs	sl, BASEPRI
   227b8:	f383 8812 	msr	BASEPRI_MAX, r3
   227bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227c0:	4833      	ldr	r0, [pc, #204]	; (22890 <z_impl_k_poll+0x158>)
   227c2:	f7fd fc05 	bl	1ffd0 <z_spin_lock_valid>
   227c6:	b938      	cbnz	r0, 227d8 <z_impl_k_poll+0xa0>
   227c8:	4932      	ldr	r1, [pc, #200]	; (22894 <z_impl_k_poll+0x15c>)
   227ca:	4830      	ldr	r0, [pc, #192]	; (2288c <z_impl_k_poll+0x154>)
   227cc:	2294      	movs	r2, #148	; 0x94
   227ce:	f003 fbb7 	bl	25f40 <assert_print>
   227d2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227d4:	482f      	ldr	r0, [pc, #188]	; (22894 <z_impl_k_poll+0x15c>)
   227d6:	e7cc      	b.n	22772 <z_impl_k_poll+0x3a>
	z_spin_lock_set_owner(l);
   227d8:	482d      	ldr	r0, [pc, #180]	; (22890 <z_impl_k_poll+0x158>)
   227da:	f7fd fc17 	bl	2000c <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   227de:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   227e2:	b9bc      	cbnz	r4, 22814 <z_impl_k_poll+0xdc>
		clear_event_registrations(events, events_registered, key);
   227e4:	4628      	mov	r0, r5
   227e6:	4652      	mov	r2, sl
   227e8:	4649      	mov	r1, r9
   227ea:	f7ff fef3 	bl	225d4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227ee:	4828      	ldr	r0, [pc, #160]	; (22890 <z_impl_k_poll+0x158>)
   227f0:	f7fd fbfc 	bl	1ffec <z_spin_unlock_valid>
   227f4:	b930      	cbnz	r0, 22804 <z_impl_k_poll+0xcc>
   227f6:	4927      	ldr	r1, [pc, #156]	; (22894 <z_impl_k_poll+0x15c>)
   227f8:	4824      	ldr	r0, [pc, #144]	; (2288c <z_impl_k_poll+0x154>)
   227fa:	22c2      	movs	r2, #194	; 0xc2
   227fc:	f003 fba0 	bl	25f40 <assert_print>
   22800:	21c2      	movs	r1, #194	; 0xc2
   22802:	e7e7      	b.n	227d4 <z_impl_k_poll+0x9c>
	__asm__ volatile(
   22804:	f38a 8811 	msr	BASEPRI, sl
   22808:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   2280c:	4620      	mov	r0, r4
   2280e:	b003      	add	sp, #12
   22810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22814:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   22818:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2281c:	d10b      	bne.n	22836 <z_impl_k_poll+0xfe>
   2281e:	481c      	ldr	r0, [pc, #112]	; (22890 <z_impl_k_poll+0x158>)
   22820:	f7fd fbe4 	bl	1ffec <z_spin_unlock_valid>
   22824:	2800      	cmp	r0, #0
   22826:	d0e6      	beq.n	227f6 <z_impl_k_poll+0xbe>
   22828:	f38a 8811 	msr	BASEPRI, sl
   2282c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22830:	f06f 040a 	mvn.w	r4, #10
   22834:	e7ea      	b.n	2280c <z_impl_k_poll+0xd4>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22836:	e9cd 7600 	strd	r7, r6, [sp]
   2283a:	4a17      	ldr	r2, [pc, #92]	; (22898 <z_impl_k_poll+0x160>)
   2283c:	4814      	ldr	r0, [pc, #80]	; (22890 <z_impl_k_poll+0x158>)
   2283e:	4651      	mov	r1, sl
   22840:	f7fe ff26 	bl	21690 <z_pend_curr>
   22844:	4604      	mov	r4, r0
	__asm__ volatile(
   22846:	f04f 0340 	mov.w	r3, #64	; 0x40
   2284a:	f3ef 8611 	mrs	r6, BASEPRI
   2284e:	f383 8812 	msr	BASEPRI_MAX, r3
   22852:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22856:	480e      	ldr	r0, [pc, #56]	; (22890 <z_impl_k_poll+0x158>)
   22858:	f7fd fbba 	bl	1ffd0 <z_spin_lock_valid>
   2285c:	2800      	cmp	r0, #0
   2285e:	d0b3      	beq.n	227c8 <z_impl_k_poll+0x90>
	z_spin_lock_set_owner(l);
   22860:	480b      	ldr	r0, [pc, #44]	; (22890 <z_impl_k_poll+0x158>)
   22862:	f7fd fbd3 	bl	2000c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   22866:	4628      	mov	r0, r5
   22868:	4632      	mov	r2, r6
   2286a:	4649      	mov	r1, r9
   2286c:	f7ff feb2 	bl	225d4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22870:	4807      	ldr	r0, [pc, #28]	; (22890 <z_impl_k_poll+0x158>)
   22872:	f7fd fbbb 	bl	1ffec <z_spin_unlock_valid>
   22876:	2800      	cmp	r0, #0
   22878:	d0bd      	beq.n	227f6 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   2287a:	f386 8811 	msr	BASEPRI, r6
   2287e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   22882:	e7c3      	b.n	2280c <z_impl_k_poll+0xd4>
   22884:	20002a64 	.word	0x20002a64
   22888:	0002d7bc 	.word	0x0002d7bc
   2288c:	0002a7df 	.word	0x0002a7df
   22890:	20002ab8 	.word	0x20002ab8
   22894:	0002a819 	.word	0x0002a819
   22898:	20000710 	.word	0x20000710

0002289c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2289c:	b570      	push	{r4, r5, r6, lr}
   2289e:	4604      	mov	r4, r0
   228a0:	460d      	mov	r5, r1
	__asm__ volatile(
   228a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   228a6:	f3ef 8611 	mrs	r6, BASEPRI
   228aa:	f383 8812 	msr	BASEPRI_MAX, r3
   228ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228b2:	481b      	ldr	r0, [pc, #108]	; (22920 <z_impl_k_poll_signal_raise+0x84>)
   228b4:	f7fd fb8c 	bl	1ffd0 <z_spin_lock_valid>
   228b8:	b940      	cbnz	r0, 228cc <z_impl_k_poll_signal_raise+0x30>
   228ba:	491a      	ldr	r1, [pc, #104]	; (22924 <z_impl_k_poll_signal_raise+0x88>)
   228bc:	481a      	ldr	r0, [pc, #104]	; (22928 <z_impl_k_poll_signal_raise+0x8c>)
   228be:	2294      	movs	r2, #148	; 0x94
   228c0:	f003 fb3e 	bl	25f40 <assert_print>
   228c4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228c6:	4817      	ldr	r0, [pc, #92]	; (22924 <z_impl_k_poll_signal_raise+0x88>)
   228c8:	f003 fb33 	bl	25f32 <assert_post_action>
	z_spin_lock_set_owner(l);
   228cc:	4814      	ldr	r0, [pc, #80]	; (22920 <z_impl_k_poll_signal_raise+0x84>)
   228ce:	f7fd fb9d 	bl	2000c <z_spin_lock_set_owner>
	return list->head == list;
   228d2:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   228d4:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   228d6:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   228d8:	4284      	cmp	r4, r0
   228da:	60a1      	str	r1, [r4, #8]
   228dc:	d10a      	bne.n	228f4 <z_impl_k_poll_signal_raise+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228de:	4810      	ldr	r0, [pc, #64]	; (22920 <z_impl_k_poll_signal_raise+0x84>)
   228e0:	f7fd fb84 	bl	1ffec <z_spin_unlock_valid>
   228e4:	b9b0      	cbnz	r0, 22914 <z_impl_k_poll_signal_raise+0x78>
   228e6:	490f      	ldr	r1, [pc, #60]	; (22924 <z_impl_k_poll_signal_raise+0x88>)
   228e8:	480f      	ldr	r0, [pc, #60]	; (22928 <z_impl_k_poll_signal_raise+0x8c>)
   228ea:	22c2      	movs	r2, #194	; 0xc2
   228ec:	f003 fb28 	bl	25f40 <assert_print>
   228f0:	21c2      	movs	r1, #194	; 0xc2
   228f2:	e7e8      	b.n	228c6 <z_impl_k_poll_signal_raise+0x2a>
	sys_dnode_t *const next = node->next;
   228f4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   228f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   228fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   228fc:	2300      	movs	r3, #0
	node->prev = NULL;
   228fe:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22902:	f006 fe28 	bl	29556 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   22906:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22908:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2290a:	4805      	ldr	r0, [pc, #20]	; (22920 <z_impl_k_poll_signal_raise+0x84>)
   2290c:	f7fe fc6c 	bl	211e8 <z_reschedule>
	return rc;
}
   22910:	4620      	mov	r0, r4
   22912:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   22914:	f386 8811 	msr	BASEPRI, r6
   22918:	f3bf 8f6f 	isb	sy
		return 0;
   2291c:	2400      	movs	r4, #0
   2291e:	e7f7      	b.n	22910 <z_impl_k_poll_signal_raise+0x74>
   22920:	20002ab8 	.word	0x20002ab8
   22924:	0002a819 	.word	0x0002a819
   22928:	0002a7df 	.word	0x0002a7df

0002292c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2292c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2292e:	4605      	mov	r5, r0
   22930:	460e      	mov	r6, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   22932:	f006 fcbf 	bl	292b4 <k_is_in_isr>
   22936:	b9f0      	cbnz	r0, 22976 <z_thread_aligned_alloc+0x4a>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   22938:	4b11      	ldr	r3, [pc, #68]	; (22980 <z_thread_aligned_alloc+0x54>)
   2293a:	689b      	ldr	r3, [r3, #8]
   2293c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2293e:	b1dc      	cbz	r4, 22978 <z_thread_aligned_alloc+0x4c>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22940:	1d32      	adds	r2, r6, #4
   22942:	d218      	bcs.n	22976 <z_thread_aligned_alloc+0x4a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   22944:	2000      	movs	r0, #0
   22946:	2100      	movs	r1, #0
   22948:	e9cd 0100 	strd	r0, r1, [sp]
   2294c:	f045 0104 	orr.w	r1, r5, #4
   22950:	4620      	mov	r0, r4
   22952:	f7fd f8ad 	bl	1fab0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   22956:	b170      	cbz	r0, 22976 <z_thread_aligned_alloc+0x4a>
	*heap_ref = heap;
   22958:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   2295a:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   2295c:	b165      	cbz	r5, 22978 <z_thread_aligned_alloc+0x4c>
   2295e:	3d01      	subs	r5, #1
   22960:	422c      	tst	r4, r5
   22962:	d009      	beq.n	22978 <z_thread_aligned_alloc+0x4c>
   22964:	4907      	ldr	r1, [pc, #28]	; (22984 <z_thread_aligned_alloc+0x58>)
   22966:	4808      	ldr	r0, [pc, #32]	; (22988 <z_thread_aligned_alloc+0x5c>)
   22968:	2225      	movs	r2, #37	; 0x25
   2296a:	f003 fae9 	bl	25f40 <assert_print>
   2296e:	4805      	ldr	r0, [pc, #20]	; (22984 <z_thread_aligned_alloc+0x58>)
   22970:	2125      	movs	r1, #37	; 0x25
   22972:	f003 fade 	bl	25f32 <assert_post_action>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   22976:	2400      	movs	r4, #0
	}

	return ret;
}
   22978:	4620      	mov	r0, r4
   2297a:	b002      	add	sp, #8
   2297c:	bd70      	pop	{r4, r5, r6, pc}
   2297e:	bf00      	nop
   22980:	20002a64 	.word	0x20002a64
   22984:	0002d7dd 	.word	0x0002d7dd
   22988:	0002a7df 	.word	0x0002a7df

0002298c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2298c:	4801      	ldr	r0, [pc, #4]	; (22994 <boot_banner+0x8>)
   2298e:	f003 b8cf 	b.w	25b30 <printk>
   22992:	bf00      	nop
   22994:	0002d801 	.word	0x0002d801

00022998 <ocrypto_ecdh_p256_public_key>:
   22998:	b530      	push	{r4, r5, lr}
   2299a:	b099      	sub	sp, #100	; 0x64
   2299c:	4605      	mov	r5, r0
   2299e:	4668      	mov	r0, sp
   229a0:	f000 f828 	bl	229f4 <ocrypto_sc_p256_from32bytes>
   229a4:	4669      	mov	r1, sp
   229a6:	4604      	mov	r4, r0
   229a8:	a808      	add	r0, sp, #32
   229aa:	f000 fa53 	bl	22e54 <ocrypto_curve_p256_scalarmult_base>
   229ae:	a908      	add	r1, sp, #32
   229b0:	4304      	orrs	r4, r0
   229b2:	4628      	mov	r0, r5
   229b4:	f000 f98a 	bl	22ccc <ocrypto_curve_p256_to64bytes>
   229b8:	4620      	mov	r0, r4
   229ba:	b019      	add	sp, #100	; 0x64
   229bc:	bd30      	pop	{r4, r5, pc}
   229be:	bf00      	nop

000229c0 <ocrypto_ecdh_p256_common_secret>:
   229c0:	b570      	push	{r4, r5, r6, lr}
   229c2:	b098      	sub	sp, #96	; 0x60
   229c4:	4605      	mov	r5, r0
   229c6:	4668      	mov	r0, sp
   229c8:	4616      	mov	r6, r2
   229ca:	f000 f813 	bl	229f4 <ocrypto_sc_p256_from32bytes>
   229ce:	4631      	mov	r1, r6
   229d0:	4604      	mov	r4, r0
   229d2:	a808      	add	r0, sp, #32
   229d4:	f000 f946 	bl	22c64 <ocrypto_curve_p256_from64bytes>
   229d8:	a908      	add	r1, sp, #32
   229da:	466a      	mov	r2, sp
   229dc:	4304      	orrs	r4, r0
   229de:	4608      	mov	r0, r1
   229e0:	f000 f982 	bl	22ce8 <ocrypto_curve_p256_scalarmult>
   229e4:	a908      	add	r1, sp, #32
   229e6:	4304      	orrs	r4, r0
   229e8:	4628      	mov	r0, r5
   229ea:	f000 f96d 	bl	22cc8 <ocrypto_curve_p256_to32bytes>
   229ee:	4620      	mov	r0, r4
   229f0:	b018      	add	sp, #96	; 0x60
   229f2:	bd70      	pop	{r4, r5, r6, pc}

000229f4 <ocrypto_sc_p256_from32bytes>:
   229f4:	b570      	push	{r4, r5, r6, lr}
   229f6:	680b      	ldr	r3, [r1, #0]
   229f8:	4e12      	ldr	r6, [pc, #72]	; (22a44 <ocrypto_sc_p256_from32bytes+0x50>)
   229fa:	ba1b      	rev	r3, r3
   229fc:	61c3      	str	r3, [r0, #28]
   229fe:	684b      	ldr	r3, [r1, #4]
   22a00:	ba1b      	rev	r3, r3
   22a02:	6183      	str	r3, [r0, #24]
   22a04:	688b      	ldr	r3, [r1, #8]
   22a06:	ba1b      	rev	r3, r3
   22a08:	6143      	str	r3, [r0, #20]
   22a0a:	68cb      	ldr	r3, [r1, #12]
   22a0c:	ba1b      	rev	r3, r3
   22a0e:	6103      	str	r3, [r0, #16]
   22a10:	690b      	ldr	r3, [r1, #16]
   22a12:	ba1b      	rev	r3, r3
   22a14:	60c3      	str	r3, [r0, #12]
   22a16:	694b      	ldr	r3, [r1, #20]
   22a18:	ba1b      	rev	r3, r3
   22a1a:	6083      	str	r3, [r0, #8]
   22a1c:	698b      	ldr	r3, [r1, #24]
   22a1e:	ba1b      	rev	r3, r3
   22a20:	6043      	str	r3, [r0, #4]
   22a22:	69cb      	ldr	r3, [r1, #28]
   22a24:	ba1b      	rev	r3, r3
   22a26:	4632      	mov	r2, r6
   22a28:	6003      	str	r3, [r0, #0]
   22a2a:	4601      	mov	r1, r0
   22a2c:	4604      	mov	r4, r0
   22a2e:	f7dd fba1 	bl	174 <ocrypto_bigint_sub256>
   22a32:	4631      	mov	r1, r6
   22a34:	4605      	mov	r5, r0
   22a36:	4602      	mov	r2, r0
   22a38:	4620      	mov	r0, r4
   22a3a:	f7dd fbbb 	bl	1b4 <ocrypto_bigint_cadd256>
   22a3e:	1e68      	subs	r0, r5, #1
   22a40:	bd70      	pop	{r4, r5, r6, pc}
   22a42:	bf00      	nop
   22a44:	0002a248 	.word	0x0002a248

00022a48 <p256_zdblu>:
   22a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a4c:	b088      	sub	sp, #32
   22a4e:	460c      	mov	r4, r1
   22a50:	4606      	mov	r6, r0
   22a52:	f102 0120 	add.w	r1, r2, #32
   22a56:	4668      	mov	r0, sp
   22a58:	f106 0720 	add.w	r7, r6, #32
   22a5c:	4690      	mov	r8, r2
   22a5e:	f7dd fe93 	bl	788 <ocrypto_mod_p256_sqr>
   22a62:	466a      	mov	r2, sp
   22a64:	4669      	mov	r1, sp
   22a66:	4668      	mov	r0, sp
   22a68:	f7dd fda0 	bl	5ac <ocrypto_mod_p256_add>
   22a6c:	4669      	mov	r1, sp
   22a6e:	4638      	mov	r0, r7
   22a70:	f7dd fe8a 	bl	788 <ocrypto_mod_p256_sqr>
   22a74:	463a      	mov	r2, r7
   22a76:	4639      	mov	r1, r7
   22a78:	4638      	mov	r0, r7
   22a7a:	f104 0520 	add.w	r5, r4, #32
   22a7e:	f7dd fd95 	bl	5ac <ocrypto_mod_p256_add>
   22a82:	466a      	mov	r2, sp
   22a84:	4669      	mov	r1, sp
   22a86:	4668      	mov	r0, sp
   22a88:	f7dd fd90 	bl	5ac <ocrypto_mod_p256_add>
   22a8c:	4641      	mov	r1, r8
   22a8e:	4628      	mov	r0, r5
   22a90:	f7dd fe7a 	bl	788 <ocrypto_mod_p256_sqr>
   22a94:	466a      	mov	r2, sp
   22a96:	4641      	mov	r1, r8
   22a98:	4630      	mov	r0, r6
   22a9a:	f7dd fe5d 	bl	758 <ocrypto_mod_p256_mul>
   22a9e:	462a      	mov	r2, r5
   22aa0:	4629      	mov	r1, r5
   22aa2:	4668      	mov	r0, sp
   22aa4:	f7dd fd82 	bl	5ac <ocrypto_mod_p256_add>
   22aa8:	462a      	mov	r2, r5
   22aaa:	4669      	mov	r1, sp
   22aac:	4668      	mov	r0, sp
   22aae:	f7dd fd7d 	bl	5ac <ocrypto_mod_p256_add>
   22ab2:	4a12      	ldr	r2, [pc, #72]	; (22afc <p256_zdblu+0xb4>)
   22ab4:	4669      	mov	r1, sp
   22ab6:	4668      	mov	r0, sp
   22ab8:	f7dd fd78 	bl	5ac <ocrypto_mod_p256_add>
   22abc:	4669      	mov	r1, sp
   22abe:	4620      	mov	r0, r4
   22ac0:	f7dd fe62 	bl	788 <ocrypto_mod_p256_sqr>
   22ac4:	4632      	mov	r2, r6
   22ac6:	4621      	mov	r1, r4
   22ac8:	4620      	mov	r0, r4
   22aca:	f7dd fdad 	bl	628 <ocrypto_mod_p256_sub>
   22ace:	4632      	mov	r2, r6
   22ad0:	4621      	mov	r1, r4
   22ad2:	4620      	mov	r0, r4
   22ad4:	f7dd fda8 	bl	628 <ocrypto_mod_p256_sub>
   22ad8:	4622      	mov	r2, r4
   22ada:	4631      	mov	r1, r6
   22adc:	4628      	mov	r0, r5
   22ade:	f7dd fda3 	bl	628 <ocrypto_mod_p256_sub>
   22ae2:	466a      	mov	r2, sp
   22ae4:	4629      	mov	r1, r5
   22ae6:	4628      	mov	r0, r5
   22ae8:	f7dd fe36 	bl	758 <ocrypto_mod_p256_mul>
   22aec:	463a      	mov	r2, r7
   22aee:	4629      	mov	r1, r5
   22af0:	4628      	mov	r0, r5
   22af2:	f7dd fd99 	bl	628 <ocrypto_mod_p256_sub>
   22af6:	b008      	add	sp, #32
   22af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22afc:	0002a2e8 	.word	0x0002a2e8

00022b00 <p256_zaddc>:
   22b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b02:	b099      	sub	sp, #100	; 0x64
   22b04:	4604      	mov	r4, r0
   22b06:	460d      	mov	r5, r1
   22b08:	460a      	mov	r2, r1
   22b0a:	4601      	mov	r1, r0
   22b0c:	4668      	mov	r0, sp
   22b0e:	f7dd fd8b 	bl	628 <ocrypto_mod_p256_sub>
   22b12:	4669      	mov	r1, sp
   22b14:	4668      	mov	r0, sp
   22b16:	f7dd fe37 	bl	788 <ocrypto_mod_p256_sqr>
   22b1a:	466a      	mov	r2, sp
   22b1c:	4621      	mov	r1, r4
   22b1e:	a808      	add	r0, sp, #32
   22b20:	f105 0620 	add.w	r6, r5, #32
   22b24:	f104 0720 	add.w	r7, r4, #32
   22b28:	f7dd fe16 	bl	758 <ocrypto_mod_p256_mul>
   22b2c:	466a      	mov	r2, sp
   22b2e:	4629      	mov	r1, r5
   22b30:	4668      	mov	r0, sp
   22b32:	f7dd fe11 	bl	758 <ocrypto_mod_p256_mul>
   22b36:	4632      	mov	r2, r6
   22b38:	4639      	mov	r1, r7
   22b3a:	a810      	add	r0, sp, #64	; 0x40
   22b3c:	f7dd fd36 	bl	5ac <ocrypto_mod_p256_add>
   22b40:	4632      	mov	r2, r6
   22b42:	4639      	mov	r1, r7
   22b44:	4630      	mov	r0, r6
   22b46:	f7dd fd6f 	bl	628 <ocrypto_mod_p256_sub>
   22b4a:	4631      	mov	r1, r6
   22b4c:	4628      	mov	r0, r5
   22b4e:	f7dd fe1b 	bl	788 <ocrypto_mod_p256_sqr>
   22b52:	466a      	mov	r2, sp
   22b54:	a908      	add	r1, sp, #32
   22b56:	4620      	mov	r0, r4
   22b58:	f7dd fd28 	bl	5ac <ocrypto_mod_p256_add>
   22b5c:	4622      	mov	r2, r4
   22b5e:	4629      	mov	r1, r5
   22b60:	4628      	mov	r0, r5
   22b62:	f7dd fd61 	bl	628 <ocrypto_mod_p256_sub>
   22b66:	466a      	mov	r2, sp
   22b68:	a908      	add	r1, sp, #32
   22b6a:	4668      	mov	r0, sp
   22b6c:	f7dd fd5c 	bl	628 <ocrypto_mod_p256_sub>
   22b70:	466a      	mov	r2, sp
   22b72:	4639      	mov	r1, r7
   22b74:	4638      	mov	r0, r7
   22b76:	f7dd fdef 	bl	758 <ocrypto_mod_p256_mul>
   22b7a:	462a      	mov	r2, r5
   22b7c:	a908      	add	r1, sp, #32
   22b7e:	4668      	mov	r0, sp
   22b80:	f7dd fd52 	bl	628 <ocrypto_mod_p256_sub>
   22b84:	466a      	mov	r2, sp
   22b86:	4631      	mov	r1, r6
   22b88:	4630      	mov	r0, r6
   22b8a:	f7dd fde5 	bl	758 <ocrypto_mod_p256_mul>
   22b8e:	463a      	mov	r2, r7
   22b90:	4631      	mov	r1, r6
   22b92:	4630      	mov	r0, r6
   22b94:	f7dd fd48 	bl	628 <ocrypto_mod_p256_sub>
   22b98:	a910      	add	r1, sp, #64	; 0x40
   22b9a:	4668      	mov	r0, sp
   22b9c:	f7dd fdf4 	bl	788 <ocrypto_mod_p256_sqr>
   22ba0:	4622      	mov	r2, r4
   22ba2:	4669      	mov	r1, sp
   22ba4:	4620      	mov	r0, r4
   22ba6:	f7dd fd3f 	bl	628 <ocrypto_mod_p256_sub>
   22baa:	a908      	add	r1, sp, #32
   22bac:	4622      	mov	r2, r4
   22bae:	4608      	mov	r0, r1
   22bb0:	f7dd fd3a 	bl	628 <ocrypto_mod_p256_sub>
   22bb4:	a910      	add	r1, sp, #64	; 0x40
   22bb6:	aa08      	add	r2, sp, #32
   22bb8:	4608      	mov	r0, r1
   22bba:	f7dd fdcd 	bl	758 <ocrypto_mod_p256_mul>
   22bbe:	463a      	mov	r2, r7
   22bc0:	a910      	add	r1, sp, #64	; 0x40
   22bc2:	4638      	mov	r0, r7
   22bc4:	f7dd fd30 	bl	628 <ocrypto_mod_p256_sub>
   22bc8:	b019      	add	sp, #100	; 0x64
   22bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022bcc <p256_zaddu>:
   22bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22bd0:	b088      	sub	sp, #32
   22bd2:	460c      	mov	r4, r1
   22bd4:	4605      	mov	r5, r0
   22bd6:	4690      	mov	r8, r2
   22bd8:	460a      	mov	r2, r1
   22bda:	4601      	mov	r1, r0
   22bdc:	4668      	mov	r0, sp
   22bde:	f7dd fd23 	bl	628 <ocrypto_mod_p256_sub>
   22be2:	4669      	mov	r1, sp
   22be4:	4668      	mov	r0, sp
   22be6:	f7dd fdcf 	bl	788 <ocrypto_mod_p256_sqr>
   22bea:	466a      	mov	r2, sp
   22bec:	4629      	mov	r1, r5
   22bee:	4628      	mov	r0, r5
   22bf0:	f104 0620 	add.w	r6, r4, #32
   22bf4:	f7dd fdb0 	bl	758 <ocrypto_mod_p256_mul>
   22bf8:	f105 0720 	add.w	r7, r5, #32
   22bfc:	466a      	mov	r2, sp
   22bfe:	4621      	mov	r1, r4
   22c00:	4668      	mov	r0, sp
   22c02:	f7dd fda9 	bl	758 <ocrypto_mod_p256_mul>
   22c06:	4632      	mov	r2, r6
   22c08:	4639      	mov	r1, r7
   22c0a:	4630      	mov	r0, r6
   22c0c:	f7dd fd0c 	bl	628 <ocrypto_mod_p256_sub>
   22c10:	4631      	mov	r1, r6
   22c12:	4620      	mov	r0, r4
   22c14:	f7dd fdb8 	bl	788 <ocrypto_mod_p256_sqr>
   22c18:	462a      	mov	r2, r5
   22c1a:	4621      	mov	r1, r4
   22c1c:	4620      	mov	r0, r4
   22c1e:	f7dd fd03 	bl	628 <ocrypto_mod_p256_sub>
   22c22:	466a      	mov	r2, sp
   22c24:	4621      	mov	r1, r4
   22c26:	4620      	mov	r0, r4
   22c28:	f7dd fcfe 	bl	628 <ocrypto_mod_p256_sub>
   22c2c:	466a      	mov	r2, sp
   22c2e:	4629      	mov	r1, r5
   22c30:	4640      	mov	r0, r8
   22c32:	f7dd fcf9 	bl	628 <ocrypto_mod_p256_sub>
   22c36:	4642      	mov	r2, r8
   22c38:	4639      	mov	r1, r7
   22c3a:	4638      	mov	r0, r7
   22c3c:	f7dd fd8c 	bl	758 <ocrypto_mod_p256_mul>
   22c40:	4622      	mov	r2, r4
   22c42:	4629      	mov	r1, r5
   22c44:	4668      	mov	r0, sp
   22c46:	f7dd fcef 	bl	628 <ocrypto_mod_p256_sub>
   22c4a:	466a      	mov	r2, sp
   22c4c:	4631      	mov	r1, r6
   22c4e:	4630      	mov	r0, r6
   22c50:	f7dd fd82 	bl	758 <ocrypto_mod_p256_mul>
   22c54:	463a      	mov	r2, r7
   22c56:	4631      	mov	r1, r6
   22c58:	4630      	mov	r0, r6
   22c5a:	f7dd fce5 	bl	628 <ocrypto_mod_p256_sub>
   22c5e:	b008      	add	sp, #32
   22c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022c64 <ocrypto_curve_p256_from64bytes>:
   22c64:	b570      	push	{r4, r5, r6, lr}
   22c66:	f100 0620 	add.w	r6, r0, #32
   22c6a:	b090      	sub	sp, #64	; 0x40
   22c6c:	460d      	mov	r5, r1
   22c6e:	4604      	mov	r4, r0
   22c70:	f000 f914 	bl	22e9c <ocrypto_mod_p256_from_bytes>
   22c74:	f105 0120 	add.w	r1, r5, #32
   22c78:	4630      	mov	r0, r6
   22c7a:	f000 f90f 	bl	22e9c <ocrypto_mod_p256_from_bytes>
   22c7e:	4621      	mov	r1, r4
   22c80:	a808      	add	r0, sp, #32
   22c82:	f7dd fd81 	bl	788 <ocrypto_mod_p256_sqr>
   22c86:	a908      	add	r1, sp, #32
   22c88:	4608      	mov	r0, r1
   22c8a:	4a0d      	ldr	r2, [pc, #52]	; (22cc0 <ocrypto_curve_p256_from64bytes+0x5c>)
   22c8c:	f7dd fc8e 	bl	5ac <ocrypto_mod_p256_add>
   22c90:	a908      	add	r1, sp, #32
   22c92:	4622      	mov	r2, r4
   22c94:	4608      	mov	r0, r1
   22c96:	f7dd fd5f 	bl	758 <ocrypto_mod_p256_mul>
   22c9a:	a908      	add	r1, sp, #32
   22c9c:	4a09      	ldr	r2, [pc, #36]	; (22cc4 <ocrypto_curve_p256_from64bytes+0x60>)
   22c9e:	4608      	mov	r0, r1
   22ca0:	f7dd fc84 	bl	5ac <ocrypto_mod_p256_add>
   22ca4:	4631      	mov	r1, r6
   22ca6:	4668      	mov	r0, sp
   22ca8:	f7dd fd6e 	bl	788 <ocrypto_mod_p256_sqr>
   22cac:	2220      	movs	r2, #32
   22cae:	4669      	mov	r1, sp
   22cb0:	eb0d 0002 	add.w	r0, sp, r2
   22cb4:	f7dd fc4c 	bl	550 <ocrypto_constant_time_equal>
   22cb8:	3801      	subs	r0, #1
   22cba:	b010      	add	sp, #64	; 0x40
   22cbc:	bd70      	pop	{r4, r5, r6, pc}
   22cbe:	bf00      	nop
   22cc0:	0002a2e8 	.word	0x0002a2e8
   22cc4:	0002a308 	.word	0x0002a308

00022cc8 <ocrypto_curve_p256_to32bytes>:
   22cc8:	f000 b902 	b.w	22ed0 <ocrypto_mod_p256_to_bytes>

00022ccc <ocrypto_curve_p256_to64bytes>:
   22ccc:	b538      	push	{r3, r4, r5, lr}
   22cce:	4604      	mov	r4, r0
   22cd0:	460d      	mov	r5, r1
   22cd2:	f000 f8fd 	bl	22ed0 <ocrypto_mod_p256_to_bytes>
   22cd6:	f105 0120 	add.w	r1, r5, #32
   22cda:	f104 0020 	add.w	r0, r4, #32
   22cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22ce2:	f000 b8f5 	b.w	22ed0 <ocrypto_mod_p256_to_bytes>
   22ce6:	bf00      	nop

00022ce8 <ocrypto_curve_p256_scalarmult>:
   22ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22cec:	4613      	mov	r3, r2
   22cee:	b0b8      	sub	sp, #224	; 0xe0
   22cf0:	4a54      	ldr	r2, [pc, #336]	; (22e44 <ocrypto_curve_p256_scalarmult+0x15c>)
   22cf2:	4689      	mov	r9, r1
   22cf4:	4680      	mov	r8, r0
   22cf6:	4619      	mov	r1, r3
   22cf8:	a810      	add	r0, sp, #64	; 0x40
   22cfa:	f7dd fa3b 	bl	174 <ocrypto_bigint_sub256>
   22cfe:	4952      	ldr	r1, [pc, #328]	; (22e48 <ocrypto_curve_p256_scalarmult+0x160>)
   22d00:	4602      	mov	r2, r0
   22d02:	a810      	add	r0, sp, #64	; 0x40
   22d04:	f7dd fa56 	bl	1b4 <ocrypto_bigint_cadd256>
   22d08:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   22d0a:	494e      	ldr	r1, [pc, #312]	; (22e44 <ocrypto_curve_p256_scalarmult+0x15c>)
   22d0c:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   22d10:	4607      	mov	r7, r0
   22d12:	f1c6 0201 	rsb	r2, r6, #1
   22d16:	a810      	add	r0, sp, #64	; 0x40
   22d18:	f7dd fa4c 	bl	1b4 <ocrypto_bigint_cadd256>
   22d1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   22d1e:	464a      	mov	r2, r9
   22d20:	ea6f 0a03 	mvn.w	sl, r3
   22d24:	a928      	add	r1, sp, #160	; 0xa0
   22d26:	a818      	add	r0, sp, #96	; 0x60
   22d28:	f7ff fe8e 	bl	22a48 <p256_zdblu>
   22d2c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   22d30:	a920      	add	r1, sp, #128	; 0x80
   22d32:	f1ca 0201 	rsb	r2, sl, #1
   22d36:	4608      	mov	r0, r1
   22d38:	f000 f892 	bl	22e60 <ocrypto_mod_p256_cneg>
   22d3c:	f1c7 0701 	rsb	r7, r7, #1
   22d40:	24fe      	movs	r4, #254	; 0xfe
   22d42:	466a      	mov	r2, sp
   22d44:	a918      	add	r1, sp, #96	; 0x60
   22d46:	a828      	add	r0, sp, #160	; 0xa0
   22d48:	f7ff ff40 	bl	22bcc <p256_zaddu>
   22d4c:	1162      	asrs	r2, r4, #5
   22d4e:	ab38      	add	r3, sp, #224	; 0xe0
   22d50:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   22d54:	f004 011f 	and.w	r1, r4, #31
   22d58:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   22d5c:	40cb      	lsrs	r3, r1
   22d5e:	4655      	mov	r5, sl
   22d60:	f003 0a01 	and.w	sl, r3, #1
   22d64:	ea8a 0505 	eor.w	r5, sl, r5
   22d68:	462a      	mov	r2, r5
   22d6a:	a928      	add	r1, sp, #160	; 0xa0
   22d6c:	a818      	add	r0, sp, #96	; 0x60
   22d6e:	f7dd fa7d 	bl	26c <ocrypto_bigint_cswap256>
   22d72:	462a      	mov	r2, r5
   22d74:	a930      	add	r1, sp, #192	; 0xc0
   22d76:	a820      	add	r0, sp, #128	; 0x80
   22d78:	f7dd fa78 	bl	26c <ocrypto_bigint_cswap256>
   22d7c:	3c01      	subs	r4, #1
   22d7e:	a928      	add	r1, sp, #160	; 0xa0
   22d80:	a818      	add	r0, sp, #96	; 0x60
   22d82:	f7ff febd 	bl	22b00 <p256_zaddc>
   22d86:	1c63      	adds	r3, r4, #1
   22d88:	d1db      	bne.n	22d42 <ocrypto_curve_p256_scalarmult+0x5a>
   22d8a:	f1ca 0201 	rsb	r2, sl, #1
   22d8e:	a920      	add	r1, sp, #128	; 0x80
   22d90:	a808      	add	r0, sp, #32
   22d92:	f000 f865 	bl	22e60 <ocrypto_mod_p256_cneg>
   22d96:	ea86 060a 	eor.w	r6, r6, sl
   22d9a:	466a      	mov	r2, sp
   22d9c:	a918      	add	r1, sp, #96	; 0x60
   22d9e:	a828      	add	r0, sp, #160	; 0xa0
   22da0:	f7ff ff14 	bl	22bcc <p256_zaddu>
   22da4:	a928      	add	r1, sp, #160	; 0xa0
   22da6:	4632      	mov	r2, r6
   22da8:	a818      	add	r0, sp, #96	; 0x60
   22daa:	f7dd fa5f 	bl	26c <ocrypto_bigint_cswap256>
   22dae:	4632      	mov	r2, r6
   22db0:	a930      	add	r1, sp, #192	; 0xc0
   22db2:	a820      	add	r0, sp, #128	; 0x80
   22db4:	f7dd fa5a 	bl	26c <ocrypto_bigint_cswap256>
   22db8:	a908      	add	r1, sp, #32
   22dba:	466a      	mov	r2, sp
   22dbc:	4608      	mov	r0, r1
   22dbe:	f7dd fccb 	bl	758 <ocrypto_mod_p256_mul>
   22dc2:	a908      	add	r1, sp, #32
   22dc4:	4608      	mov	r0, r1
   22dc6:	f000 f89d 	bl	22f04 <ocrypto_mod_p256_inv>
   22dca:	a908      	add	r1, sp, #32
   22dcc:	f108 0420 	add.w	r4, r8, #32
   22dd0:	f109 0220 	add.w	r2, r9, #32
   22dd4:	4608      	mov	r0, r1
   22dd6:	f7dd fcbf 	bl	758 <ocrypto_mod_p256_mul>
   22dda:	a920      	add	r1, sp, #128	; 0x80
   22ddc:	aa08      	add	r2, sp, #32
   22dde:	4620      	mov	r0, r4
   22de0:	f7dd fcba 	bl	758 <ocrypto_mod_p256_mul>
   22de4:	aa08      	add	r2, sp, #32
   22de6:	a918      	add	r1, sp, #96	; 0x60
   22de8:	4668      	mov	r0, sp
   22dea:	f7dd fcb5 	bl	758 <ocrypto_mod_p256_mul>
   22dee:	4669      	mov	r1, sp
   22df0:	4668      	mov	r0, sp
   22df2:	f7dd fcc9 	bl	788 <ocrypto_mod_p256_sqr>
   22df6:	aa18      	add	r2, sp, #96	; 0x60
   22df8:	4669      	mov	r1, sp
   22dfa:	a808      	add	r0, sp, #32
   22dfc:	f7dd fcac 	bl	758 <ocrypto_mod_p256_mul>
   22e00:	4621      	mov	r1, r4
   22e02:	4668      	mov	r0, sp
   22e04:	f7dd fcc0 	bl	788 <ocrypto_mod_p256_sqr>
   22e08:	aa08      	add	r2, sp, #32
   22e0a:	4669      	mov	r1, sp
   22e0c:	4610      	mov	r0, r2
   22e0e:	f7dd fc0b 	bl	628 <ocrypto_mod_p256_sub>
   22e12:	4a0e      	ldr	r2, [pc, #56]	; (22e4c <ocrypto_curve_p256_scalarmult+0x164>)
   22e14:	a908      	add	r1, sp, #32
   22e16:	4668      	mov	r0, sp
   22e18:	f7dd fc06 	bl	628 <ocrypto_mod_p256_sub>
   22e1c:	4620      	mov	r0, r4
   22e1e:	2120      	movs	r1, #32
   22e20:	f7dd fbaa 	bl	578 <ocrypto_constant_time_is_zero>
   22e24:	a908      	add	r1, sp, #32
   22e26:	4243      	negs	r3, r0
   22e28:	4602      	mov	r2, r0
   22e2a:	4668      	mov	r0, sp
   22e2c:	431f      	orrs	r7, r3
   22e2e:	f7dd fa1d 	bl	26c <ocrypto_bigint_cswap256>
   22e32:	4640      	mov	r0, r8
   22e34:	4a06      	ldr	r2, [pc, #24]	; (22e50 <ocrypto_curve_p256_scalarmult+0x168>)
   22e36:	4669      	mov	r1, sp
   22e38:	f7dd fc8e 	bl	758 <ocrypto_mod_p256_mul>
   22e3c:	4638      	mov	r0, r7
   22e3e:	b038      	add	sp, #224	; 0xe0
   22e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22e44:	0002a328 	.word	0x0002a328
   22e48:	0002a2a8 	.word	0x0002a2a8
   22e4c:	0002a308 	.word	0x0002a308
   22e50:	0002a2c8 	.word	0x0002a2c8

00022e54 <ocrypto_curve_p256_scalarmult_base>:
   22e54:	460a      	mov	r2, r1
   22e56:	4901      	ldr	r1, [pc, #4]	; (22e5c <ocrypto_curve_p256_scalarmult_base+0x8>)
   22e58:	f7ff bf46 	b.w	22ce8 <ocrypto_curve_p256_scalarmult>
   22e5c:	0002a268 	.word	0x0002a268

00022e60 <ocrypto_mod_p256_cneg>:
   22e60:	b570      	push	{r4, r5, r6, lr}
   22e62:	b088      	sub	sp, #32
   22e64:	4604      	mov	r4, r0
   22e66:	460d      	mov	r5, r1
   22e68:	4616      	mov	r6, r2
   22e6a:	2100      	movs	r1, #0
   22e6c:	2220      	movs	r2, #32
   22e6e:	4668      	mov	r0, sp
   22e70:	f003 ff0f 	bl	26c92 <memset>
   22e74:	2300      	movs	r3, #0
   22e76:	4629      	mov	r1, r5
   22e78:	2220      	movs	r2, #32
   22e7a:	4620      	mov	r0, r4
   22e7c:	9300      	str	r3, [sp, #0]
   22e7e:	f003 fefd 	bl	26c7c <memcpy>
   22e82:	462a      	mov	r2, r5
   22e84:	4669      	mov	r1, sp
   22e86:	4668      	mov	r0, sp
   22e88:	f7dd fbce 	bl	628 <ocrypto_mod_p256_sub>
   22e8c:	4632      	mov	r2, r6
   22e8e:	4669      	mov	r1, sp
   22e90:	4620      	mov	r0, r4
   22e92:	f7dd f9eb 	bl	26c <ocrypto_bigint_cswap256>
   22e96:	b008      	add	sp, #32
   22e98:	bd70      	pop	{r4, r5, r6, pc}
   22e9a:	bf00      	nop

00022e9c <ocrypto_mod_p256_from_bytes>:
   22e9c:	680b      	ldr	r3, [r1, #0]
   22e9e:	ba1b      	rev	r3, r3
   22ea0:	61c3      	str	r3, [r0, #28]
   22ea2:	684b      	ldr	r3, [r1, #4]
   22ea4:	ba1b      	rev	r3, r3
   22ea6:	6183      	str	r3, [r0, #24]
   22ea8:	688b      	ldr	r3, [r1, #8]
   22eaa:	ba1b      	rev	r3, r3
   22eac:	6143      	str	r3, [r0, #20]
   22eae:	68cb      	ldr	r3, [r1, #12]
   22eb0:	ba1b      	rev	r3, r3
   22eb2:	6103      	str	r3, [r0, #16]
   22eb4:	690b      	ldr	r3, [r1, #16]
   22eb6:	ba1b      	rev	r3, r3
   22eb8:	60c3      	str	r3, [r0, #12]
   22eba:	694b      	ldr	r3, [r1, #20]
   22ebc:	ba1b      	rev	r3, r3
   22ebe:	6083      	str	r3, [r0, #8]
   22ec0:	698b      	ldr	r3, [r1, #24]
   22ec2:	ba1b      	rev	r3, r3
   22ec4:	6043      	str	r3, [r0, #4]
   22ec6:	69cb      	ldr	r3, [r1, #28]
   22ec8:	ba1b      	rev	r3, r3
   22eca:	6003      	str	r3, [r0, #0]
   22ecc:	4770      	bx	lr
   22ece:	bf00      	nop

00022ed0 <ocrypto_mod_p256_to_bytes>:
   22ed0:	69cb      	ldr	r3, [r1, #28]
   22ed2:	ba1b      	rev	r3, r3
   22ed4:	6003      	str	r3, [r0, #0]
   22ed6:	698b      	ldr	r3, [r1, #24]
   22ed8:	ba1b      	rev	r3, r3
   22eda:	6043      	str	r3, [r0, #4]
   22edc:	694b      	ldr	r3, [r1, #20]
   22ede:	ba1b      	rev	r3, r3
   22ee0:	6083      	str	r3, [r0, #8]
   22ee2:	690b      	ldr	r3, [r1, #16]
   22ee4:	ba1b      	rev	r3, r3
   22ee6:	60c3      	str	r3, [r0, #12]
   22ee8:	68cb      	ldr	r3, [r1, #12]
   22eea:	ba1b      	rev	r3, r3
   22eec:	6103      	str	r3, [r0, #16]
   22eee:	688b      	ldr	r3, [r1, #8]
   22ef0:	ba1b      	rev	r3, r3
   22ef2:	6143      	str	r3, [r0, #20]
   22ef4:	684b      	ldr	r3, [r1, #4]
   22ef6:	ba1b      	rev	r3, r3
   22ef8:	6183      	str	r3, [r0, #24]
   22efa:	680b      	ldr	r3, [r1, #0]
   22efc:	ba1b      	rev	r3, r3
   22efe:	61c3      	str	r3, [r0, #28]
   22f00:	4770      	bx	lr
   22f02:	bf00      	nop

00022f04 <ocrypto_mod_p256_inv>:
   22f04:	b570      	push	{r4, r5, r6, lr}
   22f06:	b098      	sub	sp, #96	; 0x60
   22f08:	460d      	mov	r5, r1
   22f0a:	4606      	mov	r6, r0
   22f0c:	a810      	add	r0, sp, #64	; 0x40
   22f0e:	f7dd fc3b 	bl	788 <ocrypto_mod_p256_sqr>
   22f12:	462a      	mov	r2, r5
   22f14:	a910      	add	r1, sp, #64	; 0x40
   22f16:	4668      	mov	r0, sp
   22f18:	f7dd fc1e 	bl	758 <ocrypto_mod_p256_mul>
   22f1c:	4669      	mov	r1, sp
   22f1e:	a810      	add	r0, sp, #64	; 0x40
   22f20:	f7dd fc32 	bl	788 <ocrypto_mod_p256_sqr>
   22f24:	a910      	add	r1, sp, #64	; 0x40
   22f26:	4608      	mov	r0, r1
   22f28:	f7dd fc2e 	bl	788 <ocrypto_mod_p256_sqr>
   22f2c:	466a      	mov	r2, sp
   22f2e:	a910      	add	r1, sp, #64	; 0x40
   22f30:	a808      	add	r0, sp, #32
   22f32:	f7dd fc11 	bl	758 <ocrypto_mod_p256_mul>
   22f36:	a908      	add	r1, sp, #32
   22f38:	a810      	add	r0, sp, #64	; 0x40
   22f3a:	f7dd fc25 	bl	788 <ocrypto_mod_p256_sqr>
   22f3e:	a910      	add	r1, sp, #64	; 0x40
   22f40:	4608      	mov	r0, r1
   22f42:	f7dd fc21 	bl	788 <ocrypto_mod_p256_sqr>
   22f46:	a910      	add	r1, sp, #64	; 0x40
   22f48:	4608      	mov	r0, r1
   22f4a:	f7dd fc1d 	bl	788 <ocrypto_mod_p256_sqr>
   22f4e:	a910      	add	r1, sp, #64	; 0x40
   22f50:	4608      	mov	r0, r1
   22f52:	f7dd fc19 	bl	788 <ocrypto_mod_p256_sqr>
   22f56:	a910      	add	r1, sp, #64	; 0x40
   22f58:	aa08      	add	r2, sp, #32
   22f5a:	4608      	mov	r0, r1
   22f5c:	f7dd fbfc 	bl	758 <ocrypto_mod_p256_mul>
   22f60:	a910      	add	r1, sp, #64	; 0x40
   22f62:	4608      	mov	r0, r1
   22f64:	f7dd fc10 	bl	788 <ocrypto_mod_p256_sqr>
   22f68:	a910      	add	r1, sp, #64	; 0x40
   22f6a:	4608      	mov	r0, r1
   22f6c:	f7dd fc0c 	bl	788 <ocrypto_mod_p256_sqr>
   22f70:	a910      	add	r1, sp, #64	; 0x40
   22f72:	466a      	mov	r2, sp
   22f74:	a808      	add	r0, sp, #32
   22f76:	f7dd fbef 	bl	758 <ocrypto_mod_p256_mul>
   22f7a:	2405      	movs	r4, #5
   22f7c:	a908      	add	r1, sp, #32
   22f7e:	a810      	add	r0, sp, #64	; 0x40
   22f80:	f7dd fc02 	bl	788 <ocrypto_mod_p256_sqr>
   22f84:	a910      	add	r1, sp, #64	; 0x40
   22f86:	4608      	mov	r0, r1
   22f88:	f7dd fbfe 	bl	788 <ocrypto_mod_p256_sqr>
   22f8c:	3c01      	subs	r4, #1
   22f8e:	a910      	add	r1, sp, #64	; 0x40
   22f90:	d1f5      	bne.n	22f7e <ocrypto_mod_p256_inv+0x7a>
   22f92:	aa08      	add	r2, sp, #32
   22f94:	4608      	mov	r0, r1
   22f96:	f7dd fbdf 	bl	758 <ocrypto_mod_p256_mul>
   22f9a:	2405      	movs	r4, #5
   22f9c:	a910      	add	r1, sp, #64	; 0x40
   22f9e:	4608      	mov	r0, r1
   22fa0:	f7dd fbf2 	bl	788 <ocrypto_mod_p256_sqr>
   22fa4:	a910      	add	r1, sp, #64	; 0x40
   22fa6:	4608      	mov	r0, r1
   22fa8:	f7dd fbee 	bl	788 <ocrypto_mod_p256_sqr>
   22fac:	3c01      	subs	r4, #1
   22fae:	d1f5      	bne.n	22f9c <ocrypto_mod_p256_inv+0x98>
   22fb0:	a910      	add	r1, sp, #64	; 0x40
   22fb2:	aa08      	add	r2, sp, #32
   22fb4:	4608      	mov	r0, r1
   22fb6:	f7dd fbcf 	bl	758 <ocrypto_mod_p256_mul>
   22fba:	a910      	add	r1, sp, #64	; 0x40
   22fbc:	a808      	add	r0, sp, #32
   22fbe:	f7dd fbe3 	bl	788 <ocrypto_mod_p256_sqr>
   22fc2:	a908      	add	r1, sp, #32
   22fc4:	4608      	mov	r0, r1
   22fc6:	f7dd fbdf 	bl	788 <ocrypto_mod_p256_sqr>
   22fca:	a908      	add	r1, sp, #32
   22fcc:	466a      	mov	r2, sp
   22fce:	4668      	mov	r0, sp
   22fd0:	f7dd fbc2 	bl	758 <ocrypto_mod_p256_mul>
   22fd4:	2410      	movs	r4, #16
   22fd6:	4669      	mov	r1, sp
   22fd8:	a810      	add	r0, sp, #64	; 0x40
   22fda:	f7dd fbd5 	bl	788 <ocrypto_mod_p256_sqr>
   22fde:	a910      	add	r1, sp, #64	; 0x40
   22fe0:	4608      	mov	r0, r1
   22fe2:	f7dd fbd1 	bl	788 <ocrypto_mod_p256_sqr>
   22fe6:	3c01      	subs	r4, #1
   22fe8:	a910      	add	r1, sp, #64	; 0x40
   22fea:	d1f5      	bne.n	22fd8 <ocrypto_mod_p256_inv+0xd4>
   22fec:	462a      	mov	r2, r5
   22fee:	4608      	mov	r0, r1
   22ff0:	f7dd fbb2 	bl	758 <ocrypto_mod_p256_mul>
   22ff4:	2440      	movs	r4, #64	; 0x40
   22ff6:	a910      	add	r1, sp, #64	; 0x40
   22ff8:	4608      	mov	r0, r1
   22ffa:	f7dd fbc5 	bl	788 <ocrypto_mod_p256_sqr>
   22ffe:	a910      	add	r1, sp, #64	; 0x40
   23000:	4608      	mov	r0, r1
   23002:	f7dd fbc1 	bl	788 <ocrypto_mod_p256_sqr>
   23006:	3c01      	subs	r4, #1
   23008:	d1f5      	bne.n	22ff6 <ocrypto_mod_p256_inv+0xf2>
   2300a:	a910      	add	r1, sp, #64	; 0x40
   2300c:	466a      	mov	r2, sp
   2300e:	4608      	mov	r0, r1
   23010:	f7dd fba2 	bl	758 <ocrypto_mod_p256_mul>
   23014:	2410      	movs	r4, #16
   23016:	a910      	add	r1, sp, #64	; 0x40
   23018:	4608      	mov	r0, r1
   2301a:	f7dd fbb5 	bl	788 <ocrypto_mod_p256_sqr>
   2301e:	a910      	add	r1, sp, #64	; 0x40
   23020:	4608      	mov	r0, r1
   23022:	f7dd fbb1 	bl	788 <ocrypto_mod_p256_sqr>
   23026:	3c01      	subs	r4, #1
   23028:	d1f5      	bne.n	23016 <ocrypto_mod_p256_inv+0x112>
   2302a:	a910      	add	r1, sp, #64	; 0x40
   2302c:	466a      	mov	r2, sp
   2302e:	4608      	mov	r0, r1
   23030:	f7dd fb92 	bl	758 <ocrypto_mod_p256_mul>
   23034:	2410      	movs	r4, #16
   23036:	a910      	add	r1, sp, #64	; 0x40
   23038:	4608      	mov	r0, r1
   2303a:	f7dd fba5 	bl	788 <ocrypto_mod_p256_sqr>
   2303e:	a910      	add	r1, sp, #64	; 0x40
   23040:	4608      	mov	r0, r1
   23042:	f7dd fba1 	bl	788 <ocrypto_mod_p256_sqr>
   23046:	3c01      	subs	r4, #1
   23048:	d1f5      	bne.n	23036 <ocrypto_mod_p256_inv+0x132>
   2304a:	a910      	add	r1, sp, #64	; 0x40
   2304c:	aa08      	add	r2, sp, #32
   2304e:	4608      	mov	r0, r1
   23050:	f7dd fb82 	bl	758 <ocrypto_mod_p256_mul>
   23054:	462a      	mov	r2, r5
   23056:	a910      	add	r1, sp, #64	; 0x40
   23058:	4630      	mov	r0, r6
   2305a:	f7dd fb7d 	bl	758 <ocrypto_mod_p256_mul>
   2305e:	b018      	add	sp, #96	; 0x60
   23060:	bd70      	pop	{r4, r5, r6, pc}
   23062:	bf00      	nop

00023064 <nrf_cc3xx_platform_init>:
   23064:	b510      	push	{r4, lr}
   23066:	4c0c      	ldr	r4, [pc, #48]	; (23098 <nrf_cc3xx_platform_init+0x34>)
   23068:	6823      	ldr	r3, [r4, #0]
   2306a:	b113      	cbz	r3, 23072 <nrf_cc3xx_platform_init+0xe>
   2306c:	4b0b      	ldr	r3, [pc, #44]	; (2309c <nrf_cc3xx_platform_init+0x38>)
   2306e:	681b      	ldr	r3, [r3, #0]
   23070:	b92b      	cbnz	r3, 2307e <nrf_cc3xx_platform_init+0x1a>
   23072:	f000 fe99 	bl	23da8 <CC_LibInit>
   23076:	b930      	cbnz	r0, 23086 <nrf_cc3xx_platform_init+0x22>
   23078:	4b08      	ldr	r3, [pc, #32]	; (2309c <nrf_cc3xx_platform_init+0x38>)
   2307a:	2201      	movs	r2, #1
   2307c:	601a      	str	r2, [r3, #0]
   2307e:	2301      	movs	r3, #1
   23080:	6023      	str	r3, [r4, #0]
   23082:	2000      	movs	r0, #0
   23084:	bd10      	pop	{r4, pc}
   23086:	3801      	subs	r0, #1
   23088:	2806      	cmp	r0, #6
   2308a:	d901      	bls.n	23090 <nrf_cc3xx_platform_init+0x2c>
   2308c:	4804      	ldr	r0, [pc, #16]	; (230a0 <nrf_cc3xx_platform_init+0x3c>)
   2308e:	bd10      	pop	{r4, pc}
   23090:	4b04      	ldr	r3, [pc, #16]	; (230a4 <nrf_cc3xx_platform_init+0x40>)
   23092:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   23096:	bd10      	pop	{r4, pc}
   23098:	20002abc 	.word	0x20002abc
   2309c:	20002ac0 	.word	0x20002ac0
   230a0:	ffff8ffe 	.word	0xffff8ffe
   230a4:	0002a348 	.word	0x0002a348

000230a8 <nrf_cc3xx_platform_abort>:
   230a8:	f3bf 8f4f 	dsb	sy
   230ac:	4905      	ldr	r1, [pc, #20]	; (230c4 <nrf_cc3xx_platform_abort+0x1c>)
   230ae:	4b06      	ldr	r3, [pc, #24]	; (230c8 <nrf_cc3xx_platform_abort+0x20>)
   230b0:	68ca      	ldr	r2, [r1, #12]
   230b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   230b6:	4313      	orrs	r3, r2
   230b8:	60cb      	str	r3, [r1, #12]
   230ba:	f3bf 8f4f 	dsb	sy
   230be:	bf00      	nop
   230c0:	e7fd      	b.n	230be <nrf_cc3xx_platform_abort+0x16>
   230c2:	bf00      	nop
   230c4:	e000ed00 	.word	0xe000ed00
   230c8:	05fa0004 	.word	0x05fa0004

000230cc <CC_PalAbort>:
   230cc:	b410      	push	{r4}
   230ce:	4b09      	ldr	r3, [pc, #36]	; (230f4 <CC_PalAbort+0x28>)
   230d0:	4909      	ldr	r1, [pc, #36]	; (230f8 <CC_PalAbort+0x2c>)
   230d2:	4c0a      	ldr	r4, [pc, #40]	; (230fc <CC_PalAbort+0x30>)
   230d4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   230d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   230dc:	6849      	ldr	r1, [r1, #4]
   230de:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   230e2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   230e6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   230ea:	2300      	movs	r3, #0
   230ec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   230f0:	bc10      	pop	{r4}
   230f2:	4708      	bx	r1
   230f4:	5002b000 	.word	0x5002b000
   230f8:	20000718 	.word	0x20000718
   230fc:	5002a000 	.word	0x5002a000

00023100 <nrf_cc3xx_platform_set_abort>:
   23100:	e9d0 1200 	ldrd	r1, r2, [r0]
   23104:	4b01      	ldr	r3, [pc, #4]	; (2310c <nrf_cc3xx_platform_set_abort+0xc>)
   23106:	e9c3 1200 	strd	r1, r2, [r3]
   2310a:	4770      	bx	lr
   2310c:	20000718 	.word	0x20000718

00023110 <nrf_cc3xx_platform_ctr_drbg_init>:
   23110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23114:	4c14      	ldr	r4, [pc, #80]	; (23168 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   23116:	4e15      	ldr	r6, [pc, #84]	; (2316c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   23118:	2800      	cmp	r0, #0
   2311a:	bf18      	it	ne
   2311c:	4604      	movne	r4, r0
   2311e:	b083      	sub	sp, #12
   23120:	6823      	ldr	r3, [r4, #0]
   23122:	42b3      	cmp	r3, r6
   23124:	d01c      	beq.n	23160 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   23126:	460d      	mov	r5, r1
   23128:	4620      	mov	r0, r4
   2312a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   2312e:	f104 0904 	add.w	r9, r4, #4
   23132:	4617      	mov	r7, r2
   23134:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   23138:	f000 f8e8 	bl	2330c <mbedtls_platform_zeroize>
   2313c:	4648      	mov	r0, r9
   2313e:	f000 fd1d 	bl	23b7c <cc_mbedtls_entropy_init>
   23142:	4640      	mov	r0, r8
   23144:	f000 fb4a 	bl	237dc <cc_mbedtls_ctr_drbg_init>
   23148:	4909      	ldr	r1, [pc, #36]	; (23170 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   2314a:	9700      	str	r7, [sp, #0]
   2314c:	462b      	mov	r3, r5
   2314e:	464a      	mov	r2, r9
   23150:	4640      	mov	r0, r8
   23152:	f000 fb59 	bl	23808 <cc_mbedtls_ctr_drbg_seed>
   23156:	b900      	cbnz	r0, 2315a <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   23158:	6026      	str	r6, [r4, #0]
   2315a:	b003      	add	sp, #12
   2315c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23160:	2000      	movs	r0, #0
   23162:	b003      	add	sp, #12
   23164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23168:	20002ac4 	.word	0x20002ac4
   2316c:	5ac9bca5 	.word	0x5ac9bca5
   23170:	00023c05 	.word	0x00023c05

00023174 <nrf_cc3xx_platform_ctr_drbg_get>:
   23174:	b570      	push	{r4, r5, r6, lr}
   23176:	4d0d      	ldr	r5, [pc, #52]	; (231ac <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   23178:	2800      	cmp	r0, #0
   2317a:	bf18      	it	ne
   2317c:	4605      	movne	r5, r0
   2317e:	461e      	mov	r6, r3
   23180:	6828      	ldr	r0, [r5, #0]
   23182:	4b0b      	ldr	r3, [pc, #44]	; (231b0 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   23184:	4298      	cmp	r0, r3
   23186:	b082      	sub	sp, #8
   23188:	d10d      	bne.n	231a6 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   2318a:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   2318e:	2500      	movs	r5, #0
   23190:	9500      	str	r5, [sp, #0]
   23192:	462b      	mov	r3, r5
   23194:	4614      	mov	r4, r2
   23196:	f000 fb85 	bl	238a4 <cc_mbedtls_ctr_drbg_random_with_add>
   2319a:	2800      	cmp	r0, #0
   2319c:	bf18      	it	ne
   2319e:	462c      	movne	r4, r5
   231a0:	6034      	str	r4, [r6, #0]
   231a2:	b002      	add	sp, #8
   231a4:	bd70      	pop	{r4, r5, r6, pc}
   231a6:	4803      	ldr	r0, [pc, #12]	; (231b4 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   231a8:	e7fb      	b.n	231a2 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   231aa:	bf00      	nop
   231ac:	20002ac4 	.word	0x20002ac4
   231b0:	5ac9bca5 	.word	0x5ac9bca5
   231b4:	ffff8fe8 	.word	0xffff8fe8

000231b8 <mutex_free>:
   231b8:	b510      	push	{r4, lr}
   231ba:	4604      	mov	r4, r0
   231bc:	b150      	cbz	r0, 231d4 <mutex_free+0x1c>
   231be:	6863      	ldr	r3, [r4, #4]
   231c0:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   231c4:	d005      	beq.n	231d2 <mutex_free+0x1a>
   231c6:	4a06      	ldr	r2, [pc, #24]	; (231e0 <mutex_free+0x28>)
   231c8:	4293      	cmp	r3, r2
   231ca:	d002      	beq.n	231d2 <mutex_free+0x1a>
   231cc:	2300      	movs	r3, #0
   231ce:	6023      	str	r3, [r4, #0]
   231d0:	6062      	str	r2, [r4, #4]
   231d2:	bd10      	pop	{r4, pc}
   231d4:	4b03      	ldr	r3, [pc, #12]	; (231e4 <mutex_free+0x2c>)
   231d6:	4804      	ldr	r0, [pc, #16]	; (231e8 <mutex_free+0x30>)
   231d8:	685b      	ldr	r3, [r3, #4]
   231da:	4798      	blx	r3
   231dc:	e7ef      	b.n	231be <mutex_free+0x6>
   231de:	bf00      	nop
   231e0:	a95c5f2c 	.word	0xa95c5f2c
   231e4:	20000718 	.word	0x20000718
   231e8:	0002a364 	.word	0x0002a364

000231ec <mutex_lock>:
   231ec:	b1c8      	cbz	r0, 23222 <mutex_lock+0x36>
   231ee:	6843      	ldr	r3, [r0, #4]
   231f0:	4a0d      	ldr	r2, [pc, #52]	; (23228 <mutex_lock+0x3c>)
   231f2:	4293      	cmp	r3, r2
   231f4:	d013      	beq.n	2321e <mutex_lock+0x32>
   231f6:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   231fa:	d00e      	beq.n	2321a <mutex_lock+0x2e>
   231fc:	2301      	movs	r3, #1
   231fe:	e850 2f00 	ldrex	r2, [r0]
   23202:	4619      	mov	r1, r3
   23204:	e840 1c00 	strex	ip, r1, [r0]
   23208:	f09c 0f00 	teq	ip, #0
   2320c:	d1f7      	bne.n	231fe <mutex_lock+0x12>
   2320e:	2a01      	cmp	r2, #1
   23210:	d0f5      	beq.n	231fe <mutex_lock+0x12>
   23212:	f3bf 8f5f 	dmb	sy
   23216:	2000      	movs	r0, #0
   23218:	4770      	bx	lr
   2321a:	4804      	ldr	r0, [pc, #16]	; (2322c <mutex_lock+0x40>)
   2321c:	4770      	bx	lr
   2321e:	4804      	ldr	r0, [pc, #16]	; (23230 <mutex_lock+0x44>)
   23220:	4770      	bx	lr
   23222:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   23226:	4770      	bx	lr
   23228:	a95c5f2c 	.word	0xa95c5f2c
   2322c:	ffff8fe9 	.word	0xffff8fe9
   23230:	ffff8fea 	.word	0xffff8fea

00023234 <mutex_unlock>:
   23234:	b180      	cbz	r0, 23258 <mutex_unlock+0x24>
   23236:	6843      	ldr	r3, [r0, #4]
   23238:	4a09      	ldr	r2, [pc, #36]	; (23260 <mutex_unlock+0x2c>)
   2323a:	4293      	cmp	r3, r2
   2323c:	d00a      	beq.n	23254 <mutex_unlock+0x20>
   2323e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   23242:	d005      	beq.n	23250 <mutex_unlock+0x1c>
   23244:	f3bf 8f5f 	dmb	sy
   23248:	2300      	movs	r3, #0
   2324a:	6003      	str	r3, [r0, #0]
   2324c:	4618      	mov	r0, r3
   2324e:	4770      	bx	lr
   23250:	4804      	ldr	r0, [pc, #16]	; (23264 <mutex_unlock+0x30>)
   23252:	4770      	bx	lr
   23254:	4804      	ldr	r0, [pc, #16]	; (23268 <mutex_unlock+0x34>)
   23256:	4770      	bx	lr
   23258:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   2325c:	4770      	bx	lr
   2325e:	bf00      	nop
   23260:	a95c5f2c 	.word	0xa95c5f2c
   23264:	ffff8fe9 	.word	0xffff8fe9
   23268:	ffff8fea 	.word	0xffff8fea

0002326c <mutex_init>:
   2326c:	b510      	push	{r4, lr}
   2326e:	4604      	mov	r4, r0
   23270:	b120      	cbz	r0, 2327c <mutex_init+0x10>
   23272:	4b04      	ldr	r3, [pc, #16]	; (23284 <mutex_init+0x18>)
   23274:	6063      	str	r3, [r4, #4]
   23276:	2200      	movs	r2, #0
   23278:	6022      	str	r2, [r4, #0]
   2327a:	bd10      	pop	{r4, pc}
   2327c:	4802      	ldr	r0, [pc, #8]	; (23288 <mutex_init+0x1c>)
   2327e:	f7ff ff25 	bl	230cc <CC_PalAbort>
   23282:	e7f6      	b.n	23272 <mutex_init+0x6>
   23284:	3a00003a 	.word	0x3a00003a
   23288:	0002a38c 	.word	0x0002a38c

0002328c <nrf_cc3xx_platform_set_mutexes>:
   2328c:	b570      	push	{r4, r5, r6, lr}
   2328e:	e9d0 2300 	ldrd	r2, r3, [r0]
   23292:	4c15      	ldr	r4, [pc, #84]	; (232e8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   23294:	4d15      	ldr	r5, [pc, #84]	; (232ec <nrf_cc3xx_platform_set_mutexes+0x60>)
   23296:	6063      	str	r3, [r4, #4]
   23298:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   2329c:	e9c4 3002 	strd	r3, r0, [r4, #8]
   232a0:	6022      	str	r2, [r4, #0]
   232a2:	4b13      	ldr	r3, [pc, #76]	; (232f0 <nrf_cc3xx_platform_set_mutexes+0x64>)
   232a4:	6808      	ldr	r0, [r1, #0]
   232a6:	6018      	str	r0, [r3, #0]
   232a8:	6848      	ldr	r0, [r1, #4]
   232aa:	6058      	str	r0, [r3, #4]
   232ac:	6888      	ldr	r0, [r1, #8]
   232ae:	6098      	str	r0, [r3, #8]
   232b0:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   232b4:	60d8      	str	r0, [r3, #12]
   232b6:	6119      	str	r1, [r3, #16]
   232b8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   232bc:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   232c0:	d010      	beq.n	232e4 <nrf_cc3xx_platform_set_mutexes+0x58>
   232c2:	490c      	ldr	r1, [pc, #48]	; (232f4 <nrf_cc3xx_platform_set_mutexes+0x68>)
   232c4:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   232c8:	2300      	movs	r3, #0
   232ca:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   232ce:	f505 708a 	add.w	r0, r5, #276	; 0x114
   232d2:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   232d6:	4790      	blx	r2
   232d8:	6823      	ldr	r3, [r4, #0]
   232da:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   232de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   232e2:	4718      	bx	r3
   232e4:	bd70      	pop	{r4, r5, r6, pc}
   232e6:	bf00      	nop
   232e8:	20000728 	.word	0x20000728
   232ec:	20002ac4 	.word	0x20002ac4
   232f0:	20000738 	.word	0x20000738
   232f4:	a95c5f2c 	.word	0xa95c5f2c

000232f8 <mbedtls_zeroize_internal>:
   232f8:	b138      	cbz	r0, 2330a <mbedtls_zeroize_internal+0x12>
   232fa:	b131      	cbz	r1, 2330a <mbedtls_zeroize_internal+0x12>
   232fc:	4401      	add	r1, r0
   232fe:	2200      	movs	r2, #0
   23300:	4603      	mov	r3, r0
   23302:	3001      	adds	r0, #1
   23304:	4281      	cmp	r1, r0
   23306:	701a      	strb	r2, [r3, #0]
   23308:	d1fa      	bne.n	23300 <mbedtls_zeroize_internal+0x8>
   2330a:	4770      	bx	lr

0002330c <mbedtls_platform_zeroize>:
   2330c:	b138      	cbz	r0, 2331e <mbedtls_platform_zeroize+0x12>
   2330e:	b131      	cbz	r1, 2331e <mbedtls_platform_zeroize+0x12>
   23310:	4401      	add	r1, r0
   23312:	2200      	movs	r2, #0
   23314:	4603      	mov	r3, r0
   23316:	3001      	adds	r0, #1
   23318:	4288      	cmp	r0, r1
   2331a:	701a      	strb	r2, [r3, #0]
   2331c:	d1fa      	bne.n	23314 <mbedtls_platform_zeroize+0x8>
   2331e:	4770      	bx	lr

00023320 <block_cipher_df>:
   23320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23324:	b0b7      	sub	sp, #220	; 0xdc
   23326:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   2332a:	9005      	str	r0, [sp, #20]
   2332c:	f200 8147 	bhi.w	235be <block_cipher_df+0x29e>
   23330:	4614      	mov	r4, r2
   23332:	460d      	mov	r5, r1
   23334:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   23338:	2100      	movs	r1, #0
   2333a:	48a2      	ldr	r0, [pc, #648]	; (235c4 <block_cipher_df+0x2a4>)
   2333c:	f003 fca9 	bl	26c92 <memset>
   23340:	a819      	add	r0, sp, #100	; 0x64
   23342:	f001 f9cf 	bl	246e4 <cc_mbedtls_aes_init>
   23346:	489f      	ldr	r0, [pc, #636]	; (235c4 <block_cipher_df+0x2a4>)
   23348:	2300      	movs	r3, #0
   2334a:	8203      	strh	r3, [r0, #16]
   2334c:	ba63      	rev16	r3, r4
   2334e:	8243      	strh	r3, [r0, #18]
   23350:	2320      	movs	r3, #32
   23352:	4629      	mov	r1, r5
   23354:	75c3      	strb	r3, [r0, #23]
   23356:	4605      	mov	r5, r0
   23358:	4622      	mov	r2, r4
   2335a:	3018      	adds	r0, #24
   2335c:	f003 fc8e 	bl	26c7c <memcpy>
   23360:	462b      	mov	r3, r5
   23362:	4423      	add	r3, r4
   23364:	2280      	movs	r2, #128	; 0x80
   23366:	761a      	strb	r2, [r3, #24]
   23368:	4b97      	ldr	r3, [pc, #604]	; (235c8 <block_cipher_df+0x2a8>)
   2336a:	930d      	str	r3, [sp, #52]	; 0x34
   2336c:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   23370:	930e      	str	r3, [sp, #56]	; 0x38
   23372:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   23376:	930f      	str	r3, [sp, #60]	; 0x3c
   23378:	a90d      	add	r1, sp, #52	; 0x34
   2337a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   2337e:	a819      	add	r0, sp, #100	; 0x64
   23380:	9310      	str	r3, [sp, #64]	; 0x40
   23382:	f001 f9c5 	bl	24710 <cc_mbedtls_aes_setkey_enc>
   23386:	4605      	mov	r5, r0
   23388:	2800      	cmp	r0, #0
   2338a:	f040 80f4 	bne.w	23576 <block_cipher_df+0x256>
   2338e:	f104 0319 	add.w	r3, r4, #25
   23392:	9306      	str	r3, [sp, #24]
   23394:	f10d 0820 	add.w	r8, sp, #32
   23398:	ab11      	add	r3, sp, #68	; 0x44
   2339a:	9304      	str	r3, [sp, #16]
   2339c:	9307      	str	r3, [sp, #28]
   2339e:	46c1      	mov	r9, r8
   233a0:	2210      	movs	r2, #16
   233a2:	2100      	movs	r1, #0
   233a4:	4648      	mov	r0, r9
   233a6:	f003 fc74 	bl	26c92 <memset>
   233aa:	f8df a220 	ldr.w	sl, [pc, #544]	; 235cc <block_cipher_df+0x2ac>
   233ae:	9b06      	ldr	r3, [sp, #24]
   233b0:	9300      	str	r3, [sp, #0]
   233b2:	f8cd 900c 	str.w	r9, [sp, #12]
   233b6:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   233ba:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   233be:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   233c2:	f89d 5020 	ldrb.w	r5, [sp, #32]
   233c6:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   233ca:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   233ce:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   233d2:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   233d6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   233da:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   233de:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   233e2:	406a      	eors	r2, r5
   233e4:	ea8e 0e00 	eor.w	lr, lr, r0
   233e8:	9d00      	ldr	r5, [sp, #0]
   233ea:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   233ee:	9202      	str	r2, [sp, #8]
   233f0:	ea8c 0c03 	eor.w	ip, ip, r3
   233f4:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   233f8:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   233fc:	2d10      	cmp	r5, #16
   233fe:	ea80 0003 	eor.w	r0, r0, r3
   23402:	462b      	mov	r3, r5
   23404:	bf8c      	ite	hi
   23406:	3b10      	subhi	r3, #16
   23408:	1b6b      	subls	r3, r5, r5
   2340a:	9300      	str	r3, [sp, #0]
   2340c:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   23410:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   23414:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   23418:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   2341c:	4061      	eors	r1, r4
   2341e:	405f      	eors	r7, r3
   23420:	2400      	movs	r4, #0
   23422:	406a      	eors	r2, r5
   23424:	ea8b 0b06 	eor.w	fp, fp, r6
   23428:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   2342c:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   23430:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   23434:	9601      	str	r6, [sp, #4]
   23436:	4626      	mov	r6, r4
   23438:	406b      	eors	r3, r5
   2343a:	f36b 0607 	bfi	r6, fp, #0, #8
   2343e:	4625      	mov	r5, r4
   23440:	f367 260f 	bfi	r6, r7, #8, #8
   23444:	462f      	mov	r7, r5
   23446:	f361 0707 	bfi	r7, r1, #0, #8
   2344a:	9902      	ldr	r1, [sp, #8]
   2344c:	f361 0507 	bfi	r5, r1, #0, #8
   23450:	f362 250f 	bfi	r5, r2, #8, #8
   23454:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   23458:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   2345c:	f363 270f 	bfi	r7, r3, #8, #8
   23460:	ea82 0909 	eor.w	r9, r2, r9
   23464:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   23468:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   2346c:	ea83 0808 	eor.w	r8, r3, r8
   23470:	404a      	eors	r2, r1
   23472:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   23476:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   2347a:	f36e 0407 	bfi	r4, lr, #0, #8
   2347e:	404b      	eors	r3, r1
   23480:	f368 4717 	bfi	r7, r8, #16, #8
   23484:	f36c 240f 	bfi	r4, ip, #8, #8
   23488:	f363 671f 	bfi	r7, r3, #24, #8
   2348c:	9b03      	ldr	r3, [sp, #12]
   2348e:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   23492:	f8dd e004 	ldr.w	lr, [sp, #4]
   23496:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   2349a:	ea8c 0c0e 	eor.w	ip, ip, lr
   2349e:	f36c 4617 	bfi	r6, ip, #16, #8
   234a2:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   234a6:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   234aa:	ea8c 0c08 	eor.w	ip, ip, r8
   234ae:	f36c 661f 	bfi	r6, ip, #24, #8
   234b2:	f369 4517 	bfi	r5, r9, #16, #8
   234b6:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   234ba:	960b      	str	r6, [sp, #44]	; 0x2c
   234bc:	f362 651f 	bfi	r5, r2, #24, #8
   234c0:	f360 4417 	bfi	r4, r0, #16, #8
   234c4:	9508      	str	r5, [sp, #32]
   234c6:	ea8c 050e 	eor.w	r5, ip, lr
   234ca:	f365 641f 	bfi	r4, r5, #24, #8
   234ce:	461a      	mov	r2, r3
   234d0:	2101      	movs	r1, #1
   234d2:	a819      	add	r0, sp, #100	; 0x64
   234d4:	f10a 0a10 	add.w	sl, sl, #16
   234d8:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   234dc:	f001 f932 	bl	24744 <cc_mbedtls_aes_crypt_ecb>
   234e0:	2800      	cmp	r0, #0
   234e2:	d168      	bne.n	235b6 <block_cipher_df+0x296>
   234e4:	9b00      	ldr	r3, [sp, #0]
   234e6:	2b00      	cmp	r3, #0
   234e8:	f47f af65 	bne.w	233b6 <block_cipher_df+0x96>
   234ec:	9c07      	ldr	r4, [sp, #28]
   234ee:	f8dd 900c 	ldr.w	r9, [sp, #12]
   234f2:	4620      	mov	r0, r4
   234f4:	2210      	movs	r2, #16
   234f6:	3410      	adds	r4, #16
   234f8:	4649      	mov	r1, r9
   234fa:	9407      	str	r4, [sp, #28]
   234fc:	f003 fbbe 	bl	26c7c <memcpy>
   23500:	4a30      	ldr	r2, [pc, #192]	; (235c4 <block_cipher_df+0x2a4>)
   23502:	78d3      	ldrb	r3, [r2, #3]
   23504:	3301      	adds	r3, #1
   23506:	70d3      	strb	r3, [r2, #3]
   23508:	ab19      	add	r3, sp, #100	; 0x64
   2350a:	429c      	cmp	r4, r3
   2350c:	f47f af48 	bne.w	233a0 <block_cipher_df+0x80>
   23510:	9904      	ldr	r1, [sp, #16]
   23512:	2280      	movs	r2, #128	; 0x80
   23514:	4618      	mov	r0, r3
   23516:	f001 f8fb 	bl	24710 <cc_mbedtls_aes_setkey_enc>
   2351a:	46c8      	mov	r8, r9
   2351c:	4605      	mov	r5, r0
   2351e:	bb70      	cbnz	r0, 2357e <block_cipher_df+0x25e>
   23520:	9c05      	ldr	r4, [sp, #20]
   23522:	f104 0620 	add.w	r6, r4, #32
   23526:	ab15      	add	r3, sp, #84	; 0x54
   23528:	461a      	mov	r2, r3
   2352a:	2101      	movs	r1, #1
   2352c:	a819      	add	r0, sp, #100	; 0x64
   2352e:	f001 f909 	bl	24744 <cc_mbedtls_aes_crypt_ecb>
   23532:	2210      	movs	r2, #16
   23534:	4605      	mov	r5, r0
   23536:	bb10      	cbnz	r0, 2357e <block_cipher_df+0x25e>
   23538:	4620      	mov	r0, r4
   2353a:	a915      	add	r1, sp, #84	; 0x54
   2353c:	3410      	adds	r4, #16
   2353e:	f003 fb9d 	bl	26c7c <memcpy>
   23542:	42b4      	cmp	r4, r6
   23544:	d1ef      	bne.n	23526 <block_cipher_df+0x206>
   23546:	a819      	add	r0, sp, #100	; 0x64
   23548:	f001 f8dc 	bl	24704 <cc_mbedtls_aes_free>
   2354c:	481d      	ldr	r0, [pc, #116]	; (235c4 <block_cipher_df+0x2a4>)
   2354e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   23552:	f7ff fedb 	bl	2330c <mbedtls_platform_zeroize>
   23556:	9804      	ldr	r0, [sp, #16]
   23558:	2120      	movs	r1, #32
   2355a:	f7ff fed7 	bl	2330c <mbedtls_platform_zeroize>
   2355e:	a80d      	add	r0, sp, #52	; 0x34
   23560:	2110      	movs	r1, #16
   23562:	f7ff fed3 	bl	2330c <mbedtls_platform_zeroize>
   23566:	4640      	mov	r0, r8
   23568:	2110      	movs	r1, #16
   2356a:	f7ff fecf 	bl	2330c <mbedtls_platform_zeroize>
   2356e:	4628      	mov	r0, r5
   23570:	b037      	add	sp, #220	; 0xdc
   23572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23576:	ab11      	add	r3, sp, #68	; 0x44
   23578:	9304      	str	r3, [sp, #16]
   2357a:	f10d 0820 	add.w	r8, sp, #32
   2357e:	a819      	add	r0, sp, #100	; 0x64
   23580:	f001 f8c0 	bl	24704 <cc_mbedtls_aes_free>
   23584:	480f      	ldr	r0, [pc, #60]	; (235c4 <block_cipher_df+0x2a4>)
   23586:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   2358a:	f7ff febf 	bl	2330c <mbedtls_platform_zeroize>
   2358e:	9804      	ldr	r0, [sp, #16]
   23590:	2120      	movs	r1, #32
   23592:	f7ff febb 	bl	2330c <mbedtls_platform_zeroize>
   23596:	a80d      	add	r0, sp, #52	; 0x34
   23598:	2110      	movs	r1, #16
   2359a:	f7ff feb7 	bl	2330c <mbedtls_platform_zeroize>
   2359e:	4640      	mov	r0, r8
   235a0:	2110      	movs	r1, #16
   235a2:	f7ff feb3 	bl	2330c <mbedtls_platform_zeroize>
   235a6:	9805      	ldr	r0, [sp, #20]
   235a8:	2120      	movs	r1, #32
   235aa:	f7ff feaf 	bl	2330c <mbedtls_platform_zeroize>
   235ae:	4628      	mov	r0, r5
   235b0:	b037      	add	sp, #220	; 0xdc
   235b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   235b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
   235ba:	4605      	mov	r5, r0
   235bc:	e7df      	b.n	2357e <block_cipher_df+0x25e>
   235be:	f06f 0537 	mvn.w	r5, #55	; 0x37
   235c2:	e7f4      	b.n	235ae <block_cipher_df+0x28e>
   235c4:	20002c94 	.word	0x20002c94
   235c8:	03020100 	.word	0x03020100
   235cc:	20002ca4 	.word	0x20002ca4

000235d0 <ctr_drbg_update_internal>:
   235d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   235d4:	b088      	sub	sp, #32
   235d6:	4604      	mov	r4, r0
   235d8:	460d      	mov	r5, r1
   235da:	2220      	movs	r2, #32
   235dc:	2100      	movs	r1, #0
   235de:	4668      	mov	r0, sp
   235e0:	f003 fb57 	bl	26c92 <memset>
   235e4:	f104 0620 	add.w	r6, r4, #32
   235e8:	466f      	mov	r7, sp
   235ea:	7be2      	ldrb	r2, [r4, #15]
   235ec:	3201      	adds	r2, #1
   235ee:	b2d2      	uxtb	r2, r2
   235f0:	73e2      	strb	r2, [r4, #15]
   235f2:	2a00      	cmp	r2, #0
   235f4:	d14d      	bne.n	23692 <ctr_drbg_update_internal+0xc2>
   235f6:	7ba2      	ldrb	r2, [r4, #14]
   235f8:	3201      	adds	r2, #1
   235fa:	b2d2      	uxtb	r2, r2
   235fc:	73a2      	strb	r2, [r4, #14]
   235fe:	2a00      	cmp	r2, #0
   23600:	d147      	bne.n	23692 <ctr_drbg_update_internal+0xc2>
   23602:	7b63      	ldrb	r3, [r4, #13]
   23604:	3301      	adds	r3, #1
   23606:	b2db      	uxtb	r3, r3
   23608:	7363      	strb	r3, [r4, #13]
   2360a:	2b00      	cmp	r3, #0
   2360c:	d141      	bne.n	23692 <ctr_drbg_update_internal+0xc2>
   2360e:	7b23      	ldrb	r3, [r4, #12]
   23610:	3301      	adds	r3, #1
   23612:	b2db      	uxtb	r3, r3
   23614:	7323      	strb	r3, [r4, #12]
   23616:	2b00      	cmp	r3, #0
   23618:	d13b      	bne.n	23692 <ctr_drbg_update_internal+0xc2>
   2361a:	7ae3      	ldrb	r3, [r4, #11]
   2361c:	3301      	adds	r3, #1
   2361e:	b2db      	uxtb	r3, r3
   23620:	72e3      	strb	r3, [r4, #11]
   23622:	2b00      	cmp	r3, #0
   23624:	d135      	bne.n	23692 <ctr_drbg_update_internal+0xc2>
   23626:	7aa3      	ldrb	r3, [r4, #10]
   23628:	3301      	adds	r3, #1
   2362a:	b2db      	uxtb	r3, r3
   2362c:	72a3      	strb	r3, [r4, #10]
   2362e:	2b00      	cmp	r3, #0
   23630:	d12f      	bne.n	23692 <ctr_drbg_update_internal+0xc2>
   23632:	7a63      	ldrb	r3, [r4, #9]
   23634:	3301      	adds	r3, #1
   23636:	b2db      	uxtb	r3, r3
   23638:	7263      	strb	r3, [r4, #9]
   2363a:	bb53      	cbnz	r3, 23692 <ctr_drbg_update_internal+0xc2>
   2363c:	7a23      	ldrb	r3, [r4, #8]
   2363e:	3301      	adds	r3, #1
   23640:	b2db      	uxtb	r3, r3
   23642:	7223      	strb	r3, [r4, #8]
   23644:	bb2b      	cbnz	r3, 23692 <ctr_drbg_update_internal+0xc2>
   23646:	79e3      	ldrb	r3, [r4, #7]
   23648:	3301      	adds	r3, #1
   2364a:	b2db      	uxtb	r3, r3
   2364c:	71e3      	strb	r3, [r4, #7]
   2364e:	bb03      	cbnz	r3, 23692 <ctr_drbg_update_internal+0xc2>
   23650:	79a3      	ldrb	r3, [r4, #6]
   23652:	3301      	adds	r3, #1
   23654:	b2db      	uxtb	r3, r3
   23656:	71a3      	strb	r3, [r4, #6]
   23658:	b9db      	cbnz	r3, 23692 <ctr_drbg_update_internal+0xc2>
   2365a:	7963      	ldrb	r3, [r4, #5]
   2365c:	3301      	adds	r3, #1
   2365e:	b2db      	uxtb	r3, r3
   23660:	7163      	strb	r3, [r4, #5]
   23662:	b9b3      	cbnz	r3, 23692 <ctr_drbg_update_internal+0xc2>
   23664:	7923      	ldrb	r3, [r4, #4]
   23666:	3301      	adds	r3, #1
   23668:	b2db      	uxtb	r3, r3
   2366a:	7123      	strb	r3, [r4, #4]
   2366c:	b98b      	cbnz	r3, 23692 <ctr_drbg_update_internal+0xc2>
   2366e:	78e3      	ldrb	r3, [r4, #3]
   23670:	3301      	adds	r3, #1
   23672:	b2db      	uxtb	r3, r3
   23674:	70e3      	strb	r3, [r4, #3]
   23676:	b963      	cbnz	r3, 23692 <ctr_drbg_update_internal+0xc2>
   23678:	78a3      	ldrb	r3, [r4, #2]
   2367a:	3301      	adds	r3, #1
   2367c:	b2db      	uxtb	r3, r3
   2367e:	70a3      	strb	r3, [r4, #2]
   23680:	b93b      	cbnz	r3, 23692 <ctr_drbg_update_internal+0xc2>
   23682:	7863      	ldrb	r3, [r4, #1]
   23684:	3301      	adds	r3, #1
   23686:	b2db      	uxtb	r3, r3
   23688:	7063      	strb	r3, [r4, #1]
   2368a:	b913      	cbnz	r3, 23692 <ctr_drbg_update_internal+0xc2>
   2368c:	7823      	ldrb	r3, [r4, #0]
   2368e:	3301      	adds	r3, #1
   23690:	7023      	strb	r3, [r4, #0]
   23692:	463b      	mov	r3, r7
   23694:	4622      	mov	r2, r4
   23696:	2101      	movs	r1, #1
   23698:	4630      	mov	r0, r6
   2369a:	f001 f853 	bl	24744 <cc_mbedtls_aes_crypt_ecb>
   2369e:	4680      	mov	r8, r0
   236a0:	bb50      	cbnz	r0, 236f8 <ctr_drbg_update_internal+0x128>
   236a2:	3710      	adds	r7, #16
   236a4:	ab08      	add	r3, sp, #32
   236a6:	429f      	cmp	r7, r3
   236a8:	d19f      	bne.n	235ea <ctr_drbg_update_internal+0x1a>
   236aa:	9a00      	ldr	r2, [sp, #0]
   236ac:	682b      	ldr	r3, [r5, #0]
   236ae:	9906      	ldr	r1, [sp, #24]
   236b0:	4053      	eors	r3, r2
   236b2:	9300      	str	r3, [sp, #0]
   236b4:	9a01      	ldr	r2, [sp, #4]
   236b6:	686b      	ldr	r3, [r5, #4]
   236b8:	4053      	eors	r3, r2
   236ba:	9301      	str	r3, [sp, #4]
   236bc:	9a02      	ldr	r2, [sp, #8]
   236be:	68ab      	ldr	r3, [r5, #8]
   236c0:	4053      	eors	r3, r2
   236c2:	9302      	str	r3, [sp, #8]
   236c4:	9a03      	ldr	r2, [sp, #12]
   236c6:	68eb      	ldr	r3, [r5, #12]
   236c8:	4053      	eors	r3, r2
   236ca:	9303      	str	r3, [sp, #12]
   236cc:	9a04      	ldr	r2, [sp, #16]
   236ce:	692b      	ldr	r3, [r5, #16]
   236d0:	4053      	eors	r3, r2
   236d2:	9304      	str	r3, [sp, #16]
   236d4:	9a05      	ldr	r2, [sp, #20]
   236d6:	696b      	ldr	r3, [r5, #20]
   236d8:	4053      	eors	r3, r2
   236da:	69aa      	ldr	r2, [r5, #24]
   236dc:	9305      	str	r3, [sp, #20]
   236de:	404a      	eors	r2, r1
   236e0:	69eb      	ldr	r3, [r5, #28]
   236e2:	9206      	str	r2, [sp, #24]
   236e4:	9a07      	ldr	r2, [sp, #28]
   236e6:	4630      	mov	r0, r6
   236e8:	4053      	eors	r3, r2
   236ea:	4669      	mov	r1, sp
   236ec:	2280      	movs	r2, #128	; 0x80
   236ee:	9307      	str	r3, [sp, #28]
   236f0:	f001 f80e 	bl	24710 <cc_mbedtls_aes_setkey_enc>
   236f4:	4680      	mov	r8, r0
   236f6:	b138      	cbz	r0, 23708 <ctr_drbg_update_internal+0x138>
   236f8:	4668      	mov	r0, sp
   236fa:	2120      	movs	r1, #32
   236fc:	f7ff fe06 	bl	2330c <mbedtls_platform_zeroize>
   23700:	4640      	mov	r0, r8
   23702:	b008      	add	sp, #32
   23704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23708:	2210      	movs	r2, #16
   2370a:	eb0d 0102 	add.w	r1, sp, r2
   2370e:	4620      	mov	r0, r4
   23710:	f003 fab4 	bl	26c7c <memcpy>
   23714:	e7f0      	b.n	236f8 <ctr_drbg_update_internal+0x128>
   23716:	bf00      	nop

00023718 <mbedtls_ctr_drbg_reseed_internal>:
   23718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2371c:	4604      	mov	r4, r0
   2371e:	6980      	ldr	r0, [r0, #24]
   23720:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   23724:	d852      	bhi.n	237cc <mbedtls_ctr_drbg_reseed_internal+0xb4>
   23726:	461d      	mov	r5, r3
   23728:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   2372c:	42ab      	cmp	r3, r5
   2372e:	d34d      	bcc.n	237cc <mbedtls_ctr_drbg_reseed_internal+0xb4>
   23730:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   23734:	1a18      	subs	r0, r3, r0
   23736:	4290      	cmp	r0, r2
   23738:	4616      	mov	r6, r2
   2373a:	d347      	bcc.n	237cc <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2373c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 237d8 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   23740:	f44f 72c0 	mov.w	r2, #384	; 0x180
   23744:	460f      	mov	r7, r1
   23746:	4648      	mov	r0, r9
   23748:	2100      	movs	r1, #0
   2374a:	f003 faa2 	bl	26c92 <memset>
   2374e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   23752:	69a2      	ldr	r2, [r4, #24]
   23754:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   23758:	4649      	mov	r1, r9
   2375a:	4798      	blx	r3
   2375c:	2800      	cmp	r0, #0
   2375e:	d138      	bne.n	237d2 <mbedtls_ctr_drbg_reseed_internal+0xba>
   23760:	f8d4 8018 	ldr.w	r8, [r4, #24]
   23764:	b13d      	cbz	r5, 23776 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   23766:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   2376a:	462a      	mov	r2, r5
   2376c:	eb09 0108 	add.w	r1, r9, r8
   23770:	4798      	blx	r3
   23772:	bb70      	cbnz	r0, 237d2 <mbedtls_ctr_drbg_reseed_internal+0xba>
   23774:	44a8      	add	r8, r5
   23776:	b107      	cbz	r7, 2377a <mbedtls_ctr_drbg_reseed_internal+0x62>
   23778:	b9c6      	cbnz	r6, 237ac <mbedtls_ctr_drbg_reseed_internal+0x94>
   2377a:	4917      	ldr	r1, [pc, #92]	; (237d8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2377c:	4642      	mov	r2, r8
   2377e:	4608      	mov	r0, r1
   23780:	f7ff fdce 	bl	23320 <block_cipher_df>
   23784:	4605      	mov	r5, r0
   23786:	b138      	cbz	r0, 23798 <mbedtls_ctr_drbg_reseed_internal+0x80>
   23788:	4813      	ldr	r0, [pc, #76]	; (237d8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2378a:	f44f 71c0 	mov.w	r1, #384	; 0x180
   2378e:	f7ff fdbd 	bl	2330c <mbedtls_platform_zeroize>
   23792:	4628      	mov	r0, r5
   23794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23798:	490f      	ldr	r1, [pc, #60]	; (237d8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2379a:	4620      	mov	r0, r4
   2379c:	f7ff ff18 	bl	235d0 <ctr_drbg_update_internal>
   237a0:	4605      	mov	r5, r0
   237a2:	2800      	cmp	r0, #0
   237a4:	d1f0      	bne.n	23788 <mbedtls_ctr_drbg_reseed_internal+0x70>
   237a6:	2301      	movs	r3, #1
   237a8:	6123      	str	r3, [r4, #16]
   237aa:	e7ed      	b.n	23788 <mbedtls_ctr_drbg_reseed_internal+0x70>
   237ac:	eb09 0008 	add.w	r0, r9, r8
   237b0:	4639      	mov	r1, r7
   237b2:	4632      	mov	r2, r6
   237b4:	f003 fa62 	bl	26c7c <memcpy>
   237b8:	4907      	ldr	r1, [pc, #28]	; (237d8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   237ba:	44b0      	add	r8, r6
   237bc:	4642      	mov	r2, r8
   237be:	4608      	mov	r0, r1
   237c0:	f7ff fdae 	bl	23320 <block_cipher_df>
   237c4:	4605      	mov	r5, r0
   237c6:	2800      	cmp	r0, #0
   237c8:	d1de      	bne.n	23788 <mbedtls_ctr_drbg_reseed_internal+0x70>
   237ca:	e7e5      	b.n	23798 <mbedtls_ctr_drbg_reseed_internal+0x80>
   237cc:	f06f 0537 	mvn.w	r5, #55	; 0x37
   237d0:	e7df      	b.n	23792 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   237d2:	f06f 0533 	mvn.w	r5, #51	; 0x33
   237d6:	e7dc      	b.n	23792 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   237d8:	20002e34 	.word	0x20002e34

000237dc <cc_mbedtls_ctr_drbg_init>:
   237dc:	b510      	push	{r4, lr}
   237de:	22a4      	movs	r2, #164	; 0xa4
   237e0:	4604      	mov	r4, r0
   237e2:	2100      	movs	r1, #0
   237e4:	f003 fa55 	bl	26c92 <memset>
   237e8:	4b06      	ldr	r3, [pc, #24]	; (23804 <cc_mbedtls_ctr_drbg_init+0x28>)
   237ea:	f04f 31ff 	mov.w	r1, #4294967295
   237ee:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   237f2:	6121      	str	r1, [r4, #16]
   237f4:	61e2      	str	r2, [r4, #28]
   237f6:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   237fa:	681b      	ldr	r3, [r3, #0]
   237fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23800:	4718      	bx	r3
   23802:	bf00      	nop
   23804:	2000077c 	.word	0x2000077c

00023808 <cc_mbedtls_ctr_drbg_seed>:
   23808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2380c:	b085      	sub	sp, #20
   2380e:	4605      	mov	r5, r0
   23810:	460f      	mov	r7, r1
   23812:	4616      	mov	r6, r2
   23814:	2100      	movs	r1, #0
   23816:	2210      	movs	r2, #16
   23818:	4668      	mov	r0, sp
   2381a:	4699      	mov	r9, r3
   2381c:	f003 fa39 	bl	26c92 <memset>
   23820:	4b1e      	ldr	r3, [pc, #120]	; (2389c <cc_mbedtls_ctr_drbg_seed+0x94>)
   23822:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   23826:	681b      	ldr	r3, [r3, #0]
   23828:	4640      	mov	r0, r8
   2382a:	4798      	blx	r3
   2382c:	b120      	cbz	r0, 23838 <cc_mbedtls_ctr_drbg_seed+0x30>
   2382e:	4604      	mov	r4, r0
   23830:	4620      	mov	r0, r4
   23832:	b005      	add	sp, #20
   23834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23838:	f105 0420 	add.w	r4, r5, #32
   2383c:	4620      	mov	r0, r4
   2383e:	f000 ff51 	bl	246e4 <cc_mbedtls_aes_init>
   23842:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   23846:	69ae      	ldr	r6, [r5, #24]
   23848:	692b      	ldr	r3, [r5, #16]
   2384a:	b9ee      	cbnz	r6, 23888 <cc_mbedtls_ctr_drbg_seed+0x80>
   2384c:	2220      	movs	r2, #32
   2384e:	2b00      	cmp	r3, #0
   23850:	61aa      	str	r2, [r5, #24]
   23852:	db20      	blt.n	23896 <cc_mbedtls_ctr_drbg_seed+0x8e>
   23854:	461e      	mov	r6, r3
   23856:	4620      	mov	r0, r4
   23858:	4669      	mov	r1, sp
   2385a:	2280      	movs	r2, #128	; 0x80
   2385c:	f000 ff58 	bl	24710 <cc_mbedtls_aes_setkey_enc>
   23860:	4604      	mov	r4, r0
   23862:	b930      	cbnz	r0, 23872 <cc_mbedtls_ctr_drbg_seed+0x6a>
   23864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23866:	4633      	mov	r3, r6
   23868:	4649      	mov	r1, r9
   2386a:	4628      	mov	r0, r5
   2386c:	f7ff ff54 	bl	23718 <mbedtls_ctr_drbg_reseed_internal>
   23870:	4604      	mov	r4, r0
   23872:	4b0b      	ldr	r3, [pc, #44]	; (238a0 <cc_mbedtls_ctr_drbg_seed+0x98>)
   23874:	4640      	mov	r0, r8
   23876:	681b      	ldr	r3, [r3, #0]
   23878:	4798      	blx	r3
   2387a:	2800      	cmp	r0, #0
   2387c:	bf18      	it	ne
   2387e:	4604      	movne	r4, r0
   23880:	4620      	mov	r0, r4
   23882:	b005      	add	sp, #20
   23884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23888:	2b00      	cmp	r3, #0
   2388a:	dae3      	bge.n	23854 <cc_mbedtls_ctr_drbg_seed+0x4c>
   2388c:	2e17      	cmp	r6, #23
   2388e:	d802      	bhi.n	23896 <cc_mbedtls_ctr_drbg_seed+0x8e>
   23890:	3601      	adds	r6, #1
   23892:	0876      	lsrs	r6, r6, #1
   23894:	e7df      	b.n	23856 <cc_mbedtls_ctr_drbg_seed+0x4e>
   23896:	2600      	movs	r6, #0
   23898:	e7dd      	b.n	23856 <cc_mbedtls_ctr_drbg_seed+0x4e>
   2389a:	bf00      	nop
   2389c:	20000780 	.word	0x20000780
   238a0:	20000784 	.word	0x20000784

000238a4 <cc_mbedtls_ctr_drbg_random_with_add>:
   238a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238a8:	b08d      	sub	sp, #52	; 0x34
   238aa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   238ae:	9f16      	ldr	r7, [sp, #88]	; 0x58
   238b0:	f200 80e3 	bhi.w	23a7a <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   238b4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   238b8:	f200 80dc 	bhi.w	23a74 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   238bc:	4604      	mov	r4, r0
   238be:	4615      	mov	r5, r2
   238c0:	460e      	mov	r6, r1
   238c2:	2220      	movs	r2, #32
   238c4:	2100      	movs	r1, #0
   238c6:	a804      	add	r0, sp, #16
   238c8:	4698      	mov	r8, r3
   238ca:	f003 f9e2 	bl	26c92 <memset>
   238ce:	4b6c      	ldr	r3, [pc, #432]	; (23a80 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   238d0:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   238d4:	681b      	ldr	r3, [r3, #0]
   238d6:	4648      	mov	r0, r9
   238d8:	4798      	blx	r3
   238da:	4683      	mov	fp, r0
   238dc:	2800      	cmp	r0, #0
   238de:	f040 8092 	bne.w	23a06 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   238e2:	6922      	ldr	r2, [r4, #16]
   238e4:	69e3      	ldr	r3, [r4, #28]
   238e6:	429a      	cmp	r2, r3
   238e8:	f300 8091 	bgt.w	23a0e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   238ec:	6963      	ldr	r3, [r4, #20]
   238ee:	2b00      	cmp	r3, #0
   238f0:	f040 808d 	bne.w	23a0e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   238f4:	2f00      	cmp	r7, #0
   238f6:	f040 80a9 	bne.w	23a4c <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   238fa:	f8df a188 	ldr.w	sl, [pc, #392]	; 23a84 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   238fe:	466f      	mov	r7, sp
   23900:	2d00      	cmp	r5, #0
   23902:	f000 8098 	beq.w	23a36 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   23906:	f104 0820 	add.w	r8, r4, #32
   2390a:	466f      	mov	r7, sp
   2390c:	e00e      	b.n	2392c <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   2390e:	2d10      	cmp	r5, #16
   23910:	46ab      	mov	fp, r5
   23912:	bf28      	it	cs
   23914:	f04f 0b10 	movcs.w	fp, #16
   23918:	4630      	mov	r0, r6
   2391a:	465a      	mov	r2, fp
   2391c:	4639      	mov	r1, r7
   2391e:	f003 f9ad 	bl	26c7c <memcpy>
   23922:	ebb5 050b 	subs.w	r5, r5, fp
   23926:	445e      	add	r6, fp
   23928:	f000 8085 	beq.w	23a36 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   2392c:	7be3      	ldrb	r3, [r4, #15]
   2392e:	3301      	adds	r3, #1
   23930:	b2db      	uxtb	r3, r3
   23932:	73e3      	strb	r3, [r4, #15]
   23934:	2b00      	cmp	r3, #0
   23936:	d14d      	bne.n	239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23938:	7ba3      	ldrb	r3, [r4, #14]
   2393a:	3301      	adds	r3, #1
   2393c:	b2db      	uxtb	r3, r3
   2393e:	73a3      	strb	r3, [r4, #14]
   23940:	2b00      	cmp	r3, #0
   23942:	d147      	bne.n	239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23944:	7b63      	ldrb	r3, [r4, #13]
   23946:	3301      	adds	r3, #1
   23948:	b2db      	uxtb	r3, r3
   2394a:	7363      	strb	r3, [r4, #13]
   2394c:	2b00      	cmp	r3, #0
   2394e:	d141      	bne.n	239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23950:	7b23      	ldrb	r3, [r4, #12]
   23952:	3301      	adds	r3, #1
   23954:	b2db      	uxtb	r3, r3
   23956:	7323      	strb	r3, [r4, #12]
   23958:	2b00      	cmp	r3, #0
   2395a:	d13b      	bne.n	239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2395c:	7ae3      	ldrb	r3, [r4, #11]
   2395e:	3301      	adds	r3, #1
   23960:	b2db      	uxtb	r3, r3
   23962:	72e3      	strb	r3, [r4, #11]
   23964:	2b00      	cmp	r3, #0
   23966:	d135      	bne.n	239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23968:	7aa3      	ldrb	r3, [r4, #10]
   2396a:	3301      	adds	r3, #1
   2396c:	b2db      	uxtb	r3, r3
   2396e:	72a3      	strb	r3, [r4, #10]
   23970:	2b00      	cmp	r3, #0
   23972:	d12f      	bne.n	239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23974:	7a63      	ldrb	r3, [r4, #9]
   23976:	3301      	adds	r3, #1
   23978:	b2db      	uxtb	r3, r3
   2397a:	7263      	strb	r3, [r4, #9]
   2397c:	bb53      	cbnz	r3, 239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2397e:	7a23      	ldrb	r3, [r4, #8]
   23980:	3301      	adds	r3, #1
   23982:	b2db      	uxtb	r3, r3
   23984:	7223      	strb	r3, [r4, #8]
   23986:	bb2b      	cbnz	r3, 239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23988:	79e3      	ldrb	r3, [r4, #7]
   2398a:	3301      	adds	r3, #1
   2398c:	b2db      	uxtb	r3, r3
   2398e:	71e3      	strb	r3, [r4, #7]
   23990:	bb03      	cbnz	r3, 239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23992:	79a3      	ldrb	r3, [r4, #6]
   23994:	3301      	adds	r3, #1
   23996:	b2db      	uxtb	r3, r3
   23998:	71a3      	strb	r3, [r4, #6]
   2399a:	b9db      	cbnz	r3, 239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2399c:	7963      	ldrb	r3, [r4, #5]
   2399e:	3301      	adds	r3, #1
   239a0:	b2db      	uxtb	r3, r3
   239a2:	7163      	strb	r3, [r4, #5]
   239a4:	b9b3      	cbnz	r3, 239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   239a6:	7923      	ldrb	r3, [r4, #4]
   239a8:	3301      	adds	r3, #1
   239aa:	b2db      	uxtb	r3, r3
   239ac:	7123      	strb	r3, [r4, #4]
   239ae:	b98b      	cbnz	r3, 239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   239b0:	78e3      	ldrb	r3, [r4, #3]
   239b2:	3301      	adds	r3, #1
   239b4:	b2db      	uxtb	r3, r3
   239b6:	70e3      	strb	r3, [r4, #3]
   239b8:	b963      	cbnz	r3, 239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   239ba:	78a3      	ldrb	r3, [r4, #2]
   239bc:	3301      	adds	r3, #1
   239be:	b2db      	uxtb	r3, r3
   239c0:	70a3      	strb	r3, [r4, #2]
   239c2:	b93b      	cbnz	r3, 239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   239c4:	7863      	ldrb	r3, [r4, #1]
   239c6:	3301      	adds	r3, #1
   239c8:	b2db      	uxtb	r3, r3
   239ca:	7063      	strb	r3, [r4, #1]
   239cc:	b913      	cbnz	r3, 239d4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   239ce:	7823      	ldrb	r3, [r4, #0]
   239d0:	3301      	adds	r3, #1
   239d2:	7023      	strb	r3, [r4, #0]
   239d4:	463b      	mov	r3, r7
   239d6:	4622      	mov	r2, r4
   239d8:	2101      	movs	r1, #1
   239da:	4640      	mov	r0, r8
   239dc:	f000 feb2 	bl	24744 <cc_mbedtls_aes_crypt_ecb>
   239e0:	4683      	mov	fp, r0
   239e2:	2800      	cmp	r0, #0
   239e4:	d093      	beq.n	2390e <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   239e6:	f8da 3000 	ldr.w	r3, [sl]
   239ea:	4648      	mov	r0, r9
   239ec:	4798      	blx	r3
   239ee:	2120      	movs	r1, #32
   239f0:	4603      	mov	r3, r0
   239f2:	a804      	add	r0, sp, #16
   239f4:	2b00      	cmp	r3, #0
   239f6:	bf18      	it	ne
   239f8:	469b      	movne	fp, r3
   239fa:	f7ff fc87 	bl	2330c <mbedtls_platform_zeroize>
   239fe:	2110      	movs	r1, #16
   23a00:	4638      	mov	r0, r7
   23a02:	f7ff fc83 	bl	2330c <mbedtls_platform_zeroize>
   23a06:	4658      	mov	r0, fp
   23a08:	b00d      	add	sp, #52	; 0x34
   23a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a0e:	463a      	mov	r2, r7
   23a10:	4641      	mov	r1, r8
   23a12:	2300      	movs	r3, #0
   23a14:	4620      	mov	r0, r4
   23a16:	f7ff fe7f 	bl	23718 <mbedtls_ctr_drbg_reseed_internal>
   23a1a:	f8df a068 	ldr.w	sl, [pc, #104]	; 23a84 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   23a1e:	2800      	cmp	r0, #0
   23a20:	f43f af6d 	beq.w	238fe <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   23a24:	f8da 3000 	ldr.w	r3, [sl]
   23a28:	4648      	mov	r0, r9
   23a2a:	4798      	blx	r3
   23a2c:	4683      	mov	fp, r0
   23a2e:	2800      	cmp	r0, #0
   23a30:	f43f af65 	beq.w	238fe <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   23a34:	e7e7      	b.n	23a06 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   23a36:	a904      	add	r1, sp, #16
   23a38:	4620      	mov	r0, r4
   23a3a:	f7ff fdc9 	bl	235d0 <ctr_drbg_update_internal>
   23a3e:	4683      	mov	fp, r0
   23a40:	2800      	cmp	r0, #0
   23a42:	d1d0      	bne.n	239e6 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   23a44:	6923      	ldr	r3, [r4, #16]
   23a46:	3301      	adds	r3, #1
   23a48:	6123      	str	r3, [r4, #16]
   23a4a:	e7cc      	b.n	239e6 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   23a4c:	463a      	mov	r2, r7
   23a4e:	4641      	mov	r1, r8
   23a50:	a804      	add	r0, sp, #16
   23a52:	f7ff fc65 	bl	23320 <block_cipher_df>
   23a56:	4683      	mov	fp, r0
   23a58:	b118      	cbz	r0, 23a62 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   23a5a:	f8df a028 	ldr.w	sl, [pc, #40]	; 23a84 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   23a5e:	466f      	mov	r7, sp
   23a60:	e7c1      	b.n	239e6 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   23a62:	a904      	add	r1, sp, #16
   23a64:	4620      	mov	r0, r4
   23a66:	f7ff fdb3 	bl	235d0 <ctr_drbg_update_internal>
   23a6a:	4683      	mov	fp, r0
   23a6c:	2800      	cmp	r0, #0
   23a6e:	f43f af44 	beq.w	238fa <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   23a72:	e7f2      	b.n	23a5a <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   23a74:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   23a78:	e7c5      	b.n	23a06 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   23a7a:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   23a7e:	e7c2      	b.n	23a06 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   23a80:	20000780 	.word	0x20000780
   23a84:	20000784 	.word	0x20000784

00023a88 <entropy_update>:
   23a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23a8c:	2b20      	cmp	r3, #32
   23a8e:	b08b      	sub	sp, #44	; 0x2c
   23a90:	461d      	mov	r5, r3
   23a92:	4606      	mov	r6, r0
   23a94:	4688      	mov	r8, r1
   23a96:	4691      	mov	r9, r2
   23a98:	d826      	bhi.n	23ae8 <entropy_update+0x60>
   23a9a:	b2db      	uxtb	r3, r3
   23a9c:	af02      	add	r7, sp, #8
   23a9e:	f88d 8004 	strb.w	r8, [sp, #4]
   23aa2:	46b0      	mov	r8, r6
   23aa4:	f88d 3005 	strb.w	r3, [sp, #5]
   23aa8:	f858 1b04 	ldr.w	r1, [r8], #4
   23aac:	b921      	cbnz	r1, 23ab8 <entropy_update+0x30>
   23aae:	4640      	mov	r0, r8
   23ab0:	f000 fe8c 	bl	247cc <cc_mbedtls_sha256_starts>
   23ab4:	4604      	mov	r4, r0
   23ab6:	b940      	cbnz	r0, 23aca <entropy_update+0x42>
   23ab8:	2301      	movs	r3, #1
   23aba:	6033      	str	r3, [r6, #0]
   23abc:	2202      	movs	r2, #2
   23abe:	a901      	add	r1, sp, #4
   23ac0:	4640      	mov	r0, r8
   23ac2:	f000 fe97 	bl	247f4 <cc_mbedtls_sha256_update>
   23ac6:	4604      	mov	r4, r0
   23ac8:	b138      	cbz	r0, 23ada <entropy_update+0x52>
   23aca:	4638      	mov	r0, r7
   23acc:	2120      	movs	r1, #32
   23ace:	f7ff fc1d 	bl	2330c <mbedtls_platform_zeroize>
   23ad2:	4620      	mov	r0, r4
   23ad4:	b00b      	add	sp, #44	; 0x2c
   23ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23ada:	462a      	mov	r2, r5
   23adc:	4649      	mov	r1, r9
   23ade:	4640      	mov	r0, r8
   23ae0:	f000 fe88 	bl	247f4 <cc_mbedtls_sha256_update>
   23ae4:	4604      	mov	r4, r0
   23ae6:	e7f0      	b.n	23aca <entropy_update+0x42>
   23ae8:	af02      	add	r7, sp, #8
   23aea:	4619      	mov	r1, r3
   23aec:	4610      	mov	r0, r2
   23aee:	2300      	movs	r3, #0
   23af0:	463a      	mov	r2, r7
   23af2:	f001 f807 	bl	24b04 <cc_mbedtls_sha256>
   23af6:	4604      	mov	r4, r0
   23af8:	2800      	cmp	r0, #0
   23afa:	d1e6      	bne.n	23aca <entropy_update+0x42>
   23afc:	2320      	movs	r3, #32
   23afe:	46b9      	mov	r9, r7
   23b00:	461d      	mov	r5, r3
   23b02:	e7cc      	b.n	23a9e <entropy_update+0x16>

00023b04 <entropy_gather_internal.part.0>:
   23b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   23b06:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   23b0a:	b0a7      	sub	sp, #156	; 0x9c
   23b0c:	2b00      	cmp	r3, #0
   23b0e:	bfd8      	it	le
   23b10:	ae02      	addle	r6, sp, #8
   23b12:	dd2c      	ble.n	23b6e <entropy_gather_internal.part.0+0x6a>
   23b14:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   23b18:	4605      	mov	r5, r0
   23b1a:	2300      	movs	r3, #0
   23b1c:	ae02      	add	r6, sp, #8
   23b1e:	9301      	str	r3, [sp, #4]
   23b20:	f1a4 0701 	sub.w	r7, r4, #1
   23b24:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   23b28:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   23b2c:	ab01      	add	r3, sp, #4
   23b2e:	2290      	movs	r2, #144	; 0x90
   23b30:	4631      	mov	r1, r6
   23b32:	47a0      	blx	r4
   23b34:	fab7 f787 	clz	r7, r7
   23b38:	097f      	lsrs	r7, r7, #5
   23b3a:	4604      	mov	r4, r0
   23b3c:	b910      	cbnz	r0, 23b44 <entropy_gather_internal.part.0+0x40>
   23b3e:	9b01      	ldr	r3, [sp, #4]
   23b40:	b93b      	cbnz	r3, 23b52 <entropy_gather_internal.part.0+0x4e>
   23b42:	b1a7      	cbz	r7, 23b6e <entropy_gather_internal.part.0+0x6a>
   23b44:	4630      	mov	r0, r6
   23b46:	2190      	movs	r1, #144	; 0x90
   23b48:	f7ff fbe0 	bl	2330c <mbedtls_platform_zeroize>
   23b4c:	4620      	mov	r0, r4
   23b4e:	b027      	add	sp, #156	; 0x9c
   23b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23b52:	4601      	mov	r1, r0
   23b54:	4632      	mov	r2, r6
   23b56:	4628      	mov	r0, r5
   23b58:	f7ff ff96 	bl	23a88 <entropy_update>
   23b5c:	b950      	cbnz	r0, 23b74 <entropy_gather_internal.part.0+0x70>
   23b5e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   23b62:	9a01      	ldr	r2, [sp, #4]
   23b64:	4413      	add	r3, r2
   23b66:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   23b6a:	2f00      	cmp	r7, #0
   23b6c:	d1ea      	bne.n	23b44 <entropy_gather_internal.part.0+0x40>
   23b6e:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   23b72:	e7e7      	b.n	23b44 <entropy_gather_internal.part.0+0x40>
   23b74:	4604      	mov	r4, r0
   23b76:	4620      	mov	r0, r4
   23b78:	b027      	add	sp, #156	; 0x9c
   23b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023b7c <cc_mbedtls_entropy_init>:
   23b7c:	b570      	push	{r4, r5, r6, lr}
   23b7e:	2500      	movs	r5, #0
   23b80:	4604      	mov	r4, r0
   23b82:	f504 7688 	add.w	r6, r4, #272	; 0x110
   23b86:	2214      	movs	r2, #20
   23b88:	4629      	mov	r1, r5
   23b8a:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   23b8e:	30fc      	adds	r0, #252	; 0xfc
   23b90:	f003 f87f 	bl	26c92 <memset>
   23b94:	2208      	movs	r2, #8
   23b96:	4629      	mov	r1, r5
   23b98:	4630      	mov	r0, r6
   23b9a:	f003 f87a 	bl	26c92 <memset>
   23b9e:	4b15      	ldr	r3, [pc, #84]	; (23bf4 <cc_mbedtls_entropy_init+0x78>)
   23ba0:	4630      	mov	r0, r6
   23ba2:	681b      	ldr	r3, [r3, #0]
   23ba4:	4798      	blx	r3
   23ba6:	4620      	mov	r0, r4
   23ba8:	f840 5b04 	str.w	r5, [r0], #4
   23bac:	f000 fdf4 	bl	24798 <cc_mbedtls_sha256_init>
   23bb0:	4b11      	ldr	r3, [pc, #68]	; (23bf8 <cc_mbedtls_entropy_init+0x7c>)
   23bb2:	4630      	mov	r0, r6
   23bb4:	681b      	ldr	r3, [r3, #0]
   23bb6:	4798      	blx	r3
   23bb8:	b9d8      	cbnz	r0, 23bf2 <cc_mbedtls_entropy_init+0x76>
   23bba:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   23bbe:	42ab      	cmp	r3, r5
   23bc0:	dc11      	bgt.n	23be6 <cc_mbedtls_entropy_init+0x6a>
   23bc2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   23bc6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   23bca:	2120      	movs	r1, #32
   23bcc:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   23bd0:	2101      	movs	r1, #1
   23bd2:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   23bd6:	3301      	adds	r3, #1
   23bd8:	4908      	ldr	r1, [pc, #32]	; (23bfc <cc_mbedtls_entropy_init+0x80>)
   23bda:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   23bde:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   23be2:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   23be6:	4b06      	ldr	r3, [pc, #24]	; (23c00 <cc_mbedtls_entropy_init+0x84>)
   23be8:	4630      	mov	r0, r6
   23bea:	681b      	ldr	r3, [r3, #0]
   23bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23bf0:	4718      	bx	r3
   23bf2:	bd70      	pop	{r4, r5, r6, pc}
   23bf4:	2000077c 	.word	0x2000077c
   23bf8:	20000780 	.word	0x20000780
   23bfc:	000245e9 	.word	0x000245e9
   23c00:	20000784 	.word	0x20000784

00023c04 <cc_mbedtls_entropy_func>:
   23c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23c08:	2a20      	cmp	r2, #32
   23c0a:	b088      	sub	sp, #32
   23c0c:	d876      	bhi.n	23cfc <cc_mbedtls_entropy_func+0xf8>
   23c0e:	4b3d      	ldr	r3, [pc, #244]	; (23d04 <cc_mbedtls_entropy_func+0x100>)
   23c10:	f500 7988 	add.w	r9, r0, #272	; 0x110
   23c14:	681b      	ldr	r3, [r3, #0]
   23c16:	4604      	mov	r4, r0
   23c18:	4648      	mov	r0, r9
   23c1a:	4617      	mov	r7, r2
   23c1c:	4688      	mov	r8, r1
   23c1e:	4798      	blx	r3
   23c20:	4605      	mov	r5, r0
   23c22:	bba0      	cbnz	r0, 23c8e <cc_mbedtls_entropy_func+0x8a>
   23c24:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   23c28:	f240 1601 	movw	r6, #257	; 0x101
   23c2c:	e001      	b.n	23c32 <cc_mbedtls_entropy_func+0x2e>
   23c2e:	3e01      	subs	r6, #1
   23c30:	d060      	beq.n	23cf4 <cc_mbedtls_entropy_func+0xf0>
   23c32:	4620      	mov	r0, r4
   23c34:	b37b      	cbz	r3, 23c96 <cc_mbedtls_entropy_func+0x92>
   23c36:	f7ff ff65 	bl	23b04 <entropy_gather_internal.part.0>
   23c3a:	4605      	mov	r5, r0
   23c3c:	bb68      	cbnz	r0, 23c9a <cc_mbedtls_entropy_func+0x96>
   23c3e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   23c42:	2b00      	cmp	r3, #0
   23c44:	ddf3      	ble.n	23c2e <cc_mbedtls_entropy_func+0x2a>
   23c46:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   23c4a:	4290      	cmp	r0, r2
   23c4c:	d3ef      	bcc.n	23c2e <cc_mbedtls_entropy_func+0x2a>
   23c4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   23c52:	2a01      	cmp	r2, #1
   23c54:	d1eb      	bne.n	23c2e <cc_mbedtls_entropy_func+0x2a>
   23c56:	281f      	cmp	r0, #31
   23c58:	d9e9      	bls.n	23c2e <cc_mbedtls_entropy_func+0x2a>
   23c5a:	466e      	mov	r6, sp
   23c5c:	4629      	mov	r1, r5
   23c5e:	2220      	movs	r2, #32
   23c60:	4630      	mov	r0, r6
   23c62:	f104 0a04 	add.w	sl, r4, #4
   23c66:	f003 f814 	bl	26c92 <memset>
   23c6a:	4631      	mov	r1, r6
   23c6c:	4650      	mov	r0, sl
   23c6e:	f000 fdeb 	bl	24848 <cc_mbedtls_sha256_finish>
   23c72:	4605      	mov	r5, r0
   23c74:	b198      	cbz	r0, 23c9e <cc_mbedtls_entropy_func+0x9a>
   23c76:	2120      	movs	r1, #32
   23c78:	4630      	mov	r0, r6
   23c7a:	f7ff fb47 	bl	2330c <mbedtls_platform_zeroize>
   23c7e:	4b22      	ldr	r3, [pc, #136]	; (23d08 <cc_mbedtls_entropy_func+0x104>)
   23c80:	4648      	mov	r0, r9
   23c82:	681b      	ldr	r3, [r3, #0]
   23c84:	4798      	blx	r3
   23c86:	2800      	cmp	r0, #0
   23c88:	bf18      	it	ne
   23c8a:	f06f 051d 	mvnne.w	r5, #29
   23c8e:	4628      	mov	r0, r5
   23c90:	b008      	add	sp, #32
   23c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23c96:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   23c9a:	466e      	mov	r6, sp
   23c9c:	e7eb      	b.n	23c76 <cc_mbedtls_entropy_func+0x72>
   23c9e:	4650      	mov	r0, sl
   23ca0:	f000 fd8e 	bl	247c0 <cc_mbedtls_sha256_free>
   23ca4:	4650      	mov	r0, sl
   23ca6:	f000 fd77 	bl	24798 <cc_mbedtls_sha256_init>
   23caa:	4629      	mov	r1, r5
   23cac:	4650      	mov	r0, sl
   23cae:	f000 fd8d 	bl	247cc <cc_mbedtls_sha256_starts>
   23cb2:	4605      	mov	r5, r0
   23cb4:	2800      	cmp	r0, #0
   23cb6:	d1de      	bne.n	23c76 <cc_mbedtls_entropy_func+0x72>
   23cb8:	4650      	mov	r0, sl
   23cba:	2220      	movs	r2, #32
   23cbc:	4631      	mov	r1, r6
   23cbe:	f000 fd99 	bl	247f4 <cc_mbedtls_sha256_update>
   23cc2:	4605      	mov	r5, r0
   23cc4:	2800      	cmp	r0, #0
   23cc6:	d1d6      	bne.n	23c76 <cc_mbedtls_entropy_func+0x72>
   23cc8:	4603      	mov	r3, r0
   23cca:	4632      	mov	r2, r6
   23ccc:	2120      	movs	r1, #32
   23cce:	4630      	mov	r0, r6
   23cd0:	f000 ff18 	bl	24b04 <cc_mbedtls_sha256>
   23cd4:	4605      	mov	r5, r0
   23cd6:	2800      	cmp	r0, #0
   23cd8:	d1cd      	bne.n	23c76 <cc_mbedtls_entropy_func+0x72>
   23cda:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   23cde:	2b00      	cmp	r3, #0
   23ce0:	bfc4      	itt	gt
   23ce2:	2300      	movgt	r3, #0
   23ce4:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   23ce8:	463a      	mov	r2, r7
   23cea:	4640      	mov	r0, r8
   23cec:	4631      	mov	r1, r6
   23cee:	f002 ffc5 	bl	26c7c <memcpy>
   23cf2:	e7c0      	b.n	23c76 <cc_mbedtls_entropy_func+0x72>
   23cf4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   23cf8:	466e      	mov	r6, sp
   23cfa:	e7bc      	b.n	23c76 <cc_mbedtls_entropy_func+0x72>
   23cfc:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   23d00:	e7c5      	b.n	23c8e <cc_mbedtls_entropy_func+0x8a>
   23d02:	bf00      	nop
   23d04:	20000780 	.word	0x20000780
   23d08:	20000784 	.word	0x20000784

00023d0c <RndStartupTest.constprop.0>:
   23d0c:	b530      	push	{r4, r5, lr}
   23d0e:	b08d      	sub	sp, #52	; 0x34
   23d10:	2100      	movs	r1, #0
   23d12:	2228      	movs	r2, #40	; 0x28
   23d14:	a802      	add	r0, sp, #8
   23d16:	9101      	str	r1, [sp, #4]
   23d18:	f002 ffbb 	bl	26c92 <memset>
   23d1c:	a802      	add	r0, sp, #8
   23d1e:	f000 ff19 	bl	24b54 <RNG_PLAT_SetUserRngParameters>
   23d22:	4604      	mov	r4, r0
   23d24:	b110      	cbz	r0, 23d2c <RndStartupTest.constprop.0+0x20>
   23d26:	4620      	mov	r0, r4
   23d28:	b00d      	add	sp, #52	; 0x34
   23d2a:	bd30      	pop	{r4, r5, pc}
   23d2c:	4d18      	ldr	r5, [pc, #96]	; (23d90 <RndStartupTest.constprop.0+0x84>)
   23d2e:	f04f 31ff 	mov.w	r1, #4294967295
   23d32:	6828      	ldr	r0, [r5, #0]
   23d34:	f000 f946 	bl	23fc4 <CC_PalMutexLock>
   23d38:	4604      	mov	r4, r0
   23d3a:	b9c0      	cbnz	r0, 23d6e <RndStartupTest.constprop.0+0x62>
   23d3c:	2000      	movs	r0, #0
   23d3e:	f000 f971 	bl	24024 <CC_PalPowerSaveModeSelect>
   23d42:	bb00      	cbnz	r0, 23d86 <RndStartupTest.constprop.0+0x7a>
   23d44:	4a13      	ldr	r2, [pc, #76]	; (23d94 <RndStartupTest.constprop.0+0x88>)
   23d46:	a902      	add	r1, sp, #8
   23d48:	a801      	add	r0, sp, #4
   23d4a:	f000 fc3f 	bl	245cc <LLF_RND_RunTrngStartupTest>
   23d4e:	4604      	mov	r4, r0
   23d50:	2001      	movs	r0, #1
   23d52:	f000 f967 	bl	24024 <CC_PalPowerSaveModeSelect>
   23d56:	b990      	cbnz	r0, 23d7e <RndStartupTest.constprop.0+0x72>
   23d58:	6828      	ldr	r0, [r5, #0]
   23d5a:	f000 f93b 	bl	23fd4 <CC_PalMutexUnlock>
   23d5e:	2800      	cmp	r0, #0
   23d60:	d0e1      	beq.n	23d26 <RndStartupTest.constprop.0+0x1a>
   23d62:	480d      	ldr	r0, [pc, #52]	; (23d98 <RndStartupTest.constprop.0+0x8c>)
   23d64:	f7ff f9b2 	bl	230cc <CC_PalAbort>
   23d68:	4620      	mov	r0, r4
   23d6a:	b00d      	add	sp, #52	; 0x34
   23d6c:	bd30      	pop	{r4, r5, pc}
   23d6e:	480b      	ldr	r0, [pc, #44]	; (23d9c <RndStartupTest.constprop.0+0x90>)
   23d70:	f7ff f9ac 	bl	230cc <CC_PalAbort>
   23d74:	2c01      	cmp	r4, #1
   23d76:	bf08      	it	eq
   23d78:	2405      	moveq	r4, #5
   23d7a:	d0ed      	beq.n	23d58 <RndStartupTest.constprop.0+0x4c>
   23d7c:	e7de      	b.n	23d3c <RndStartupTest.constprop.0+0x30>
   23d7e:	4808      	ldr	r0, [pc, #32]	; (23da0 <RndStartupTest.constprop.0+0x94>)
   23d80:	f7ff f9a4 	bl	230cc <CC_PalAbort>
   23d84:	e7e8      	b.n	23d58 <RndStartupTest.constprop.0+0x4c>
   23d86:	4807      	ldr	r0, [pc, #28]	; (23da4 <RndStartupTest.constprop.0+0x98>)
   23d88:	f7ff f9a0 	bl	230cc <CC_PalAbort>
   23d8c:	e7da      	b.n	23d44 <RndStartupTest.constprop.0+0x38>
   23d8e:	bf00      	nop
   23d90:	20000778 	.word	0x20000778
   23d94:	20003020 	.word	0x20003020
   23d98:	0002a408 	.word	0x0002a408
   23d9c:	0002a3b0 	.word	0x0002a3b0
   23da0:	0002a3e8 	.word	0x0002a3e8
   23da4:	0002a3c8 	.word	0x0002a3c8

00023da8 <CC_LibInit>:
   23da8:	b530      	push	{r4, r5, lr}
   23daa:	b083      	sub	sp, #12
   23dac:	f000 f85c 	bl	23e68 <CC_HalInit>
   23db0:	b128      	cbz	r0, 23dbe <CC_LibInit+0x16>
   23db2:	f000 f8ab 	bl	23f0c <CC_PalTerminate>
   23db6:	2403      	movs	r4, #3
   23db8:	4620      	mov	r0, r4
   23dba:	b003      	add	sp, #12
   23dbc:	bd30      	pop	{r4, r5, pc}
   23dbe:	f000 f877 	bl	23eb0 <CC_PalInit>
   23dc2:	b9d8      	cbnz	r0, 23dfc <CC_LibInit+0x54>
   23dc4:	f000 f92e 	bl	24024 <CC_PalPowerSaveModeSelect>
   23dc8:	b9e0      	cbnz	r0, 23e04 <CC_LibInit+0x5c>
   23dca:	4c22      	ldr	r4, [pc, #136]	; (23e54 <CC_LibInit+0xac>)
   23dcc:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   23dd0:	0e1b      	lsrs	r3, r3, #24
   23dd2:	2bf0      	cmp	r3, #240	; 0xf0
   23dd4:	d10a      	bne.n	23dec <CC_LibInit+0x44>
   23dd6:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   23dda:	4b1f      	ldr	r3, [pc, #124]	; (23e58 <CC_LibInit+0xb0>)
   23ddc:	429a      	cmp	r2, r3
   23dde:	d031      	beq.n	23e44 <CC_LibInit+0x9c>
   23de0:	f000 f844 	bl	23e6c <CC_HalTerminate>
   23de4:	2407      	movs	r4, #7
   23de6:	f000 f891 	bl	23f0c <CC_PalTerminate>
   23dea:	e7e5      	b.n	23db8 <CC_LibInit+0x10>
   23dec:	f000 f83e 	bl	23e6c <CC_HalTerminate>
   23df0:	f000 f88c 	bl	23f0c <CC_PalTerminate>
   23df4:	2406      	movs	r4, #6
   23df6:	4620      	mov	r0, r4
   23df8:	b003      	add	sp, #12
   23dfa:	bd30      	pop	{r4, r5, pc}
   23dfc:	2404      	movs	r4, #4
   23dfe:	4620      	mov	r0, r4
   23e00:	b003      	add	sp, #12
   23e02:	bd30      	pop	{r4, r5, pc}
   23e04:	f000 f832 	bl	23e6c <CC_HalTerminate>
   23e08:	f000 f880 	bl	23f0c <CC_PalTerminate>
   23e0c:	f7ff ff7e 	bl	23d0c <RndStartupTest.constprop.0>
   23e10:	4604      	mov	r4, r0
   23e12:	b998      	cbnz	r0, 23e3c <CC_LibInit+0x94>
   23e14:	4d11      	ldr	r5, [pc, #68]	; (23e5c <CC_LibInit+0xb4>)
   23e16:	682b      	ldr	r3, [r5, #0]
   23e18:	2b00      	cmp	r3, #0
   23e1a:	d1cd      	bne.n	23db8 <CC_LibInit+0x10>
   23e1c:	4602      	mov	r2, r0
   23e1e:	4601      	mov	r1, r0
   23e20:	f7ff f976 	bl	23110 <nrf_cc3xx_platform_ctr_drbg_init>
   23e24:	b950      	cbnz	r0, 23e3c <CC_LibInit+0x94>
   23e26:	490e      	ldr	r1, [pc, #56]	; (23e60 <CC_LibInit+0xb8>)
   23e28:	ab01      	add	r3, sp, #4
   23e2a:	2268      	movs	r2, #104	; 0x68
   23e2c:	f7ff f9a2 	bl	23174 <nrf_cc3xx_platform_ctr_drbg_get>
   23e30:	b920      	cbnz	r0, 23e3c <CC_LibInit+0x94>
   23e32:	4b0c      	ldr	r3, [pc, #48]	; (23e64 <CC_LibInit+0xbc>)
   23e34:	602b      	str	r3, [r5, #0]
   23e36:	4620      	mov	r0, r4
   23e38:	b003      	add	sp, #12
   23e3a:	bd30      	pop	{r4, r5, pc}
   23e3c:	2405      	movs	r4, #5
   23e3e:	4620      	mov	r0, r4
   23e40:	b003      	add	sp, #12
   23e42:	bd30      	pop	{r4, r5, pc}
   23e44:	2001      	movs	r0, #1
   23e46:	f000 f8ed 	bl	24024 <CC_PalPowerSaveModeSelect>
   23e4a:	2800      	cmp	r0, #0
   23e4c:	d1da      	bne.n	23e04 <CC_LibInit+0x5c>
   23e4e:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   23e52:	e7db      	b.n	23e0c <CC_LibInit+0x64>
   23e54:	5002b000 	.word	0x5002b000
   23e58:	20e00000 	.word	0x20e00000
   23e5c:	2000301c 	.word	0x2000301c
   23e60:	20002fb4 	.word	0x20002fb4
   23e64:	5a5aea5a 	.word	0x5a5aea5a

00023e68 <CC_HalInit>:
   23e68:	2000      	movs	r0, #0
   23e6a:	4770      	bx	lr

00023e6c <CC_HalTerminate>:
   23e6c:	2000      	movs	r0, #0
   23e6e:	4770      	bx	lr

00023e70 <CC_HalClearInterruptBit>:
   23e70:	0543      	lsls	r3, r0, #21
   23e72:	d504      	bpl.n	23e7e <CC_HalClearInterruptBit+0xe>
   23e74:	4b04      	ldr	r3, [pc, #16]	; (23e88 <CC_HalClearInterruptBit+0x18>)
   23e76:	f04f 32ff 	mov.w	r2, #4294967295
   23e7a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   23e7e:	4b02      	ldr	r3, [pc, #8]	; (23e88 <CC_HalClearInterruptBit+0x18>)
   23e80:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   23e84:	4770      	bx	lr
   23e86:	bf00      	nop
   23e88:	5002b000 	.word	0x5002b000

00023e8c <CC_HalMaskInterrupt>:
   23e8c:	4b01      	ldr	r3, [pc, #4]	; (23e94 <CC_HalMaskInterrupt+0x8>)
   23e8e:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   23e92:	4770      	bx	lr
   23e94:	5002b000 	.word	0x5002b000

00023e98 <CC_HalWaitInterrupt>:
   23e98:	b108      	cbz	r0, 23e9e <CC_HalWaitInterrupt+0x6>
   23e9a:	f000 b86b 	b.w	23f74 <CC_PalWaitInterrupt>
   23e9e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   23ea2:	4770      	bx	lr

00023ea4 <CC_HalWaitInterruptRND>:
   23ea4:	b108      	cbz	r0, 23eaa <CC_HalWaitInterruptRND+0x6>
   23ea6:	f000 b84f 	b.w	23f48 <CC_PalWaitInterruptRND>
   23eaa:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   23eae:	4770      	bx	lr

00023eb0 <CC_PalInit>:
   23eb0:	b510      	push	{r4, lr}
   23eb2:	4811      	ldr	r0, [pc, #68]	; (23ef8 <CC_PalInit+0x48>)
   23eb4:	f000 f872 	bl	23f9c <CC_PalMutexCreate>
   23eb8:	b100      	cbz	r0, 23ebc <CC_PalInit+0xc>
   23eba:	bd10      	pop	{r4, pc}
   23ebc:	480f      	ldr	r0, [pc, #60]	; (23efc <CC_PalInit+0x4c>)
   23ebe:	f000 f86d 	bl	23f9c <CC_PalMutexCreate>
   23ec2:	2800      	cmp	r0, #0
   23ec4:	d1f9      	bne.n	23eba <CC_PalInit+0xa>
   23ec6:	4c0e      	ldr	r4, [pc, #56]	; (23f00 <CC_PalInit+0x50>)
   23ec8:	4620      	mov	r0, r4
   23eca:	f000 f867 	bl	23f9c <CC_PalMutexCreate>
   23ece:	2800      	cmp	r0, #0
   23ed0:	d1f3      	bne.n	23eba <CC_PalInit+0xa>
   23ed2:	4b0c      	ldr	r3, [pc, #48]	; (23f04 <CC_PalInit+0x54>)
   23ed4:	480c      	ldr	r0, [pc, #48]	; (23f08 <CC_PalInit+0x58>)
   23ed6:	601c      	str	r4, [r3, #0]
   23ed8:	f000 f860 	bl	23f9c <CC_PalMutexCreate>
   23edc:	4601      	mov	r1, r0
   23ede:	2800      	cmp	r0, #0
   23ee0:	d1eb      	bne.n	23eba <CC_PalInit+0xa>
   23ee2:	f000 f82d 	bl	23f40 <CC_PalDmaInit>
   23ee6:	4604      	mov	r4, r0
   23ee8:	b108      	cbz	r0, 23eee <CC_PalInit+0x3e>
   23eea:	4620      	mov	r0, r4
   23eec:	bd10      	pop	{r4, pc}
   23eee:	f000 f87b 	bl	23fe8 <CC_PalPowerSaveModeInit>
   23ef2:	4620      	mov	r0, r4
   23ef4:	e7fa      	b.n	23eec <CC_PalInit+0x3c>
   23ef6:	bf00      	nop
   23ef8:	20000774 	.word	0x20000774
   23efc:	20000768 	.word	0x20000768
   23f00:	20000770 	.word	0x20000770
   23f04:	20000778 	.word	0x20000778
   23f08:	2000076c 	.word	0x2000076c

00023f0c <CC_PalTerminate>:
   23f0c:	b508      	push	{r3, lr}
   23f0e:	4808      	ldr	r0, [pc, #32]	; (23f30 <CC_PalTerminate+0x24>)
   23f10:	f000 f84e 	bl	23fb0 <CC_PalMutexDestroy>
   23f14:	4807      	ldr	r0, [pc, #28]	; (23f34 <CC_PalTerminate+0x28>)
   23f16:	f000 f84b 	bl	23fb0 <CC_PalMutexDestroy>
   23f1a:	4807      	ldr	r0, [pc, #28]	; (23f38 <CC_PalTerminate+0x2c>)
   23f1c:	f000 f848 	bl	23fb0 <CC_PalMutexDestroy>
   23f20:	4806      	ldr	r0, [pc, #24]	; (23f3c <CC_PalTerminate+0x30>)
   23f22:	f000 f845 	bl	23fb0 <CC_PalMutexDestroy>
   23f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23f2a:	f000 b80b 	b.w	23f44 <CC_PalDmaTerminate>
   23f2e:	bf00      	nop
   23f30:	20000774 	.word	0x20000774
   23f34:	20000768 	.word	0x20000768
   23f38:	20000770 	.word	0x20000770
   23f3c:	2000076c 	.word	0x2000076c

00023f40 <CC_PalDmaInit>:
   23f40:	2000      	movs	r0, #0
   23f42:	4770      	bx	lr

00023f44 <CC_PalDmaTerminate>:
   23f44:	4770      	bx	lr
   23f46:	bf00      	nop

00023f48 <CC_PalWaitInterruptRND>:
   23f48:	b410      	push	{r4}
   23f4a:	4c09      	ldr	r4, [pc, #36]	; (23f70 <CC_PalWaitInterruptRND+0x28>)
   23f4c:	4602      	mov	r2, r0
   23f4e:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   23f52:	4213      	tst	r3, r2
   23f54:	d0fb      	beq.n	23f4e <CC_PalWaitInterruptRND+0x6>
   23f56:	b121      	cbz	r1, 23f62 <CC_PalWaitInterruptRND+0x1a>
   23f58:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   23f5c:	600b      	str	r3, [r1, #0]
   23f5e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   23f62:	4b03      	ldr	r3, [pc, #12]	; (23f70 <CC_PalWaitInterruptRND+0x28>)
   23f64:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   23f68:	2000      	movs	r0, #0
   23f6a:	bc10      	pop	{r4}
   23f6c:	4770      	bx	lr
   23f6e:	bf00      	nop
   23f70:	5002b000 	.word	0x5002b000

00023f74 <CC_PalWaitInterrupt>:
   23f74:	4a04      	ldr	r2, [pc, #16]	; (23f88 <CC_PalWaitInterrupt+0x14>)
   23f76:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   23f7a:	4218      	tst	r0, r3
   23f7c:	d0fb      	beq.n	23f76 <CC_PalWaitInterrupt+0x2>
   23f7e:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   23f82:	2000      	movs	r0, #0
   23f84:	4770      	bx	lr
   23f86:	bf00      	nop
   23f88:	5002b000 	.word	0x5002b000

00023f8c <CC_PalMemCopyPlat>:
   23f8c:	f002 be5f 	b.w	26c4e <memmove>

00023f90 <CC_PalMemSetPlat>:
   23f90:	f002 be7f 	b.w	26c92 <memset>

00023f94 <CC_PalMemSetZeroPlat>:
   23f94:	460a      	mov	r2, r1
   23f96:	2100      	movs	r1, #0
   23f98:	f002 be7b 	b.w	26c92 <memset>

00023f9c <CC_PalMutexCreate>:
   23f9c:	b508      	push	{r3, lr}
   23f9e:	4b03      	ldr	r3, [pc, #12]	; (23fac <CC_PalMutexCreate+0x10>)
   23fa0:	6802      	ldr	r2, [r0, #0]
   23fa2:	681b      	ldr	r3, [r3, #0]
   23fa4:	6810      	ldr	r0, [r2, #0]
   23fa6:	4798      	blx	r3
   23fa8:	2000      	movs	r0, #0
   23faa:	bd08      	pop	{r3, pc}
   23fac:	20000728 	.word	0x20000728

00023fb0 <CC_PalMutexDestroy>:
   23fb0:	b508      	push	{r3, lr}
   23fb2:	4b03      	ldr	r3, [pc, #12]	; (23fc0 <CC_PalMutexDestroy+0x10>)
   23fb4:	6802      	ldr	r2, [r0, #0]
   23fb6:	685b      	ldr	r3, [r3, #4]
   23fb8:	6810      	ldr	r0, [r2, #0]
   23fba:	4798      	blx	r3
   23fbc:	2000      	movs	r0, #0
   23fbe:	bd08      	pop	{r3, pc}
   23fc0:	20000728 	.word	0x20000728

00023fc4 <CC_PalMutexLock>:
   23fc4:	4b02      	ldr	r3, [pc, #8]	; (23fd0 <CC_PalMutexLock+0xc>)
   23fc6:	6802      	ldr	r2, [r0, #0]
   23fc8:	689b      	ldr	r3, [r3, #8]
   23fca:	6810      	ldr	r0, [r2, #0]
   23fcc:	4718      	bx	r3
   23fce:	bf00      	nop
   23fd0:	20000728 	.word	0x20000728

00023fd4 <CC_PalMutexUnlock>:
   23fd4:	b508      	push	{r3, lr}
   23fd6:	4b03      	ldr	r3, [pc, #12]	; (23fe4 <CC_PalMutexUnlock+0x10>)
   23fd8:	6802      	ldr	r2, [r0, #0]
   23fda:	68db      	ldr	r3, [r3, #12]
   23fdc:	6810      	ldr	r0, [r2, #0]
   23fde:	4798      	blx	r3
   23fe0:	2000      	movs	r0, #0
   23fe2:	bd08      	pop	{r3, pc}
   23fe4:	20000728 	.word	0x20000728

00023fe8 <CC_PalPowerSaveModeInit>:
   23fe8:	b570      	push	{r4, r5, r6, lr}
   23fea:	4c09      	ldr	r4, [pc, #36]	; (24010 <CC_PalPowerSaveModeInit+0x28>)
   23fec:	4d09      	ldr	r5, [pc, #36]	; (24014 <CC_PalPowerSaveModeInit+0x2c>)
   23fee:	6920      	ldr	r0, [r4, #16]
   23ff0:	68ab      	ldr	r3, [r5, #8]
   23ff2:	4798      	blx	r3
   23ff4:	b118      	cbz	r0, 23ffe <CC_PalPowerSaveModeInit+0x16>
   23ff6:	4b08      	ldr	r3, [pc, #32]	; (24018 <CC_PalPowerSaveModeInit+0x30>)
   23ff8:	4808      	ldr	r0, [pc, #32]	; (2401c <CC_PalPowerSaveModeInit+0x34>)
   23ffa:	685b      	ldr	r3, [r3, #4]
   23ffc:	4798      	blx	r3
   23ffe:	4a08      	ldr	r2, [pc, #32]	; (24020 <CC_PalPowerSaveModeInit+0x38>)
   24000:	68eb      	ldr	r3, [r5, #12]
   24002:	6920      	ldr	r0, [r4, #16]
   24004:	2100      	movs	r1, #0
   24006:	6011      	str	r1, [r2, #0]
   24008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2400c:	4718      	bx	r3
   2400e:	bf00      	nop
   24010:	20000738 	.word	0x20000738
   24014:	20000728 	.word	0x20000728
   24018:	20000718 	.word	0x20000718
   2401c:	0002a420 	.word	0x0002a420
   24020:	20003240 	.word	0x20003240

00024024 <CC_PalPowerSaveModeSelect>:
   24024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24026:	4d1a      	ldr	r5, [pc, #104]	; (24090 <CC_PalPowerSaveModeSelect+0x6c>)
   24028:	4e1a      	ldr	r6, [pc, #104]	; (24094 <CC_PalPowerSaveModeSelect+0x70>)
   2402a:	4604      	mov	r4, r0
   2402c:	68b2      	ldr	r2, [r6, #8]
   2402e:	6928      	ldr	r0, [r5, #16]
   24030:	4790      	blx	r2
   24032:	b9e8      	cbnz	r0, 24070 <CC_PalPowerSaveModeSelect+0x4c>
   24034:	4f18      	ldr	r7, [pc, #96]	; (24098 <CC_PalPowerSaveModeSelect+0x74>)
   24036:	683b      	ldr	r3, [r7, #0]
   24038:	b14c      	cbz	r4, 2404e <CC_PalPowerSaveModeSelect+0x2a>
   2403a:	b1a3      	cbz	r3, 24066 <CC_PalPowerSaveModeSelect+0x42>
   2403c:	2b01      	cmp	r3, #1
   2403e:	d019      	beq.n	24074 <CC_PalPowerSaveModeSelect+0x50>
   24040:	3b01      	subs	r3, #1
   24042:	603b      	str	r3, [r7, #0]
   24044:	6928      	ldr	r0, [r5, #16]
   24046:	68f3      	ldr	r3, [r6, #12]
   24048:	4798      	blx	r3
   2404a:	2000      	movs	r0, #0
   2404c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2404e:	b943      	cbnz	r3, 24062 <CC_PalPowerSaveModeSelect+0x3e>
   24050:	4a12      	ldr	r2, [pc, #72]	; (2409c <CC_PalPowerSaveModeSelect+0x78>)
   24052:	2101      	movs	r1, #1
   24054:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   24058:	4911      	ldr	r1, [pc, #68]	; (240a0 <CC_PalPowerSaveModeSelect+0x7c>)
   2405a:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   2405e:	2a00      	cmp	r2, #0
   24060:	d1fb      	bne.n	2405a <CC_PalPowerSaveModeSelect+0x36>
   24062:	3301      	adds	r3, #1
   24064:	603b      	str	r3, [r7, #0]
   24066:	68f3      	ldr	r3, [r6, #12]
   24068:	6928      	ldr	r0, [r5, #16]
   2406a:	4798      	blx	r3
   2406c:	2000      	movs	r0, #0
   2406e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24070:	480c      	ldr	r0, [pc, #48]	; (240a4 <CC_PalPowerSaveModeSelect+0x80>)
   24072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24074:	4a0a      	ldr	r2, [pc, #40]	; (240a0 <CC_PalPowerSaveModeSelect+0x7c>)
   24076:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2407a:	2b00      	cmp	r3, #0
   2407c:	d1fb      	bne.n	24076 <CC_PalPowerSaveModeSelect+0x52>
   2407e:	4a07      	ldr	r2, [pc, #28]	; (2409c <CC_PalPowerSaveModeSelect+0x78>)
   24080:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   24084:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   24088:	f7ff ff00 	bl	23e8c <CC_HalMaskInterrupt>
   2408c:	683b      	ldr	r3, [r7, #0]
   2408e:	e7d7      	b.n	24040 <CC_PalPowerSaveModeSelect+0x1c>
   24090:	20000738 	.word	0x20000738
   24094:	20000728 	.word	0x20000728
   24098:	20003240 	.word	0x20003240
   2409c:	5002a000 	.word	0x5002a000
   240a0:	5002b000 	.word	0x5002b000
   240a4:	ffff8fe9 	.word	0xffff8fe9

000240a8 <mutex_init>:
   240a8:	4b01      	ldr	r3, [pc, #4]	; (240b0 <mutex_init+0x8>)
   240aa:	681b      	ldr	r3, [r3, #0]
   240ac:	4718      	bx	r3
   240ae:	bf00      	nop
   240b0:	20000728 	.word	0x20000728

000240b4 <mutex_lock>:
   240b4:	4b01      	ldr	r3, [pc, #4]	; (240bc <mutex_lock+0x8>)
   240b6:	689b      	ldr	r3, [r3, #8]
   240b8:	4718      	bx	r3
   240ba:	bf00      	nop
   240bc:	20000728 	.word	0x20000728

000240c0 <mutex_unlock>:
   240c0:	4b01      	ldr	r3, [pc, #4]	; (240c8 <mutex_unlock+0x8>)
   240c2:	68db      	ldr	r3, [r3, #12]
   240c4:	4718      	bx	r3
   240c6:	bf00      	nop
   240c8:	20000728 	.word	0x20000728

000240cc <startTrngHW>:
   240cc:	2800      	cmp	r0, #0
   240ce:	f000 8084 	beq.w	241da <startTrngHW+0x10e>
   240d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   240d6:	460c      	mov	r4, r1
   240d8:	b083      	sub	sp, #12
   240da:	2900      	cmp	r1, #0
   240dc:	d078      	beq.n	241d0 <startTrngHW+0x104>
   240de:	461d      	mov	r5, r3
   240e0:	2b00      	cmp	r3, #0
   240e2:	d075      	beq.n	241d0 <startTrngHW+0x104>
   240e4:	4607      	mov	r7, r0
   240e6:	b11a      	cbz	r2, 240f0 <startTrngHW+0x24>
   240e8:	2201      	movs	r2, #1
   240ea:	2300      	movs	r3, #0
   240ec:	602a      	str	r2, [r5, #0]
   240ee:	6003      	str	r3, [r0, #0]
   240f0:	682b      	ldr	r3, [r5, #0]
   240f2:	2b00      	cmp	r3, #0
   240f4:	d067      	beq.n	241c6 <startTrngHW+0xfa>
   240f6:	4629      	mov	r1, r5
   240f8:	4620      	mov	r0, r4
   240fa:	f000 fde9 	bl	24cd0 <LLF_RND_GetFastestRosc>
   240fe:	4603      	mov	r3, r0
   24100:	2800      	cmp	r0, #0
   24102:	d161      	bne.n	241c8 <startTrngHW+0xfc>
   24104:	6828      	ldr	r0, [r5, #0]
   24106:	4621      	mov	r1, r4
   24108:	f000 fdc4 	bl	24c94 <LLF_RND_GetRoscSampleCnt>
   2410c:	4603      	mov	r3, r0
   2410e:	2800      	cmp	r0, #0
   24110:	d15a      	bne.n	241c8 <startTrngHW+0xfc>
   24112:	682a      	ldr	r2, [r5, #0]
   24114:	2a08      	cmp	r2, #8
   24116:	d072      	beq.n	241fe <startTrngHW+0x132>
   24118:	2a04      	cmp	r2, #4
   2411a:	d073      	beq.n	24204 <startTrngHW+0x138>
   2411c:	f1a2 0802 	sub.w	r8, r2, #2
   24120:	fab8 f888 	clz	r8, r8
   24124:	ea4f 1858 	mov.w	r8, r8, lsr #5
   24128:	4e38      	ldr	r6, [pc, #224]	; (2420c <startTrngHW+0x140>)
   2412a:	2001      	movs	r0, #1
   2412c:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   24130:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   24134:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   24138:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2413a:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   2413e:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   24142:	428a      	cmp	r2, r1
   24144:	d1f6      	bne.n	24134 <startTrngHW+0x68>
   24146:	f04f 0900 	mov.w	r9, #0
   2414a:	9301      	str	r3, [sp, #4]
   2414c:	f04f 30ff 	mov.w	r0, #4294967295
   24150:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   24154:	f7ff fe8c 	bl	23e70 <CC_HalClearInterruptBit>
   24158:	f06f 021b 	mvn.w	r2, #27
   2415c:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   24160:	4648      	mov	r0, r9
   24162:	f7ff fe93 	bl	23e8c <CC_HalMaskInterrupt>
   24166:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   2416a:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   2416e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   24172:	f7ff fe8b 	bl	23e8c <CC_HalMaskInterrupt>
   24176:	220a      	movs	r2, #10
   24178:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   2417c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2417e:	2b01      	cmp	r3, #1
   24180:	9b01      	ldr	r3, [sp, #4]
   24182:	d02d      	beq.n	241e0 <startTrngHW+0x114>
   24184:	6922      	ldr	r2, [r4, #16]
   24186:	4922      	ldr	r1, [pc, #136]	; (24210 <startTrngHW+0x144>)
   24188:	fba1 1202 	umull	r1, r2, r1, r2
   2418c:	0912      	lsrs	r2, r2, #4
   2418e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24190:	fb01 f202 	mul.w	r2, r1, r2
   24194:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   24198:	491c      	ldr	r1, [pc, #112]	; (2420c <startTrngHW+0x140>)
   2419a:	03d2      	lsls	r2, r2, #15
   2419c:	0992      	lsrs	r2, r2, #6
   2419e:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   241a2:	2201      	movs	r2, #1
   241a4:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   241a8:	683a      	ldr	r2, [r7, #0]
   241aa:	6829      	ldr	r1, [r5, #0]
   241ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   241b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   241b4:	603a      	str	r2, [r7, #0]
   241b6:	6829      	ldr	r1, [r5, #0]
   241b8:	4618      	mov	r0, r3
   241ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   241be:	603a      	str	r2, [r7, #0]
   241c0:	b003      	add	sp, #12
   241c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   241c6:	4b13      	ldr	r3, [pc, #76]	; (24214 <startTrngHW+0x148>)
   241c8:	4618      	mov	r0, r3
   241ca:	b003      	add	sp, #12
   241cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   241d0:	4b11      	ldr	r3, [pc, #68]	; (24218 <startTrngHW+0x14c>)
   241d2:	4618      	mov	r0, r3
   241d4:	b003      	add	sp, #12
   241d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   241da:	4b0f      	ldr	r3, [pc, #60]	; (24218 <startTrngHW+0x14c>)
   241dc:	4618      	mov	r0, r3
   241de:	4770      	bx	lr
   241e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   241e4:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   241e8:	3101      	adds	r1, #1
   241ea:	d006      	beq.n	241fa <startTrngHW+0x12e>
   241ec:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   241f0:	4907      	ldr	r1, [pc, #28]	; (24210 <startTrngHW+0x144>)
   241f2:	fba1 1202 	umull	r1, r2, r1, r2
   241f6:	0912      	lsrs	r2, r2, #4
   241f8:	e7c9      	b.n	2418e <startTrngHW+0xc2>
   241fa:	2216      	movs	r2, #22
   241fc:	e7c7      	b.n	2418e <startTrngHW+0xc2>
   241fe:	f04f 0803 	mov.w	r8, #3
   24202:	e791      	b.n	24128 <startTrngHW+0x5c>
   24204:	f04f 0802 	mov.w	r8, #2
   24208:	e78e      	b.n	24128 <startTrngHW+0x5c>
   2420a:	bf00      	nop
   2420c:	5002b000 	.word	0x5002b000
   24210:	aaaaaaab 	.word	0xaaaaaaab
   24214:	00f10c31 	.word	0x00f10c31
   24218:	00f10c35 	.word	0x00f10c35

0002421c <LLF_RND_RepetitionCounterTest.part.0>:
   2421c:	b570      	push	{r4, r5, r6, lr}
   2421e:	00c9      	lsls	r1, r1, #3
   24220:	2400      	movs	r4, #0
   24222:	1e4e      	subs	r6, r1, #1
   24224:	f04f 0c01 	mov.w	ip, #1
   24228:	4625      	mov	r5, r4
   2422a:	46a6      	mov	lr, r4
   2422c:	e008      	b.n	24240 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   2422e:	459e      	cmp	lr, r3
   24230:	d015      	beq.n	2425e <LLF_RND_RepetitionCounterTest.part.0+0x42>
   24232:	2501      	movs	r5, #1
   24234:	45b4      	cmp	ip, r6
   24236:	d817      	bhi.n	24268 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   24238:	3401      	adds	r4, #1
   2423a:	f10c 0c01 	add.w	ip, ip, #1
   2423e:	469e      	mov	lr, r3
   24240:	0963      	lsrs	r3, r4, #5
   24242:	f004 011f 	and.w	r1, r4, #31
   24246:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2424a:	291f      	cmp	r1, #31
   2424c:	fa23 f301 	lsr.w	r3, r3, r1
   24250:	bf18      	it	ne
   24252:	f003 0301 	andne.w	r3, r3, #1
   24256:	2c00      	cmp	r4, #0
   24258:	d1e9      	bne.n	2422e <LLF_RND_RepetitionCounterTest.part.0+0x12>
   2425a:	2501      	movs	r5, #1
   2425c:	e7ec      	b.n	24238 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   2425e:	3501      	adds	r5, #1
   24260:	4295      	cmp	r5, r2
   24262:	d1e7      	bne.n	24234 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   24264:	4801      	ldr	r0, [pc, #4]	; (2426c <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   24266:	bd70      	pop	{r4, r5, r6, pc}
   24268:	2000      	movs	r0, #0
   2426a:	bd70      	pop	{r4, r5, r6, pc}
   2426c:	00f10c36 	.word	0x00f10c36

00024270 <LLF_RND_AdaptiveProportionTest>:
   24270:	2800      	cmp	r0, #0
   24272:	d03f      	beq.n	242f4 <LLF_RND_AdaptiveProportionTest+0x84>
   24274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24278:	1e4c      	subs	r4, r1, #1
   2427a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   2427e:	d228      	bcs.n	242d2 <LLF_RND_AdaptiveProportionTest+0x62>
   24280:	b33b      	cbz	r3, 242d2 <LLF_RND_AdaptiveProportionTest+0x62>
   24282:	b332      	cbz	r2, 242d2 <LLF_RND_AdaptiveProportionTest+0x62>
   24284:	f04f 0e00 	mov.w	lr, #0
   24288:	00cf      	lsls	r7, r1, #3
   2428a:	4676      	mov	r6, lr
   2428c:	4675      	mov	r5, lr
   2428e:	4674      	mov	r4, lr
   24290:	f103 38ff 	add.w	r8, r3, #4294967295
   24294:	0961      	lsrs	r1, r4, #5
   24296:	f004 0c1f 	and.w	ip, r4, #31
   2429a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   2429e:	f1bc 0f1f 	cmp.w	ip, #31
   242a2:	fa21 f10c 	lsr.w	r1, r1, ip
   242a6:	bf18      	it	ne
   242a8:	f001 0101 	andne.w	r1, r1, #1
   242ac:	b1a4      	cbz	r4, 242d8 <LLF_RND_AdaptiveProportionTest+0x68>
   242ae:	42ab      	cmp	r3, r5
   242b0:	d018      	beq.n	242e4 <LLF_RND_AdaptiveProportionTest+0x74>
   242b2:	428e      	cmp	r6, r1
   242b4:	bf08      	it	eq
   242b6:	f10e 0e01 	addeq.w	lr, lr, #1
   242ba:	45a8      	cmp	r8, r5
   242bc:	d015      	beq.n	242ea <LLF_RND_AdaptiveProportionTest+0x7a>
   242be:	3501      	adds	r5, #1
   242c0:	4631      	mov	r1, r6
   242c2:	3401      	adds	r4, #1
   242c4:	42bc      	cmp	r4, r7
   242c6:	d001      	beq.n	242cc <LLF_RND_AdaptiveProportionTest+0x5c>
   242c8:	460e      	mov	r6, r1
   242ca:	e7e3      	b.n	24294 <LLF_RND_AdaptiveProportionTest+0x24>
   242cc:	2000      	movs	r0, #0
   242ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   242d2:	4809      	ldr	r0, [pc, #36]	; (242f8 <LLF_RND_AdaptiveProportionTest+0x88>)
   242d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   242d8:	f04f 0e01 	mov.w	lr, #1
   242dc:	4674      	mov	r4, lr
   242de:	4675      	mov	r5, lr
   242e0:	460e      	mov	r6, r1
   242e2:	e7d7      	b.n	24294 <LLF_RND_AdaptiveProportionTest+0x24>
   242e4:	2501      	movs	r5, #1
   242e6:	46ae      	mov	lr, r5
   242e8:	e7eb      	b.n	242c2 <LLF_RND_AdaptiveProportionTest+0x52>
   242ea:	4572      	cmp	r2, lr
   242ec:	d3f1      	bcc.n	242d2 <LLF_RND_AdaptiveProportionTest+0x62>
   242ee:	4631      	mov	r1, r6
   242f0:	461d      	mov	r5, r3
   242f2:	e7e6      	b.n	242c2 <LLF_RND_AdaptiveProportionTest+0x52>
   242f4:	4800      	ldr	r0, [pc, #0]	; (242f8 <LLF_RND_AdaptiveProportionTest+0x88>)
   242f6:	4770      	bx	lr
   242f8:	00f10c37 	.word	0x00f10c37

000242fc <getTrngSource>:
   242fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24300:	b091      	sub	sp, #68	; 0x44
   24302:	460d      	mov	r5, r1
   24304:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   24308:	4681      	mov	r9, r0
   2430a:	2900      	cmp	r1, #0
   2430c:	d14c      	bne.n	243a8 <getTrngSource+0xac>
   2430e:	6928      	ldr	r0, [r5, #16]
   24310:	9006      	str	r0, [sp, #24]
   24312:	981a      	ldr	r0, [sp, #104]	; 0x68
   24314:	601c      	str	r4, [r3, #0]
   24316:	2300      	movs	r3, #0
   24318:	6003      	str	r3, [r0, #0]
   2431a:	2a00      	cmp	r2, #0
   2431c:	f000 8124 	beq.w	24568 <getTrngSource+0x26c>
   24320:	4b9d      	ldr	r3, [pc, #628]	; (24598 <getTrngSource+0x29c>)
   24322:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   24324:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   24328:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2432c:	429a      	cmp	r2, r3
   2432e:	d147      	bne.n	243c0 <getTrngSource+0xc4>
   24330:	290a      	cmp	r1, #10
   24332:	d145      	bne.n	243c0 <getTrngSource+0xc4>
   24334:	f899 3003 	ldrb.w	r3, [r9, #3]
   24338:	9308      	str	r3, [sp, #32]
   2433a:	f104 0308 	add.w	r3, r4, #8
   2433e:	9a06      	ldr	r2, [sp, #24]
   24340:	9307      	str	r3, [sp, #28]
   24342:	4b96      	ldr	r3, [pc, #600]	; (2459c <getTrngSource+0x2a0>)
   24344:	4c94      	ldr	r4, [pc, #592]	; (24598 <getTrngSource+0x29c>)
   24346:	fba3 1302 	umull	r1, r3, r3, r2
   2434a:	089b      	lsrs	r3, r3, #2
   2434c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   24350:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   24354:	9303      	str	r3, [sp, #12]
   24356:	2304      	movs	r3, #4
   24358:	9305      	str	r3, [sp, #20]
   2435a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2435c:	9e06      	ldr	r6, [sp, #24]
   2435e:	601e      	str	r6, [r3, #0]
   24360:	2e00      	cmp	r6, #0
   24362:	d033      	beq.n	243cc <getTrngSource+0xd0>
   24364:	f8dd 801c 	ldr.w	r8, [sp, #28]
   24368:	2700      	movs	r7, #0
   2436a:	f04f 0a01 	mov.w	sl, #1
   2436e:	f000 fcbf 	bl	24cf0 <LLF_RND_TurnOffTrng>
   24372:	2300      	movs	r3, #0
   24374:	9309      	str	r3, [sp, #36]	; 0x24
   24376:	f1b9 0f00 	cmp.w	r9, #0
   2437a:	f000 80df 	beq.w	2453c <getTrngSource+0x240>
   2437e:	2d00      	cmp	r5, #0
   24380:	f000 80dc 	beq.w	2453c <getTrngSource+0x240>
   24384:	9b08      	ldr	r3, [sp, #32]
   24386:	b1eb      	cbz	r3, 243c4 <getTrngSource+0xc8>
   24388:	a908      	add	r1, sp, #32
   2438a:	4628      	mov	r0, r5
   2438c:	f000 fca0 	bl	24cd0 <LLF_RND_GetFastestRosc>
   24390:	2800      	cmp	r0, #0
   24392:	d03e      	beq.n	24412 <getTrngSource+0x116>
   24394:	4b82      	ldr	r3, [pc, #520]	; (245a0 <getTrngSource+0x2a4>)
   24396:	4298      	cmp	r0, r3
   24398:	d118      	bne.n	243cc <getTrngSource+0xd0>
   2439a:	9003      	str	r0, [sp, #12]
   2439c:	f000 fca8 	bl	24cf0 <LLF_RND_TurnOffTrng>
   243a0:	9803      	ldr	r0, [sp, #12]
   243a2:	b011      	add	sp, #68	; 0x44
   243a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   243a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   243ac:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   243b0:	3601      	adds	r6, #1
   243b2:	bf14      	ite	ne
   243b4:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   243b8:	f44f 7004 	moveq.w	r0, #528	; 0x210
   243bc:	9006      	str	r0, [sp, #24]
   243be:	e7a8      	b.n	24312 <getTrngSource+0x16>
   243c0:	4878      	ldr	r0, [pc, #480]	; (245a4 <getTrngSource+0x2a8>)
   243c2:	e7ea      	b.n	2439a <getTrngSource+0x9e>
   243c4:	4878      	ldr	r0, [pc, #480]	; (245a8 <getTrngSource+0x2ac>)
   243c6:	4b76      	ldr	r3, [pc, #472]	; (245a0 <getTrngSource+0x2a4>)
   243c8:	4298      	cmp	r0, r3
   243ca:	d0e6      	beq.n	2439a <getTrngSource+0x9e>
   243cc:	9b08      	ldr	r3, [sp, #32]
   243ce:	2b08      	cmp	r3, #8
   243d0:	f000 80c8 	beq.w	24564 <getTrngSource+0x268>
   243d4:	005b      	lsls	r3, r3, #1
   243d6:	2200      	movs	r2, #0
   243d8:	9308      	str	r3, [sp, #32]
   243da:	9200      	str	r2, [sp, #0]
   243dc:	ab08      	add	r3, sp, #32
   243de:	4629      	mov	r1, r5
   243e0:	4648      	mov	r0, r9
   243e2:	f7ff fe73 	bl	240cc <startTrngHW>
   243e6:	4b70      	ldr	r3, [pc, #448]	; (245a8 <getTrngSource+0x2ac>)
   243e8:	4298      	cmp	r0, r3
   243ea:	f000 80b7 	beq.w	2455c <getTrngSource+0x260>
   243ee:	2800      	cmp	r0, #0
   243f0:	d1d3      	bne.n	2439a <getTrngSource+0x9e>
   243f2:	f8d9 2000 	ldr.w	r2, [r9]
   243f6:	0a13      	lsrs	r3, r2, #8
   243f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   243fc:	4313      	orrs	r3, r2
   243fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   24402:	f8c9 3000 	str.w	r3, [r9]
   24406:	9b05      	ldr	r3, [sp, #20]
   24408:	3b01      	subs	r3, #1
   2440a:	9305      	str	r3, [sp, #20]
   2440c:	d1a5      	bne.n	2435a <getTrngSource+0x5e>
   2440e:	2000      	movs	r0, #0
   24410:	e7c3      	b.n	2439a <getTrngSource+0x9e>
   24412:	9808      	ldr	r0, [sp, #32]
   24414:	4629      	mov	r1, r5
   24416:	f000 fc3d 	bl	24c94 <LLF_RND_GetRoscSampleCnt>
   2441a:	2800      	cmp	r0, #0
   2441c:	d1ba      	bne.n	24394 <getTrngSource+0x98>
   2441e:	9b08      	ldr	r3, [sp, #32]
   24420:	2b08      	cmp	r3, #8
   24422:	f000 8095 	beq.w	24550 <getTrngSource+0x254>
   24426:	2b04      	cmp	r3, #4
   24428:	f000 8095 	beq.w	24556 <getTrngSource+0x25a>
   2442c:	f1a3 0302 	sub.w	r3, r3, #2
   24430:	fab3 f383 	clz	r3, r3
   24434:	095b      	lsrs	r3, r3, #5
   24436:	9304      	str	r3, [sp, #16]
   24438:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   2443c:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   24440:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   24444:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   24446:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   2444a:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   2444e:	4293      	cmp	r3, r2
   24450:	d1f6      	bne.n	24440 <getTrngSource+0x144>
   24452:	f04f 0b00 	mov.w	fp, #0
   24456:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   2445a:	f04f 30ff 	mov.w	r0, #4294967295
   2445e:	f7ff fd07 	bl	23e70 <CC_HalClearInterruptBit>
   24462:	f06f 031b 	mvn.w	r3, #27
   24466:	4658      	mov	r0, fp
   24468:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   2446c:	f7ff fd0e 	bl	23e8c <CC_HalMaskInterrupt>
   24470:	9b04      	ldr	r3, [sp, #16]
   24472:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   24476:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   2447a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   2447e:	f7ff fd05 	bl	23e8c <CC_HalMaskInterrupt>
   24482:	230a      	movs	r3, #10
   24484:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   24488:	692b      	ldr	r3, [r5, #16]
   2448a:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   2448e:	fbab 2303 	umull	r2, r3, fp, r3
   24492:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   24494:	091b      	lsrs	r3, r3, #4
   24496:	fb02 f303 	mul.w	r3, r2, r3
   2449a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2449e:	03db      	lsls	r3, r3, #15
   244a0:	099b      	lsrs	r3, r3, #6
   244a2:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   244a6:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   244aa:	9908      	ldr	r1, [sp, #32]
   244ac:	f8d9 2000 	ldr.w	r2, [r9]
   244b0:	020b      	lsls	r3, r1, #8
   244b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   244b6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   244ba:	4313      	orrs	r3, r2
   244bc:	f8c9 3000 	str.w	r3, [r9]
   244c0:	a809      	add	r0, sp, #36	; 0x24
   244c2:	f000 fbd7 	bl	24c74 <LLF_RND_WaitRngInterrupt>
   244c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   244c8:	f003 031a 	and.w	r3, r3, #26
   244cc:	4303      	orrs	r3, r0
   244ce:	f47f af7d 	bne.w	243cc <getTrngSource+0xd0>
   244d2:	fbab 3b06 	umull	r3, fp, fp, r6
   244d6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   244da:	930a      	str	r3, [sp, #40]	; 0x28
   244dc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   244e0:	930b      	str	r3, [sp, #44]	; 0x2c
   244e2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   244e6:	930c      	str	r3, [sp, #48]	; 0x30
   244e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   244ec:	930d      	str	r3, [sp, #52]	; 0x34
   244ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   244f2:	930e      	str	r3, [sp, #56]	; 0x38
   244f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   244f8:	930f      	str	r3, [sp, #60]	; 0x3c
   244fa:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   244fe:	d101      	bne.n	24504 <getTrngSource+0x208>
   24500:	9b03      	ldr	r3, [sp, #12]
   24502:	b9eb      	cbnz	r3, 24540 <getTrngSource+0x244>
   24504:	4640      	mov	r0, r8
   24506:	2218      	movs	r2, #24
   24508:	a90a      	add	r1, sp, #40	; 0x28
   2450a:	3e18      	subs	r6, #24
   2450c:	f108 0818 	add.w	r8, r8, #24
   24510:	f7ff fd3c 	bl	23f8c <CC_PalMemCopyPlat>
   24514:	3701      	adds	r7, #1
   24516:	2e00      	cmp	r6, #0
   24518:	f47f af29 	bne.w	2436e <getTrngSource+0x72>
   2451c:	9b06      	ldr	r3, [sp, #24]
   2451e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   24522:	d836      	bhi.n	24592 <getTrngSource+0x296>
   24524:	9e07      	ldr	r6, [sp, #28]
   24526:	696a      	ldr	r2, [r5, #20]
   24528:	4619      	mov	r1, r3
   2452a:	4630      	mov	r0, r6
   2452c:	461f      	mov	r7, r3
   2452e:	f7ff fe75 	bl	2421c <LLF_RND_RepetitionCounterTest.part.0>
   24532:	b320      	cbz	r0, 2457e <getTrngSource+0x282>
   24534:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   24536:	2300      	movs	r3, #0
   24538:	6013      	str	r3, [r2, #0]
   2453a:	e72b      	b.n	24394 <getTrngSource+0x98>
   2453c:	481b      	ldr	r0, [pc, #108]	; (245ac <getTrngSource+0x2b0>)
   2453e:	e729      	b.n	24394 <getTrngSource+0x98>
   24540:	4640      	mov	r0, r8
   24542:	461a      	mov	r2, r3
   24544:	a90a      	add	r1, sp, #40	; 0x28
   24546:	1af6      	subs	r6, r6, r3
   24548:	4498      	add	r8, r3
   2454a:	f7ff fd1f 	bl	23f8c <CC_PalMemCopyPlat>
   2454e:	e7e1      	b.n	24514 <getTrngSource+0x218>
   24550:	2303      	movs	r3, #3
   24552:	9304      	str	r3, [sp, #16]
   24554:	e770      	b.n	24438 <getTrngSource+0x13c>
   24556:	2302      	movs	r3, #2
   24558:	9304      	str	r3, [sp, #16]
   2455a:	e76d      	b.n	24438 <getTrngSource+0x13c>
   2455c:	6a2b      	ldr	r3, [r5, #32]
   2455e:	2b00      	cmp	r3, #0
   24560:	f43f af1b 	beq.w	2439a <getTrngSource+0x9e>
   24564:	4812      	ldr	r0, [pc, #72]	; (245b0 <getTrngSource+0x2b4>)
   24566:	e718      	b.n	2439a <getTrngSource+0x9e>
   24568:	9100      	str	r1, [sp, #0]
   2456a:	ab08      	add	r3, sp, #32
   2456c:	2201      	movs	r2, #1
   2456e:	4629      	mov	r1, r5
   24570:	4648      	mov	r0, r9
   24572:	f7ff fdab 	bl	240cc <startTrngHW>
   24576:	2800      	cmp	r0, #0
   24578:	f43f aedf 	beq.w	2433a <getTrngSource+0x3e>
   2457c:	e70d      	b.n	2439a <getTrngSource+0x9e>
   2457e:	69aa      	ldr	r2, [r5, #24]
   24580:	f44f 6380 	mov.w	r3, #1024	; 0x400
   24584:	4639      	mov	r1, r7
   24586:	4630      	mov	r0, r6
   24588:	f7ff fe72 	bl	24270 <LLF_RND_AdaptiveProportionTest>
   2458c:	2800      	cmp	r0, #0
   2458e:	d1d1      	bne.n	24534 <getTrngSource+0x238>
   24590:	e73d      	b.n	2440e <getTrngSource+0x112>
   24592:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   24594:	601e      	str	r6, [r3, #0]
   24596:	e719      	b.n	243cc <getTrngSource+0xd0>
   24598:	5002b000 	.word	0x5002b000
   2459c:	aaaaaaab 	.word	0xaaaaaaab
   245a0:	00f10c02 	.word	0x00f10c02
   245a4:	00f10c30 	.word	0x00f10c30
   245a8:	00f10c31 	.word	0x00f10c31
   245ac:	00f10c35 	.word	0x00f10c35
   245b0:	00f10c32 	.word	0x00f10c32

000245b4 <LLF_RND_GetTrngSource>:
   245b4:	b410      	push	{r4}
   245b6:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   245ba:	9401      	str	r4, [sp, #4]
   245bc:	9c03      	ldr	r4, [sp, #12]
   245be:	9402      	str	r4, [sp, #8]
   245c0:	2400      	movs	r4, #0
   245c2:	9403      	str	r4, [sp, #12]
   245c4:	bc10      	pop	{r4}
   245c6:	f7ff be99 	b.w	242fc <getTrngSource>
   245ca:	bf00      	nop

000245cc <LLF_RND_RunTrngStartupTest>:
   245cc:	b510      	push	{r4, lr}
   245ce:	b086      	sub	sp, #24
   245d0:	ab05      	add	r3, sp, #20
   245d2:	2401      	movs	r4, #1
   245d4:	e9cd 2401 	strd	r2, r4, [sp, #4]
   245d8:	9300      	str	r3, [sp, #0]
   245da:	2200      	movs	r2, #0
   245dc:	ab04      	add	r3, sp, #16
   245de:	f7ff fe8d 	bl	242fc <getTrngSource>
   245e2:	b006      	add	sp, #24
   245e4:	bd10      	pop	{r4, pc}
   245e6:	bf00      	nop

000245e8 <mbedtls_hardware_poll>:
   245e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   245ea:	b089      	sub	sp, #36	; 0x24
   245ec:	9205      	str	r2, [sp, #20]
   245ee:	2900      	cmp	r1, #0
   245f0:	d064      	beq.n	246bc <mbedtls_hardware_poll+0xd4>
   245f2:	461c      	mov	r4, r3
   245f4:	2b00      	cmp	r3, #0
   245f6:	d061      	beq.n	246bc <mbedtls_hardware_poll+0xd4>
   245f8:	4615      	mov	r5, r2
   245fa:	2a00      	cmp	r2, #0
   245fc:	d05e      	beq.n	246bc <mbedtls_hardware_poll+0xd4>
   245fe:	4f31      	ldr	r7, [pc, #196]	; (246c4 <mbedtls_hardware_poll+0xdc>)
   24600:	460e      	mov	r6, r1
   24602:	6838      	ldr	r0, [r7, #0]
   24604:	f04f 31ff 	mov.w	r1, #4294967295
   24608:	f7ff fcdc 	bl	23fc4 <CC_PalMutexLock>
   2460c:	2800      	cmp	r0, #0
   2460e:	d14b      	bne.n	246a8 <mbedtls_hardware_poll+0xc0>
   24610:	2000      	movs	r0, #0
   24612:	f7ff fd07 	bl	24024 <CC_PalPowerSaveModeSelect>
   24616:	2800      	cmp	r0, #0
   24618:	d142      	bne.n	246a0 <mbedtls_hardware_poll+0xb8>
   2461a:	482b      	ldr	r0, [pc, #172]	; (246c8 <mbedtls_hardware_poll+0xe0>)
   2461c:	f000 fa9a 	bl	24b54 <RNG_PLAT_SetUserRngParameters>
   24620:	b1d8      	cbz	r0, 2465a <mbedtls_hardware_poll+0x72>
   24622:	2001      	movs	r0, #1
   24624:	f04f 36ff 	mov.w	r6, #4294967295
   24628:	f7ff fcfc 	bl	24024 <CC_PalPowerSaveModeSelect>
   2462c:	2800      	cmp	r0, #0
   2462e:	d133      	bne.n	24698 <mbedtls_hardware_poll+0xb0>
   24630:	4826      	ldr	r0, [pc, #152]	; (246cc <mbedtls_hardware_poll+0xe4>)
   24632:	f44f 7108 	mov.w	r1, #544	; 0x220
   24636:	f7fe fe5f 	bl	232f8 <mbedtls_zeroize_internal>
   2463a:	4825      	ldr	r0, [pc, #148]	; (246d0 <mbedtls_hardware_poll+0xe8>)
   2463c:	2104      	movs	r1, #4
   2463e:	f7fe fe5b 	bl	232f8 <mbedtls_zeroize_internal>
   24642:	4821      	ldr	r0, [pc, #132]	; (246c8 <mbedtls_hardware_poll+0xe0>)
   24644:	2128      	movs	r1, #40	; 0x28
   24646:	f7fe fe57 	bl	232f8 <mbedtls_zeroize_internal>
   2464a:	6838      	ldr	r0, [r7, #0]
   2464c:	f7ff fcc2 	bl	23fd4 <CC_PalMutexUnlock>
   24650:	2800      	cmp	r0, #0
   24652:	d12d      	bne.n	246b0 <mbedtls_hardware_poll+0xc8>
   24654:	4630      	mov	r0, r6
   24656:	b009      	add	sp, #36	; 0x24
   24658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2465a:	4b1c      	ldr	r3, [pc, #112]	; (246cc <mbedtls_hardware_poll+0xe4>)
   2465c:	9302      	str	r3, [sp, #8]
   2465e:	ab07      	add	r3, sp, #28
   24660:	9003      	str	r0, [sp, #12]
   24662:	4602      	mov	r2, r0
   24664:	9300      	str	r3, [sp, #0]
   24666:	4918      	ldr	r1, [pc, #96]	; (246c8 <mbedtls_hardware_poll+0xe0>)
   24668:	4819      	ldr	r0, [pc, #100]	; (246d0 <mbedtls_hardware_poll+0xe8>)
   2466a:	9401      	str	r4, [sp, #4]
   2466c:	ab05      	add	r3, sp, #20
   2466e:	f7ff ffa1 	bl	245b4 <LLF_RND_GetTrngSource>
   24672:	4603      	mov	r3, r0
   24674:	2800      	cmp	r0, #0
   24676:	d1d4      	bne.n	24622 <mbedtls_hardware_poll+0x3a>
   24678:	6822      	ldr	r2, [r4, #0]
   2467a:	42aa      	cmp	r2, r5
   2467c:	d3d1      	bcc.n	24622 <mbedtls_hardware_poll+0x3a>
   2467e:	9907      	ldr	r1, [sp, #28]
   24680:	4630      	mov	r0, r6
   24682:	3108      	adds	r1, #8
   24684:	462a      	mov	r2, r5
   24686:	461e      	mov	r6, r3
   24688:	f7ff fc80 	bl	23f8c <CC_PalMemCopyPlat>
   2468c:	6025      	str	r5, [r4, #0]
   2468e:	2001      	movs	r0, #1
   24690:	f7ff fcc8 	bl	24024 <CC_PalPowerSaveModeSelect>
   24694:	2800      	cmp	r0, #0
   24696:	d0cb      	beq.n	24630 <mbedtls_hardware_poll+0x48>
   24698:	480e      	ldr	r0, [pc, #56]	; (246d4 <mbedtls_hardware_poll+0xec>)
   2469a:	f7fe fd17 	bl	230cc <CC_PalAbort>
   2469e:	e7c7      	b.n	24630 <mbedtls_hardware_poll+0x48>
   246a0:	480d      	ldr	r0, [pc, #52]	; (246d8 <mbedtls_hardware_poll+0xf0>)
   246a2:	f7fe fd13 	bl	230cc <CC_PalAbort>
   246a6:	e7b8      	b.n	2461a <mbedtls_hardware_poll+0x32>
   246a8:	480c      	ldr	r0, [pc, #48]	; (246dc <mbedtls_hardware_poll+0xf4>)
   246aa:	f7fe fd0f 	bl	230cc <CC_PalAbort>
   246ae:	e7af      	b.n	24610 <mbedtls_hardware_poll+0x28>
   246b0:	480b      	ldr	r0, [pc, #44]	; (246e0 <mbedtls_hardware_poll+0xf8>)
   246b2:	f7fe fd0b 	bl	230cc <CC_PalAbort>
   246b6:	4630      	mov	r0, r6
   246b8:	b009      	add	sp, #36	; 0x24
   246ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   246bc:	f04f 36ff 	mov.w	r6, #4294967295
   246c0:	e7c8      	b.n	24654 <mbedtls_hardware_poll+0x6c>
   246c2:	bf00      	nop
   246c4:	20000778 	.word	0x20000778
   246c8:	20003468 	.word	0x20003468
   246cc:	20003248 	.word	0x20003248
   246d0:	20003244 	.word	0x20003244
   246d4:	0002a3e8 	.word	0x0002a3e8
   246d8:	0002a3c8 	.word	0x0002a3c8
   246dc:	0002a3b0 	.word	0x0002a3b0
   246e0:	0002a440 	.word	0x0002a440

000246e4 <cc_mbedtls_aes_init>:
   246e4:	b510      	push	{r4, lr}
   246e6:	4604      	mov	r4, r0
   246e8:	b130      	cbz	r0, 246f8 <cc_mbedtls_aes_init+0x14>
   246ea:	2200      	movs	r2, #0
   246ec:	2301      	movs	r3, #1
   246ee:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   246f2:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   246f6:	bd10      	pop	{r4, pc}
   246f8:	4801      	ldr	r0, [pc, #4]	; (24700 <cc_mbedtls_aes_init+0x1c>)
   246fa:	f7fe fce7 	bl	230cc <CC_PalAbort>
   246fe:	e7f4      	b.n	246ea <cc_mbedtls_aes_init+0x6>
   24700:	0002a458 	.word	0x0002a458

00024704 <cc_mbedtls_aes_free>:
   24704:	b118      	cbz	r0, 2470e <cc_mbedtls_aes_free+0xa>
   24706:	2274      	movs	r2, #116	; 0x74
   24708:	2100      	movs	r1, #0
   2470a:	f7ff bc41 	b.w	23f90 <CC_PalMemSetPlat>
   2470e:	4770      	bx	lr

00024710 <cc_mbedtls_aes_setkey_enc>:
   24710:	b190      	cbz	r0, 24738 <cc_mbedtls_aes_setkey_enc+0x28>
   24712:	b1a1      	cbz	r1, 2473e <cc_mbedtls_aes_setkey_enc+0x2e>
   24714:	b510      	push	{r4, lr}
   24716:	2a80      	cmp	r2, #128	; 0x80
   24718:	f04f 0400 	mov.w	r4, #0
   2471c:	6384      	str	r4, [r0, #56]	; 0x38
   2471e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   24722:	d106      	bne.n	24732 <cc_mbedtls_aes_setkey_enc+0x22>
   24724:	2210      	movs	r2, #16
   24726:	6304      	str	r4, [r0, #48]	; 0x30
   24728:	4410      	add	r0, r2
   2472a:	f7ff fc2f 	bl	23f8c <CC_PalMemCopyPlat>
   2472e:	4620      	mov	r0, r4
   24730:	bd10      	pop	{r4, pc}
   24732:	f06f 001f 	mvn.w	r0, #31
   24736:	bd10      	pop	{r4, pc}
   24738:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2473c:	4770      	bx	lr
   2473e:	f06f 001f 	mvn.w	r0, #31
   24742:	4770      	bx	lr

00024744 <cc_mbedtls_aes_crypt_ecb>:
   24744:	b328      	cbz	r0, 24792 <cc_mbedtls_aes_crypt_ecb+0x4e>
   24746:	b322      	cbz	r2, 24792 <cc_mbedtls_aes_crypt_ecb+0x4e>
   24748:	b31b      	cbz	r3, 24792 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2474a:	2901      	cmp	r1, #1
   2474c:	d821      	bhi.n	24792 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2474e:	b570      	push	{r4, r5, r6, lr}
   24750:	4604      	mov	r4, r0
   24752:	6b81      	ldr	r1, [r0, #56]	; 0x38
   24754:	b086      	sub	sp, #24
   24756:	d017      	beq.n	24788 <cc_mbedtls_aes_crypt_ecb+0x44>
   24758:	2901      	cmp	r1, #1
   2475a:	d117      	bne.n	2478c <cc_mbedtls_aes_crypt_ecb+0x48>
   2475c:	2510      	movs	r5, #16
   2475e:	2100      	movs	r1, #0
   24760:	eb0d 0605 	add.w	r6, sp, r5
   24764:	6361      	str	r1, [r4, #52]	; 0x34
   24766:	4610      	mov	r0, r2
   24768:	9500      	str	r5, [sp, #0]
   2476a:	9601      	str	r6, [sp, #4]
   2476c:	aa02      	add	r2, sp, #8
   2476e:	4629      	mov	r1, r5
   24770:	f000 faca 	bl	24d08 <SetDataBuffersInfo>
   24774:	b950      	cbnz	r0, 2478c <cc_mbedtls_aes_crypt_ecb+0x48>
   24776:	462b      	mov	r3, r5
   24778:	4632      	mov	r2, r6
   2477a:	a902      	add	r1, sp, #8
   2477c:	4620      	mov	r0, r4
   2477e:	f000 fd4b 	bl	25218 <ProcessAesDrv>
   24782:	b918      	cbnz	r0, 2478c <cc_mbedtls_aes_crypt_ecb+0x48>
   24784:	b006      	add	sp, #24
   24786:	bd70      	pop	{r4, r5, r6, pc}
   24788:	2900      	cmp	r1, #0
   2478a:	d0e7      	beq.n	2475c <cc_mbedtls_aes_crypt_ecb+0x18>
   2478c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   24790:	e7f8      	b.n	24784 <cc_mbedtls_aes_crypt_ecb+0x40>
   24792:	f06f 0021 	mvn.w	r0, #33	; 0x21
   24796:	4770      	bx	lr

00024798 <cc_mbedtls_sha256_init>:
   24798:	b510      	push	{r4, lr}
   2479a:	4604      	mov	r4, r0
   2479c:	b128      	cbz	r0, 247aa <cc_mbedtls_sha256_init+0x12>
   2479e:	4620      	mov	r0, r4
   247a0:	21f4      	movs	r1, #244	; 0xf4
   247a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   247a6:	f7ff bbf5 	b.w	23f94 <CC_PalMemSetZeroPlat>
   247aa:	4804      	ldr	r0, [pc, #16]	; (247bc <cc_mbedtls_sha256_init+0x24>)
   247ac:	f7fe fc8e 	bl	230cc <CC_PalAbort>
   247b0:	4620      	mov	r0, r4
   247b2:	21f4      	movs	r1, #244	; 0xf4
   247b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   247b8:	f7ff bbec 	b.w	23f94 <CC_PalMemSetZeroPlat>
   247bc:	0002a46c 	.word	0x0002a46c

000247c0 <cc_mbedtls_sha256_free>:
   247c0:	b110      	cbz	r0, 247c8 <cc_mbedtls_sha256_free+0x8>
   247c2:	21f4      	movs	r1, #244	; 0xf4
   247c4:	f7fe bd98 	b.w	232f8 <mbedtls_zeroize_internal>
   247c8:	4770      	bx	lr
   247ca:	bf00      	nop

000247cc <cc_mbedtls_sha256_starts>:
   247cc:	b508      	push	{r3, lr}
   247ce:	b161      	cbz	r1, 247ea <cc_mbedtls_sha256_starts+0x1e>
   247d0:	2901      	cmp	r1, #1
   247d2:	d107      	bne.n	247e4 <cc_mbedtls_sha256_starts+0x18>
   247d4:	2102      	movs	r1, #2
   247d6:	f000 f85b 	bl	24890 <mbedtls_sha_starts_internal>
   247da:	2800      	cmp	r0, #0
   247dc:	bf18      	it	ne
   247de:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   247e2:	bd08      	pop	{r3, pc}
   247e4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   247e8:	bd08      	pop	{r3, pc}
   247ea:	2101      	movs	r1, #1
   247ec:	f000 f850 	bl	24890 <mbedtls_sha_starts_internal>
   247f0:	e7f3      	b.n	247da <cc_mbedtls_sha256_starts+0xe>
   247f2:	bf00      	nop

000247f4 <cc_mbedtls_sha256_update>:
   247f4:	b530      	push	{r4, r5, lr}
   247f6:	4605      	mov	r5, r0
   247f8:	1888      	adds	r0, r1, r2
   247fa:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   247fe:	b0a1      	sub	sp, #132	; 0x84
   24800:	460b      	mov	r3, r1
   24802:	4614      	mov	r4, r2
   24804:	d801      	bhi.n	2480a <cc_mbedtls_sha256_update+0x16>
   24806:	2a80      	cmp	r2, #128	; 0x80
   24808:	d90c      	bls.n	24824 <cc_mbedtls_sha256_update+0x30>
   2480a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2480e:	d917      	bls.n	24840 <cc_mbedtls_sha256_update+0x4c>
   24810:	4622      	mov	r2, r4
   24812:	4619      	mov	r1, r3
   24814:	4628      	mov	r0, r5
   24816:	f000 f87d 	bl	24914 <mbedtls_sha_update_internal>
   2481a:	4604      	mov	r4, r0
   2481c:	b984      	cbnz	r4, 24840 <cc_mbedtls_sha256_update+0x4c>
   2481e:	4620      	mov	r0, r4
   24820:	b021      	add	sp, #132	; 0x84
   24822:	bd30      	pop	{r4, r5, pc}
   24824:	4668      	mov	r0, sp
   24826:	f7ff fbb1 	bl	23f8c <CC_PalMemCopyPlat>
   2482a:	4622      	mov	r2, r4
   2482c:	4669      	mov	r1, sp
   2482e:	4628      	mov	r0, r5
   24830:	f000 f870 	bl	24914 <mbedtls_sha_update_internal>
   24834:	2180      	movs	r1, #128	; 0x80
   24836:	4604      	mov	r4, r0
   24838:	4668      	mov	r0, sp
   2483a:	f7ff fbab 	bl	23f94 <CC_PalMemSetZeroPlat>
   2483e:	e7ed      	b.n	2481c <cc_mbedtls_sha256_update+0x28>
   24840:	f06f 0436 	mvn.w	r4, #54	; 0x36
   24844:	e7eb      	b.n	2481e <cc_mbedtls_sha256_update+0x2a>
   24846:	bf00      	nop

00024848 <cc_mbedtls_sha256_finish>:
   24848:	b570      	push	{r4, r5, r6, lr}
   2484a:	b1e8      	cbz	r0, 24888 <cc_mbedtls_sha256_finish+0x40>
   2484c:	460e      	mov	r6, r1
   2484e:	b1d9      	cbz	r1, 24888 <cc_mbedtls_sha256_finish+0x40>
   24850:	4604      	mov	r4, r0
   24852:	f000 f831 	bl	248b8 <mbedtls_sha_finish_internal>
   24856:	4605      	mov	r5, r0
   24858:	b9b0      	cbnz	r0, 24888 <cc_mbedtls_sha256_finish+0x40>
   2485a:	6823      	ldr	r3, [r4, #0]
   2485c:	2b01      	cmp	r3, #1
   2485e:	d00b      	beq.n	24878 <cc_mbedtls_sha256_finish+0x30>
   24860:	2b02      	cmp	r3, #2
   24862:	d001      	beq.n	24868 <cc_mbedtls_sha256_finish+0x20>
   24864:	4628      	mov	r0, r5
   24866:	bd70      	pop	{r4, r5, r6, pc}
   24868:	221c      	movs	r2, #28
   2486a:	f104 0108 	add.w	r1, r4, #8
   2486e:	4630      	mov	r0, r6
   24870:	f7ff fb8c 	bl	23f8c <CC_PalMemCopyPlat>
   24874:	4628      	mov	r0, r5
   24876:	bd70      	pop	{r4, r5, r6, pc}
   24878:	2220      	movs	r2, #32
   2487a:	f104 0108 	add.w	r1, r4, #8
   2487e:	4630      	mov	r0, r6
   24880:	f7ff fb84 	bl	23f8c <CC_PalMemCopyPlat>
   24884:	4628      	mov	r0, r5
   24886:	bd70      	pop	{r4, r5, r6, pc}
   24888:	f06f 0536 	mvn.w	r5, #54	; 0x36
   2488c:	e7ea      	b.n	24864 <cc_mbedtls_sha256_finish+0x1c>
   2488e:	bf00      	nop

00024890 <mbedtls_sha_starts_internal>:
   24890:	b178      	cbz	r0, 248b2 <mbedtls_sha_starts_internal+0x22>
   24892:	b538      	push	{r3, r4, r5, lr}
   24894:	4604      	mov	r4, r0
   24896:	460d      	mov	r5, r1
   24898:	21f0      	movs	r1, #240	; 0xf0
   2489a:	f7ff fb7b 	bl	23f94 <CC_PalMemSetZeroPlat>
   2489e:	2340      	movs	r3, #64	; 0x40
   248a0:	6025      	str	r5, [r4, #0]
   248a2:	65e3      	str	r3, [r4, #92]	; 0x5c
   248a4:	4620      	mov	r0, r4
   248a6:	f000 fa63 	bl	24d70 <InitHashDrv>
   248aa:	3800      	subs	r0, #0
   248ac:	bf18      	it	ne
   248ae:	2001      	movne	r0, #1
   248b0:	bd38      	pop	{r3, r4, r5, pc}
   248b2:	2001      	movs	r0, #1
   248b4:	4770      	bx	lr
   248b6:	bf00      	nop

000248b8 <mbedtls_sha_finish_internal>:
   248b8:	b570      	push	{r4, r5, r6, lr}
   248ba:	6e05      	ldr	r5, [r0, #96]	; 0x60
   248bc:	b0a4      	sub	sp, #144	; 0x90
   248be:	4604      	mov	r4, r0
   248c0:	ae04      	add	r6, sp, #16
   248c2:	b9e5      	cbnz	r5, 248fe <mbedtls_sha_finish_internal+0x46>
   248c4:	2201      	movs	r2, #1
   248c6:	2300      	movs	r3, #0
   248c8:	6062      	str	r2, [r4, #4]
   248ca:	4630      	mov	r0, r6
   248cc:	e9cd 3300 	strd	r3, r3, [sp]
   248d0:	aa02      	add	r2, sp, #8
   248d2:	4629      	mov	r1, r5
   248d4:	f000 fa18 	bl	24d08 <SetDataBuffersInfo>
   248d8:	b110      	cbz	r0, 248e0 <mbedtls_sha_finish_internal+0x28>
   248da:	2001      	movs	r0, #1
   248dc:	b024      	add	sp, #144	; 0x90
   248de:	bd70      	pop	{r4, r5, r6, pc}
   248e0:	462a      	mov	r2, r5
   248e2:	a902      	add	r1, sp, #8
   248e4:	4620      	mov	r0, r4
   248e6:	f000 fa6d 	bl	24dc4 <ProcessHashDrv>
   248ea:	2800      	cmp	r0, #0
   248ec:	d1f5      	bne.n	248da <mbedtls_sha_finish_internal+0x22>
   248ee:	4620      	mov	r0, r4
   248f0:	f000 fb7e 	bl	24ff0 <FinishHashDrv>
   248f4:	2800      	cmp	r0, #0
   248f6:	d1f0      	bne.n	248da <mbedtls_sha_finish_internal+0x22>
   248f8:	6620      	str	r0, [r4, #96]	; 0x60
   248fa:	b024      	add	sp, #144	; 0x90
   248fc:	bd70      	pop	{r4, r5, r6, pc}
   248fe:	2d80      	cmp	r5, #128	; 0x80
   24900:	462a      	mov	r2, r5
   24902:	f100 0164 	add.w	r1, r0, #100	; 0x64
   24906:	bf28      	it	cs
   24908:	2280      	movcs	r2, #128	; 0x80
   2490a:	4630      	mov	r0, r6
   2490c:	f7ff fb3e 	bl	23f8c <CC_PalMemCopyPlat>
   24910:	6e25      	ldr	r5, [r4, #96]	; 0x60
   24912:	e7d7      	b.n	248c4 <mbedtls_sha_finish_internal+0xc>

00024914 <mbedtls_sha_update_internal>:
   24914:	2800      	cmp	r0, #0
   24916:	f000 80cd 	beq.w	24ab4 <mbedtls_sha_update_internal+0x1a0>
   2491a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2491e:	4615      	mov	r5, r2
   24920:	b0a5      	sub	sp, #148	; 0x94
   24922:	2a00      	cmp	r2, #0
   24924:	f000 80b4 	beq.w	24a90 <mbedtls_sha_update_internal+0x17c>
   24928:	460f      	mov	r7, r1
   2492a:	2900      	cmp	r1, #0
   2492c:	f000 80ac 	beq.w	24a88 <mbedtls_sha_update_internal+0x174>
   24930:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   24934:	4606      	mov	r6, r0
   24936:	6e00      	ldr	r0, [r0, #96]	; 0x60
   24938:	d37d      	bcc.n	24a36 <mbedtls_sha_update_internal+0x122>
   2493a:	f64f 78ff 	movw	r8, #65535	; 0xffff
   2493e:	f106 0964 	add.w	r9, r6, #100	; 0x64
   24942:	e014      	b.n	2496e <mbedtls_sha_update_internal+0x5a>
   24944:	4283      	cmp	r3, r0
   24946:	46ba      	mov	sl, r7
   24948:	f64f 74ff 	movw	r4, #65535	; 0xffff
   2494c:	d029      	beq.n	249a2 <mbedtls_sha_update_internal+0x8e>
   2494e:	fbb4 fbf3 	udiv	fp, r4, r3
   24952:	fb03 fb0b 	mul.w	fp, r3, fp
   24956:	f1bb 0f00 	cmp.w	fp, #0
   2495a:	d144      	bne.n	249e6 <mbedtls_sha_update_internal+0xd2>
   2495c:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   24960:	4447      	add	r7, r8
   24962:	3dff      	subs	r5, #255	; 0xff
   24964:	2c00      	cmp	r4, #0
   24966:	d159      	bne.n	24a1c <mbedtls_sha_update_internal+0x108>
   24968:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2496c:	d363      	bcc.n	24a36 <mbedtls_sha_update_internal+0x122>
   2496e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   24970:	1a1c      	subs	r4, r3, r0
   24972:	fbb4 f2f3 	udiv	r2, r4, r3
   24976:	fb03 4412 	mls	r4, r3, r2, r4
   2497a:	2c00      	cmp	r4, #0
   2497c:	d0e2      	beq.n	24944 <mbedtls_sha_update_internal+0x30>
   2497e:	4544      	cmp	r4, r8
   24980:	bf28      	it	cs
   24982:	4644      	movcs	r4, r8
   24984:	4622      	mov	r2, r4
   24986:	4448      	add	r0, r9
   24988:	4639      	mov	r1, r7
   2498a:	f7ff faff 	bl	23f8c <CC_PalMemCopyPlat>
   2498e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   24990:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   24992:	4420      	add	r0, r4
   24994:	4283      	cmp	r3, r0
   24996:	eb07 0a04 	add.w	sl, r7, r4
   2499a:	6630      	str	r0, [r6, #96]	; 0x60
   2499c:	eba8 0404 	sub.w	r4, r8, r4
   249a0:	d1d5      	bne.n	2494e <mbedtls_sha_update_internal+0x3a>
   249a2:	2b80      	cmp	r3, #128	; 0x80
   249a4:	bf28      	it	cs
   249a6:	2380      	movcs	r3, #128	; 0x80
   249a8:	461a      	mov	r2, r3
   249aa:	4649      	mov	r1, r9
   249ac:	a804      	add	r0, sp, #16
   249ae:	f7ff faed 	bl	23f8c <CC_PalMemCopyPlat>
   249b2:	2300      	movs	r3, #0
   249b4:	e9cd 3300 	strd	r3, r3, [sp]
   249b8:	aa02      	add	r2, sp, #8
   249ba:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   249bc:	a804      	add	r0, sp, #16
   249be:	f000 f9a3 	bl	24d08 <SetDataBuffersInfo>
   249c2:	2800      	cmp	r0, #0
   249c4:	d160      	bne.n	24a88 <mbedtls_sha_update_internal+0x174>
   249c6:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   249c8:	a902      	add	r1, sp, #8
   249ca:	4630      	mov	r0, r6
   249cc:	f000 f9fa 	bl	24dc4 <ProcessHashDrv>
   249d0:	2800      	cmp	r0, #0
   249d2:	d159      	bne.n	24a88 <mbedtls_sha_update_internal+0x174>
   249d4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   249d6:	fbb4 fbf3 	udiv	fp, r4, r3
   249da:	fb03 fb0b 	mul.w	fp, r3, fp
   249de:	6630      	str	r0, [r6, #96]	; 0x60
   249e0:	f1bb 0f00 	cmp.w	fp, #0
   249e4:	d0ba      	beq.n	2495c <mbedtls_sha_update_internal+0x48>
   249e6:	2300      	movs	r3, #0
   249e8:	e9cd 3300 	strd	r3, r3, [sp]
   249ec:	aa02      	add	r2, sp, #8
   249ee:	4659      	mov	r1, fp
   249f0:	4650      	mov	r0, sl
   249f2:	f000 f989 	bl	24d08 <SetDataBuffersInfo>
   249f6:	2800      	cmp	r0, #0
   249f8:	d146      	bne.n	24a88 <mbedtls_sha_update_internal+0x174>
   249fa:	a902      	add	r1, sp, #8
   249fc:	465a      	mov	r2, fp
   249fe:	4630      	mov	r0, r6
   24a00:	f000 f9e0 	bl	24dc4 <ProcessHashDrv>
   24a04:	2800      	cmp	r0, #0
   24a06:	d13f      	bne.n	24a88 <mbedtls_sha_update_internal+0x174>
   24a08:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   24a0c:	eba4 040b 	sub.w	r4, r4, fp
   24a10:	6e30      	ldr	r0, [r6, #96]	; 0x60
   24a12:	44da      	add	sl, fp
   24a14:	4447      	add	r7, r8
   24a16:	3dff      	subs	r5, #255	; 0xff
   24a18:	2c00      	cmp	r4, #0
   24a1a:	d0a5      	beq.n	24968 <mbedtls_sha_update_internal+0x54>
   24a1c:	3019      	adds	r0, #25
   24a1e:	4651      	mov	r1, sl
   24a20:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   24a24:	4622      	mov	r2, r4
   24a26:	f7ff fab1 	bl	23f8c <CC_PalMemCopyPlat>
   24a2a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   24a2c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   24a30:	4420      	add	r0, r4
   24a32:	6630      	str	r0, [r6, #96]	; 0x60
   24a34:	d29b      	bcs.n	2496e <mbedtls_sha_update_internal+0x5a>
   24a36:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   24a38:	1a14      	subs	r4, r2, r0
   24a3a:	fbb4 f3f2 	udiv	r3, r4, r2
   24a3e:	fb02 4413 	mls	r4, r2, r3, r4
   24a42:	42ac      	cmp	r4, r5
   24a44:	bf28      	it	cs
   24a46:	462c      	movcs	r4, r5
   24a48:	bb34      	cbnz	r4, 24a98 <mbedtls_sha_update_internal+0x184>
   24a4a:	4290      	cmp	r0, r2
   24a4c:	d034      	beq.n	24ab8 <mbedtls_sha_update_internal+0x1a4>
   24a4e:	fbb5 f4f2 	udiv	r4, r5, r2
   24a52:	fb02 f404 	mul.w	r4, r2, r4
   24a56:	b96c      	cbnz	r4, 24a74 <mbedtls_sha_update_internal+0x160>
   24a58:	b1d5      	cbz	r5, 24a90 <mbedtls_sha_update_internal+0x17c>
   24a5a:	6e33      	ldr	r3, [r6, #96]	; 0x60
   24a5c:	3319      	adds	r3, #25
   24a5e:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   24a62:	462a      	mov	r2, r5
   24a64:	4639      	mov	r1, r7
   24a66:	f7ff fa91 	bl	23f8c <CC_PalMemCopyPlat>
   24a6a:	6e33      	ldr	r3, [r6, #96]	; 0x60
   24a6c:	442b      	add	r3, r5
   24a6e:	2000      	movs	r0, #0
   24a70:	6633      	str	r3, [r6, #96]	; 0x60
   24a72:	e00a      	b.n	24a8a <mbedtls_sha_update_internal+0x176>
   24a74:	2300      	movs	r3, #0
   24a76:	e9cd 3300 	strd	r3, r3, [sp]
   24a7a:	aa02      	add	r2, sp, #8
   24a7c:	4621      	mov	r1, r4
   24a7e:	4638      	mov	r0, r7
   24a80:	f000 f942 	bl	24d08 <SetDataBuffersInfo>
   24a84:	2800      	cmp	r0, #0
   24a86:	d033      	beq.n	24af0 <mbedtls_sha_update_internal+0x1dc>
   24a88:	2001      	movs	r0, #1
   24a8a:	b025      	add	sp, #148	; 0x94
   24a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a90:	4628      	mov	r0, r5
   24a92:	b025      	add	sp, #148	; 0x94
   24a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a98:	f106 0364 	add.w	r3, r6, #100	; 0x64
   24a9c:	4639      	mov	r1, r7
   24a9e:	4622      	mov	r2, r4
   24aa0:	4418      	add	r0, r3
   24aa2:	f7ff fa73 	bl	23f8c <CC_PalMemCopyPlat>
   24aa6:	6e30      	ldr	r0, [r6, #96]	; 0x60
   24aa8:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   24aaa:	4420      	add	r0, r4
   24aac:	1b2d      	subs	r5, r5, r4
   24aae:	4427      	add	r7, r4
   24ab0:	6630      	str	r0, [r6, #96]	; 0x60
   24ab2:	e7ca      	b.n	24a4a <mbedtls_sha_update_internal+0x136>
   24ab4:	2001      	movs	r0, #1
   24ab6:	4770      	bx	lr
   24ab8:	2a80      	cmp	r2, #128	; 0x80
   24aba:	bf28      	it	cs
   24abc:	2280      	movcs	r2, #128	; 0x80
   24abe:	f106 0164 	add.w	r1, r6, #100	; 0x64
   24ac2:	a804      	add	r0, sp, #16
   24ac4:	f7ff fa62 	bl	23f8c <CC_PalMemCopyPlat>
   24ac8:	2300      	movs	r3, #0
   24aca:	e9cd 3300 	strd	r3, r3, [sp]
   24ace:	a804      	add	r0, sp, #16
   24ad0:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   24ad2:	aa02      	add	r2, sp, #8
   24ad4:	f000 f918 	bl	24d08 <SetDataBuffersInfo>
   24ad8:	2800      	cmp	r0, #0
   24ada:	d1d5      	bne.n	24a88 <mbedtls_sha_update_internal+0x174>
   24adc:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   24ade:	a902      	add	r1, sp, #8
   24ae0:	4630      	mov	r0, r6
   24ae2:	f000 f96f 	bl	24dc4 <ProcessHashDrv>
   24ae6:	2800      	cmp	r0, #0
   24ae8:	d1ce      	bne.n	24a88 <mbedtls_sha_update_internal+0x174>
   24aea:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   24aec:	6630      	str	r0, [r6, #96]	; 0x60
   24aee:	e7ae      	b.n	24a4e <mbedtls_sha_update_internal+0x13a>
   24af0:	a902      	add	r1, sp, #8
   24af2:	4622      	mov	r2, r4
   24af4:	4630      	mov	r0, r6
   24af6:	f000 f965 	bl	24dc4 <ProcessHashDrv>
   24afa:	2800      	cmp	r0, #0
   24afc:	d1c4      	bne.n	24a88 <mbedtls_sha_update_internal+0x174>
   24afe:	4427      	add	r7, r4
   24b00:	1b2d      	subs	r5, r5, r4
   24b02:	e7a9      	b.n	24a58 <mbedtls_sha_update_internal+0x144>

00024b04 <cc_mbedtls_sha256>:
   24b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b06:	461c      	mov	r4, r3
   24b08:	4605      	mov	r5, r0
   24b0a:	4811      	ldr	r0, [pc, #68]	; (24b50 <cc_mbedtls_sha256+0x4c>)
   24b0c:	460e      	mov	r6, r1
   24b0e:	4617      	mov	r7, r2
   24b10:	f7ff fe42 	bl	24798 <cc_mbedtls_sha256_init>
   24b14:	4621      	mov	r1, r4
   24b16:	480e      	ldr	r0, [pc, #56]	; (24b50 <cc_mbedtls_sha256+0x4c>)
   24b18:	f7ff fe58 	bl	247cc <cc_mbedtls_sha256_starts>
   24b1c:	4604      	mov	r4, r0
   24b1e:	b120      	cbz	r0, 24b2a <cc_mbedtls_sha256+0x26>
   24b20:	480b      	ldr	r0, [pc, #44]	; (24b50 <cc_mbedtls_sha256+0x4c>)
   24b22:	f7ff fe4d 	bl	247c0 <cc_mbedtls_sha256_free>
   24b26:	4620      	mov	r0, r4
   24b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24b2a:	4809      	ldr	r0, [pc, #36]	; (24b50 <cc_mbedtls_sha256+0x4c>)
   24b2c:	4632      	mov	r2, r6
   24b2e:	4629      	mov	r1, r5
   24b30:	f7ff fe60 	bl	247f4 <cc_mbedtls_sha256_update>
   24b34:	4604      	mov	r4, r0
   24b36:	2800      	cmp	r0, #0
   24b38:	d1f2      	bne.n	24b20 <cc_mbedtls_sha256+0x1c>
   24b3a:	4639      	mov	r1, r7
   24b3c:	4804      	ldr	r0, [pc, #16]	; (24b50 <cc_mbedtls_sha256+0x4c>)
   24b3e:	f7ff fe83 	bl	24848 <cc_mbedtls_sha256_finish>
   24b42:	4604      	mov	r4, r0
   24b44:	4802      	ldr	r0, [pc, #8]	; (24b50 <cc_mbedtls_sha256+0x4c>)
   24b46:	f7ff fe3b 	bl	247c0 <cc_mbedtls_sha256_free>
   24b4a:	4620      	mov	r0, r4
   24b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24b4e:	bf00      	nop
   24b50:	20003490 	.word	0x20003490

00024b54 <RNG_PLAT_SetUserRngParameters>:
   24b54:	b530      	push	{r4, r5, lr}
   24b56:	b083      	sub	sp, #12
   24b58:	231c      	movs	r3, #28
   24b5a:	a901      	add	r1, sp, #4
   24b5c:	4604      	mov	r4, r0
   24b5e:	9301      	str	r3, [sp, #4]
   24b60:	f000 f834 	bl	24bcc <CC_PalTrngParamGet>
   24b64:	4605      	mov	r5, r0
   24b66:	b938      	cbnz	r0, 24b78 <RNG_PLAT_SetUserRngParameters+0x24>
   24b68:	9b01      	ldr	r3, [sp, #4]
   24b6a:	2b1c      	cmp	r3, #28
   24b6c:	d007      	beq.n	24b7e <RNG_PLAT_SetUserRngParameters+0x2a>
   24b6e:	4d15      	ldr	r5, [pc, #84]	; (24bc4 <RNG_PLAT_SetUserRngParameters+0x70>)
   24b70:	211c      	movs	r1, #28
   24b72:	4620      	mov	r0, r4
   24b74:	f7ff fa0e 	bl	23f94 <CC_PalMemSetZeroPlat>
   24b78:	4628      	mov	r0, r5
   24b7a:	b003      	add	sp, #12
   24b7c:	bd30      	pop	{r4, r5, pc}
   24b7e:	e9d4 3200 	ldrd	r3, r2, [r4]
   24b82:	2101      	movs	r1, #1
   24b84:	3b00      	subs	r3, #0
   24b86:	61e1      	str	r1, [r4, #28]
   24b88:	bf18      	it	ne
   24b8a:	2301      	movne	r3, #1
   24b8c:	b10a      	cbz	r2, 24b92 <RNG_PLAT_SetUserRngParameters+0x3e>
   24b8e:	f043 0302 	orr.w	r3, r3, #2
   24b92:	68a2      	ldr	r2, [r4, #8]
   24b94:	b932      	cbnz	r2, 24ba4 <RNG_PLAT_SetUserRngParameters+0x50>
   24b96:	68e2      	ldr	r2, [r4, #12]
   24b98:	b942      	cbnz	r2, 24bac <RNG_PLAT_SetUserRngParameters+0x58>
   24b9a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   24b9e:	b97b      	cbnz	r3, 24bc0 <RNG_PLAT_SetUserRngParameters+0x6c>
   24ba0:	4d09      	ldr	r5, [pc, #36]	; (24bc8 <RNG_PLAT_SetUserRngParameters+0x74>)
   24ba2:	e7e5      	b.n	24b70 <RNG_PLAT_SetUserRngParameters+0x1c>
   24ba4:	68e2      	ldr	r2, [r4, #12]
   24ba6:	f043 0304 	orr.w	r3, r3, #4
   24baa:	b13a      	cbz	r2, 24bbc <RNG_PLAT_SetUserRngParameters+0x68>
   24bac:	f043 0308 	orr.w	r3, r3, #8
   24bb0:	2200      	movs	r2, #0
   24bb2:	4628      	mov	r0, r5
   24bb4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   24bb8:	b003      	add	sp, #12
   24bba:	bd30      	pop	{r4, r5, pc}
   24bbc:	e9c4 3208 	strd	r3, r2, [r4, #32]
   24bc0:	4615      	mov	r5, r2
   24bc2:	e7d9      	b.n	24b78 <RNG_PLAT_SetUserRngParameters+0x24>
   24bc4:	00f00c37 	.word	0x00f00c37
   24bc8:	00f00c0e 	.word	0x00f00c0e

00024bcc <CC_PalTrngParamGet>:
   24bcc:	b118      	cbz	r0, 24bd6 <CC_PalTrngParamGet+0xa>
   24bce:	b111      	cbz	r1, 24bd6 <CC_PalTrngParamGet+0xa>
   24bd0:	680b      	ldr	r3, [r1, #0]
   24bd2:	2b1c      	cmp	r3, #28
   24bd4:	d001      	beq.n	24bda <CC_PalTrngParamGet+0xe>
   24bd6:	2001      	movs	r0, #1
   24bd8:	4770      	bx	lr
   24bda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24bde:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   24be2:	3201      	adds	r2, #1
   24be4:	bf14      	ite	ne
   24be6:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   24bea:	f241 225c 	movweq	r2, #4700	; 0x125c
   24bee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24bf2:	6002      	str	r2, [r0, #0]
   24bf4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   24bf8:	3201      	adds	r2, #1
   24bfa:	bf14      	ite	ne
   24bfc:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   24c00:	f641 1264 	movweq	r2, #6500	; 0x1964
   24c04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24c08:	6042      	str	r2, [r0, #4]
   24c0a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   24c0e:	3201      	adds	r2, #1
   24c10:	bf14      	ite	ne
   24c12:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   24c16:	f640 62d8 	movweq	r2, #3800	; 0xed8
   24c1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24c1e:	6082      	str	r2, [r0, #8]
   24c20:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   24c24:	3201      	adds	r2, #1
   24c26:	bf14      	ite	ne
   24c28:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   24c2c:	f241 3288 	movweq	r2, #5000	; 0x1388
   24c30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24c34:	60c2      	str	r2, [r0, #12]
   24c36:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   24c3a:	3201      	adds	r2, #1
   24c3c:	bf14      	ite	ne
   24c3e:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   24c42:	2290      	moveq	r2, #144	; 0x90
   24c44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24c48:	6102      	str	r2, [r0, #16]
   24c4a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   24c4e:	3201      	adds	r2, #1
   24c50:	bf14      	ite	ne
   24c52:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   24c56:	2251      	moveq	r2, #81	; 0x51
   24c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24c5c:	6142      	str	r2, [r0, #20]
   24c5e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   24c62:	3201      	adds	r2, #1
   24c64:	bf14      	ite	ne
   24c66:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   24c6a:	f240 3337 	movweq	r3, #823	; 0x337
   24c6e:	6183      	str	r3, [r0, #24]
   24c70:	2000      	movs	r0, #0
   24c72:	4770      	bx	lr

00024c74 <LLF_RND_WaitRngInterrupt>:
   24c74:	b508      	push	{r3, lr}
   24c76:	4601      	mov	r1, r0
   24c78:	f44f 6080 	mov.w	r0, #1024	; 0x400
   24c7c:	f7ff f912 	bl	23ea4 <CC_HalWaitInterruptRND>
   24c80:	4b03      	ldr	r3, [pc, #12]	; (24c90 <LLF_RND_WaitRngInterrupt+0x1c>)
   24c82:	2200      	movs	r2, #0
   24c84:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   24c88:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   24c8c:	bd08      	pop	{r3, pc}
   24c8e:	bf00      	nop
   24c90:	5002b000 	.word	0x5002b000

00024c94 <LLF_RND_GetRoscSampleCnt>:
   24c94:	3801      	subs	r0, #1
   24c96:	2807      	cmp	r0, #7
   24c98:	d805      	bhi.n	24ca6 <LLF_RND_GetRoscSampleCnt+0x12>
   24c9a:	e8df f000 	tbb	[pc, r0]
   24c9e:	0e12      	.short	0x0e12
   24ca0:	04040a04 	.word	0x04040a04
   24ca4:	0604      	.short	0x0604
   24ca6:	4809      	ldr	r0, [pc, #36]	; (24ccc <LLF_RND_GetRoscSampleCnt+0x38>)
   24ca8:	4770      	bx	lr
   24caa:	68cb      	ldr	r3, [r1, #12]
   24cac:	624b      	str	r3, [r1, #36]	; 0x24
   24cae:	2000      	movs	r0, #0
   24cb0:	4770      	bx	lr
   24cb2:	688b      	ldr	r3, [r1, #8]
   24cb4:	624b      	str	r3, [r1, #36]	; 0x24
   24cb6:	2000      	movs	r0, #0
   24cb8:	4770      	bx	lr
   24cba:	684b      	ldr	r3, [r1, #4]
   24cbc:	624b      	str	r3, [r1, #36]	; 0x24
   24cbe:	2000      	movs	r0, #0
   24cc0:	4770      	bx	lr
   24cc2:	680b      	ldr	r3, [r1, #0]
   24cc4:	624b      	str	r3, [r1, #36]	; 0x24
   24cc6:	2000      	movs	r0, #0
   24cc8:	4770      	bx	lr
   24cca:	bf00      	nop
   24ccc:	00f10c31 	.word	0x00f10c31

00024cd0 <LLF_RND_GetFastestRosc>:
   24cd0:	680b      	ldr	r3, [r1, #0]
   24cd2:	e002      	b.n	24cda <LLF_RND_GetFastestRosc+0xa>
   24cd4:	2b08      	cmp	r3, #8
   24cd6:	600b      	str	r3, [r1, #0]
   24cd8:	d806      	bhi.n	24ce8 <LLF_RND_GetFastestRosc+0x18>
   24cda:	6a02      	ldr	r2, [r0, #32]
   24cdc:	4213      	tst	r3, r2
   24cde:	ea4f 0343 	mov.w	r3, r3, lsl #1
   24ce2:	d0f7      	beq.n	24cd4 <LLF_RND_GetFastestRosc+0x4>
   24ce4:	2000      	movs	r0, #0
   24ce6:	4770      	bx	lr
   24ce8:	4800      	ldr	r0, [pc, #0]	; (24cec <LLF_RND_GetFastestRosc+0x1c>)
   24cea:	4770      	bx	lr
   24cec:	00f10c31 	.word	0x00f10c31

00024cf0 <LLF_RND_TurnOffTrng>:
   24cf0:	4b04      	ldr	r3, [pc, #16]	; (24d04 <LLF_RND_TurnOffTrng+0x14>)
   24cf2:	2200      	movs	r2, #0
   24cf4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   24cf8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   24cfc:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   24d00:	f7ff b8b6 	b.w	23e70 <CC_HalClearInterruptBit>
   24d04:	5002b000 	.word	0x5002b000

00024d08 <SetDataBuffersInfo>:
   24d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   24d0a:	b083      	sub	sp, #12
   24d0c:	461d      	mov	r5, r3
   24d0e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   24d12:	f04f 0300 	mov.w	r3, #0
   24d16:	f88d 3007 	strb.w	r3, [sp, #7]
   24d1a:	d324      	bcc.n	24d66 <SetDataBuffersInfo+0x5e>
   24d1c:	468c      	mov	ip, r1
   24d1e:	4484      	add	ip, r0
   24d20:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   24d24:	4604      	mov	r4, r0
   24d26:	d81e      	bhi.n	24d66 <SetDataBuffersInfo+0x5e>
   24d28:	4617      	mov	r7, r2
   24d2a:	f10d 0307 	add.w	r3, sp, #7
   24d2e:	2201      	movs	r2, #1
   24d30:	f000 fe68 	bl	25a04 <CC_PalDataBufferAttrGet>
   24d34:	4606      	mov	r6, r0
   24d36:	b9b0      	cbnz	r0, 24d66 <SetDataBuffersInfo+0x5e>
   24d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24d3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24d3e:	603c      	str	r4, [r7, #0]
   24d40:	713b      	strb	r3, [r7, #4]
   24d42:	b192      	cbz	r2, 24d6a <SetDataBuffersInfo+0x62>
   24d44:	b14d      	cbz	r5, 24d5a <SetDataBuffersInfo+0x52>
   24d46:	4602      	mov	r2, r0
   24d48:	9908      	ldr	r1, [sp, #32]
   24d4a:	f10d 0307 	add.w	r3, sp, #7
   24d4e:	4628      	mov	r0, r5
   24d50:	f000 fe58 	bl	25a04 <CC_PalDataBufferAttrGet>
   24d54:	b938      	cbnz	r0, 24d66 <SetDataBuffersInfo+0x5e>
   24d56:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24d5c:	4630      	mov	r0, r6
   24d5e:	6015      	str	r5, [r2, #0]
   24d60:	7113      	strb	r3, [r2, #4]
   24d62:	b003      	add	sp, #12
   24d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24d66:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   24d6a:	4630      	mov	r0, r6
   24d6c:	b003      	add	sp, #12
   24d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024d70 <InitHashDrv>:
   24d70:	b1e8      	cbz	r0, 24dae <InitHashDrv+0x3e>
   24d72:	b510      	push	{r4, lr}
   24d74:	6804      	ldr	r4, [r0, #0]
   24d76:	2c01      	cmp	r4, #1
   24d78:	d004      	beq.n	24d84 <InitHashDrv+0x14>
   24d7a:	2c02      	cmp	r4, #2
   24d7c:	d010      	beq.n	24da0 <InitHashDrv+0x30>
   24d7e:	b144      	cbz	r4, 24d92 <InitHashDrv+0x22>
   24d80:	480c      	ldr	r0, [pc, #48]	; (24db4 <InitHashDrv+0x44>)
   24d82:	bd10      	pop	{r4, pc}
   24d84:	490c      	ldr	r1, [pc, #48]	; (24db8 <InitHashDrv+0x48>)
   24d86:	2220      	movs	r2, #32
   24d88:	3008      	adds	r0, #8
   24d8a:	f7ff f8ff 	bl	23f8c <CC_PalMemCopyPlat>
   24d8e:	2000      	movs	r0, #0
   24d90:	bd10      	pop	{r4, pc}
   24d92:	490a      	ldr	r1, [pc, #40]	; (24dbc <InitHashDrv+0x4c>)
   24d94:	2214      	movs	r2, #20
   24d96:	3008      	adds	r0, #8
   24d98:	f7ff f8f8 	bl	23f8c <CC_PalMemCopyPlat>
   24d9c:	4620      	mov	r0, r4
   24d9e:	bd10      	pop	{r4, pc}
   24da0:	4907      	ldr	r1, [pc, #28]	; (24dc0 <InitHashDrv+0x50>)
   24da2:	2220      	movs	r2, #32
   24da4:	3008      	adds	r0, #8
   24da6:	f7ff f8f1 	bl	23f8c <CC_PalMemCopyPlat>
   24daa:	2000      	movs	r0, #0
   24dac:	bd10      	pop	{r4, pc}
   24dae:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   24db2:	4770      	bx	lr
   24db4:	00f30001 	.word	0x00f30001
   24db8:	0002a4b0 	.word	0x0002a4b0
   24dbc:	0002a47c 	.word	0x0002a47c
   24dc0:	0002a490 	.word	0x0002a490

00024dc4 <ProcessHashDrv>:
   24dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24dc8:	2900      	cmp	r1, #0
   24dca:	f000 80f9 	beq.w	24fc0 <ProcessHashDrv+0x1fc>
   24dce:	4604      	mov	r4, r0
   24dd0:	2800      	cmp	r0, #0
   24dd2:	f000 80f9 	beq.w	24fc8 <ProcessHashDrv+0x204>
   24dd6:	6803      	ldr	r3, [r0, #0]
   24dd8:	4690      	mov	r8, r2
   24dda:	460f      	mov	r7, r1
   24ddc:	2b00      	cmp	r3, #0
   24dde:	f000 80c3 	beq.w	24f68 <ProcessHashDrv+0x1a4>
   24de2:	3b01      	subs	r3, #1
   24de4:	2b01      	cmp	r3, #1
   24de6:	f200 80d7 	bhi.w	24f98 <ProcessHashDrv+0x1d4>
   24dea:	4879      	ldr	r0, [pc, #484]	; (24fd0 <ProcessHashDrv+0x20c>)
   24dec:	f04f 31ff 	mov.w	r1, #4294967295
   24df0:	f04f 0902 	mov.w	r9, #2
   24df4:	f7ff f8e6 	bl	23fc4 <CC_PalMutexLock>
   24df8:	2800      	cmp	r0, #0
   24dfa:	f040 80bf 	bne.w	24f7c <ProcessHashDrv+0x1b8>
   24dfe:	2000      	movs	r0, #0
   24e00:	f7ff f910 	bl	24024 <CC_PalPowerSaveModeSelect>
   24e04:	4606      	mov	r6, r0
   24e06:	2800      	cmp	r0, #0
   24e08:	f040 80c2 	bne.w	24f90 <ProcessHashDrv+0x1cc>
   24e0c:	4a71      	ldr	r2, [pc, #452]	; (24fd4 <ProcessHashDrv+0x210>)
   24e0e:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   24e12:	2b00      	cmp	r3, #0
   24e14:	d1fb      	bne.n	24e0e <ProcessHashDrv+0x4a>
   24e16:	4d6f      	ldr	r5, [pc, #444]	; (24fd4 <ProcessHashDrv+0x210>)
   24e18:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   24e1c:	2b00      	cmp	r3, #0
   24e1e:	d1fb      	bne.n	24e18 <ProcessHashDrv+0x54>
   24e20:	f04f 30ff 	mov.w	r0, #4294967295
   24e24:	f7ff f824 	bl	23e70 <CC_HalClearInterruptBit>
   24e28:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   24e2c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   24e30:	f7ff f82c 	bl	23e8c <CC_HalMaskInterrupt>
   24e34:	2301      	movs	r3, #1
   24e36:	2207      	movs	r2, #7
   24e38:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   24e3c:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   24e40:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   24e44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   24e46:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   24e4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   24e4c:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   24e50:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   24e54:	6823      	ldr	r3, [r4, #0]
   24e56:	b15b      	cbz	r3, 24e70 <ProcessHashDrv+0xac>
   24e58:	3b01      	subs	r3, #1
   24e5a:	2b01      	cmp	r3, #1
   24e5c:	d818      	bhi.n	24e90 <ProcessHashDrv+0xcc>
   24e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24e60:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   24e64:	6a23      	ldr	r3, [r4, #32]
   24e66:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   24e6a:	69e3      	ldr	r3, [r4, #28]
   24e6c:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   24e70:	4b58      	ldr	r3, [pc, #352]	; (24fd4 <ProcessHashDrv+0x210>)
   24e72:	69a2      	ldr	r2, [r4, #24]
   24e74:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   24e78:	6962      	ldr	r2, [r4, #20]
   24e7a:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   24e7e:	6922      	ldr	r2, [r4, #16]
   24e80:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   24e84:	68e2      	ldr	r2, [r4, #12]
   24e86:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   24e8a:	68a2      	ldr	r2, [r4, #8]
   24e8c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   24e90:	4a50      	ldr	r2, [pc, #320]	; (24fd4 <ProcessHashDrv+0x210>)
   24e92:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24e96:	2b00      	cmp	r3, #0
   24e98:	d1fb      	bne.n	24e92 <ProcessHashDrv+0xce>
   24e9a:	f1b8 0f00 	cmp.w	r8, #0
   24e9e:	d05f      	beq.n	24f60 <ProcessHashDrv+0x19c>
   24ea0:	6863      	ldr	r3, [r4, #4]
   24ea2:	2b01      	cmp	r3, #1
   24ea4:	bf08      	it	eq
   24ea6:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   24eaa:	4b4a      	ldr	r3, [pc, #296]	; (24fd4 <ProcessHashDrv+0x210>)
   24eac:	683a      	ldr	r2, [r7, #0]
   24eae:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   24eb2:	2040      	movs	r0, #64	; 0x40
   24eb4:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   24eb8:	f7fe ffee 	bl	23e98 <CC_HalWaitInterrupt>
   24ebc:	4606      	mov	r6, r0
   24ebe:	4a45      	ldr	r2, [pc, #276]	; (24fd4 <ProcessHashDrv+0x210>)
   24ec0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24ec4:	2b00      	cmp	r3, #0
   24ec6:	d1fb      	bne.n	24ec0 <ProcessHashDrv+0xfc>
   24ec8:	4a42      	ldr	r2, [pc, #264]	; (24fd4 <ProcessHashDrv+0x210>)
   24eca:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   24ece:	2b00      	cmp	r3, #0
   24ed0:	d1fb      	bne.n	24eca <ProcessHashDrv+0x106>
   24ed2:	6823      	ldr	r3, [r4, #0]
   24ed4:	b15b      	cbz	r3, 24eee <ProcessHashDrv+0x12a>
   24ed6:	3b01      	subs	r3, #1
   24ed8:	2b01      	cmp	r3, #1
   24eda:	d818      	bhi.n	24f0e <ProcessHashDrv+0x14a>
   24edc:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   24ee0:	6263      	str	r3, [r4, #36]	; 0x24
   24ee2:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   24ee6:	6223      	str	r3, [r4, #32]
   24ee8:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   24eec:	61e3      	str	r3, [r4, #28]
   24eee:	4b39      	ldr	r3, [pc, #228]	; (24fd4 <ProcessHashDrv+0x210>)
   24ef0:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   24ef4:	61a2      	str	r2, [r4, #24]
   24ef6:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   24efa:	6162      	str	r2, [r4, #20]
   24efc:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   24f00:	6122      	str	r2, [r4, #16]
   24f02:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   24f06:	60e2      	str	r2, [r4, #12]
   24f08:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   24f0c:	60a3      	str	r3, [r4, #8]
   24f0e:	4a31      	ldr	r2, [pc, #196]	; (24fd4 <ProcessHashDrv+0x210>)
   24f10:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   24f14:	64a1      	str	r1, [r4, #72]	; 0x48
   24f16:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   24f1a:	64e1      	str	r1, [r4, #76]	; 0x4c
   24f1c:	2300      	movs	r3, #0
   24f1e:	2101      	movs	r1, #1
   24f20:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   24f24:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   24f28:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   24f2c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24f30:	2b00      	cmp	r3, #0
   24f32:	d1fb      	bne.n	24f2c <ProcessHashDrv+0x168>
   24f34:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   24f38:	2e00      	cmp	r6, #0
   24f3a:	d13b      	bne.n	24fb4 <ProcessHashDrv+0x1f0>
   24f3c:	4b25      	ldr	r3, [pc, #148]	; (24fd4 <ProcessHashDrv+0x210>)
   24f3e:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   24f42:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   24f46:	f7fe ffa1 	bl	23e8c <CC_HalMaskInterrupt>
   24f4a:	2001      	movs	r0, #1
   24f4c:	f7ff f86a 	bl	24024 <CC_PalPowerSaveModeSelect>
   24f50:	bb60      	cbnz	r0, 24fac <ProcessHashDrv+0x1e8>
   24f52:	481f      	ldr	r0, [pc, #124]	; (24fd0 <ProcessHashDrv+0x20c>)
   24f54:	f7ff f83e 	bl	23fd4 <CC_PalMutexUnlock>
   24f58:	bb10      	cbnz	r0, 24fa0 <ProcessHashDrv+0x1dc>
   24f5a:	4630      	mov	r0, r6
   24f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24f60:	2304      	movs	r3, #4
   24f62:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   24f66:	e7aa      	b.n	24ebe <ProcessHashDrv+0xfa>
   24f68:	4819      	ldr	r0, [pc, #100]	; (24fd0 <ProcessHashDrv+0x20c>)
   24f6a:	f04f 31ff 	mov.w	r1, #4294967295
   24f6e:	f04f 0901 	mov.w	r9, #1
   24f72:	f7ff f827 	bl	23fc4 <CC_PalMutexLock>
   24f76:	2800      	cmp	r0, #0
   24f78:	f43f af41 	beq.w	24dfe <ProcessHashDrv+0x3a>
   24f7c:	4816      	ldr	r0, [pc, #88]	; (24fd8 <ProcessHashDrv+0x214>)
   24f7e:	f7fe f8a5 	bl	230cc <CC_PalAbort>
   24f82:	2000      	movs	r0, #0
   24f84:	f7ff f84e 	bl	24024 <CC_PalPowerSaveModeSelect>
   24f88:	4606      	mov	r6, r0
   24f8a:	2800      	cmp	r0, #0
   24f8c:	f43f af3e 	beq.w	24e0c <ProcessHashDrv+0x48>
   24f90:	4812      	ldr	r0, [pc, #72]	; (24fdc <ProcessHashDrv+0x218>)
   24f92:	f7fe f89b 	bl	230cc <CC_PalAbort>
   24f96:	e739      	b.n	24e0c <ProcessHashDrv+0x48>
   24f98:	4e11      	ldr	r6, [pc, #68]	; (24fe0 <ProcessHashDrv+0x21c>)
   24f9a:	4630      	mov	r0, r6
   24f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24fa0:	4810      	ldr	r0, [pc, #64]	; (24fe4 <ProcessHashDrv+0x220>)
   24fa2:	f7fe f893 	bl	230cc <CC_PalAbort>
   24fa6:	4630      	mov	r0, r6
   24fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24fac:	480e      	ldr	r0, [pc, #56]	; (24fe8 <ProcessHashDrv+0x224>)
   24fae:	f7fe f88d 	bl	230cc <CC_PalAbort>
   24fb2:	e7ce      	b.n	24f52 <ProcessHashDrv+0x18e>
   24fb4:	2110      	movs	r1, #16
   24fb6:	f104 0008 	add.w	r0, r4, #8
   24fba:	f7fe ffeb 	bl	23f94 <CC_PalMemSetZeroPlat>
   24fbe:	e7bd      	b.n	24f3c <ProcessHashDrv+0x178>
   24fc0:	4e0a      	ldr	r6, [pc, #40]	; (24fec <ProcessHashDrv+0x228>)
   24fc2:	4630      	mov	r0, r6
   24fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24fc8:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   24fcc:	e7c5      	b.n	24f5a <ProcessHashDrv+0x196>
   24fce:	bf00      	nop
   24fd0:	20000774 	.word	0x20000774
   24fd4:	5002b000 	.word	0x5002b000
   24fd8:	0002a3b0 	.word	0x0002a3b0
   24fdc:	0002a3c8 	.word	0x0002a3c8
   24fe0:	00f30001 	.word	0x00f30001
   24fe4:	0002a408 	.word	0x0002a408
   24fe8:	0002a3e8 	.word	0x0002a3e8
   24fec:	00f30003 	.word	0x00f30003

00024ff0 <FinishHashDrv>:
   24ff0:	b398      	cbz	r0, 2505a <FinishHashDrv+0x6a>
   24ff2:	b470      	push	{r4, r5, r6}
   24ff4:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   24ff8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   24ffc:	ba26      	rev	r6, r4
   24ffe:	ba0d      	rev	r5, r1
   25000:	ba14      	rev	r4, r2
   25002:	ba19      	rev	r1, r3
   25004:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   25008:	ba12      	rev	r2, r2
   2500a:	e9c0 4104 	strd	r4, r1, [r0, #16]
   2500e:	6182      	str	r2, [r0, #24]
   25010:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   25014:	e9c0 6502 	strd	r6, r5, [r0, #8]
   25018:	ba1b      	rev	r3, r3
   2501a:	ba25      	rev	r5, r4
   2501c:	e9c0 3507 	strd	r3, r5, [r0, #28]
   25020:	ba14      	rev	r4, r2
   25022:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   25026:	6a81      	ldr	r1, [r0, #40]	; 0x28
   25028:	ba12      	rev	r2, r2
   2502a:	ba09      	rev	r1, r1
   2502c:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   25030:	62c2      	str	r2, [r0, #44]	; 0x2c
   25032:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   25036:	ba1b      	rev	r3, r3
   25038:	ba25      	rev	r5, r4
   2503a:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   2503e:	ba14      	rev	r4, r2
   25040:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   25044:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   25046:	ba12      	rev	r2, r2
   25048:	ba09      	rev	r1, r1
   2504a:	ba1b      	rev	r3, r3
   2504c:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   25050:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   25054:	2000      	movs	r0, #0
   25056:	bc70      	pop	{r4, r5, r6}
   25058:	4770      	bx	lr
   2505a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2505e:	4770      	bx	lr

00025060 <LoadAesKey>:
   25060:	2800      	cmp	r0, #0
   25062:	d046      	beq.n	250f2 <LoadAesKey+0x92>
   25064:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   25068:	2b00      	cmp	r3, #0
   2506a:	d033      	beq.n	250d4 <LoadAesKey+0x74>
   2506c:	2b03      	cmp	r3, #3
   2506e:	b510      	push	{r4, lr}
   25070:	d013      	beq.n	2509a <LoadAesKey+0x3a>
   25072:	4821      	ldr	r0, [pc, #132]	; (250f8 <LoadAesKey+0x98>)
   25074:	4c21      	ldr	r4, [pc, #132]	; (250fc <LoadAesKey+0x9c>)
   25076:	6822      	ldr	r2, [r4, #0]
   25078:	4b21      	ldr	r3, [pc, #132]	; (25100 <LoadAesKey+0xa0>)
   2507a:	6812      	ldr	r2, [r2, #0]
   2507c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   25080:	6822      	ldr	r2, [r4, #0]
   25082:	6852      	ldr	r2, [r2, #4]
   25084:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   25088:	6822      	ldr	r2, [r4, #0]
   2508a:	6892      	ldr	r2, [r2, #8]
   2508c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   25090:	6822      	ldr	r2, [r4, #0]
   25092:	68d2      	ldr	r2, [r2, #12]
   25094:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   25098:	bd10      	pop	{r4, pc}
   2509a:	6b01      	ldr	r1, [r0, #48]	; 0x30
   2509c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   2509e:	4c17      	ldr	r4, [pc, #92]	; (250fc <LoadAesKey+0x9c>)
   250a0:	f000 fbac 	bl	257fc <kmu_validate_kdr_slot_and_size>
   250a4:	2800      	cmp	r0, #0
   250a6:	d1e6      	bne.n	25076 <LoadAesKey+0x16>
   250a8:	6822      	ldr	r2, [r4, #0]
   250aa:	4b15      	ldr	r3, [pc, #84]	; (25100 <LoadAesKey+0xa0>)
   250ac:	6812      	ldr	r2, [r2, #0]
   250ae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   250b2:	6822      	ldr	r2, [r4, #0]
   250b4:	6852      	ldr	r2, [r2, #4]
   250b6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   250ba:	6822      	ldr	r2, [r4, #0]
   250bc:	6892      	ldr	r2, [r2, #8]
   250be:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   250c2:	6822      	ldr	r2, [r4, #0]
   250c4:	68d2      	ldr	r2, [r2, #12]
   250c6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   250ca:	f000 fba3 	bl	25814 <kmu_use_kdr_key>
   250ce:	2800      	cmp	r0, #0
   250d0:	d1d1      	bne.n	25076 <LoadAesKey+0x16>
   250d2:	bd10      	pop	{r4, pc}
   250d4:	4a0a      	ldr	r2, [pc, #40]	; (25100 <LoadAesKey+0xa0>)
   250d6:	6901      	ldr	r1, [r0, #16]
   250d8:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   250dc:	6941      	ldr	r1, [r0, #20]
   250de:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   250e2:	6981      	ldr	r1, [r0, #24]
   250e4:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   250e8:	69c1      	ldr	r1, [r0, #28]
   250ea:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   250ee:	4618      	mov	r0, r3
   250f0:	4770      	bx	lr
   250f2:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   250f6:	4770      	bx	lr
   250f8:	00f10009 	.word	0x00f10009
   250fc:	20000764 	.word	0x20000764
   25100:	5002b000 	.word	0x5002b000

00025104 <InitAes.part.0>:
   25104:	4a37      	ldr	r2, [pc, #220]	; (251e4 <InitAes.part.0+0xe0>)
   25106:	b538      	push	{r3, r4, r5, lr}
   25108:	4604      	mov	r4, r0
   2510a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2510e:	2b00      	cmp	r3, #0
   25110:	d1fb      	bne.n	2510a <InitAes.part.0+0x6>
   25112:	4a34      	ldr	r2, [pc, #208]	; (251e4 <InitAes.part.0+0xe0>)
   25114:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   25118:	2b00      	cmp	r3, #0
   2511a:	d1fb      	bne.n	25114 <InitAes.part.0+0x10>
   2511c:	4a31      	ldr	r2, [pc, #196]	; (251e4 <InitAes.part.0+0xe0>)
   2511e:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   25122:	2b00      	cmp	r3, #0
   25124:	d1fb      	bne.n	2511e <InitAes.part.0+0x1a>
   25126:	4a2f      	ldr	r2, [pc, #188]	; (251e4 <InitAes.part.0+0xe0>)
   25128:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   2512c:	2b00      	cmp	r3, #0
   2512e:	d1fb      	bne.n	25128 <InitAes.part.0+0x24>
   25130:	4a2c      	ldr	r2, [pc, #176]	; (251e4 <InitAes.part.0+0xe0>)
   25132:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   25136:	2b00      	cmp	r3, #0
   25138:	d1fb      	bne.n	25132 <InitAes.part.0+0x2e>
   2513a:	4d2a      	ldr	r5, [pc, #168]	; (251e4 <InitAes.part.0+0xe0>)
   2513c:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   25140:	2b00      	cmp	r3, #0
   25142:	d1fb      	bne.n	2513c <InitAes.part.0+0x38>
   25144:	f04f 30ff 	mov.w	r0, #4294967295
   25148:	f7fe fe92 	bl	23e70 <CC_HalClearInterruptBit>
   2514c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2514e:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   25152:	f023 0304 	bic.w	r3, r3, #4
   25156:	2b03      	cmp	r3, #3
   25158:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2515a:	d039      	beq.n	251d0 <InitAes.part.0+0xcc>
   2515c:	2b01      	cmp	r3, #1
   2515e:	bf0c      	ite	eq
   25160:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   25164:	f020 0020 	bicne.w	r0, r0, #32
   25168:	f7fe fe90 	bl	23e8c <CC_HalMaskInterrupt>
   2516c:	4a1d      	ldr	r2, [pc, #116]	; (251e4 <InitAes.part.0+0xe0>)
   2516e:	2301      	movs	r3, #1
   25170:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   25174:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25178:	2b00      	cmp	r3, #0
   2517a:	d1fb      	bne.n	25174 <InitAes.part.0+0x70>
   2517c:	4a19      	ldr	r2, [pc, #100]	; (251e4 <InitAes.part.0+0xe0>)
   2517e:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   25182:	2b00      	cmp	r3, #0
   25184:	d1fb      	bne.n	2517e <InitAes.part.0+0x7a>
   25186:	4917      	ldr	r1, [pc, #92]	; (251e4 <InitAes.part.0+0xe0>)
   25188:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   2518c:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   25190:	2b00      	cmp	r3, #0
   25192:	d1fb      	bne.n	2518c <InitAes.part.0+0x88>
   25194:	4a13      	ldr	r2, [pc, #76]	; (251e4 <InitAes.part.0+0xe0>)
   25196:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   2519a:	2b00      	cmp	r3, #0
   2519c:	d1fb      	bne.n	25196 <InitAes.part.0+0x92>
   2519e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   251a0:	f022 0104 	bic.w	r1, r2, #4
   251a4:	2903      	cmp	r1, #3
   251a6:	bf18      	it	ne
   251a8:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   251aa:	490e      	ldr	r1, [pc, #56]	; (251e4 <InitAes.part.0+0xe0>)
   251ac:	ea4f 0282 	mov.w	r2, r2, lsl #2
   251b0:	bf18      	it	ne
   251b2:	f003 0301 	andne.w	r3, r3, #1
   251b6:	f002 021c 	and.w	r2, r2, #28
   251ba:	4313      	orrs	r3, r2
   251bc:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   251c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   251c2:	2b07      	cmp	r3, #7
   251c4:	bf04      	itt	eq
   251c6:	2301      	moveq	r3, #1
   251c8:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   251cc:	2000      	movs	r0, #0
   251ce:	bd38      	pop	{r3, r4, r5, pc}
   251d0:	2b01      	cmp	r3, #1
   251d2:	bf0c      	ite	eq
   251d4:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   251d8:	f020 0010 	bicne.w	r0, r0, #16
   251dc:	f7fe fe56 	bl	23e8c <CC_HalMaskInterrupt>
   251e0:	e7c4      	b.n	2516c <InitAes.part.0+0x68>
   251e2:	bf00      	nop
   251e4:	5002b000 	.word	0x5002b000

000251e8 <write_invalid_key>:
   251e8:	4a09      	ldr	r2, [pc, #36]	; (25210 <write_invalid_key+0x28>)
   251ea:	4b0a      	ldr	r3, [pc, #40]	; (25214 <write_invalid_key+0x2c>)
   251ec:	6811      	ldr	r1, [r2, #0]
   251ee:	6809      	ldr	r1, [r1, #0]
   251f0:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   251f4:	6811      	ldr	r1, [r2, #0]
   251f6:	6849      	ldr	r1, [r1, #4]
   251f8:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   251fc:	6811      	ldr	r1, [r2, #0]
   251fe:	6889      	ldr	r1, [r1, #8]
   25200:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   25204:	6812      	ldr	r2, [r2, #0]
   25206:	68d2      	ldr	r2, [r2, #12]
   25208:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2520c:	4770      	bx	lr
   2520e:	bf00      	nop
   25210:	20000764 	.word	0x20000764
   25214:	5002b000 	.word	0x5002b000

00025218 <ProcessAesDrv>:
   25218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2521c:	b085      	sub	sp, #20
   2521e:	2900      	cmp	r1, #0
   25220:	f000 80a3 	beq.w	2536a <ProcessAesDrv+0x152>
   25224:	4690      	mov	r8, r2
   25226:	2a00      	cmp	r2, #0
   25228:	f000 809f 	beq.w	2536a <ProcessAesDrv+0x152>
   2522c:	4605      	mov	r5, r0
   2522e:	2800      	cmp	r0, #0
   25230:	f000 813c 	beq.w	254ac <ProcessAesDrv+0x294>
   25234:	4699      	mov	r9, r3
   25236:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   25238:	460e      	mov	r6, r1
   2523a:	2b00      	cmp	r3, #0
   2523c:	d151      	bne.n	252e2 <ProcessAesDrv+0xca>
   2523e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   25242:	d253      	bcs.n	252ec <ProcessAesDrv+0xd4>
   25244:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   25248:	2b04      	cmp	r3, #4
   2524a:	f000 8112 	beq.w	25472 <ProcessAesDrv+0x25a>
   2524e:	2700      	movs	r7, #0
   25250:	48a6      	ldr	r0, [pc, #664]	; (254ec <ProcessAesDrv+0x2d4>)
   25252:	f04f 31ff 	mov.w	r1, #4294967295
   25256:	f7fe feb5 	bl	23fc4 <CC_PalMutexLock>
   2525a:	2800      	cmp	r0, #0
   2525c:	f040 80e8 	bne.w	25430 <ProcessAesDrv+0x218>
   25260:	2000      	movs	r0, #0
   25262:	f7fe fedf 	bl	24024 <CC_PalPowerSaveModeSelect>
   25266:	2800      	cmp	r0, #0
   25268:	f040 80eb 	bne.w	25442 <ProcessAesDrv+0x22a>
   2526c:	48a0      	ldr	r0, [pc, #640]	; (254f0 <ProcessAesDrv+0x2d8>)
   2526e:	2301      	movs	r3, #1
   25270:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   25274:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   25278:	2c00      	cmp	r4, #0
   2527a:	d1fb      	bne.n	25274 <ProcessAesDrv+0x5c>
   2527c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2527e:	2b03      	cmp	r3, #3
   25280:	dc39      	bgt.n	252f6 <ProcessAesDrv+0xde>
   25282:	2b00      	cmp	r3, #0
   25284:	da3a      	bge.n	252fc <ProcessAesDrv+0xe4>
   25286:	4c9b      	ldr	r4, [pc, #620]	; (254f4 <ProcessAesDrv+0x2dc>)
   25288:	4a99      	ldr	r2, [pc, #612]	; (254f0 <ProcessAesDrv+0x2d8>)
   2528a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2528e:	2b00      	cmp	r3, #0
   25290:	d1fb      	bne.n	2528a <ProcessAesDrv+0x72>
   25292:	2f00      	cmp	r7, #0
   25294:	f040 80e4 	bne.w	25460 <ProcessAesDrv+0x248>
   25298:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2529a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   2529c:	f023 0304 	bic.w	r3, r3, #4
   252a0:	2b03      	cmp	r3, #3
   252a2:	4b93      	ldr	r3, [pc, #588]	; (254f0 <ProcessAesDrv+0x2d8>)
   252a4:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   252a8:	d056      	beq.n	25358 <ProcessAesDrv+0x140>
   252aa:	2a01      	cmp	r2, #1
   252ac:	bf0c      	ite	eq
   252ae:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   252b2:	f040 0020 	orrne.w	r0, r0, #32
   252b6:	f7fe fde9 	bl	23e8c <CC_HalMaskInterrupt>
   252ba:	4b8d      	ldr	r3, [pc, #564]	; (254f0 <ProcessAesDrv+0x2d8>)
   252bc:	2200      	movs	r2, #0
   252be:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   252c2:	2001      	movs	r0, #1
   252c4:	f7fe feae 	bl	24024 <CC_PalPowerSaveModeSelect>
   252c8:	2800      	cmp	r0, #0
   252ca:	f040 80c5 	bne.w	25458 <ProcessAesDrv+0x240>
   252ce:	4887      	ldr	r0, [pc, #540]	; (254ec <ProcessAesDrv+0x2d4>)
   252d0:	f7fe fe80 	bl	23fd4 <CC_PalMutexUnlock>
   252d4:	2800      	cmp	r0, #0
   252d6:	f040 80b8 	bne.w	2544a <ProcessAesDrv+0x232>
   252da:	4620      	mov	r0, r4
   252dc:	b005      	add	sp, #20
   252de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252e2:	2b01      	cmp	r3, #1
   252e4:	d1ae      	bne.n	25244 <ProcessAesDrv+0x2c>
   252e6:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   252ea:	d3ab      	bcc.n	25244 <ProcessAesDrv+0x2c>
   252ec:	4c82      	ldr	r4, [pc, #520]	; (254f8 <ProcessAesDrv+0x2e0>)
   252ee:	4620      	mov	r0, r4
   252f0:	b005      	add	sp, #20
   252f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252f6:	3b06      	subs	r3, #6
   252f8:	2b01      	cmp	r3, #1
   252fa:	d8c4      	bhi.n	25286 <ProcessAesDrv+0x6e>
   252fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   252fe:	2b01      	cmp	r3, #1
   25300:	f200 80d2 	bhi.w	254a8 <ProcessAesDrv+0x290>
   25304:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   25306:	2b01      	cmp	r3, #1
   25308:	d834      	bhi.n	25374 <ProcessAesDrv+0x15c>
   2530a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   2530c:	2b01      	cmp	r3, #1
   2530e:	f200 8122 	bhi.w	25556 <ProcessAesDrv+0x33e>
   25312:	4628      	mov	r0, r5
   25314:	f7ff fef6 	bl	25104 <InitAes.part.0>
   25318:	4604      	mov	r4, r0
   2531a:	2800      	cmp	r0, #0
   2531c:	d1b4      	bne.n	25288 <ProcessAesDrv+0x70>
   2531e:	4628      	mov	r0, r5
   25320:	f7ff fe9e 	bl	25060 <LoadAesKey>
   25324:	4604      	mov	r4, r0
   25326:	2800      	cmp	r0, #0
   25328:	d1ae      	bne.n	25288 <ProcessAesDrv+0x70>
   2532a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2532c:	2b07      	cmp	r3, #7
   2532e:	d8aa      	bhi.n	25286 <ProcessAesDrv+0x6e>
   25330:	a201      	add	r2, pc, #4	; (adr r2, 25338 <ProcessAesDrv+0x120>)
   25332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   25336:	bf00      	nop
   25338:	00025395 	.word	0x00025395
   2533c:	00025379 	.word	0x00025379
   25340:	0002551d 	.word	0x0002551d
   25344:	00025379 	.word	0x00025379
   25348:	00025287 	.word	0x00025287
   2534c:	00025287 	.word	0x00025287
   25350:	0002551d 	.word	0x0002551d
   25354:	00025379 	.word	0x00025379
   25358:	2a01      	cmp	r2, #1
   2535a:	bf0c      	ite	eq
   2535c:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   25360:	f040 0010 	orrne.w	r0, r0, #16
   25364:	f7fe fd92 	bl	23e8c <CC_HalMaskInterrupt>
   25368:	e7a7      	b.n	252ba <ProcessAesDrv+0xa2>
   2536a:	4c64      	ldr	r4, [pc, #400]	; (254fc <ProcessAesDrv+0x2e4>)
   2536c:	4620      	mov	r0, r4
   2536e:	b005      	add	sp, #20
   25370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25374:	4c62      	ldr	r4, [pc, #392]	; (25500 <ProcessAesDrv+0x2e8>)
   25376:	e787      	b.n	25288 <ProcessAesDrv+0x70>
   25378:	4b5d      	ldr	r3, [pc, #372]	; (254f0 <ProcessAesDrv+0x2d8>)
   2537a:	682a      	ldr	r2, [r5, #0]
   2537c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   25380:	686a      	ldr	r2, [r5, #4]
   25382:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   25386:	68aa      	ldr	r2, [r5, #8]
   25388:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   2538c:	68ea      	ldr	r2, [r5, #12]
   2538e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   25392:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25394:	6832      	ldr	r2, [r6, #0]
   25396:	f023 0304 	bic.w	r3, r3, #4
   2539a:	2b03      	cmp	r3, #3
   2539c:	d00d      	beq.n	253ba <ProcessAesDrv+0x1a2>
   2539e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   253a0:	f8d8 1000 	ldr.w	r1, [r8]
   253a4:	2b01      	cmp	r3, #1
   253a6:	4b52      	ldr	r3, [pc, #328]	; (254f0 <ProcessAesDrv+0x2d8>)
   253a8:	bf0b      	itete	eq
   253aa:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   253ae:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   253b2:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   253b6:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   253ba:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   253bc:	2b01      	cmp	r3, #1
   253be:	4b4c      	ldr	r3, [pc, #304]	; (254f0 <ProcessAesDrv+0x2d8>)
   253c0:	bf0b      	itete	eq
   253c2:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   253c6:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   253ca:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   253ce:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   253d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   253d4:	f023 0304 	bic.w	r3, r3, #4
   253d8:	2b03      	cmp	r3, #3
   253da:	d06a      	beq.n	254b2 <ProcessAesDrv+0x29a>
   253dc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   253de:	2b01      	cmp	r3, #1
   253e0:	bf0c      	ite	eq
   253e2:	2080      	moveq	r0, #128	; 0x80
   253e4:	2020      	movne	r0, #32
   253e6:	f7fe fd57 	bl	23e98 <CC_HalWaitInterrupt>
   253ea:	4604      	mov	r4, r0
   253ec:	2800      	cmp	r0, #0
   253ee:	f47f af4b 	bne.w	25288 <ProcessAesDrv+0x70>
   253f2:	4b3f      	ldr	r3, [pc, #252]	; (254f0 <ProcessAesDrv+0x2d8>)
   253f4:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   253f8:	2c00      	cmp	r4, #0
   253fa:	d1fb      	bne.n	253f4 <ProcessAesDrv+0x1dc>
   253fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   253fe:	3b01      	subs	r3, #1
   25400:	2b06      	cmp	r3, #6
   25402:	d812      	bhi.n	2542a <ProcessAesDrv+0x212>
   25404:	e8df f003 	tbb	[pc, r3]
   25408:	11049904 	.word	0x11049904
   2540c:	9911      	.short	0x9911
   2540e:	04          	.byte	0x04
   2540f:	00          	.byte	0x00
   25410:	4b37      	ldr	r3, [pc, #220]	; (254f0 <ProcessAesDrv+0x2d8>)
   25412:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   25416:	602a      	str	r2, [r5, #0]
   25418:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   2541c:	606a      	str	r2, [r5, #4]
   2541e:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   25422:	60aa      	str	r2, [r5, #8]
   25424:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   25428:	60eb      	str	r3, [r5, #12]
   2542a:	2301      	movs	r3, #1
   2542c:	65ab      	str	r3, [r5, #88]	; 0x58
   2542e:	e72b      	b.n	25288 <ProcessAesDrv+0x70>
   25430:	4834      	ldr	r0, [pc, #208]	; (25504 <ProcessAesDrv+0x2ec>)
   25432:	f7fd fe4b 	bl	230cc <CC_PalAbort>
   25436:	2000      	movs	r0, #0
   25438:	f7fe fdf4 	bl	24024 <CC_PalPowerSaveModeSelect>
   2543c:	2800      	cmp	r0, #0
   2543e:	f43f af15 	beq.w	2526c <ProcessAesDrv+0x54>
   25442:	4831      	ldr	r0, [pc, #196]	; (25508 <ProcessAesDrv+0x2f0>)
   25444:	f7fd fe42 	bl	230cc <CC_PalAbort>
   25448:	e710      	b.n	2526c <ProcessAesDrv+0x54>
   2544a:	4830      	ldr	r0, [pc, #192]	; (2550c <ProcessAesDrv+0x2f4>)
   2544c:	f7fd fe3e 	bl	230cc <CC_PalAbort>
   25450:	4620      	mov	r0, r4
   25452:	b005      	add	sp, #20
   25454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25458:	482d      	ldr	r0, [pc, #180]	; (25510 <ProcessAesDrv+0x2f8>)
   2545a:	f7fd fe37 	bl	230cc <CC_PalAbort>
   2545e:	e736      	b.n	252ce <ProcessAesDrv+0xb6>
   25460:	2304      	movs	r3, #4
   25462:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   25466:	2120      	movs	r1, #32
   25468:	f105 0010 	add.w	r0, r5, #16
   2546c:	f7fe fd92 	bl	23f94 <CC_PalMemSetZeroPlat>
   25470:	e712      	b.n	25298 <ProcessAesDrv+0x80>
   25472:	6b29      	ldr	r1, [r5, #48]	; 0x30
   25474:	6c28      	ldr	r0, [r5, #64]	; 0x40
   25476:	f000 f9b5 	bl	257e4 <kmu_validate_slot_and_size>
   2547a:	b998      	cbnz	r0, 254a4 <ProcessAesDrv+0x28c>
   2547c:	4f25      	ldr	r7, [pc, #148]	; (25514 <ProcessAesDrv+0x2fc>)
   2547e:	4c1c      	ldr	r4, [pc, #112]	; (254f0 <ProcessAesDrv+0x2d8>)
   25480:	683b      	ldr	r3, [r7, #0]
   25482:	681b      	ldr	r3, [r3, #0]
   25484:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   25488:	683b      	ldr	r3, [r7, #0]
   2548a:	685b      	ldr	r3, [r3, #4]
   2548c:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   25490:	683b      	ldr	r3, [r7, #0]
   25492:	689b      	ldr	r3, [r3, #8]
   25494:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   25498:	683b      	ldr	r3, [r7, #0]
   2549a:	68db      	ldr	r3, [r3, #12]
   2549c:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   254a0:	6b29      	ldr	r1, [r5, #48]	; 0x30
   254a2:	b161      	cbz	r1, 254be <ProcessAesDrv+0x2a6>
   254a4:	2701      	movs	r7, #1
   254a6:	e6d3      	b.n	25250 <ProcessAesDrv+0x38>
   254a8:	4c1b      	ldr	r4, [pc, #108]	; (25518 <ProcessAesDrv+0x300>)
   254aa:	e6ed      	b.n	25288 <ProcessAesDrv+0x70>
   254ac:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   254b0:	e713      	b.n	252da <ProcessAesDrv+0xc2>
   254b2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   254b4:	2b01      	cmp	r3, #1
   254b6:	bf0c      	ite	eq
   254b8:	2040      	moveq	r0, #64	; 0x40
   254ba:	2010      	movne	r0, #16
   254bc:	e793      	b.n	253e6 <ProcessAesDrv+0x1ce>
   254be:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   254c0:	9301      	str	r3, [sp, #4]
   254c2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   254c4:	9300      	str	r3, [sp, #0]
   254c6:	f105 0a10 	add.w	sl, r5, #16
   254ca:	f04f 0b10 	mov.w	fp, #16
   254ce:	f8cd a008 	str.w	sl, [sp, #8]
   254d2:	f8cd b00c 	str.w	fp, [sp, #12]
   254d6:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   254da:	6c28      	ldr	r0, [r5, #64]	; 0x40
   254dc:	f000 f9a4 	bl	25828 <kmu_derive_cmac>
   254e0:	2800      	cmp	r0, #0
   254e2:	d13a      	bne.n	2555a <ProcessAesDrv+0x342>
   254e4:	2300      	movs	r3, #0
   254e6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   254ea:	e7db      	b.n	254a4 <ProcessAesDrv+0x28c>
   254ec:	20000774 	.word	0x20000774
   254f0:	5002b000 	.word	0x5002b000
   254f4:	00f10001 	.word	0x00f10001
   254f8:	00f10005 	.word	0x00f10005
   254fc:	00f1000b 	.word	0x00f1000b
   25500:	00f10003 	.word	0x00f10003
   25504:	0002a3b0 	.word	0x0002a3b0
   25508:	0002a3c8 	.word	0x0002a3c8
   2550c:	0002a408 	.word	0x0002a408
   25510:	0002a3e8 	.word	0x0002a3e8
   25514:	20000764 	.word	0x20000764
   25518:	00f10002 	.word	0x00f10002
   2551c:	4b19      	ldr	r3, [pc, #100]	; (25584 <ProcessAesDrv+0x36c>)
   2551e:	682a      	ldr	r2, [r5, #0]
   25520:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   25524:	686a      	ldr	r2, [r5, #4]
   25526:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   2552a:	68aa      	ldr	r2, [r5, #8]
   2552c:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   25530:	68ea      	ldr	r2, [r5, #12]
   25532:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   25536:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25538:	e72c      	b.n	25394 <ProcessAesDrv+0x17c>
   2553a:	4b12      	ldr	r3, [pc, #72]	; (25584 <ProcessAesDrv+0x36c>)
   2553c:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   25540:	602a      	str	r2, [r5, #0]
   25542:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   25546:	606a      	str	r2, [r5, #4]
   25548:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   2554c:	60aa      	str	r2, [r5, #8]
   2554e:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   25552:	60eb      	str	r3, [r5, #12]
   25554:	e769      	b.n	2542a <ProcessAesDrv+0x212>
   25556:	4c0c      	ldr	r4, [pc, #48]	; (25588 <ProcessAesDrv+0x370>)
   25558:	e696      	b.n	25288 <ProcessAesDrv+0x70>
   2555a:	683b      	ldr	r3, [r7, #0]
   2555c:	681b      	ldr	r3, [r3, #0]
   2555e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   25562:	683b      	ldr	r3, [r7, #0]
   25564:	685b      	ldr	r3, [r3, #4]
   25566:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   2556a:	683b      	ldr	r3, [r7, #0]
   2556c:	689b      	ldr	r3, [r3, #8]
   2556e:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   25572:	683b      	ldr	r3, [r7, #0]
   25574:	68db      	ldr	r3, [r3, #12]
   25576:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   2557a:	4659      	mov	r1, fp
   2557c:	4650      	mov	r0, sl
   2557e:	f7fe fd09 	bl	23f94 <CC_PalMemSetZeroPlat>
   25582:	e7af      	b.n	254e4 <ProcessAesDrv+0x2cc>
   25584:	5002b000 	.word	0x5002b000
   25588:	00f10004 	.word	0x00f10004

0002558c <FinishAesDrv>:
   2558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25590:	b301      	cbz	r1, 255d4 <FinishAesDrv+0x48>
   25592:	b1fa      	cbz	r2, 255d4 <FinishAesDrv+0x48>
   25594:	4604      	mov	r4, r0
   25596:	2800      	cmp	r0, #0
   25598:	d07c      	beq.n	25694 <FinishAesDrv+0x108>
   2559a:	461d      	mov	r5, r3
   2559c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2559e:	2b07      	cmp	r3, #7
   255a0:	460e      	mov	r6, r1
   255a2:	d01b      	beq.n	255dc <FinishAesDrv+0x50>
   255a4:	b95d      	cbnz	r5, 255be <FinishAesDrv+0x32>
   255a6:	2b03      	cmp	r3, #3
   255a8:	d110      	bne.n	255cc <FinishAesDrv+0x40>
   255aa:	6d83      	ldr	r3, [r0, #88]	; 0x58
   255ac:	b973      	cbnz	r3, 255cc <FinishAesDrv+0x40>
   255ae:	f100 0364 	add.w	r3, r0, #100	; 0x64
   255b2:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   255b6:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   255ba:	600b      	str	r3, [r1, #0]
   255bc:	2510      	movs	r5, #16
   255be:	462b      	mov	r3, r5
   255c0:	4631      	mov	r1, r6
   255c2:	4620      	mov	r0, r4
   255c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   255c8:	f7ff be26 	b.w	25218 <ProcessAesDrv>
   255cc:	462f      	mov	r7, r5
   255ce:	4638      	mov	r0, r7
   255d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   255d4:	4f77      	ldr	r7, [pc, #476]	; (257b4 <FinishAesDrv+0x228>)
   255d6:	4638      	mov	r0, r7
   255d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   255dc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   255de:	2b00      	cmp	r3, #0
   255e0:	d15b      	bne.n	2569a <FinishAesDrv+0x10e>
   255e2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   255e6:	d25d      	bcs.n	256a4 <FinishAesDrv+0x118>
   255e8:	b915      	cbnz	r5, 255f0 <FinishAesDrv+0x64>
   255ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
   255ec:	2b00      	cmp	r3, #0
   255ee:	d159      	bne.n	256a4 <FinishAesDrv+0x118>
   255f0:	4871      	ldr	r0, [pc, #452]	; (257b8 <FinishAesDrv+0x22c>)
   255f2:	f04f 31ff 	mov.w	r1, #4294967295
   255f6:	f7fe fce5 	bl	23fc4 <CC_PalMutexLock>
   255fa:	2800      	cmp	r0, #0
   255fc:	f040 80b8 	bne.w	25770 <FinishAesDrv+0x1e4>
   25600:	2000      	movs	r0, #0
   25602:	f7fe fd0f 	bl	24024 <CC_PalPowerSaveModeSelect>
   25606:	2800      	cmp	r0, #0
   25608:	f040 80ae 	bne.w	25768 <FinishAesDrv+0x1dc>
   2560c:	4a6b      	ldr	r2, [pc, #428]	; (257bc <FinishAesDrv+0x230>)
   2560e:	2301      	movs	r3, #1
   25610:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   25614:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25618:	2b00      	cmp	r3, #0
   2561a:	d1fb      	bne.n	25614 <FinishAesDrv+0x88>
   2561c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2561e:	2b03      	cmp	r3, #3
   25620:	dd20      	ble.n	25664 <FinishAesDrv+0xd8>
   25622:	3b06      	subs	r3, #6
   25624:	2b01      	cmp	r3, #1
   25626:	d81f      	bhi.n	25668 <FinishAesDrv+0xdc>
   25628:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2562a:	2b01      	cmp	r3, #1
   2562c:	d83c      	bhi.n	256a8 <FinishAesDrv+0x11c>
   2562e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   25630:	2b01      	cmp	r3, #1
   25632:	f200 80a5 	bhi.w	25780 <FinishAesDrv+0x1f4>
   25636:	6e23      	ldr	r3, [r4, #96]	; 0x60
   25638:	2b01      	cmp	r3, #1
   2563a:	f200 80a3 	bhi.w	25784 <FinishAesDrv+0x1f8>
   2563e:	4620      	mov	r0, r4
   25640:	f7ff fd60 	bl	25104 <InitAes.part.0>
   25644:	4607      	mov	r7, r0
   25646:	b980      	cbnz	r0, 2566a <FinishAesDrv+0xde>
   25648:	4620      	mov	r0, r4
   2564a:	f7ff fd09 	bl	25060 <LoadAesKey>
   2564e:	4607      	mov	r7, r0
   25650:	b958      	cbnz	r0, 2566a <FinishAesDrv+0xde>
   25652:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25654:	2b07      	cmp	r3, #7
   25656:	d807      	bhi.n	25668 <FinishAesDrv+0xdc>
   25658:	e8df f003 	tbb	[pc, r3]
   2565c:	285c2835 	.word	0x285c2835
   25660:	285c0606 	.word	0x285c0606
   25664:	2b00      	cmp	r3, #0
   25666:	dadf      	bge.n	25628 <FinishAesDrv+0x9c>
   25668:	4f55      	ldr	r7, [pc, #340]	; (257c0 <FinishAesDrv+0x234>)
   2566a:	4a54      	ldr	r2, [pc, #336]	; (257bc <FinishAesDrv+0x230>)
   2566c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25670:	2b00      	cmp	r3, #0
   25672:	d1fb      	bne.n	2566c <FinishAesDrv+0xe0>
   25674:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   25678:	2001      	movs	r0, #1
   2567a:	f7fe fcd3 	bl	24024 <CC_PalPowerSaveModeSelect>
   2567e:	2800      	cmp	r0, #0
   25680:	d17a      	bne.n	25778 <FinishAesDrv+0x1ec>
   25682:	484d      	ldr	r0, [pc, #308]	; (257b8 <FinishAesDrv+0x22c>)
   25684:	f7fe fca6 	bl	23fd4 <CC_PalMutexUnlock>
   25688:	2800      	cmp	r0, #0
   2568a:	d0a0      	beq.n	255ce <FinishAesDrv+0x42>
   2568c:	484d      	ldr	r0, [pc, #308]	; (257c4 <FinishAesDrv+0x238>)
   2568e:	f7fd fd1d 	bl	230cc <CC_PalAbort>
   25692:	e79c      	b.n	255ce <FinishAesDrv+0x42>
   25694:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   25698:	e799      	b.n	255ce <FinishAesDrv+0x42>
   2569a:	2b01      	cmp	r3, #1
   2569c:	d1a4      	bne.n	255e8 <FinishAesDrv+0x5c>
   2569e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   256a2:	d3a1      	bcc.n	255e8 <FinishAesDrv+0x5c>
   256a4:	4f48      	ldr	r7, [pc, #288]	; (257c8 <FinishAesDrv+0x23c>)
   256a6:	e792      	b.n	255ce <FinishAesDrv+0x42>
   256a8:	4f48      	ldr	r7, [pc, #288]	; (257cc <FinishAesDrv+0x240>)
   256aa:	e7de      	b.n	2566a <FinishAesDrv+0xde>
   256ac:	4b43      	ldr	r3, [pc, #268]	; (257bc <FinishAesDrv+0x230>)
   256ae:	6822      	ldr	r2, [r4, #0]
   256b0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   256b4:	6862      	ldr	r2, [r4, #4]
   256b6:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   256ba:	68a2      	ldr	r2, [r4, #8]
   256bc:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   256c0:	68e2      	ldr	r2, [r4, #12]
   256c2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   256c6:	4b3d      	ldr	r3, [pc, #244]	; (257bc <FinishAesDrv+0x230>)
   256c8:	2201      	movs	r2, #1
   256ca:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   256ce:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   256d2:	2d00      	cmp	r5, #0
   256d4:	d158      	bne.n	25788 <FinishAesDrv+0x1fc>
   256d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
   256d8:	b909      	cbnz	r1, 256de <FinishAesDrv+0x152>
   256da:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   256de:	4b37      	ldr	r3, [pc, #220]	; (257bc <FinishAesDrv+0x230>)
   256e0:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   256e4:	2f00      	cmp	r7, #0
   256e6:	d1fb      	bne.n	256e0 <FinishAesDrv+0x154>
   256e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   256ea:	3b01      	subs	r3, #1
   256ec:	2b06      	cmp	r3, #6
   256ee:	d8bc      	bhi.n	2566a <FinishAesDrv+0xde>
   256f0:	a201      	add	r2, pc, #4	; (adr r2, 256f8 <FinishAesDrv+0x16c>)
   256f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   256f6:	bf00      	nop
   256f8:	00025731 	.word	0x00025731
   256fc:	0002574d 	.word	0x0002574d
   25700:	00025731 	.word	0x00025731
   25704:	0002566b 	.word	0x0002566b
   25708:	0002566b 	.word	0x0002566b
   2570c:	0002574d 	.word	0x0002574d
   25710:	00025731 	.word	0x00025731
   25714:	4b29      	ldr	r3, [pc, #164]	; (257bc <FinishAesDrv+0x230>)
   25716:	6822      	ldr	r2, [r4, #0]
   25718:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   2571c:	6862      	ldr	r2, [r4, #4]
   2571e:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   25722:	68a2      	ldr	r2, [r4, #8]
   25724:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   25728:	68e2      	ldr	r2, [r4, #12]
   2572a:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   2572e:	e7ca      	b.n	256c6 <FinishAesDrv+0x13a>
   25730:	4b22      	ldr	r3, [pc, #136]	; (257bc <FinishAesDrv+0x230>)
   25732:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   25736:	6022      	str	r2, [r4, #0]
   25738:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   2573c:	6062      	str	r2, [r4, #4]
   2573e:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   25742:	60a2      	str	r2, [r4, #8]
   25744:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   25748:	60e3      	str	r3, [r4, #12]
   2574a:	e78e      	b.n	2566a <FinishAesDrv+0xde>
   2574c:	4b1b      	ldr	r3, [pc, #108]	; (257bc <FinishAesDrv+0x230>)
   2574e:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   25752:	6022      	str	r2, [r4, #0]
   25754:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   25758:	6062      	str	r2, [r4, #4]
   2575a:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   2575e:	60a2      	str	r2, [r4, #8]
   25760:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   25764:	60e3      	str	r3, [r4, #12]
   25766:	e780      	b.n	2566a <FinishAesDrv+0xde>
   25768:	4819      	ldr	r0, [pc, #100]	; (257d0 <FinishAesDrv+0x244>)
   2576a:	f7fd fcaf 	bl	230cc <CC_PalAbort>
   2576e:	e74d      	b.n	2560c <FinishAesDrv+0x80>
   25770:	4818      	ldr	r0, [pc, #96]	; (257d4 <FinishAesDrv+0x248>)
   25772:	f7fd fcab 	bl	230cc <CC_PalAbort>
   25776:	e743      	b.n	25600 <FinishAesDrv+0x74>
   25778:	4817      	ldr	r0, [pc, #92]	; (257d8 <FinishAesDrv+0x24c>)
   2577a:	f7fd fca7 	bl	230cc <CC_PalAbort>
   2577e:	e780      	b.n	25682 <FinishAesDrv+0xf6>
   25780:	4f16      	ldr	r7, [pc, #88]	; (257dc <FinishAesDrv+0x250>)
   25782:	e772      	b.n	2566a <FinishAesDrv+0xde>
   25784:	4f16      	ldr	r7, [pc, #88]	; (257e0 <FinishAesDrv+0x254>)
   25786:	e770      	b.n	2566a <FinishAesDrv+0xde>
   25788:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   2578a:	6832      	ldr	r2, [r6, #0]
   2578c:	2901      	cmp	r1, #1
   2578e:	d00a      	beq.n	257a6 <FinishAesDrv+0x21a>
   25790:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   25794:	2010      	movs	r0, #16
   25796:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   2579a:	f7fe fb7d 	bl	23e98 <CC_HalWaitInterrupt>
   2579e:	4607      	mov	r7, r0
   257a0:	2800      	cmp	r0, #0
   257a2:	d09c      	beq.n	256de <FinishAesDrv+0x152>
   257a4:	e761      	b.n	2566a <FinishAesDrv+0xde>
   257a6:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   257aa:	2040      	movs	r0, #64	; 0x40
   257ac:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   257b0:	e7f3      	b.n	2579a <FinishAesDrv+0x20e>
   257b2:	bf00      	nop
   257b4:	00f1000b 	.word	0x00f1000b
   257b8:	20000774 	.word	0x20000774
   257bc:	5002b000 	.word	0x5002b000
   257c0:	00f10001 	.word	0x00f10001
   257c4:	0002a408 	.word	0x0002a408
   257c8:	00f10005 	.word	0x00f10005
   257cc:	00f10002 	.word	0x00f10002
   257d0:	0002a3c8 	.word	0x0002a3c8
   257d4:	0002a3b0 	.word	0x0002a3b0
   257d8:	0002a3e8 	.word	0x0002a3e8
   257dc:	00f10003 	.word	0x00f10003
   257e0:	00f10004 	.word	0x00f10004

000257e4 <kmu_validate_slot_and_size>:
   257e4:	b921      	cbnz	r1, 257f0 <kmu_validate_slot_and_size+0xc>
   257e6:	4b03      	ldr	r3, [pc, #12]	; (257f4 <kmu_validate_slot_and_size+0x10>)
   257e8:	2800      	cmp	r0, #0
   257ea:	bf18      	it	ne
   257ec:	4618      	movne	r0, r3
   257ee:	4770      	bx	lr
   257f0:	4801      	ldr	r0, [pc, #4]	; (257f8 <kmu_validate_slot_and_size+0x14>)
   257f2:	4770      	bx	lr
   257f4:	00f70001 	.word	0x00f70001
   257f8:	00f70003 	.word	0x00f70003

000257fc <kmu_validate_kdr_slot_and_size>:
   257fc:	b921      	cbnz	r1, 25808 <kmu_validate_kdr_slot_and_size+0xc>
   257fe:	4b03      	ldr	r3, [pc, #12]	; (2580c <kmu_validate_kdr_slot_and_size+0x10>)
   25800:	2800      	cmp	r0, #0
   25802:	bf18      	it	ne
   25804:	4618      	movne	r0, r3
   25806:	4770      	bx	lr
   25808:	4801      	ldr	r0, [pc, #4]	; (25810 <kmu_validate_kdr_slot_and_size+0x14>)
   2580a:	4770      	bx	lr
   2580c:	00f70001 	.word	0x00f70001
   25810:	00f70003 	.word	0x00f70003

00025814 <kmu_use_kdr_key>:
   25814:	4b03      	ldr	r3, [pc, #12]	; (25824 <kmu_use_kdr_key+0x10>)
   25816:	2000      	movs	r0, #0
   25818:	2201      	movs	r2, #1
   2581a:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   2581e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   25822:	4770      	bx	lr
   25824:	5002b000 	.word	0x5002b000

00025828 <kmu_derive_cmac>:
   25828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2582c:	b0cc      	sub	sp, #304	; 0x130
   2582e:	2400      	movs	r4, #0
   25830:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   25832:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   25836:	4682      	mov	sl, r0
   25838:	4689      	mov	r9, r1
   2583a:	4616      	mov	r6, r2
   2583c:	4621      	mov	r1, r4
   2583e:	2274      	movs	r2, #116	; 0x74
   25840:	a80e      	add	r0, sp, #56	; 0x38
   25842:	461f      	mov	r7, r3
   25844:	f001 fa25 	bl	26c92 <memset>
   25848:	2280      	movs	r2, #128	; 0x80
   2584a:	4621      	mov	r1, r4
   2584c:	a82c      	add	r0, sp, #176	; 0xb0
   2584e:	942b      	str	r4, [sp, #172]	; 0xac
   25850:	f001 fa1f 	bl	26c92 <memset>
   25854:	2384      	movs	r3, #132	; 0x84
   25856:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2585a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2585e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   25862:	9305      	str	r3, [sp, #20]
   25864:	d863      	bhi.n	2592e <kmu_derive_cmac+0x106>
   25866:	f7ff fcbf 	bl	251e8 <write_invalid_key>
   2586a:	ab05      	add	r3, sp, #20
   2586c:	4630      	mov	r0, r6
   2586e:	ae2b      	add	r6, sp, #172	; 0xac
   25870:	9301      	str	r3, [sp, #4]
   25872:	9502      	str	r5, [sp, #8]
   25874:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   25878:	4639      	mov	r1, r7
   2587a:	9600      	str	r6, [sp, #0]
   2587c:	f000 f862 	bl	25944 <UtilCmacBuildDataForDerivation>
   25880:	2800      	cmp	r0, #0
   25882:	d14f      	bne.n	25924 <kmu_derive_cmac+0xfc>
   25884:	2303      	movs	r3, #3
   25886:	f88d 3013 	strb.w	r3, [sp, #19]
   2588a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2588e:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   25892:	2307      	movs	r3, #7
   25894:	2200      	movs	r2, #0
   25896:	901c      	str	r0, [sp, #112]	; 0x70
   25898:	2110      	movs	r1, #16
   2589a:	a80e      	add	r0, sp, #56	; 0x38
   2589c:	931b      	str	r3, [sp, #108]	; 0x6c
   2589e:	2401      	movs	r4, #1
   258a0:	2301      	movs	r3, #1
   258a2:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   258a6:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   258aa:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   258ae:	9426      	str	r4, [sp, #152]	; 0x98
   258b0:	f10d 0920 	add.w	r9, sp, #32
   258b4:	f7fe fb6e 	bl	23f94 <CC_PalMemSetZeroPlat>
   258b8:	2210      	movs	r2, #16
   258ba:	9200      	str	r2, [sp, #0]
   258bc:	9905      	ldr	r1, [sp, #20]
   258be:	f8cd 9004 	str.w	r9, [sp, #4]
   258c2:	ab0a      	add	r3, sp, #40	; 0x28
   258c4:	4630      	mov	r0, r6
   258c6:	aa06      	add	r2, sp, #24
   258c8:	f7ff fa1e 	bl	24d08 <SetDataBuffersInfo>
   258cc:	4607      	mov	r7, r0
   258ce:	b170      	cbz	r0, 258ee <kmu_derive_cmac+0xc6>
   258d0:	e01d      	b.n	2590e <kmu_derive_cmac+0xe6>
   258d2:	a90e      	add	r1, sp, #56	; 0x38
   258d4:	eb08 0007 	add.w	r0, r8, r7
   258d8:	f7fe fb58 	bl	23f8c <CC_PalMemCopyPlat>
   258dc:	2110      	movs	r1, #16
   258de:	a80e      	add	r0, sp, #56	; 0x38
   258e0:	f7fe fb58 	bl	23f94 <CC_PalMemSetZeroPlat>
   258e4:	3401      	adds	r4, #1
   258e6:	1bad      	subs	r5, r5, r6
   258e8:	4437      	add	r7, r6
   258ea:	b2e4      	uxtb	r4, r4
   258ec:	d024      	beq.n	25938 <kmu_derive_cmac+0x110>
   258ee:	2d10      	cmp	r5, #16
   258f0:	464a      	mov	r2, r9
   258f2:	9b05      	ldr	r3, [sp, #20]
   258f4:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   258f8:	a906      	add	r1, sp, #24
   258fa:	a80e      	add	r0, sp, #56	; 0x38
   258fc:	462e      	mov	r6, r5
   258fe:	bf28      	it	cs
   25900:	2610      	movcs	r6, #16
   25902:	f7ff fe43 	bl	2558c <FinishAesDrv>
   25906:	4632      	mov	r2, r6
   25908:	2800      	cmp	r0, #0
   2590a:	d0e2      	beq.n	258d2 <kmu_derive_cmac+0xaa>
   2590c:	4607      	mov	r7, r0
   2590e:	a80e      	add	r0, sp, #56	; 0x38
   25910:	2274      	movs	r2, #116	; 0x74
   25912:	2100      	movs	r1, #0
   25914:	f7fe fb3c 	bl	23f90 <CC_PalMemSetPlat>
   25918:	f7ff fc66 	bl	251e8 <write_invalid_key>
   2591c:	4638      	mov	r0, r7
   2591e:	b04c      	add	sp, #304	; 0x130
   25920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25924:	4f05      	ldr	r7, [pc, #20]	; (2593c <kmu_derive_cmac+0x114>)
   25926:	4638      	mov	r0, r7
   25928:	b04c      	add	sp, #304	; 0x130
   2592a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2592e:	4f04      	ldr	r7, [pc, #16]	; (25940 <kmu_derive_cmac+0x118>)
   25930:	4638      	mov	r0, r7
   25932:	b04c      	add	sp, #304	; 0x130
   25934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25938:	462f      	mov	r7, r5
   2593a:	e7e8      	b.n	2590e <kmu_derive_cmac+0xe6>
   2593c:	00f1000e 	.word	0x00f1000e
   25940:	00f1000f 	.word	0x00f1000f

00025944 <UtilCmacBuildDataForDerivation>:
   25944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25948:	b082      	sub	sp, #8
   2594a:	461e      	mov	r6, r3
   2594c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2594e:	2300      	movs	r3, #0
   25950:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   25954:	9301      	str	r3, [sp, #4]
   25956:	d83e      	bhi.n	259d6 <UtilCmacBuildDataForDerivation+0x92>
   25958:	00e4      	lsls	r4, r4, #3
   2595a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   2595e:	4617      	mov	r7, r2
   25960:	f101 32ff 	add.w	r2, r1, #4294967295
   25964:	bf34      	ite	cc
   25966:	2303      	movcc	r3, #3
   25968:	2304      	movcs	r3, #4
   2596a:	2a3f      	cmp	r2, #63	; 0x3f
   2596c:	460d      	mov	r5, r1
   2596e:	9300      	str	r3, [sp, #0]
   25970:	d831      	bhi.n	259d6 <UtilCmacBuildDataForDerivation+0x92>
   25972:	b380      	cbz	r0, 259d6 <UtilCmacBuildDataForDerivation+0x92>
   25974:	b116      	cbz	r6, 2597c <UtilCmacBuildDataForDerivation+0x38>
   25976:	b377      	cbz	r7, 259d6 <UtilCmacBuildDataForDerivation+0x92>
   25978:	2e40      	cmp	r6, #64	; 0x40
   2597a:	d82c      	bhi.n	259d6 <UtilCmacBuildDataForDerivation+0x92>
   2597c:	9a08      	ldr	r2, [sp, #32]
   2597e:	b352      	cbz	r2, 259d6 <UtilCmacBuildDataForDerivation+0x92>
   25980:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25982:	6811      	ldr	r1, [r2, #0]
   25984:	b339      	cbz	r1, 259d6 <UtilCmacBuildDataForDerivation+0x92>
   25986:	19aa      	adds	r2, r5, r6
   25988:	4413      	add	r3, r2
   2598a:	4299      	cmp	r1, r3
   2598c:	d323      	bcc.n	259d6 <UtilCmacBuildDataForDerivation+0x92>
   2598e:	9b08      	ldr	r3, [sp, #32]
   25990:	4601      	mov	r1, r0
   25992:	462a      	mov	r2, r5
   25994:	1c58      	adds	r0, r3, #1
   25996:	f7fe faf9 	bl	23f8c <CC_PalMemCopyPlat>
   2599a:	9b08      	ldr	r3, [sp, #32]
   2599c:	f105 0802 	add.w	r8, r5, #2
   259a0:	441d      	add	r5, r3
   259a2:	2300      	movs	r3, #0
   259a4:	706b      	strb	r3, [r5, #1]
   259a6:	bb0e      	cbnz	r6, 259ec <UtilCmacBuildDataForDerivation+0xa8>
   259a8:	9b08      	ldr	r3, [sp, #32]
   259aa:	9400      	str	r4, [sp, #0]
   259ac:	2cff      	cmp	r4, #255	; 0xff
   259ae:	eb03 0008 	add.w	r0, r3, r8
   259b2:	d914      	bls.n	259de <UtilCmacBuildDataForDerivation+0x9a>
   259b4:	0223      	lsls	r3, r4, #8
   259b6:	b29b      	uxth	r3, r3
   259b8:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   259bc:	2202      	movs	r2, #2
   259be:	a901      	add	r1, sp, #4
   259c0:	9401      	str	r4, [sp, #4]
   259c2:	f7fe fae3 	bl	23f8c <CC_PalMemCopyPlat>
   259c6:	f108 0302 	add.w	r3, r8, #2
   259ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
   259cc:	2000      	movs	r0, #0
   259ce:	6013      	str	r3, [r2, #0]
   259d0:	b002      	add	sp, #8
   259d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   259d6:	480a      	ldr	r0, [pc, #40]	; (25a00 <UtilCmacBuildDataForDerivation+0xbc>)
   259d8:	b002      	add	sp, #8
   259da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   259de:	2201      	movs	r2, #1
   259e0:	4669      	mov	r1, sp
   259e2:	f7fe fad3 	bl	23f8c <CC_PalMemCopyPlat>
   259e6:	f108 0301 	add.w	r3, r8, #1
   259ea:	e7ee      	b.n	259ca <UtilCmacBuildDataForDerivation+0x86>
   259ec:	9b08      	ldr	r3, [sp, #32]
   259ee:	4632      	mov	r2, r6
   259f0:	eb03 0008 	add.w	r0, r3, r8
   259f4:	4639      	mov	r1, r7
   259f6:	f7fe fac9 	bl	23f8c <CC_PalMemCopyPlat>
   259fa:	44b0      	add	r8, r6
   259fc:	e7d4      	b.n	259a8 <UtilCmacBuildDataForDerivation+0x64>
   259fe:	bf00      	nop
   25a00:	80000006 	.word	0x80000006

00025a04 <CC_PalDataBufferAttrGet>:
   25a04:	2000      	movs	r0, #0
   25a06:	7018      	strb	r0, [r3, #0]
   25a08:	4770      	bx	lr
   25a0a:	bf00      	nop

00025a0c <app_led_cb>:
{
   25a0c:	4601      	mov	r1, r0
	dk_set_led(USER_LED, led_state);
   25a0e:	2002      	movs	r0, #2
   25a10:	f7f7 bfb2 	b.w	1d978 <dk_set_led>

00025a14 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   25a14:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   25a16:	2364      	movs	r3, #100	; 0x64
{
   25a18:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   25a1a:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   25a1c:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   25a1e:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   25a20:	b969      	cbnz	r1, 25a3e <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   25a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   25a24:	429a      	cmp	r2, r3
   25a26:	fbb2 f4f3 	udiv	r4, r2, r3
   25a2a:	d20c      	bcs.n	25a46 <u8_to_dec+0x32>
   25a2c:	2b01      	cmp	r3, #1
   25a2e:	d00a      	beq.n	25a46 <u8_to_dec+0x32>
   25a30:	b948      	cbnz	r0, 25a46 <u8_to_dec+0x32>
		value -= digit * divisor;
   25a32:	fb03 2214 	mls	r2, r3, r4, r2
   25a36:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   25a38:	240a      	movs	r4, #10
   25a3a:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   25a3e:	3e01      	subs	r6, #1
   25a40:	d1f0      	bne.n	25a24 <u8_to_dec+0x10>
		*buf = '\0';
   25a42:	702e      	strb	r6, [r5, #0]
	return num_digits;
   25a44:	e7ed      	b.n	25a22 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   25a46:	3430      	adds	r4, #48	; 0x30
   25a48:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   25a4c:	fbb2 f4f3 	udiv	r4, r2, r3
   25a50:	3901      	subs	r1, #1
   25a52:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   25a56:	3001      	adds	r0, #1
		divisor /= 10;
   25a58:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   25a5c:	b2c9      	uxtb	r1, r1
			num_digits++;
   25a5e:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   25a60:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   25a62:	b2db      	uxtb	r3, r3
   25a64:	e7dc      	b.n	25a20 <u8_to_dec+0xc>

00025a66 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   25a66:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   25a6a:	b2db      	uxtb	r3, r3
   25a6c:	2b09      	cmp	r3, #9
   25a6e:	d802      	bhi.n	25a76 <char2hex+0x10>
		*x = c - '0';
   25a70:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   25a72:	2000      	movs	r0, #0
   25a74:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   25a76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   25a7a:	2b05      	cmp	r3, #5
   25a7c:	d802      	bhi.n	25a84 <char2hex+0x1e>
		*x = c - 'a' + 10;
   25a7e:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   25a80:	b2c3      	uxtb	r3, r0
   25a82:	e7f5      	b.n	25a70 <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   25a84:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   25a88:	2b05      	cmp	r3, #5
   25a8a:	d801      	bhi.n	25a90 <char2hex+0x2a>
		*x = c - 'A' + 10;
   25a8c:	3837      	subs	r0, #55	; 0x37
   25a8e:	e7f7      	b.n	25a80 <char2hex+0x1a>
		return -EINVAL;
   25a90:	f06f 0015 	mvn.w	r0, #21
}
   25a94:	4770      	bx	lr

00025a96 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   25a96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25a98:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   25a9a:	f001 0001 	and.w	r0, r1, #1
   25a9e:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   25aa2:	429e      	cmp	r6, r3
   25aa4:	ea4f 0751 	mov.w	r7, r1, lsr #1
   25aa8:	d903      	bls.n	25ab2 <hex2bin+0x1c>
		return 0;
   25aaa:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   25aac:	4630      	mov	r0, r6
   25aae:	b003      	add	sp, #12
   25ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   25ab2:	b158      	cbz	r0, 25acc <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   25ab4:	7828      	ldrb	r0, [r5, #0]
   25ab6:	f10d 0107 	add.w	r1, sp, #7
   25aba:	f7ff ffd4 	bl	25a66 <char2hex>
   25abe:	2800      	cmp	r0, #0
   25ac0:	dbf3      	blt.n	25aaa <hex2bin+0x14>
		buf[0] = dec;
   25ac2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25ac6:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   25aca:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   25acc:	3501      	adds	r5, #1
   25ace:	4417      	add	r7, r2
   25ad0:	42ba      	cmp	r2, r7
   25ad2:	d0eb      	beq.n	25aac <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   25ad4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   25ad8:	f10d 0107 	add.w	r1, sp, #7
   25adc:	f7ff ffc3 	bl	25a66 <char2hex>
   25ae0:	2800      	cmp	r0, #0
   25ae2:	dbe2      	blt.n	25aaa <hex2bin+0x14>
		buf[i] = dec << 4;
   25ae4:	f89d 4007 	ldrb.w	r4, [sp, #7]
   25ae8:	0124      	lsls	r4, r4, #4
   25aea:	b2e4      	uxtb	r4, r4
   25aec:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   25aee:	f815 0b02 	ldrb.w	r0, [r5], #2
   25af2:	f7ff ffb8 	bl	25a66 <char2hex>
   25af6:	2800      	cmp	r0, #0
   25af8:	dbd7      	blt.n	25aaa <hex2bin+0x14>
		buf[i] += dec;
   25afa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25afe:	441c      	add	r4, r3
   25b00:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   25b04:	e7e4      	b.n	25ad0 <hex2bin+0x3a>

00025b06 <arch_printk_char_out>:
}
   25b06:	2000      	movs	r0, #0
   25b08:	4770      	bx	lr

00025b0a <str_out>:
{
   25b0a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25b0c:	688a      	ldr	r2, [r1, #8]
   25b0e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   25b10:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25b12:	b114      	cbz	r4, 25b1a <str_out+0x10>
   25b14:	684b      	ldr	r3, [r1, #4]
   25b16:	4293      	cmp	r3, r2
   25b18:	dc01      	bgt.n	25b1e <str_out+0x14>
		ctx->count++;
   25b1a:	608d      	str	r5, [r1, #8]
}
   25b1c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   25b1e:	3b01      	subs	r3, #1
   25b20:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   25b22:	bf08      	it	eq
   25b24:	2200      	moveq	r2, #0
   25b26:	608d      	str	r5, [r1, #8]
   25b28:	bf0c      	ite	eq
   25b2a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   25b2c:	54a0      	strbne	r0, [r4, r2]
   25b2e:	e7f5      	b.n	25b1c <str_out+0x12>

00025b30 <printk>:
{
   25b30:	b40f      	push	{r0, r1, r2, r3}
   25b32:	b507      	push	{r0, r1, r2, lr}
   25b34:	a904      	add	r1, sp, #16
   25b36:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25b3a:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   25b3c:	f7eb f9dc 	bl	10ef8 <vprintk>
}
   25b40:	b003      	add	sp, #12
   25b42:	f85d eb04 	ldr.w	lr, [sp], #4
   25b46:	b004      	add	sp, #16
   25b48:	4770      	bx	lr

00025b4a <snprintk>:
{
   25b4a:	b40c      	push	{r2, r3}
   25b4c:	b507      	push	{r0, r1, r2, lr}
   25b4e:	ab04      	add	r3, sp, #16
   25b50:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   25b54:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   25b56:	f7eb f9dd 	bl	10f14 <vsnprintk>
}
   25b5a:	b003      	add	sp, #12
   25b5c:	f85d eb04 	ldr.w	lr, [sp], #4
   25b60:	b002      	add	sp, #8
   25b62:	4770      	bx	lr

00025b64 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   25b64:	4604      	mov	r4, r0
   25b66:	b508      	push	{r3, lr}
   25b68:	4608      	mov	r0, r1
   25b6a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   25b6c:	461a      	mov	r2, r3
   25b6e:	47a0      	blx	r4
	return z_impl_z_current_get();
   25b70:	f7fc f8ca 	bl	21d08 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   25b74:	f7ed fea0 	bl	138b8 <z_impl_k_thread_abort>

00025b78 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   25b78:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   25b7c:	8840      	ldrh	r0, [r0, #2]
}
   25b7e:	0840      	lsrs	r0, r0, #1
   25b80:	4770      	bx	lr

00025b82 <free_list_add>:
{
   25b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b84:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   25b86:	f7ff fff7 	bl	25b78 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25b8a:	fab0 f080 	clz	r0, r0
   25b8e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   25b92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   25b96:	00ca      	lsls	r2, r1, #3
   25b98:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   25b9c:	1d17      	adds	r7, r2, #4
{
   25b9e:	460c      	mov	r4, r1
   25ba0:	3206      	adds	r2, #6
   25ba2:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   25ba4:	b956      	cbnz	r6, 25bbc <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   25ba6:	2101      	movs	r1, #1
   25ba8:	fa01 f000 	lsl.w	r0, r1, r0
   25bac:	68d9      	ldr	r1, [r3, #12]
   25bae:	4301      	orrs	r1, r0
   25bb0:	60d9      	str	r1, [r3, #12]
		b->next = c;
   25bb2:	f8cc 4010 	str.w	r4, [ip, #16]
   25bb6:	53dd      	strh	r5, [r3, r7]
   25bb8:	529d      	strh	r5, [r3, r2]
}
   25bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   25bbc:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   25bbe:	3104      	adds	r1, #4
   25bc0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   25bc2:	53d8      	strh	r0, [r3, r7]
   25bc4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   25bc8:	529e      	strh	r6, [r3, r2]
   25bca:	80c5      	strh	r5, [r0, #6]
   25bcc:	525d      	strh	r5, [r3, r1]
   25bce:	e7f4      	b.n	25bba <free_list_add+0x38>

00025bd0 <free_list_remove_bidx>:
{
   25bd0:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   25bd2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   25bd6:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   25bd8:	4299      	cmp	r1, r3
   25bda:	f102 0104 	add.w	r1, r2, #4
   25bde:	d10a      	bne.n	25bf6 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   25be0:	2301      	movs	r3, #1
   25be2:	fa03 f202 	lsl.w	r2, r3, r2
   25be6:	68c3      	ldr	r3, [r0, #12]
   25be8:	ea23 0302 	bic.w	r3, r3, r2
   25bec:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   25bee:	2300      	movs	r3, #0
   25bf0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   25bf4:	bd10      	pop	{r4, pc}
   25bf6:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   25bf8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   25bfc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   25c00:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   25c04:	80cb      	strh	r3, [r1, #6]
   25c06:	8082      	strh	r2, [r0, #4]
}
   25c08:	e7f4      	b.n	25bf4 <free_list_remove_bidx+0x24>

00025c0a <free_list_remove>:
{
   25c0a:	b508      	push	{r3, lr}
   25c0c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   25c0e:	f7ff ffb3 	bl	25b78 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25c12:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   25c16:	f1c2 021f 	rsb	r2, r2, #31
   25c1a:	4618      	mov	r0, r3
}
   25c1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   25c20:	f7ff bfd6 	b.w	25bd0 <free_list_remove_bidx>

00025c24 <alloc_chunk>:
{
   25c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25c28:	fab1 f581 	clz	r5, r1
   25c2c:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   25c30:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   25c34:	4603      	mov	r3, r0
	if (b->next) {
   25c36:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   25c3a:	460e      	mov	r6, r1
	if (b->next) {
   25c3c:	b1c2      	cbz	r2, 25c70 <alloc_chunk+0x4c>
   25c3e:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   25c40:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   25c44:	4618      	mov	r0, r3
   25c46:	4621      	mov	r1, r4
   25c48:	f7ff ff96 	bl	25b78 <chunk_size>
   25c4c:	42b0      	cmp	r0, r6
   25c4e:	d306      	bcc.n	25c5e <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   25c50:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   25c52:	4618      	mov	r0, r3
   25c54:	f7ff ffbc 	bl	25bd0 <free_list_remove_bidx>
}
   25c58:	4620      	mov	r0, r4
   25c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   25c5e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   25c62:	3f01      	subs	r7, #1
   25c64:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   25c66:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   25c6a:	d001      	beq.n	25c70 <alloc_chunk+0x4c>
   25c6c:	4282      	cmp	r2, r0
   25c6e:	d1e7      	bne.n	25c40 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   25c70:	f1c5 0220 	rsb	r2, r5, #32
   25c74:	f04f 34ff 	mov.w	r4, #4294967295
   25c78:	4094      	lsls	r4, r2
   25c7a:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   25c7c:	4014      	ands	r4, r2
   25c7e:	d0eb      	beq.n	25c58 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   25c80:	fa94 f2a4 	rbit	r2, r4
   25c84:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   25c88:	1d11      	adds	r1, r2, #4
   25c8a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   25c8e:	4621      	mov	r1, r4
   25c90:	e7df      	b.n	25c52 <alloc_chunk+0x2e>

00025c92 <merge_chunks>:
{
   25c92:	b538      	push	{r3, r4, r5, lr}
   25c94:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25c96:	f7ff ff6f 	bl	25b78 <chunk_size>
{
   25c9a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25c9c:	4604      	mov	r4, r0
   25c9e:	4611      	mov	r1, r2
   25ca0:	4618      	mov	r0, r3
   25ca2:	f7ff ff69 	bl	25b78 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   25ca6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   25caa:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25cac:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   25cae:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   25cb0:	4618      	mov	r0, r3
   25cb2:	f7ff ff61 	bl	25b78 <chunk_size>
	void *cmem = &buf[c];
   25cb6:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25cb8:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   25cbc:	bd38      	pop	{r3, r4, r5, pc}

00025cbe <split_chunks>:
{
   25cbe:	b538      	push	{r3, r4, r5, lr}
   25cc0:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   25cc2:	f7ff ff59 	bl	25b78 <chunk_size>
{
   25cc6:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   25cc8:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   25cca:	1a51      	subs	r1, r2, r1
   25ccc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   25cd0:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25cd2:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   25cd4:	8060      	strh	r0, [r4, #2]
   25cd6:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25cda:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   25cdc:	8044      	strh	r4, [r0, #2]
   25cde:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   25ce2:	4618      	mov	r0, r3
   25ce4:	4611      	mov	r1, r2
   25ce6:	f7ff ff47 	bl	25b78 <chunk_size>
	void *cmem = &buf[c];
   25cea:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25cec:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   25cf0:	bd38      	pop	{r3, r4, r5, pc}

00025cf2 <free_chunk>:
{
   25cf2:	b538      	push	{r3, r4, r5, lr}
   25cf4:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   25cf6:	f7ff ff3f 	bl	25b78 <chunk_size>
   25cfa:	460c      	mov	r4, r1
   25cfc:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   25cfe:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25d02:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   25d04:	07da      	lsls	r2, r3, #31
   25d06:	d40a      	bmi.n	25d1e <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   25d08:	4628      	mov	r0, r5
   25d0a:	f7ff ff7e 	bl	25c0a <free_list_remove>
	return c + chunk_size(h, c);
   25d0e:	4621      	mov	r1, r4
   25d10:	4628      	mov	r0, r5
   25d12:	f7ff ff31 	bl	25b78 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   25d16:	1822      	adds	r2, r4, r0
   25d18:	4628      	mov	r0, r5
   25d1a:	f7ff ffba 	bl	25c92 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   25d1e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25d22:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   25d24:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25d28:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   25d2a:	07db      	lsls	r3, r3, #31
   25d2c:	d40c      	bmi.n	25d48 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   25d2e:	4628      	mov	r0, r5
   25d30:	f7ff ff6b 	bl	25c0a <free_list_remove>
		return ((uint16_t *)cmem)[f];
   25d34:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   25d38:	4622      	mov	r2, r4
   25d3a:	1a61      	subs	r1, r4, r1
   25d3c:	4628      	mov	r0, r5
   25d3e:	f7ff ffa8 	bl	25c92 <merge_chunks>
   25d42:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25d46:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   25d48:	4621      	mov	r1, r4
   25d4a:	4628      	mov	r0, r5
}
   25d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   25d50:	f7ff bf17 	b.w	25b82 <free_list_add>

00025d54 <sys_heap_alloc>:
{
   25d54:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   25d56:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   25d58:	b909      	cbnz	r1, 25d5e <sys_heap_alloc+0xa>
		return NULL;
   25d5a:	2000      	movs	r0, #0
}
   25d5c:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   25d5e:	68ab      	ldr	r3, [r5, #8]
   25d60:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   25d64:	d9f9      	bls.n	25d5a <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25d66:	310b      	adds	r1, #11
   25d68:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   25d6a:	4621      	mov	r1, r4
   25d6c:	4628      	mov	r0, r5
   25d6e:	f7ff ff59 	bl	25c24 <alloc_chunk>
	if (c == 0U) {
   25d72:	4606      	mov	r6, r0
   25d74:	2800      	cmp	r0, #0
   25d76:	d0f0      	beq.n	25d5a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   25d78:	4601      	mov	r1, r0
   25d7a:	4628      	mov	r0, r5
   25d7c:	f7ff fefc 	bl	25b78 <chunk_size>
   25d80:	42a0      	cmp	r0, r4
   25d82:	d907      	bls.n	25d94 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   25d84:	1932      	adds	r2, r6, r4
   25d86:	4628      	mov	r0, r5
   25d88:	f7ff ff99 	bl	25cbe <split_chunks>
		free_list_add(h, c + chunk_sz);
   25d8c:	4611      	mov	r1, r2
   25d8e:	4628      	mov	r0, r5
   25d90:	f7ff fef7 	bl	25b82 <free_list_add>
	void *cmem = &buf[c];
   25d94:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   25d98:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25d9a:	8853      	ldrh	r3, [r2, #2]
   25d9c:	f043 0301 	orr.w	r3, r3, #1
   25da0:	8053      	strh	r3, [r2, #2]
   25da2:	3004      	adds	r0, #4
	return mem;
   25da4:	e7da      	b.n	25d5c <sys_heap_alloc+0x8>

00025da6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25da6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   25da8:	f013 0307 	ands.w	r3, r3, #7
   25dac:	d105      	bne.n	25dba <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   25dae:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   25db0:	2b00      	cmp	r3, #0
   25db2:	bf0c      	ite	eq
   25db4:	2000      	moveq	r0, #0
   25db6:	2003      	movne	r0, #3
   25db8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   25dba:	2b02      	cmp	r3, #2
   25dbc:	d105      	bne.n	25dca <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   25dbe:	8bc0      	ldrh	r0, [r0, #30]
   25dc0:	fab0 f080 	clz	r0, r0
   25dc4:	0940      	lsrs	r0, r0, #5
   25dc6:	0080      	lsls	r0, r0, #2
   25dc8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   25dca:	2b01      	cmp	r3, #1
   25dcc:	d105      	bne.n	25dda <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   25dce:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   25dd0:	2b00      	cmp	r3, #0
   25dd2:	bf0c      	ite	eq
   25dd4:	2000      	moveq	r0, #0
   25dd6:	2005      	movne	r0, #5
   25dd8:	4770      	bx	lr
	int evt = EVT_NOP;
   25dda:	2000      	movs	r0, #0
}
   25ddc:	4770      	bx	lr

00025dde <validate_args>:
{
   25dde:	b510      	push	{r4, lr}
   25de0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   25de2:	b100      	cbz	r0, 25de6 <validate_args+0x8>
   25de4:	b911      	cbnz	r1, 25dec <validate_args+0xe>
		return -EINVAL;
   25de6:	f06f 0015 	mvn.w	r0, #21
}
   25dea:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   25dec:	1d08      	adds	r0, r1, #4
   25dee:	f000 f82f 	bl	25e50 <sys_notify_validate>
	if ((rv == 0)
   25df2:	2800      	cmp	r0, #0
   25df4:	d1f9      	bne.n	25dea <validate_args+0xc>
	    && ((cli->notify.flags
   25df6:	68a3      	ldr	r3, [r4, #8]
   25df8:	2b03      	cmp	r3, #3
   25dfa:	d9f6      	bls.n	25dea <validate_args+0xc>
   25dfc:	e7f3      	b.n	25de6 <validate_args+0x8>

00025dfe <notify_one>:
{
   25dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e02:	460d      	mov	r5, r1
   25e04:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25e06:	4619      	mov	r1, r3
   25e08:	1d28      	adds	r0, r5, #4
{
   25e0a:	4690      	mov	r8, r2
   25e0c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25e0e:	f7eb fbf9 	bl	11604 <sys_notify_finalize>
	if (cb) {
   25e12:	4604      	mov	r4, r0
   25e14:	b138      	cbz	r0, 25e26 <notify_one+0x28>
		cb(mgr, cli, state, res);
   25e16:	4633      	mov	r3, r6
   25e18:	4642      	mov	r2, r8
   25e1a:	4629      	mov	r1, r5
   25e1c:	4638      	mov	r0, r7
   25e1e:	46a4      	mov	ip, r4
}
   25e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   25e24:	4760      	bx	ip
}
   25e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025e2a <onoff_manager_init>:
{
   25e2a:	b538      	push	{r3, r4, r5, lr}
   25e2c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   25e2e:	4605      	mov	r5, r0
   25e30:	b158      	cbz	r0, 25e4a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   25e32:	b151      	cbz	r1, 25e4a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   25e34:	680b      	ldr	r3, [r1, #0]
   25e36:	b143      	cbz	r3, 25e4a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   25e38:	684b      	ldr	r3, [r1, #4]
   25e3a:	b133      	cbz	r3, 25e4a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25e3c:	2220      	movs	r2, #32
   25e3e:	2100      	movs	r1, #0
   25e40:	f000 ff27 	bl	26c92 <memset>
   25e44:	612c      	str	r4, [r5, #16]
	return 0;
   25e46:	2000      	movs	r0, #0
}
   25e48:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25e4a:	f06f 0015 	mvn.w	r0, #21
   25e4e:	e7fb      	b.n	25e48 <onoff_manager_init+0x1e>

00025e50 <sys_notify_validate>:
	if (notify == NULL) {
   25e50:	4603      	mov	r3, r0
   25e52:	b140      	cbz	r0, 25e66 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25e54:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25e56:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   25e5a:	2a02      	cmp	r2, #2
   25e5c:	d006      	beq.n	25e6c <sys_notify_validate+0x1c>
   25e5e:	2a03      	cmp	r2, #3
   25e60:	d004      	beq.n	25e6c <sys_notify_validate+0x1c>
   25e62:	2a01      	cmp	r2, #1
   25e64:	d005      	beq.n	25e72 <sys_notify_validate+0x22>
   25e66:	f06f 0015 	mvn.w	r0, #21
}
   25e6a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   25e6c:	681a      	ldr	r2, [r3, #0]
   25e6e:	2a00      	cmp	r2, #0
   25e70:	d0f9      	beq.n	25e66 <sys_notify_validate+0x16>
		notify->result = 0;
   25e72:	2000      	movs	r0, #0
   25e74:	6098      	str	r0, [r3, #8]
   25e76:	4770      	bx	lr

00025e78 <encode_uint>:
{
   25e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e7c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   25e7e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   25e80:	2b6f      	cmp	r3, #111	; 0x6f
{
   25e82:	4680      	mov	r8, r0
   25e84:	460f      	mov	r7, r1
   25e86:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   25e88:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   25e8c:	d029      	beq.n	25ee2 <encode_uint+0x6a>
   25e8e:	d824      	bhi.n	25eda <encode_uint+0x62>
		return 10;
   25e90:	2b58      	cmp	r3, #88	; 0x58
   25e92:	bf0c      	ite	eq
   25e94:	2610      	moveq	r6, #16
   25e96:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   25e98:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   25e9c:	4632      	mov	r2, r6
   25e9e:	2300      	movs	r3, #0
   25ea0:	4640      	mov	r0, r8
   25ea2:	4639      	mov	r1, r7
   25ea4:	f7da f92c 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25ea8:	2a09      	cmp	r2, #9
   25eaa:	b2d4      	uxtb	r4, r2
   25eac:	d81e      	bhi.n	25eec <encode_uint+0x74>
   25eae:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   25eb0:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25eb2:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   25eb4:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25eb8:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   25ebc:	d301      	bcc.n	25ec2 <encode_uint+0x4a>
   25ebe:	45d1      	cmp	r9, sl
   25ec0:	d811      	bhi.n	25ee6 <encode_uint+0x6e>
	if (conv->flag_hash) {
   25ec2:	782b      	ldrb	r3, [r5, #0]
   25ec4:	069b      	lsls	r3, r3, #26
   25ec6:	d505      	bpl.n	25ed4 <encode_uint+0x5c>
		if (radix == 8) {
   25ec8:	2e08      	cmp	r6, #8
   25eca:	d115      	bne.n	25ef8 <encode_uint+0x80>
			conv->altform_0 = true;
   25ecc:	78ab      	ldrb	r3, [r5, #2]
   25ece:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   25ed2:	70ab      	strb	r3, [r5, #2]
}
   25ed4:	4648      	mov	r0, r9
   25ed6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   25eda:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   25ede:	2b70      	cmp	r3, #112	; 0x70
   25ee0:	e7d7      	b.n	25e92 <encode_uint+0x1a>
	switch (specifier) {
   25ee2:	2608      	movs	r6, #8
   25ee4:	e7d8      	b.n	25e98 <encode_uint+0x20>
		value /= radix;
   25ee6:	4680      	mov	r8, r0
   25ee8:	460f      	mov	r7, r1
   25eea:	e7d7      	b.n	25e9c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25eec:	f1bb 0f19 	cmp.w	fp, #25
   25ef0:	bf94      	ite	ls
   25ef2:	3437      	addls	r4, #55	; 0x37
   25ef4:	3457      	addhi	r4, #87	; 0x57
   25ef6:	e7db      	b.n	25eb0 <encode_uint+0x38>
		} else if (radix == 16) {
   25ef8:	2e10      	cmp	r6, #16
   25efa:	d1eb      	bne.n	25ed4 <encode_uint+0x5c>
			conv->altform_0c = true;
   25efc:	78ab      	ldrb	r3, [r5, #2]
   25efe:	f043 0310 	orr.w	r3, r3, #16
   25f02:	e7e6      	b.n	25ed2 <encode_uint+0x5a>

00025f04 <outs>:
{
   25f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25f08:	4607      	mov	r7, r0
   25f0a:	4688      	mov	r8, r1
   25f0c:	4615      	mov	r5, r2
   25f0e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   25f10:	4614      	mov	r4, r2
   25f12:	42b4      	cmp	r4, r6
   25f14:	d305      	bcc.n	25f22 <outs+0x1e>
   25f16:	b10e      	cbz	r6, 25f1c <outs+0x18>
	return (int)count;
   25f18:	1b60      	subs	r0, r4, r5
   25f1a:	e008      	b.n	25f2e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   25f1c:	7823      	ldrb	r3, [r4, #0]
   25f1e:	2b00      	cmp	r3, #0
   25f20:	d0fa      	beq.n	25f18 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   25f22:	f814 0b01 	ldrb.w	r0, [r4], #1
   25f26:	4641      	mov	r1, r8
   25f28:	47b8      	blx	r7
		if (rc < 0) {
   25f2a:	2800      	cmp	r0, #0
   25f2c:	daf1      	bge.n	25f12 <outs+0xe>
}
   25f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025f32 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   25f32:	4040      	eors	r0, r0
   25f34:	f380 8811 	msr	BASEPRI, r0
   25f38:	f04f 0004 	mov.w	r0, #4
   25f3c:	df02      	svc	2
}
   25f3e:	4770      	bx	lr

00025f40 <assert_print>:

void assert_print(const char *fmt, ...)
{
   25f40:	b40f      	push	{r0, r1, r2, r3}
   25f42:	b507      	push	{r0, r1, r2, lr}
   25f44:	a904      	add	r1, sp, #16
   25f46:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   25f4a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   25f4c:	f7ea ffd4 	bl	10ef8 <vprintk>

	va_end(ap);
}
   25f50:	b003      	add	sp, #12
   25f52:	f85d eb04 	ldr.w	lr, [sp], #4
   25f56:	b004      	add	sp, #16
   25f58:	4770      	bx	lr

00025f5a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   25f5a:	4770      	bx	lr

00025f5c <z_log_minimal_printk>:
{
   25f5c:	b40f      	push	{r0, r1, r2, r3}
   25f5e:	b507      	push	{r0, r1, r2, lr}
   25f60:	a904      	add	r1, sp, #16
   25f62:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25f66:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   25f68:	f7ea ffc6 	bl	10ef8 <vprintk>
}
   25f6c:	b003      	add	sp, #12
   25f6e:	f85d eb04 	ldr.w	lr, [sp], #4
   25f72:	b004      	add	sp, #16
   25f74:	4770      	bx	lr

00025f76 <nvs_flash_rd>:
{
   25f76:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   25f78:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25f7a:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   25f7c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25f7e:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   25f80:	fa16 f181 	uxtah	r1, r6, r1
   25f84:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   25f88:	6884      	ldr	r4, [r0, #8]
   25f8a:	6824      	ldr	r4, [r4, #0]
   25f8c:	46a4      	mov	ip, r4
}
   25f8e:	bc70      	pop	{r4, r5, r6}
   25f90:	4760      	bx	ip

00025f92 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   25f92:	680b      	ldr	r3, [r1, #0]
   25f94:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   25f98:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   25f9a:	89c0      	ldrh	r0, [r0, #14]
   25f9c:	0c1a      	lsrs	r2, r3, #16
   25f9e:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   25fa2:	bf04      	itt	eq
   25fa4:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   25fa8:	600b      	streq	r3, [r1, #0]
}
   25faa:	4770      	bx	lr

00025fac <nvs_flash_block_cmp>:
{
   25fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25fb0:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   25fb2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   25fb4:	681d      	ldr	r5, [r3, #0]
   25fb6:	426d      	negs	r5, r5
{
   25fb8:	b089      	sub	sp, #36	; 0x24
   25fba:	4681      	mov	r9, r0
   25fbc:	460e      	mov	r6, r1
   25fbe:	4617      	mov	r7, r2
	block_size =
   25fc0:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   25fc4:	b91c      	cbnz	r4, 25fce <nvs_flash_block_cmp+0x22>
	return 0;
   25fc6:	4620      	mov	r0, r4
}
   25fc8:	b009      	add	sp, #36	; 0x24
   25fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   25fce:	42ac      	cmp	r4, r5
   25fd0:	46a0      	mov	r8, r4
   25fd2:	bf28      	it	cs
   25fd4:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   25fd6:	4643      	mov	r3, r8
   25fd8:	466a      	mov	r2, sp
   25fda:	4631      	mov	r1, r6
   25fdc:	4648      	mov	r0, r9
   25fde:	f7ff ffca 	bl	25f76 <nvs_flash_rd>
		if (rc) {
   25fe2:	2800      	cmp	r0, #0
   25fe4:	d1f0      	bne.n	25fc8 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   25fe6:	4642      	mov	r2, r8
   25fe8:	4669      	mov	r1, sp
   25fea:	4638      	mov	r0, r7
   25fec:	f000 fe1f 	bl	26c2e <memcmp>
		if (rc) {
   25ff0:	b920      	cbnz	r0, 25ffc <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   25ff2:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   25ff6:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   25ff8:	4447      	add	r7, r8
   25ffa:	e7e3      	b.n	25fc4 <nvs_flash_block_cmp+0x18>
			return 1;
   25ffc:	2001      	movs	r0, #1
   25ffe:	e7e3      	b.n	25fc8 <nvs_flash_block_cmp+0x1c>

00026000 <nvs_flash_cmp_const>:
{
   26000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26004:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26006:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   26008:	681d      	ldr	r5, [r3, #0]
   2600a:	426d      	negs	r5, r5
{
   2600c:	b088      	sub	sp, #32
	block_size =
   2600e:	f005 0520 	and.w	r5, r5, #32
{
   26012:	4607      	mov	r7, r0
   26014:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   26016:	4668      	mov	r0, sp
{
   26018:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2601a:	462a      	mov	r2, r5
   2601c:	f000 fe39 	bl	26c92 <memset>
	while (len) {
   26020:	b91c      	cbnz	r4, 2602a <nvs_flash_cmp_const+0x2a>
	return 0;
   26022:	4620      	mov	r0, r4
}
   26024:	b008      	add	sp, #32
   26026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2602a:	42ac      	cmp	r4, r5
   2602c:	46a0      	mov	r8, r4
   2602e:	bf28      	it	cs
   26030:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   26032:	4643      	mov	r3, r8
   26034:	466a      	mov	r2, sp
   26036:	4631      	mov	r1, r6
   26038:	4638      	mov	r0, r7
   2603a:	f7ff ffb7 	bl	25fac <nvs_flash_block_cmp>
		if (rc) {
   2603e:	2800      	cmp	r0, #0
   26040:	d1f0      	bne.n	26024 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   26042:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   26046:	4446      	add	r6, r8
   26048:	e7ea      	b.n	26020 <nvs_flash_cmp_const+0x20>

0002604a <nvs_flash_erase_sector>:
{
   2604a:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2604c:	8982      	ldrh	r2, [r0, #12]
   2604e:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   26050:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   26052:	0c09      	lsrs	r1, r1, #16
{
   26054:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   26056:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   26058:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2605a:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   2605e:	6883      	ldr	r3, [r0, #8]
   26060:	689b      	ldr	r3, [r3, #8]
   26062:	4798      	blx	r3
	if (rc) {
   26064:	b950      	cbnz	r0, 2607c <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   26066:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   26068:	89a3      	ldrh	r3, [r4, #12]
   2606a:	7912      	ldrb	r2, [r2, #4]
   2606c:	4629      	mov	r1, r5
   2606e:	4620      	mov	r0, r4
   26070:	f7ff ffc6 	bl	26000 <nvs_flash_cmp_const>
		rc = -ENXIO;
   26074:	2800      	cmp	r0, #0
   26076:	bf18      	it	ne
   26078:	f06f 0005 	mvnne.w	r0, #5
}
   2607c:	bd38      	pop	{r3, r4, r5, pc}

0002607e <nvs_ate_crc8_update>:
{
   2607e:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26080:	4601      	mov	r1, r0
{
   26082:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26084:	2207      	movs	r2, #7
   26086:	20ff      	movs	r0, #255	; 0xff
   26088:	f7ea ff14 	bl	10eb4 <crc8_ccitt>
	entry->crc8 = crc8;
   2608c:	71e0      	strb	r0, [r4, #7]
}
   2608e:	bd10      	pop	{r4, pc}

00026090 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   26090:	7803      	ldrb	r3, [r0, #0]
   26092:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   26094:	bf81      	itttt	hi
   26096:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2609a:	18c9      	addhi	r1, r1, r3
   2609c:	425b      	neghi	r3, r3
   2609e:	4019      	andhi	r1, r3
}
   260a0:	4608      	mov	r0, r1
   260a2:	4770      	bx	lr

000260a4 <nvs_ate_valid>:
{
   260a4:	b570      	push	{r4, r5, r6, lr}
   260a6:	460c      	mov	r4, r1
   260a8:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   260aa:	2108      	movs	r1, #8
   260ac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   260ae:	f7ff ffef 	bl	26090 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   260b2:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   260b4:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   260b6:	4621      	mov	r1, r4
   260b8:	20ff      	movs	r0, #255	; 0xff
   260ba:	f7ea fefb 	bl	10eb4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   260be:	79e3      	ldrb	r3, [r4, #7]
   260c0:	4283      	cmp	r3, r0
   260c2:	d107      	bne.n	260d4 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   260c4:	89aa      	ldrh	r2, [r5, #12]
   260c6:	8863      	ldrh	r3, [r4, #2]
   260c8:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   260ca:	4283      	cmp	r3, r0
   260cc:	bf2c      	ite	cs
   260ce:	2000      	movcs	r0, #0
   260d0:	2001      	movcc	r0, #1
}
   260d2:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   260d4:	2000      	movs	r0, #0
   260d6:	e7fc      	b.n	260d2 <nvs_ate_valid+0x2e>

000260d8 <nvs_close_ate_valid>:
{
   260d8:	b538      	push	{r3, r4, r5, lr}
   260da:	4605      	mov	r5, r0
   260dc:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   260de:	f7ff ffe1 	bl	260a4 <nvs_ate_valid>
   260e2:	b1a0      	cbz	r0, 2610e <nvs_close_ate_valid+0x36>
   260e4:	88a0      	ldrh	r0, [r4, #4]
   260e6:	b998      	cbnz	r0, 26110 <nvs_close_ate_valid+0x38>
   260e8:	8822      	ldrh	r2, [r4, #0]
   260ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   260ee:	429a      	cmp	r2, r3
   260f0:	d10d      	bne.n	2610e <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   260f2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   260f4:	2108      	movs	r1, #8
   260f6:	f7ff ffcb 	bl	26090 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   260fa:	8862      	ldrh	r2, [r4, #2]
   260fc:	89ab      	ldrh	r3, [r5, #12]
   260fe:	1a9b      	subs	r3, r3, r2
   26100:	fbb3 f2f0 	udiv	r2, r3, r0
   26104:	fb02 3010 	mls	r0, r2, r0, r3
   26108:	fab0 f080 	clz	r0, r0
   2610c:	0940      	lsrs	r0, r0, #5
}
   2610e:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   26110:	2000      	movs	r0, #0
   26112:	e7fc      	b.n	2610e <nvs_close_ate_valid+0x36>

00026114 <nvs_prev_ate>:
{
   26114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26116:	4604      	mov	r4, r0
   26118:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2611a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2611c:	2108      	movs	r1, #8
   2611e:	f7ff ffb7 	bl	26090 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26122:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26124:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26126:	2308      	movs	r3, #8
   26128:	4620      	mov	r0, r4
   2612a:	f7ff ff24 	bl	25f76 <nvs_flash_rd>
	if (rc) {
   2612e:	4606      	mov	r6, r0
   26130:	2800      	cmp	r0, #0
   26132:	d136      	bne.n	261a2 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   26134:	682b      	ldr	r3, [r5, #0]
   26136:	443b      	add	r3, r7
   26138:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2613a:	89a2      	ldrh	r2, [r4, #12]
   2613c:	b299      	uxth	r1, r3
   2613e:	1bd2      	subs	r2, r2, r7
   26140:	4291      	cmp	r1, r2
   26142:	d12e      	bne.n	261a2 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   26144:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   26146:	bf03      	ittte	eq
   26148:	89e2      	ldrheq	r2, [r4, #14]
   2614a:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2614e:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   26152:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   26156:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26158:	2308      	movs	r3, #8
   2615a:	466a      	mov	r2, sp
   2615c:	4620      	mov	r0, r4
   2615e:	f7ff ff0a 	bl	25f76 <nvs_flash_rd>
	if (rc) {
   26162:	b9e8      	cbnz	r0, 261a0 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   26164:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26166:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   26168:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2616a:	f813 1b01 	ldrb.w	r1, [r3], #1
   2616e:	428a      	cmp	r2, r1
   26170:	d10c      	bne.n	2618c <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   26172:	3001      	adds	r0, #1
   26174:	2808      	cmp	r0, #8
   26176:	d1f8      	bne.n	2616a <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   26178:	6863      	ldr	r3, [r4, #4]
   2617a:	e005      	b.n	26188 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2617c:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2617e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   26182:	0c1b      	lsrs	r3, r3, #16
   26184:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   26186:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   26188:	602b      	str	r3, [r5, #0]
		return 0;
   2618a:	e00a      	b.n	261a2 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2618c:	4669      	mov	r1, sp
   2618e:	4620      	mov	r0, r4
   26190:	f7ff ffa2 	bl	260d8 <nvs_close_ate_valid>
   26194:	2800      	cmp	r0, #0
   26196:	d1f1      	bne.n	2617c <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   26198:	4629      	mov	r1, r5
   2619a:	4620      	mov	r0, r4
   2619c:	f7eb fe84 	bl	11ea8 <nvs_recover_last_ate>
   261a0:	4606      	mov	r6, r0
}
   261a2:	4630      	mov	r0, r6
   261a4:	b003      	add	sp, #12
   261a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000261a8 <nvs_flash_al_wrt>:
{
   261a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   261ac:	4607      	mov	r7, r0
   261ae:	b089      	sub	sp, #36	; 0x24
   261b0:	4690      	mov	r8, r2
	if (!len) {
   261b2:	461e      	mov	r6, r3
   261b4:	b91b      	cbnz	r3, 261be <nvs_flash_al_wrt+0x16>
		return 0;
   261b6:	2000      	movs	r0, #0
}
   261b8:	b009      	add	sp, #36	; 0x24
   261ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   261be:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   261c0:	8983      	ldrh	r3, [r0, #12]
   261c2:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   261c4:	fa14 f181 	uxtah	r1, r4, r1
   261c8:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   261cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   261ce:	681d      	ldr	r5, [r3, #0]
   261d0:	426d      	negs	r5, r5
	if (blen > 0) {
   261d2:	4035      	ands	r5, r6
   261d4:	d00c      	beq.n	261f0 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   261d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   261d8:	6883      	ldr	r3, [r0, #8]
   261da:	4621      	mov	r1, r4
   261dc:	f8d3 9004 	ldr.w	r9, [r3, #4]
   261e0:	462b      	mov	r3, r5
   261e2:	47c8      	blx	r9
		if (rc) {
   261e4:	2800      	cmp	r0, #0
   261e6:	d1e7      	bne.n	261b8 <nvs_flash_al_wrt+0x10>
	if (len) {
   261e8:	1b76      	subs	r6, r6, r5
   261ea:	d0e4      	beq.n	261b6 <nvs_flash_al_wrt+0xe>
		offset += blen;
   261ec:	442c      	add	r4, r5
		data8 += blen;
   261ee:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   261f0:	4632      	mov	r2, r6
   261f2:	4641      	mov	r1, r8
   261f4:	4668      	mov	r0, sp
   261f6:	f000 fd41 	bl	26c7c <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   261fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   261fc:	681a      	ldr	r2, [r3, #0]
   261fe:	7919      	ldrb	r1, [r3, #4]
   26200:	1b92      	subs	r2, r2, r6
   26202:	eb0d 0006 	add.w	r0, sp, r6
   26206:	f000 fd44 	bl	26c92 <memset>
				 fs->flash_parameters->write_block_size);
   2620a:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   2620e:	681b      	ldr	r3, [r3, #0]
   26210:	6882      	ldr	r2, [r0, #8]
   26212:	4621      	mov	r1, r4
   26214:	6855      	ldr	r5, [r2, #4]
   26216:	466a      	mov	r2, sp
   26218:	47a8      	blx	r5
	return rc;
   2621a:	e7cd      	b.n	261b8 <nvs_flash_al_wrt+0x10>

0002621c <nvs_flash_ate_wrt>:
{
   2621c:	b510      	push	{r4, lr}
   2621e:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   26220:	2308      	movs	r3, #8
   26222:	6841      	ldr	r1, [r0, #4]
{
   26224:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   26226:	f7ff ffbf 	bl	261a8 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2622a:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2622c:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2622e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   26230:	f7ff ff2e 	bl	26090 <nvs_al_size.isra.0>
   26234:	6863      	ldr	r3, [r4, #4]
   26236:	1a1b      	subs	r3, r3, r0
   26238:	6063      	str	r3, [r4, #4]
}
   2623a:	4610      	mov	r0, r2
   2623c:	bd10      	pop	{r4, pc}

0002623e <nvs_add_gc_done_ate>:
{
   2623e:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   26240:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26244:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   26248:	2300      	movs	r3, #0
{
   2624a:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2624c:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   26250:	6883      	ldr	r3, [r0, #8]
   26252:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   26256:	4668      	mov	r0, sp
   26258:	f7ff ff11 	bl	2607e <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2625c:	4669      	mov	r1, sp
   2625e:	4620      	mov	r0, r4
   26260:	f7ff ffdc 	bl	2621c <nvs_flash_ate_wrt>
}
   26264:	b002      	add	sp, #8
   26266:	bd10      	pop	{r4, pc}

00026268 <nvs_gc>:
{
   26268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2626c:	4604      	mov	r4, r0
   2626e:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26270:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   26272:	2108      	movs	r1, #8
   26274:	f7ff ff0c 	bl	26090 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   26278:	6863      	ldr	r3, [r4, #4]
   2627a:	0c1b      	lsrs	r3, r3, #16
   2627c:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2627e:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   26280:	a903      	add	r1, sp, #12
   26282:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   26284:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   26286:	f7ff fe84 	bl	25f92 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2628a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2628e:	89a6      	ldrh	r6, [r4, #12]
   26290:	445e      	add	r6, fp
   26292:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26294:	aa06      	add	r2, sp, #24
   26296:	2308      	movs	r3, #8
   26298:	4631      	mov	r1, r6
   2629a:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2629c:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2629e:	f7ff fe6a 	bl	25f76 <nvs_flash_rd>
	if (rc < 0) {
   262a2:	1e02      	subs	r2, r0, #0
   262a4:	f2c0 80a9 	blt.w	263fa <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   262a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   262aa:	aa06      	add	r2, sp, #24
   262ac:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   262ae:	2300      	movs	r3, #0
		if (data8[i] != value) {
   262b0:	f812 0b01 	ldrb.w	r0, [r2], #1
   262b4:	4281      	cmp	r1, r0
   262b6:	f040 808f 	bne.w	263d8 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   262ba:	3301      	adds	r3, #1
   262bc:	2b08      	cmp	r3, #8
   262be:	d1f7      	bne.n	262b0 <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   262c0:	68a3      	ldr	r3, [r4, #8]
   262c2:	6862      	ldr	r2, [r4, #4]
   262c4:	442b      	add	r3, r5
   262c6:	429a      	cmp	r2, r3
   262c8:	d27e      	bcs.n	263c8 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   262ca:	4659      	mov	r1, fp
   262cc:	4620      	mov	r0, r4
   262ce:	f7ff febc 	bl	2604a <nvs_flash_erase_sector>
   262d2:	4602      	mov	r2, r0
	if (rc) {
   262d4:	e091      	b.n	263fa <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   262d6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   262da:	0c36      	lsrs	r6, r6, #16
   262dc:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   262de:	441e      	add	r6, r3
   262e0:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   262e2:	aa08      	add	r2, sp, #32
   262e4:	a904      	add	r1, sp, #16
   262e6:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   262e8:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   262ec:	f7ff ff12 	bl	26114 <nvs_prev_ate>
		if (rc) {
   262f0:	4602      	mov	r2, r0
   262f2:	2800      	cmp	r0, #0
   262f4:	f040 8081 	bne.w	263fa <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   262f8:	a908      	add	r1, sp, #32
   262fa:	4620      	mov	r0, r4
   262fc:	f7ff fed2 	bl	260a4 <nvs_ate_valid>
   26300:	b918      	cbnz	r0, 2630a <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   26302:	9b01      	ldr	r3, [sp, #4]
   26304:	459a      	cmp	sl, r3
   26306:	d1ec      	bne.n	262e2 <nvs_gc+0x7a>
   26308:	e7da      	b.n	262c0 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   2630a:	6863      	ldr	r3, [r4, #4]
   2630c:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2630e:	aa0a      	add	r2, sp, #40	; 0x28
   26310:	a905      	add	r1, sp, #20
   26312:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   26314:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   26316:	f7ff fefd 	bl	26114 <nvs_prev_ate>
			if (rc) {
   2631a:	4602      	mov	r2, r0
   2631c:	2800      	cmp	r0, #0
   2631e:	d16c      	bne.n	263fa <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   26320:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   26324:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   26328:	429a      	cmp	r2, r3
   2632a:	d027      	beq.n	2637c <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   2632c:	6862      	ldr	r2, [r4, #4]
   2632e:	9b05      	ldr	r3, [sp, #20]
   26330:	429a      	cmp	r2, r3
   26332:	d1ec      	bne.n	2630e <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   26334:	4556      	cmp	r6, sl
   26336:	d1e4      	bne.n	26302 <nvs_gc+0x9a>
   26338:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2633c:	2b00      	cmp	r3, #0
   2633e:	d0e0      	beq.n	26302 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   26340:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   26344:	ea4f 431a 	mov.w	r3, sl, lsr #16
   26348:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   2634a:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   2634c:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2634e:	68a3      	ldr	r3, [r4, #8]
   26350:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   26354:	f7ff fe93 	bl	2607e <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26358:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2635a:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2635e:	681e      	ldr	r6, [r3, #0]
   26360:	4276      	negs	r6, r6
	block_size =
   26362:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   26366:	f1b9 0f00 	cmp.w	r9, #0
   2636a:	d10e      	bne.n	2638a <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2636c:	a908      	add	r1, sp, #32
   2636e:	4620      	mov	r0, r4
   26370:	f7ff ff54 	bl	2621c <nvs_flash_ate_wrt>
			if (rc) {
   26374:	4602      	mov	r2, r0
   26376:	2800      	cmp	r0, #0
   26378:	d0c3      	beq.n	26302 <nvs_gc+0x9a>
   2637a:	e03e      	b.n	263fa <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2637c:	a90a      	add	r1, sp, #40	; 0x28
   2637e:	4620      	mov	r0, r4
   26380:	f7ff fe90 	bl	260a4 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   26384:	2800      	cmp	r0, #0
   26386:	d0d1      	beq.n	2632c <nvs_gc+0xc4>
   26388:	e7d4      	b.n	26334 <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   2638a:	454e      	cmp	r6, r9
   2638c:	46b0      	mov	r8, r6
   2638e:	bf28      	it	cs
   26390:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   26392:	aa0c      	add	r2, sp, #48	; 0x30
   26394:	4643      	mov	r3, r8
   26396:	4639      	mov	r1, r7
   26398:	4620      	mov	r0, r4
   2639a:	f7ff fdec 	bl	25f76 <nvs_flash_rd>
		if (rc) {
   2639e:	4602      	mov	r2, r0
   263a0:	bb58      	cbnz	r0, 263fa <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   263a2:	4643      	mov	r3, r8
   263a4:	68a1      	ldr	r1, [r4, #8]
   263a6:	aa0c      	add	r2, sp, #48	; 0x30
   263a8:	4620      	mov	r0, r4
   263aa:	f7ff fefd 	bl	261a8 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   263ae:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   263b0:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   263b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   263b4:	f7ff fe6c 	bl	26090 <nvs_al_size.isra.0>
   263b8:	68a3      	ldr	r3, [r4, #8]
   263ba:	4403      	add	r3, r0
   263bc:	60a3      	str	r3, [r4, #8]
		if (rc) {
   263be:	b9e2      	cbnz	r2, 263fa <nvs_gc+0x192>
		len -= bytes_to_copy;
   263c0:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   263c4:	4447      	add	r7, r8
   263c6:	e7ce      	b.n	26366 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   263c8:	4620      	mov	r0, r4
   263ca:	f7ff ff38 	bl	2623e <nvs_add_gc_done_ate>
		if (rc) {
   263ce:	4602      	mov	r2, r0
   263d0:	2800      	cmp	r0, #0
   263d2:	f43f af7a 	beq.w	262ca <nvs_gc+0x62>
   263d6:	e010      	b.n	263fa <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   263d8:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   263da:	a906      	add	r1, sp, #24
   263dc:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   263de:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   263e0:	f7ff fe7a 	bl	260d8 <nvs_close_ate_valid>
   263e4:	2800      	cmp	r0, #0
   263e6:	f47f af76 	bne.w	262d6 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   263ea:	a904      	add	r1, sp, #16
   263ec:	4620      	mov	r0, r4
   263ee:	f7eb fd5b 	bl	11ea8 <nvs_recover_last_ate>
		if (rc) {
   263f2:	4602      	mov	r2, r0
   263f4:	2800      	cmp	r0, #0
   263f6:	f43f af74 	beq.w	262e2 <nvs_gc+0x7a>
}
   263fa:	4610      	mov	r0, r2
   263fc:	b015      	add	sp, #84	; 0x54
   263fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026402 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   26402:	2300      	movs	r3, #0
   26404:	461a      	mov	r2, r3
   26406:	f7eb bf1b 	b.w	12240 <nvs_write>

0002640a <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2640a:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2640c:	2400      	movs	r4, #0
   2640e:	9400      	str	r4, [sp, #0]
   26410:	f7eb ffea 	bl	123e8 <nvs_read_hist>
	return rc;
}
   26414:	b002      	add	sp, #8
   26416:	bd10      	pop	{r4, pc}

00026418 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   26418:	4770      	bx	lr

0002641a <get_sectors_cb>:
{
   2641a:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2641c:	684c      	ldr	r4, [r1, #4]
   2641e:	6803      	ldr	r3, [r0, #0]
   26420:	42a3      	cmp	r3, r4
   26422:	d201      	bcs.n	26428 <get_sectors_cb+0xe>
		*bail_value = true;
   26424:	2001      	movs	r0, #1
}
   26426:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   26428:	688a      	ldr	r2, [r1, #8]
   2642a:	4422      	add	r2, r4
   2642c:	4293      	cmp	r3, r2
   2642e:	d301      	bcc.n	26434 <get_sectors_cb+0x1a>
		*bail_value = false;
   26430:	2000      	movs	r0, #0
   26432:	e7f8      	b.n	26426 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   26434:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   26438:	694e      	ldr	r6, [r1, #20]
   2643a:	42b5      	cmp	r5, r6
   2643c:	d303      	bcc.n	26446 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2643e:	f06f 030b 	mvn.w	r3, #11
   26442:	618b      	str	r3, [r1, #24]
		return true;
   26444:	e7f4      	b.n	26430 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   26446:	1b1b      	subs	r3, r3, r4
   26448:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2644c:	6843      	ldr	r3, [r0, #4]
   2644e:	6908      	ldr	r0, [r1, #16]
   26450:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   26454:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   26456:	690b      	ldr	r3, [r1, #16]
   26458:	3301      	adds	r3, #1
   2645a:	610b      	str	r3, [r1, #16]
	return true;
   2645c:	e7e2      	b.n	26424 <get_sectors_cb+0xa>

0002645e <settings_load>:
	return settings_load_subtree(NULL);
   2645e:	2000      	movs	r0, #0
   26460:	f7ec b8ba 	b.w	125d8 <settings_load_subtree>

00026464 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   26464:	2200      	movs	r2, #0
   26466:	4611      	mov	r1, r2
   26468:	f7ec b87c 	b.w	12564 <settings_save_one>

0002646c <settings_name_steq>:
{
   2646c:	4603      	mov	r3, r0
   2646e:	b510      	push	{r4, lr}
   26470:	4608      	mov	r0, r1
	if (next) {
   26472:	b10a      	cbz	r2, 26478 <settings_name_steq+0xc>
		*next = NULL;
   26474:	2100      	movs	r1, #0
   26476:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   26478:	b153      	cbz	r3, 26490 <settings_name_steq+0x24>
   2647a:	b1d0      	cbz	r0, 264b2 <settings_name_steq+0x46>
   2647c:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2647e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   26482:	b180      	cbz	r0, 264a6 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   26484:	f813 4b01 	ldrb.w	r4, [r3], #1
   26488:	42a0      	cmp	r0, r4
   2648a:	d101      	bne.n	26490 <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2648c:	283d      	cmp	r0, #61	; 0x3d
   2648e:	d1f6      	bne.n	2647e <settings_name_steq+0x12>
		return 0;
   26490:	2000      	movs	r0, #0
   26492:	e00e      	b.n	264b2 <settings_name_steq+0x46>
			*next = name + 1;
   26494:	3301      	adds	r3, #1
   26496:	6013      	str	r3, [r2, #0]
   26498:	e00a      	b.n	264b0 <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2649a:	283d      	cmp	r0, #61	; 0x3d
   2649c:	d008      	beq.n	264b0 <settings_name_steq+0x44>
   2649e:	fab0 f080 	clz	r0, r0
   264a2:	0940      	lsrs	r0, r0, #5
   264a4:	e005      	b.n	264b2 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   264a6:	7818      	ldrb	r0, [r3, #0]
   264a8:	282f      	cmp	r0, #47	; 0x2f
   264aa:	d1f6      	bne.n	2649a <settings_name_steq+0x2e>
		if (next) {
   264ac:	2a00      	cmp	r2, #0
   264ae:	d1f1      	bne.n	26494 <settings_name_steq+0x28>
		return 1;
   264b0:	2001      	movs	r0, #1
}
   264b2:	bd10      	pop	{r4, pc}

000264b4 <settings_name_next>:
{
   264b4:	b510      	push	{r4, lr}
	if (next) {
   264b6:	b109      	cbz	r1, 264bc <settings_name_next+0x8>
		*next = NULL;
   264b8:	2300      	movs	r3, #0
   264ba:	600b      	str	r3, [r1, #0]
	if (!name) {
   264bc:	b158      	cbz	r0, 264d6 <settings_name_next+0x22>
   264be:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   264c0:	781a      	ldrb	r2, [r3, #0]
   264c2:	461c      	mov	r4, r3
   264c4:	3301      	adds	r3, #1
   264c6:	b12a      	cbz	r2, 264d4 <settings_name_next+0x20>
   264c8:	2a3d      	cmp	r2, #61	; 0x3d
   264ca:	d003      	beq.n	264d4 <settings_name_next+0x20>
   264cc:	2a2f      	cmp	r2, #47	; 0x2f
   264ce:	d1f7      	bne.n	264c0 <settings_name_next+0xc>
		if (next) {
   264d0:	b101      	cbz	r1, 264d4 <settings_name_next+0x20>
			*next = name + 1;
   264d2:	600b      	str	r3, [r1, #0]
   264d4:	1a20      	subs	r0, r4, r0
}
   264d6:	bd10      	pop	{r4, pc}

000264d8 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = (struct settings_nvs *)cs;

	return &cf->cf_nvs;
}
   264d8:	3008      	adds	r0, #8
   264da:	4770      	bx	lr

000264dc <settings_nvs_read_fn>:
{
   264dc:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   264de:	4613      	mov	r3, r2
{
   264e0:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   264e2:	460a      	mov	r2, r1
   264e4:	8881      	ldrh	r1, [r0, #4]
   264e6:	6800      	ldr	r0, [r0, #0]
   264e8:	f7ff ff8f 	bl	2640a <nvs_read>
}
   264ec:	42a0      	cmp	r0, r4
   264ee:	bfa8      	it	ge
   264f0:	4620      	movge	r0, r4
   264f2:	bd10      	pop	{r4, pc}

000264f4 <settings_nvs_save>:
{
   264f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264f8:	b097      	sub	sp, #92	; 0x5c
   264fa:	4604      	mov	r4, r0
   264fc:	9201      	str	r2, [sp, #4]
   264fe:	469a      	mov	sl, r3
	if (!name) {
   26500:	4689      	mov	r9, r1
   26502:	2900      	cmp	r1, #0
   26504:	d07e      	beq.n	26604 <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   26506:	b1da      	cbz	r2, 26540 <settings_nvs_save+0x4c>
   26508:	faba f78a 	clz	r7, sl
   2650c:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2650e:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   26510:	3501      	adds	r5, #1
   26512:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   26514:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   26516:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   2651a:	1e6e      	subs	r6, r5, #1
   2651c:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2651e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   26522:	d040      	beq.n	265a6 <settings_nvs_save+0xb2>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   26524:	234a      	movs	r3, #74	; 0x4a
   26526:	aa03      	add	r2, sp, #12
   26528:	4631      	mov	r1, r6
   2652a:	4658      	mov	r0, fp
   2652c:	f7ff ff6d 	bl	2640a <nvs_read>
		if (rc < 0) {
   26530:	2800      	cmp	r0, #0
   26532:	da07      	bge.n	26544 <settings_nvs_save+0x50>
		name_id--;
   26534:	f110 0f02 	cmn.w	r0, #2
   26538:	bf08      	it	eq
   2653a:	46b0      	moveq	r8, r6
   2653c:	4635      	mov	r5, r6
   2653e:	e7ec      	b.n	2651a <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   26540:	2701      	movs	r7, #1
   26542:	e7e4      	b.n	2650e <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   26544:	f100 0358 	add.w	r3, r0, #88	; 0x58
   26548:	eb0d 0003 	add.w	r0, sp, r3
   2654c:	2300      	movs	r3, #0
   2654e:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   26552:	a903      	add	r1, sp, #12
   26554:	4648      	mov	r0, r9
   26556:	f000 fb4a 	bl	26bee <strcmp>
   2655a:	2800      	cmp	r0, #0
   2655c:	d1ee      	bne.n	2653c <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   2655e:	b32f      	cbz	r7, 265ac <settings_nvs_save+0xb8>
   26560:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   26562:	42b3      	cmp	r3, r6
   26564:	d008      	beq.n	26578 <settings_nvs_save+0x84>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   26566:	4631      	mov	r1, r6
   26568:	4658      	mov	r0, fp
   2656a:	f7ff ff4a 	bl	26402 <nvs_delete>
			if (rc >= 0) {
   2656e:	2800      	cmp	r0, #0
   26570:	da0f      	bge.n	26592 <settings_nvs_save+0x9e>
}
   26572:	b017      	add	sp, #92	; 0x5c
   26574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cf->last_name_id--;
   26578:	4622      	mov	r2, r4
   2657a:	1e73      	subs	r3, r6, #1
   2657c:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   26580:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   26584:	2302      	movs	r3, #2
   26586:	4658      	mov	r0, fp
   26588:	f7eb fe5a 	bl	12240 <nvs_write>
			if (rc < 0) {
   2658c:	2800      	cmp	r0, #0
   2658e:	daea      	bge.n	26566 <settings_nvs_save+0x72>
   26590:	e7ef      	b.n	26572 <settings_nvs_save+0x7e>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   26592:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   26596:	313f      	adds	r1, #63	; 0x3f
   26598:	b289      	uxth	r1, r1
   2659a:	4658      	mov	r0, fp
   2659c:	f7ff ff31 	bl	26402 <nvs_delete>
	if (rc < 0) {
   265a0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   265a4:	e7e5      	b.n	26572 <settings_nvs_save+0x7e>
	if (delete) {
   265a6:	b1ff      	cbz	r7, 265e8 <settings_nvs_save+0xf4>
			return 0;
   265a8:	2000      	movs	r0, #0
   265aa:	e7e2      	b.n	26572 <settings_nvs_save+0x7e>
		name_id--;
   265ac:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   265ae:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   265b2:	d02a      	beq.n	2660a <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   265b4:	f104 0508 	add.w	r5, r4, #8
   265b8:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   265bc:	9a01      	ldr	r2, [sp, #4]
   265be:	4653      	mov	r3, sl
   265c0:	b289      	uxth	r1, r1
   265c2:	4628      	mov	r0, r5
   265c4:	f7eb fe3c 	bl	12240 <nvs_write>
	if (rc < 0) {
   265c8:	2800      	cmp	r0, #0
   265ca:	dbd2      	blt.n	26572 <settings_nvs_save+0x7e>
	if (write_name) {
   265cc:	b977      	cbnz	r7, 265ec <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   265ce:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   265d0:	4543      	cmp	r3, r8
   265d2:	d2e9      	bcs.n	265a8 <settings_nvs_save+0xb4>
		cf->last_name_id = write_name_id;
   265d4:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   265d6:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   265d8:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   265dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   265e0:	4628      	mov	r0, r5
   265e2:	f7eb fe2d 	bl	12240 <nvs_write>
   265e6:	e7db      	b.n	265a0 <settings_nvs_save+0xac>
	write_name = true;
   265e8:	2701      	movs	r7, #1
   265ea:	e7e0      	b.n	265ae <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   265ec:	4648      	mov	r0, r9
   265ee:	f000 faee 	bl	26bce <strlen>
   265f2:	464a      	mov	r2, r9
   265f4:	4603      	mov	r3, r0
   265f6:	4641      	mov	r1, r8
   265f8:	4628      	mov	r0, r5
   265fa:	f7eb fe21 	bl	12240 <nvs_write>
		if (rc < 0) {
   265fe:	2800      	cmp	r0, #0
   26600:	dae5      	bge.n	265ce <settings_nvs_save+0xda>
   26602:	e7b6      	b.n	26572 <settings_nvs_save+0x7e>
		return -EINVAL;
   26604:	f06f 0015 	mvn.w	r0, #21
   26608:	e7b3      	b.n	26572 <settings_nvs_save+0x7e>
		return -ENOMEM;
   2660a:	f06f 000b 	mvn.w	r0, #11
   2660e:	e7b0      	b.n	26572 <settings_nvs_save+0x7e>

00026610 <settings_nvs_backend_init>:
{
   26610:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   26612:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   26614:	6303      	str	r3, [r0, #48]	; 0x30
{
   26616:	4604      	mov	r4, r0
	if (cf->cf_nvs.flash_device == NULL) {
   26618:	b1c3      	cbz	r3, 2664c <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   2661a:	f100 0608 	add.w	r6, r0, #8
   2661e:	4630      	mov	r0, r6
   26620:	f7eb fc74 	bl	11f0c <nvs_mount>
	if (rc) {
   26624:	4605      	mov	r5, r0
   26626:	b970      	cbnz	r0, 26646 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   26628:	2302      	movs	r3, #2
   2662a:	f10d 0206 	add.w	r2, sp, #6
   2662e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   26632:	4630      	mov	r0, r6
   26634:	f7ff fee9 	bl	2640a <nvs_read>
	if (rc < 0) {
   26638:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2663a:	bfac      	ite	ge
   2663c:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   26640:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   26644:	8723      	strh	r3, [r4, #56]	; 0x38
}
   26646:	4628      	mov	r0, r5
   26648:	b002      	add	sp, #8
   2664a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2664c:	f06f 0512 	mvn.w	r5, #18
   26650:	e7f9      	b.n	26646 <settings_nvs_backend_init+0x36>

00026652 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   26652:	b538      	push	{r3, r4, r5, lr}
   26654:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   26656:	42ab      	cmp	r3, r5
{
   26658:	4611      	mov	r1, r2
   2665a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2665c:	d804      	bhi.n	26668 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2665e:	461a      	mov	r2, r3
   26660:	f000 fb0c 	bl	26c7c <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   26664:	4620      	mov	r0, r4
   26666:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   26668:	2400      	movs	r4, #0
   2666a:	e7fb      	b.n	26664 <_copy+0x12>

0002666c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2666c:	f000 bb11 	b.w	26c92 <memset>

00026670 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   26670:	09c3      	lsrs	r3, r0, #7
   26672:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26676:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2667a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2667e:	b2c0      	uxtb	r0, r0
   26680:	4770      	bx	lr

00026682 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   26682:	78cb      	ldrb	r3, [r1, #3]
   26684:	7802      	ldrb	r2, [r0, #0]
   26686:	4053      	eors	r3, r2
   26688:	7003      	strb	r3, [r0, #0]
   2668a:	884b      	ldrh	r3, [r1, #2]
   2668c:	7842      	ldrb	r2, [r0, #1]
   2668e:	4053      	eors	r3, r2
   26690:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   26692:	680a      	ldr	r2, [r1, #0]
   26694:	7883      	ldrb	r3, [r0, #2]
   26696:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2669a:	7083      	strb	r3, [r0, #2]
   2669c:	680a      	ldr	r2, [r1, #0]
   2669e:	78c3      	ldrb	r3, [r0, #3]
   266a0:	4053      	eors	r3, r2
   266a2:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   266a4:	79cb      	ldrb	r3, [r1, #7]
   266a6:	7902      	ldrb	r2, [r0, #4]
   266a8:	4053      	eors	r3, r2
   266aa:	7103      	strb	r3, [r0, #4]
   266ac:	88cb      	ldrh	r3, [r1, #6]
   266ae:	7942      	ldrb	r2, [r0, #5]
   266b0:	4053      	eors	r3, r2
   266b2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   266b4:	684a      	ldr	r2, [r1, #4]
   266b6:	7983      	ldrb	r3, [r0, #6]
   266b8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   266bc:	7183      	strb	r3, [r0, #6]
   266be:	684a      	ldr	r2, [r1, #4]
   266c0:	79c3      	ldrb	r3, [r0, #7]
   266c2:	4053      	eors	r3, r2
   266c4:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   266c6:	7acb      	ldrb	r3, [r1, #11]
   266c8:	7a02      	ldrb	r2, [r0, #8]
   266ca:	4053      	eors	r3, r2
   266cc:	7203      	strb	r3, [r0, #8]
   266ce:	7a42      	ldrb	r2, [r0, #9]
   266d0:	894b      	ldrh	r3, [r1, #10]
   266d2:	4053      	eors	r3, r2
   266d4:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   266d6:	688a      	ldr	r2, [r1, #8]
   266d8:	7a83      	ldrb	r3, [r0, #10]
   266da:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   266de:	7283      	strb	r3, [r0, #10]
   266e0:	688a      	ldr	r2, [r1, #8]
   266e2:	7ac3      	ldrb	r3, [r0, #11]
   266e4:	4053      	eors	r3, r2
   266e6:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   266e8:	7bcb      	ldrb	r3, [r1, #15]
   266ea:	7b02      	ldrb	r2, [r0, #12]
   266ec:	4053      	eors	r3, r2
   266ee:	7303      	strb	r3, [r0, #12]
   266f0:	89cb      	ldrh	r3, [r1, #14]
   266f2:	7b42      	ldrb	r2, [r0, #13]
   266f4:	4053      	eors	r3, r2
   266f6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   266f8:	68ca      	ldr	r2, [r1, #12]
   266fa:	7b83      	ldrb	r3, [r0, #14]
   266fc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26700:	7383      	strb	r3, [r0, #14]
   26702:	68ca      	ldr	r2, [r1, #12]
   26704:	7bc3      	ldrb	r3, [r0, #15]
   26706:	4053      	eors	r3, r2
   26708:	73c3      	strb	r3, [r0, #15]
}
   2670a:	4770      	bx	lr

0002670c <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2670c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2670e:	7802      	ldrb	r2, [r0, #0]
   26710:	f88d 2000 	strb.w	r2, [sp]
   26714:	7942      	ldrb	r2, [r0, #5]
   26716:	f88d 2001 	strb.w	r2, [sp, #1]
   2671a:	7a82      	ldrb	r2, [r0, #10]
   2671c:	f88d 2002 	strb.w	r2, [sp, #2]
   26720:	7bc2      	ldrb	r2, [r0, #15]
   26722:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   26726:	7902      	ldrb	r2, [r0, #4]
   26728:	f88d 2004 	strb.w	r2, [sp, #4]
   2672c:	7a42      	ldrb	r2, [r0, #9]
   2672e:	f88d 2005 	strb.w	r2, [sp, #5]
   26732:	7b82      	ldrb	r2, [r0, #14]
   26734:	f88d 2006 	strb.w	r2, [sp, #6]
   26738:	78c2      	ldrb	r2, [r0, #3]
   2673a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2673e:	7a02      	ldrb	r2, [r0, #8]
   26740:	f88d 2008 	strb.w	r2, [sp, #8]
   26744:	7b42      	ldrb	r2, [r0, #13]
   26746:	f88d 2009 	strb.w	r2, [sp, #9]
   2674a:	7882      	ldrb	r2, [r0, #2]
   2674c:	f88d 200a 	strb.w	r2, [sp, #10]
   26750:	79c2      	ldrb	r2, [r0, #7]
   26752:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   26756:	7b02      	ldrb	r2, [r0, #12]
   26758:	f88d 200c 	strb.w	r2, [sp, #12]
   2675c:	7842      	ldrb	r2, [r0, #1]
   2675e:	7ac3      	ldrb	r3, [r0, #11]
   26760:	f88d 200d 	strb.w	r2, [sp, #13]
   26764:	7982      	ldrb	r2, [r0, #6]
   26766:	f88d 200e 	strb.w	r2, [sp, #14]
   2676a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2676e:	2310      	movs	r3, #16
   26770:	466a      	mov	r2, sp
   26772:	4619      	mov	r1, r3
   26774:	f7ff ff6d 	bl	26652 <_copy>
}
   26778:	b005      	add	sp, #20
   2677a:	f85d fb04 	ldr.w	pc, [sp], #4

0002677e <mult_row_column>:
{
   2677e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26780:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   26782:	7808      	ldrb	r0, [r1, #0]
{
   26784:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   26786:	f7ff ff73 	bl	26670 <_double_byte>
   2678a:	4605      	mov	r5, r0
   2678c:	7860      	ldrb	r0, [r4, #1]
   2678e:	f7ff ff6f 	bl	26670 <_double_byte>
   26792:	78a2      	ldrb	r2, [r4, #2]
   26794:	7863      	ldrb	r3, [r4, #1]
   26796:	4053      	eors	r3, r2
   26798:	78e2      	ldrb	r2, [r4, #3]
   2679a:	4053      	eors	r3, r2
   2679c:	405d      	eors	r5, r3
   2679e:	4068      	eors	r0, r5
   267a0:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   267a2:	7860      	ldrb	r0, [r4, #1]
   267a4:	7827      	ldrb	r7, [r4, #0]
   267a6:	f7ff ff63 	bl	26670 <_double_byte>
   267aa:	4605      	mov	r5, r0
   267ac:	78a0      	ldrb	r0, [r4, #2]
   267ae:	f7ff ff5f 	bl	26670 <_double_byte>
   267b2:	78a3      	ldrb	r3, [r4, #2]
   267b4:	405f      	eors	r7, r3
   267b6:	78e3      	ldrb	r3, [r4, #3]
   267b8:	405f      	eors	r7, r3
   267ba:	407d      	eors	r5, r7
   267bc:	4068      	eors	r0, r5
   267be:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   267c0:	7863      	ldrb	r3, [r4, #1]
   267c2:	7827      	ldrb	r7, [r4, #0]
   267c4:	78a0      	ldrb	r0, [r4, #2]
   267c6:	405f      	eors	r7, r3
   267c8:	f7ff ff52 	bl	26670 <_double_byte>
   267cc:	4605      	mov	r5, r0
   267ce:	78e0      	ldrb	r0, [r4, #3]
   267d0:	f7ff ff4e 	bl	26670 <_double_byte>
   267d4:	78e3      	ldrb	r3, [r4, #3]
   267d6:	405f      	eors	r7, r3
   267d8:	407d      	eors	r5, r7
   267da:	4068      	eors	r0, r5
   267dc:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   267de:	7820      	ldrb	r0, [r4, #0]
   267e0:	f7ff ff46 	bl	26670 <_double_byte>
   267e4:	7862      	ldrb	r2, [r4, #1]
   267e6:	7823      	ldrb	r3, [r4, #0]
   267e8:	4053      	eors	r3, r2
   267ea:	78a2      	ldrb	r2, [r4, #2]
   267ec:	4053      	eors	r3, r2
   267ee:	ea80 0503 	eor.w	r5, r0, r3
   267f2:	78e0      	ldrb	r0, [r4, #3]
   267f4:	f7ff ff3c 	bl	26670 <_double_byte>
   267f8:	b2ed      	uxtb	r5, r5
   267fa:	4045      	eors	r5, r0
   267fc:	70f5      	strb	r5, [r6, #3]
}
   267fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026800 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   26800:	b570      	push	{r4, r5, r6, lr}
   26802:	4614      	mov	r4, r2
   26804:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   26806:	4605      	mov	r5, r0
   26808:	2800      	cmp	r0, #0
   2680a:	d049      	beq.n	268a0 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2680c:	2900      	cmp	r1, #0
   2680e:	d049      	beq.n	268a4 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   26810:	2a00      	cmp	r2, #0
   26812:	d049      	beq.n	268a8 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   26814:	2310      	movs	r3, #16
   26816:	460a      	mov	r2, r1
   26818:	4668      	mov	r0, sp
   2681a:	4619      	mov	r1, r3
   2681c:	f7ff ff19 	bl	26652 <_copy>
	add_round_key(state, s->words);
   26820:	4621      	mov	r1, r4
   26822:	4668      	mov	r0, sp
   26824:	f7ff ff2d 	bl	26682 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   26828:	3410      	adds	r4, #16
   2682a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2682e:	4668      	mov	r0, sp
   26830:	f7ec fab0 	bl	12d94 <sub_bytes>
		shift_rows(state);
   26834:	4668      	mov	r0, sp
   26836:	f7ff ff69 	bl	2670c <shift_rows>
	mult_row_column(t, s);
   2683a:	4669      	mov	r1, sp
   2683c:	a804      	add	r0, sp, #16
   2683e:	f7ff ff9e 	bl	2677e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   26842:	a901      	add	r1, sp, #4
   26844:	a805      	add	r0, sp, #20
   26846:	f7ff ff9a 	bl	2677e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2684a:	a902      	add	r1, sp, #8
   2684c:	a806      	add	r0, sp, #24
   2684e:	f7ff ff96 	bl	2677e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   26852:	a903      	add	r1, sp, #12
   26854:	a807      	add	r0, sp, #28
   26856:	f7ff ff92 	bl	2677e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2685a:	2310      	movs	r3, #16
   2685c:	4619      	mov	r1, r3
   2685e:	eb0d 0203 	add.w	r2, sp, r3
   26862:	4668      	mov	r0, sp
   26864:	f7ff fef5 	bl	26652 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   26868:	4621      	mov	r1, r4
   2686a:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2686c:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2686e:	f7ff ff08 	bl	26682 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   26872:	42b4      	cmp	r4, r6
   26874:	d1db      	bne.n	2682e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   26876:	f7ec fa8d 	bl	12d94 <sub_bytes>
	shift_rows(state);
   2687a:	4668      	mov	r0, sp
   2687c:	f7ff ff46 	bl	2670c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   26880:	4621      	mov	r1, r4
   26882:	4668      	mov	r0, sp
   26884:	f7ff fefd 	bl	26682 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   26888:	2310      	movs	r3, #16
   2688a:	4619      	mov	r1, r3
   2688c:	466a      	mov	r2, sp
   2688e:	4628      	mov	r0, r5
   26890:	f7ff fedf 	bl	26652 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   26894:	4668      	mov	r0, sp
   26896:	2210      	movs	r2, #16
   26898:	2100      	movs	r1, #0
   2689a:	f7ff fee7 	bl	2666c <_set>

	return TC_CRYPTO_SUCCESS;
   2689e:	2001      	movs	r0, #1
}
   268a0:	b008      	add	sp, #32
   268a2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   268a4:	4608      	mov	r0, r1
   268a6:	e7fb      	b.n	268a0 <tc_aes_encrypt+0xa0>
   268a8:	4610      	mov	r0, r2
   268aa:	e7f9      	b.n	268a0 <tc_aes_encrypt+0xa0>

000268ac <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   268ac:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   268ae:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   268b0:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   268b2:	f912 3b10 	ldrsb.w	r3, [r2], #16
   268b6:	2b00      	cmp	r3, #0
   268b8:	bfac      	ite	ge
   268ba:	2300      	movge	r3, #0
   268bc:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   268be:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   268c2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   268c6:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   268c8:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   268cc:	d002      	beq.n	268d4 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   268ce:	7813      	ldrb	r3, [r2, #0]
   268d0:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   268d2:	e7f4      	b.n	268be <gf_double+0x12>
	}
}
   268d4:	bd10      	pop	{r4, pc}

000268d6 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   268d6:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   268d8:	b120      	cbz	r0, 268e4 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   268da:	2258      	movs	r2, #88	; 0x58
   268dc:	2100      	movs	r1, #0
   268de:	f7ff fec5 	bl	2666c <_set>
   268e2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   268e4:	bd08      	pop	{r3, pc}

000268e6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   268e6:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   268e8:	4604      	mov	r4, r0
   268ea:	b188      	cbz	r0, 26910 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   268ec:	2210      	movs	r2, #16
   268ee:	2100      	movs	r1, #0
   268f0:	f7ff febc 	bl	2666c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   268f4:	2210      	movs	r2, #16
   268f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   268fa:	2100      	movs	r1, #0
   268fc:	f7ff feb6 	bl	2666c <_set>
	s->leftover_offset = 0;
   26900:	2300      	movs	r3, #0
   26902:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   26904:	2200      	movs	r2, #0
   26906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2690a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2690e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   26910:	bd10      	pop	{r4, pc}

00026912 <tc_cmac_setup>:
{
   26912:	b570      	push	{r4, r5, r6, lr}
   26914:	4604      	mov	r4, r0
   26916:	460d      	mov	r5, r1
   26918:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2691a:	b310      	cbz	r0, 26962 <tc_cmac_setup+0x50>
   2691c:	b311      	cbz	r1, 26964 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2691e:	2258      	movs	r2, #88	; 0x58
   26920:	2100      	movs	r1, #0
   26922:	f7ff fea3 	bl	2666c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   26926:	4629      	mov	r1, r5
	s->sched = sched;
   26928:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2692a:	4630      	mov	r0, r6
   2692c:	f7ec fa3e 	bl	12dac <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   26930:	2210      	movs	r2, #16
   26932:	2100      	movs	r1, #0
   26934:	4620      	mov	r0, r4
   26936:	f7ff fe99 	bl	2666c <_set>
	gf_double (s->K1, s->iv);
   2693a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2693e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26940:	4621      	mov	r1, r4
   26942:	4620      	mov	r0, r4
   26944:	f7ff ff5c 	bl	26800 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   26948:	4621      	mov	r1, r4
   2694a:	4628      	mov	r0, r5
   2694c:	f7ff ffae 	bl	268ac <gf_double>
	gf_double (s->K2, s->K1);
   26950:	4629      	mov	r1, r5
   26952:	f104 0020 	add.w	r0, r4, #32
   26956:	f7ff ffa9 	bl	268ac <gf_double>
	tc_cmac_init(s);
   2695a:	4620      	mov	r0, r4
   2695c:	f7ff ffc3 	bl	268e6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   26960:	2001      	movs	r0, #1
}
   26962:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   26964:	4608      	mov	r0, r1
   26966:	e7fc      	b.n	26962 <tc_cmac_setup+0x50>

00026968 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   26968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2696c:	460e      	mov	r6, r1
   2696e:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26970:	4604      	mov	r4, r0
   26972:	2800      	cmp	r0, #0
   26974:	d060      	beq.n	26a38 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   26976:	b1fa      	cbz	r2, 269b8 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   26978:	2900      	cmp	r1, #0
   2697a:	d05d      	beq.n	26a38 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2697c:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   26980:	ea53 0102 	orrs.w	r1, r3, r2
   26984:	d058      	beq.n	26a38 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   26986:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   26988:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2698c:	f142 32ff 	adc.w	r2, r2, #4294967295
   26990:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   26994:	f1b8 0f00 	cmp.w	r8, #0
   26998:	d02c      	beq.n	269f4 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2699a:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2699e:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   269a2:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   269a4:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   269a6:	d20a      	bcs.n	269be <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   269a8:	462b      	mov	r3, r5
   269aa:	4632      	mov	r2, r6
   269ac:	4629      	mov	r1, r5
   269ae:	f7ff fe50 	bl	26652 <_copy>
			s->leftover_offset += data_length;
   269b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   269b4:	442b      	add	r3, r5
   269b6:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   269b8:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   269ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   269be:	463b      	mov	r3, r7
   269c0:	4632      	mov	r2, r6
   269c2:	4639      	mov	r1, r7
   269c4:	f7ff fe45 	bl	26652 <_copy>
		data_length -= remaining_space;
   269c8:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   269ca:	2300      	movs	r3, #0
   269cc:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   269ce:	4445      	add	r5, r8
		data += remaining_space;
   269d0:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   269d2:	1e63      	subs	r3, r4, #1
   269d4:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   269d8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   269dc:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   269e0:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   269e2:	ea82 0200 	eor.w	r2, r2, r0
   269e6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   269e8:	d1f6      	bne.n	269d8 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   269ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   269ec:	4621      	mov	r1, r4
   269ee:	4620      	mov	r0, r4
   269f0:	f7ff ff06 	bl	26800 <tc_aes_encrypt>
   269f4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   269f8:	2d10      	cmp	r5, #16
   269fa:	d80a      	bhi.n	26a12 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   269fc:	2d00      	cmp	r5, #0
   269fe:	d0db      	beq.n	269b8 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   26a00:	462b      	mov	r3, r5
   26a02:	4632      	mov	r2, r6
   26a04:	4629      	mov	r1, r5
   26a06:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26a0a:	f7ff fe22 	bl	26652 <_copy>
		s->leftover_offset = data_length;
   26a0e:	6465      	str	r5, [r4, #68]	; 0x44
   26a10:	e7d2      	b.n	269b8 <tc_cmac_update+0x50>
   26a12:	1e63      	subs	r3, r4, #1
   26a14:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   26a16:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26a1a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26a1e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   26a20:	ea82 0200 	eor.w	r2, r2, r0
   26a24:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26a26:	d1f6      	bne.n	26a16 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26a28:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26a2a:	4621      	mov	r1, r4
   26a2c:	4620      	mov	r0, r4
   26a2e:	f7ff fee7 	bl	26800 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   26a32:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   26a34:	3d10      	subs	r5, #16
   26a36:	e7df      	b.n	269f8 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   26a38:	2000      	movs	r0, #0
   26a3a:	e7be      	b.n	269ba <tc_cmac_update+0x52>

00026a3c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   26a3c:	b570      	push	{r4, r5, r6, lr}
   26a3e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   26a40:	4605      	mov	r5, r0
   26a42:	b1e8      	cbz	r0, 26a80 <tc_cmac_final+0x44>
   26a44:	b369      	cbz	r1, 26aa2 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   26a46:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   26a48:	2a10      	cmp	r2, #16
   26a4a:	d11a      	bne.n	26a82 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   26a4c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26a4e:	1e63      	subs	r3, r4, #1
   26a50:	3901      	subs	r1, #1
   26a52:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26a56:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26a5a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   26a5e:	4072      	eors	r2, r6
   26a60:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26a64:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26a66:	ea82 0206 	eor.w	r2, r2, r6
   26a6a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26a6c:	d1f3      	bne.n	26a56 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   26a6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26a70:	4621      	mov	r1, r4
   26a72:	4628      	mov	r0, r5
   26a74:	f7ff fec4 	bl	26800 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   26a78:	4620      	mov	r0, r4
   26a7a:	f7ff ff2c 	bl	268d6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   26a7e:	2001      	movs	r0, #1
}
   26a80:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   26a82:	f102 0030 	add.w	r0, r2, #48	; 0x30
   26a86:	2100      	movs	r1, #0
   26a88:	f1c2 0210 	rsb	r2, r2, #16
   26a8c:	4420      	add	r0, r4
   26a8e:	f7ff fded 	bl	2666c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   26a92:	6c63      	ldr	r3, [r4, #68]	; 0x44
   26a94:	4423      	add	r3, r4
   26a96:	2280      	movs	r2, #128	; 0x80
   26a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   26a9c:	f104 0120 	add.w	r1, r4, #32
   26aa0:	e7d5      	b.n	26a4e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   26aa2:	4608      	mov	r0, r1
   26aa4:	e7ec      	b.n	26a80 <tc_cmac_final+0x44>

00026aa6 <abort_function>:
{
   26aa6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   26aa8:	2000      	movs	r0, #0
   26aaa:	f7eb f987 	bl	11dbc <sys_reboot>

00026aae <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   26aae:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   26ab0:	6800      	ldr	r0, [r0, #0]
   26ab2:	f7ec bad7 	b.w	13064 <z_arm_fatal_error>

00026ab6 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   26ab6:	2100      	movs	r1, #0
   26ab8:	2001      	movs	r0, #1
   26aba:	f7ec bad3 	b.w	13064 <z_arm_fatal_error>

00026abe <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   26abe:	b508      	push	{r3, lr}
	handler();
   26ac0:	f7ec fb66 	bl	13190 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   26ac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   26ac8:	f7ec bc3e 	b.w	13348 <z_arm_exc_exit>

00026acc <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   26acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ad0:	4684      	mov	ip, r0
   26ad2:	460f      	mov	r7, r1
	register const char *s = nptr;
   26ad4:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   26ad6:	4621      	mov	r1, r4
   26ad8:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   26adc:	2b20      	cmp	r3, #32
   26ade:	d0fa      	beq.n	26ad6 <strtoul+0xa>
   26ae0:	f1a3 0009 	sub.w	r0, r3, #9
   26ae4:	2804      	cmp	r0, #4
   26ae6:	d9f6      	bls.n	26ad6 <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   26ae8:	2b2d      	cmp	r3, #45	; 0x2d
   26aea:	d125      	bne.n	26b38 <strtoul+0x6c>
		neg = 1;
		c = *s++;
   26aec:	784b      	ldrb	r3, [r1, #1]
   26aee:	1c8c      	adds	r4, r1, #2
		neg = 1;
   26af0:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   26af4:	bb3a      	cbnz	r2, 26b46 <strtoul+0x7a>
   26af6:	2b30      	cmp	r3, #48	; 0x30
   26af8:	d032      	beq.n	26b60 <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   26afa:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   26afc:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   26b00:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   26b02:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   26b06:	fb02 f801 	mul.w	r8, r2, r1
   26b0a:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   26b0e:	4628      	mov	r0, r5
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   26b10:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   26b14:	2e09      	cmp	r6, #9
   26b16:	d82a      	bhi.n	26b6e <strtoul+0xa2>
			c -= '0';
   26b18:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   26b1a:	429a      	cmp	r2, r3
   26b1c:	dd37      	ble.n	26b8e <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   26b1e:	1c6e      	adds	r6, r5, #1
   26b20:	d007      	beq.n	26b32 <strtoul+0x66>
   26b22:	4288      	cmp	r0, r1
   26b24:	d830      	bhi.n	26b88 <strtoul+0xbc>
   26b26:	d101      	bne.n	26b2c <strtoul+0x60>
   26b28:	4543      	cmp	r3, r8
   26b2a:	dc2d      	bgt.n	26b88 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   26b2c:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   26b30:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   26b32:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   26b36:	e7eb      	b.n	26b10 <strtoul+0x44>
	} else if (c == '+') {
   26b38:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   26b3a:	bf04      	itt	eq
   26b3c:	784b      	ldrbeq	r3, [r1, #1]
   26b3e:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   26b40:	f04f 0e00 	mov.w	lr, #0
   26b44:	e7d6      	b.n	26af4 <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   26b46:	2a10      	cmp	r2, #16
   26b48:	d1d8      	bne.n	26afc <strtoul+0x30>
   26b4a:	2b30      	cmp	r3, #48	; 0x30
   26b4c:	d1d6      	bne.n	26afc <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   26b4e:	7821      	ldrb	r1, [r4, #0]
   26b50:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   26b54:	2958      	cmp	r1, #88	; 0x58
   26b56:	d1d1      	bne.n	26afc <strtoul+0x30>
		c = s[1];
   26b58:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   26b5a:	2210      	movs	r2, #16
		s += 2;
   26b5c:	3402      	adds	r4, #2
	if (base == 0) {
   26b5e:	e7cd      	b.n	26afc <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   26b60:	7822      	ldrb	r2, [r4, #0]
   26b62:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   26b66:	2a58      	cmp	r2, #88	; 0x58
   26b68:	d0f6      	beq.n	26b58 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   26b6a:	2208      	movs	r2, #8
   26b6c:	e7c6      	b.n	26afc <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   26b6e:	f043 0620 	orr.w	r6, r3, #32
   26b72:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   26b74:	2e19      	cmp	r6, #25
   26b76:	d80a      	bhi.n	26b8e <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26b78:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   26b7c:	2e1a      	cmp	r6, #26
   26b7e:	bf34      	ite	cc
   26b80:	2637      	movcc	r6, #55	; 0x37
   26b82:	2657      	movcs	r6, #87	; 0x57
   26b84:	1b9b      	subs	r3, r3, r6
   26b86:	e7c8      	b.n	26b1a <strtoul+0x4e>
			any = -1;
   26b88:	f04f 35ff 	mov.w	r5, #4294967295
   26b8c:	e7d1      	b.n	26b32 <strtoul+0x66>
		}
	}
	if (any < 0) {
   26b8e:	1c6b      	adds	r3, r5, #1
   26b90:	d107      	bne.n	26ba2 <strtoul+0xd6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   26b92:	f7f8 fe1d 	bl	1f7d0 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   26b96:	2322      	movs	r3, #34	; 0x22
   26b98:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   26b9a:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   26b9c:	b947      	cbnz	r7, 26bb0 <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   26b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   26ba2:	f1be 0f00 	cmp.w	lr, #0
   26ba6:	d000      	beq.n	26baa <strtoul+0xde>
		acc = -acc;
   26ba8:	4240      	negs	r0, r0
	if (endptr != NULL) {
   26baa:	2f00      	cmp	r7, #0
   26bac:	d0f7      	beq.n	26b9e <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   26bae:	b10d      	cbz	r5, 26bb4 <strtoul+0xe8>
   26bb0:	f104 3cff 	add.w	ip, r4, #4294967295
   26bb4:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   26bb8:	e7f1      	b.n	26b9e <strtoul+0xd2>

00026bba <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   26bba:	3901      	subs	r1, #1
   26bbc:	4603      	mov	r3, r0
   26bbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   26bc2:	b90a      	cbnz	r2, 26bc8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   26bc4:	701a      	strb	r2, [r3, #0]

	return dest;
}
   26bc6:	4770      	bx	lr
		*d = *s;
   26bc8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   26bcc:	e7f7      	b.n	26bbe <strcpy+0x4>

00026bce <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   26bce:	4603      	mov	r3, r0
	size_t n = 0;
   26bd0:	2000      	movs	r0, #0

	while (*s != '\0') {
   26bd2:	5c1a      	ldrb	r2, [r3, r0]
   26bd4:	b902      	cbnz	r2, 26bd8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   26bd6:	4770      	bx	lr
		n++;
   26bd8:	3001      	adds	r0, #1
   26bda:	e7fa      	b.n	26bd2 <strlen+0x4>

00026bdc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   26bdc:	4603      	mov	r3, r0
	size_t n = 0;
   26bde:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   26be0:	5c1a      	ldrb	r2, [r3, r0]
   26be2:	b10a      	cbz	r2, 26be8 <strnlen+0xc>
   26be4:	4288      	cmp	r0, r1
   26be6:	d100      	bne.n	26bea <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   26be8:	4770      	bx	lr
		n++;
   26bea:	3001      	adds	r0, #1
   26bec:	e7f8      	b.n	26be0 <strnlen+0x4>

00026bee <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   26bee:	1e43      	subs	r3, r0, #1
   26bf0:	3901      	subs	r1, #1
   26bf2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26bf6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   26bfa:	4282      	cmp	r2, r0
   26bfc:	d101      	bne.n	26c02 <strcmp+0x14>
   26bfe:	2a00      	cmp	r2, #0
   26c00:	d1f7      	bne.n	26bf2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   26c02:	1a10      	subs	r0, r2, r0
   26c04:	4770      	bx	lr

00026c06 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   26c06:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   26c08:	460b      	mov	r3, r1
   26c0a:	4605      	mov	r5, r0
   26c0c:	b16a      	cbz	r2, 26c2a <strncmp+0x24>
   26c0e:	f810 6b01 	ldrb.w	r6, [r0], #1
   26c12:	781c      	ldrb	r4, [r3, #0]
   26c14:	42b4      	cmp	r4, r6
   26c16:	f101 0101 	add.w	r1, r1, #1
   26c1a:	d100      	bne.n	26c1e <strncmp+0x18>
   26c1c:	b91c      	cbnz	r4, 26c26 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   26c1e:	782a      	ldrb	r2, [r5, #0]
   26c20:	781b      	ldrb	r3, [r3, #0]
   26c22:	1ad0      	subs	r0, r2, r3
   26c24:	e002      	b.n	26c2c <strncmp+0x26>
		n--;
   26c26:	3a01      	subs	r2, #1
   26c28:	e7ee      	b.n	26c08 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   26c2a:	4610      	mov	r0, r2
}
   26c2c:	bd70      	pop	{r4, r5, r6, pc}

00026c2e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   26c2e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   26c30:	b15a      	cbz	r2, 26c4a <memcmp+0x1c>
   26c32:	3901      	subs	r1, #1
   26c34:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   26c36:	f810 2b01 	ldrb.w	r2, [r0], #1
   26c3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   26c3e:	42a0      	cmp	r0, r4
   26c40:	d001      	beq.n	26c46 <memcmp+0x18>
   26c42:	429a      	cmp	r2, r3
   26c44:	d0f7      	beq.n	26c36 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   26c46:	1ad0      	subs	r0, r2, r3
}
   26c48:	bd10      	pop	{r4, pc}
		return 0;
   26c4a:	4610      	mov	r0, r2
   26c4c:	e7fc      	b.n	26c48 <memcmp+0x1a>

00026c4e <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   26c4e:	1a43      	subs	r3, r0, r1
   26c50:	4293      	cmp	r3, r2
{
   26c52:	b510      	push	{r4, lr}
   26c54:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   26c58:	d308      	bcc.n	26c6c <memmove+0x1e>
   26c5a:	3901      	subs	r1, #1
	char *dest = d;
   26c5c:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   26c5e:	429a      	cmp	r2, r3
   26c60:	d00b      	beq.n	26c7a <memmove+0x2c>
			*dest = *src;
   26c62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   26c66:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   26c6a:	e7f8      	b.n	26c5e <memmove+0x10>
   26c6c:	440a      	add	r2, r1
			dest[n] = src[n];
   26c6e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   26c72:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   26c76:	428a      	cmp	r2, r1
   26c78:	d1f9      	bne.n	26c6e <memmove+0x20>
		}
	}

	return d;
}
   26c7a:	bd10      	pop	{r4, pc}

00026c7c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   26c7c:	b510      	push	{r4, lr}
   26c7e:	1e43      	subs	r3, r0, #1
   26c80:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   26c82:	4291      	cmp	r1, r2
   26c84:	d100      	bne.n	26c88 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   26c86:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   26c88:	f811 4b01 	ldrb.w	r4, [r1], #1
   26c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   26c90:	e7f7      	b.n	26c82 <memcpy+0x6>

00026c92 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   26c92:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   26c94:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   26c96:	4603      	mov	r3, r0
	while (n > 0) {
   26c98:	4293      	cmp	r3, r2
   26c9a:	d100      	bne.n	26c9e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   26c9c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   26c9e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   26ca2:	e7f9      	b.n	26c98 <memset+0x6>

00026ca4 <_stdout_hook_default>:
}
   26ca4:	f04f 30ff 	mov.w	r0, #4294967295
   26ca8:	4770      	bx	lr

00026caa <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   26caa:	2806      	cmp	r0, #6
   26cac:	d108      	bne.n	26cc0 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   26cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26cb2:	2201      	movs	r2, #1
   26cb4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26cb8:	f3bf 8f4f 	dsb	sy
        __WFE();
   26cbc:	bf20      	wfe
    while (true)
   26cbe:	e7fd      	b.n	26cbc <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   26cc0:	4770      	bx	lr

00026cc2 <pm_state_exit_post_ops>:
   26cc2:	2300      	movs	r3, #0
   26cc4:	f383 8811 	msr	BASEPRI, r3
   26cc8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26ccc:	4770      	bx	lr

00026cce <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   26cce:	b530      	push	{r4, r5, lr}
	memcpy(res, r, 3);
   26cd0:	2203      	movs	r2, #3
{
   26cd2:	b087      	sub	sp, #28
   26cd4:	4605      	mov	r5, r0
   26cd6:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   26cd8:	a802      	add	r0, sp, #8
   26cda:	4411      	add	r1, r2
   26cdc:	f7ff ffce 	bl	26c7c <memcpy>
	(void)memset(res + 3, 0, 13);
   26ce0:	220d      	movs	r2, #13
   26ce2:	2100      	movs	r1, #0
   26ce4:	f10d 000b 	add.w	r0, sp, #11
   26ce8:	f7ff ffd3 	bl	26c92 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   26cec:	aa02      	add	r2, sp, #8
   26cee:	4611      	mov	r1, r2
   26cf0:	4628      	mov	r0, r5
   26cf2:	f002 f98e 	bl	29012 <bt_encrypt_le>
	if (err) {
   26cf6:	b110      	cbz	r0, 26cfe <bt_rpa_irk_matches+0x30>

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   26cf8:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   26cfa:	b007      	add	sp, #28
   26cfc:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   26cfe:	2203      	movs	r2, #3
   26d00:	a902      	add	r1, sp, #8
   26d02:	a801      	add	r0, sp, #4
   26d04:	f7ff ffba 	bl	26c7c <memcpy>
	return !memcmp(addr->val, hash, 3);
   26d08:	2203      	movs	r2, #3
   26d0a:	a901      	add	r1, sp, #4
   26d0c:	4620      	mov	r0, r4
   26d0e:	f7ff ff8e 	bl	26c2e <memcmp>
   26d12:	fab0 f080 	clz	r0, r0
   26d16:	0940      	lsrs	r0, r0, #5
   26d18:	e7ef      	b.n	26cfa <bt_rpa_irk_matches+0x2c>

00026d1a <bt_settings_decode_key>:
{
   26d1a:	b570      	push	{r4, r5, r6, lr}
   26d1c:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   26d1e:	2100      	movs	r1, #0
{
   26d20:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   26d22:	f7ff fbc7 	bl	264b4 <settings_name_next>
   26d26:	280d      	cmp	r0, #13
   26d28:	d118      	bne.n	26d5c <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   26d2a:	7b23      	ldrb	r3, [r4, #12]
   26d2c:	2b30      	cmp	r3, #48	; 0x30
   26d2e:	d013      	beq.n	26d58 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   26d30:	2b31      	cmp	r3, #49	; 0x31
   26d32:	d113      	bne.n	26d5c <bt_settings_decode_key+0x42>
   26d34:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   26d36:	f805 3b06 	strb.w	r3, [r5], #6
   26d3a:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   26d3e:	462a      	mov	r2, r5
   26d40:	4620      	mov	r0, r4
   26d42:	2301      	movs	r3, #1
   26d44:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   26d46:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   26d48:	f7fe fea5 	bl	25a96 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   26d4c:	42b4      	cmp	r4, r6
   26d4e:	f105 35ff 	add.w	r5, r5, #4294967295
   26d52:	d1f4      	bne.n	26d3e <bt_settings_decode_key+0x24>
	return 0;
   26d54:	2000      	movs	r0, #0
}
   26d56:	bd70      	pop	{r4, r5, r6, pc}
   26d58:	2300      	movs	r3, #0
   26d5a:	e7ec      	b.n	26d36 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   26d5c:	f06f 0015 	mvn.w	r0, #21
   26d60:	e7f9      	b.n	26d56 <bt_settings_decode_key+0x3c>

00026d62 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   26d62:	b510      	push	{r4, lr}
   26d64:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   26d66:	7801      	ldrb	r1, [r0, #0]
   26d68:	7822      	ldrb	r2, [r4, #0]
   26d6a:	428a      	cmp	r2, r1
{
   26d6c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   26d6e:	d00f      	beq.n	26d90 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   26d70:	4669      	mov	r1, sp
   26d72:	f7ed f881 	bl	13e78 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   26d76:	a905      	add	r1, sp, #20
   26d78:	4620      	mov	r0, r4
   26d7a:	f7ed f87d 	bl	13e78 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   26d7e:	2210      	movs	r2, #16
   26d80:	f10d 0115 	add.w	r1, sp, #21
   26d84:	f10d 0001 	add.w	r0, sp, #1
   26d88:	f7ff ff51 	bl	26c2e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   26d8c:	b00a      	add	sp, #40	; 0x28
   26d8e:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   26d90:	2a01      	cmp	r2, #1
   26d92:	d006      	beq.n	26da2 <bt_uuid_cmp+0x40>
   26d94:	2a02      	cmp	r2, #2
   26d96:	d007      	beq.n	26da8 <bt_uuid_cmp+0x46>
   26d98:	b972      	cbnz	r2, 26db8 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   26d9a:	8840      	ldrh	r0, [r0, #2]
   26d9c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   26d9e:	1ac0      	subs	r0, r0, r3
   26da0:	e7f4      	b.n	26d8c <bt_uuid_cmp+0x2a>
   26da2:	6840      	ldr	r0, [r0, #4]
   26da4:	6863      	ldr	r3, [r4, #4]
   26da6:	e7fa      	b.n	26d9e <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26da8:	2210      	movs	r2, #16
   26daa:	1c61      	adds	r1, r4, #1
   26dac:	3001      	adds	r0, #1
}
   26dae:	b00a      	add	sp, #40	; 0x28
   26db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26db4:	f7ff bf3b 	b.w	26c2e <memcmp>
	switch (u1->type) {
   26db8:	f06f 0015 	mvn.w	r0, #21
   26dbc:	e7e6      	b.n	26d8c <bt_uuid_cmp+0x2a>

00026dbe <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   26dbe:	2a04      	cmp	r2, #4
{
   26dc0:	b510      	push	{r4, lr}
	switch (data_len) {
   26dc2:	d00a      	beq.n	26dda <bt_uuid_create+0x1c>
   26dc4:	2a10      	cmp	r2, #16
   26dc6:	d00d      	beq.n	26de4 <bt_uuid_create+0x26>
   26dc8:	2a02      	cmp	r2, #2
   26dca:	f04f 0300 	mov.w	r3, #0
   26dce:	d10f      	bne.n	26df0 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   26dd0:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   26dd2:	880b      	ldrh	r3, [r1, #0]
   26dd4:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   26dd6:	2001      	movs	r0, #1
}
   26dd8:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   26dda:	2301      	movs	r3, #1
   26ddc:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   26dde:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   26de0:	6043      	str	r3, [r0, #4]
		break;
   26de2:	e7f8      	b.n	26dd6 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   26de4:	2302      	movs	r3, #2
   26de6:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   26dea:	f7ff ff47 	bl	26c7c <memcpy>
		break;
   26dee:	e7f2      	b.n	26dd6 <bt_uuid_create+0x18>
	switch (data_len) {
   26df0:	4618      	mov	r0, r3
   26df2:	e7f1      	b.n	26dd8 <bt_uuid_create+0x1a>

00026df4 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   26df4:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   26df6:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   26df8:	2106      	movs	r1, #6
{
   26dfa:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   26dfc:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   26e00:	f7f7 fb74 	bl	1e4ec <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   26e04:	b918      	cbnz	r0, 26e0e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   26e06:	79a3      	ldrb	r3, [r4, #6]
   26e08:	f063 033f 	orn	r3, r3, #63	; 0x3f
   26e0c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   26e0e:	bd10      	pop	{r4, pc}

00026e10 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   26e10:	280f      	cmp	r0, #15
   26e12:	d807      	bhi.n	26e24 <bt_hci_evt_get_flags+0x14>
   26e14:	280d      	cmp	r0, #13
   26e16:	d80b      	bhi.n	26e30 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   26e18:	2805      	cmp	r0, #5
   26e1a:	bf08      	it	eq
   26e1c:	2003      	moveq	r0, #3
   26e1e:	bf18      	it	ne
   26e20:	2002      	movne	r0, #2
   26e22:	4770      	bx	lr
	switch (evt) {
   26e24:	2813      	cmp	r0, #19
   26e26:	d003      	beq.n	26e30 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   26e28:	281a      	cmp	r0, #26
   26e2a:	bf08      	it	eq
   26e2c:	2001      	moveq	r0, #1
   26e2e:	e7f6      	b.n	26e1e <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   26e30:	2001      	movs	r0, #1
	}
}
   26e32:	4770      	bx	lr

00026e34 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   26e34:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   26e38:	b183      	cbz	r3, 26e5c <update_sec_level+0x28>
   26e3a:	7b5a      	ldrb	r2, [r3, #13]
   26e3c:	07d1      	lsls	r1, r2, #31
   26e3e:	d50d      	bpl.n	26e5c <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   26e40:	06d2      	lsls	r2, r2, #27
   26e42:	d50d      	bpl.n	26e60 <update_sec_level+0x2c>
   26e44:	7b1b      	ldrb	r3, [r3, #12]
   26e46:	2b10      	cmp	r3, #16
   26e48:	bf14      	ite	ne
   26e4a:	2303      	movne	r3, #3
   26e4c:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   26e4e:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   26e50:	7a80      	ldrb	r0, [r0, #10]
}
   26e52:	4298      	cmp	r0, r3
   26e54:	bf8c      	ite	hi
   26e56:	2000      	movhi	r0, #0
   26e58:	2001      	movls	r0, #1
   26e5a:	4770      	bx	lr
   26e5c:	2302      	movs	r3, #2
   26e5e:	e7f6      	b.n	26e4e <update_sec_level+0x1a>
   26e60:	2303      	movs	r3, #3
   26e62:	e7f4      	b.n	26e4e <update_sec_level+0x1a>

00026e64 <hci_vendor_event>:
}
   26e64:	4770      	bx	lr

00026e66 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   26e66:	2207      	movs	r2, #7
   26e68:	f7ff bf08 	b.w	26c7c <memcpy>

00026e6c <atomic_or>:
{
   26e6c:	b510      	push	{r4, lr}
   26e6e:	4603      	mov	r3, r0
}
   26e70:	f3bf 8f5b 	dmb	ish
   26e74:	e853 0f00 	ldrex	r0, [r3]
   26e78:	ea40 0201 	orr.w	r2, r0, r1
   26e7c:	e843 2400 	strex	r4, r2, [r3]
   26e80:	2c00      	cmp	r4, #0
   26e82:	d1f7      	bne.n	26e74 <atomic_or+0x8>
   26e84:	f3bf 8f5b 	dmb	ish
   26e88:	bd10      	pop	{r4, pc}

00026e8a <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26e8a:	f3bf 8f5b 	dmb	ish
   26e8e:	e850 3f00 	ldrex	r3, [r0]
   26e92:	400b      	ands	r3, r1
   26e94:	e840 3200 	strex	r2, r3, [r0]
   26e98:	2a00      	cmp	r2, #0
   26e9a:	d1f8      	bne.n	26e8e <atomic_and.isra.0+0x4>
   26e9c:	f3bf 8f5b 	dmb	ish
}
   26ea0:	4770      	bx	lr

00026ea2 <sys_put_le64>:
	dst[1] = val >> 8;
   26ea2:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   26ea6:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   26ea8:	0e00      	lsrs	r0, r0, #24
   26eaa:	7053      	strb	r3, [r2, #1]
   26eac:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   26eae:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   26eb0:	f3c1 2007 	ubfx	r0, r1, #8, #8
   26eb4:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   26eb6:	7093      	strb	r3, [r2, #2]
   26eb8:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   26eba:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   26ebc:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   26ebe:	71d1      	strb	r1, [r2, #7]
}
   26ec0:	4770      	bx	lr

00026ec2 <bt_hci_disconnect>:
{
   26ec2:	b570      	push	{r4, r5, r6, lr}
   26ec4:	4606      	mov	r6, r0
   26ec6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   26ec8:	f240 4006 	movw	r0, #1030	; 0x406
   26ecc:	2103      	movs	r1, #3
   26ece:	f7ed fb9b 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   26ed2:	4604      	mov	r4, r0
   26ed4:	b168      	cbz	r0, 26ef2 <bt_hci_disconnect+0x30>
   26ed6:	2103      	movs	r1, #3
   26ed8:	3008      	adds	r0, #8
   26eda:	f7f4 ff1b 	bl	1bd14 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   26ede:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   26ee0:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26ee2:	4621      	mov	r1, r4
   26ee4:	2200      	movs	r2, #0
}
   26ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26eea:	f240 4006 	movw	r0, #1030	; 0x406
   26eee:	f7ed bbd5 	b.w	1469c <bt_hci_cmd_send_sync>
}
   26ef2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26ef6:	bd70      	pop	{r4, r5, r6, pc}

00026ef8 <bt_le_set_data_len>:
{
   26ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26efa:	4607      	mov	r7, r0
   26efc:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26efe:	f242 0022 	movw	r0, #8226	; 0x2022
   26f02:	2106      	movs	r1, #6
{
   26f04:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26f06:	f7ed fb7f 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   26f0a:	4604      	mov	r4, r0
   26f0c:	b178      	cbz	r0, 26f2e <bt_le_set_data_len+0x36>
   26f0e:	2106      	movs	r1, #6
   26f10:	3008      	adds	r0, #8
   26f12:	f7f4 feff 	bl	1bd14 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26f16:	883b      	ldrh	r3, [r7, #0]
   26f18:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   26f1a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   26f1c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   26f1e:	4621      	mov	r1, r4
   26f20:	2200      	movs	r2, #0
}
   26f22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   26f26:	f242 0022 	movw	r0, #8226	; 0x2022
   26f2a:	f7ed bbb7 	b.w	1469c <bt_hci_cmd_send_sync>
}
   26f2e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026f34 <bt_le_set_phy>:
{
   26f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26f38:	4681      	mov	r9, r0
   26f3a:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   26f3c:	f242 0032 	movw	r0, #8242	; 0x2032
   26f40:	2107      	movs	r1, #7
{
   26f42:	f89d a020 	ldrb.w	sl, [sp, #32]
   26f46:	4617      	mov	r7, r2
   26f48:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   26f4a:	f7ed fb5d 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   26f4e:	4605      	mov	r5, r0
   26f50:	b1a0      	cbz	r0, 26f7c <bt_le_set_phy+0x48>
   26f52:	2107      	movs	r1, #7
   26f54:	3008      	adds	r0, #8
   26f56:	f7f4 fedd 	bl	1bd14 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26f5a:	f8b9 3000 	ldrh.w	r3, [r9]
   26f5e:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   26f60:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   26f64:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   26f66:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   26f68:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   26f6c:	4629      	mov	r1, r5
   26f6e:	2200      	movs	r2, #0
}
   26f70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   26f74:	f242 0032 	movw	r0, #8242	; 0x2032
   26f78:	f7ed bb90 	b.w	1469c <bt_hci_cmd_send_sync>
}
   26f7c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026f84 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   26f84:	6880      	ldr	r0, [r0, #8]
   26f86:	f7ed bc35 	b.w	147f4 <bt_hci_le_enh_conn_complete>

00026f8a <bt_le_conn_params_valid>:
{
   26f8a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   26f8c:	8803      	ldrh	r3, [r0, #0]
   26f8e:	8842      	ldrh	r2, [r0, #2]
   26f90:	4293      	cmp	r3, r2
   26f92:	d819      	bhi.n	26fc8 <bt_le_conn_params_valid+0x3e>
   26f94:	2b05      	cmp	r3, #5
   26f96:	d917      	bls.n	26fc8 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   26f98:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   26f9c:	d814      	bhi.n	26fc8 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   26f9e:	8883      	ldrh	r3, [r0, #4]
   26fa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   26fa4:	d210      	bcs.n	26fc8 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   26fa6:	88c0      	ldrh	r0, [r0, #6]
   26fa8:	f1a0 010a 	sub.w	r1, r0, #10
   26fac:	b289      	uxth	r1, r1
   26fae:	f640 4476 	movw	r4, #3190	; 0xc76
   26fb2:	42a1      	cmp	r1, r4
   26fb4:	d808      	bhi.n	26fc8 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   26fb6:	3301      	adds	r3, #1
   26fb8:	b29b      	uxth	r3, r3
   26fba:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   26fbc:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   26fc0:	bf34      	ite	cc
   26fc2:	2001      	movcc	r0, #1
   26fc4:	2000      	movcs	r0, #0
}
   26fc6:	bd10      	pop	{r4, pc}
		return false;
   26fc8:	2000      	movs	r0, #0
   26fca:	e7fc      	b.n	26fc6 <bt_le_conn_params_valid+0x3c>

00026fcc <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   26fcc:	2000      	movs	r0, #0
   26fce:	4770      	bx	lr

00026fd0 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   26fd0:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   26fd2:	f7f4 fa19 	bl	1b408 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   26fd6:	b118      	cbz	r0, 26fe0 <bt_addr_le_is_bonded+0x10>
   26fd8:	89c0      	ldrh	r0, [r0, #14]
   26fda:	3800      	subs	r0, #0
   26fdc:	bf18      	it	ne
   26fde:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   26fe0:	bd08      	pop	{r3, pc}

00026fe2 <bt_addr_le_eq>:
{
   26fe2:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   26fe4:	2207      	movs	r2, #7
   26fe6:	f7ff fe22 	bl	26c2e <memcmp>
}
   26fea:	fab0 f080 	clz	r0, r0
   26fee:	0940      	lsrs	r0, r0, #5
   26ff0:	bd08      	pop	{r3, pc}

00026ff2 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   26ff2:	2207      	movs	r2, #7
   26ff4:	f7ff be42 	b.w	26c7c <memcpy>

00026ff8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26ff8:	f3bf 8f5b 	dmb	ish
   26ffc:	6800      	ldr	r0, [r0, #0]
   26ffe:	f3bf 8f5b 	dmb	ish
}
   27002:	4770      	bx	lr

00027004 <hci_id_add>:
{
   27004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27008:	4688      	mov	r8, r1
   2700a:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   2700c:	4605      	mov	r5, r0
   2700e:	bb08      	cbnz	r0, 27054 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   27010:	2127      	movs	r1, #39	; 0x27
   27012:	f242 0027 	movw	r0, #8231	; 0x2027
   27016:	f7ed faf7 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   2701a:	4604      	mov	r4, r0
   2701c:	b1f0      	cbz	r0, 2705c <hci_id_add+0x58>
   2701e:	2127      	movs	r1, #39	; 0x27
   27020:	3008      	adds	r0, #8
   27022:	f7f4 fe77 	bl	1bd14 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   27026:	4641      	mov	r1, r8
   27028:	4606      	mov	r6, r0
   2702a:	f7ff ffe2 	bl	26ff2 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   2702e:	4639      	mov	r1, r7
   27030:	2210      	movs	r2, #16
   27032:	1df0      	adds	r0, r6, #7
   27034:	f7ff fe22 	bl	26c7c <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   27038:	4629      	mov	r1, r5
   2703a:	2210      	movs	r2, #16
   2703c:	f106 0017 	add.w	r0, r6, #23
   27040:	f7ff fe27 	bl	26c92 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   27044:	462a      	mov	r2, r5
   27046:	4621      	mov	r1, r4
   27048:	f242 0027 	movw	r0, #8231	; 0x2027
}
   2704c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   27050:	f7ed bb24 	b.w	1469c <bt_hci_cmd_send_sync>
		return -EINVAL;
   27054:	f06f 0015 	mvn.w	r0, #21
}
   27058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   2705c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27060:	e7fa      	b.n	27058 <hci_id_add+0x54>

00027062 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   27062:	7a03      	ldrb	r3, [r0, #8]
   27064:	075b      	lsls	r3, r3, #29
{
   27066:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   27068:	d505      	bpl.n	27076 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2706a:	4601      	mov	r1, r0
   2706c:	322a      	adds	r2, #42	; 0x2a
   2706e:	f811 0b01 	ldrb.w	r0, [r1], #1
   27072:	f7ff bfc7 	b.w	27004 <hci_id_add>
}
   27076:	4770      	bx	lr

00027078 <addr_res_enable>:
{
   27078:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2707a:	2101      	movs	r1, #1
{
   2707c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2707e:	f242 002d 	movw	r0, #8237	; 0x202d
   27082:	f7ed fac1 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   27086:	4604      	mov	r4, r0
   27088:	b158      	cbz	r0, 270a2 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2708a:	4629      	mov	r1, r5
   2708c:	3008      	adds	r0, #8
   2708e:	f001 fd38 	bl	28b02 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   27092:	4621      	mov	r1, r4
   27094:	2200      	movs	r2, #0
}
   27096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2709a:	f242 002d 	movw	r0, #8237	; 0x202d
   2709e:	f7ed bafd 	b.w	1469c <bt_hci_cmd_send_sync>
}
   270a2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   270a6:	bd38      	pop	{r3, r4, r5, pc}

000270a8 <adv_unpause_enabled>:
{
   270a8:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   270aa:	f100 0310 	add.w	r3, r0, #16
   270ae:	f3bf 8f5b 	dmb	ish
   270b2:	e853 2f00 	ldrex	r2, [r3]
   270b6:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   270ba:	e843 1400 	strex	r4, r1, [r3]
   270be:	2c00      	cmp	r4, #0
   270c0:	d1f7      	bne.n	270b2 <adv_unpause_enabled+0xa>
   270c2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   270c6:	0413      	lsls	r3, r2, #16
   270c8:	d503      	bpl.n	270d2 <adv_unpause_enabled+0x2a>
}
   270ca:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   270cc:	2101      	movs	r1, #1
   270ce:	f000 b946 	b.w	2735e <bt_le_adv_set_enable>
}
   270d2:	bc10      	pop	{r4}
   270d4:	4770      	bx	lr

000270d6 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   270d6:	f100 0210 	add.w	r2, r0, #16
{
   270da:	b508      	push	{r3, lr}
   270dc:	4603      	mov	r3, r0
   270de:	4610      	mov	r0, r2
   270e0:	f7ff ff8a 	bl	26ff8 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   270e4:	0601      	lsls	r1, r0, #24
   270e6:	d511      	bpl.n	2710c <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   270e8:	f3bf 8f5b 	dmb	ish
   270ec:	e852 0f00 	ldrex	r0, [r2]
   270f0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
   270f4:	e842 0100 	strex	r1, r0, [r2]
   270f8:	2900      	cmp	r1, #0
   270fa:	d1f7      	bne.n	270ec <adv_pause_enabled+0x16>
   270fc:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   27100:	4618      	mov	r0, r3
   27102:	2100      	movs	r1, #0
}
   27104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   27108:	f000 b929 	b.w	2735e <bt_le_adv_set_enable>
}
   2710c:	bd08      	pop	{r3, pc}

0002710e <bt_lookup_id_addr>:
{
   2710e:	b510      	push	{r4, lr}
   27110:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   27112:	b930      	cbnz	r0, 27122 <bt_lookup_id_addr+0x14>
   27114:	b119      	cbz	r1, 2711e <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   27116:	f7f4 f925 	bl	1b364 <bt_keys_find_irk>
		if (keys) {
   2711a:	b100      	cbz	r0, 2711e <bt_lookup_id_addr+0x10>
			return &keys->addr;
   2711c:	1c44      	adds	r4, r0, #1
}
   2711e:	4620      	mov	r0, r4
   27120:	bd10      	pop	{r4, pc}
		return NULL;
   27122:	2400      	movs	r4, #0
   27124:	e7fb      	b.n	2711e <bt_lookup_id_addr+0x10>

00027126 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   27126:	b118      	cbz	r0, 27130 <bt_id_set_adv_random_addr+0xa>
   27128:	b111      	cbz	r1, 27130 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2712a:	4608      	mov	r0, r1
   2712c:	f7ee b87e 	b.w	1522c <set_random_address>
}
   27130:	f06f 0015 	mvn.w	r0, #21
   27134:	4770      	bx	lr

00027136 <bt_id_set_adv_private_addr>:
{
   27136:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   27138:	4604      	mov	r4, r0
   2713a:	b180      	cbz	r0, 2715e <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2713c:	2106      	movs	r1, #6
   2713e:	4668      	mov	r0, sp
   27140:	f7f7 f9d4 	bl	1e4ec <bt_rand>
	if (err) {
   27144:	b948      	cbnz	r0, 2715a <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   27146:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2714a:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2714c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   27150:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   27152:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   27156:	f7ff ffe6 	bl	27126 <bt_id_set_adv_random_addr>
}
   2715a:	b002      	add	sp, #8
   2715c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2715e:	f06f 0015 	mvn.w	r0, #21
   27162:	e7fa      	b.n	2715a <bt_id_set_adv_private_addr+0x24>

00027164 <bt_id_adv_random_addr_check>:
}
   27164:	3800      	subs	r0, #0
   27166:	bf18      	it	ne
   27168:	2001      	movne	r0, #1
   2716a:	4770      	bx	lr

0002716c <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2716c:	7a03      	ldrb	r3, [r0, #8]
   2716e:	07d9      	lsls	r1, r3, #31
   27170:	d504      	bpl.n	2717c <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   27172:	f023 0301 	bic.w	r3, r3, #1
   27176:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   27178:	f7ee b90c 	b.w	15394 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2717c:	0799      	lsls	r1, r3, #30
   2717e:	d504      	bpl.n	2718a <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   27180:	f023 0302 	bic.w	r3, r3, #2
   27184:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   27186:	f7ee b9b9 	b.w	154fc <bt_id_del>
}
   2718a:	4770      	bx	lr

0002718c <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2718c:	2000      	movs	r0, #0
   2718e:	4770      	bx	lr

00027190 <get_adv_channel_map>:
{
   27190:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   27192:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   27196:	bf0c      	ite	eq
   27198:	2007      	moveq	r0, #7
   2719a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2719c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2719e:	bf48      	it	mi
   271a0:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   271a4:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   271a6:	bf48      	it	mi
   271a8:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   271ac:	4770      	bx	lr

000271ae <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   271ae:	f3bf 8f5b 	dmb	ish
   271b2:	6800      	ldr	r0, [r0, #0]
   271b4:	f3bf 8f5b 	dmb	ish
}
   271b8:	4770      	bx	lr

000271ba <atomic_and>:
{
   271ba:	b510      	push	{r4, lr}
   271bc:	4603      	mov	r3, r0
}
   271be:	f3bf 8f5b 	dmb	ish
   271c2:	e853 0f00 	ldrex	r0, [r3]
   271c6:	ea00 0201 	and.w	r2, r0, r1
   271ca:	e843 2400 	strex	r4, r2, [r3]
   271ce:	2c00      	cmp	r4, #0
   271d0:	d1f7      	bne.n	271c2 <atomic_and+0x8>
   271d2:	f3bf 8f5b 	dmb	ish
   271d6:	bd10      	pop	{r4, pc}

000271d8 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   271d8:	2301      	movs	r3, #1
{
   271da:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   271dc:	fa03 f101 	lsl.w	r1, r3, r1
{
   271e0:	4604      	mov	r4, r0
	if (val) {
   271e2:	b162      	cbz	r2, 271fe <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   271e4:	f3bf 8f5b 	dmb	ish
   271e8:	e854 3f00 	ldrex	r3, [r4]
   271ec:	430b      	orrs	r3, r1
   271ee:	e844 3200 	strex	r2, r3, [r4]
   271f2:	2a00      	cmp	r2, #0
   271f4:	d1f8      	bne.n	271e8 <atomic_set_bit_to+0x10>
   271f6:	f3bf 8f5b 	dmb	ish
	}
}
   271fa:	bc10      	pop	{r4}
   271fc:	4770      	bx	lr
   271fe:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27200:	43c9      	mvns	r1, r1
   27202:	f7ff bfda 	b.w	271ba <atomic_and>

00027206 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   27206:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2720a:	b087      	sub	sp, #28
   2720c:	4605      	mov	r5, r0
   2720e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   27212:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   27216:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2721a:	460c      	mov	r4, r1
   2721c:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2721e:	2100      	movs	r1, #0
   27220:	2210      	movs	r2, #16
   27222:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   27224:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   27226:	f7ff fd34 	bl	26c92 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2722a:	b9ee      	cbnz	r6, 27268 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   2722c:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   27230:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   27232:	a902      	add	r1, sp, #8
   27234:	f242 0008 	movw	r0, #8200	; 0x2008
   27238:	f7ee fb64 	bl	15904 <hci_set_ad>
		if (err) {
   2723c:	4604      	mov	r4, r0
   2723e:	b978      	cbnz	r0, 27260 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   27240:	f1ba 0f00 	cmp.w	sl, #0
   27244:	d13e      	bne.n	272c4 <le_adv_update.constprop.0+0xbe>
   27246:	3510      	adds	r5, #16
   27248:	f3bf 8f5b 	dmb	ish
   2724c:	e855 3f00 	ldrex	r3, [r5]
   27250:	f043 0304 	orr.w	r3, r3, #4
   27254:	e845 3200 	strex	r2, r3, [r5]
   27258:	2a00      	cmp	r2, #0
   2725a:	d1f7      	bne.n	2724c <le_adv_update.constprop.0+0x46>
   2725c:	f3bf 8f5b 	dmb	ish
}
   27260:	4620      	mov	r0, r4
   27262:	b007      	add	sp, #28
   27264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   27268:	f7ed ff8c 	bl	15184 <bt_get_name>
   2726c:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2726e:	b9e4      	cbnz	r4, 272aa <le_adv_update.constprop.0+0xa4>
   27270:	bb37      	cbnz	r7, 272c0 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   27272:	4658      	mov	r0, fp
   27274:	f7ff fcab 	bl	26bce <strlen>
   27278:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   2727a:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2727c:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   27280:	f88d 3000 	strb.w	r3, [sp]
   27284:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   27288:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2728c:	d1d0      	bne.n	27230 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   2728e:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   27292:	9605      	str	r6, [sp, #20]
			d_len = 2;
   27294:	2202      	movs	r2, #2
   27296:	e7cc      	b.n	27232 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   27298:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2729c:	3a08      	subs	r2, #8
   2729e:	2a01      	cmp	r2, #1
   272a0:	d925      	bls.n	272ee <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   272a2:	3301      	adds	r3, #1
   272a4:	4598      	cmp	r8, r3
   272a6:	d1f7      	bne.n	27298 <le_adv_update.constprop.0+0x92>
   272a8:	e7e2      	b.n	27270 <le_adv_update.constprop.0+0x6a>
   272aa:	2300      	movs	r3, #0
   272ac:	e7fa      	b.n	272a4 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   272ae:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   272b2:	3a08      	subs	r2, #8
   272b4:	2a01      	cmp	r2, #1
   272b6:	d91a      	bls.n	272ee <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   272b8:	3301      	adds	r3, #1
   272ba:	4599      	cmp	r9, r3
   272bc:	d1f7      	bne.n	272ae <le_adv_update.constprop.0+0xa8>
   272be:	e7d8      	b.n	27272 <le_adv_update.constprop.0+0x6c>
   272c0:	2300      	movs	r3, #0
   272c2:	e7fa      	b.n	272ba <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   272c4:	2e02      	cmp	r6, #2
   272c6:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   272ca:	bf08      	it	eq
   272cc:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   272ce:	a902      	add	r1, sp, #8
			d_len = 2;
   272d0:	bf08      	it	eq
   272d2:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   272d4:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   272d8:	bf08      	it	eq
   272da:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   272de:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   272e2:	f7ee fb0f 	bl	15904 <hci_set_ad>
		if (err) {
   272e6:	2800      	cmp	r0, #0
   272e8:	d0ad      	beq.n	27246 <le_adv_update.constprop.0+0x40>
   272ea:	4604      	mov	r4, r0
   272ec:	e7b8      	b.n	27260 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   272ee:	f06f 0415 	mvn.w	r4, #21
   272f2:	e7b5      	b.n	27260 <le_adv_update.constprop.0+0x5a>

000272f4 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   272f4:	6843      	ldr	r3, [r0, #4]
   272f6:	f013 0008 	ands.w	r0, r3, #8
   272fa:	d00a      	beq.n	27312 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   272fc:	035a      	lsls	r2, r3, #13
   272fe:	d407      	bmi.n	27310 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   27300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   27304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   27308:	bf14      	ite	ne
   2730a:	2002      	movne	r0, #2
   2730c:	2001      	moveq	r0, #1
   2730e:	4770      	bx	lr
   27310:	2001      	movs	r0, #1
}
   27312:	4770      	bx	lr

00027314 <bt_le_adv_set_enable_legacy>:
{
   27314:	b570      	push	{r4, r5, r6, lr}
   27316:	4606      	mov	r6, r0
   27318:	b086      	sub	sp, #24
   2731a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2731c:	f242 000a 	movw	r0, #8202	; 0x200a
   27320:	2101      	movs	r1, #1
   27322:	f7ed f971 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   27326:	4604      	mov	r4, r0
   27328:	b1b0      	cbz	r0, 27358 <bt_le_adv_set_enable_legacy+0x44>
   2732a:	3008      	adds	r0, #8
	if (enable) {
   2732c:	b195      	cbz	r5, 27354 <bt_le_adv_set_enable_legacy+0x40>
   2732e:	2101      	movs	r1, #1
   27330:	f001 fbe7 	bl	28b02 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   27334:	f106 0210 	add.w	r2, r6, #16
   27338:	a903      	add	r1, sp, #12
   2733a:	4620      	mov	r0, r4
   2733c:	9500      	str	r5, [sp, #0]
   2733e:	2307      	movs	r3, #7
   27340:	f7ed f950 	bl	145e4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   27344:	2200      	movs	r2, #0
   27346:	4621      	mov	r1, r4
   27348:	f242 000a 	movw	r0, #8202	; 0x200a
   2734c:	f7ed f9a6 	bl	1469c <bt_hci_cmd_send_sync>
}
   27350:	b006      	add	sp, #24
   27352:	bd70      	pop	{r4, r5, r6, pc}
   27354:	4629      	mov	r1, r5
   27356:	e7eb      	b.n	27330 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   27358:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2735c:	e7f8      	b.n	27350 <bt_le_adv_set_enable_legacy+0x3c>

0002735e <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2735e:	f7ff bfd9 	b.w	27314 <bt_le_adv_set_enable_legacy>

00027362 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   27362:	3018      	adds	r0, #24
   27364:	f7f9 bd78 	b.w	20e58 <k_work_cancel_delayable>

00027368 <sys_slist_find_and_remove>:
	return list->head;
   27368:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2736a:	2200      	movs	r2, #0
   2736c:	b90b      	cbnz	r3, 27372 <sys_slist_find_and_remove+0xa>
   2736e:	4618      	mov	r0, r3
   27370:	4770      	bx	lr
   27372:	428b      	cmp	r3, r1
   27374:	d110      	bne.n	27398 <sys_slist_find_and_remove+0x30>
	return node->next;
   27376:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   27378:	b942      	cbnz	r2, 2738c <sys_slist_find_and_remove+0x24>
   2737a:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2737c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2737e:	4291      	cmp	r1, r2
   27380:	d100      	bne.n	27384 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   27382:	6043      	str	r3, [r0, #4]
	parent->next = child;
   27384:	2300      	movs	r3, #0
   27386:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27388:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2738a:	4770      	bx	lr
	parent->next = child;
   2738c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2738e:	6843      	ldr	r3, [r0, #4]
   27390:	4299      	cmp	r1, r3
	list->tail = node;
   27392:	bf08      	it	eq
   27394:	6042      	streq	r2, [r0, #4]
}
   27396:	e7f5      	b.n	27384 <sys_slist_find_and_remove+0x1c>
	return node->next;
   27398:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2739a:	681b      	ldr	r3, [r3, #0]
   2739c:	e7e6      	b.n	2736c <sys_slist_find_and_remove+0x4>

0002739e <atomic_and>:
{
   2739e:	b510      	push	{r4, lr}
   273a0:	4603      	mov	r3, r0
}
   273a2:	f3bf 8f5b 	dmb	ish
   273a6:	e853 0f00 	ldrex	r0, [r3]
   273aa:	ea00 0201 	and.w	r2, r0, r1
   273ae:	e843 2400 	strex	r4, r2, [r3]
   273b2:	2c00      	cmp	r4, #0
   273b4:	d1f7      	bne.n	273a6 <atomic_and+0x8>
   273b6:	f3bf 8f5b 	dmb	ish
   273ba:	bd10      	pop	{r4, pc}

000273bc <tx_complete_work>:
	tx_notify(conn);
   273bc:	3828      	subs	r0, #40	; 0x28
   273be:	f7ee bedf 	b.w	16180 <tx_notify>

000273c2 <bt_conn_reset_rx_state>:
{
   273c2:	b510      	push	{r4, lr}
   273c4:	4604      	mov	r4, r0
	if (!conn->rx) {
   273c6:	6900      	ldr	r0, [r0, #16]
   273c8:	b118      	cbz	r0, 273d2 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   273ca:	f7f4 fb9d 	bl	1bb08 <net_buf_unref>
	conn->rx = NULL;
   273ce:	2300      	movs	r3, #0
   273d0:	6123      	str	r3, [r4, #16]
}
   273d2:	bd10      	pop	{r4, pc}

000273d4 <conn_lookup_handle>:
{
   273d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   273d8:	4607      	mov	r7, r0
   273da:	460e      	mov	r6, r1
   273dc:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   273de:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   273e0:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   273e4:	42b4      	cmp	r4, r6
   273e6:	d103      	bne.n	273f0 <conn_lookup_handle+0x1c>
	return NULL;
   273e8:	2300      	movs	r3, #0
}
   273ea:	4618      	mov	r0, r3
   273ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   273f0:	fb09 7004 	mla	r0, r9, r4, r7
   273f4:	f7ef f928 	bl	16648 <bt_conn_ref>
   273f8:	4603      	mov	r3, r0
		if (!conn) {
   273fa:	b158      	cbz	r0, 27414 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   273fc:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   273fe:	2d01      	cmp	r5, #1
   27400:	d002      	beq.n	27408 <conn_lookup_handle+0x34>
   27402:	3d07      	subs	r5, #7
   27404:	2d01      	cmp	r5, #1
   27406:	d803      	bhi.n	27410 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   27408:	881a      	ldrh	r2, [r3, #0]
   2740a:	4542      	cmp	r2, r8
   2740c:	d0ed      	beq.n	273ea <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2740e:	4618      	mov	r0, r3
   27410:	f7ef f946 	bl	166a0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   27414:	3401      	adds	r4, #1
   27416:	e7e5      	b.n	273e4 <conn_lookup_handle+0x10>

00027418 <bt_conn_connected>:
{
   27418:	b510      	push	{r4, lr}
   2741a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2741c:	f7ef fdee 	bl	16ffc <bt_l2cap_connected>
	notify_connected(conn);
   27420:	4620      	mov	r0, r4
}
   27422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   27426:	f7ee be7d 	b.w	16124 <notify_connected>

0002742a <bt_conn_disconnect>:
{
   2742a:	b510      	push	{r4, lr}
	switch (conn->state) {
   2742c:	7b43      	ldrb	r3, [r0, #13]
   2742e:	3b02      	subs	r3, #2
{
   27430:	4604      	mov	r4, r0
	switch (conn->state) {
   27432:	2b06      	cmp	r3, #6
   27434:	d816      	bhi.n	27464 <bt_conn_disconnect+0x3a>
   27436:	e8df f003 	tbb	[pc, r3]
   2743a:	1504      	.short	0x1504
   2743c:	0b091515 	.word	0x0b091515
   27440:	09          	.byte	0x09
   27441:	00          	.byte	0x00
		conn->err = reason;
   27442:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   27444:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   27446:	4620      	mov	r0, r4
   27448:	f7ef f962 	bl	16710 <bt_conn_set_state>
{
   2744c:	2000      	movs	r0, #0
}
   2744e:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   27450:	8800      	ldrh	r0, [r0, #0]
   27452:	f7ff fd36 	bl	26ec2 <bt_hci_disconnect>
	if (err) {
   27456:	2800      	cmp	r0, #0
   27458:	d1f9      	bne.n	2744e <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2745a:	7b63      	ldrb	r3, [r4, #13]
   2745c:	2b07      	cmp	r3, #7
   2745e:	d1f5      	bne.n	2744c <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   27460:	2108      	movs	r1, #8
   27462:	e7f0      	b.n	27446 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   27464:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27468:	e7f1      	b.n	2744e <bt_conn_disconnect+0x24>

0002746a <bt_conn_set_security>:
{
   2746a:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2746c:	7b43      	ldrb	r3, [r0, #13]
   2746e:	2b07      	cmp	r3, #7
{
   27470:	4604      	mov	r4, r0
   27472:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   27474:	d126      	bne.n	274c4 <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   27476:	7a43      	ldrb	r3, [r0, #9]
   27478:	428b      	cmp	r3, r1
   2747a:	d219      	bcs.n	274b0 <bt_conn_set_security+0x46>
   2747c:	7a83      	ldrb	r3, [r0, #10]
   2747e:	428b      	cmp	r3, r1
   27480:	d216      	bcs.n	274b0 <bt_conn_set_security+0x46>
	if (val) {
   27482:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   27484:	f100 0004 	add.w	r0, r0, #4
   27488:	d514      	bpl.n	274b4 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2748a:	f3bf 8f5b 	dmb	ish
   2748e:	e850 3f00 	ldrex	r3, [r0]
   27492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   27496:	e840 3200 	strex	r2, r3, [r0]
   2749a:	2a00      	cmp	r2, #0
   2749c:	d1f7      	bne.n	2748e <bt_conn_set_security+0x24>
   2749e:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   274a2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   274a6:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   274a8:	4620      	mov	r0, r4
   274aa:	f7f3 f97d 	bl	1a7a8 <bt_smp_start_security>
	if (err) {
   274ae:	b930      	cbnz	r0, 274be <bt_conn_set_security+0x54>
		return -ENOTCONN;
   274b0:	2000      	movs	r0, #0
}
   274b2:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   274b4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   274b8:	f7ff ff71 	bl	2739e <atomic_and>
   274bc:	e7f1      	b.n	274a2 <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   274be:	7a63      	ldrb	r3, [r4, #9]
   274c0:	72a3      	strb	r3, [r4, #10]
   274c2:	e7f6      	b.n	274b2 <bt_conn_set_security+0x48>
		return -ENOTCONN;
   274c4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   274c8:	e7f3      	b.n	274b2 <bt_conn_set_security+0x48>

000274ca <bt_conn_get_security>:
}
   274ca:	7a40      	ldrb	r0, [r0, #9]
   274cc:	4770      	bx	lr

000274ce <bt_conn_is_peer_addr_le>:
{
   274ce:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   274d0:	7a03      	ldrb	r3, [r0, #8]
   274d2:	428b      	cmp	r3, r1
{
   274d4:	4604      	mov	r4, r0
   274d6:	4615      	mov	r5, r2
	if (id != conn->id) {
   274d8:	d115      	bne.n	27506 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   274da:	f100 0190 	add.w	r1, r0, #144	; 0x90
   274de:	2207      	movs	r2, #7
   274e0:	4628      	mov	r0, r5
   274e2:	f7ff fba4 	bl	26c2e <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   274e6:	b180      	cbz	r0, 2750a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   274e8:	78e3      	ldrb	r3, [r4, #3]
   274ea:	2207      	movs	r2, #7
   274ec:	b943      	cbnz	r3, 27500 <bt_conn_is_peer_addr_le+0x32>
   274ee:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   274f2:	4628      	mov	r0, r5
   274f4:	f7ff fb9b 	bl	26c2e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   274f8:	fab0 f080 	clz	r0, r0
   274fc:	0940      	lsrs	r0, r0, #5
}
   274fe:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   27500:	f104 0197 	add.w	r1, r4, #151	; 0x97
   27504:	e7f5      	b.n	274f2 <bt_conn_is_peer_addr_le+0x24>
		return false;
   27506:	2000      	movs	r0, #0
   27508:	e7f9      	b.n	274fe <bt_conn_is_peer_addr_le+0x30>
		return true;
   2750a:	2001      	movs	r0, #1
   2750c:	e7f7      	b.n	274fe <bt_conn_is_peer_addr_le+0x30>

0002750e <bt_conn_get_dst>:
}
   2750e:	3090      	adds	r0, #144	; 0x90
   27510:	4770      	bx	lr

00027512 <bt_conn_le_conn_update>:
{
   27512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27514:	4607      	mov	r7, r0
   27516:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   27518:	f242 0013 	movw	r0, #8211	; 0x2013
   2751c:	210e      	movs	r1, #14
   2751e:	f7ed f873 	bl	14608 <bt_hci_cmd_create>
	if (!buf) {
   27522:	4606      	mov	r6, r0
   27524:	b1d0      	cbz	r0, 2755c <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   27526:	210e      	movs	r1, #14
   27528:	3008      	adds	r0, #8
   2752a:	f7f4 fbf3 	bl	1bd14 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2752e:	220e      	movs	r2, #14
   27530:	4604      	mov	r4, r0
   27532:	2100      	movs	r1, #0
   27534:	f7ff fbad 	bl	26c92 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   27538:	883b      	ldrh	r3, [r7, #0]
   2753a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2753c:	882b      	ldrh	r3, [r5, #0]
   2753e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   27540:	886b      	ldrh	r3, [r5, #2]
   27542:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   27544:	88ab      	ldrh	r3, [r5, #4]
   27546:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   27548:	88eb      	ldrh	r3, [r5, #6]
   2754a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2754c:	4631      	mov	r1, r6
   2754e:	2200      	movs	r2, #0
}
   27550:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27554:	f242 0013 	movw	r0, #8211	; 0x2013
   27558:	f7ed b8a0 	b.w	1469c <bt_hci_cmd_send_sync>
}
   2755c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027562 <l2cap_connected>:
}
   27562:	4770      	bx	lr

00027564 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   27564:	4770      	bx	lr

00027566 <bt_l2cap_chan_del>:
{
   27566:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   27568:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2756c:	4604      	mov	r4, r0
	if (!chan->conn) {
   2756e:	b123      	cbz	r3, 2757a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   27570:	686b      	ldr	r3, [r5, #4]
   27572:	b103      	cbz	r3, 27576 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   27574:	4798      	blx	r3
	chan->conn = NULL;
   27576:	2300      	movs	r3, #0
   27578:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2757a:	68e3      	ldr	r3, [r4, #12]
   2757c:	b10b      	cbz	r3, 27582 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2757e:	4620      	mov	r0, r4
   27580:	4798      	blx	r3
	if (ops->released) {
   27582:	6a2b      	ldr	r3, [r5, #32]
   27584:	b11b      	cbz	r3, 2758e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   27586:	4620      	mov	r0, r4
}
   27588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2758c:	4718      	bx	r3
}
   2758e:	bd70      	pop	{r4, r5, r6, pc}

00027590 <bt_l2cap_disconnected>:
{
   27590:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   27592:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27594:	b130      	cbz	r0, 275a4 <bt_l2cap_disconnected+0x14>
	return node->next;
   27596:	f850 4908 	ldr.w	r4, [r0], #-8
   2759a:	b104      	cbz	r4, 2759e <bt_l2cap_disconnected+0xe>
   2759c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2759e:	f7ff ffe2 	bl	27566 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   275a2:	b904      	cbnz	r4, 275a6 <bt_l2cap_disconnected+0x16>
}
   275a4:	bd38      	pop	{r3, r4, r5, pc}
   275a6:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   275a8:	b12d      	cbz	r5, 275b6 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   275aa:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   275ac:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   275ae:	f7ff ffda 	bl	27566 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   275b2:	462c      	mov	r4, r5
   275b4:	e7f7      	b.n	275a6 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   275b6:	4620      	mov	r0, r4
}
   275b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   275bc:	f7ff bfd3 	b.w	27566 <bt_l2cap_chan_del>

000275c0 <bt_l2cap_security_changed>:
{
   275c0:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   275c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
   275c4:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   275c6:	b1bb      	cbz	r3, 275f8 <bt_l2cap_security_changed+0x38>
   275c8:	4618      	mov	r0, r3
	return node->next;
   275ca:	f850 4908 	ldr.w	r4, [r0], #-8
   275ce:	b104      	cbz	r4, 275d2 <bt_l2cap_security_changed+0x12>
   275d0:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   275d2:	f853 3c04 	ldr.w	r3, [r3, #-4]
   275d6:	689b      	ldr	r3, [r3, #8]
   275d8:	b10b      	cbz	r3, 275de <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   275da:	4629      	mov	r1, r5
   275dc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   275de:	b15c      	cbz	r4, 275f8 <bt_l2cap_security_changed+0x38>
   275e0:	4620      	mov	r0, r4
   275e2:	68a4      	ldr	r4, [r4, #8]
   275e4:	6843      	ldr	r3, [r0, #4]
   275e6:	b124      	cbz	r4, 275f2 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   275e8:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   275ea:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   275ec:	2b00      	cmp	r3, #0
   275ee:	d1f4      	bne.n	275da <bt_l2cap_security_changed+0x1a>
   275f0:	e7f6      	b.n	275e0 <bt_l2cap_security_changed+0x20>
   275f2:	689b      	ldr	r3, [r3, #8]
   275f4:	2b00      	cmp	r3, #0
   275f6:	d1f0      	bne.n	275da <bt_l2cap_security_changed+0x1a>
}
   275f8:	bd38      	pop	{r3, r4, r5, pc}

000275fa <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   275fa:	3104      	adds	r1, #4
   275fc:	f7ef b980 	b.w	16900 <bt_conn_create_pdu_timeout>

00027600 <bt_l2cap_send_cb>:
{
   27600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27604:	4614      	mov	r4, r2
   27606:	4605      	mov	r5, r0
   27608:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2760a:	f102 0008 	add.w	r0, r2, #8
   2760e:	2104      	movs	r1, #4
   27610:	461e      	mov	r6, r3
   27612:	f8dd 8018 	ldr.w	r8, [sp, #24]
   27616:	f7f4 fb2d 	bl	1bc74 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2761a:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2761c:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2761e:	3a04      	subs	r2, #4
   27620:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27622:	4643      	mov	r3, r8
   27624:	4632      	mov	r2, r6
   27626:	4621      	mov	r1, r4
   27628:	4628      	mov	r0, r5
}
   2762a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2762e:	f7ee bf7d 	b.w	1652c <bt_conn_send_cb>

00027632 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   27632:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27634:	b130      	cbz	r0, 27644 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27636:	8b83      	ldrh	r3, [r0, #28]
   27638:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2763a:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2763e:	d001      	beq.n	27644 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   27640:	6880      	ldr	r0, [r0, #8]
   27642:	e7f7      	b.n	27634 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   27644:	4770      	bx	lr

00027646 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   27646:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27648:	b130      	cbz	r0, 27658 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2764a:	8983      	ldrh	r3, [r0, #12]
   2764c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2764e:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27652:	d001      	beq.n	27658 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   27654:	6880      	ldr	r0, [r0, #8]
   27656:	e7f7      	b.n	27648 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   27658:	4770      	bx	lr

0002765a <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2765a:	4770      	bx	lr

0002765c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2765c:	4603      	mov	r3, r0
	return list->head;
   2765e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   27660:	b128      	cbz	r0, 2766e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27662:	6859      	ldr	r1, [r3, #4]
	return node->next;
   27664:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   27666:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27668:	4288      	cmp	r0, r1
	list->tail = node;
   2766a:	bf08      	it	eq
   2766c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2766e:	4770      	bx	lr

00027670 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   27670:	4603      	mov	r3, r0
	size_t bytes = 0;
   27672:	2000      	movs	r0, #0

	while (buf) {
   27674:	b903      	cbnz	r3, 27678 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   27676:	4770      	bx	lr
		bytes += buf->len;
   27678:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2767a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2767c:	4410      	add	r0, r2
		buf = buf->frags;
   2767e:	e7f9      	b.n	27674 <net_buf_frags_len+0x4>

00027680 <attr_read_type_cb>:
{
   27680:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   27682:	68d4      	ldr	r4, [r2, #12]
   27684:	7823      	ldrb	r3, [r4, #0]
   27686:	3102      	adds	r1, #2
   27688:	b913      	cbnz	r3, 27690 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2768a:	7021      	strb	r1, [r4, #0]
	return true;
   2768c:	2001      	movs	r0, #1
}
   2768e:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   27690:	428b      	cmp	r3, r1
   27692:	d0fb      	beq.n	2768c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   27694:	8983      	ldrh	r3, [r0, #12]
   27696:	3b02      	subs	r3, #2
   27698:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2769a:	2000      	movs	r0, #0
   2769c:	6110      	str	r0, [r2, #16]
		return false;
   2769e:	e7f6      	b.n	2768e <attr_read_type_cb+0xe>

000276a0 <att_prepare_write_req>:
}
   276a0:	2006      	movs	r0, #6
   276a2:	4770      	bx	lr

000276a4 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   276a4:	f3bf 8f5b 	dmb	ish
   276a8:	6800      	ldr	r0, [r0, #0]
   276aa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   276ae:	4108      	asrs	r0, r1
}
   276b0:	f000 0001 	and.w	r0, r0, #1
   276b4:	4770      	bx	lr

000276b6 <write_cb>:
{
   276b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   276b8:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   276ba:	4601      	mov	r1, r0
{
   276bc:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   276be:	f44f 7295 	mov.w	r2, #298	; 0x12a
   276c2:	6820      	ldr	r0, [r4, #0]
   276c4:	f000 fe1e 	bl	28304 <bt_gatt_check_perm>
   276c8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   276ca:	bb00      	cbnz	r0, 2770e <write_cb+0x58>
	if (!data->req) {
   276cc:	7a23      	ldrb	r3, [r4, #8]
   276ce:	b1b3      	cbz	r3, 276fe <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   276d0:	f1a3 0218 	sub.w	r2, r3, #24
   276d4:	4253      	negs	r3, r2
   276d6:	4153      	adcs	r3, r2
   276d8:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   276da:	9301      	str	r3, [sp, #4]
   276dc:	8a63      	ldrh	r3, [r4, #18]
   276de:	9300      	str	r3, [sp, #0]
   276e0:	68ae      	ldr	r6, [r5, #8]
   276e2:	8a23      	ldrh	r3, [r4, #16]
   276e4:	68e2      	ldr	r2, [r4, #12]
   276e6:	6820      	ldr	r0, [r4, #0]
   276e8:	4629      	mov	r1, r5
   276ea:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   276ec:	2800      	cmp	r0, #0
   276ee:	db08      	blt.n	27702 <write_cb+0x4c>
   276f0:	8a23      	ldrh	r3, [r4, #16]
   276f2:	4298      	cmp	r0, r3
   276f4:	d10e      	bne.n	27714 <write_cb+0x5e>
	data->err = 0U;
   276f6:	2300      	movs	r3, #0
   276f8:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   276fa:	2001      	movs	r0, #1
   276fc:	e008      	b.n	27710 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   276fe:	2302      	movs	r3, #2
   27700:	e7eb      	b.n	276da <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   27702:	f110 0fff 	cmn.w	r0, #255	; 0xff
   27706:	d305      	bcc.n	27714 <write_cb+0x5e>
		return -err;
   27708:	4240      	negs	r0, r0
   2770a:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2770c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2770e:	2000      	movs	r0, #0
}
   27710:	b002      	add	sp, #8
   27712:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   27714:	200e      	movs	r0, #14
   27716:	e7f9      	b.n	2770c <write_cb+0x56>

00027718 <bt_gatt_foreach_attr>:
{
   27718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2771a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2771e:	2300      	movs	r3, #0
   27720:	9300      	str	r3, [sp, #0]
   27722:	461a      	mov	r2, r3
   27724:	f7f1 fadc 	bl	18ce0 <bt_gatt_foreach_attr_type>
}
   27728:	b005      	add	sp, #20
   2772a:	f85d fb04 	ldr.w	pc, [sp], #4

0002772e <find_info_cb>:
{
   2772e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   27730:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   27732:	6817      	ldr	r7, [r2, #0]
{
   27734:	4605      	mov	r5, r0
   27736:	460e      	mov	r6, r1
   27738:	4614      	mov	r4, r2
	if (!data->rsp) {
   2773a:	b963      	cbnz	r3, 27756 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2773c:	6850      	ldr	r0, [r2, #4]
   2773e:	2101      	movs	r1, #1
   27740:	3008      	adds	r0, #8
   27742:	f7f4 fae7 	bl	1bd14 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   27746:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27748:	682b      	ldr	r3, [r5, #0]
   2774a:	781b      	ldrb	r3, [r3, #0]
   2774c:	2b00      	cmp	r3, #0
   2774e:	bf14      	ite	ne
   27750:	2302      	movne	r3, #2
   27752:	2301      	moveq	r3, #1
   27754:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   27756:	68a3      	ldr	r3, [r4, #8]
   27758:	781b      	ldrb	r3, [r3, #0]
   2775a:	2b01      	cmp	r3, #1
   2775c:	d003      	beq.n	27766 <find_info_cb+0x38>
   2775e:	2b02      	cmp	r3, #2
   27760:	d019      	beq.n	27796 <find_info_cb+0x68>
   27762:	2000      	movs	r0, #0
   27764:	e016      	b.n	27794 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27766:	682b      	ldr	r3, [r5, #0]
   27768:	781b      	ldrb	r3, [r3, #0]
   2776a:	2b00      	cmp	r3, #0
   2776c:	d1f9      	bne.n	27762 <find_info_cb+0x34>
   2776e:	6860      	ldr	r0, [r4, #4]
   27770:	2104      	movs	r1, #4
   27772:	3008      	adds	r0, #8
   27774:	f7f4 face 	bl	1bd14 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   27778:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2777a:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2777c:	682a      	ldr	r2, [r5, #0]
   2777e:	68e3      	ldr	r3, [r4, #12]
   27780:	8852      	ldrh	r2, [r2, #2]
   27782:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   27784:	6863      	ldr	r3, [r4, #4]
   27786:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   27788:	899b      	ldrh	r3, [r3, #12]
   2778a:	1ac0      	subs	r0, r0, r3
   2778c:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2778e:	bf94      	ite	ls
   27790:	2000      	movls	r0, #0
   27792:	2001      	movhi	r0, #1
}
   27794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   27796:	682b      	ldr	r3, [r5, #0]
   27798:	781b      	ldrb	r3, [r3, #0]
   2779a:	2b02      	cmp	r3, #2
   2779c:	d1e1      	bne.n	27762 <find_info_cb+0x34>
   2779e:	6860      	ldr	r0, [r4, #4]
   277a0:	2112      	movs	r1, #18
   277a2:	3008      	adds	r0, #8
   277a4:	f7f4 fab6 	bl	1bd14 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   277a8:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   277aa:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   277ac:	6829      	ldr	r1, [r5, #0]
   277ae:	68e0      	ldr	r0, [r4, #12]
   277b0:	2210      	movs	r2, #16
   277b2:	3101      	adds	r1, #1
   277b4:	3002      	adds	r0, #2
   277b6:	f7ff fa61 	bl	26c7c <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   277ba:	6863      	ldr	r3, [r4, #4]
   277bc:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   277be:	899b      	ldrh	r3, [r3, #12]
   277c0:	1ac0      	subs	r0, r0, r3
   277c2:	2812      	cmp	r0, #18
   277c4:	e7e3      	b.n	2778e <find_info_cb+0x60>

000277c6 <att_chan_mtu_updated>:
{
   277c6:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   277c8:	6805      	ldr	r5, [r0, #0]
	return list->head;
   277ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   277cc:	b352      	cbz	r2, 27824 <att_chan_mtu_updated+0x5e>
	return node->next;
   277ce:	6813      	ldr	r3, [r2, #0]
   277d0:	b103      	cbz	r3, 277d4 <att_chan_mtu_updated+0xe>
   277d2:	3bf0      	subs	r3, #240	; 0xf0
   277d4:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   277d8:	2200      	movs	r2, #0
   277da:	4611      	mov	r1, r2
   277dc:	e000      	b.n	277e0 <att_chan_mtu_updated+0x1a>
   277de:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   277e0:	4284      	cmp	r4, r0
   277e2:	d007      	beq.n	277f4 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   277e4:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   277e6:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   277e8:	42b1      	cmp	r1, r6
   277ea:	bf38      	it	cc
   277ec:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   277ee:	42a2      	cmp	r2, r4
   277f0:	bf38      	it	cc
   277f2:	4622      	movcc	r2, r4
   277f4:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   277f6:	b12b      	cbz	r3, 27804 <att_chan_mtu_updated+0x3e>
   277f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   277fc:	2b00      	cmp	r3, #0
   277fe:	d1ee      	bne.n	277de <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   27800:	4284      	cmp	r4, r0
   27802:	d1ef      	bne.n	277e4 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27804:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   27806:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27808:	428b      	cmp	r3, r1
   2780a:	d801      	bhi.n	27810 <att_chan_mtu_updated+0x4a>
   2780c:	4290      	cmp	r0, r2
   2780e:	d90b      	bls.n	27828 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27810:	4282      	cmp	r2, r0
   27812:	bf38      	it	cc
   27814:	4602      	movcc	r2, r0
   27816:	4299      	cmp	r1, r3
   27818:	6828      	ldr	r0, [r5, #0]
   2781a:	bf38      	it	cc
   2781c:	4619      	movcc	r1, r3
}
   2781e:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27820:	f7f2 b840 	b.w	198a4 <bt_gatt_att_max_mtu_changed>
   27824:	4611      	mov	r1, r2
   27826:	e7ed      	b.n	27804 <att_chan_mtu_updated+0x3e>
}
   27828:	bc70      	pop	{r4, r5, r6}
   2782a:	4770      	bx	lr

0002782c <attr_read_group_cb>:
	if (!data->rsp->len) {
   2782c:	68d0      	ldr	r0, [r2, #12]
   2782e:	7803      	ldrb	r3, [r0, #0]
   27830:	3104      	adds	r1, #4
   27832:	b913      	cbnz	r3, 2783a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   27834:	7001      	strb	r1, [r0, #0]
	return true;
   27836:	2001      	movs	r0, #1
   27838:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2783a:	428b      	cmp	r3, r1
   2783c:	d0fb      	beq.n	27836 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2783e:	6891      	ldr	r1, [r2, #8]
   27840:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   27842:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   27844:	3b04      	subs	r3, #4
   27846:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   27848:	6110      	str	r0, [r2, #16]
}
   2784a:	4770      	bx	lr

0002784c <chan_req_send>:
{
   2784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2784e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   27850:	6888      	ldr	r0, [r1, #8]
   27852:	f7ff ff0d 	bl	27670 <net_buf_frags_len>
   27856:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   27858:	4283      	cmp	r3, r0
{
   2785a:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2785c:	d30d      	bcc.n	2787a <chan_req_send+0x2e>
	chan->req = req;
   2785e:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   27862:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   27864:	2600      	movs	r6, #0
   27866:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   27868:	4628      	mov	r0, r5
   2786a:	4639      	mov	r1, r7
   2786c:	f7ef fe06 	bl	1747c <chan_send>
	if (err) {
   27870:	b110      	cbz	r0, 27878 <chan_req_send+0x2c>
		req->buf = buf;
   27872:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   27874:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   27878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2787a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2787e:	e7fb      	b.n	27878 <chan_req_send+0x2c>

00027880 <bt_att_chan_send_rsp>:
{
   27880:	b538      	push	{r3, r4, r5, lr}
   27882:	4604      	mov	r4, r0
   27884:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   27886:	f7ef fdf9 	bl	1747c <chan_send>
	if (err) {
   2788a:	b130      	cbz	r0, 2789a <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2788c:	4629      	mov	r1, r5
   2788e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   27892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   27896:	f7f4 b90d 	b.w	1bab4 <net_buf_put>
}
   2789a:	bd38      	pop	{r3, r4, r5, pc}

0002789c <process_queue>:
{
   2789c:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2789e:	2200      	movs	r2, #0
{
   278a0:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   278a2:	2300      	movs	r3, #0
   278a4:	4608      	mov	r0, r1
{
   278a6:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   278a8:	f7f3 fffc 	bl	1b8a4 <net_buf_get>
	if (buf) {
   278ac:	4605      	mov	r5, r0
   278ae:	b158      	cbz	r0, 278c8 <process_queue+0x2c>
	return chan_send(chan, buf);
   278b0:	4601      	mov	r1, r0
   278b2:	4620      	mov	r0, r4
   278b4:	f7ef fde2 	bl	1747c <chan_send>
		if (err) {
   278b8:	4604      	mov	r4, r0
   278ba:	b118      	cbz	r0, 278c4 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   278bc:	4629      	mov	r1, r5
   278be:	4630      	mov	r0, r6
   278c0:	f001 fd3f 	bl	29342 <k_queue_prepend>
}
   278c4:	4620      	mov	r0, r4
   278c6:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   278c8:	f06f 0401 	mvn.w	r4, #1
   278cc:	e7fa      	b.n	278c4 <process_queue+0x28>

000278ce <att_chan_read>:
{
   278ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   278d2:	4680      	mov	r8, r0
   278d4:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   278d6:	4610      	mov	r0, r2
{
   278d8:	4699      	mov	r9, r3
   278da:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   278dc:	f7ff fec8 	bl	27670 <net_buf_frags_len>
   278e0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   278e4:	4283      	cmp	r3, r0
{
   278e6:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   278e8:	d97a      	bls.n	279e0 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   278ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
   278ee:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   278f0:	4630      	mov	r0, r6
   278f2:	f7f4 f961 	bl	1bbb8 <net_buf_frag_last>
	size_t len, total = 0;
   278f6:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   278fa:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   278fc:	4630      	mov	r0, r6
   278fe:	f7ff feb7 	bl	27670 <net_buf_frags_len>
   27902:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   27906:	f105 0708 	add.w	r7, r5, #8
   2790a:	1a24      	subs	r4, r4, r0
   2790c:	4638      	mov	r0, r7
   2790e:	f001 f8e4 	bl	28ada <net_buf_simple_tailroom>
   27912:	4284      	cmp	r4, r0
   27914:	d211      	bcs.n	2793a <att_chan_read+0x6c>
   27916:	4630      	mov	r0, r6
   27918:	f7ff feaa 	bl	27670 <net_buf_frags_len>
   2791c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   27920:	1a24      	subs	r4, r4, r0
		if (!len) {
   27922:	bb34      	cbnz	r4, 27972 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   27924:	79b0      	ldrb	r0, [r6, #6]
   27926:	f7f3 feb3 	bl	1b690 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2792a:	2200      	movs	r2, #0
   2792c:	2300      	movs	r3, #0
   2792e:	f001 f8c3 	bl	28ab8 <net_buf_alloc_fixed>
			if (!frag) {
   27932:	4605      	mov	r5, r0
   27934:	b930      	cbnz	r0, 27944 <att_chan_read+0x76>
	return total;
   27936:	4657      	mov	r7, sl
   27938:	e02c      	b.n	27994 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2793a:	4638      	mov	r0, r7
   2793c:	f001 f8cd 	bl	28ada <net_buf_simple_tailroom>
   27940:	4604      	mov	r4, r0
   27942:	e7ee      	b.n	27922 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   27944:	4601      	mov	r1, r0
   27946:	4630      	mov	r0, r6
   27948:	f7f4 f974 	bl	1bc34 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2794c:	4630      	mov	r0, r6
   2794e:	f7ff fe8f 	bl	27670 <net_buf_frags_len>
   27952:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   27956:	f105 0708 	add.w	r7, r5, #8
   2795a:	1a24      	subs	r4, r4, r0
   2795c:	4638      	mov	r0, r7
   2795e:	f001 f8bc 	bl	28ada <net_buf_simple_tailroom>
   27962:	4284      	cmp	r4, r0
   27964:	d21a      	bcs.n	2799c <att_chan_read+0xce>
   27966:	4630      	mov	r0, r6
   27968:	f7ff fe82 	bl	27670 <net_buf_frags_len>
   2796c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   27970:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   27972:	68a9      	ldr	r1, [r5, #8]
   27974:	89aa      	ldrh	r2, [r5, #12]
   27976:	f8cd 9000 	str.w	r9, [sp]
   2797a:	f8db 7004 	ldr.w	r7, [fp, #4]
   2797e:	9803      	ldr	r0, [sp, #12]
   27980:	440a      	add	r2, r1
   27982:	b2a3      	uxth	r3, r4
   27984:	4659      	mov	r1, fp
   27986:	47b8      	blx	r7
		if (read < 0) {
   27988:	1e07      	subs	r7, r0, #0
   2798a:	da0c      	bge.n	279a6 <att_chan_read+0xd8>
				return total;
   2798c:	f1ba 0f00 	cmp.w	sl, #0
   27990:	bf18      	it	ne
   27992:	4657      	movne	r7, sl
}
   27994:	4638      	mov	r0, r7
   27996:	b005      	add	sp, #20
   27998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2799c:	4638      	mov	r0, r7
   2799e:	f001 f89c 	bl	28ada <net_buf_simple_tailroom>
   279a2:	4604      	mov	r4, r0
   279a4:	e7e5      	b.n	27972 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   279a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   279a8:	b993      	cbnz	r3, 279d0 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   279aa:	4639      	mov	r1, r7
   279ac:	f105 0008 	add.w	r0, r5, #8
   279b0:	f7f4 f9b0 	bl	1bd14 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   279b4:	4630      	mov	r0, r6
   279b6:	f7ff fe5b 	bl	27670 <net_buf_frags_len>
   279ba:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   279be:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   279c0:	4283      	cmp	r3, r0
		total += read;
   279c2:	44ba      	add	sl, r7
		offset += read;
   279c4:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   279c8:	d9b5      	bls.n	27936 <att_chan_read+0x68>
   279ca:	42a7      	cmp	r7, r4
   279cc:	d096      	beq.n	278fc <att_chan_read+0x2e>
   279ce:	e7b2      	b.n	27936 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   279d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   279d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   279d4:	4639      	mov	r1, r7
   279d6:	4628      	mov	r0, r5
   279d8:	4798      	blx	r3
   279da:	2800      	cmp	r0, #0
   279dc:	d1e5      	bne.n	279aa <att_chan_read+0xdc>
   279de:	e7aa      	b.n	27936 <att_chan_read+0x68>
		return 0;
   279e0:	2700      	movs	r7, #0
   279e2:	e7d7      	b.n	27994 <att_chan_read+0xc6>

000279e4 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   279e4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   279e6:	2200      	movs	r2, #0
   279e8:	b903      	cbnz	r3, 279ec <sys_slist_find_and_remove.isra.0+0x8>
   279ea:	4770      	bx	lr
   279ec:	428b      	cmp	r3, r1
   279ee:	d10f      	bne.n	27a10 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   279f0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   279f2:	b93a      	cbnz	r2, 27a04 <sys_slist_find_and_remove.isra.0+0x20>
   279f4:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   279f6:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   279f8:	4291      	cmp	r1, r2
   279fa:	d100      	bne.n	279fe <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   279fc:	6043      	str	r3, [r0, #4]
	parent->next = child;
   279fe:	2300      	movs	r3, #0
   27a00:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   27a02:	4770      	bx	lr
	parent->next = child;
   27a04:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   27a06:	6843      	ldr	r3, [r0, #4]
   27a08:	4299      	cmp	r1, r3
	list->tail = node;
   27a0a:	bf08      	it	eq
   27a0c:	6042      	streq	r2, [r0, #4]
}
   27a0e:	e7f6      	b.n	279fe <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   27a10:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27a12:	681b      	ldr	r3, [r3, #0]
   27a14:	e7e8      	b.n	279e8 <sys_slist_find_and_remove.isra.0+0x4>

00027a16 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   27a16:	2006      	movs	r0, #6
   27a18:	4770      	bx	lr

00027a1a <atomic_test_and_set_bit>:
{
   27a1a:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   27a1c:	2301      	movs	r3, #1
   27a1e:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27a22:	f3bf 8f5b 	dmb	ish
   27a26:	e850 3f00 	ldrex	r3, [r0]
   27a2a:	ea43 0201 	orr.w	r2, r3, r1
   27a2e:	e840 2400 	strex	r4, r2, [r0]
   27a32:	2c00      	cmp	r4, #0
   27a34:	d1f7      	bne.n	27a26 <atomic_test_and_set_bit+0xc>
   27a36:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   27a3a:	4219      	tst	r1, r3
}
   27a3c:	bf14      	ite	ne
   27a3e:	2001      	movne	r0, #1
   27a40:	2000      	moveq	r0, #0
   27a42:	bd10      	pop	{r4, pc}

00027a44 <read_cb>:
{
   27a44:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   27a46:	6816      	ldr	r6, [r2, #0]
{
   27a48:	4605      	mov	r5, r0
	data->err = 0x00;
   27a4a:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   27a4c:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   27a4e:	7313      	strb	r3, [r2, #12]
{
   27a50:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27a52:	4629      	mov	r1, r5
   27a54:	2295      	movs	r2, #149	; 0x95
   27a56:	f000 fc55 	bl	28304 <bt_gatt_check_perm>
   27a5a:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   27a5c:	b980      	cbnz	r0, 27a80 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27a5e:	e9cd 0000 	strd	r0, r0, [sp]
   27a62:	4629      	mov	r1, r5
   27a64:	88a3      	ldrh	r3, [r4, #4]
   27a66:	68a2      	ldr	r2, [r4, #8]
   27a68:	4630      	mov	r0, r6
   27a6a:	f7ff ff30 	bl	278ce <att_chan_read>
	if (ret < 0) {
   27a6e:	2800      	cmp	r0, #0
   27a70:	da09      	bge.n	27a86 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   27a72:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   27a76:	bf26      	itte	cs
   27a78:	4240      	negcs	r0, r0
   27a7a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   27a7c:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   27a7e:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   27a80:	2000      	movs	r0, #0
}
   27a82:	b002      	add	sp, #8
   27a84:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   27a86:	2001      	movs	r0, #1
   27a88:	e7fb      	b.n	27a82 <read_cb+0x3e>

00027a8a <read_vl_cb>:
{
   27a8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   27a8e:	f8d2 8000 	ldr.w	r8, [r2]
{
   27a92:	4606      	mov	r6, r0
	data->err = 0x00;
   27a94:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   27a96:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   27a9a:	7313      	strb	r3, [r2, #12]
{
   27a9c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27a9e:	4631      	mov	r1, r6
   27aa0:	2295      	movs	r2, #149	; 0x95
   27aa2:	f000 fc2f 	bl	28304 <bt_gatt_check_perm>
   27aa6:	4605      	mov	r5, r0
   27aa8:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   27aaa:	b9e0      	cbnz	r0, 27ae6 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   27aac:	68a0      	ldr	r0, [r4, #8]
   27aae:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   27ab2:	8982      	ldrh	r2, [r0, #12]
   27ab4:	1a9b      	subs	r3, r3, r2
   27ab6:	2b01      	cmp	r3, #1
   27ab8:	dd15      	ble.n	27ae6 <read_vl_cb+0x5c>
   27aba:	2102      	movs	r1, #2
   27abc:	3008      	adds	r0, #8
   27abe:	f7f4 f929 	bl	1bd14 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27ac2:	e9cd 5500 	strd	r5, r5, [sp]
   27ac6:	4607      	mov	r7, r0
   27ac8:	88a3      	ldrh	r3, [r4, #4]
   27aca:	68a2      	ldr	r2, [r4, #8]
   27acc:	4631      	mov	r1, r6
   27ace:	4640      	mov	r0, r8
   27ad0:	f7ff fefd 	bl	278ce <att_chan_read>
	if (read < 0) {
   27ad4:	1e03      	subs	r3, r0, #0
   27ad6:	da0a      	bge.n	27aee <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   27ad8:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   27adc:	bf26      	itte	cs
   27ade:	425b      	negcs	r3, r3
   27ae0:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   27ae2:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   27ae4:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   27ae6:	2000      	movs	r0, #0
}
   27ae8:	b002      	add	sp, #8
   27aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   27aee:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   27af0:	2001      	movs	r0, #1
   27af2:	e7f9      	b.n	27ae8 <read_vl_cb+0x5e>

00027af4 <bt_att_sent>:
{
   27af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27af6:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   27af8:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27afa:	f100 0394 	add.w	r3, r0, #148	; 0x94
	struct bt_att *att = chan->att;
   27afe:	f850 4c04 	ldr.w	r4, [r0, #-4]
   27b02:	f3bf 8f5b 	dmb	ish
   27b06:	e853 1f00 	ldrex	r1, [r3]
   27b0a:	f021 0110 	bic.w	r1, r1, #16
   27b0e:	e843 1200 	strex	r2, r1, [r3]
   27b12:	2a00      	cmp	r2, #0
   27b14:	d1f7      	bne.n	27b06 <bt_att_sent+0x12>
   27b16:	f3bf 8f5b 	dmb	ish
	if (!att) {
   27b1a:	b30c      	cbz	r4, 27b60 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   27b1c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   27b20:	b98b      	cbnz	r3, 27b46 <bt_att_sent+0x52>
   27b22:	6863      	ldr	r3, [r4, #4]
   27b24:	b17b      	cbz	r3, 27b46 <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   27b26:	1d20      	adds	r0, r4, #4
   27b28:	f7ff fd98 	bl	2765c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27b2c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   27b2e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27b30:	4638      	mov	r0, r7
   27b32:	f7ff fe8b 	bl	2784c <chan_req_send>
   27b36:	2800      	cmp	r0, #0
   27b38:	da12      	bge.n	27b60 <bt_att_sent+0x6c>
	return list->head;
   27b3a:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   27b3c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   27b3e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   27b40:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   27b42:	b903      	cbnz	r3, 27b46 <bt_att_sent+0x52>
	list->tail = node;
   27b44:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   27b46:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   27b4a:	4638      	mov	r0, r7
   27b4c:	f7ff fea6 	bl	2789c <process_queue>
	if (!err) {
   27b50:	b130      	cbz	r0, 27b60 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   27b52:	f104 010c 	add.w	r1, r4, #12
   27b56:	4638      	mov	r0, r7
}
   27b58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   27b5c:	f7ff be9e 	b.w	2789c <process_queue>
}
   27b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027b62 <att_req_send_process>:
{
   27b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   27b66:	6a84      	ldr	r4, [r0, #40]	; 0x28
   27b68:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27b6a:	2c00      	cmp	r4, #0
   27b6c:	d03b      	beq.n	27be6 <att_req_send_process+0x84>
	return node->next;
   27b6e:	f854 69f0 	ldr.w	r6, [r4], #-240
   27b72:	b106      	cbz	r6, 27b76 <att_req_send_process+0x14>
   27b74:	3ef0      	subs	r6, #240	; 0xf0
{
   27b76:	2300      	movs	r3, #0
   27b78:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   27b7a:	f108 0704 	add.w	r7, r8, #4
   27b7e:	e013      	b.n	27ba8 <att_req_send_process+0x46>
		if (!req && prev &&
   27b80:	b1c3      	cbz	r3, 27bb4 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   27b82:	2103      	movs	r1, #3
   27b84:	f104 0098 	add.w	r0, r4, #152	; 0x98
   27b88:	f7ff fd8c 	bl	276a4 <atomic_test_bit>
   27b8c:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   27b8e:	f103 0098 	add.w	r0, r3, #152	; 0x98
   27b92:	f7ff fd87 	bl	276a4 <atomic_test_bit>
		if (!req && prev &&
   27b96:	4282      	cmp	r2, r0
   27b98:	d10c      	bne.n	27bb4 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27b9a:	b326      	cbz	r6, 27be6 <att_req_send_process+0x84>
   27b9c:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   27ba0:	b102      	cbz	r2, 27ba4 <att_req_send_process+0x42>
   27ba2:	3af0      	subs	r2, #240	; 0xf0
{
   27ba4:	4634      	mov	r4, r6
   27ba6:	4616      	mov	r6, r2
		if (chan->req) {
   27ba8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   27bac:	2a00      	cmp	r2, #0
   27bae:	d1f4      	bne.n	27b9a <att_req_send_process+0x38>
		if (!req && prev &&
   27bb0:	2d00      	cmp	r5, #0
   27bb2:	d0e5      	beq.n	27b80 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   27bb4:	4638      	mov	r0, r7
   27bb6:	f7ff fd51 	bl	2765c <sys_slist_get>
	if (node) {
   27bba:	4605      	mov	r5, r0
   27bbc:	b908      	cbnz	r0, 27bc2 <att_req_send_process+0x60>
   27bbe:	4623      	mov	r3, r4
   27bc0:	e7eb      	b.n	27b9a <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   27bc2:	4601      	mov	r1, r0
   27bc4:	4620      	mov	r0, r4
   27bc6:	f7ef fcb9 	bl	1753c <bt_att_chan_req_send>
   27bca:	2800      	cmp	r0, #0
   27bcc:	da0b      	bge.n	27be6 <att_req_send_process+0x84>
	return list->head;
   27bce:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   27bd2:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   27bd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   27bd8:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   27bdc:	2b00      	cmp	r3, #0
   27bde:	d1ee      	bne.n	27bbe <att_req_send_process+0x5c>
	list->tail = node;
   27be0:	f8c8 5008 	str.w	r5, [r8, #8]
}
   27be4:	e7eb      	b.n	27bbe <att_req_send_process+0x5c>
}
   27be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027bea <bt_att_status>:
{
   27bea:	b538      	push	{r3, r4, r5, lr}
   27bec:	4605      	mov	r5, r0
   27bee:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   27bf0:	2100      	movs	r1, #0
   27bf2:	f7ff fd57 	bl	276a4 <atomic_test_bit>
   27bf6:	b1c0      	cbz	r0, 27c2a <bt_att_status+0x40>
	if (!chan->att) {
   27bf8:	f855 0c04 	ldr.w	r0, [r5, #-4]
   27bfc:	b1a8      	cbz	r0, 27c2a <bt_att_status+0x40>
	if (chan->req) {
   27bfe:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   27c02:	b993      	cbnz	r3, 27c2a <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   27c04:	3004      	adds	r0, #4
   27c06:	f7ff fd29 	bl	2765c <sys_slist_get>
	if (!node) {
   27c0a:	4604      	mov	r4, r0
   27c0c:	b168      	cbz	r0, 27c2a <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27c0e:	4601      	mov	r1, r0
   27c10:	1f28      	subs	r0, r5, #4
   27c12:	f7ef fc93 	bl	1753c <bt_att_chan_req_send>
   27c16:	2800      	cmp	r0, #0
   27c18:	da07      	bge.n	27c2a <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   27c1a:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   27c1e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   27c20:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   27c22:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   27c24:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   27c26:	b902      	cbnz	r2, 27c2a <bt_att_status+0x40>
	list->tail = node;
   27c28:	609c      	str	r4, [r3, #8]
}
   27c2a:	bd38      	pop	{r3, r4, r5, pc}

00027c2c <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   27c2c:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   27c2e:	6883      	ldr	r3, [r0, #8]
   27c30:	699b      	ldr	r3, [r3, #24]
   27c32:	b10b      	cbz	r3, 27c38 <att_sent+0xc>
		chan->ops->sent(chan);
   27c34:	3004      	adds	r0, #4
   27c36:	4718      	bx	r3
}
   27c38:	4770      	bx	lr

00027c3a <att_tx_complete>:
{
   27c3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27c3e:	4606      	mov	r6, r0
   27c40:	460d      	mov	r5, r1
	if (!err) {
   27c42:	4614      	mov	r4, r2
   27c44:	b122      	cbz	r2, 27c50 <att_tx_complete+0x16>
}
   27c46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   27c4a:	4608      	mov	r0, r1
   27c4c:	f7ef bbfa 	b.w	17444 <tx_meta_data_free>
		att_sent(conn, user_data);
   27c50:	f7ff ffec 	bl	27c2c <att_sent>
	bt_gatt_complete_func_t func = data->func;
   27c54:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   27c56:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   27c5a:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   27c5e:	4628      	mov	r0, r5
   27c60:	f7ef fbf0 	bl	17444 <tx_meta_data_free>
	if (!err && func) {
   27c64:	b92f      	cbnz	r7, 27c72 <att_tx_complete+0x38>
}
   27c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   27c6a:	4649      	mov	r1, r9
   27c6c:	4630      	mov	r0, r6
   27c6e:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   27c70:	3401      	adds	r4, #1
   27c72:	b2a3      	uxth	r3, r4
   27c74:	4543      	cmp	r3, r8
   27c76:	d3f8      	bcc.n	27c6a <att_tx_complete+0x30>
   27c78:	e7f5      	b.n	27c66 <att_tx_complete+0x2c>

00027c7a <att_req_sent>:
{
   27c7a:	b510      	push	{r4, lr}
   27c7c:	460c      	mov	r4, r1
	if (!err) {
   27c7e:	b90a      	cbnz	r2, 27c84 <att_req_sent+0xa>
		att_sent(conn, user_data);
   27c80:	f7ff ffd4 	bl	27c2c <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   27c84:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   27c86:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   27c8a:	b12b      	cbz	r3, 27c98 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   27c8c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   27c90:	2300      	movs	r3, #0
   27c92:	30c0      	adds	r0, #192	; 0xc0
   27c94:	f7f9 f8da 	bl	20e4c <k_work_reschedule>
	tx_meta_data_free(user_data);
   27c98:	4620      	mov	r0, r4
}
   27c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   27c9e:	f7ef bbd1 	b.w	17444 <tx_meta_data_free>

00027ca2 <att_cfm_sent>:
{
   27ca2:	b510      	push	{r4, lr}
   27ca4:	460c      	mov	r4, r1
	if (!err) {
   27ca6:	b90a      	cbnz	r2, 27cac <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   27ca8:	f7ff ffc0 	bl	27c2c <att_sent>
   27cac:	6823      	ldr	r3, [r4, #0]
   27cae:	f3bf 8f5b 	dmb	ish
   27cb2:	3398      	adds	r3, #152	; 0x98
   27cb4:	e853 1f00 	ldrex	r1, [r3]
   27cb8:	f021 0102 	bic.w	r1, r1, #2
   27cbc:	e843 1200 	strex	r2, r1, [r3]
   27cc0:	2a00      	cmp	r2, #0
   27cc2:	d1f7      	bne.n	27cb4 <att_cfm_sent+0x12>
   27cc4:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   27cc8:	4620      	mov	r0, r4
}
   27cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   27cce:	f7ef bbb9 	b.w	17444 <tx_meta_data_free>

00027cd2 <att_rsp_sent>:
{
   27cd2:	b510      	push	{r4, lr}
   27cd4:	460c      	mov	r4, r1
	if (!err) {
   27cd6:	b90a      	cbnz	r2, 27cdc <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   27cd8:	f7ff ffa8 	bl	27c2c <att_sent>
   27cdc:	6823      	ldr	r3, [r4, #0]
   27cde:	f3bf 8f5b 	dmb	ish
   27ce2:	3398      	adds	r3, #152	; 0x98
   27ce4:	e853 1f00 	ldrex	r1, [r3]
   27ce8:	f021 0101 	bic.w	r1, r1, #1
   27cec:	e843 1200 	strex	r2, r1, [r3]
   27cf0:	2a00      	cmp	r2, #0
   27cf2:	d1f7      	bne.n	27ce4 <att_rsp_sent+0x12>
   27cf4:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   27cf8:	4620      	mov	r0, r4
}
   27cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   27cfe:	f7ef bba1 	b.w	17444 <tx_meta_data_free>

00027d02 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27d06:	4688      	mov	r8, r1
   27d08:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27d0a:	2101      	movs	r1, #1
   27d0c:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27d0e:	4605      	mov	r5, r0
   27d10:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27d12:	f7ef fd7f 	bl	17814 <bt_att_chan_create_pdu>
	if (!buf) {
   27d16:	4604      	mov	r4, r0
   27d18:	b170      	cbz	r0, 27d38 <send_err_rsp.part.0+0x36>
   27d1a:	2104      	movs	r1, #4
   27d1c:	3008      	adds	r0, #8
   27d1e:	f7f3 fff9 	bl	1bd14 <net_buf_simple_add>
	rsp->request = req;
   27d22:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   27d26:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   27d2a:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   27d2c:	4621      	mov	r1, r4
   27d2e:	4628      	mov	r0, r5
}
   27d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   27d34:	f7ff bda4 	b.w	27880 <bt_att_chan_send_rsp>
}
   27d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027d3c <att_write_req>:
{
   27d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27d3e:	460c      	mov	r4, r1
   27d40:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   27d42:	f101 0008 	add.w	r0, r1, #8
   27d46:	f000 febc 	bl	28ac2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   27d4a:	89a2      	ldrh	r2, [r4, #12]
   27d4c:	9201      	str	r2, [sp, #4]
   27d4e:	68a2      	ldr	r2, [r4, #8]
   27d50:	9200      	str	r2, [sp, #0]
   27d52:	4603      	mov	r3, r0
   27d54:	2213      	movs	r2, #19
   27d56:	2112      	movs	r1, #18
   27d58:	4628      	mov	r0, r5
   27d5a:	f7ef fe21 	bl	179a0 <att_write_rsp.constprop.0>
}
   27d5e:	b003      	add	sp, #12
   27d60:	bd30      	pop	{r4, r5, pc}

00027d62 <att_write_cmd>:
{
   27d62:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27d64:	460c      	mov	r4, r1
   27d66:	4605      	mov	r5, r0
   27d68:	f101 0008 	add.w	r0, r1, #8
   27d6c:	f000 fea9 	bl	28ac2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   27d70:	89a2      	ldrh	r2, [r4, #12]
   27d72:	9201      	str	r2, [sp, #4]
   27d74:	68a2      	ldr	r2, [r4, #8]
   27d76:	9200      	str	r2, [sp, #0]
   27d78:	2200      	movs	r2, #0
   27d7a:	4603      	mov	r3, r0
   27d7c:	4611      	mov	r1, r2
   27d7e:	4628      	mov	r0, r5
   27d80:	f7ef fe0e 	bl	179a0 <att_write_rsp.constprop.0>
}
   27d84:	b003      	add	sp, #12
   27d86:	bd30      	pop	{r4, r5, pc}

00027d88 <att_read_blob_req>:
{
   27d88:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   27d8a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   27d8c:	8813      	ldrh	r3, [r2, #0]
   27d8e:	8852      	ldrh	r2, [r2, #2]
   27d90:	9200      	str	r2, [sp, #0]
   27d92:	210c      	movs	r1, #12
   27d94:	220d      	movs	r2, #13
   27d96:	f7ef ffbb 	bl	17d10 <att_read_rsp>
}
   27d9a:	b003      	add	sp, #12
   27d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00027da0 <att_read_req>:
{
   27da0:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   27da2:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   27da4:	2200      	movs	r2, #0
   27da6:	881b      	ldrh	r3, [r3, #0]
   27da8:	9200      	str	r2, [sp, #0]
   27daa:	210a      	movs	r1, #10
   27dac:	220b      	movs	r2, #11
   27dae:	f7ef ffaf 	bl	17d10 <att_read_rsp>
}
   27db2:	b003      	add	sp, #12
   27db4:	f85d fb04 	ldr.w	pc, [sp], #4

00027db8 <att_mtu_req>:
{
   27db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27dba:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   27dbc:	f850 2b98 	ldr.w	r2, [r0], #152
{
   27dc0:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   27dc2:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   27dc4:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   27dc6:	f7ff fc6d 	bl	276a4 <atomic_test_bit>
   27dca:	4604      	mov	r4, r0
   27dcc:	b9f0      	cbnz	r0, 27e0c <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   27dce:	689b      	ldr	r3, [r3, #8]
   27dd0:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   27dd2:	2e16      	cmp	r6, #22
   27dd4:	d91c      	bls.n	27e10 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   27dd6:	4638      	mov	r0, r7
   27dd8:	2202      	movs	r2, #2
   27dda:	f7ef fe45 	bl	17a68 <bt_att_create_pdu>
	if (!pdu) {
   27dde:	4607      	mov	r7, r0
   27de0:	b1c0      	cbz	r0, 27e14 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   27de2:	2102      	movs	r1, #2
   27de4:	3008      	adds	r0, #8
   27de6:	f7f3 ff95 	bl	1bd14 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   27dea:	2341      	movs	r3, #65	; 0x41
   27dec:	7003      	strb	r3, [r0, #0]
   27dee:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   27df0:	4639      	mov	r1, r7
   27df2:	4628      	mov	r0, r5
   27df4:	f7ff fd44 	bl	27880 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   27df8:	2e41      	cmp	r6, #65	; 0x41
   27dfa:	bf28      	it	cs
   27dfc:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   27dfe:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   27e00:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   27e02:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   27e04:	f7ff fcdf 	bl	277c6 <att_chan_mtu_updated>
	return 0;
   27e08:	4620      	mov	r0, r4
}
   27e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   27e0c:	2006      	movs	r0, #6
   27e0e:	e7fc      	b.n	27e0a <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   27e10:	2004      	movs	r0, #4
   27e12:	e7fa      	b.n	27e0a <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   27e14:	200e      	movs	r0, #14
   27e16:	e7f8      	b.n	27e0a <att_mtu_req+0x52>

00027e18 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   27e18:	898a      	ldrh	r2, [r1, #12]
   27e1a:	6889      	ldr	r1, [r1, #8]
   27e1c:	2300      	movs	r3, #0
   27e1e:	f7f0 b923 	b.w	18068 <att_handle_rsp>

00027e22 <bt_att_encrypt_change>:
{
   27e22:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   27e24:	4606      	mov	r6, r0
	if (!att_chan->att) {
   27e26:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   27e2a:	f856 5904 	ldr.w	r5, [r6], #-4
{
   27e2e:	4604      	mov	r4, r0
	if (!att_chan->att) {
   27e30:	2b00      	cmp	r3, #0
   27e32:	d038      	beq.n	27ea6 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   27e34:	b141      	cbz	r1, 27e48 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   27e36:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   27e3a:	2b00      	cmp	r3, #0
   27e3c:	d033      	beq.n	27ea6 <bt_att_encrypt_change+0x84>
   27e3e:	7c1b      	ldrb	r3, [r3, #16]
   27e40:	07da      	lsls	r2, r3, #31
   27e42:	d530      	bpl.n	27ea6 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   27e44:	2305      	movs	r3, #5
   27e46:	e021      	b.n	27e8c <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   27e48:	4628      	mov	r0, r5
   27e4a:	f7f1 fd3f 	bl	198cc <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   27e4e:	7a6b      	ldrb	r3, [r5, #9]
   27e50:	2b01      	cmp	r3, #1
   27e52:	d028      	beq.n	27ea6 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   27e54:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   27e58:	b32d      	cbz	r5, 27ea6 <bt_att_encrypt_change+0x84>
   27e5a:	7c2b      	ldrb	r3, [r5, #16]
   27e5c:	07db      	lsls	r3, r3, #31
   27e5e:	d522      	bpl.n	27ea6 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   27e60:	68eb      	ldr	r3, [r5, #12]
   27e62:	2b00      	cmp	r3, #0
   27e64:	d0ee      	beq.n	27e44 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   27e66:	696a      	ldr	r2, [r5, #20]
   27e68:	7c69      	ldrb	r1, [r5, #17]
   27e6a:	4630      	mov	r0, r6
   27e6c:	f7ef fcd2 	bl	17814 <bt_att_chan_create_pdu>
	if (!buf) {
   27e70:	4604      	mov	r4, r0
   27e72:	b150      	cbz	r0, 27e8a <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   27e74:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   27e78:	68eb      	ldr	r3, [r5, #12]
   27e7a:	4798      	blx	r3
   27e7c:	b168      	cbz	r0, 27e9a <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   27e7e:	6960      	ldr	r0, [r4, #20]
   27e80:	f7ef fae0 	bl	17444 <tx_meta_data_free>
		net_buf_unref(buf);
   27e84:	4620      	mov	r0, r4
   27e86:	f7f3 fe3f 	bl	1bb08 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   27e8a:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   27e8c:	2200      	movs	r2, #0
   27e8e:	4630      	mov	r0, r6
   27e90:	4611      	mov	r1, r2
}
   27e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   27e96:	f7f0 b8e7 	b.w	18068 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   27e9a:	4621      	mov	r1, r4
   27e9c:	4630      	mov	r0, r6
   27e9e:	f7ef faed 	bl	1747c <chan_send>
   27ea2:	2800      	cmp	r0, #0
   27ea4:	d1eb      	bne.n	27e7e <bt_att_encrypt_change+0x5c>
}
   27ea6:	bd70      	pop	{r4, r5, r6, pc}

00027ea8 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   27ea8:	2001      	movs	r0, #1
   27eaa:	4770      	bx	lr

00027eac <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   27eac:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   27eae:	f7ef f9ed 	bl	1728c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   27eb2:	b198      	cbz	r0, 27edc <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   27eb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   27eb6:	b18b      	cbz	r3, 27edc <bt_att_clear_out_of_sync_sent+0x30>
   27eb8:	f3bf 8f5b 	dmb	ish
   27ebc:	3bf0      	subs	r3, #240	; 0xf0
   27ebe:	f103 0298 	add.w	r2, r3, #152	; 0x98
   27ec2:	e852 0f00 	ldrex	r0, [r2]
   27ec6:	f020 0020 	bic.w	r0, r0, #32
   27eca:	e842 0100 	strex	r1, r0, [r2]
   27ece:	2900      	cmp	r1, #0
   27ed0:	d1f7      	bne.n	27ec2 <bt_att_clear_out_of_sync_sent+0x16>
   27ed2:	f3bf 8f5b 	dmb	ish
	return node->next;
   27ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   27eda:	e7ec      	b.n	27eb6 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   27edc:	bd08      	pop	{r3, pc}

00027ede <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   27ede:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   27ee0:	2104      	movs	r1, #4
   27ee2:	f7ff fbb0 	bl	27646 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   27ee6:	b128      	cbz	r0, 27ef4 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   27ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   27eec:	2105      	movs	r1, #5
   27eee:	3094      	adds	r0, #148	; 0x94
   27ef0:	f7ff bbd8 	b.w	276a4 <atomic_test_bit>
}
   27ef4:	bd08      	pop	{r3, pc}

00027ef6 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   27ef6:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   27ef8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   27efc:	2201      	movs	r2, #1
   27efe:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   27f00:	7403      	strb	r3, [r0, #16]
}
   27f02:	4770      	bx	lr

00027f04 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   27f04:	6010      	str	r0, [r2, #0]
}
   27f06:	2000      	movs	r0, #0
   27f08:	4770      	bx	lr

00027f0a <gatt_ccc_changed>:
{
   27f0a:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   27f0c:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   27f0e:	895a      	ldrh	r2, [r3, #10]
   27f10:	428a      	cmp	r2, r1
   27f12:	d003      	beq.n	27f1c <gatt_ccc_changed+0x12>
		ccc->value = value;
   27f14:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   27f16:	68db      	ldr	r3, [r3, #12]
   27f18:	b103      	cbz	r3, 27f1c <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   27f1a:	4718      	bx	r3
}
   27f1c:	4770      	bx	lr

00027f1e <gatt_indicate_rsp>:
{
   27f1e:	b510      	push	{r4, lr}
   27f20:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   27f22:	68a3      	ldr	r3, [r4, #8]
{
   27f24:	460a      	mov	r2, r1
	if (params->func) {
   27f26:	b10b      	cbz	r3, 27f2c <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   27f28:	4621      	mov	r1, r4
   27f2a:	4798      	blx	r3
	params->_ref--;
   27f2c:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   27f2e:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   27f30:	3b01      	subs	r3, #1
   27f32:	b2db      	uxtb	r3, r3
   27f34:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   27f36:	b122      	cbz	r2, 27f42 <gatt_indicate_rsp+0x24>
   27f38:	b91b      	cbnz	r3, 27f42 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   27f3a:	4620      	mov	r0, r4
}
   27f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   27f40:	4710      	bx	r2
}
   27f42:	bd10      	pop	{r4, pc}

00027f44 <match_uuid>:
	data->attr = attr;
   27f44:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   27f46:	8091      	strh	r1, [r2, #4]
}
   27f48:	2000      	movs	r0, #0
   27f4a:	4770      	bx	lr

00027f4c <ccc_set_cb>:
}
   27f4c:	2000      	movs	r0, #0
   27f4e:	4770      	bx	lr

00027f50 <gen_hash_m>:
{
   27f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   27f52:	6807      	ldr	r7, [r0, #0]
   27f54:	783d      	ldrb	r5, [r7, #0]
{
   27f56:	b089      	sub	sp, #36	; 0x24
   27f58:	4606      	mov	r6, r0
   27f5a:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   27f5c:	b9dd      	cbnz	r5, 27f96 <gen_hash_m+0x46>
	switch (u16->val) {
   27f5e:	887b      	ldrh	r3, [r7, #2]
   27f60:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   27f64:	d004      	beq.n	27f70 <gen_hash_m+0x20>
   27f66:	d810      	bhi.n	27f8a <gen_hash_m+0x3a>
   27f68:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   27f6c:	2b03      	cmp	r3, #3
   27f6e:	d812      	bhi.n	27f96 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   27f70:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27f74:	2202      	movs	r2, #2
   27f76:	f10d 010a 	add.w	r1, sp, #10
   27f7a:	4620      	mov	r0, r4
   27f7c:	f7fe fcf4 	bl	26968 <tc_cmac_update>
   27f80:	b968      	cbnz	r0, 27f9e <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   27f82:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   27f86:	65a2      	str	r2, [r4, #88]	; 0x58
   27f88:	e006      	b.n	27f98 <gen_hash_m+0x48>
	switch (u16->val) {
   27f8a:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   27f8e:	33ff      	adds	r3, #255	; 0xff
   27f90:	b29b      	uxth	r3, r3
   27f92:	2b04      	cmp	r3, #4
   27f94:	d91e      	bls.n	27fd4 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   27f96:	2501      	movs	r5, #1
}
   27f98:	4628      	mov	r0, r5
   27f9a:	b009      	add	sp, #36	; 0x24
   27f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   27f9e:	887b      	ldrh	r3, [r7, #2]
   27fa0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27fa4:	2202      	movs	r2, #2
   27fa6:	f10d 010a 	add.w	r1, sp, #10
   27faa:	4620      	mov	r0, r4
   27fac:	f7fe fcdc 	bl	26968 <tc_cmac_update>
   27fb0:	2800      	cmp	r0, #0
   27fb2:	d0e6      	beq.n	27f82 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   27fb4:	2000      	movs	r0, #0
   27fb6:	9000      	str	r0, [sp, #0]
   27fb8:	aa03      	add	r2, sp, #12
   27fba:	6877      	ldr	r7, [r6, #4]
   27fbc:	2313      	movs	r3, #19
   27fbe:	4631      	mov	r1, r6
   27fc0:	47b8      	blx	r7
		if (len < 0) {
   27fc2:	1e02      	subs	r2, r0, #0
   27fc4:	dbdf      	blt.n	27f86 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   27fc6:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27fc8:	4620      	mov	r0, r4
   27fca:	f7fe fccd 	bl	26968 <tc_cmac_update>
   27fce:	2800      	cmp	r0, #0
   27fd0:	d1e1      	bne.n	27f96 <gen_hash_m+0x46>
   27fd2:	e7d6      	b.n	27f82 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   27fd4:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27fd8:	2202      	movs	r2, #2
   27fda:	f10d 010a 	add.w	r1, sp, #10
   27fde:	4620      	mov	r0, r4
   27fe0:	f7fe fcc2 	bl	26968 <tc_cmac_update>
   27fe4:	2800      	cmp	r0, #0
   27fe6:	d0cc      	beq.n	27f82 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   27fe8:	887b      	ldrh	r3, [r7, #2]
   27fea:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27fee:	2202      	movs	r2, #2
   27ff0:	f10d 010a 	add.w	r1, sp, #10
   27ff4:	e7e8      	b.n	27fc8 <gen_hash_m+0x78>

00027ff6 <bt_addr_le_eq>:
{
   27ff6:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   27ff8:	2207      	movs	r2, #7
   27ffa:	f7fe fe18 	bl	26c2e <memcmp>
}
   27ffe:	fab0 f080 	clz	r0, r0
   28002:	0940      	lsrs	r0, r0, #5
   28004:	bd08      	pop	{r3, pc}

00028006 <ccc_find_cfg>:
{
   28006:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   28008:	7803      	ldrb	r3, [r0, #0]
   2800a:	4293      	cmp	r3, r2
{
   2800c:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2800e:	d105      	bne.n	2801c <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   28010:	3001      	adds	r0, #1
   28012:	f7ff fff0 	bl	27ff6 <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   28016:	b108      	cbz	r0, 2801c <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   28018:	4620      	mov	r0, r4
}
   2801a:	bd10      	pop	{r4, pc}
	return NULL;
   2801c:	2000      	movs	r0, #0
   2801e:	e7fc      	b.n	2801a <ccc_find_cfg+0x14>

00028020 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28020:	f3bf 8f5b 	dmb	ish
   28024:	6800      	ldr	r0, [r0, #0]
   28026:	f3bf 8f5b 	dmb	ish
}
   2802a:	4770      	bx	lr

0002802c <atomic_or>:
{
   2802c:	b510      	push	{r4, lr}
   2802e:	4603      	mov	r3, r0
}
   28030:	f3bf 8f5b 	dmb	ish
   28034:	e853 0f00 	ldrex	r0, [r3]
   28038:	ea40 0201 	orr.w	r2, r0, r1
   2803c:	e843 2400 	strex	r4, r2, [r3]
   28040:	2c00      	cmp	r4, #0
   28042:	d1f7      	bne.n	28034 <atomic_or+0x8>
   28044:	f3bf 8f5b 	dmb	ish
   28048:	bd10      	pop	{r4, pc}

0002804a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2804a:	2207      	movs	r2, #7
   2804c:	f7fe be16 	b.w	26c7c <memcpy>

00028050 <atomic_and>:
{
   28050:	b510      	push	{r4, lr}
   28052:	4603      	mov	r3, r0
}
   28054:	f3bf 8f5b 	dmb	ish
   28058:	e853 0f00 	ldrex	r0, [r3]
   2805c:	ea00 0201 	and.w	r2, r0, r1
   28060:	e843 2400 	strex	r4, r2, [r3]
   28064:	2c00      	cmp	r4, #0
   28066:	d1f7      	bne.n	28058 <atomic_and+0x8>
   28068:	f3bf 8f5b 	dmb	ish
   2806c:	bd10      	pop	{r4, pc}

0002806e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2806e:	2a02      	cmp	r2, #2
{
   28070:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   28072:	d108      	bne.n	28086 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   28074:	2300      	movs	r3, #0
   28076:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2807a:	461a      	mov	r2, r3
   2807c:	7a00      	ldrb	r0, [r0, #8]
   2807e:	f7f0 fa95 	bl	185ac <sc_save>
}
   28082:	2002      	movs	r0, #2
   28084:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   28086:	f7f0 fc29 	bl	188dc <sc_clear>
   2808a:	e7fa      	b.n	28082 <sc_ccc_cfg_write+0x14>

0002808c <read_appearance>:
{
   2808c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2808e:	4615      	mov	r5, r2
   28090:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   28094:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   28096:	f7fe ff99 	bl	26fcc <bt_get_appearance>
	if (offset > value_len) {
   2809a:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2809c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   280a0:	d80e      	bhi.n	280c0 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   280a2:	f1c6 0402 	rsb	r4, r6, #2
   280a6:	42bc      	cmp	r4, r7
   280a8:	bfa8      	it	ge
   280aa:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   280ac:	f10d 0306 	add.w	r3, sp, #6
   280b0:	4622      	mov	r2, r4
   280b2:	1999      	adds	r1, r3, r6
   280b4:	4628      	mov	r0, r5
   280b6:	f7fe fde1 	bl	26c7c <memcpy>
}
   280ba:	4620      	mov	r0, r4
   280bc:	b003      	add	sp, #12
   280be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   280c0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   280c4:	e7f9      	b.n	280ba <read_appearance+0x2e>

000280c6 <read_name>:
{
   280c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   280ca:	4698      	mov	r8, r3
   280cc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   280d0:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   280d2:	f7ed f857 	bl	15184 <bt_get_name>
   280d6:	4607      	mov	r7, r0
				 strlen(name));
   280d8:	f7fe fd79 	bl	26bce <strlen>
	if (offset > value_len) {
   280dc:	b283      	uxth	r3, r0
   280de:	42b3      	cmp	r3, r6
   280e0:	d30c      	bcc.n	280fc <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   280e2:	1b9c      	subs	r4, r3, r6
   280e4:	4544      	cmp	r4, r8
   280e6:	bfa8      	it	ge
   280e8:	4644      	movge	r4, r8
   280ea:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   280ec:	4622      	mov	r2, r4
   280ee:	19b9      	adds	r1, r7, r6
   280f0:	4628      	mov	r0, r5
   280f2:	f7fe fdc3 	bl	26c7c <memcpy>
}
   280f6:	4620      	mov	r0, r4
   280f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   280fc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   28100:	e7f9      	b.n	280f6 <read_name+0x30>

00028102 <cf_read>:
{
   28102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28104:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   28106:	2300      	movs	r3, #0
{
   28108:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2810c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   28110:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   28112:	f7f0 f90d 	bl	18330 <find_cf_cfg>
	if (cfg) {
   28116:	b128      	cbz	r0, 28124 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   28118:	f100 0108 	add.w	r1, r0, #8
   2811c:	2201      	movs	r2, #1
   2811e:	a801      	add	r0, sp, #4
   28120:	f7fe fdac 	bl	26c7c <memcpy>
	if (offset > value_len) {
   28124:	2e01      	cmp	r6, #1
   28126:	d80d      	bhi.n	28144 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   28128:	f1c6 0401 	rsb	r4, r6, #1
   2812c:	42bc      	cmp	r4, r7
   2812e:	bfa8      	it	ge
   28130:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28132:	ab01      	add	r3, sp, #4
   28134:	4622      	mov	r2, r4
   28136:	1999      	adds	r1, r3, r6
   28138:	4628      	mov	r0, r5
   2813a:	f7fe fd9f 	bl	26c7c <memcpy>
}
   2813e:	4620      	mov	r0, r4
   28140:	b003      	add	sp, #12
   28142:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28144:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   28148:	e7f9      	b.n	2813e <cf_read+0x3c>

0002814a <bt_gatt_attr_read_service>:
{
   2814a:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   2814c:	68c9      	ldr	r1, [r1, #12]
{
   2814e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   28150:	780a      	ldrb	r2, [r1, #0]
{
   28152:	461c      	mov	r4, r3
   28154:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   28158:	b992      	cbnz	r2, 28180 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2815a:	884a      	ldrh	r2, [r1, #2]
   2815c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   28160:	2b02      	cmp	r3, #2
   28162:	d818      	bhi.n	28196 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   28164:	f1c3 0202 	rsb	r2, r3, #2
   28168:	4294      	cmp	r4, r2
   2816a:	bfa8      	it	ge
   2816c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2816e:	4622      	mov	r2, r4
   28170:	f10d 0106 	add.w	r1, sp, #6
   28174:	4419      	add	r1, r3
   28176:	f7fe fd81 	bl	26c7c <memcpy>
}
   2817a:	4620      	mov	r0, r4
   2817c:	b002      	add	sp, #8
   2817e:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   28180:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   28182:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   28186:	d806      	bhi.n	28196 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   28188:	f1c3 0210 	rsb	r2, r3, #16
   2818c:	4294      	cmp	r4, r2
   2818e:	bfa8      	it	ge
   28190:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   28192:	4622      	mov	r2, r4
   28194:	e7ee      	b.n	28174 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28196:	f06f 0406 	mvn.w	r4, #6
   2819a:	e7ee      	b.n	2817a <bt_gatt_attr_read_service+0x30>

0002819c <bt_gatt_attr_read_ccc>:
{
   2819c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2819e:	68c9      	ldr	r1, [r1, #12]
{
   281a0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   281a4:	4615      	mov	r5, r2
   281a6:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   281a8:	f7f0 f912 	bl	183d0 <find_ccc_cfg>
	if (cfg) {
   281ac:	b100      	cbz	r0, 281b0 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   281ae:	8900      	ldrh	r0, [r0, #8]
   281b0:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   281b4:	2e02      	cmp	r6, #2
   281b6:	d80e      	bhi.n	281d6 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   281b8:	f1c6 0402 	rsb	r4, r6, #2
   281bc:	42bc      	cmp	r4, r7
   281be:	bfa8      	it	ge
   281c0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   281c2:	f10d 0306 	add.w	r3, sp, #6
   281c6:	4622      	mov	r2, r4
   281c8:	1999      	adds	r1, r3, r6
   281ca:	4628      	mov	r0, r5
   281cc:	f7fe fd56 	bl	26c7c <memcpy>
}
   281d0:	4620      	mov	r0, r4
   281d2:	b003      	add	sp, #12
   281d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   281d6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   281da:	e7f9      	b.n	281d0 <bt_gatt_attr_read_ccc+0x34>

000281dc <sc_restore_rsp>:
{
   281dc:	b538      	push	{r3, r4, r5, lr}
   281de:	4604      	mov	r4, r0
   281e0:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   281e2:	f7ff fe61 	bl	27ea8 <bt_att_fixed_chan_only>
   281e6:	b150      	cbz	r0, 281fe <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   281e8:	4620      	mov	r0, r4
   281ea:	f7f0 f8a1 	bl	18330 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   281ee:	b130      	cbz	r0, 281fe <sc_restore_rsp+0x22>
   281f0:	7a03      	ldrb	r3, [r0, #8]
   281f2:	07db      	lsls	r3, r3, #31
   281f4:	d503      	bpl.n	281fe <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   281f6:	2101      	movs	r1, #1
   281f8:	300c      	adds	r0, #12
   281fa:	f7ff ff17 	bl	2802c <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   281fe:	b985      	cbnz	r5, 28222 <sc_restore_rsp+0x46>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   28200:	7a20      	ldrb	r0, [r4, #8]
   28202:	f104 0190 	add.w	r1, r4, #144	; 0x90
   28206:	f7f0 f8c1 	bl	1838c <find_sc_cfg>
		if (sc_cfg) {
   2820a:	4604      	mov	r4, r0
   2820c:	b148      	cbz	r0, 28222 <sc_restore_rsp+0x46>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2820e:	4629      	mov	r1, r5
   28210:	2204      	movs	r2, #4
   28212:	3008      	adds	r0, #8
   28214:	f7fe fd3d 	bl	26c92 <memset>
		sc_store(cfg);
   28218:	4620      	mov	r0, r4
}
   2821a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2821e:	f7f0 b99d 	b.w	1855c <sc_store>
}
   28222:	bd38      	pop	{r3, r4, r5, pc}

00028224 <bt_gatt_attr_read>:
{
   28224:	b510      	push	{r4, lr}
   28226:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2822a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2822e:	42a1      	cmp	r1, r4
{
   28230:	4610      	mov	r0, r2
	if (offset > value_len) {
   28232:	d80b      	bhi.n	2824c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   28234:	1a64      	subs	r4, r4, r1
   28236:	429c      	cmp	r4, r3
   28238:	bfa8      	it	ge
   2823a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2823c:	9b03      	ldr	r3, [sp, #12]
   2823e:	b2a4      	uxth	r4, r4
   28240:	4622      	mov	r2, r4
   28242:	4419      	add	r1, r3
   28244:	f7fe fd1a 	bl	26c7c <memcpy>
}
   28248:	4620      	mov	r0, r4
   2824a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2824c:	f06f 0406 	mvn.w	r4, #6
   28250:	e7fa      	b.n	28248 <bt_gatt_attr_read+0x24>

00028252 <bt_gatt_attr_value_handle>:
{
   28252:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28254:	4604      	mov	r4, r0
   28256:	b910      	cbnz	r0, 2825e <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   28258:	2000      	movs	r0, #0
}
   2825a:	b002      	add	sp, #8
   2825c:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2825e:	2300      	movs	r3, #0
   28260:	f88d 3004 	strb.w	r3, [sp, #4]
   28264:	6800      	ldr	r0, [r0, #0]
   28266:	f642 0303 	movw	r3, #10243	; 0x2803
   2826a:	a901      	add	r1, sp, #4
   2826c:	f8ad 3006 	strh.w	r3, [sp, #6]
   28270:	f7fe fd77 	bl	26d62 <bt_uuid_cmp>
   28274:	2800      	cmp	r0, #0
   28276:	d1ef      	bne.n	28258 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   28278:	68e3      	ldr	r3, [r4, #12]
   2827a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2827c:	2800      	cmp	r0, #0
   2827e:	d1ec      	bne.n	2825a <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   28280:	4620      	mov	r0, r4
   28282:	f7f0 fced 	bl	18c60 <bt_gatt_attr_get_handle>
   28286:	3001      	adds	r0, #1
   28288:	b280      	uxth	r0, r0
	return handle;
   2828a:	e7e6      	b.n	2825a <bt_gatt_attr_value_handle+0x8>

0002828c <bt_gatt_attr_read_chrc>:
{
   2828c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2828e:	68cc      	ldr	r4, [r1, #12]
{
   28290:	b087      	sub	sp, #28
   28292:	4608      	mov	r0, r1
   28294:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   28296:	79a3      	ldrb	r3, [r4, #6]
   28298:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2829c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   282a0:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   282a2:	f7ff ffd6 	bl	28252 <bt_gatt_attr_value_handle>
   282a6:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   282aa:	6821      	ldr	r1, [r4, #0]
   282ac:	780b      	ldrb	r3, [r1, #0]
   282ae:	b99b      	cbnz	r3, 282d8 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   282b0:	884b      	ldrh	r3, [r1, #2]
   282b2:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   282b6:	2405      	movs	r4, #5
	if (offset > value_len) {
   282b8:	42b4      	cmp	r4, r6
   282ba:	d315      	bcc.n	282e8 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   282bc:	1ba4      	subs	r4, r4, r6
   282be:	42bc      	cmp	r4, r7
   282c0:	bfa8      	it	ge
   282c2:	463c      	movge	r4, r7
   282c4:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   282c6:	ab01      	add	r3, sp, #4
   282c8:	4622      	mov	r2, r4
   282ca:	1999      	adds	r1, r3, r6
   282cc:	4628      	mov	r0, r5
   282ce:	f7fe fcd5 	bl	26c7c <memcpy>
}
   282d2:	4620      	mov	r0, r4
   282d4:	b007      	add	sp, #28
   282d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   282d8:	2210      	movs	r2, #16
   282da:	3101      	adds	r1, #1
   282dc:	f10d 0007 	add.w	r0, sp, #7
   282e0:	f7fe fccc 	bl	26c7c <memcpy>
		value_len += 16U;
   282e4:	2413      	movs	r4, #19
   282e6:	e7e7      	b.n	282b8 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   282e8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   282ec:	e7f1      	b.n	282d2 <bt_gatt_attr_read_chrc+0x46>

000282ee <bt_gatt_foreach_attr>:
{
   282ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   282f0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   282f4:	2300      	movs	r3, #0
   282f6:	9300      	str	r3, [sp, #0]
   282f8:	461a      	mov	r2, r3
   282fa:	f7f0 fcf1 	bl	18ce0 <bt_gatt_foreach_attr_type>
}
   282fe:	b005      	add	sp, #20
   28300:	f85d fb04 	ldr.w	pc, [sp], #4

00028304 <bt_gatt_check_perm>:
{
   28304:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   28306:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28308:	8a4b      	ldrh	r3, [r1, #18]
{
   2830a:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   2830c:	d504      	bpl.n	28318 <bt_gatt_check_perm+0x14>
   2830e:	f013 0f95 	tst.w	r3, #149	; 0x95
   28312:	d027      	beq.n	28364 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28314:	6848      	ldr	r0, [r1, #4]
   28316:	b328      	cbz	r0, 28364 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   28318:	0790      	lsls	r0, r2, #30
   2831a:	d504      	bpl.n	28326 <bt_gatt_check_perm+0x22>
   2831c:	f413 7f95 	tst.w	r3, #298	; 0x12a
   28320:	d022      	beq.n	28368 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   28322:	6889      	ldr	r1, [r1, #8]
   28324:	b301      	cbz	r1, 28368 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   28326:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2832a:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2832e:	d007      	beq.n	28340 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   28330:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   28334:	b90b      	cbnz	r3, 2833a <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   28336:	2005      	movs	r0, #5
}
   28338:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2833a:	7b5b      	ldrb	r3, [r3, #13]
   2833c:	06db      	lsls	r3, r3, #27
   2833e:	d5fa      	bpl.n	28336 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   28340:	f014 0f30 	tst.w	r4, #48	; 0x30
   28344:	d108      	bne.n	28358 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   28346:	f014 000c 	ands.w	r0, r4, #12
   2834a:	d0f5      	beq.n	28338 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   2834c:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2834e:	2b00      	cmp	r3, #0
   28350:	bf14      	ite	ne
   28352:	2000      	movne	r0, #0
   28354:	200f      	moveq	r0, #15
   28356:	e7ef      	b.n	28338 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   28358:	4628      	mov	r0, r5
   2835a:	f7ff f8b6 	bl	274ca <bt_conn_get_security>
   2835e:	2802      	cmp	r0, #2
   28360:	d8f1      	bhi.n	28346 <bt_gatt_check_perm+0x42>
   28362:	e7e8      	b.n	28336 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   28364:	2002      	movs	r0, #2
   28366:	e7e7      	b.n	28338 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   28368:	2003      	movs	r0, #3
   2836a:	e7e5      	b.n	28338 <bt_gatt_check_perm+0x34>

0002836c <bt_gatt_change_aware>:
{
   2836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2836e:	4605      	mov	r5, r0
   28370:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   28372:	f7ef ffdd 	bl	18330 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28376:	b1d0      	cbz	r0, 283ae <bt_gatt_change_aware+0x42>
   28378:	7a03      	ldrb	r3, [r0, #8]
   2837a:	07db      	lsls	r3, r3, #31
   2837c:	d517      	bpl.n	283ae <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2837e:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28382:	4620      	mov	r0, r4
   28384:	f7ff fe4c 	bl	28020 <atomic_get>
   28388:	f010 0601 	ands.w	r6, r0, #1
   2838c:	d10f      	bne.n	283ae <bt_gatt_change_aware+0x42>
	if (!req) {
   2838e:	b17f      	cbz	r7, 283b0 <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28390:	f06f 0102 	mvn.w	r1, #2
   28394:	4620      	mov	r0, r4
   28396:	f7ff fe5b 	bl	28050 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2839a:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2839e:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   283a0:	d008      	beq.n	283b4 <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   283a2:	f7ff fd83 	bl	27eac <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   283a6:	2101      	movs	r1, #1
   283a8:	4620      	mov	r0, r4
   283aa:	f7ff fe3f 	bl	2802c <atomic_or>
		return true;
   283ae:	2601      	movs	r6, #1
}
   283b0:	4630      	mov	r0, r6
   283b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   283b4:	f7ff fd78 	bl	27ea8 <bt_att_fixed_chan_only>
   283b8:	2800      	cmp	r0, #0
   283ba:	d0f9      	beq.n	283b0 <bt_gatt_change_aware+0x44>
   283bc:	4628      	mov	r0, r5
   283be:	f7ff fd8e 	bl	27ede <bt_att_out_of_sync_sent_on_fixed>
   283c2:	2800      	cmp	r0, #0
   283c4:	d0f4      	beq.n	283b0 <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   283c6:	f06f 0102 	mvn.w	r1, #2
   283ca:	4620      	mov	r0, r4
   283cc:	f7ff fe40 	bl	28050 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   283d0:	4628      	mov	r0, r5
   283d2:	e7e6      	b.n	283a2 <bt_gatt_change_aware+0x36>

000283d4 <ccc_delayed_store>:
{
   283d4:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   283d6:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   283da:	4605      	mov	r5, r0
		if (!conn) {
   283dc:	b184      	cbz	r4, 28400 <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   283de:	f104 0690 	add.w	r6, r4, #144	; 0x90
   283e2:	7a20      	ldrb	r0, [r4, #8]
   283e4:	4631      	mov	r1, r6
   283e6:	f7fe fdf3 	bl	26fd0 <bt_addr_le_is_bonded>
   283ea:	b148      	cbz	r0, 28400 <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   283ec:	2300      	movs	r3, #0
   283ee:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   283f2:	7a20      	ldrb	r0, [r4, #8]
   283f4:	4631      	mov	r1, r6
   283f6:	f7f1 fa79 	bl	198ec <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   283fa:	4620      	mov	r0, r4
   283fc:	f7ee f950 	bl	166a0 <bt_conn_unref>
}
   28400:	bd70      	pop	{r4, r5, r6, pc}

00028402 <smp_pairing_rsp>:
}
   28402:	2007      	movs	r0, #7
   28404:	4770      	bx	lr

00028406 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28406:	f3bf 8f5b 	dmb	ish
   2840a:	6800      	ldr	r0, [r0, #0]
   2840c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28410:	4108      	asrs	r0, r1
}
   28412:	f000 0001 	and.w	r0, r0, #1
   28416:	4770      	bx	lr

00028418 <update_keys_check>:
{
   28418:	b510      	push	{r4, lr}
   2841a:	4603      	mov	r3, r0
	if (!keys ||
   2841c:	b1d9      	cbz	r1, 28456 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2841e:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   28420:	f010 0f24 	tst.w	r0, #36	; 0x24
   28424:	d017      	beq.n	28456 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   28426:	7d1a      	ldrb	r2, [r3, #20]
   28428:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2842a:	7b09      	ldrb	r1, [r1, #12]
   2842c:	42a2      	cmp	r2, r4
   2842e:	bf28      	it	cs
   28430:	4622      	movcs	r2, r4
   28432:	4291      	cmp	r1, r2
   28434:	d901      	bls.n	2843a <update_keys_check+0x22>
			return false;
   28436:	2000      	movs	r0, #0
}
   28438:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2843a:	0682      	lsls	r2, r0, #26
   2843c:	d404      	bmi.n	28448 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2843e:	7a18      	ldrb	r0, [r3, #8]
   28440:	3800      	subs	r0, #0
   28442:	bf18      	it	ne
   28444:	2001      	movne	r0, #1
   28446:	e7f7      	b.n	28438 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   28448:	2105      	movs	r1, #5
   2844a:	1d18      	adds	r0, r3, #4
   2844c:	f7ff ffdb 	bl	28406 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   28450:	2800      	cmp	r0, #0
   28452:	d1f4      	bne.n	2843e <update_keys_check+0x26>
   28454:	e7ef      	b.n	28436 <update_keys_check+0x1e>
	return true;
   28456:	2001      	movs	r0, #1
   28458:	e7ee      	b.n	28438 <update_keys_check+0x20>

0002845a <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2845a:	2301      	movs	r3, #1
   2845c:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2845e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28460:	f3bf 8f5b 	dmb	ish
   28464:	e850 2f00 	ldrex	r2, [r0]
   28468:	401a      	ands	r2, r3
   2846a:	e840 2100 	strex	r1, r2, [r0]
   2846e:	2900      	cmp	r1, #0
   28470:	d1f8      	bne.n	28464 <atomic_clear_bit+0xa>
   28472:	f3bf 8f5b 	dmb	ish
}
   28476:	4770      	bx	lr

00028478 <bt_smp_aes_cmac>:
{
   28478:	b570      	push	{r4, r5, r6, lr}
   2847a:	b0c2      	sub	sp, #264	; 0x108
   2847c:	460d      	mov	r5, r1
   2847e:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28480:	4601      	mov	r1, r0
   28482:	aa16      	add	r2, sp, #88	; 0x58
   28484:	4668      	mov	r0, sp
{
   28486:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28488:	f7fe fa43 	bl	26912 <tc_cmac_setup>
   2848c:	b918      	cbnz	r0, 28496 <bt_smp_aes_cmac+0x1e>
		return -EIO;
   2848e:	f06f 0004 	mvn.w	r0, #4
}
   28492:	b042      	add	sp, #264	; 0x108
   28494:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   28496:	4632      	mov	r2, r6
   28498:	4629      	mov	r1, r5
   2849a:	4668      	mov	r0, sp
   2849c:	f7fe fa64 	bl	26968 <tc_cmac_update>
   284a0:	2800      	cmp	r0, #0
   284a2:	d0f4      	beq.n	2848e <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   284a4:	4669      	mov	r1, sp
   284a6:	4620      	mov	r0, r4
   284a8:	f7fe fac8 	bl	26a3c <tc_cmac_final>
   284ac:	2800      	cmp	r0, #0
   284ae:	d0ee      	beq.n	2848e <bt_smp_aes_cmac+0x16>
	return 0;
   284b0:	2000      	movs	r0, #0
   284b2:	e7ee      	b.n	28492 <bt_smp_aes_cmac+0x1a>

000284b4 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   284b4:	2007      	movs	r0, #7
   284b6:	4770      	bx	lr

000284b8 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   284b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   284ba:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   284bc:	2200      	movs	r2, #0
   284be:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   284c0:	4604      	mov	r4, r0
   284c2:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   284c4:	460a      	mov	r2, r1
   284c6:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   284ca:	2106      	movs	r1, #6
   284cc:	f7ff f898 	bl	27600 <bt_l2cap_send_cb>
   284d0:	b128      	cbz	r0, 284de <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   284d2:	4628      	mov	r0, r5
}
   284d4:	b003      	add	sp, #12
   284d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   284da:	f7f3 bb15 	b.w	1bb08 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   284de:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   284e2:	2300      	movs	r3, #0
   284e4:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   284e8:	b003      	add	sp, #12
   284ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   284ee:	f7f8 bcad 	b.w	20e4c <k_work_reschedule>

000284f2 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   284f2:	b510      	push	{r4, lr}
   284f4:	1e43      	subs	r3, r0, #1
   284f6:	f100 0210 	add.w	r2, r0, #16
   284fa:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   284fc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28500:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28504:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   28506:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28508:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2850a:	d1f7      	bne.n	284fc <sys_mem_swap.constprop.0+0xa>
	}
}
   2850c:	bd10      	pop	{r4, pc}

0002850e <smp_f6>:
{
   2850e:	b5f0      	push	{r4, r5, r6, r7, lr}
   28510:	b097      	sub	sp, #92	; 0x5c
   28512:	4605      	mov	r5, r0
   28514:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   28516:	a805      	add	r0, sp, #20
   28518:	2210      	movs	r2, #16
{
   2851a:	461c      	mov	r4, r3
   2851c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2851e:	f7f1 fb45 	bl	19bac <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   28522:	2210      	movs	r2, #16
   28524:	4631      	mov	r1, r6
   28526:	a809      	add	r0, sp, #36	; 0x24
   28528:	f7f1 fb40 	bl	19bac <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2852c:	4621      	mov	r1, r4
   2852e:	2210      	movs	r2, #16
   28530:	a80d      	add	r0, sp, #52	; 0x34
   28532:	f7f1 fb3b 	bl	19bac <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   28536:	991c      	ldr	r1, [sp, #112]	; 0x70
   28538:	2203      	movs	r2, #3
   2853a:	a811      	add	r0, sp, #68	; 0x44
   2853c:	f7f1 fb36 	bl	19bac <sys_memcpy_swap>
	m[51] = a1->type;
   28540:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   28542:	f814 3b01 	ldrb.w	r3, [r4], #1
   28546:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2854a:	4621      	mov	r1, r4
   2854c:	2206      	movs	r2, #6
   2854e:	a812      	add	r0, sp, #72	; 0x48
   28550:	f7fe fb94 	bl	26c7c <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   28554:	4621      	mov	r1, r4
   28556:	2206      	movs	r2, #6
   28558:	a812      	add	r0, sp, #72	; 0x48
   2855a:	f7f1 fb27 	bl	19bac <sys_memcpy_swap>
	m[58] = a2->type;
   2855e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   28560:	f814 3b01 	ldrb.w	r3, [r4], #1
   28564:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   28568:	4621      	mov	r1, r4
   2856a:	2206      	movs	r2, #6
   2856c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   28570:	f7fe fb84 	bl	26c7c <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   28574:	4621      	mov	r1, r4
   28576:	2206      	movs	r2, #6
   28578:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2857c:	f7f1 fb16 	bl	19bac <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   28580:	2210      	movs	r2, #16
   28582:	4629      	mov	r1, r5
   28584:	a801      	add	r0, sp, #4
   28586:	f7f1 fb11 	bl	19bac <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2858a:	463b      	mov	r3, r7
   2858c:	2241      	movs	r2, #65	; 0x41
   2858e:	a905      	add	r1, sp, #20
   28590:	a801      	add	r0, sp, #4
   28592:	f7ff ff71 	bl	28478 <bt_smp_aes_cmac>
	if (err) {
   28596:	4604      	mov	r4, r0
   28598:	b910      	cbnz	r0, 285a0 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   2859a:	4638      	mov	r0, r7
   2859c:	f7ff ffa9 	bl	284f2 <sys_mem_swap.constprop.0>
}
   285a0:	4620      	mov	r0, r4
   285a2:	b017      	add	sp, #92	; 0x5c
   285a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000285a6 <smp_f4>:
{
   285a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   285a8:	b097      	sub	sp, #92	; 0x5c
   285aa:	4614      	mov	r4, r2
   285ac:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   285ae:	2220      	movs	r2, #32
   285b0:	4601      	mov	r1, r0
   285b2:	a805      	add	r0, sp, #20
{
   285b4:	461d      	mov	r5, r3
   285b6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   285b8:	f7f1 faf8 	bl	19bac <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   285bc:	2220      	movs	r2, #32
   285be:	4631      	mov	r1, r6
   285c0:	a80d      	add	r0, sp, #52	; 0x34
   285c2:	f7f1 faf3 	bl	19bac <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   285c6:	4621      	mov	r1, r4
   285c8:	2210      	movs	r2, #16
   285ca:	a801      	add	r0, sp, #4
	m[64] = z;
   285cc:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   285d0:	f7f1 faec 	bl	19bac <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   285d4:	463b      	mov	r3, r7
   285d6:	2241      	movs	r2, #65	; 0x41
   285d8:	a905      	add	r1, sp, #20
   285da:	a801      	add	r0, sp, #4
   285dc:	f7ff ff4c 	bl	28478 <bt_smp_aes_cmac>
	if (err) {
   285e0:	4604      	mov	r4, r0
   285e2:	b910      	cbnz	r0, 285ea <smp_f4+0x44>
	sys_mem_swap(res, 16);
   285e4:	4638      	mov	r0, r7
   285e6:	f7ff ff84 	bl	284f2 <sys_mem_swap.constprop.0>
}
   285ea:	4620      	mov	r0, r4
   285ec:	b017      	add	sp, #92	; 0x5c
   285ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000285f0 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   285f0:	2301      	movs	r3, #1
   285f2:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   285f4:	f3bf 8f5b 	dmb	ish
   285f8:	e850 2f00 	ldrex	r2, [r0]
   285fc:	431a      	orrs	r2, r3
   285fe:	e840 2100 	strex	r1, r2, [r0]
   28602:	2900      	cmp	r1, #0
   28604:	d1f8      	bne.n	285f8 <atomic_set_bit+0x8>
   28606:	f3bf 8f5b 	dmb	ish
}
   2860a:	4770      	bx	lr

0002860c <smp_keypress_notif>:
{
   2860c:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2860e:	210e      	movs	r1, #14
   28610:	f7ff ffee 	bl	285f0 <atomic_set_bit>
}
   28614:	2000      	movs	r0, #0
   28616:	bd08      	pop	{r3, pc}

00028618 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   28618:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2861a:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2861c:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2861e:	4628      	mov	r0, r5
   28620:	2104      	movs	r1, #4
   28622:	f7ff fef0 	bl	28406 <atomic_test_bit>
   28626:	b168      	cbz	r0, 28644 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   28628:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2862a:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2862c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2862e:	4608      	mov	r0, r1
   28630:	f7fe ffe3 	bl	275fa <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   28634:	4604      	mov	r4, r0
   28636:	b940      	cbnz	r0, 2864a <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   28638:	2104      	movs	r1, #4
   2863a:	4628      	mov	r0, r5
   2863c:	f7ff ffd8 	bl	285f0 <atomic_set_bit>
}
   28640:	4620      	mov	r0, r4
   28642:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   28644:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28648:	e7ef      	b.n	2862a <smp_create_pdu.constprop.0+0x12>
   2864a:	2101      	movs	r1, #1
   2864c:	3008      	adds	r0, #8
   2864e:	f7f3 fb61 	bl	1bd14 <net_buf_simple_add>
	hdr->code = op;
   28652:	7006      	strb	r6, [r0, #0]
	return buf;
   28654:	e7f4      	b.n	28640 <smp_create_pdu.constprop.0+0x28>

00028656 <send_pairing_rsp>:
{
   28656:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   28658:	2102      	movs	r1, #2
{
   2865a:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2865c:	f7ff ffdc 	bl	28618 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   28660:	4604      	mov	r4, r0
   28662:	b178      	cbz	r0, 28684 <send_pairing_rsp+0x2e>
   28664:	2106      	movs	r1, #6
   28666:	3008      	adds	r0, #8
   28668:	f7f3 fb54 	bl	1bd14 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2866c:	2206      	movs	r2, #6
   2866e:	f105 0111 	add.w	r1, r5, #17
   28672:	f7fe fb03 	bl	26c7c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   28676:	4628      	mov	r0, r5
   28678:	2200      	movs	r2, #0
   2867a:	4621      	mov	r1, r4
   2867c:	f7ff ff1c 	bl	284b8 <smp_send.constprop.0>
	return 0;
   28680:	2000      	movs	r0, #0
}
   28682:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   28684:	2008      	movs	r0, #8
   28686:	e7fc      	b.n	28682 <send_pairing_rsp+0x2c>

00028688 <smp_send_pairing_random>:
{
   28688:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2868a:	2104      	movs	r1, #4
{
   2868c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2868e:	f7ff ffc3 	bl	28618 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   28692:	4604      	mov	r4, r0
   28694:	b178      	cbz	r0, 286b6 <smp_send_pairing_random+0x2e>
   28696:	2110      	movs	r1, #16
   28698:	3008      	adds	r0, #8
   2869a:	f7f3 fb3b 	bl	1bd14 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2869e:	2210      	movs	r2, #16
   286a0:	f105 0127 	add.w	r1, r5, #39	; 0x27
   286a4:	f7fe faea 	bl	26c7c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   286a8:	4628      	mov	r0, r5
   286aa:	2200      	movs	r2, #0
   286ac:	4621      	mov	r1, r4
   286ae:	f7ff ff03 	bl	284b8 <smp_send.constprop.0>
	return 0;
   286b2:	2000      	movs	r0, #0
}
   286b4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   286b6:	2008      	movs	r0, #8
   286b8:	e7fc      	b.n	286b4 <smp_send_pairing_random+0x2c>

000286ba <smp_dhkey_check>:
{
   286ba:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   286bc:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   286c0:	78db      	ldrb	r3, [r3, #3]
   286c2:	2b01      	cmp	r3, #1
{
   286c4:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   286c6:	d114      	bne.n	286f2 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   286c8:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   286ca:	1d05      	adds	r5, r0, #4
   286cc:	2110      	movs	r1, #16
   286ce:	4628      	mov	r0, r5
   286d0:	f7ff fec3 	bl	2845a <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   286d4:	4631      	mov	r1, r6
   286d6:	2210      	movs	r2, #16
   286d8:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   286dc:	f7fe face 	bl	26c7c <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   286e0:	2107      	movs	r1, #7
   286e2:	4628      	mov	r0, r5
   286e4:	f7ff fe8f 	bl	28406 <atomic_test_bit>
   286e8:	b128      	cbz	r0, 286f6 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   286ea:	2109      	movs	r1, #9
   286ec:	4628      	mov	r0, r5
   286ee:	f7ff ff7f 	bl	285f0 <atomic_set_bit>
}
   286f2:	2000      	movs	r0, #0
   286f4:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   286f6:	210a      	movs	r1, #10
   286f8:	4628      	mov	r0, r5
   286fa:	f7ff fe84 	bl	28406 <atomic_test_bit>
   286fe:	2800      	cmp	r0, #0
   28700:	d1f3      	bne.n	286ea <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   28702:	4620      	mov	r0, r4
}
   28704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   28708:	f7f1 bdde 	b.w	1a2c8 <compute_and_check_and_send_periph_dhcheck>

0002870c <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2870c:	2007      	movs	r0, #7
   2870e:	4770      	bx	lr

00028710 <atomic_test_and_clear_bit>:
{
   28710:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   28712:	2301      	movs	r3, #1
   28714:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28718:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2871a:	f3bf 8f5b 	dmb	ish
   2871e:	e850 3f00 	ldrex	r3, [r0]
   28722:	ea03 0402 	and.w	r4, r3, r2
   28726:	e840 4500 	strex	r5, r4, [r0]
   2872a:	2d00      	cmp	r5, #0
   2872c:	d1f7      	bne.n	2871e <atomic_test_and_clear_bit+0xe>
   2872e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   28732:	4219      	tst	r1, r3
}
   28734:	bf14      	ite	ne
   28736:	2001      	movne	r0, #1
   28738:	2000      	moveq	r0, #0
   2873a:	bd30      	pop	{r4, r5, pc}

0002873c <smp_reset>:
{
   2873c:	b538      	push	{r3, r4, r5, lr}
   2873e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28740:	1d03      	adds	r3, r0, #4
   28742:	2500      	movs	r5, #0
   28744:	f3bf 8f5b 	dmb	ish
   28748:	e853 2f00 	ldrex	r2, [r3]
   2874c:	e843 5100 	strex	r1, r5, [r3]
   28750:	2900      	cmp	r1, #0
   28752:	d1f9      	bne.n	28748 <smp_reset+0xc>
   28754:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   28758:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2875c:	f7f8 fb7c 	bl	20e58 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   28760:	7225      	strb	r5, [r4, #8]
   28762:	f3bf 8f5b 	dmb	ish
   28766:	e854 3f00 	ldrex	r3, [r4]
   2876a:	e844 5200 	strex	r2, r5, [r4]
   2876e:	2a00      	cmp	r2, #0
   28770:	d1f9      	bne.n	28766 <smp_reset+0x2a>
   28772:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   28776:	4620      	mov	r0, r4
   28778:	2101      	movs	r1, #1
}
   2877a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2877e:	f7ff bf37 	b.w	285f0 <atomic_set_bit>

00028782 <smp_c1>:
{
   28782:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28786:	b089      	sub	sp, #36	; 0x24
   28788:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2878c:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2878e:	783b      	ldrb	r3, [r7, #0]
{
   28790:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   28792:	f88d 3000 	strb.w	r3, [sp]
{
   28796:	460c      	mov	r4, r1
	p1[1] = ra->type;
   28798:	f898 3000 	ldrb.w	r3, [r8]
   2879c:	f88d 3001 	strb.w	r3, [sp, #1]
{
   287a0:	4611      	mov	r1, r2
   287a2:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   287a4:	2207      	movs	r2, #7
   287a6:	f10d 0002 	add.w	r0, sp, #2
   287aa:	f7fe fa67 	bl	26c7c <memcpy>
	memcpy(p1 + 9, pres, 7);
   287ae:	2207      	movs	r2, #7
   287b0:	4649      	mov	r1, r9
   287b2:	f10d 0009 	add.w	r0, sp, #9
   287b6:	f7fe fa61 	bl	26c7c <memcpy>
	while (len--) {
   287ba:	f104 0010 	add.w	r0, r4, #16
	memcpy(p1 + 9, pres, 7);
   287be:	462a      	mov	r2, r5
   287c0:	4669      	mov	r1, sp
		*r++ = *p++ ^ *q++;
   287c2:	f814 3b01 	ldrb.w	r3, [r4], #1
   287c6:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   287ca:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   287cc:	ea83 030c 	eor.w	r3, r3, ip
   287d0:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   287d4:	d1f5      	bne.n	287c2 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   287d6:	462a      	mov	r2, r5
   287d8:	4629      	mov	r1, r5
   287da:	4630      	mov	r0, r6
   287dc:	f000 fc19 	bl	29012 <bt_encrypt_le>
	if (err) {
   287e0:	4604      	mov	r4, r0
   287e2:	bb20      	cbnz	r0, 2882e <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   287e4:	2206      	movs	r2, #6
   287e6:	f108 0101 	add.w	r1, r8, #1
   287ea:	a804      	add	r0, sp, #16
   287ec:	f7fe fa46 	bl	26c7c <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   287f0:	2206      	movs	r2, #6
   287f2:	1c79      	adds	r1, r7, #1
   287f4:	f10d 0016 	add.w	r0, sp, #22
   287f8:	f7fe fa40 	bl	26c7c <memcpy>
	(void)memset(p2 + 12, 0, 4);
   287fc:	2204      	movs	r2, #4
   287fe:	4621      	mov	r1, r4
   28800:	a807      	add	r0, sp, #28
   28802:	f7fe fa46 	bl	26c92 <memset>
	while (len--) {
   28806:	f105 0010 	add.w	r0, r5, #16
	(void)memset(p2 + 12, 0, 4);
   2880a:	462a      	mov	r2, r5
   2880c:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   2880e:	f812 1b01 	ldrb.w	r1, [r2], #1
   28812:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   28816:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   28818:	ea81 0104 	eor.w	r1, r1, r4
   2881c:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   28820:	d1f5      	bne.n	2880e <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   28822:	462a      	mov	r2, r5
   28824:	4629      	mov	r1, r5
   28826:	4630      	mov	r0, r6
   28828:	f000 fbf3 	bl	29012 <bt_encrypt_le>
   2882c:	4604      	mov	r4, r0
}
   2882e:	4620      	mov	r0, r4
   28830:	b009      	add	sp, #36	; 0x24
   28832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00028836 <legacy_pairing_confirm>:
{
   28836:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28838:	1d07      	adds	r7, r0, #4
{
   2883a:	b085      	sub	sp, #20
   2883c:	4604      	mov	r4, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2883e:	210a      	movs	r1, #10
   28840:	4638      	mov	r0, r7
   28842:	f7ff fde0 	bl	28406 <atomic_test_bit>
   28846:	bb88      	cbnz	r0, 288ac <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   28848:	2104      	movs	r1, #4
   2884a:	4620      	mov	r0, r4
   2884c:	f7ff fed0 	bl	285f0 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28850:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   28852:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28856:	f7ff fedf 	bl	28618 <smp_create_pdu.constprop.0>
	if (!buf) {
   2885a:	4605      	mov	r5, r0
   2885c:	b1c0      	cbz	r0, 28890 <legacy_pairing_confirm+0x5a>
   2885e:	2110      	movs	r1, #16
   28860:	3008      	adds	r0, #8
   28862:	f7f3 fa57 	bl	1bd14 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   28866:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   2886a:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2886c:	9002      	str	r0, [sp, #8]
   2886e:	9301      	str	r3, [sp, #4]
   28870:	9600      	str	r6, [sp, #0]
   28872:	f104 0310 	add.w	r3, r4, #16
   28876:	f104 0209 	add.w	r2, r4, #9
   2887a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2887e:	f104 0047 	add.w	r0, r4, #71	; 0x47
   28882:	f7ff ff7e 	bl	28782 <smp_c1>
   28886:	4606      	mov	r6, r0
   28888:	b128      	cbz	r0, 28896 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2888a:	4628      	mov	r0, r5
   2888c:	f7f3 f93c 	bl	1bb08 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   28890:	2008      	movs	r0, #8
}
   28892:	b005      	add	sp, #20
   28894:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   28896:	4602      	mov	r2, r0
   28898:	4629      	mov	r1, r5
   2889a:	4620      	mov	r0, r4
   2889c:	f7ff fe0c 	bl	284b8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   288a0:	4631      	mov	r1, r6
   288a2:	4638      	mov	r0, r7
   288a4:	f7ff fdd9 	bl	2845a <atomic_clear_bit>
	return 0;
   288a8:	2000      	movs	r0, #0
   288aa:	e7f2      	b.n	28892 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   288ac:	2100      	movs	r1, #0
   288ae:	4638      	mov	r0, r7
   288b0:	f7ff fe9e 	bl	285f0 <atomic_set_bit>
	return 0;
   288b4:	e7f8      	b.n	288a8 <legacy_pairing_confirm+0x72>

000288b6 <bt_smp_request_ltk>:
{
   288b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   288ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
   288bc:	e9cd 2300 	strd	r2, r3, [sp]
   288c0:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   288c2:	f7f1 f947 	bl	19b54 <smp_chan_get>
	if (!smp) {
   288c6:	4605      	mov	r5, r0
   288c8:	2800      	cmp	r0, #0
   288ca:	d07c      	beq.n	289c6 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   288cc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   288d0:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   288d2:	f1b8 0f00 	cmp.w	r8, #0
   288d6:	d128      	bne.n	2892a <bt_smp_request_ltk+0x74>
   288d8:	e9dd 3200 	ldrd	r3, r2, [sp]
   288dc:	4313      	orrs	r3, r2
   288de:	d124      	bne.n	2892a <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   288e0:	2103      	movs	r1, #3
   288e2:	4630      	mov	r0, r6
   288e4:	f7ff fd8f 	bl	28406 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   288e8:	b1f8      	cbz	r0, 2892a <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   288ea:	2101      	movs	r1, #1
   288ec:	4630      	mov	r0, r6
   288ee:	f7ff fd8a 	bl	28406 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   288f2:	b1d0      	cbz	r0, 2892a <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   288f4:	7d2c      	ldrb	r4, [r5, #20]
   288f6:	7b6b      	ldrb	r3, [r5, #13]
   288f8:	429c      	cmp	r4, r3
   288fa:	bf28      	it	cs
   288fc:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   288fe:	4622      	mov	r2, r4
   28900:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   28904:	4638      	mov	r0, r7
   28906:	f7fe f9b9 	bl	26c7c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2890a:	2c0f      	cmp	r4, #15
   2890c:	d805      	bhi.n	2891a <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   2890e:	f1c4 0210 	rsb	r2, r4, #16
   28912:	4641      	mov	r1, r8
   28914:	1938      	adds	r0, r7, r4
   28916:	f7fe f9bc 	bl	26c92 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2891a:	4630      	mov	r0, r6
   2891c:	2101      	movs	r1, #1
   2891e:	f7ff fe67 	bl	285f0 <atomic_set_bit>
		return true;
   28922:	2001      	movs	r0, #1
}
   28924:	b002      	add	sp, #8
   28926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2892a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2892e:	b983      	cbnz	r3, 28952 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   28930:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   28934:	7a21      	ldrb	r1, [r4, #8]
   28936:	4642      	mov	r2, r8
   28938:	2020      	movs	r0, #32
   2893a:	f7f2 fce7 	bl	1b30c <bt_keys_find>
   2893e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   28942:	b930      	cbnz	r0, 28952 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   28944:	7a21      	ldrb	r1, [r4, #8]
   28946:	4642      	mov	r2, r8
   28948:	2001      	movs	r0, #1
   2894a:	f7f2 fcdf 	bl	1b30c <bt_keys_find>
   2894e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   28952:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   28956:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2895a:	f1b8 0f00 	cmp.w	r8, #0
   2895e:	d10c      	bne.n	2897a <bt_smp_request_ltk+0xc4>
   28960:	e9dd 3200 	ldrd	r3, r2, [sp]
   28964:	4313      	orrs	r3, r2
   28966:	d108      	bne.n	2897a <bt_smp_request_ltk+0xc4>
   28968:	b300      	cbz	r0, 289ac <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2896a:	89c3      	ldrh	r3, [r0, #14]
   2896c:	069a      	lsls	r2, r3, #26
   2896e:	d505      	bpl.n	2897c <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   28970:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   28972:	f100 011a 	add.w	r1, r0, #26
   28976:	4622      	mov	r2, r4
   28978:	e7c4      	b.n	28904 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2897a:	b1b8      	cbz	r0, 289ac <bt_smp_request_ltk+0xf6>
   2897c:	89c3      	ldrh	r3, [r0, #14]
   2897e:	07db      	lsls	r3, r3, #31
   28980:	d514      	bpl.n	289ac <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   28982:	2208      	movs	r2, #8
   28984:	4669      	mov	r1, sp
   28986:	3040      	adds	r0, #64	; 0x40
   28988:	f7fe f951 	bl	26c2e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2898c:	b970      	cbnz	r0, 289ac <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2898e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   28992:	2202      	movs	r2, #2
   28994:	a908      	add	r1, sp, #32
   28996:	3048      	adds	r0, #72	; 0x48
   28998:	f7fe f949 	bl	26c2e <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2899c:	4680      	mov	r8, r0
   2899e:	b928      	cbnz	r0, 289ac <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   289a0:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   289a4:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   289a6:	314a      	adds	r1, #74	; 0x4a
   289a8:	4622      	mov	r2, r4
   289aa:	e7ab      	b.n	28904 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   289ac:	210f      	movs	r1, #15
   289ae:	4630      	mov	r0, r6
   289b0:	f7ff fd29 	bl	28406 <atomic_test_bit>
   289b4:	b120      	cbz	r0, 289c0 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   289b6:	2202      	movs	r2, #2
   289b8:	2106      	movs	r1, #6
   289ba:	4620      	mov	r0, r4
   289bc:	f7ee f8ae 	bl	16b1c <bt_conn_security_changed>
	smp_reset(smp);
   289c0:	4628      	mov	r0, r5
   289c2:	f7ff febb 	bl	2873c <smp_reset>
		return false;
   289c6:	2000      	movs	r0, #0
   289c8:	e7ac      	b.n	28924 <bt_smp_request_ltk+0x6e>

000289ca <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   289ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   289ce:	4770      	bx	lr

000289d0 <bt_smp_dhkey_ready>:
{
   289d0:	b570      	push	{r4, r5, r6, lr}
   289d2:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   289d4:	2008      	movs	r0, #8
   289d6:	f7f1 f84d 	bl	19a74 <smp_find>
	if (smp) {
   289da:	4604      	mov	r4, r0
   289dc:	b1b8      	cbz	r0, 28a0e <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   289de:	1d05      	adds	r5, r0, #4
   289e0:	2108      	movs	r1, #8
   289e2:	4628      	mov	r0, r5
   289e4:	f7ff fd39 	bl	2845a <atomic_clear_bit>
	if (!dhkey) {
   289e8:	b38e      	cbz	r6, 28a4e <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   289ea:	2107      	movs	r1, #7
   289ec:	f7ff fd35 	bl	2845a <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   289f0:	4631      	mov	r1, r6
   289f2:	2220      	movs	r2, #32
   289f4:	f104 0097 	add.w	r0, r4, #151	; 0x97
   289f8:	f7fe f940 	bl	26c7c <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   289fc:	210a      	movs	r1, #10
   289fe:	4628      	mov	r0, r5
   28a00:	f7ff fd01 	bl	28406 <atomic_test_bit>
   28a04:	b168      	cbz	r0, 28a22 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28a06:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28a08:	4628      	mov	r0, r5
   28a0a:	f7ff fdf1 	bl	285f0 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   28a0e:	2007      	movs	r0, #7
   28a10:	f7f1 f830 	bl	19a74 <smp_find>
		if (smp) {
   28a14:	4604      	mov	r4, r0
   28a16:	b118      	cbz	r0, 28a20 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   28a18:	f7f1 f908 	bl	19c2c <smp_dhkey_generate>
			if (err) {
   28a1c:	4601      	mov	r1, r0
   28a1e:	b990      	cbnz	r0, 28a46 <bt_smp_dhkey_ready+0x76>
}
   28a20:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   28a22:	2110      	movs	r1, #16
   28a24:	4628      	mov	r0, r5
   28a26:	f7ff fcee 	bl	28406 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28a2a:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   28a2c:	2800      	cmp	r0, #0
   28a2e:	d1eb      	bne.n	28a08 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   28a30:	4628      	mov	r0, r5
   28a32:	f7ff fce8 	bl	28406 <atomic_test_bit>
   28a36:	2800      	cmp	r0, #0
   28a38:	d0e9      	beq.n	28a0e <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   28a3a:	4620      	mov	r0, r4
   28a3c:	f7f1 fc44 	bl	1a2c8 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   28a40:	4601      	mov	r1, r0
   28a42:	2800      	cmp	r0, #0
   28a44:	d0e3      	beq.n	28a0e <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   28a46:	4620      	mov	r0, r4
   28a48:	f7f1 fff8 	bl	1aa3c <smp_error>
   28a4c:	e7df      	b.n	28a0e <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   28a4e:	210b      	movs	r1, #11
   28a50:	e7f9      	b.n	28a46 <bt_smp_dhkey_ready+0x76>

00028a52 <bt_smp_disconnected>:
{
   28a52:	b570      	push	{r4, r5, r6, lr}
   28a54:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   28a56:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   28a5a:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28a5e:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   28a60:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   28a64:	f7f8 f9f8 	bl	20e58 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28a68:	2103      	movs	r1, #3
   28a6a:	4620      	mov	r0, r4
   28a6c:	f7ff fccb 	bl	28406 <atomic_test_bit>
   28a70:	b1a0      	cbz	r0, 28a9c <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   28a72:	2108      	movs	r1, #8
   28a74:	4630      	mov	r0, r6
   28a76:	f7f1 ff5d 	bl	1a934 <smp_pairing_complete>
	if (keys) {
   28a7a:	b13d      	cbz	r5, 28a8c <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   28a7c:	89eb      	ldrh	r3, [r5, #14]
   28a7e:	b113      	cbz	r3, 28a86 <bt_smp_disconnected+0x34>
   28a80:	7b6b      	ldrb	r3, [r5, #13]
   28a82:	079b      	lsls	r3, r3, #30
   28a84:	d502      	bpl.n	28a8c <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   28a86:	4628      	mov	r0, r5
   28a88:	f7f2 fd16 	bl	1b4b8 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   28a8c:	4630      	mov	r0, r6
   28a8e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
}
   28a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   28a96:	2100      	movs	r1, #0
   28a98:	f7fe b8fb 	b.w	26c92 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28a9c:	2101      	movs	r1, #1
   28a9e:	4620      	mov	r0, r4
   28aa0:	f7ff fcb1 	bl	28406 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28aa4:	2800      	cmp	r0, #0
   28aa6:	d1e4      	bne.n	28a72 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   28aa8:	210f      	movs	r1, #15
   28aaa:	4620      	mov	r0, r4
   28aac:	f7ff fcab 	bl	28406 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28ab0:	2800      	cmp	r0, #0
   28ab2:	d1de      	bne.n	28a72 <bt_smp_disconnected+0x20>
   28ab4:	e7e1      	b.n	28a7a <bt_smp_disconnected+0x28>

00028ab6 <fixed_data_unref>:
}
   28ab6:	4770      	bx	lr

00028ab8 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   28ab8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   28aba:	6849      	ldr	r1, [r1, #4]
   28abc:	6809      	ldr	r1, [r1, #0]
   28abe:	f7f2 be19 	b.w	1b6f4 <net_buf_alloc_len>

00028ac2 <net_buf_simple_pull_le16>:
{
   28ac2:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   28ac4:	6803      	ldr	r3, [r0, #0]
   28ac6:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   28ac8:	2102      	movs	r1, #2
   28aca:	f7f3 f8ef 	bl	1bcac <net_buf_simple_pull>
}
   28ace:	4620      	mov	r0, r4
   28ad0:	bd10      	pop	{r4, pc}

00028ad2 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   28ad2:	6802      	ldr	r2, [r0, #0]
   28ad4:	6880      	ldr	r0, [r0, #8]
}
   28ad6:	1a10      	subs	r0, r2, r0
   28ad8:	4770      	bx	lr

00028ada <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   28ada:	8883      	ldrh	r3, [r0, #4]
   28adc:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   28ade:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   28ae0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   28ae2:	6803      	ldr	r3, [r0, #0]
   28ae4:	1a5b      	subs	r3, r3, r1
}
   28ae6:	1ad0      	subs	r0, r2, r3
   28ae8:	4770      	bx	lr

00028aea <net_buf_simple_add_mem>:
{
   28aea:	b538      	push	{r3, r4, r5, lr}
   28aec:	460d      	mov	r5, r1
   28aee:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   28af0:	4611      	mov	r1, r2
   28af2:	f7f3 f90f 	bl	1bd14 <net_buf_simple_add>
   28af6:	4622      	mov	r2, r4
   28af8:	4629      	mov	r1, r5
}
   28afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   28afe:	f7fe b8bd 	b.w	26c7c <memcpy>

00028b02 <net_buf_simple_add_u8>:
{
   28b02:	b510      	push	{r4, lr}
   28b04:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   28b06:	2101      	movs	r1, #1
   28b08:	f7f3 f904 	bl	1bd14 <net_buf_simple_add>
	*u8 = val;
   28b0c:	7004      	strb	r4, [r0, #0]
}
   28b0e:	bd10      	pop	{r4, pc}

00028b10 <set_on_state>:
	__asm__ volatile(
   28b10:	f04f 0340 	mov.w	r3, #64	; 0x40
   28b14:	f3ef 8211 	mrs	r2, BASEPRI
   28b18:	f383 8812 	msr	BASEPRI_MAX, r3
   28b1c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   28b20:	6803      	ldr	r3, [r0, #0]
   28b22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   28b26:	f043 0302 	orr.w	r3, r3, #2
   28b2a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   28b2c:	f382 8811 	msr	BASEPRI, r2
   28b30:	f3bf 8f6f 	isb	sy
}
   28b34:	4770      	bx	lr

00028b36 <async_start>:
{
   28b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28b38:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   28b3a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   28b3c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   28b3e:	f04f 0540 	mov.w	r5, #64	; 0x40
   28b42:	f3ef 8611 	mrs	r6, BASEPRI
   28b46:	f385 8812 	msr	BASEPRI_MAX, r5
   28b4a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   28b4e:	250c      	movs	r5, #12
   28b50:	4369      	muls	r1, r5
   28b52:	440c      	add	r4, r1
   28b54:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   28b56:	f005 0c07 	and.w	ip, r5, #7
   28b5a:	f1bc 0f01 	cmp.w	ip, #1
   28b5e:	d10b      	bne.n	28b78 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   28b60:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   28b62:	f386 8811 	msr	BASEPRI, r6
   28b66:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   28b6a:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   28b6e:	6843      	ldr	r3, [r0, #4]
   28b70:	585b      	ldr	r3, [r3, r1]
   28b72:	4798      	blx	r3
	return 0;
   28b74:	2000      	movs	r0, #0
}
   28b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   28b78:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   28b7c:	42af      	cmp	r7, r5
   28b7e:	f386 8811 	msr	BASEPRI, r6
   28b82:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   28b86:	bf0c      	ite	eq
   28b88:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   28b8c:	f04f 30ff 	movne.w	r0, #4294967295
   28b90:	e7f1      	b.n	28b76 <async_start+0x40>

00028b92 <api_start>:
{
   28b92:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   28b94:	2480      	movs	r4, #128	; 0x80
   28b96:	9400      	str	r4, [sp, #0]
   28b98:	f7ff ffcd 	bl	28b36 <async_start>
}
   28b9c:	b002      	add	sp, #8
   28b9e:	bd10      	pop	{r4, pc}

00028ba0 <onoff_started_callback>:
	return &data->mgr[type];
   28ba0:	6900      	ldr	r0, [r0, #16]
   28ba2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   28ba4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   28ba8:	2100      	movs	r1, #0
   28baa:	4710      	bx	r2

00028bac <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   28bac:	2000      	movs	r0, #0
   28bae:	f7f5 bedd 	b.w	1e96c <nrfx_clock_start>

00028bb2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   28bb2:	2000      	movs	r0, #0
   28bb4:	f7f5 befa 	b.w	1e9ac <nrfx_clock_stop>

00028bb8 <blocking_start_callback>:
{
   28bb8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   28bba:	f7f7 bcb7 	b.w	2052c <z_impl_k_sem_give>

00028bbe <api_stop>:
	return stop(dev, subsys, CTX_API);
   28bbe:	2280      	movs	r2, #128	; 0x80
   28bc0:	f7f3 b90a 	b.w	1bdd8 <stop>

00028bc4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28bc4:	6843      	ldr	r3, [r0, #4]
   28bc6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   28bc8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   28bcc:	600b      	str	r3, [r1, #0]
}
   28bce:	2000      	movs	r0, #0
   28bd0:	4770      	bx	lr

00028bd2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28bd2:	6843      	ldr	r3, [r0, #4]
   28bd4:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   28bd6:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   28bda:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   28bde:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   28be2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   28be6:	2000      	movs	r0, #0
   28be8:	4770      	bx	lr

00028bea <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28bea:	6843      	ldr	r3, [r0, #4]
   28bec:	685b      	ldr	r3, [r3, #4]
}
   28bee:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   28bf0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   28bf4:	4770      	bx	lr

00028bf6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28bf6:	6843      	ldr	r3, [r0, #4]
   28bf8:	685b      	ldr	r3, [r3, #4]
}
   28bfa:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   28bfc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   28c00:	4770      	bx	lr

00028c02 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28c02:	6843      	ldr	r3, [r0, #4]
   28c04:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   28c06:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   28c0a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   28c0e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   28c10:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   28c14:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   28c18:	2000      	movs	r0, #0
   28c1a:	4770      	bx	lr

00028c1c <is_regular_addr_valid>:
{
   28c1c:	b538      	push	{r3, r4, r5, lr}
   28c1e:	4605      	mov	r5, r0
   28c20:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   28c22:	f000 faf5 	bl	29210 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   28c26:	2d00      	cmp	r5, #0
   28c28:	db07      	blt.n	28c3a <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   28c2a:	42a8      	cmp	r0, r5
   28c2c:	d905      	bls.n	28c3a <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   28c2e:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   28c30:	4284      	cmp	r4, r0
   28c32:	bf8c      	ite	hi
   28c34:	2000      	movhi	r0, #0
   28c36:	2001      	movls	r0, #1
}
   28c38:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   28c3a:	2000      	movs	r0, #0
   28c3c:	e7fc      	b.n	28c38 <is_regular_addr_valid+0x1c>

00028c3e <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   28c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28c40:	461c      	mov	r4, r3
   28c42:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   28c44:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
   28c46:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   28c48:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   28c4a:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   28c4c:	6913      	ldr	r3, [r2, #16]
{
   28c4e:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
   28c50:	aa01      	add	r2, sp, #4
   28c52:	4669      	mov	r1, sp
   28c54:	4798      	blx	r3

	while (layout_size--) {
   28c56:	9b01      	ldr	r3, [sp, #4]
   28c58:	1e5a      	subs	r2, r3, #1
   28c5a:	9201      	str	r2, [sp, #4]
   28c5c:	b91b      	cbnz	r3, 28c66 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   28c5e:	f06f 0015 	mvn.w	r0, #21
}
   28c62:	b003      	add	sp, #12
   28c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   28c66:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   28c68:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   28c6a:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   28c6c:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   28c6e:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   28c70:	b985      	cbnz	r5, 28c94 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   28c72:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   28c74:	f8d0 c000 	ldr.w	ip, [r0]
   28c78:	4563      	cmp	r3, ip
   28c7a:	bf28      	it	cs
   28c7c:	4663      	movcs	r3, ip
		info->index += index_jmp;
   28c7e:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   28c80:	fb03 1107 	mla	r1, r3, r7, r1
   28c84:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   28c86:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   28c88:	6802      	ldr	r2, [r0, #0]
   28c8a:	429a      	cmp	r2, r3
   28c8c:	d806      	bhi.n	28c9c <flash_get_page_info+0x5e>
		layout++;
   28c8e:	3008      	adds	r0, #8
   28c90:	9000      	str	r0, [sp, #0]
   28c92:	e7e0      	b.n	28c56 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   28c94:	1a6b      	subs	r3, r5, r1
   28c96:	fbb3 f3f7 	udiv	r3, r3, r7
   28c9a:	e7eb      	b.n	28c74 <flash_get_page_info+0x36>
			return 0;
   28c9c:	2000      	movs	r0, #0
   28c9e:	e7e0      	b.n	28c62 <flash_get_page_info+0x24>

00028ca0 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   28ca0:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   28ca2:	2200      	movs	r2, #0
   28ca4:	f7ff bfcb 	b.w	28c3e <flash_get_page_info>

00028ca8 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   28ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   28cac:	6883      	ldr	r3, [r0, #8]
{
   28cae:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   28cb0:	691b      	ldr	r3, [r3, #16]
{
   28cb2:	4688      	mov	r8, r1
   28cb4:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   28cb6:	a901      	add	r1, sp, #4
   28cb8:	aa02      	add	r2, sp, #8
   28cba:	4798      	blx	r3
	off_t off = 0;
   28cbc:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   28cbe:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   28cc0:	4625      	mov	r5, r4
   28cc2:	9b02      	ldr	r3, [sp, #8]
   28cc4:	42ab      	cmp	r3, r5
   28cc6:	d802      	bhi.n	28cce <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   28cc8:	b006      	add	sp, #24
   28cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   28cce:	9f01      	ldr	r7, [sp, #4]
   28cd0:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   28cd4:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   28cd6:	687b      	ldr	r3, [r7, #4]
   28cd8:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   28cda:	683a      	ldr	r2, [r7, #0]
   28cdc:	42b2      	cmp	r2, r6
   28cde:	eb0a 0306 	add.w	r3, sl, r6
   28ce2:	d802      	bhi.n	28cea <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   28ce4:	3501      	adds	r5, #1
   28ce6:	469a      	mov	sl, r3
   28ce8:	e7eb      	b.n	28cc2 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   28cea:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   28cec:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   28cee:	4649      	mov	r1, r9
   28cf0:	a803      	add	r0, sp, #12
   28cf2:	47c0      	blx	r8
   28cf4:	2800      	cmp	r0, #0
   28cf6:	d0e7      	beq.n	28cc8 <flash_page_foreach+0x20>
			off += page_info.size;
   28cf8:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   28cfa:	3601      	adds	r6, #1
			off += page_info.size;
   28cfc:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   28cfe:	e7ec      	b.n	28cda <flash_page_foreach+0x32>

00028d00 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   28d00:	6902      	ldr	r2, [r0, #16]
{
   28d02:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   28d04:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   28d08:	e883 0003 	stmia.w	r3, {r0, r1}
}
   28d0c:	2000      	movs	r0, #0
   28d0e:	4770      	bx	lr

00028d10 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   28d10:	6843      	ldr	r3, [r0, #4]
   28d12:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   28d14:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   28d18:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   28d1c:	4770      	bx	lr

00028d1e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   28d1e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   28d20:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   28d22:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28d24:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   28d28:	b150      	cbz	r0, 28d40 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   28d2a:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28d2c:	2000      	movs	r0, #0
   28d2e:	7812      	ldrb	r2, [r2, #0]
   28d30:	700a      	strb	r2, [r1, #0]
   28d32:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   28d36:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28d3a:	2201      	movs	r2, #1
   28d3c:	601a      	str	r2, [r3, #0]
	return 0;
   28d3e:	4770      	bx	lr
		return -1;
   28d40:	f04f 30ff 	mov.w	r0, #4294967295
}
   28d44:	4770      	bx	lr

00028d46 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   28d46:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   28d48:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28d4a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28d4e:	b940      	cbnz	r0, 28d62 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   28d50:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28d52:	079b      	lsls	r3, r3, #30
   28d54:	d406      	bmi.n	28d64 <is_tx_ready.isra.0+0x1e>
   28d56:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   28d5a:	3800      	subs	r0, #0
   28d5c:	bf18      	it	ne
   28d5e:	2001      	movne	r0, #1
   28d60:	4770      	bx	lr
   28d62:	2001      	movs	r0, #1
}
   28d64:	4770      	bx	lr

00028d66 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   28d66:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   28d68:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   28d6a:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   28d6e:	05c9      	lsls	r1, r1, #23
   28d70:	d518      	bpl.n	28da4 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28d72:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   28d76:	b1a9      	cbz	r1, 28da4 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   28d78:	f04f 0040 	mov.w	r0, #64	; 0x40
   28d7c:	f3ef 8111 	mrs	r1, BASEPRI
   28d80:	f380 8812 	msr	BASEPRI_MAX, r0
   28d84:	f3bf 8f6f 	isb	sy
   28d88:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   28d8c:	b130      	cbz	r0, 28d9c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28d8e:	2000      	movs	r0, #0
   28d90:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   28d94:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28d98:	2001      	movs	r0, #1
   28d9a:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   28d9c:	f381 8811 	msr	BASEPRI, r1
   28da0:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28da4:	6852      	ldr	r2, [r2, #4]
   28da6:	06d2      	lsls	r2, r2, #27
   28da8:	d515      	bpl.n	28dd6 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   28daa:	f04f 0140 	mov.w	r1, #64	; 0x40
   28dae:	f3ef 8211 	mrs	r2, BASEPRI
   28db2:	f381 8812 	msr	BASEPRI_MAX, r1
   28db6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28dba:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   28dbe:	b111      	cbz	r1, 28dc6 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   28dc0:	2100      	movs	r1, #0
   28dc2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   28dc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   28dca:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   28dce:	f382 8811 	msr	BASEPRI, r2
   28dd2:	f3bf 8f6f 	isb	sy
}
   28dd6:	4770      	bx	lr

00028dd8 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   28dd8:	2000      	movs	r0, #0
   28dda:	4770      	bx	lr

00028ddc <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   28ddc:	b538      	push	{r3, r4, r5, lr}
   28dde:	460c      	mov	r4, r1
   28de0:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   28de2:	f7ec f9c3 	bl	1516c <bt_is_ready>
   28de6:	b128      	cbz	r0, 28df4 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   28de8:	4629      	mov	r1, r5
   28dea:	4620      	mov	r0, r4
}
   28dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   28df0:	f7eb bcd4 	b.w	1479c <bt_hci_le_rand>
}
   28df4:	f06f 000a 	mvn.w	r0, #10
   28df8:	bd38      	pop	{r3, r4, r5, pc}

00028dfa <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   28dfa:	2200      	movs	r2, #0
{
   28dfc:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   28dfe:	4611      	mov	r1, r2
   28e00:	4610      	mov	r0, r2
   28e02:	f7fa f985 	bl	23110 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   28e06:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   28e08:	bf18      	it	ne
   28e0a:	f06f 0015 	mvnne.w	r0, #21
   28e0e:	bd08      	pop	{r3, pc}

00028e10 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   28e10:	4770      	bx	lr

00028e12 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   28e12:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
   28e14:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   28e16:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   28e1a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   28e1c:	7a05      	ldrb	r5, [r0, #8]
   28e1e:	6844      	ldr	r4, [r0, #4]
   28e20:	4435      	add	r5, r6
   28e22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   28e26:	42a3      	cmp	r3, r4
   28e28:	d902      	bls.n	28e30 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   28e2a:	f06f 0001 	mvn.w	r0, #1
}
   28e2e:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   28e30:	795c      	ldrb	r4, [r3, #5]
   28e32:	428c      	cmp	r4, r1
   28e34:	d001      	beq.n	28e3a <pinctrl_lookup_state+0x28>
		(*state)++;
   28e36:	3308      	adds	r3, #8
   28e38:	e7ef      	b.n	28e1a <pinctrl_lookup_state+0x8>
			return 0;
   28e3a:	2000      	movs	r0, #0
   28e3c:	e7f7      	b.n	28e2e <pinctrl_lookup_state+0x1c>

00028e3e <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   28e3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28e42:	4615      	mov	r5, r2
   28e44:	b085      	sub	sp, #20
   28e46:	4682      	mov	sl, r0
   28e48:	eb00 0781 	add.w	r7, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   28e4c:	f04f 0801 	mov.w	r8, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   28e50:	4557      	cmp	r7, sl
   28e52:	d103      	bne.n	28e5c <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   28e54:	2000      	movs	r0, #0
}
   28e56:	b005      	add	sp, #20
   28e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   28e5c:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   28e60:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   28e64:	f3c3 2643 	ubfx	r6, r3, #9, #4
			pin = 0xFFFFFFFFU;
   28e68:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   28e6a:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   28e6e:	bf08      	it	eq
   28e70:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   28e74:	2b19      	cmp	r3, #25
   28e76:	d879      	bhi.n	28f6c <pinctrl_configure_pins+0x12e>
   28e78:	e8df f003 	tbb	[pc, r3]
   28e7c:	24211b0d 	.word	0x24211b0d
   28e80:	78243727 	.word	0x78243727
   28e84:	3c787878 	.word	0x3c787878
   28e88:	78787863 	.word	0x78787863
   28e8c:	78787878 	.word	0x78787878
   28e90:	6f667878 	.word	0x6f667878
   28e94:	7572      	.short	0x7572
			NRF_PSEL_UART(reg, TXD) = pin;
   28e96:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28e9a:	a803      	add	r0, sp, #12
   28e9c:	9403      	str	r4, [sp, #12]
   28e9e:	f7f4 fa29 	bl	1d2f4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   28ea2:	9b03      	ldr	r3, [sp, #12]
   28ea4:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
   28ea8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   28eac:	f04f 0901 	mov.w	r9, #1
   28eb0:	e003      	b.n	28eba <pinctrl_configure_pins+0x7c>
			NRF_PSEL_UART(reg, RXD) = pin;
   28eb2:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   28eb6:	f04f 0900 	mov.w	r9, #0
   28eba:	46cb      	mov	fp, r9
   28ebc:	e022      	b.n	28f04 <pinctrl_configure_pins+0xc6>
			NRF_PSEL_UART(reg, RTS) = pin;
   28ebe:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   28ec2:	e7ea      	b.n	28e9a <pinctrl_configure_pins+0x5c>
			NRF_PSEL_UART(reg, CTS) = pin;
   28ec4:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   28ec8:	e7f5      	b.n	28eb6 <pinctrl_configure_pins+0x78>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   28eca:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   28ece:	f04f 0900 	mov.w	r9, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28ed2:	a803      	add	r0, sp, #12
   28ed4:	9403      	str	r4, [sp, #12]
   28ed6:	f7f4 fa0d 	bl	1d2f4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   28eda:	9b03      	ldr	r3, [sp, #12]
   28edc:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTCLR = clr_mask;
   28ee0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   28ee4:	f04f 0b01 	mov.w	fp, #1
   28ee8:	e00c      	b.n	28f04 <pinctrl_configure_pins+0xc6>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   28eea:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   28eee:	f04f 0901 	mov.w	r9, #1
   28ef2:	e7ee      	b.n	28ed2 <pinctrl_configure_pins+0x94>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   28ef4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   28ef8:	2e00      	cmp	r6, #0
   28efa:	d1dc      	bne.n	28eb6 <pinctrl_configure_pins+0x78>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   28efc:	f04f 0900 	mov.w	r9, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   28f00:	46cb      	mov	fp, r9
				drive = NRF_DRIVE_S0D1;
   28f02:	2606      	movs	r6, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   28f04:	f85a 3b04 	ldr.w	r3, [sl], #4
   28f08:	9301      	str	r3, [sp, #4]
   28f0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   28f0e:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28f10:	a803      	add	r0, sp, #12
   28f12:	bf1c      	itt	ne
   28f14:	f04f 0901 	movne.w	r9, #1
   28f18:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   28f1c:	9403      	str	r4, [sp, #12]
   28f1e:	f7f4 f9e9 	bl	1d2f4 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28f22:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   28f24:	0236      	lsls	r6, r6, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28f26:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   28f2a:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   28f2e:	9b03      	ldr	r3, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28f30:	ea46 060b 	orr.w	r6, r6, fp
    reg->PIN_CNF[pin_number] = cnf;
   28f34:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28f38:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   28f3c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   28f40:	e786      	b.n	28e50 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   28f42:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   28f46:	e7d7      	b.n	28ef8 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   28f48:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   28f4c:	f8da 3000 	ldr.w	r3, [sl]
   28f50:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   28f54:	2b00      	cmp	r3, #0
   28f56:	d0ca      	beq.n	28eee <pinctrl_configure_pins+0xb0>
   28f58:	e79f      	b.n	28e9a <pinctrl_configure_pins+0x5c>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   28f5a:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   28f5e:	e7f5      	b.n	28f4c <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   28f60:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   28f64:	e7f2      	b.n	28f4c <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   28f66:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   28f6a:	e7ef      	b.n	28f4c <pinctrl_configure_pins+0x10e>
		switch (NRF_GET_FUN(pins[i])) {
   28f6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28f70:	e771      	b.n	28e56 <pinctrl_configure_pins+0x18>

00028f72 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   28f72:	2101      	movs	r1, #1
   28f74:	f7f4 bd00 	b.w	1d978 <dk_set_led>

00028f78 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   28f78:	2100      	movs	r1, #0
   28f7a:	f7f4 bcfd 	b.w	1d978 <dk_set_led>

00028f7e <hci_driver_close>:
{
   28f7e:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   28f80:	f7f5 fc14 	bl	1e7ac <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   28f84:	f04f 30ff 	mov.w	r0, #4294967295
   28f88:	f04f 31ff 	mov.w	r1, #4294967295
   28f8c:	f7f4 fd16 	bl	1d9bc <multithreading_lock_acquire>
	if (err) {
   28f90:	4604      	mov	r4, r0
   28f92:	b920      	cbnz	r0, 28f9e <hci_driver_close+0x20>
	err = sdc_disable();
   28f94:	f7db fa66 	bl	4464 <sdc_disable>
	if (err) {
   28f98:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   28f9a:	f7f4 fd17 	bl	1d9cc <multithreading_lock_release>
}
   28f9e:	4620      	mov	r0, r4
   28fa0:	bd10      	pop	{r4, pc}

00028fa2 <hci_driver_send>:
{
   28fa2:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   28fa4:	8983      	ldrh	r3, [r0, #12]
{
   28fa6:	4605      	mov	r5, r0
	if (!buf->len) {
   28fa8:	b373      	cbz	r3, 29008 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   28faa:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   28fac:	b1a3      	cbz	r3, 28fd8 <hci_driver_send+0x36>
   28fae:	2b02      	cmp	r3, #2
   28fb0:	d12a      	bne.n	29008 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   28fb2:	f04f 30ff 	mov.w	r0, #4294967295
   28fb6:	f04f 31ff 	mov.w	r1, #4294967295
   28fba:	f7f4 fcff 	bl	1d9bc <multithreading_lock_acquire>
	if (!errcode) {
   28fbe:	4604      	mov	r4, r0
   28fc0:	b940      	cbnz	r0, 28fd4 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   28fc2:	68a8      	ldr	r0, [r5, #8]
   28fc4:	f7e3 fe4e 	bl	cc64 <sdc_hci_data_put>
   28fc8:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   28fca:	f7f4 fcff 	bl	1d9cc <multithreading_lock_release>
		if (errcode) {
   28fce:	b1b4      	cbz	r4, 28ffe <hci_driver_send+0x5c>
			receive_signal_raise();
   28fd0:	f7f4 fe2e 	bl	1dc30 <receive_signal_raise>
}
   28fd4:	4620      	mov	r0, r4
   28fd6:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   28fd8:	f04f 30ff 	mov.w	r0, #4294967295
   28fdc:	f04f 31ff 	mov.w	r1, #4294967295
   28fe0:	f7f4 fcec 	bl	1d9bc <multithreading_lock_acquire>
	if (!errcode) {
   28fe4:	4604      	mov	r4, r0
   28fe6:	2800      	cmp	r0, #0
   28fe8:	d1f4      	bne.n	28fd4 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   28fea:	68a8      	ldr	r0, [r5, #8]
   28fec:	f7f4 feba 	bl	1dd64 <hci_internal_cmd_put>
   28ff0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   28ff2:	f7f4 fceb 	bl	1d9cc <multithreading_lock_release>
	if (errcode) {
   28ff6:	2c00      	cmp	r4, #0
   28ff8:	d1ec      	bne.n	28fd4 <hci_driver_send+0x32>
	receive_signal_raise();
   28ffa:	f7f4 fe19 	bl	1dc30 <receive_signal_raise>
		net_buf_unref(buf);
   28ffe:	4628      	mov	r0, r5
   29000:	f7f2 fd82 	bl	1bb08 <net_buf_unref>
   29004:	2400      	movs	r4, #0
   29006:	e7e5      	b.n	28fd4 <hci_driver_send+0x32>
	switch (type) {
   29008:	f06f 0415 	mvn.w	r4, #21
   2900c:	e7e2      	b.n	28fd4 <hci_driver_send+0x32>

0002900e <receive_work_handler>:
	hci_driver_receive_process();
   2900e:	f7f4 be37 	b.w	1dc80 <hci_driver_receive_process>

00029012 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   29012:	b530      	push	{r4, r5, lr}
   29014:	b08d      	sub	sp, #52	; 0x34
   29016:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	LOG_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	LOG_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   29018:	4601      	mov	r1, r0
   2901a:	4668      	mov	r0, sp
{
   2901c:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2901e:	f7f5 fa41 	bl	1e4a4 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   29022:	4621      	mov	r1, r4
   29024:	a804      	add	r0, sp, #16
   29026:	f7f5 fa3d 	bl	1e4a4 <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2902a:	f04f 30ff 	mov.w	r0, #4294967295
   2902e:	f04f 31ff 	mov.w	r1, #4294967295
   29032:	f7f4 fcc3 	bl	1d9bc <multithreading_lock_acquire>

	if (!errcode) {
   29036:	4604      	mov	r4, r0
   29038:	b960      	cbnz	r0, 29054 <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2903a:	aa08      	add	r2, sp, #32
   2903c:	a904      	add	r1, sp, #16
   2903e:	4668      	mov	r0, sp
   29040:	f7e3 fb91 	bl	c766 <sdc_soc_ecb_block_encrypt>
   29044:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   29046:	f7f4 fcc1 	bl	1d9cc <multithreading_lock_release>
	}

	if (!errcode) {
   2904a:	b91c      	cbnz	r4, 29054 <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   2904c:	a908      	add	r1, sp, #32
   2904e:	4628      	mov	r0, r5
   29050:	f7f5 fa28 	bl	1e4a4 <sys_memcpy_swap.constprop.0>

		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   29054:	4620      	mov	r0, r4
   29056:	b00d      	add	sp, #52	; 0x34
   29058:	bd30      	pop	{r4, r5, pc}

0002905a <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2905a:	2100      	movs	r1, #0
   2905c:	f7f5 bbc8 	b.w	1e7f0 <cmd_le_generate_dhkey>

00029060 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   29060:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   29064:	2901      	cmp	r1, #1
   29066:	d801      	bhi.n	2906c <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   29068:	f7f5 bbc2 	b.w	1e7f0 <cmd_le_generate_dhkey>
}
   2906c:	2012      	movs	r0, #18
   2906e:	4770      	bx	lr

00029070 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29070:	4668      	mov	r0, sp
   29072:	f020 0107 	bic.w	r1, r0, #7
   29076:	468d      	mov	sp, r1
   29078:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2907a:	f7d9 ffc9 	bl	3010 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2907e:	f7ea f879 	bl	13174 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   29082:	f7ea f961 	bl	13348 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29086:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2908a:	4685      	mov	sp, r0
   2908c:	4770      	bx	lr

0002908e <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2908e:	4668      	mov	r0, sp
   29090:	f020 0107 	bic.w	r1, r0, #7
   29094:	468d      	mov	sp, r1
   29096:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   29098:	f7d9 ff30 	bl	2efc <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2909c:	f7ea f86a 	bl	13174 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   290a0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   290a4:	4685      	mov	sp, r0
   290a6:	4770      	bx	lr

000290a8 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   290a8:	4668      	mov	r0, sp
   290aa:	f020 0107 	bic.w	r1, r0, #7
   290ae:	468d      	mov	sp, r1
   290b0:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   290b2:	f7d7 fc8f 	bl	9d4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   290b6:	f7ea f85d 	bl	13174 <_arch_isr_direct_pm>
   290ba:	f7ea f945 	bl	13348 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   290be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   290c2:	4685      	mov	sp, r0
   290c4:	4770      	bx	lr

000290c6 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   290c6:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   290c8:	f7e3 faec 	bl	c6a4 <mpsl_fem_init>

	return 0;
}
   290cc:	2000      	movs	r0, #0
   290ce:	bd08      	pop	{r3, pc}

000290d0 <nrfx_clock_enable>:
}
   290d0:	4770      	bx	lr

000290d2 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   290d2:	f7da bc0d 	b.w	38f0 <MPSL_IRQ_CLOCK_Handler>

000290d6 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   290d6:	f7da bfc7 	b.w	4068 <mpsl_is_initialized>

000290da <nrf_flash_sync_get_timestamp_begin>:
}
   290da:	4770      	bx	lr

000290dc <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   290dc:	f7f9 bfc2 	b.w	23064 <nrf_cc3xx_platform_init>

000290e0 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   290e0:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   290e2:	f7e9 feb5 	bl	12e50 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   290e6:	f7e9 ff89 	bl	12ffc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   290ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   290ee:	f7f9 bfb9 	b.w	23064 <nrf_cc3xx_platform_init>

000290f2 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   290f2:	4700      	bx	r0

000290f4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   290f4:	f000 b9d8 	b.w	294a8 <z_impl_k_busy_wait>

000290f8 <nrf_gpio_pin_present_check>:
    switch (port)
   290f8:	0943      	lsrs	r3, r0, #5
   290fa:	d00b      	beq.n	29114 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   290fc:	2b01      	cmp	r3, #1
   290fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29102:	bf18      	it	ne
   29104:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   29106:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2910a:	fa23 f000 	lsr.w	r0, r3, r0
}
   2910e:	f000 0001 	and.w	r0, r0, #1
   29112:	4770      	bx	lr
    switch (port)
   29114:	f04f 33ff 	mov.w	r3, #4294967295
   29118:	e7f5      	b.n	29106 <nrf_gpio_pin_present_check+0xe>

0002911a <pin_is_task_output>:
{
   2911a:	b508      	push	{r3, lr}
   2911c:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2911e:	f7f5 fee1 	bl	1eee4 <pin_is_output>
   29122:	b110      	cbz	r0, 2912a <pin_is_task_output+0x10>
   29124:	4610      	mov	r0, r2
   29126:	f7f5 fec7 	bl	1eeb8 <pin_in_use_by_te>
}
   2912a:	f000 0001 	and.w	r0, r0, #1
   2912e:	bd08      	pop	{r3, pc}

00029130 <nrf_gpio_reconfigure>:
{
   29130:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29134:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29136:	a801      	add	r0, sp, #4
{
   29138:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2913c:	460c      	mov	r4, r1
   2913e:	4617      	mov	r7, r2
   29140:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29142:	f7f5 ff4f 	bl	1efe4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29146:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   29148:	1e39      	subs	r1, r7, #0
   2914a:	bf18      	it	ne
   2914c:	2101      	movne	r1, #1
   2914e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29152:	1e23      	subs	r3, r4, #0
   29154:	bf18      	it	ne
   29156:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29158:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2915a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2915e:	bf14      	ite	ne
   29160:	210c      	movne	r1, #12
   29162:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   29164:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   29166:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2916a:	bf14      	ite	ne
   2916c:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   29170:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   29172:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29176:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2917a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2917e:	bf14      	ite	ne
   29180:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   29184:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29186:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   29188:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2918c:	b104      	cbz	r4, 29190 <nrf_gpio_reconfigure+0x60>
   2918e:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   29190:	b10f      	cbz	r7, 29196 <nrf_gpio_reconfigure+0x66>
   29192:	783f      	ldrb	r7, [r7, #0]
   29194:	007f      	lsls	r7, r7, #1
   29196:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   29198:	b10e      	cbz	r6, 2919e <nrf_gpio_reconfigure+0x6e>
   2919a:	7836      	ldrb	r6, [r6, #0]
   2919c:	00b6      	lsls	r6, r6, #2
   2919e:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   291a0:	b18d      	cbz	r5, 291c6 <nrf_gpio_reconfigure+0x96>
   291a2:	7829      	ldrb	r1, [r5, #0]
   291a4:	0209      	lsls	r1, r1, #8
   291a6:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   291a8:	f1b8 0f00 	cmp.w	r8, #0
   291ac:	d003      	beq.n	291b6 <nrf_gpio_reconfigure+0x86>
   291ae:	f898 8000 	ldrb.w	r8, [r8]
   291b2:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   291b6:	4321      	orrs	r1, r4
   291b8:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   291bc:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   291c0:	b002      	add	sp, #8
   291c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   291c6:	4629      	mov	r1, r5
   291c8:	e7ed      	b.n	291a6 <nrf_gpio_reconfigure+0x76>

000291ca <nrf_gpio_cfg_sense_set>:
{
   291ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   291cc:	f10d 030f 	add.w	r3, sp, #15
   291d0:	9301      	str	r3, [sp, #4]
   291d2:	2300      	movs	r3, #0
{
   291d4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   291d8:	9300      	str	r3, [sp, #0]
   291da:	461a      	mov	r2, r3
   291dc:	4619      	mov	r1, r3
   291de:	f7ff ffa7 	bl	29130 <nrf_gpio_reconfigure>
}
   291e2:	b005      	add	sp, #20
   291e4:	f85d fb04 	ldr.w	pc, [sp], #4

000291e8 <is_valid_address>:
{
   291e8:	4603      	mov	r3, r0
   291ea:	4608      	mov	r0, r1
   291ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   291f0:	690a      	ldr	r2, [r1, #16]
    return p_reg->CODESIZE;
   291f2:	6949      	ldr	r1, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   291f4:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   291f6:	4293      	cmp	r3, r2
   291f8:	d308      	bcc.n	2920c <is_valid_address+0x24>
    if (uicr_allowed &&
   291fa:	b140      	cbz	r0, 2920e <is_valid_address+0x26>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   291fc:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   29200:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
   29204:	bf2c      	ite	cs
   29206:	2000      	movcs	r0, #0
   29208:	2001      	movcc	r0, #1
   2920a:	4770      	bx	lr
        return true;
   2920c:	2001      	movs	r0, #1
}
   2920e:	4770      	bx	lr

00029210 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   29210:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29214:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   29216:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   29218:	4350      	muls	r0, r2
   2921a:	4770      	bx	lr

0002921c <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2921c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29220:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   29222:	4770      	bx	lr

00029224 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   29224:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29228:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2922a:	4770      	bx	lr

0002922c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2922c:	f7f6 ba9a 	b.w	1f764 <_DoInit>

00029230 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   29230:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   29232:	f7ff fffb 	bl	2922c <SEGGER_RTT_Init>

	return 0;
}
   29236:	2000      	movs	r0, #0
   29238:	bd08      	pop	{r3, pc}

0002923a <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2923a:	4770      	bx	lr

0002923c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2923c:	b140      	cbz	r0, 29250 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2923e:	68c3      	ldr	r3, [r0, #12]
   29240:	7858      	ldrb	r0, [r3, #1]
   29242:	f010 0001 	ands.w	r0, r0, #1
   29246:	bf1e      	ittt	ne
   29248:	7818      	ldrbne	r0, [r3, #0]
   2924a:	fab0 f080 	clzne	r0, r0
   2924e:	0940      	lsrne	r0, r0, #5
}
   29250:	4770      	bx	lr

00029252 <z_early_memset>:
	(void) memset(dst, c, n);
   29252:	f7fd bd1e 	b.w	26c92 <memset>

00029256 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   29256:	f7fd bd11 	b.w	26c7c <memcpy>

0002925a <k_heap_init>:
{
   2925a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2925c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   29260:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   29264:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   29266:	f7e7 bf17 	b.w	11098 <sys_heap_init>

0002926a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2926a:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   2926e:	4313      	orrs	r3, r2
   29270:	f013 0303 	ands.w	r3, r3, #3
   29274:	d10c      	bne.n	29290 <create_free_list+0x26>
	slab->free_list = NULL;
   29276:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   29278:	68c1      	ldr	r1, [r0, #12]
   2927a:	4299      	cmp	r1, r3
   2927c:	d801      	bhi.n	29282 <create_free_list+0x18>
	return 0;
   2927e:	2000      	movs	r0, #0
   29280:	4770      	bx	lr
		*(char **)p = slab->free_list;
   29282:	6981      	ldr	r1, [r0, #24]
   29284:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   29286:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   29288:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2928a:	3301      	adds	r3, #1
		p += slab->block_size;
   2928c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2928e:	e7f3      	b.n	29278 <create_free_list+0xe>
		return -EINVAL;
   29290:	f06f 0015 	mvn.w	r0, #21
}
   29294:	4770      	bx	lr

00029296 <k_mem_slab_init>:
{
   29296:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   29298:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->num_used = 0U;
   2929c:	2300      	movs	r3, #0
	slab->buffer = buffer;
   2929e:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   292a0:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   292a2:	6083      	str	r3, [r0, #8]
{
   292a4:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   292a6:	f7ff ffe0 	bl	2926a <create_free_list>
	if (rc < 0) {
   292aa:	2800      	cmp	r0, #0
   292ac:	bfa8      	it	ge
   292ae:	e9c4 4400 	strdge	r4, r4, [r4]
}
   292b2:	bd10      	pop	{r4, pc}

000292b4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   292b4:	f3ef 8005 	mrs	r0, IPSR
}
   292b8:	3800      	subs	r0, #0
   292ba:	bf18      	it	ne
   292bc:	2001      	movne	r0, #1
   292be:	4770      	bx	lr

000292c0 <z_impl_k_thread_name_set>:
}
   292c0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   292c4:	4770      	bx	lr

000292c6 <k_thread_name_get>:
}
   292c6:	2000      	movs	r0, #0
   292c8:	4770      	bx	lr

000292ca <z_impl_k_thread_start>:
	z_sched_start(thread);
   292ca:	f7f7 bfc1 	b.w	21250 <z_sched_start>

000292ce <z_pm_save_idle_exit>:
{
   292ce:	b508      	push	{r3, lr}
	pm_system_resume();
   292d0:	f7e9 fbc2 	bl	12a58 <pm_system_resume>
}
   292d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   292d8:	f7ff bd9a 	b.w	28e10 <sys_clock_idle_exit>

000292dc <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   292dc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   292e0:	428b      	cmp	r3, r1
   292e2:	d001      	beq.n	292e8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   292e4:	f7f8 ba2e 	b.w	21744 <z_set_prio>
}
   292e8:	2000      	movs	r0, #0
   292ea:	4770      	bx	lr

000292ec <z_impl_k_mutex_init>:
{
   292ec:	4603      	mov	r3, r0
	mutex->owner = NULL;
   292ee:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   292f0:	e9c3 0002 	strd	r0, r0, [r3, #8]
   292f4:	e9c3 3300 	strd	r3, r3, [r3]
}
   292f8:	4770      	bx	lr

000292fa <z_queue_node_peek>:
{
   292fa:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   292fc:	4604      	mov	r4, r0
   292fe:	b130      	cbz	r0, 2930e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29300:	6802      	ldr	r2, [r0, #0]
   29302:	0793      	lsls	r3, r2, #30
   29304:	d003      	beq.n	2930e <z_queue_node_peek+0x14>
		ret = anode->data;
   29306:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   29308:	b109      	cbz	r1, 2930e <z_queue_node_peek+0x14>
			k_free(anode);
   2930a:	f000 f994 	bl	29636 <k_free>
}
   2930e:	4620      	mov	r0, r4
   29310:	bd10      	pop	{r4, pc}

00029312 <z_impl_k_queue_init>:
	list->head = NULL;
   29312:	2300      	movs	r3, #0
	list->tail = NULL;
   29314:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   29318:	6083      	str	r3, [r0, #8]
   2931a:	f100 030c 	add.w	r3, r0, #12
   2931e:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   29322:	f100 0314 	add.w	r3, r0, #20
   29326:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2932a:	4770      	bx	lr

0002932c <k_queue_append>:
{
   2932c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2932e:	2301      	movs	r3, #1
   29330:	9300      	str	r3, [sp, #0]
   29332:	2300      	movs	r3, #0
{
   29334:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   29336:	4619      	mov	r1, r3
   29338:	f7f6 ffc4 	bl	202c4 <queue_insert>
}
   2933c:	b003      	add	sp, #12
   2933e:	f85d fb04 	ldr.w	pc, [sp], #4

00029342 <k_queue_prepend>:
{
   29342:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   29344:	2300      	movs	r3, #0
{
   29346:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   29348:	9300      	str	r3, [sp, #0]
   2934a:	4619      	mov	r1, r3
   2934c:	f7f6 ffba 	bl	202c4 <queue_insert>
}
   29350:	b003      	add	sp, #12
   29352:	f85d fb04 	ldr.w	pc, [sp], #4

00029356 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   29356:	b15a      	cbz	r2, 29370 <z_impl_k_sem_init+0x1a>
   29358:	428a      	cmp	r2, r1
   2935a:	d309      	bcc.n	29370 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2935c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   29360:	e9c0 1202 	strd	r1, r2, [r0, #8]
   29364:	e9c0 0000 	strd	r0, r0, [r0]
   29368:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2936c:	2000      	movs	r0, #0
   2936e:	4770      	bx	lr
		return -EINVAL;
   29370:	f06f 0015 	mvn.w	r0, #21
}
   29374:	4770      	bx	lr

00029376 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   29376:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   29378:	2301      	movs	r3, #1
   2937a:	408b      	lsls	r3, r1
   2937c:	ea22 0303 	bic.w	r3, r2, r3
   29380:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   29382:	fa22 f001 	lsr.w	r0, r2, r1
}
   29386:	f000 0001 	and.w	r0, r0, #1
   2938a:	4770      	bx	lr

0002938c <unschedule_locked>:
{
   2938c:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2938e:	2103      	movs	r1, #3
{
   29390:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29392:	300c      	adds	r0, #12
   29394:	f7ff ffef 	bl	29376 <flag_test_and_clear>
   29398:	4604      	mov	r4, r0
   2939a:	b118      	cbz	r0, 293a4 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2939c:	f105 0010 	add.w	r0, r5, #16
   293a0:	f7f8 fecc 	bl	2213c <z_abort_timeout>
}
   293a4:	4620      	mov	r0, r4
   293a6:	bd38      	pop	{r3, r4, r5, pc}

000293a8 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   293a8:	b120      	cbz	r0, 293b4 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   293aa:	2200      	movs	r2, #0
   293ac:	4611      	mov	r1, r2
   293ae:	3088      	adds	r0, #136	; 0x88
   293b0:	f7f8 bd52 	b.w	21e58 <z_sched_wake>
}
   293b4:	4770      	bx	lr

000293b6 <cancel_async_locked>:
{
   293b6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   293b8:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   293ba:	f3c3 0640 	ubfx	r6, r3, #1, #1
   293be:	079b      	lsls	r3, r3, #30
{
   293c0:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   293c2:	d416      	bmi.n	293f2 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   293c4:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   293c6:	2102      	movs	r1, #2
   293c8:	300c      	adds	r0, #12
   293ca:	f7ff ffd4 	bl	29376 <flag_test_and_clear>
   293ce:	b180      	cbz	r0, 293f2 <cancel_async_locked+0x3c>
	return list->head;
   293d0:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   293d4:	b16a      	cbz	r2, 293f2 <cancel_async_locked+0x3c>
   293d6:	4294      	cmp	r4, r2
   293d8:	d11d      	bne.n	29416 <cancel_async_locked+0x60>
	return node->next;
   293da:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   293dc:	b99e      	cbnz	r6, 29406 <cancel_async_locked+0x50>
   293de:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   293e2:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   293e6:	429c      	cmp	r4, r3
   293e8:	d101      	bne.n	293ee <cancel_async_locked+0x38>
	list->tail = node;
   293ea:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   293ee:	2300      	movs	r3, #0
   293f0:	6023      	str	r3, [r4, #0]
	return *flagp;
   293f2:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   293f4:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   293f8:	bf1e      	ittt	ne
   293fa:	f043 0302 	orrne.w	r3, r3, #2
   293fe:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   29400:	f040 0002 	orrne.w	r0, r0, #2
}
   29404:	bd70      	pop	{r4, r5, r6, pc}
   29406:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   29408:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   2940c:	4294      	cmp	r4, r2
	list->tail = node;
   2940e:	bf08      	it	eq
   29410:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   29414:	e7eb      	b.n	293ee <cancel_async_locked+0x38>
	return node->next;
   29416:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29418:	6812      	ldr	r2, [r2, #0]
   2941a:	e7db      	b.n	293d4 <cancel_async_locked+0x1e>

0002941c <k_work_submit_to_queue>:
{
   2941c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2941e:	f7f7 fb69 	bl	20af4 <z_work_submit_to_queue>
	if (ret > 0) {
   29422:	1e04      	subs	r4, r0, #0
   29424:	dd09      	ble.n	2943a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   29426:	f04f 0340 	mov.w	r3, #64	; 0x40
   2942a:	f3ef 8011 	mrs	r0, BASEPRI
   2942e:	f383 8812 	msr	BASEPRI_MAX, r3
   29432:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   29436:	f000 f80d 	bl	29454 <z_reschedule_irqlock>
}
   2943a:	4620      	mov	r0, r4
   2943c:	bd10      	pop	{r4, pc}

0002943e <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2943e:	f7f7 bb25 	b.w	20a8c <k_work_busy_get>

00029442 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   29442:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   29446:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2944a:	4283      	cmp	r3, r0
		return b2 - b1;
   2944c:	bf14      	ite	ne
   2944e:	1ac0      	subne	r0, r0, r3
	return 0;
   29450:	2000      	moveq	r0, #0
}
   29452:	4770      	bx	lr

00029454 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29454:	4603      	mov	r3, r0
   29456:	b920      	cbnz	r0, 29462 <z_reschedule_irqlock+0xe>
   29458:	f3ef 8205 	mrs	r2, IPSR
   2945c:	b90a      	cbnz	r2, 29462 <z_reschedule_irqlock+0xe>
   2945e:	f7e9 beb7 	b.w	131d0 <arch_swap>
	__asm__ volatile(
   29462:	f383 8811 	msr	BASEPRI, r3
   29466:	f3bf 8f6f 	isb	sy
}
   2946a:	4770      	bx	lr

0002946c <z_reschedule_unlocked>:
	__asm__ volatile(
   2946c:	f04f 0340 	mov.w	r3, #64	; 0x40
   29470:	f3ef 8011 	mrs	r0, BASEPRI
   29474:	f383 8812 	msr	BASEPRI_MAX, r3
   29478:	f3bf 8f6f 	isb	sy
   2947c:	f7ff bfea 	b.w	29454 <z_reschedule_irqlock>

00029480 <z_unpend_all>:
{
   29480:	b538      	push	{r3, r4, r5, lr}
   29482:	4605      	mov	r5, r0
	int need_sched = 0;
   29484:	2000      	movs	r0, #0
	return list->head == list;
   29486:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29488:	42a5      	cmp	r5, r4
   2948a:	d000      	beq.n	2948e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2948c:	b904      	cbnz	r4, 29490 <z_unpend_all+0x10>
}
   2948e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   29490:	4620      	mov	r0, r4
   29492:	f7f8 fa47 	bl	21924 <z_unpend_thread>
		z_ready_thread(thread);
   29496:	4620      	mov	r0, r4
   29498:	f7f7 fe72 	bl	21180 <z_ready_thread>
		need_sched = 1;
   2949c:	2001      	movs	r0, #1
   2949e:	e7f2      	b.n	29486 <z_unpend_all+0x6>

000294a0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   294a0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   294a2:	f7f8 ff85 	bl	223b0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   294a6:	bd08      	pop	{r3, pc}

000294a8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   294a8:	b108      	cbz	r0, 294ae <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   294aa:	f7ea bb61 	b.w	13b70 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   294ae:	4770      	bx	lr

000294b0 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   294b0:	f1b1 3fff 	cmp.w	r1, #4294967295
   294b4:	bf08      	it	eq
   294b6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   294ba:	b538      	push	{r3, r4, r5, lr}
   294bc:	460c      	mov	r4, r1
   294be:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   294c0:	d014      	beq.n	294ec <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   294c2:	4308      	orrs	r0, r1
   294c4:	d103      	bne.n	294ce <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   294c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   294ca:	f7f8 bf71 	b.w	223b0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   294ce:	f06f 0001 	mvn.w	r0, #1
   294d2:	1b40      	subs	r0, r0, r5
   294d4:	f04f 33ff 	mov.w	r3, #4294967295
   294d8:	eb63 0101 	sbc.w	r1, r3, r1
   294dc:	2900      	cmp	r1, #0
   294de:	da04      	bge.n	294ea <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   294e0:	f7f8 ff66 	bl	223b0 <sys_clock_tick_get>
   294e4:	1940      	adds	r0, r0, r5
   294e6:	eb41 0104 	adc.w	r1, r1, r4
}
   294ea:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   294ec:	f04f 30ff 	mov.w	r0, #4294967295
   294f0:	4601      	mov	r1, r0
   294f2:	e7fa      	b.n	294ea <sys_clock_timeout_end_calc+0x3a>

000294f4 <add_event>:
{
   294f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   294f6:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   294f8:	e9d0 1300 	ldrd	r1, r3, [r0]
   294fc:	4288      	cmp	r0, r1
   294fe:	4604      	mov	r4, r0
   29500:	d105      	bne.n	2950e <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   29502:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   29504:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   29508:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2950a:	6065      	str	r5, [r4, #4]
   2950c:	e01d      	b.n	2954a <add_event+0x56>
	if ((pending == NULL) ||
   2950e:	2b00      	cmp	r3, #0
   29510:	d0f7      	beq.n	29502 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29512:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29514:	b100      	cbz	r0, 29518 <add_event+0x24>
   29516:	3860      	subs	r0, #96	; 0x60
   29518:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2951c:	4639      	mov	r1, r7
   2951e:	f7ff ff90 	bl	29442 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   29522:	2800      	cmp	r0, #0
   29524:	dced      	bgt.n	29502 <add_event+0xe>
	return list->head == list;
   29526:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29528:	42b4      	cmp	r4, r6
   2952a:	d0ea      	beq.n	29502 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2952c:	2e00      	cmp	r6, #0
   2952e:	d0e8      	beq.n	29502 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   29530:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29532:	b101      	cbz	r1, 29536 <add_event+0x42>
   29534:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   29536:	4638      	mov	r0, r7
   29538:	f7ff ff83 	bl	29442 <z_sched_prio_cmp>
   2953c:	2800      	cmp	r0, #0
   2953e:	dd05      	ble.n	2954c <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   29540:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   29542:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   29546:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   29548:	6075      	str	r5, [r6, #4]
}
   2954a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2954c:	6863      	ldr	r3, [r4, #4]
   2954e:	429e      	cmp	r6, r3
   29550:	d0d7      	beq.n	29502 <add_event+0xe>
   29552:	6836      	ldr	r6, [r6, #0]
   29554:	e7ea      	b.n	2952c <add_event+0x38>

00029556 <signal_poll_event>:
{
   29556:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2955a:	6884      	ldr	r4, [r0, #8]
{
   2955c:	4605      	mov	r5, r0
   2955e:	460e      	mov	r6, r1
	if (poller != NULL) {
   29560:	b144      	cbz	r4, 29574 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   29562:	7863      	ldrb	r3, [r4, #1]
   29564:	2b01      	cmp	r3, #1
   29566:	d12e      	bne.n	295c6 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   29568:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2956c:	f013 0302 	ands.w	r3, r3, #2
   29570:	d10a      	bne.n	29588 <signal_poll_event+0x32>
		poller->is_polling = false;
   29572:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   29574:	68eb      	ldr	r3, [r5, #12]
   29576:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2957a:	4316      	orrs	r6, r2
	event->poller = NULL;
   2957c:	2000      	movs	r0, #0
	event->state |= state;
   2957e:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   29582:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   29584:	60eb      	str	r3, [r5, #12]
	return retcode;
   29586:	e03e      	b.n	29606 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   29588:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2958c:	f1b3 3fff 	cmp.w	r3, #4294967295
   29590:	bf08      	it	eq
   29592:	f112 0f02 	cmneq.w	r2, #2
   29596:	d032      	beq.n	295fe <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29598:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2959c:	4640      	mov	r0, r8
   2959e:	f7f8 f9c1 	bl	21924 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   295a2:	2e08      	cmp	r6, #8
   295a4:	bf0c      	ite	eq
   295a6:	f06f 0303 	mvneq.w	r3, #3
   295aa:	2300      	movne	r3, #0
   295ac:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   295ae:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   295b2:	06db      	lsls	r3, r3, #27
   295b4:	d109      	bne.n	295ca <signal_poll_event+0x74>
   295b6:	f854 7c48 	ldr.w	r7, [r4, #-72]
   295ba:	b937      	cbnz	r7, 295ca <signal_poll_event+0x74>
	z_ready_thread(thread);
   295bc:	4640      	mov	r0, r8
   295be:	f7f7 fddf 	bl	21180 <z_ready_thread>
		poller->is_polling = false;
   295c2:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   295c4:	e7d6      	b.n	29574 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   295c6:	2b02      	cmp	r3, #2
   295c8:	d001      	beq.n	295ce <signal_poll_event+0x78>
		poller->is_polling = false;
   295ca:	2300      	movs	r3, #0
   295cc:	e7d1      	b.n	29572 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   295ce:	7823      	ldrb	r3, [r4, #0]
   295d0:	2b00      	cmp	r3, #0
   295d2:	d0cf      	beq.n	29574 <signal_poll_event+0x1e>
   295d4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   295d8:	2f00      	cmp	r7, #0
   295da:	d0f2      	beq.n	295c2 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   295dc:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   295e0:	f1a4 0914 	sub.w	r9, r4, #20
   295e4:	f104 0014 	add.w	r0, r4, #20
   295e8:	f7f8 fda8 	bl	2213c <z_abort_timeout>
		twork->poll_result = 0;
   295ec:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   295f0:	4649      	mov	r1, r9
   295f2:	4638      	mov	r0, r7
   295f4:	f7f7 fa7e 	bl	20af4 <z_work_submit_to_queue>
		poller->is_polling = false;
   295f8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   295fc:	e7ba      	b.n	29574 <signal_poll_event+0x1e>
		poller->is_polling = false;
   295fe:	2300      	movs	r3, #0
   29600:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   29602:	f06f 000a 	mvn.w	r0, #10
}
   29606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002960a <z_handle_obj_poll_events>:
{
   2960a:	4603      	mov	r3, r0
	return list->head == list;
   2960c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2960e:	4283      	cmp	r3, r0
   29610:	d008      	beq.n	29624 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   29612:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   29616:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29618:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2961a:	2300      	movs	r3, #0
	node->prev = NULL;
   2961c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   29620:	f7ff bf99 	b.w	29556 <signal_poll_event>
}
   29624:	4770      	bx	lr

00029626 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   29626:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   29628:	e9c0 0000 	strd	r0, r0, [r0]
   2962c:	6083      	str	r3, [r0, #8]
}
   2962e:	4770      	bx	lr

00029630 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   29630:	2300      	movs	r3, #0
   29632:	6083      	str	r3, [r0, #8]
}
   29634:	4770      	bx	lr

00029636 <k_free>:
	if (ptr != NULL) {
   29636:	b120      	cbz	r0, 29642 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   29638:	1f01      	subs	r1, r0, #4
   2963a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2963e:	f7f6 babd 	b.w	1fbbc <k_heap_free>
}
   29642:	4770      	bx	lr

00029644 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   29644:	4770      	bx	lr
	...
